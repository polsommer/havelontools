IMPORTANT Requirements:
automake >= 1.6 < 1.7
autoconf >= 2.57
libtool-1.4x
gcc-2.95-3 or gcc-3.2.x
ibm java2 1.3.1 installed in /usr/java
/usr/java/bin must precede any other java binary in the path
stlport-4.5.3 sources
oracle 9.2.0 in /opt/app/oracle/product/9.2.0

Buidling from the command line

QUICKSTART (**** PREFERRED SETUP ****):
1. Fresh from source control:

$ ./siteSetup

This will create Makefile.in's and configure scripts for site 
reconfiguration as site build options change during development. It
will also run the configure steps necessary to start building the 
project.

2. Skip to step 3 in MANUAL CONFIGURATION





MANUAL CONFIGURATION:
1. Fresh from source control:

$ ./bootstrap

This will create Makefile.in's and configure scripts to configure the
source for the site.

2. After site has been bootstrapped

2.1 For debug code

$ CFLAGS="-g3 -O0" CXXFLAGS="-g3 -O0" ./configure --prefix=<path to dev directory, e.g. /swg/swg/current/dev> --enable-debug --disable-static

2.2 For debug-optimized code
$ CFLAGS="-g -O2" CXXFLAGS="-g -O2" ./configyre --prefix=<path to dev directory, e.g. /swg/swg/current/dev> --enable-debug --disable-static

2.3 For optimized code
$ CFLAGS="-O2" CXXFLAGS="-O2" ./configyre --prefix=<path to dev directory, e.g. /swg/swg/current/dev> --enable-debug

3. For an already configured site (day to day operation)
$ make install

4. Running the applications.
Executables are installed in $PREFIX/bin. Libraries reside in
$PREFIX/lib, where prefix was defined during configure with the
--prefix=XXX parameter. If prefix was /swg/swg/current/dev then

$ cd /swg/swg/current/dev/bin
$ ./LoginServer -- @loginServer.cfg &
$ ./TaskManager -- @taskManager.cfg

5. Adding and removing source files
Each directory contains a Makefile.am. This file specifies sources and
flags specific to the target. If a file (NewMessage.cpp and NewMessage.h)
is added to sharedNetworkMessages/src/shared/chat, for example, edit
sharedNetworkMessages/src/shared/chat/Makefile.am and add
NewMessage.cpp to the libsharedNetworkMessagessharedchat_la_SOURCES
variable.

If a file is being removed from the build, be sure to remove it from
its respective Makefile.am.

5.1 Adding and removing directories
Makefile.am's contain a SUBDIRS variable that indicates which sub directories the
build system should recurse into. The bootstrap process takes Makefile.am's and 
generates Makefile.in's, which are in turn used by configure.in to generate 
site-specific build options.

To add a new subdirectory, open the parent directory's Makefile.am
edit parentDir/Makefile.am
SUBDIRS=subDir .

edit configure.in (there is on in the src, src/engine src/game and each 
src/external/ours/library/<project> directory. Add a line to AC_OUTPUT to tell
configure.in to generate a Makefile from Makefile.in.

Be sure to add the appropriate link commands if there are executables that
require a new library created in the subdirectory, or if the subdirectory
contains a utility library (noinst_LTLIBRARY), add it to the appropriate
installed library (see sharedGame for an example of utility libraries and
how they are used)

run the bootstrap process.

6. Other notes
If you are building on Linux, and have KDE version 3.1.x or better,
try using KDevelop 3. It has integrated automake support and a LOT of
very nice features that make it even easier to use than the best
commercial dev environments.

7. Multiple build configurations (e.g. debug vs optimized, side by side)
Building multiple targets (configurations) is possible. Go to the directory
where the new build type will keep it's object files (e.g. debug) and
run configure. For example:
$ cd /swg/swg/current/src/debug && CXXFLAGS="-O0 -g3" /swg/swg/current/src/configure --enable-debug=full --prefix=/swg/swg/current/dev
might be used to create a debug build whereas:
$ cd /swg/swg/current/src/debug && CXXFLAGS="-O0 -g3 -pg" /swg/swg/current/src/configure --enable-debug=full --prefix=/swg/swg/current/dev
might build a debug version with profiling information
or
$ cd /swg/swg/current/src/debug && CXXFLAGS="-O3 -g3 -mcpu=pentium4 -march=pentium4 -mfpmath=sse -mmmx -sse -sse2" /swg/swg/current/src/configure --prefix=/swg/swg/current/dev
might build SWG heavily optimized for the target CPU/Architecture

8. Using KDevelop3:

Setup the project:

a. Make a symbolic link from bootstrap to autogen.sh.

b. From the project menu, select "import existing project". Choose 
"Automake based project, C++" and point it to the branch's top-level 
src directory. 

c. From the build menu, select "Run Automake and friends" then "configure"

d. From the build menu, select "install"

