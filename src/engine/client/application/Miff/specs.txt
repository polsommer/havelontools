From:   Jeff Grills [SMTP:jefftep@frenzy.com]
Sent:   Tuesday, October 20, 1998 12:25 PM
To: 'Ikeda, Tony'
Cc: 'Sommers, Andy'
Subject:    Miff specs

Here's a first pass at some specs for Miff.  It should be enough to get
started, and keep working for a good number of days.

Miff should take a input file text files and generate output binary Iff
files.

Iff files are composed of blocks.  A block is either a chunk or a form.
Chunks contain raw data.  Forms contain other blocks, but no raw data.

Forms should  be specified using:

    form "NAME"
    {
    }

and chunks like:

    chunk "CHNK"
    {
    }

where the 4 letters inside the quotes determine the name of the form or
chunk.  Note that, if you were to name a chunk "FORM", it would be
indistinguishable from a form in the data file.

A chunk, on disk, is composed of a 4-byte network-byte-order name, followed
by a 4-byte network-byte-order length.  We may choose to go with
little-endian format for this for speed purposes, but it seems to me that we
should stick with the standard.  Chunk data is always padded to a 2-byte
boundary, although the length of the chunk is still the exact number of
bytes in the chunk before padding.  If we do decide to go with our own
tweaked version of the standard, I'd like chunk data to be padded to a
4-byte boundary instead.

A form, on disk, is very similar to a chunk.  It consists of a 4-byte
network-byte-order name of "FORM", followed by a 4-byte network-byte-order
length, and a 4-byte network-byte-order name for the form.  A form is really
a special case of a chunk, so the length of the form includes the 4 bytes
that make up the name of the form.

There may be multiple blocks at the root level.

Miff should be able to process, but ignore, C and C++ style comments.

The contents of the source Miff file should be run through a C preprocessor
(CPP) first before being processed by your input.  I'd suggest getting ahold
of the GNU CPP source, and building that.  The you should be able to invoke
the CPP through a pipe.  This will mean that our Miff source can use the CPP
without actually integrating any of its source, which will allow us to not
have to put our Miff program under GPL.  This will allow us to use #include
files in Miff with little effort on your part, as well as using the full
suite of other CPP macros, token pasting operators, and stringizing
operators.

It should support the following core types:
    int32
    int16
    int8
    uint32
    uint16
    uint8
    float
    double
    string

You should also be able to include a binary file as raw data in a chunk
using the include (no # sign in front of it) directive.

It should also support processing C++ enums (with optional explicit
assignment), and const int/float/double declarations to obtain symbolic
names for magic numbers.

Basic math operations should be supported by miff, including all the
standard C math operators, as well as the bit operators, and the sin/cos/tan
family of functions.  You should make it easy to add new operators and
functions as necessary.

I'd also like some way for the miff file to specify it's output file drive,
filename, extension, and directory.  These should only be obeyed if a
command line switch (like -i for install) is specified on the command line.

Here's some sample test data I'm making up off the top of my head:

----- CUT HERE -----

#pragma drive     "c:"
#pragma directory "\new\data\shared\test"
#pragma filename  "testout"
#pragma extension ".iff"

form "TEST"
{
    chunk "DATA"
    {
        int32 0
        float 5.0
        int8  3
        // this chunk should be padded 1 byte according to the iff standard
    }
    chunk "MATH"
    {
        // this should obey normal math conventions, and do 5 + (3 * 2)
        int32 5 + 3 * 2

        // these functions should operator in radians
        float sin(3.14159)
    }
}

#define RECORD(a,b) int32 a  float b

form "TWO "
{
    CHUNK "MACR"
    {
        RECORD(5, 6.0)
        RECORD(4, 5.0)
    }
}
chunk "THRE"
{
    include "binary.file"
}

----- CUT HERE -----

Any questions?

jefftep


-----Original Message-----
From: Hideki A. Ikeda [mailto:hidekiai@netcom.com]
Sent: Wednesday, October 21, 1998 2:18 PM
To: 'jefftep@frenzy.com'
Cc: 'Sommers, Andy'
Subject: RE: Miff specs


On Tuesday, October 20, 1998 12:25 PM, Jeff Grills
[SMTP:jefftep@frenzy.com] wrote:
[snip]
> The contents of the source Miff file should be run through a C
> preprocessor
> (CPP) first before being processed by your input.  I'd suggest getting
> ahold
> of the GNU CPP source, and building that.  The you should be able to
> invoke
> the CPP through a pipe.  This will mean that our Miff source can use the
> CPP
> without actually integrating any of its source, which will allow us to
> not
> have to put our Miff program under GPL.  This will allow us to use
> #include
> files in Miff with little effort on your part, as well as using the full
[snip]

I am not sure I understand fully of what the above means.  Can you please
explain a little more about the above specs?  I'm assuming that mIFF
should allow C++ syntax, shouldn't this be done thru the parser?  Why do I
need a GNU CPP source?  I'm also not sure what it means by piping thru the
CPP and integrating any of its source...

-----Original Message-----
From:   Jeff Grills [SMTP:jefftep@frenzy.com]
Sent: Wednesday, October 21, 1998 2:18 PM
To: 'Ikeda, Tony'
Cc: 'Sommers, Andy'
Subject:    Miff specs

miff should not need to handle much C++ source parsing, other than constant
declarations and enums.  I'm using CPP here to mean the ANSI C pre
processor, not the language C++.  The most common things done with the CPP
are #include files, #define macros and conditional compilation with #if and
#ifdef.  There are some other, more esoteric functions like the stringizing
operator and the token pasting operator.  Rather than implementing a CPP
from scratch (which is a tough project), you should be able to get the GNU
CPP source and build a cpp.exe that will do all this for you.  Then, you
should be able to invoke the cpp.exe from within miff.exe, and using a pipe
(or some such construct), feed the source file into cpp.exe and read
preprocessed data out of it.  Then you should perform the miffing on the
preprocessed data stream coming out of cpp.exe.  Because you're invoking
cpp.exe from within miff.exe, miff.exe doesn't actually contain any of the
source code for cpp.exe, so miff.exe won't fall under the GNU copyright that
will still be applicable to cpp.exe.

I hope that clears it up some.  If not, we should probably resort to a phone
conversation.

jefftep


-----Original Message-----
From:	Jeff Grills [SMTP:jefftep@bootprint.com]
Sent:	Tuesday, January 05, 1999 11:23 AM
To:	'hikeda@bootprint.com'; 'Todd Fiala'
Subject:	RE: mIFF and strings


I personally don't believe that miff should have any GUI.  If necessary, it 
seems that we could have a cute little interface program for it that
invokes the command line version in the background, and captures the
output, and displays it in a results buffer much like MSVC does for its
external tools.  We could even use Miff as an external tool within MSVC if
it behaved in this manner.  That being said, it would also be nice if miff
could format its error messages in the manner that MSVC parses them (either 
by default or via a command line switch like in pc-lint) so that you could
click on a Miff error in the output dialog box of MSVC and be taken to the
source location the error message specifies.

jefftep

-----Original Message-----
From:	Todd Fiala [SMTP:tfiala@bootprint.com]
Sent:	Tuesday, January 05, 1999 12:25 PM
To:	'Jeff Grills'; 'hikeda@bootprint.com'
Subject:	RE: mIFF and strings

Here's a question:

Why do we require the specification of a drive, directory, filename
and extension of an output file within the mif file?  Forcing
the declaration of those items within the MIF file means that these
items will be hardcoded in the data files.  Is there any benefit to this
as opposed to specifying the output file on the command line? (e.g. -o
outputname.iff)

One downside to forcing the specification of the drive, directory,
filename and extension within the data file: I would have to change
all data files if I was to build the data on a different drive (i.e.
perhaps at home I build data under drive "d:", while at work I build
data under drive "c:").  Typically I would take care of this in the data
makefile by specifying a source and destination path variable (i.e. set
dest_path_base="c:\new\data" or something similar).
Then I would only need to change the dest_path_base once to affect the
build location of all data files within that makefile/batchfile.

-Todd

-----Original Message-----
From:	Jeff Grills [SMTP:jefftep@bootprint.com]
Sent:	Tuesday, January 05, 1999 1:47 PM
To:	'hikeda@bootprint.com'; 'Todd Fiala'
Subject:	RE: mIFF and strings


The pragmas were intended to be optional.  If they are not present, the
file should output to the current directory, with the same filename except
an extension of .iff should be used.

jefftep

-----Original Message-----
From:	Todd Fiala [SMTP:tfiala@bootprint.com]
Sent:	Tuesday, January 05, 1999 2:03 PM
To:	'Jeff Grills'; 'hikeda@bootprint.com'
Subject:	RE: mIFF and strings

Okay, here's a spec on which I'd like to get comments.  The
following lists the proposed order of determining the proper
output file path for mIFF:

1. if the following

-o <output pathname>

is given on the command line, this
value is used as the output filename.  Quotes may be needed if
the name contains spaces or other characters that might confuse
the command line parser.

if -o is not given,

2. if the #pragmas are defined in the mif source file, use the
path specified there.

if #pragmas are not given,

3. place the output in the current directory, with the output filename
= input filename - input filename extension + ".iff"

Let me know what you think.

-Todd

-----Original Message-----
Subject:	RE: mIFF and strings

I almost agree. I believe that the path pragmas be ignored unless a -i
option is specified to miff, meaning "install" the data in the correct 
place, otherwise it should write the output in the current location.  the 
path pragmas should be able to handle relative path names..  The filename 
and extension pragmas should be obeyed anytime they are present and -o is 
not present.

jefftep

-----Original Message-----
From:	Jeff Grills [SMTP:jefftep@bootprint.com]
Sent:	Wednesday, January 06, 1999 6:18 PM
To:	'hikeda@bootprint.com'; 'Todd Fiala'
Subject:	RE: mIFF and strings


Hm.  Can we have a binary include that works at the form level as well? 
 There have been times I have am trying to create an IFF and I need to 
include another already-built IFF inside it directly, at the form level. 
 Perhaps we can call it "includeiff" to keep people from accidentally using 
it incorrectly?

jefftep

