Steps For Adding a New Property Page

For a layer property page:

1.  Create a dialog resource.

2.  Set the dialog style to "Child", and its border to "None".

3.  Use Class Wizard to create a new class derived from CFormView and associated with the dialog resource.

4.  As necessary, create and attach member varibles to any dialog controls.

5.  As necessary, create an OnInitialUpdate() function to initialize any controls.

6.  As necessary, override TerrainToolFormView::ApplyChanges() if your form contains any edit boxes or other
    controls that are difficult to catch "new data" messages.  ApplyChanges () will be called before the file is saved,
	this form is replaced by another, and before the map is redrawn.  In here you can get the latest control data.

7.  In the class header file, rederive the class from FormBaseLayer instead of 
    CFormView (replace all references to "CFormView").

8.  In the class header file, add a member of type of "pointer of" TerrainGenerator::LayerItem or of a type 
    derived from TerrainGenerator::LayerItem.

9.  In the class header file, define a member function that overrides FormBaseLayer::Initialize (ViewData* vd);

10.  In the class implementation file, remove the following compiler flag code (it conflicts with the engine):
      #ifdef _DEBUG
      #define new DEBUG_NEW
      #undef THIS_FILE
      static char THIS_FILE[] = __FILE__;
      #endif


11.  In the class implementation file, replace all references to "CFormView" with "FormBaseLayer".

12.  In the class implementation file, change the BEGIN_MESSAPE_MAP macro to attach to "TerrainToolFormView" instead
    of "CFormView" or "FormBaseLayer".  Only "TerrainToolFormView" allows the ClassWizard to support the MFC dialog/form
	callbacks.  I don't know why.

13. In the class implementation file, within Initialize() attach the "viewData" input parameter to the class's 
    TerrainGenerator::LayerItem pointer.  Use "dynamic_cast" and check for a NULL result that would indicate
	the wrong type of data was passed in.

14. In the class implementation file, initialize the form's controls in OnInitialUpdate ().

15. In TerrainEditorDoc::getLayerRuntimeClass(), add or find the branch for this layer type, and set the return argument
    in that branch to be this propery class.

16. Include header files as necessary in all files to complete compilation.  Note, you may need to add "resource.h" to the
    form class' header file to provide the dialog resource id to the class' enum.