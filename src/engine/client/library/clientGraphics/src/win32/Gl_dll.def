// ======================================================================
//
// Gl_dll.def
//
// Portions copyright 1998 Bootprint Entertainment
// Portions copyright 2000-2002 Sony Online Entertainment
// All Rights Reserved.
//
// ======================================================================

#ifndef INCLUDED_Gl_dll_DEF
#define INCLUDED_Gl_dll_DEF

// ======================================================================

class  Camera;
class  ConfigClientGraphics;
class  DynamicIndexBuffer;
class  DynamicIndexBufferGraphicsData;
class  DynamicVertexBuffer;
class  DynamicVertexBufferGraphicsData;
class  HardwareIndexBuffer;
class  HardwareVertexBuffer;
class  Light;
class  MeshConstructionHelper;
class  PackedArgb;
class  Rectangle2d;
class  ShaderImplementation;
class  ShaderImplementationGraphicsData;
class  ShaderImplementationPassPixelShaderProgram;
class  ShaderImplementationPassPixelShaderProgramGraphicsData;
class  ShaderImplementationPassVertexShader;
class  ShaderImplementationPassVertexShaderGraphicsData;
class  StaticIndexBuffer;
class  StaticIndexBufferGraphicsData;
class  StaticShader;
class  StaticShaderGraphicsData;
class  StaticVertexBuffer;
class  StaticVertexBufferGraphicsData;
class  Texture;
class  TextureGraphicsData;
class  Transform;
class  Vector;
class  VectorArgb;
class  VectorRgba;
class  VertexBufferVector;
class  VertexBufferVectorGraphicsData;
struct DebugPrintEngineFlags;
struct DebugPrintPlatformFlags;

#include "clientGraphics/Graphics.def"
#include "clientGraphics/Texture.def"
#include "sharedFoundation/Tag.h"

// ======================================================================

struct Gl_install
{
	HWND        window;
	int         width;
	int         height;
	int         colorBufferBitDepth;
	int         alphaBufferBitDepth;
	int         zBufferBitDepth;
	int         stencilBufferBitDepth;
	bool        windowed;
	bool        skipInitialClearViewport;
	bool        engineOwnsWindow;
	bool        borderlessWindow;
	int         windowX;
	int         windowY;

	void        (*windowedModeChanged)(bool windowed);
};

struct Gl_api
{
	typedef void (*CallbackFunction)();

	bool (*verify)(void);
	bool (*install)(Gl_install *gl_install);
	void (*remove)(void);

	void (*displayModeChanged)();

	int  (*getShaderCapability)();
	bool (*requiresVertexAndPixelShaders)();
	void (*getOtherAdapterRects)(stdvector<RECT>::fwd &);
	int  (*getVideoMemoryInMegabytes)();

	void (*flushResources)(bool fullReset);

	bool (*isGdiVisible)(void);
	bool (*wasDeviceReset)(void);

	void (*addDeviceLostCallback)(CallbackFunction callbackFunction);
	void (*removeDeviceLostCallback)(CallbackFunction callbackFunction);
	void (*addDeviceRestoredCallback)(CallbackFunction callbackFunction);
	void (*removeDeviceRestoredCallback)(CallbackFunction callbackFunction);

#ifdef _DEBUG
	void (*setTexturesEnabled)(bool enabled);

	void (*showMipmapLevels)(bool enabled);
	bool (*getShowMipmapLevels)();

	void (*setBadVertexBufferVertexShaderCombination)(bool *flag, const char *debugAppearanceName);

	void (*getRenderedVerticesPointsLinesTrianglesCalls)(int &vertices, int &points, int &lines, int &triangles, int &calls);
#endif

	bool (*supportsMipmappedCubeMaps)();
	bool (*supportsScissorRect)();
	bool (*supportsHardwareMouseCursor)();
	bool (*supportsTwoSidedStencil)();
	bool (*supportsStreamOffsets)();
	bool (*supportsDynamicTextures)();

	void (*setBrightnessContrastGamma)(float brightness, float contrast, float gamma);

	void (*resize)(int newWidth, int newHeight);
	void (*setWindowedMode)(bool windowed);

	void (*setFillMode)(GlFillMode newFillMode);
	void (*setCullMode)(GlCullMode newCullMode);

	// Point sprite controlls

	void (*setPointSize)(real size);
	void (*setPointSizeMax)(real size);
	void (*setPointSizeMin)(real size);
	void (*setPointScaleEnable)(bool bEnable);
	void (*setPointScaleFactor)(real A, real B, real C);
	void (*setPointSpriteEnable)(bool bEnable);

	void (*clearViewport)(bool clearColor, uint32 colorValue, bool clearDepth, real depthValue, bool clearStencil, uint32 stencilValue);
	void (*update)(float elapsedTime);
	void (*beginScene)();
	void (*endScene)();

	bool (*lockBackBuffer)(Gl_pixelRect &, const RECT *);
	bool (*unlockBackBuffer)();

	bool (*present)();
	bool (*presentToWindow)(HWND window, int width, int height);
	void (*setRenderTarget)(Texture *texture, CubeFace cubeFace, int mipmapLevel);
	bool (*copyRenderTargetToNonRenderTargetTexture)();

	bool (*screenShot)(GlScreenShotFormat format, int quality, const char *fileName);

	ShaderImplementationGraphicsData *(*createShaderImplementationGraphicsData)(const ShaderImplementation &shaderImplementation);
	StaticShaderGraphicsData *(*createStaticShaderGraphicsData)(const StaticShader &shader);
	void (*setBadVertexShaderStaticShader)(const StaticShader *shader);
	void (*setStaticShader)(const StaticShader &shader, int pass);

	bool (*setMouseCursor)(const Texture &mouseCursorTexture, int hotSpotX, int hotSpotY);
	bool (*showMouseCursor)(bool cursorVisible);

	void (*setViewport)(int x, int y, int width, int height, real minZ, real maxZ);
	void (*setScissorRect)(bool enabled, int x, int y, int width, int height);
	void (*setWorldToCameraTransform)(const Transform &objectToWorld, const Vector &cameraPosition);
	void (*setProjectionMatrix)(const GlMatrix4x4 &projectionMatrix);
	void (*setFog)(bool enabled, real density, const PackedArgb &color);
	void (*setObjectToWorldTransformAndScale)(const Transform &objectToWorld, const Vector &scale);
	void (*setGlobalTexture)(Tag tag, const Texture &texture);
	void (*releaseAllGlobalTextures)();
	void (*setTextureTransform)(int stage, bool enabled, int dimension, bool projected, const real *transform);
	void (*setVertexShaderUserConstants)(int index, float c0, float c1, float c2, float c3);
	void (*setPixelShaderUserConstants)(VectorRgba const *  constants, int count);

	void (*setAlphaFadeOpacity)(bool enabled, float opacity);

	void           (*setLights)(const stdvector<const Light*>::fwd &lightList);

	StaticVertexBufferGraphicsData    *(*createStaticVertexBufferData)(const StaticVertexBuffer &vertexBuffer);
	DynamicVertexBufferGraphicsData   *(*createDynamicVertexBufferData)(const DynamicVertexBuffer &vertexBuffer);
	VertexBufferVectorGraphicsData    *(*createVertexBufferVectorData)(VertexBufferVector const & vertexBufferVector);
	void                               (*setVertexBuffer)(HardwareVertexBuffer const & vertexBufferArray);
	void                               (*setVertexBufferVector)(VertexBufferVector const & vertexBufferVector);

	StaticIndexBufferGraphicsData *    (*createStaticIndexBufferData)(const StaticIndexBuffer &indexBuffer);
	DynamicIndexBufferGraphicsData *   (*createDynamicIndexBufferData)();
	void                               (*setIndexBuffer)(const HardwareIndexBuffer &indexBuffer);
	void                               (*setDynamicIndexBufferSize)(int numberOfVertices);

	void (*getOneToOneUVMapping)(int textureWidth, int textureHeight, real &u0, real &v0, real &u1, real &v1);
	TextureGraphicsData *(*createTextureData)(const Texture &texture, const TextureFormat *runtimeFormats, int numberOfRuntimeFormats);

	ShaderImplementationPassVertexShaderGraphicsData       *(*createVertexShaderData)(ShaderImplementationPassVertexShader const &vertexShader);
	ShaderImplementationPassPixelShaderProgramGraphicsData *(*createPixelShaderProgramData)(ShaderImplementationPassPixelShaderProgram const &pixelShaderProgram);

	void (*drawPointList)();
	void (*drawLineList)();
	void (*drawLineStrip)();
	void (*drawTriangleList)();
	void (*drawTriangleStrip)();
	void (*drawTriangleFan)();
	void (*drawQuadList)();

	void (*drawIndexedPointList)();
	void (*drawIndexedLineList)();
	void (*drawIndexedLineStrip)();
	void (*drawIndexedTriangleList)();
	void (*drawIndexedTriangleStrip)();
	void (*drawIndexedTriangleFan)();

	void (*drawPartialPointList)(int startVertex, int primitiveCount);
	void (*drawPartialLineList)(int startVertex, int primitiveCount);
	void (*drawPartialLineStrip)(int startVertex, int primitiveCount);
	void (*drawPartialTriangleList)(int startVertex, int primitiveCount);
	void (*drawPartialTriangleStrip)(int startVertex, int primitiveCount);
	void (*drawPartialTriangleFan)(int startVertex, int primitiveCount);

	void (*drawPartialIndexedPointList)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*drawPartialIndexedLineList)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*drawPartialIndexedLineStrip)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*drawPartialIndexedTriangleList)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*drawPartialIndexedTriangleStrip)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*drawPartialIndexedTriangleFan)(int baseIndex, int minimumVertexIndex, int numberOfVertices, int startIndex, int primitiveCount);
	void (*optimizeIndexBuffer)(WORD *indices, int numIndices);

	int (*getMaximumVertexBufferStreamCount)();

	void (*setBloomEnabled)(bool enabled);

	void (*pixSetMarker)(WCHAR const * markerName);
	void (*pixBeginEvent)(WCHAR const * eventName);
	void (*pixEndEvent)(WCHAR const * eventName);
	
	bool (*writeImage)(char const * file, int const width, int const height, int const pitch, int const * pixelsARGB, bool const alphaExtend, Gl_imageFormat const imageFormat, Rectangle2d const * subRect);
	
	bool (*supportsAntialias)();
	void (*setAntialiasEnabled)(bool enabled);
	
#if PRODUCTION == 0
	bool (*createVideoBuffers)(int width, int height);
	void (*fillVideoBuffers)();
	bool (*getVideoBufferData)(void * buffer, size_t bufferSize);
	void (*releaseVideoBuffers)();
#endif  // PRODUCTION
};

// ======================================================================

#endif
