# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.57)
AC_INIT(swg, 1.0.0, swoprogrammers@soe.sony.com)
AC_CONFIG_AUX_DIR(config)

# using literals here. If configure targets change (using --with-PACKAGE)
# and they should be built as part of this top level configuration, then
# AC_CONFIG_SUBDIRS should also be changed!
AC_CONFIG_SUBDIRS([engine external/ours/library/fileInterface external/ours/library/archive external/ours/library/localization external/ours/library/localizationArchive external/ours/library/unicode external/ours/library/unicodeArchive external/ours/library/crypto game external/3rd/library/platform/MonAPI2])

AC_ARG_ENABLE([debug], AC_HELP_STRING([--enable-debug\[=yes\|no\] ], [defines _DEBUG and enables debugging features]), AC_DEFINE(_DEBUG) CXXFLAGS="$CXXFLAGS -g", CXXFLAGS="$CXXFLAGS -O2")

# todo -  when using gcc-3, pick more optimizations for use
AC_ARG_ENABLE([optimized], AC_HELP_STRING([--enable-optimized\[=yes\|no\] ], [enables optimizations]), CXXFLAGS="$CXXFLAGS -O2", [])

# determine build target
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

case $target in
*-linux-*)
        platform=[linux];
	AC_DEFINE(LINUX)
	AC_DEFINE(_REENTRANT)
	AC_DEFINE(_XOPEN_SOURCE, 500)
	AC_DEFINE(_GNU_SOURCE)
	AC_DEFINE(linux)
	AC_DEFINE(_GNU_SOURCE)
	AC_DEFINE(_USING_STL)
	AC_DEFINE(__STL_NO_BAD_ALLOC)
esac
AC_SUBST(platform)

# initialize automake macros
AM_INIT_AUTOMAKE

# Checks for programs.
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_PROG_CXX

AC_DEFUN([SWG_REQUIRE], [export $3 AC_ARG_WITH([$1], AC_HELP_STRING([--with-$1=/path/to/$1], [where to find $1]), AC_SUBST($3, $withval), AC_SUBST($3, $2)) AC_MSG_NOTICE([using $$3 for $1])])
AC_DEFUN([REQUIRE_PACKAGE], [if ! test $$3; then AC_ARG_WITH([$1], AC_HELP_STRING([--with-$1=path/to/$1], [where to find $1]), AC_SUBST($3, $withval), AC_SUBST($3, $2)) AC_CHECK_FILE($4, [], AC_MSG_ERROR([$1 is required but was not found in $$3])) fi; export $3])

pushd $srcdir > /dev/null ; abs_srcdir=`pwd` > /dev/null ; popd > /dev/null

REQUIRE_PACKAGE(archive, [$abs_srcdir/external/ours/library/archive], archive_dir, [$archive_dir/include/Archive/ArchiveMutex.h]) AC_SUBST(archive_dir)
REQUIRE_PACKAGE(crypto, [$abs_srcdir/external/ours/library/crypto], crypto_dir, [$crypto_dir/include/FirstCrypto.h]) AC_SUBST(crypto_dir)
REQUIRE_PACKAGE(fileInterface, [$abs_srcdir/external/ours/library/fileInterface], fileInterface_dir, [$fileInterface_dir/include/public/fileInterface/FirstFileInterface.h]) AC_SUBST(fileInterface_dir)
REQUIRE_PACKAGE(localization, [$abs_srcdir/external/ours/library/localization], localization_dir, [$localization_dir/include/FirstLocalization.h]) AC_SUBST(localization_dir)
REQUIRE_PACKAGE(localizationArchive, [$abs_srcdir/external/ours/library/localizationArchive], localizationArchive_dir, [$localizationArchive_dir/include/public/localizationArchive/FirstLocalizationArchive.h]) AC_SUBST(localizationArchive_dir)
REQUIRE_PACKAGE(singleton, [$abs_srcdir/external/ours/library/singleton], singleton_dir, [$singleton_dir/include/Singleton/Singleton.h]) AC_SUBST(singleton_dir)
REQUIRE_PACKAGE(unicode, [$abs_srcdir/external/ours/library/unicode], unicode_dir, [$unicode_dir/include/Unicode.h]) AC_SUBST(unicode_dir)
REQUIRE_PACKAGE(unicodeArchive, [$abs_srcdir/external/ours/library/unicodeArchive], unicodeArchive_dir, [$unicodeArchive_dir/include/public/unicodeArchive/FirstUnicodeArchive.h]) AC_SUBST(unicodeArchive_dir)
REQUIRE_PACKAGE(boost, [$abs_srcdir/external/3rd/library/boost], boost_dir, [$boost_dir/boost/smart_ptr.hpp]) AC_SUBST(boost_dir)
REQUIRE_PACKAGE(platform, [$abs_srcdir/external/3rd/library/platform], platform_dir, [$platform_dir/MonAPI2/MonitorAPI.h]) AC_SUBST(platform_dir)
REQUIRE_PACKAGE(stlport, [$abs_srcdir/external/3rd/library/stlport453], stlport_dir, [$stlport_dir/stlport/algorithm]) AC_SUBST(stlport_dir)
REQUIRE_PACKAGE(udplibrary, [$abs_srcdir/external/3rd/library/udplibrary], udplibrary_dir, [$udplibrary_dir/UdpLibrary.hpp]) AC_SUBST(udplibrary_dir)
REQUIRE_PACKAGE(engine, [$abs_srcdir/engine], engine_dir, [$engine_dir/shared/library/sharedFoundation/include/public/sharedFoundation/FirstSharedFoundation.h]) AC_SUBST(engine_dir)
REQUIRE_PACKAGE(game, [$abs_srcdir/game], game_dir, [$game_dir/shared/library/swgSharedUtility/include/public/swgSharedUtility/FirstSwgSharedUtility.h]) AC_SUBST(game_dir)
REQUIRE_PACKAGE(oracle, [$abs_srcdir/external/3rd/library/oracle], oracle_dir, [$oracle_dir/include/oci.h]) AC_SUBST(oracle_dir)
REQUIRE_PACKAGE(perforce, [$abs_srcdir/external/3rd/library/perforce], perforce_dir, [$perforce_dir/include/clientapi.h]) AC_SUBST(perforce_dir)
REQUIRE_PACKAGE(pcre, [$abs_srcdir/external/3rd/library/pcre/4.1/$platform], pcre_dir, [$pcre_dir/include/pcre/pcre.h]) AC_SUBST(pcre_dir)
REQUIRE_PACKAGE(soePlatform, [$abs_srcdir/external/3rd/library/soePlatform], soePlatform_dir, [$soePlatform_dir/Base/Base.h]) AC_SUBST(soePlatform_dir)
REQUIRE_PACKAGE(libxml, [$abs_srcdir/external/3rd/library/libxml], libxml_dir, [$libxml_dir/libxml.h]) AC_SUBST(libxml_dir)

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([engine/Makefile])
AC_CONFIG_FILES([external/Makefile])
AC_CONFIG_FILES([external/ours/Makefile])
AC_CONFIG_FILES([external/ours/library/Makefile])
AC_CONFIG_FILES([external/ours/library/fileInterface/Makefile])
AC_CONFIG_FILES([external/ours/library/archive/Makefile])
AC_CONFIG_FILES([external/ours/library/localization/Makefile])
AC_CONFIG_FILES([external/ours/library/localizationArchive/Makefile])
AC_CONFIG_FILES([external/ours/library/unicode/Makefile])
AC_CONFIG_FILES([external/ours/application/Makefile])
AC_CONFIG_FILES([external/ours/application/LocalizationToolCon/Makefile])
AC_CONFIG_FILES([external/ours/application/LocalizationToolCon/src/Makefile])
AC_CONFIG_FILES([external/ours/application/LocalizationToolCon/src/shared/Makefile])
AC_CONFIG_FILES([external/3rd/Makefile])
AC_CONFIG_FILES([external/3rd/library/Makefile])
AC_CONFIG_FILES([external/3rd/library/platform/Makefile])
AC_CONFIG_FILES([external/3rd/library/platform/MonAPI2/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_OUTPUT
