//==============================================================================
// vector3_inline.h
//==============================================================================
//  Copyright (C) DejaTools, LLC.  All rights reserved.
//==============================================================================

#ifndef vector3_inline_h
#define vector3_inline_h

//==============================================================================
//
// Void construct the vector3.
//
//==============================================================================

inline vector3::vector3( void )
{
}

//==============================================================================
//
// Component construct the vector3.
//
//==============================================================================

inline vector3::vector3( float ax, float ay, float az )
: x(ax), y(ay), z(az)
{
}

//==============================================================================
//
// Copy construct the vector3.
//
//==============================================================================

inline vector3::vector3( const vector3& v ) 
: x(v.x), y(v.y), z(v.z)
{
}

//==============================================================================
//
// Set the vector3.
//
//==============================================================================

inline void vector3::Set( float ax, float ay, float az )
{
    x = ax;
    y = ay;
    z = az;
}

//==============================================================================
//
// Set the vector3.
//
//==============================================================================

inline vector3& vector3::operator () ( float ax, float ay, float az )
{
    x = ax;
    y = ay;
    z = az;
    return( *this );
}

//==============================================================================
//
// Normalize.
//
//==============================================================================

inline
void vector3::Normalize( void )
{
    float s;
    float s2 = x*x + y*y + z*z;

    if( s2 > 0.000001f )
        s = sqrtf( s2 );
    else
        s = s2;

    x /= s;
    y /= s;
    z /= s;
}

//==============================================================================
//
// Rotate vector on the x axis.
//
//==============================================================================

inline 
void vector3::RotateX( radian Angle )
{
    float S, C;
    sincosf( Angle, S, C );
    float Y = y;
    float Z = z;
    y = (C * Y) - (S * Z);
    z = (C * Z) + (S * Y);
}

//==============================================================================
//
// Rotate vector on the x axis.
//
//==============================================================================

inline 
void vector3::RotateY( radian Angle )
{
    float S, C;
    sincosf( Angle, S, C );
    float X = x;
    float Z = z;
    x = (C * X) + (S * Z);
    z = (C * Z) - (S * X);
}

//==============================================================================
//
// Rotate vector on the x axis.
//
//==============================================================================

inline 
void vector3::RotateZ( radian Angle )
{
    float S, C;
    sincosf( Angle, S, C );
    float X = x;
    float Y = y;
    x = (C * X) - (S * Y);
    x = (C * Y) + (S * X);
}

//==============================================================================
//
// Length.
//
//==============================================================================

inline
float vector3::GetLength( void ) const
{
    return( sqrtf( SQR(x) + SQR(y) + SQR(z) ) );
}

//==============================================================================
//
// Length squared.
//
//==============================================================================

inline
float vector3::GetLengthSqr( void ) const
{
    return( SQR(x) + SQR(y) + SQR(z) );
}

//==============================================================================
//
// Get pitch of vector.
//
//==============================================================================

inline
radian vector3::GetPitch( void ) const
{
    float Len = sqrtf( SQR(x) + SQR(z) );    // Length on xz plane.
    return( -atan2f( y, Len ) );
}

//==============================================================================
//
// Get yaw of vector.
//
//==============================================================================

inline
radian vector3::GetYaw( void ) const
{
    return( atan2f( x, z ) );
}

//==============================================================================
//
// Get pitch and yaw of vector.
//
//==============================================================================

inline
void vector3::GetPitchYaw( radian& Pitch, radian& Yaw ) const
{
    Pitch = GetPitch();
    Yaw   = GetYaw();
}

//==============================================================================
//
// Unary negation.
//
//==============================================================================

inline 
vector3 vector3::operator - ( void ) const
{
    return( vector3( -x, -y, -z ) );
}

//==============================================================================
//
// Addition operator.
//
//==============================================================================

inline
vector3& vector3::operator += ( const vector3& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    return( *this );
}

//==============================================================================
//
// Subtraction operator.
//
//==============================================================================

inline
vector3& vector3::operator -= ( const vector3& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return( *this );
}

//==============================================================================
//
// Addition operator.
//
//==============================================================================

inline
vector3 operator + ( const vector3& v1, const vector3& v2 )
{
    return( vector3( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ) );
}

//==============================================================================
//
// Subtraction operator.
//
//==============================================================================

inline
vector3 operator - ( const vector3& v1, const vector3& v2 )
{
    return( vector3( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ) );
}

//==============================================================================
//
// Multiplication operator.
//
//==============================================================================

inline
vector3 operator * ( const vector3& v, float s )
{
    return( vector3( v.x * s, v.y * s, v.z * s ) );
}

//==============================================================================
//
// Equality operator.
//
//==============================================================================

inline
bool operator == ( const vector3& v1, const vector3& v2 )
{
    return( (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) );
}

//==============================================================================
//
// Inequality operator.
//
//==============================================================================

inline
bool operator != ( const vector3& v1, const vector3& v2 )
{
    return( (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z) );
}

//==============================================================================
//
// Dot product.
//
//==============================================================================

inline
float Dot( const vector3& v1, const vector3& v2 )
{
    return( (v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z) );
}

//==============================================================================
//
// Cross product.
//
//==============================================================================

inline
vector3 Cross( const vector3& v1, const vector3& v2 )
{
    vector3 t;

    t.x = (v1.y * v2.z) - (v2.y * v1.z);
    t.y = (v1.z * v2.x) - (v2.z * v1.x);
    t.z = (v1.x * v2.y) - (v2.x * v1.y);

    return( t );
}

//==============================================================================
#endif // vector3_inline_h
//==============================================================================
