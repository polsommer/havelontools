//------------------------------------------------
// terminal.terminal_city_mission
//
// A special script for handling the tracking of
// player city mission terminals.
//------------------------------------------------

//------------------------------------------------
// Includes
//------------------------------------------------

include library.city;
include library.player_structure;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id 	SID_MT_REMOVE					= new string_id("city/city", "mt_remove");
const string_id 	SID_MT_REMOVED					= new string_id("city/city", "mt_removed");

//------------------------------------------------
// OnInitialize
//------------------------------------------------

trigger OnInitialize()
{
	// Validate our placement.
 	city.validateSpecialStructure( self );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnDestroy
//------------------------------------------------

trigger OnDestroy()
{
	city.removeMissionTerminal( self );
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// requestDestroy
//------------------------------------------------

messageHandler requestDestroy()
{
	destroyObject( self );
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	int city_id = city.checkMayorCity( player, false );
	if ( city_id == 0 )
		return SCRIPT_CONTINUE;

	mi.addRootMenu( menu_info_types.SERVER_MENU1, SID_MT_REMOVE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	int city_id = city.checkMayorCity( player, false );
	if ( city_id == 0 )
		return SCRIPT_CONTINUE;

	if ( item == menu_info_types.SERVER_MENU1 )
	{
		sendSystemMessage( player, SID_MT_REMOVED );
		destroyObject( self );
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleUnloadedCityStructureReportData()
{
	obj_id player = params.getObjId("player");
	obj_id city_terminal = params.getObjId("city_terminal");
	int city_id = params.getInt("city_id");
	
	if(!isIdValid(player) || !isIdValid(city_terminal))
	{
		return SCRIPT_CONTINUE;	
	}
	
	if(!city.isNormalStructure(city_id, self))
	{
		location structureLocation = getLocation(self);
		string structureName = localize(getNameStringId(self));
		
		//pack the params
		dictionary dict = new dictionary();
		dict.put("player", player);
		dict.put("city_id", city_id);
		dict.put("city_terminal", city_terminal);
		dict.put("unloadedStructureId", self);
		dict.put("unloadedStructureName", structureName);
		dict.put("unloadedStructureLocation", structureLocation);
		//send message back to City Terminal
		messageTo(city_terminal, "RecievedUnloadedStructureResponse", dict, 0.0f, false);
	}
	else if(player_structure.isCivic(self))
	{
		location structureLocation = getLocation(self);
		float cond = ((float) player_structure.getStructureCondition(self)) / ((float) player_structure.getMaxCondition(self));
		int outcond = (int) (cond * 100);
		string structureName = getEncodedName(self) + " (Condition : " + outcond + "%)";
		
		//pack the params
		//pack the params
		dictionary dict = new dictionary();
		dict.put("player", player);
		dict.put("city_id", city_id);
		dict.put("city_terminal", city_terminal);
		dict.put("unloadedStructureId", self);
		dict.put("unloadedStructureName", structureName);
		dict.put("unloadedStructureLocation", structureLocation);
		//send message back to City Terminal
		messageTo(city_terminal, "RecievedUnloadedStructureResponse", dict, 0.0f, false);
	}
	else
	{
		//player house - we don't want any info 
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}