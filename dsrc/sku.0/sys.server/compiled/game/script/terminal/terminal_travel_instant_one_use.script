
// ********************************************************************
//					INCLUDES
// ********************************************************************

include library.city;
include library.create;
include library.locations;
include library.pet_lib;
include library.player_structure;
include library.travel;
include library.utils;

// ********************************************************************
//					CONSTS
// ********************************************************************
const string_id SID_LOCATION_NOGOOD_FOR_PICKUP			 = new string_id("travel", "no_pickup_location");
const string_id SID_TIMEOUT					= new string_id("travel", "pickup_timeout");
const string_id SID_LEFT_ME					= new string_id("travel", "left_pickup_zone");
const string_id SID_NOT_YOUR_SHIP				= new string_id("travel", "not_your_ship");
const string TRIGGER_VOLUME_PICKUP_SHIP				= "travel_instant_pickup_interest_range";
const float PICKUP_INTEREST_RADIUS				= 64f;
const string_id SID_CALLING_FOR_PICKUP			 	= new string_id("travel", "calling_for_pickup");

const boolean CONST_FLAG_DO_LOGGING				= true;
const int SHIP_TYPE_INSTANT_XWING_TIE = 1;
const int SHIP_TYPE_INSTANT_PRIVATEER = 2;
const int SHIP_TYPE_INSTANT_ROYAL_SHIP = 3;

// ********************************************************************
//					TRIGGERS
// ********************************************************************


trigger OnInitialize ()
{
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	//sendSystemMessageTestingOnly(player, "should be working" );
	int mnu = mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("ui_radial", "item_use"));
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		//sendSystemMessageTestingOnly(player, "WORKED" );

		sendSystemMessage(player, SID_CALLING_FOR_PICKUP );	 // calling in the pickup vehicle (spawning the instant travel terminal).
		spawnPickupCraft(player, 2);
	}
	return SCRIPT_CONTINUE;
}

obj_id spawnPickupCraft(obj_id player, int type)
{
	debugLogging("//***// spawnPickupCraft", "////>>>> ENTERED");

	if(!isIdValid(player))
		return null;

	location here = getLocation(player);
	location spawnLoc = locations.getGoodLocationAroundLocation(here, 1f, 1f, 4f, 4f);
	if ( spawnLoc == null )
	{
		debugLogging("//***// spawnPickupCraft", "////>>>> getGoodLocationAroundLocation (player area) returned NULL! OH NO! Telling player that the location is no good.");
		sendSystemMessage( player, SID_LOCATION_NOGOOD_FOR_PICKUP );	 // this location is no good for a pickup
		return null;
	}

	string pickupCraftType = "object/tangible/terminal/terminal_travel_instant_xwing.iff";		//default is xwing

	if (type == SHIP_TYPE_INSTANT_XWING_TIE)
	{
		// FIGURE OUT THE PLAYER'S FACTION AFFILIATION
		int playerFactionID = pvpGetAlignedFaction(player);

		// BASED UPON FACTIONAL AFFILIATION, SELECT WHAT KINDA SHIP TO SPAWN

		// In the case the travel vehical is a vet reward we use the privateer ship
		if ( playerFactionID == ##"imperial" )
		{
			pickupCraftType = "object/tangible/terminal/terminal_travel_instant_tie.iff";	// imperials get the tie
			spawnLoc.y+= 5f;	// TIE needs to float a bit because object origin is at middle of ship, and it would be 1/2 submerged in terrain if we don't elevate it at spawntime.
		}
	}

	if (type == SHIP_TYPE_INSTANT_PRIVATEER)
	{
		pickupCraftType = "object/tangible/terminal/terminal_travel_instant_privateer.iff";
	}

	if(type == SHIP_TYPE_INSTANT_ROYAL_SHIP)
	{
		pickupCraftType = "object/tangible/terminal/terminal_travel_instant_royal_ship.iff";
	}

	//OK, NOW THAT WE KNOW WHAT TO DO AND WHERE TO DO IT, DO IT.
	obj_id pickupCraft = create.object(pickupCraftType, spawnLoc);
	debugLogging("//***// spawnPickupCraft", "////>>>> spawned the pickup craft. It was obj_id: "+pickupCraft);
	if(!isIdValid(pickupCraft))
	{
		debugLogging("//***// spawnPickupCraft", "////>>>> Apparently, we DIDN'T SPAWN A SHIP!");
		return null;
	}

	utils.setScriptVar(player,"instantTravelShip",pickupCraft);
	utils.setScriptVar(pickupCraft,"playerOwner",player);

	if(!utils.hasScriptVar(pickupCraft,"playerOwner"))
		debugLogging("//***// spawnPickupCraft", "////>>>> FAILED TO WRITE PLAYER OID TO SHIP");

	setObjVar(pickupCraft,"playerOwner",player);
	if(!hasObjVar(pickupCraft,"playerOwner"))
		debugLogging("//***// spawnPickupCraft", "////>>>> FAILED TO WRITE PLAYER OID TO SHIP - OBJVAR");

	messageTo (pickupCraft, "initializeInstaTravelShip", null, 1, false);

	return pickupCraft;
}

/***** FUNCTIONS *******************************************************/

void debugLogging(string section, string message)
{
	if(CONST_FLAG_DO_LOGGING)
		LOG("travel_terminal", message);
}

//----------------------------------------------------------------------

