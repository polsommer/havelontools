/**
 * pvp_test.script
 *
 * Assumes this script is attached to a character
 */

//----------------------------------------------------------

include library.utils;
include java.util.StringTokenizer;

//----------------------------------------------------------

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id objSpeaker, string strText)
{
	if (objSpeaker != self)
		return SCRIPT_CONTINUE;

	if (strText.startsWith("setpe"))
	{
		StringTokenizer st = new StringTokenizer(strText);
		
		if (st.countTokens() == 3)
		{
			string command = st.nextToken();
			obj_id dest = utils.stringToObjId(st.nextToken());
			obj_id enemy = utils.stringToObjId(st.nextToken());

			pvpSetPersonalEnemyFlag(dest, enemy);
			sendSystemMessageTestingOnly(self, dest + " now has " + enemy + " as a personal enemy");
		}
	}
	else if (strText.startsWith("haspe"))
	{
		StringTokenizer st = new StringTokenizer(strText);
		
		if (st.countTokens() == 3)
		{
			string command = st.nextToken();
			obj_id actor = utils.stringToObjId(st.nextToken());
			obj_id target = utils.stringToObjId(st.nextToken());

			if (pvpHasPersonalEnemyFlag(actor, target))
				sendSystemMessageTestingOnly(self, actor + " has " + target + " as a personal enemy");
			else
				sendSystemMessageTestingOnly(self, actor + " DOESN'T have " + target + " as a personal enemy");
		}
	}
	else if (strText.startsWith("removepe"))
	{
		StringTokenizer st = new StringTokenizer(strText);
		
		if (st.countTokens() == 3)
		{
			string command = st.nextToken();
			obj_id target = utils.stringToObjId(st.nextToken());
			obj_id enemyId = utils.stringToObjId(st.nextToken());

			pvpRemovePersonalEnemyFlags(target, enemyId);
			sendSystemMessageTestingOnly(self, target + " no longer has " + enemyId + " as a personal enemy");
		}
	}

	return SCRIPT_CONTINUE;
}
