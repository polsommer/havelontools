/**
 * Title:        combat_simulator_master
 * Description:  Master class for combat simulator - for each simulation, there is a master that spawns the two actors that fight for each round
 * Usage:        Class that creates actors to fight and logs the output - should be instantiated on its own for debugging, otherwise, attach the combat_simulator_user class
 * Copyright:    Copyright (c) 2005
 * Company:      Sony Online Entertainment
 * @author       Vijay Thakkar
 * @version 1.0
 */

// NONE OF THIS SHOULD EVER GO TO LIVE - ifdef'd out
#ifdef DEBUG

include library.utils;
include library.combat;
include library.create;
include library.weapons;
include library.armor;
include library.healing;
include java.io.File;
include java.io.BufferedReader;
include java.io.FileReader;
include java.io.FileWriter;

boolean debug = false;

const string actorScript = "simulator.combat_simulator_actor";

const float CRAFTED_QUALITY    = 0.85f;   //quality of weapon as a percentage
const float CONDITION          = 1.0f;
const float GENERAL_PROTECTION = 0.94f;   //general protection on armor range from 0 - 1.0
const float ENCUMBRANCE        = 0.75f;   //encumbrance value on armor range from 0 - 1.0

const string[] PROFESSIONS =
{
	"architect",
	"armorsmith",
	"artisan",
	"bioengineer",
	"bountyhunter",
	"brawler",
	"carbineer",
	"chef",
	"combatmedic",
	"commando",
	"creaturehandler",
	"dancer",
	"doctor",
	"droidengineer",
	"entertainer",
	"fencer",
	"imagedesigner",
	"marksman",
	"medic",
	"merchant",
	"musician",
	"pikeman",
	"pistoleer",
	"politician",
	"ranger",
	"rifleman",
	"scout",
	"smuggler",
	"squadleader",
	"swordsman",
	"tailor",
	"teraskasi",
	"weaponsmith"
};

const string[][] SKILLS =
{
	{	// 0
		"crafting_architect_novice",
		"crafting_architect_production_01",
		"crafting_architect_production_02",
		"crafting_architect_production_03",
		"crafting_architect_production_04",
		"crafting_architect_techniques_01",
		"crafting_architect_techniques_02",
		"crafting_architect_techniques_03",
		"crafting_architect_techniques_04",
		"crafting_architect_harvesting_01",
		"crafting_architect_harvesting_02",
		"crafting_architect_harvesting_03",
		"crafting_architect_harvesting_04",
		"crafting_architect_blueprints_01",
		"crafting_architect_blueprints_02",
		"crafting_architect_blueprints_03",
		"crafting_architect_blueprints_04",
		"crafting_architect_master"
	},

	{	// 1
		"crafting_armorsmith_novice",
		"crafting_armorsmith_personal_01",
		"crafting_armorsmith_personal_02",
		"crafting_armorsmith_personal_03",
		"crafting_armorsmith_personal_04",
		"crafting_armorsmith_heavy_01",
		"crafting_armorsmith_heavy_02",
		"crafting_armorsmith_heavy_03",
		"crafting_armorsmith_heavy_04",
		"crafting_armorsmith_deflectors_01",
		"crafting_armorsmith_deflectors_02",
		"crafting_armorsmith_deflectors_03",
		"crafting_armorsmith_deflectors_04",
		"crafting_armorsmith_complexity_01",
		"crafting_armorsmith_complexity_02",
		"crafting_armorsmith_complexity_03",
		"crafting_armorsmith_complexity_04",
		"crafting_armorsmith_master"
	},

	{	// 2
		"crafting_artisan_novice",
		"crafting_artisan_engineering_01",
		"crafting_artisan_engineering_02",
		"crafting_artisan_engineering_03",
		"crafting_artisan_engineering_04",
		"crafting_artisan_domestic_01",
		"crafting_artisan_domestic_02",
		"crafting_artisan_domestic_03",
		"crafting_artisan_domestic_04",
		"crafting_artisan_business_01",
		"crafting_artisan_business_02",
		"crafting_artisan_business_03",
		"crafting_artisan_business_04",
		"crafting_artisan_survey_01",
		"crafting_artisan_survey_02",
		"crafting_artisan_survey_03",
		"crafting_artisan_survey_04",
		"crafting_artisan_master"
	},

	{	//3
		"outdoors_bio_engineer_novice",
		"outdoors_bio_engineer_creature_01",
		"outdoors_bio_engineer_creature_02",
		"outdoors_bio_engineer_creature_03",
		"outdoors_bio_engineer_creature_04",
		"outdoors_bio_engineer_tissue_01",
		"outdoors_bio_engineer_tissue_02",
		"outdoors_bio_engineer_tissue_03",
		"outdoors_bio_engineer_tissue_04",
		"outdoors_bio_engineer_dna_harvesting_01",
		"outdoors_bio_engineer_dna_harvesting_02",
		"outdoors_bio_engineer_dna_harvesting_03",
		"outdoors_bio_engineer_dna_harvesting_04",
		"outdoors_bio_engineer_production_01",
		"outdoors_bio_engineer_production_02",
		"outdoors_bio_engineer_production_03",
		"outdoors_bio_engineer_production_04",
		"outdoors_bio_engineer_master"
	},

	{	// 4
		"combat_bountyhunter_novice",
		"combat_bountyhunter_investigation_01",
		"combat_bountyhunter_investigation_02",
		"combat_bountyhunter_investigation_03",
		"combat_bountyhunter_investigation_04",
		"combat_bountyhunter_droidcontrol_01",
		"combat_bountyhunter_droidcontrol_02",
		"combat_bountyhunter_droidcontrol_03",
		"combat_bountyhunter_droidcontrol_04",
		"combat_bountyhunter_droidresponse_01",
		"combat_bountyhunter_droidresponse_02",
		"combat_bountyhunter_droidresponse_03",
		"combat_bountyhunter_droidresponse_04",
		"combat_bountyhunter_support_01",
		"combat_bountyhunter_support_02",
		"combat_bountyhunter_support_03",
		"combat_bountyhunter_support_04",
		"combat_bountyhunter_master"
	},

	{	// 5
		"combat_brawler_novice",
		"combat_brawler_unarmed_01",
		"combat_brawler_unarmed_02",
		"combat_brawler_unarmed_03",
		"combat_brawler_unarmed_04",
		"combat_brawler_1handmelee_01",
		"combat_brawler_1handmelee_02",
		"combat_brawler_1handmelee_03",
		"combat_brawler_1handmelee_04",
		"combat_brawler_2handmelee_01",
		"combat_brawler_2handmelee_02",
		"combat_brawler_2handmelee_03",
		"combat_brawler_2handmelee_04",
		"combat_brawler_polearm_01",
		"combat_brawler_polearm_02",
		"combat_brawler_polearm_03",
		"combat_brawler_polearm_04",
		"combat_brawler_master"
	},

	{	// 6
		"combat_carbine_novice",
		"combat_carbine_accuracy_01",
		"combat_carbine_accuracy_02",
		"combat_carbine_accuracy_03",
		"combat_carbine_accuracy_04",
		"combat_carbine_speed_01",
		"combat_carbine_speed_02",
		"combat_carbine_speed_03",
		"combat_carbine_speed_04",
		"combat_carbine_ability_01",
		"combat_carbine_ability_02",
		"combat_carbine_ability_03",
		"combat_carbine_ability_04",
		"combat_carbine_support_01",
		"combat_carbine_support_02",
		"combat_carbine_support_03",
		"combat_carbine_support_04",
		"combat_carbine_master"
	},

	{	// 7
		"crafting_chef_novice",
		"crafting_chef_dish_01",
		"crafting_chef_dish_02",
		"crafting_chef_dish_03",
		"crafting_chef_dish_04",
		"crafting_chef_dessert_01",
		"crafting_chef_dessert_02",
		"crafting_chef_dessert_03",
		"crafting_chef_dessert_04",
		"crafting_chef_drink_01",
		"crafting_chef_drink_02",
		"crafting_chef_drink_03",
		"crafting_chef_drink_04",
		"crafting_chef_techniques_01",
		"crafting_chef_techniques_02",
		"crafting_chef_techniques_03",
		"crafting_chef_techniques_04",
		"crafting_chef_master"
	},

	{	// 8
		"science_combatmedic_novice",
		"science_combatmedic_healing_range_01",
		"science_combatmedic_healing_range_02",
		"science_combatmedic_healing_range_03",
		"science_combatmedic_healing_range_04",
		"science_combatmedic_healing_range_speed_01",
		"science_combatmedic_healing_range_speed_02",
		"science_combatmedic_healing_range_speed_03",
		"science_combatmedic_healing_range_speed_04",
		"science_combatmedic_medicine_01",
		"science_combatmedic_medicine_02",
		"science_combatmedic_medicine_03",
		"science_combatmedic_medicine_04",
		"science_combatmedic_support_01",
		"science_combatmedic_support_02",
		"science_combatmedic_support_03",
		"science_combatmedic_support_04",
		"science_combatmedic_master"
	},

	{	// 9
		"combat_commando_novice",
		"combat_commando_heavyweapon_accuracy_01",
		"combat_commando_heavyweapon_accuracy_02",
		"combat_commando_heavyweapon_accuracy_03",
		"combat_commando_heavyweapon_accuracy_04",
		"combat_commando_heavyweapon_speed_01",
		"combat_commando_heavyweapon_speed_02",
		"combat_commando_heavyweapon_speed_03",
		"combat_commando_heavyweapon_speed_04",
		"combat_commando_thrownweapon_01",
		"combat_commando_thrownweapon_02",
		"combat_commando_thrownweapon_03",
		"combat_commando_thrownweapon_04",
		"combat_commando_support_01",
		"combat_commando_support_02",
		"combat_commando_support_03",
		"combat_commando_support_04",
		"combat_commando_master"
	},

	{	// 10
		"outdoors_creaturehandler_novice",
		"outdoors_creaturehandler_taming_01",
		"outdoors_creaturehandler_taming_02",
		"outdoors_creaturehandler_taming_03",
		"outdoors_creaturehandler_taming_04",
		"outdoors_creaturehandler_training_01",
		"outdoors_creaturehandler_training_02",
		"outdoors_creaturehandler_training_03",
		"outdoors_creaturehandler_training_04",
		"outdoors_creaturehandler_healing_01",
		"outdoors_creaturehandler_healing_02",
		"outdoors_creaturehandler_healing_03",
		"outdoors_creaturehandler_healing_04",
		"outdoors_creaturehandler_support_01",
		"outdoors_creaturehandler_support_02",
		"outdoors_creaturehandler_support_03",
		"outdoors_creaturehandler_support_04",
		"outdoors_creaturehandler_master"
	},

	{	// 11
		"social_dancer_novice",
		"social_dancer_ability_01",
		"social_dancer_ability_02",
		"social_dancer_ability_03",
		"social_dancer_ability_04",
		"social_dancer_wound_01",
		"social_dancer_wound_02",
		"social_dancer_wound_03",
		"social_dancer_wound_04",
		"social_dancer_knowledge_01",
		"social_dancer_knowledge_02",
		"social_dancer_knowledge_03",
		"social_dancer_knowledge_04",
		"social_dancer_shock_01",
		"social_dancer_shock_02",
		"social_dancer_shock_03",
		"social_dancer_shock_04",
		"social_dancer_master"
	},

	{	// 12
		"science_doctor_novice",
		"science_doctor_wound_speed_01",
		"science_doctor_wound_speed_02",
		"science_doctor_wound_speed_03",
		"science_doctor_wound_speed_04",
		"science_doctor_wound_01",
		"science_doctor_wound_02",
		"science_doctor_wound_03",
		"science_doctor_wound_04",
		"science_doctor_ability_01",
		"science_doctor_ability_02",
		"science_doctor_ability_03",
		"science_doctor_ability_04",
		"science_doctor_support_01",
		"science_doctor_support_02",
		"science_doctor_support_03",
		"science_doctor_support_04",
		"science_doctor_master"
	},

	{	// 13
		"crafting_droidengineer_novice",
		"crafting_droidengineer_production_01",
		"crafting_droidengineer_production_02",
		"crafting_droidengineer_production_03",
		"crafting_droidengineer_production_04",
		"crafting_droidengineer_techniques_01",
		"crafting_droidengineer_techniques_02",
		"crafting_droidengineer_techniques_03",
		"crafting_droidengineer_techniques_04",
		"crafting_droidengineer_refinement_01",
		"crafting_droidengineer_refinement_02",
		"crafting_droidengineer_refinement_03",
		"crafting_droidengineer_refinement_04",
		"crafting_droidengineer_blueprints_01",
		"crafting_droidengineer_blueprints_02",
		"crafting_droidengineer_blueprints_03",
		"crafting_droidengineer_blueprints_04",
		"crafting_droidengineer_master"
	},

	{	// 14
		"social_entertainer_novice",
		"social_entertainer_hairstyle_01",
		"social_entertainer_hairstyle_02",
		"social_entertainer_hairstyle_03",
		"social_entertainer_hairstyle_04",
		"social_entertainer_music_01",
		"social_entertainer_music_02",
		"social_entertainer_music_03",
		"social_entertainer_music_04",
		"social_entertainer_dance_01",
		"social_entertainer_dance_02",
		"social_entertainer_dance_03",
		"social_entertainer_dance_04",
		"social_entertainer_healing_01",
		"social_entertainer_healing_02",
		"social_entertainer_healing_03",
		"social_entertainer_healing_04",
		"social_entertainer_master"
	},

	{	// 15
		"combat_1hsword_novice",
		"combat_1hsword_accuracy_01",
		"combat_1hsword_accuracy_02",
		"combat_1hsword_accuracy_03",
		"combat_1hsword_accuracy_04",
		"combat_1hsword_speed_01",
		"combat_1hsword_speed_02",
		"combat_1hsword_speed_03",
		"combat_1hsword_speed_04",
		"combat_1hsword_ability_01",
		"combat_1hsword_ability_02",
		"combat_1hsword_ability_03",
		"combat_1hsword_ability_04",
		"combat_1hsword_support_01",
		"combat_1hsword_support_02",
		"combat_1hsword_support_03",
		"combat_1hsword_support_04",
		"combat_1hsword_master"
	},

	{	// 16
		"social_imagedesigner_novice",
		"social_imagedesigner_hairstyle_01",
		"social_imagedesigner_hairstyle_02",
		"social_imagedesigner_hairstyle_03",
		"social_imagedesigner_hairstyle_04",
		"social_imagedesigner_exotic_01",
		"social_imagedesigner_exotic_02",
		"social_imagedesigner_exotic_03",
		"social_imagedesigner_exotic_04",
		"social_imagedesigner_bodyform_01",
		"social_imagedesigner_bodyform_02",
		"social_imagedesigner_bodyform_03",
		"social_imagedesigner_bodyform_04",
		"social_imagedesigner_markings_01",
		"social_imagedesigner_markings_02",
		"social_imagedesigner_markings_03",
		"social_imagedesigner_markings_04",
		"social_imagedesigner_master"
	},

	{	// 17
		"combat_marksman_novice",
		"combat_marksman_rifle_01",
		"combat_marksman_rifle_02",
		"combat_marksman_rifle_03",
		"combat_marksman_rifle_04",
		"combat_marksman_pistol_01",
		"combat_marksman_pistol_02",
		"combat_marksman_pistol_03",
		"combat_marksman_pistol_04",
		"combat_marksman_carbine_01",
		"combat_marksman_carbine_02",
		"combat_marksman_carbine_03",
		"combat_marksman_carbine_04",
		"combat_marksman_support_01",
		"combat_marksman_support_02",
		"combat_marksman_support_03",
		"combat_marksman_support_04",
		"combat_marksman_master"
	},

	{	// 18
		"science_medic_novice",
		"science_medic_injury_01",
		"science_medic_injury_02",
		"science_medic_injury_03",
		"science_medic_injury_04",
		"science_medic_injury_speed_01",
		"science_medic_injury_speed_02",
		"science_medic_injury_speed_03",
		"science_medic_injury_speed_04",
		"science_medic_ability_01",
		"science_medic_ability_02",
		"science_medic_ability_03",
		"science_medic_ability_04",
		"science_medic_crafting_01",
		"science_medic_crafting_02",
		"science_medic_crafting_03",
		"science_medic_crafting_04",
		"science_medic_master"
	},

	{	// 19
		"crafting_merchant_novice",
		"crafting_merchant_advertising_01",
		"crafting_merchant_advertising_02",
		"crafting_merchant_advertising_03",
		"crafting_merchant_advertising_04",
		"crafting_merchant_sales_01",
		"crafting_merchant_sales_02",
		"crafting_merchant_sales_03",
		"crafting_merchant_sales_04",
		"crafting_merchant_hiring_01",
		"crafting_merchant_hiring_02",
		"crafting_merchant_hiring_03",
		"crafting_merchant_hiring_04",
		"crafting_merchant_management_01",
		"crafting_merchant_management_02",
		"crafting_merchant_management_03",
		"crafting_merchant_management_04",
		"crafting_merchant_master"
	},

	{	// 20
		"social_musician_novice",
		"social_musician_ability_01",
		"social_musician_ability_02",
		"social_musician_ability_03",
		"social_musician_ability_04",
		"social_musician_wound_01",
		"social_musician_wound_02",
		"social_musician_wound_03",
		"social_musician_wound_04",
		"social_musician_knowledge_01",
		"social_musician_knowledge_02",
		"social_musician_knowledge_03",
		"social_musician_knowledge_04",
		"social_musician_shock_01",
		"social_musician_shock_02",
		"social_musician_shock_03",
		"social_musician_shock_04",
		"social_musician_master"
	},

	{	// 21
		"combat_polearm_novice",
		"combat_polearm_accuracy_01",
		"combat_polearm_accuracy_02",
		"combat_polearm_accuracy_03",
		"combat_polearm_accuracy_04",
		"combat_polearm_speed_01",
		"combat_polearm_speed_02",
		"combat_polearm_speed_03",
		"combat_polearm_speed_04",
		"combat_polearm_ability_01",
		"combat_polearm_ability_02",
		"combat_polearm_ability_03",
		"combat_polearm_ability_04",
		"combat_polearm_support_01",
		"combat_polearm_support_02",
		"combat_polearm_support_03",
		"combat_polearm_support_04",
		"combat_polearm_master"
	},

	{	// 22
		"combat_pistol_novice",
		"combat_pistol_accuracy_01",
		"combat_pistol_accuracy_02",
		"combat_pistol_accuracy_03",
		"combat_pistol_accuracy_04",
		"combat_pistol_speed_01",
		"combat_pistol_speed_02",
		"combat_pistol_speed_03",
		"combat_pistol_speed_04",
		"combat_pistol_ability_01",
		"combat_pistol_ability_02",
		"combat_pistol_ability_03",
		"combat_pistol_ability_04",
		"combat_pistol_support_01",
		"combat_pistol_support_02",
		"combat_pistol_support_03",
		"combat_pistol_support_04",
		"combat_pistol_master"
	},

	{	// 23
		"social_politician_novice",
		"social_politician_fiscal_01",
		"social_politician_fiscal_02",
		"social_politician_fiscal_03",
		"social_politician_fiscal_04",
		"social_politician_martial_01",
		"social_politician_martial_02",
		"social_politician_martial_03",
		"social_politician_martial_04",
		"social_politician_civic_01",
		"social_politician_civic_02",
		"social_politician_civic_03",
		"social_politician_civic_04",
		"social_politician_urban_01",
		"social_politician_urban_02",
		"social_politician_urban_03",
		"social_politician_urban_04",
		"social_politician_master"
	},

	{	// 24
		"outdoors_ranger_novice",
		"outdoors_ranger_movement_01",
		"outdoors_ranger_movement_02",
		"outdoors_ranger_movement_03",
		"outdoors_ranger_movement_04",
		"outdoors_ranger_tracking_01",
		"outdoors_ranger_tracking_02",
		"outdoors_ranger_tracking_03",
		"outdoors_ranger_tracking_04",
		"outdoors_ranger_harvest_01",
		"outdoors_ranger_harvest_02",
		"outdoors_ranger_harvest_03",
		"outdoors_ranger_harvest_04",
		"outdoors_ranger_support_01",
		"outdoors_ranger_support_02",
		"outdoors_ranger_support_03",
		"outdoors_ranger_support_04",
		"outdoors_ranger_master"
	},

	{	// 25
		"combat_rifleman_novice",
		"combat_rifleman_accuracy_01",
		"combat_rifleman_accuracy_02",
		"combat_rifleman_accuracy_03",
		"combat_rifleman_accuracy_04",
		"combat_rifleman_speed_01",
		"combat_rifleman_speed_02",
		"combat_rifleman_speed_03",
		"combat_rifleman_speed_04",
		"combat_rifleman_ability_01",
		"combat_rifleman_ability_02",
		"combat_rifleman_ability_03",
		"combat_rifleman_ability_04",
		"combat_rifleman_support_01",
		"combat_rifleman_support_02",
		"combat_rifleman_support_03",
		"combat_rifleman_support_04",
		"combat_rifleman_master"
	},

	{	// 26
		"outdoors_scout_novice",
		"outdoors_scout_movement_01",
		"outdoors_scout_movement_02",
		"outdoors_scout_movement_03",
		"outdoors_scout_movement_04",
		"outdoors_scout_tools_01",
		"outdoors_scout_tools_02",
		"outdoors_scout_tools_03",
		"outdoors_scout_tools_04",
		"outdoors_scout_harvest_01",
		"outdoors_scout_harvest_02",
		"outdoors_scout_harvest_03",
		"outdoors_scout_harvest_04",
		"outdoors_scout_camp_01",
		"outdoors_scout_camp_02",
		"outdoors_scout_camp_03",
		"outdoors_scout_camp_04",
		"outdoors_scout_master"
	},

	{	// 27
		"combat_smuggler_novice",
		"combat_smuggler_master",
		"combat_smuggler_underworld_01",
		"combat_smuggler_underworld_02",
		"combat_smuggler_underworld_03",
		"combat_smuggler_underworld_04",
		"combat_smuggler_slicing_01",
		"combat_smuggler_slicing_02",
		"combat_smuggler_slicing_03",
		"combat_smuggler_slicing_04",
		"combat_smuggler_combat_01",
		"combat_smuggler_combat_02",
		"combat_smuggler_combat_03",
		"combat_smuggler_combat_04",
		"combat_smuggler_spice_01",
		"combat_smuggler_spice_02",
		"combat_smuggler_spice_03",
		"combat_smuggler_spice_04"
	},

	{	// 28
		"outdoors_squadleader_novice",
		"outdoors_squadleader_movement_01",
		"outdoors_squadleader_movement_02",
		"outdoors_squadleader_movement_03",
		"outdoors_squadleader_movement_04",
		"outdoors_squadleader_offense_01",
		"outdoors_squadleader_offense_02",
		"outdoors_squadleader_offense_03",
		"outdoors_squadleader_offense_04",
		"outdoors_squadleader_defense_01",
		"outdoors_squadleader_defense_02",
		"outdoors_squadleader_defense_03",
		"outdoors_squadleader_defense_04",
		"outdoors_squadleader_support_01",
		"outdoors_squadleader_support_02",
		"outdoors_squadleader_support_03",
		"outdoors_squadleader_support_04",
		"outdoors_squadleader_master"
	},

	{	// 29
		"combat_2hsword_novice",
		"combat_2hsword_accuracy_01",
		"combat_2hsword_accuracy_02",
		"combat_2hsword_accuracy_03",
		"combat_2hsword_accuracy_04",
		"combat_2hsword_speed_01",
		"combat_2hsword_speed_02",
		"combat_2hsword_speed_03",
		"combat_2hsword_speed_04",
		"combat_2hsword_ability_01",
		"combat_2hsword_ability_02",
		"combat_2hsword_ability_03",
		"combat_2hsword_ability_04",
		"combat_2hsword_support_01",
		"combat_2hsword_support_02",
		"combat_2hsword_support_03",
		"combat_2hsword_support_04",
		"combat_2hsword_master"
	},

	{	// 30
		"crafting_tailor_novice",
		"crafting_tailor_casual_01",
		"crafting_tailor_casual_02",
		"crafting_tailor_casual_03",
		"crafting_tailor_casual_04",
		"crafting_tailor_field_01",
		"crafting_tailor_field_02",
		"crafting_tailor_field_03",
		"crafting_tailor_field_04",
		"crafting_tailor_formal_01",
		"crafting_tailor_formal_02",
		"crafting_tailor_formal_03",
		"crafting_tailor_formal_04",
		"crafting_tailor_production_01",
		"crafting_tailor_production_02",
		"crafting_tailor_production_03",
		"crafting_tailor_production_04",
		"crafting_tailor_master"
	},

	{	// 31
		"combat_unarmed_novice",
		"combat_unarmed_accuracy_01",
		"combat_unarmed_accuracy_02",
		"combat_unarmed_accuracy_03",
		"combat_unarmed_accuracy_04",
		"combat_unarmed_speed_01",
		"combat_unarmed_speed_02",
		"combat_unarmed_speed_03",
		"combat_unarmed_speed_04",
		"combat_unarmed_ability_01",
		"combat_unarmed_ability_02",
		"combat_unarmed_ability_03",
		"combat_unarmed_ability_04",
		"combat_unarmed_support_01",
		"combat_unarmed_support_02",
		"combat_unarmed_support_03",
		"combat_unarmed_support_04",
		"combat_unarmed_master"
	},

	{	// 32
		"crafting_weaponsmith_novice",
		"crafting_weaponsmith_melee_01",
		"crafting_weaponsmith_melee_02",
		"crafting_weaponsmith_melee_03",
		"crafting_weaponsmith_melee_04",
		"crafting_weaponsmith_firearms_01",
		"crafting_weaponsmith_firearms_02",
		"crafting_weaponsmith_firearms_03",
		"crafting_weaponsmith_firearms_04",
		"crafting_weaponsmith_munitions_01",
		"crafting_weaponsmith_munitions_02",
		"crafting_weaponsmith_munitions_03",
		"crafting_weaponsmith_munitions_04",
		"crafting_weaponsmith_techniques_01",
		"crafting_weaponsmith_techniques_02",
		"crafting_weaponsmith_techniques_03",
		"crafting_weaponsmith_techniques_04",
		"crafting_weaponsmith_master"
	}
};

string[] getSkills(string profession)
{
	if(profession == null || profession == "")
		return null;

	for(int i = 0; i < PROFESSIONS.length; i++)
	{
		if(profession.equals(PROFESSIONS[i]))
		{
			return SKILLS[i];
		}
	}

	return null;
}

obj_id makePlayer(obj_id player, location here, string species, string gender, string profession)
{
	if (profession != "artisan" && profession != "brawler" && profession != "entertainer" && profession != "marksman" && profession != "medic" && profession != "scout" && profession != "jedi")
	{
		if (debug) debugSpeakMsg(player, "Invalid profession given");
		return null;
	}

	string speciesRoot = "object/creature/player/";

	string object = speciesRoot + species + "_" + gender + ".iff";
	obj_id npc = createObjectSimulator(object, here);
	if (npc == null)
	{
		if (debug) debugSpeakMsg(player, "Could not create player from " + object);
		return null;
	}

	dictionary racial_mods = null;
	string template = species + "_" + gender;

	string racial_tbl = "datatables/creation/racial_mods.iff";
	int templateRow = 0;
	if (gender.equals("male"))
		templateRow = dataTableSearchColumnForString(template, 0, racial_tbl);
	else
		templateRow = dataTableSearchColumnForString(template, 1, racial_tbl);

	racial_mods = dataTableGetRow(racial_tbl, templateRow);

	if (racial_mods == null || racial_mods.isEmpty())
		return null;

	int professionRow = 0;

	if (profession == "artisan")
		professionRow = 0;
	else if (profession == "brawler")
		professionRow = 1;
	else if (profession == "entertainer")
		professionRow = 2;
	else if (profession == "marksman")
		professionRow = 3;
	else if (profession == "medic")
		professionRow = 4;
	else if (profession == "scout")
		professionRow = 5;
	else if (profession == "jedi")
		professionRow = 6;

	dictionary prof_mods = dataTableGetRow("datatables/creation/profession_mods.iff", professionRow);
	if (debug) debugSpeakMsg(player, "I want to set the following values:");
	attribute[] attribs = new attribute[9];

	for ( int x = HEALTH; x <= WILLPOWER; x++ )
	{
		string aname = "";
		switch (x)
		{
			case 0:
				aname = "health";
				break;
			case 1:
				aname = "constitution";
				break;
			case 2:
				aname = "action";
				break;
			case 3:
				aname = "stamina";
				break;
			case 4:
				aname = "mind";
				break;
			case 5:
				aname = "willpower";
				break;
		}

		int newval = racial_mods.getInt(aname) + prof_mods.getInt(aname);
		attribs[x] = new attribute(x, newval);

		if (debug) debugSpeakMsg(player, x + " " + newval);
	}

	setMaxAttribs(npc, attribs);
	setAttribs(npc, attribs);

	// make sure all skills have the commands they should have
	string[] skills = getSkillListingForPlayer(npc);
	for (int i = 0; i < skills.length; ++i)
	{
		string[] skillCommands = getSkillCommandsProvided(skills[i]);
		for (int j = 0; j < skillCommands.length; ++j)
			grantCommand(npc, skillCommands[j]);
	}

	return npc;
}

obj_id giveEquipment(obj_id player, obj_id reciever, string object)
{
	if (reciever == null)
	{
		if (debug) debugSpeakMsg(player, "Cannot give equipment to a null player");
		return null;
	}

	obj_id id;

	if (object.indexOf("/weapon/") != -1)
	{
		id = weapons.createWeapon(object, reciever, CRAFTED_QUALITY);
		if (debug) debugSpeakMsg(player, "Setting as current weapon");
		if (!setCurrentWeapon(reciever, id))
			if (debug) debugSpeakMsg(player, "There was an error setting the current weapon");
	}
	else
	{
		id = createObjectInInventoryAllowOverload(object, reciever);
	}

	if (id == null)
		if (debug) debugSpeakMsg(player, "Could not create " + object);
	else if (!equipOverride(id, reciever))
		if (debug) debugSpeakMsg(player, "Could not equip " + object);
	else
		if (debug) debugSpeakMsg(player, "Successfully created and equipped " + object);

	if (object.indexOf("/armor/") != -1)
	{
		// special armor handling
		// lets always assume advanced armor and assault, unless we know otherwise - is there a better way to get this info?!
		int armorLevel = AL_advanced;
		int armorCategory = AC_assault;

		if (object.indexOf("assault") != -1)
			armorCategory = AC_assault;
		else if (object.indexOf("battle") != -1)
			armorCategory = AC_battle;
		else if (object.indexOf("recon") != -1)
			armorCategory = AC_reconnaissance;
		else if (object.indexOf("composite") != -1 || object.indexOf("kashyyykian_hunting") != -1 || object.indexOf("chitin") != -1 || object.indexOf("ithorian_sentinel") != -1 || object.indexOf("assault_trooper") != -1 || object.indexOf("rebel_assault") != -1)
			armorCategory = AC_assault;
		else if (object.indexOf("padded") != -1 || object.indexOf("kashyyykian_black_mtn") != -1 || object.indexOf("bone") != -1 || object.indexOf("ithorian_defender") != -1 || object.indexOf("stormtrooper") != -1 || object.indexOf("rebel_battle") != -1)
			armorCategory = AC_battle;
		else if (object.indexOf("tantel") != -1 || object.indexOf("kashyyykian_ceremonial") != -1 || object.indexOf("ubese") != -1 || object.indexOf("ithorian_guardian") != -1 || object.indexOf("scout_trooper") != -1 || object.indexOf	("marine") != -1)
			armorCategory = AC_reconnaissance;

		armor.setArmorDataPercent(id, armorLevel, armorCategory, GENERAL_PROTECTION, CONDITION);
		//armor.setArmorEncumbrancePercent(id, ENCUMBRANCE,armor.findEncumbrance(id));

		if (!isGameObjectTypeOf(id, GOT_armor_foot) && !isGameObjectTypeOf(id, GOT_armor_hand))
		{
			if (armorCategory == AC_assault)
				armor.setArmorSpecialProtectionPercent(id, armor.DATATABLE_ASSAULT_LAYER, 1.0f);
			else if (armorCategory == AC_reconnaissance)
				armor.setArmorSpecialProtectionPercent(id, armor.DATATABLE_RECON_LAYER, 1.0f);
		}
	}
/*
	int[] attribBonuses = getAttributeBonuses(id);
	if (debug) debugSpeakMsg(player, "Attrib Bonuses:");
	for (int i = 0; i < attribBonuses.length; ++i)
		if (debug) debugSpeakMsg(player, i + ": " + attribBonuses[i]);

	dictionary skillModBonuses = getSkillModBonuses(id);
	if (debug) debugSpeakMsg(player, "Skill Mod Bonuses:");
	java.util.Enumeration keys = skillModBonuses.keys();
	while (keys.hasMoreElements())
	{
		string key = (string)keys.nextElement();
		int amt = skillModBonuses.getInt(key);
		if (debug) debugSpeakMsg(player, key + ": " + amt);
	}
*/
	return id;
}

void addBuff(obj_id player, obj_id reciever, string attrib)
{
/*
	if(attrib == "health" && !hasAttribModifier(reciever, "medical_enhance_health"))    //with 3200 this is a 200% buff ie 1000 base converts to 3000 final
		addAttribModifier(reciever, "medical_enhance_health", HEALTH, healing.getBuffAmount(reciever, HEALTH, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else if(attrib == "constitution" && !hasAttribModifier(reciever, "medical_enhance_constitution"))
		addAttribModifier(reciever, "medical_enhance_constitution", CONSTITUTION, healing.getBuffAmount(reciever, CONSTITUTION, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else if(attrib == "action" && !hasAttribModifier(reciever, "medical_enhance_action"))
		addAttribModifier(reciever, "medical_enhance_action", ACTION, healing.getBuffAmount(reciever, ACTION, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else if(attrib == "stamina" && !hasAttribModifier(reciever, "medical_enhance_stamina"))
		addAttribModifier(reciever, "medical_enhance_stamina", STAMINA, healing.getBuffAmount(reciever, STAMINA, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else if(attrib == "mind" && !hasAttribModifier(reciever, "performance_enhance_dance_mind"))
		addAttribModifier(reciever, "performance_enhance_dance_mind", MIND, healing.getBuffAmount(reciever, MIND, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else if(attrib == "willpower" && !hasAttribModifier(reciever, "performance_enhance_music_willpower"))
		addAttribModifier(reciever, "performance_enhance_music_willpower", WILLPOWER, healing.getBuffAmount(reciever, WILLPOWER, 3200), 10800, 0.0f, 10.0f, true, false, true);
	else
	{
		if (debug) debugSpeakMsg(player, "Buff for " + attrib + " not given - player already has it");
		return;
	}

	if (debug) debugSpeakMsg(player, "Buff for " + attrib + " given");
*/
}

int getSkillLevel(string skill)
{
	if (skill.endsWith("_novice"))
		return 0;
	else if (skill.endsWith("_01"))
		return 1;
	else if (skill.endsWith("_02"))
		return 2;
	else if (skill.endsWith("_03"))
		return 3;
	else if (skill.endsWith("_04"))
		return 4;
	else if (skill.endsWith("_master"))
		return 5;
	else
		return -1;
}

boolean grantSkillRecursive(obj_id player, obj_id recipient, string skill)
{
	if (debug) debugSpeakMsg(player, "Granting skill " + skill);

	string[] skills = getSkillPrerequisiteSkills(skill);
	for (int i = 0; i < skills.length; ++i)
		if (!hasSkill(recipient, skills[i]))
			grantSkillRecursive(player, recipient, skills[i]);

	return grantSkill(recipient, skill);
}

void reset()
{
	obj_id self = getSelf();

	obj_id playerA = getObjIdObjVar(self, "combat_simulator.player_a");
	obj_id playerB = getObjIdObjVar(self, "combat_simulator.player_b");

	if (debug) debugSpeakMsg(self, "Resetting simulator");
	if (playerA != null)
	{
		if (hasObjVar(playerA, "combat_simulator.is_creature"))
		{
			removeAllObjVars(playerA);
			detachAllScripts(playerA);
			destroyObject(playerA);
		}
		else
		{
			removeAllObjVars(playerA);
			detachAllScripts(playerA);
			destroyObjectSimulator(playerA);
		}
	}
	if (playerB != null)
	{
		if (hasObjVar(playerB, "combat_simulator.is_creature"))
		{
			removeAllObjVars(playerB);
			detachAllScripts(playerB);
			destroyObject(playerB);
		}
		else
		{
			removeAllObjVars(playerB);
			detachAllScripts(playerB);
			destroyObjectSimulator(playerB);
		}
	}

	removeObjVar(self, "combat_simulator.player_a");
	removeObjVar(self, "combat_simulator.player_b");
	removeObjVar(self, "combat_simulator.commands_a");
	removeObjVar(self, "combat_simulator.commands_b");
	removeObjVar(self, "combat_simulator.label");
	removeObjVar(self, "combat_simulator.rounds");
	removeObjVar(self, "combat_simulator.range");
}

void removeCommandList(obj_id player)
{
	int commandListNumber = 0;
	while(hasObjVar(player, "combat_simulator.command_list."+commandListNumber))
	{
		removeObjVar(player, "combat_simulator.command_list."+commandListNumber);
		++commandListNumber;
	}
}

void putCommandList(obj_id player, string[] commands)
{
	removeCommandList(player);

	int commandListNumber = 0;
	resizeable string[] newCommands = new Vector();
	int sizeOfNewCommands = 0;

	for (int i = 0; i < commands.length; ++i)
	{
		string nextCommand = commands[i];

		if (nextCommand.length() + sizeOfNewCommands > 900)
		{
			setObjVar(player, "combat_simulator.command_list."+commandListNumber, newCommands);
			++commandListNumber;
			sizeOfNewCommands = 0;
			newCommands.clear();
		}

		newCommands.add(nextCommand);
		sizeOfNewCommands += nextCommand.length();
	}
}

resizeable string[] getCommandList(obj_id player)
{
	int commandListNumber = 0;
	resizeable string[] commands = new Vector();
	int sizeOfNewCommands = 0;

	while(hasObjVar(player, "combat_simulator.command_list."+commandListNumber))
	{
		string[] commandList = getStringArrayObjVar(player, "combat_simulator.command_list."+commandListNumber);
		++commandListNumber;

		for (int i = 0; i < commandList.length; i++)
		{
			commands.add(commandList[i]);
		}
	}

	return commands;
}

const string[] validCommands =
{
	"setLabel <label>",
	"setNumRounds <numRounds>",
	"setRange <range>",
	"makePlayer <A|B> <species> <gender> <profession>",
	"makeCreature <A|B> <creature>",
	"giveEquipment <A|B> <object>",
	"giveProfession <A|B> <profession> <level> (level is 0 (novice) to 5 (master))",
	"addCommand <A|B> <command>",
	"getPlayerInfo <A|B>",
	"setAttribWound <A|B> <attrib> <value>",
	"giveBuff <A|B> <attrib>",
	"sendCombatInfo",
	"startCombat",
	"reset"
};

trigger OnSpeaking(string text)
{

	java.util.StringTokenizer st = new java.util.StringTokenizer(text);
	string arg = st.nextToken();

	if (arg == "debug")
		return SCRIPT_CONTINUE;

	obj_id playerA = getObjIdObjVar(self, "combat_simulator.player_a");
	obj_id playerB = getObjIdObjVar(self, "combat_simulator.player_b");
	string label = getStringObjVar(self, "combat_simulator.label");
	int rounds = getIntObjVar(self, "combat_simulator.rounds");
	resizeable string[] commandsA = getResizeableStringArrayObjVar(self, "combat_simulator.commands_a");
	if (commandsA == null)
		commandsA = new Vector();

	resizeable string[] commandsB = getResizeableStringArrayObjVar(self, "combat_simulator.commands_b");
	if (commandsB == null)
		commandsB = new Vector();

	resizeable string[] commandList = getCommandList(self);
	if (commandList == null)
		commandList = new Vector();

	if (!isGod(self) && !hasObjVar(self, "combat_simulator.created_from_combat_simulator_user"))
	{
		if (debug) debugSpeakMsg(self, "You cannot run the combat simulator when not in god mode");
		return SCRIPT_OVERRIDE;
	}

	if (arg == "setLabel")
	{
		if (st.countTokens() != 1)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[0]);
			return SCRIPT_OVERRIDE;
		}

		label = st.nextToken();

		setObjVar(self, "combat_simulator.label", label);

		if (debug) debugSpeakMsg(self, "Label set as : " + label);
		return SCRIPT_OVERRIDE;
	}
	else if (arg == "setNumRounds")
	{
		if (st.countTokens() != 1)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[1]);
			return SCRIPT_OVERRIDE;
		}

		int numRounds = utils.stringToInt(st.nextToken());

		setObjVar(self, "combat_simulator.rounds", numRounds);

		if (debug) debugSpeakMsg(self, "Number of rounds set as : " + numRounds);
		return SCRIPT_OVERRIDE;
	}
	else if (arg == "setRange")
	{
		if (st.countTokens() != 1)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[2]);
			return SCRIPT_OVERRIDE;
		}

		int range = utils.stringToInt(st.nextToken());

		setObjVar(self, "combat_simulator.range", range);

		if (debug) debugSpeakMsg(self, "Range set as : " + range);
		return SCRIPT_OVERRIDE;
	}
	else if (arg == "makePlayer")
	{
		if (st.countTokens() != 4)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[3]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string species = st.nextToken();
		string gender = st.nextToken();
		string profession = st.nextToken();

		location loc = getLocation(self);
		float range = 1.0f;
		if (hasObjVar(self, "combat_simulator.range"))
			range = getIntObjVar(self, "combat_simulator.range") / 2.0f;
		loc.z += 3;

		if (player == "A" && playerA == null)
		{
			loc.x -= range;
			playerA = makePlayer(self, loc, species, gender, profession);
			attachScript(playerA, actorScript);
			setObjVar(self, "combat_simulator.player_a", playerA);
		}
		else if (player == "B" && playerB == null)
		{
			loc.x += range;
			playerB = makePlayer(self, loc, species, gender, profession);
			attachScript(playerB, actorScript);
			setObjVar(self, "combat_simulator.player_b", playerB);
		}

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("makePlayer " + player + " " + species + " " + gender + " " + profession);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "makeCreature")
	{
		if (st.countTokens() != 2)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[4]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string creature = st.nextToken();

		location loc = getLocation(self);
		float range = 1.0f;
		if (hasObjVar(self, "combat_simulator.range"))
			range = getIntObjVar(self, "combat_simulator.range") / 2.0f;
		loc.z += 3;

		if (player == "A" && playerA == null)
		{
			loc.x -= range;
			playerA = create.createCreature(creature, loc, true);
			stop(playerA);
			attachScript(playerA, actorScript);
			setObjVar(self, "combat_simulator.player_a", playerA);
			setObjVar(playerA, "combat_simulator.is_creature", true);
		}
		else if (player == "B" && playerB == null)
		{
			loc.x += range;
			playerB = create.createCreature(creature, loc, true);
			stop(playerB);
			attachScript(playerB, actorScript);
			setObjVar(self, "combat_simulator.player_b", playerB);
			setObjVar(playerB, "combat_simulator.is_creature", true);
		}

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("makeCreature " + player + " " + creature);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "giveEquipment")
	{
		if (st.countTokens() != 2)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[5]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string object = st.nextToken();

		if (player == "A")
			giveEquipment(self, playerA, object);
		else if (player == "B")
			giveEquipment(self, playerB, object);

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("giveEquipment " + player + " " + object);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "giveProfession")
	{
		if(st.countTokens() != 3)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[6]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string profession = st.nextToken();
		int level = utils.stringToInt(st.nextToken());

		obj_id playerId = null;
		if (player == "A")
			playerId = playerA;
		else if (player == "B")
			playerId = playerB;
		else
			return SCRIPT_OVERRIDE;

		if (playerId == null)
		{
			if (debug) debugSpeakMsg(self, "Cannot give profession to a null player");
			return SCRIPT_OVERRIDE;
		}

		string[] skills = getSkills(profession);

		if(skills == null || skills.length == 0)
			return SCRIPT_OVERRIDE;

		boolean result = true;

		for(int i = 0; i < skills.length; i++)
			if(!hasSkill(playerId, skills[i]) && getSkillLevel(skills[i]) <= level)
				result &= grantSkillRecursive(self, playerId, skills[i]);

		if(result)
			if (debug) debugSpeakMsg(self, "Profession granted");

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("giveProfession " + player + " " + profession + " " + level);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "addCommand")
	{
		if(st.countTokens() != 2)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[7]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string command = st.nextToken();

		if (player == "A")
		{
			if (!hasCommand(playerA, command))
			{
				if (debug) debugSpeakMsg(self, "Player did not have " + command + ", granting it");
				if (!grantCommand(playerA, command))
				{
					if (debug) debugSpeakMsg(self, command + " could not be given");
					return SCRIPT_OVERRIDE;
				}
				else if (!hasCommand(playerA, command))
				{
					if (debug) debugSpeakMsg(self, "Invalid command, not adding to list");
					return SCRIPT_OVERRIDE;
				}
			}

			if (debug) debugSpeakMsg(self, command + " added");
			commandsA.add(command);
			setObjVar(self, "combat_simulator.commands_a", commandsA);
		}
		else if (player == "B")
		{
			if (!hasCommand(playerB, command))
			{
				if (debug) debugSpeakMsg(self, "Player did not have " + command + ", granting it");
				if (!grantCommand(playerB, command))
				{
					if (debug) debugSpeakMsg(self, command + " could not be given");
					return SCRIPT_OVERRIDE;
				}
				else if (!hasCommand(playerB, command))
				{
					if (debug) debugSpeakMsg(self, "Invalid command, not adding to list");
					return SCRIPT_OVERRIDE;
				}
			}

			if (debug) debugSpeakMsg(self, command + " added");
			commandsB.add(command);
			setObjVar(self, "combat_simulator.commands_b", commandsB);
		}

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("addCommand " + player + " " + command);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "getPlayerInfo")
	{
		if(st.countTokens() != 1)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[8]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		obj_id playerId = null;
		resizeable string[] playerCommandList = new Vector();

		if (player == "A")
		{
			playerId = playerA;
			playerCommandList = commandsA;
		}
		else if (player == "B")
		{
			playerId = playerB;
			playerCommandList = commandsB;
		}
		else if (player == "self")
		{
			playerId = self;
		}
		else
			return SCRIPT_OVERRIDE;

		if (playerId == null)
		{
			if (debug) debugSpeakMsg(self, "Cannot get info of a null player");
			return SCRIPT_OVERRIDE;
		}

		if (debug) debugSpeakMsg(self, "Attributes:");
		for ( int x = HEALTH; x <= WILLPOWER; x++ )
		{
			string aname = "";
			switch (x)
			{
				case 0:
					aname = "health";
					break;
				case 1:
					aname = "constitution";
					break;
				case 2:
					aname = "action";
					break;
				case 3:
					aname = "stamina";
					break;
				case 4:
					aname = "mind";
					break;
				case 5:
					aname = "willpower";
					break;
			}

			string spaces = "   ";
			if (x % 3 != 0)
				spaces = "      ";

			if (debug) debugSpeakMsg(self, spaces + aname + ": " + getAttrib(playerId, x));
		}

		if (debug) debugSpeakMsg(self, "Skills:");
		string[] skills = getSkillListingForPlayer(playerId);
		Arrays.sort(skills);
		for (int i = 0; i < skills.length; ++i)
			if (debug) debugSpeakMsg(self, "   " + skills[i]);

		if (debug) debugSpeakMsg(self, "Commands:");
		string[] commands = getCommandListingForPlayer(playerId);
		Arrays.sort(commands);
		for (int i = 0; i < commands.length; ++i)
			if (debug) debugSpeakMsg(self, "   " + commands[i]);

		if (debug) debugSpeakMsg(self, "Command List:");
		for (int i = 0; i < playerCommandList.length; ++i)
			if (debug) debugSpeakMsg(self, "   " + playerCommandList[i]);

		obj_id objWeapon = getCurrentWeapon(playerId);
		int intWeaponType = getWeaponType(objWeapon);
		string strWeaponType = combat.getWeaponStringType(intWeaponType);
		if (debug) debugSpeakMsg(self, "Weapon: " + strWeaponType + " Id: " + objWeapon + " Type: " + intWeaponType);

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "setAttribWound")
	{
		if(st.countTokens() != 3)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[9]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string attrib = st.nextToken();
		int value = utils.stringToInt(st.nextToken());
		int attribNum;

		obj_id playerId = null;

		if (player == "A")
			playerId = playerA;
		else if (player == "B")
			playerId = playerB;
		else
			return SCRIPT_OVERRIDE;

		if (attrib == "health")
			attribNum = 0;
		else if (attrib == "constitution")
			attribNum = 1;
		else if (attrib == "action")
			attribNum = 2;
		else if (attrib == "stamina")
			attribNum = 3;
		else if (attrib == "mind")
			attribNum = 4;
		else if (attrib == "willpower")
			attribNum = 5;
		else
		{
			if (debug) debugSpeakMsg(self, attrib + " is not a valid attribute");
			return SCRIPT_OVERRIDE;
		}

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("setAttribWound " + player + " " + attrib + " " + value);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "giveBuff")
	{
		if(st.countTokens() != 2)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[10]);
			return SCRIPT_OVERRIDE;
		}

		string player = st.nextToken();
		string attrib = st.nextToken();

		if (attrib != "health" && attrib != "constitution" && attrib != "action" && attrib != "stamina" && attrib != "mind" && attrib != "willpower")
			if (debug) debugSpeakMsg(self, attrib + " is not a valid attribute to buff");

		obj_id playerId = null;

		if (player == "A")
			playerId = playerA;
		else if (player == "B")
			playerId = playerB;
		else
			return SCRIPT_OVERRIDE;

		addBuff(self, playerId, attrib);

		if (!hasObjVar(self, "combat_simulator.stop_accumulating_commands"))
		{
			commandList.add("giveBuff " + player + " " + attrib);
			putCommandList(self, (String[])commandList.toArray(new string[0]));
		}

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "sendCombatInfo")
	{
		if (playerA == null || playerB == null)
		{
			if (debug) debugSpeakMsg(self, "need to have both players for combat simulator");
			return SCRIPT_OVERRIDE;
		}

		// Objvars don't work with size 0 int arrays
		if (commandsA.length == 0)
			commandsA.add("defaultAttack");
		if (commandsB.length == 0)
			commandsB.add("defaultAttack");

		// initialize the first shot if we are just starting
		if (!hasObjVar(self, "combat_simulator.first_shot"))
			setObjVar(self, "combat_simulator.first_shot", "A");

		// just to be totally fair... flip between order info is sent
		string firstShotPlayer = getStringObjVar(self, "combat_simulator.first_shot");
		if (firstShotPlayer == "A")
		{
			if (debug) debugSpeakMsg(self, "player A is getting info first");
			setObjVar(playerA, "combat_simulator.owner", self);
			setObjVar(playerA, "combat_simulator.enemy", playerB);
			setObjVar(playerA, "combat_simulator.queue_commands", commandsA);
			if (!hasObjVar(playerA, "combat_simulator.is_creature"))
			{
				pvpMakeDeclared(playerA);
				pvpSetAlignedFaction(playerA, ##"rebel");
			}
			messageTo(playerA, "prepareForCombat", null, 0, false);

			setObjVar(playerB, "combat_simulator.owner", self);
			setObjVar(playerB, "combat_simulator.enemy", playerA);
			setObjVar(playerB, "combat_simulator.queue_commands", commandsB);
			if (!hasObjVar(playerB, "combat_simulator.is_creature"))
			{
				pvpMakeDeclared(playerB);
				pvpSetAlignedFaction(playerB, ##"imperial");
			}
			messageTo(playerB, "prepareForCombat", null, 0, false);
		}
		else if (firstShotPlayer == "B")
		{
			if (debug) debugSpeakMsg(self, "player B is getting info first");
			setObjVar(playerB, "combat_simulator.owner", self);
			setObjVar(playerB, "combat_simulator.enemy", playerA);
			setObjVar(playerB, "combat_simulator.queue_commands", commandsB);
			if (!hasObjVar(playerB, "combat_simulator.is_creature"))
			{
				pvpMakeDeclared(playerB);
				pvpSetAlignedFaction(playerB, ##"imperial");
			}
			messageTo(playerB, "prepareForCombat", null, 0, false);

			setObjVar(playerA, "combat_simulator.owner", self);
			setObjVar(playerA, "combat_simulator.enemy", playerB);
			setObjVar(playerA, "combat_simulator.queue_commands", commandsA);
			if (!hasObjVar(playerA, "combat_simulator.is_creature"))
			{
				pvpMakeDeclared(playerA);
				pvpSetAlignedFaction(playerA, ##"rebel");
			}
			messageTo(playerA, "prepareForCombat", null, 0, false);
		}

		if (debug) debugSpeakMsg(self, "Combat info sent");
		//debugSpeakMsg(self, "actorsDumpInfo");

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "startCombat")
	{
		if (playerA == null || playerB == null || label == null || label == "")
		{
			if (debug) debugSpeakMsg(self, "need to have both players and a label for combat simulator");
			return SCRIPT_OVERRIDE;
		}

		setObjVar(self, "combat_simulator.combat_start_time", Long.toString(System.currentTimeMillis()));
		if (!hasObjVar(self, "combat_simulator.rounds"))
			setObjVar(self, "combat_simulator.rounds", 1);
		if (!hasObjVar(self, "combat_simulator.current_round"))
			setObjVar(self, "combat_simulator.current_round", 1);

		// set an objVar so that we don't accumulate commands any more after we've started combat
		setObjVar(self, "combat_simulator.stop_accumulating_commands", 1);

		// initialize the first shot if we are just starting
		if (!hasObjVar(self, "combat_simulator.first_shot"))
			setObjVar(self, "combat_simulator.first_shot", "A");

		// just to be totally fair... flip between first shot
		string firstShotPlayer = getStringObjVar(self, "combat_simulator.first_shot");
		if (firstShotPlayer == "A")
		{
			if (debug) debugSpeakMsg(self, "player A is going first");
			messageTo(playerA, "startCombat", null, 0, false);
			messageTo(playerB, "startCombat", null, 0, false);
			setObjVar(self, "combat_simulator.first_shot", "B");
		}
		else if (firstShotPlayer == "B")
		{
			if (debug) debugSpeakMsg(self, "player B is going first");
			messageTo(playerB, "startCombat", null, 0, false);
			messageTo(playerA, "startCombat", null, 0, false);
			setObjVar(self, "combat_simulator.first_shot", "A");
		}

		if (debug)
		{
			if (utils.hasScriptVar(playerA, "inAlignedStructure"))
				debugSpeakMsg(self, "player A has factional bonus");
			if (utils.hasScriptVar(playerA, "inAlignedStructure"))
				debugSpeakMsg(self, "player B has factional bonus");
		}


		return SCRIPT_OVERRIDE;
	}
	else if (arg == "destroySim")
	{
		if(st.countTokens() != 1)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + "destroySim <obj_id>");
			return SCRIPT_OVERRIDE;
		}

		obj_id target = utils.stringToObjId(st.nextToken());

		detachAllScripts(target);
		destroyObjectSimulator(target);

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "getIds")
	{
		if (debug) debugSpeakMsg(self, "self id: " + self);
		if (playerA != null)
			if (debug) debugSpeakMsg(self, "playerA id: " + playerA);
		if (playerB != null)
			if (debug) debugSpeakMsg(self, "playerB id: " + playerB);

		return SCRIPT_OVERRIDE;
	}
	else if (arg == "reset")
	{
		reset();
		removeObjVar(self, "combat_simulator.current_round");
		removeObjVar(self, "combat_simulator.stop_accumulating_commands");
		removeObjVar(self, "combat_simulator.first_shot");
		removeCommandList(self);
		return SCRIPT_OVERRIDE;
	}
	else if (arg == "help")
	{
		if (debug) debugSpeakMsg(self, "Available Commands:");
		for (int i = 0; i < validCommands.length; ++i)
		{
			if (debug) debugSpeakMsg(self, "[combat_simulator] " + validCommands[i]);
		}

		return SCRIPT_OVERRIDE;
	}

	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if (text == "debug on")
		debug = true;
	else if (text == "debug off")
		debug = false;

	return SCRIPT_CONTINUE;
}

messageHandler endCombat()
{
	if (debug) debugSpeakMsg(self, "Got message that the fight is over");

	obj_id playerA = getObjIdObjVar(self, "combat_simulator.player_a");
	obj_id playerB = getObjIdObjVar(self, "combat_simulator.player_b");
	long combatStartTime = Long.parseLong(getStringObjVar(self, "combat_simulator.combat_start_time"));
	string label = getStringObjVar(self, "combat_simulator.label");
	int rounds = getIntObjVar(self, "combat_simulator.rounds");
	int currentRound = getIntObjVar(self, "combat_simulator.current_round");

	obj_id winner = params.getObjId("winner");

	obj_id loser = null;
	string winningPlayer = "";
	if (winner == playerA)
	{
		winningPlayer = "A";
		loser = playerB;
	}
	else if (winner == playerB)
	{
		winningPlayer = "B";
		loser = playerA;
	}
	else
		if (debug) debugSpeakMsg(self, "Can't determine winner of combat for some reason");

	if (currentRound == 1)
	{
		try
		{
			FileWriter writer = new FileWriter("combat_simulator." + label);
			writer.write("Round:\tWinner:\tWinnerH:\tWinnerA:\tWinnerM:\t#AttacksW:\t#AttacksL:\tTime:\n");
			writer.close();
		}
		catch(Exception e)
		{
			if (debug) debugSpeakMsg(self, "failed to create combat_simulator." + label + " : " + e);
		}

		try
		{
			FileWriter writer = new FileWriter("combat_simulator." + label + ".info");
			string[] commands = (String[])getCommandList(self).toArray(new string[0]);

			for (int i = 0; i < commands.length; ++i)
				writer.write(commands[i] + "\n");

			writer.close();
		}
		catch(Exception e)
		{
			if (debug) debugSpeakMsg(self, "failed to create combat_simulator." + label + ".info : " + e);
		}
	}

	int health = getAttrib(winner, HEALTH);
	int action = getAttrib(winner, ACTION);
	int mind = getAttrib(winner, MIND);
	int numAttacksWinner = getIntObjVar(winner, "combat_simulator.number_of_attacks");
	int numAttacksLoser = getIntObjVar(loser, "combat_simulator.number_of_attacks");
	long currentTime = System.currentTimeMillis();
	long totalTime = currentTime - combatStartTime;
	totalTime /= 1000.0;
	setObjVar(self, "combat_simulator.combat_start_time", currentTime);

	string message = (currentRound + "/" + rounds + "\t" + winningPlayer + "\t" + health + "\t" + action + "\t" + mind + "\t" + numAttacksWinner + "\t" + numAttacksLoser + "\t" + totalTime + "\n");
	if (debug) debugSpeakMsg(self, message);
	LOG("combat_simulator." + label, message);
	addToOutputFile(message);

	debugSpeakMsg(self, "Completed combat round " + currentRound);

	if (currentRound < rounds)
	{
		setObjVar(self, "combat_simulator.current_round", currentRound + 1);
		messageTo(self, "runSimulation", null, 1.0f, false);
	}
	else
	{
		// merge any sublabel files we've got
		mergeSubLabelFiles();
		// kill everything
		reset();
		// TODO - gather output and then output all collected info to log file
		removeAllObjVars(self);
		detachScript(self, "player.base.base_player");
		destroyObjectSimulator(self);
	}

	return SCRIPT_CONTINUE;
}

messageHandler runSimulation()
{
	reset();
	string[] commands = (String[])getCommandList(self).toArray(new string[0]);

	if (commands == null)
	{
		debugSpeakMsg(self, "Cannot run simulator - null commands issued");
		return SCRIPT_CONTINUE;
	}

	for (int i = 0; i < commands.length; ++i)
		debugSpeakMsg(self, commands[i]);

	messageTo(self, "sendCombatInfo", null, 1.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler sendCombatInfo()
{
	debugSpeakMsg(self, "sendCombatInfo");
	messageTo(self, "startCombat", null, 1.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler startCombat()
{
	debugSpeakMsg(self, "startCombat");

	return SCRIPT_CONTINUE;
}

void addToOutputFile(string fileContents)
{
	obj_id self = getSelf();

	string fileName = getStringObjVar(self, "combat_simulator.label");
	fileName = "combat_simulator." + fileName;

	try
	{
		FileWriter writer = new FileWriter(fileName, true);
		writer.write(fileContents);
		writer.close();
	}
	catch(Exception e)
	{
		if (debug) debugSpeakMsg(self, "failed to write " + fileName + " : " + e);
	}
}

void mergeSubLabelFiles()
{
	obj_id self = getSelf();
	string label = getStringObjVar(self, "combat_simulator.label");
	int subLabelIndex = label.indexOf('.');
	if (subLabelIndex == -1)
		return;

	label = "combat_simulator." + label.substring(0, subLabelIndex + 1);

	string output = "Round:\tWinner:\tWinnerH:\tWinnerA:\tWinnerM:\t#AttacksW:\t#AttacksL:\tTime:\n";

	// once finished with simulator, search for all files that have the same main label as you (except info)
	File dir = new File(".");

	string[] children = dir.list();
	if (children == null)
	{
		// Either dir does not exist or is not a directory
		return;
	}
	else
	{
		for (int i = 0; i < children.length; ++i)
		{
			// Get filename of file or directory
			string filename = children[i];
			File file = new File(filename);

			if (file.isFile() && filename.startsWith(label) && !filename.endsWith(".info"))
			{
				// for each one, strip off the title line and accumulate the rest of the info
				try
				{
					BufferedReader reader = new BufferedReader(new FileReader(filename));

					string lineRead = reader.readLine();
					while ((lineRead = reader.readLine()) != null)
					{
						output += (lineRead + "\n");
					}

					reader.close();
				}
				catch(Exception e)
				{
					if (debug) debugSpeakMsg(self, "failed to open " + filename + " : " + e);
				}
			}
		}
	}

	// output to the main output file
	label = label.substring(0, label.length() - 1);
	try
	{
		FileWriter writer = new FileWriter(label);
		writer.write(output);
		writer.close();
	}
	catch(Exception e)
	{
		if (debug) debugSpeakMsg(self, "failed to create " + label + " : " + e);
	}
}

#endif
