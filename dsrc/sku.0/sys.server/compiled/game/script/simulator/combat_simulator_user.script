/**
 * Title:        combat_simulator_user
 * Description:  User interface for the combat simulator - so a user can create multiple simulations to run on the server
 * Usage:        Attach to your player avatar and type 'startCombatSimulator', which will bring up a GUI to run simulations
 * Copyright:    Copyright (c) 2005
 * Company:      Sony Online Entertainment
 * @author       Vijay Thakkar
 * @version 1.0
 */

// NONE OF THIS SHOULD EVER GO TO LIVE - ifdef'd out
#ifdef DEBUG

include library.sui;
include library.create;
include library.utils;
include library.weapons;
include library.armor;
include java.util.Enumeration;

// Larger const array defined at the bottom

const string COMBAT_MASTER_SCRIPT = "simulator.combat_simulator_master";

const string[] COMBAT_SIMULATOR_MAIN_OPTIONS =
{
	"Set label",
	"Set number of rounds",
	"Set combat range",
	"Customize actor A",
	"Customize actor B",
	"Start simulation",
	"Destroy running simulation",
	"Reset all settings"
};

const string[] COMBAT_SIMULATOR_ACTOR_OPTIONS =
{
	"Race",
	"Gender",
	"Starting Profession",
	"Professions",
	"Weapon",
	"Armor",
	"Buffs",
//	"Consumables - NYI",
	"Wound Levels",
	"Command Queue",
	"Copy From Other Actor",
	"Make Actor A Creature",
	"Reset"
};

const string[] COMBAT_SIMULATOR_ACTOR_RACE_OPTIONS =
{
	"bothan",
	"human",
	"ithorian",
	"moncal",
	"rodian",
	"sullustan",
	"trandoshan",
	"twilek",
	"wookiee",
	"zobrak"
};

const string[] COMBAT_SIMULATOR_ACTOR_GENDER_OPTIONS =
{
	"female",
	"male"
};

const string[] COMBAT_SIMULATOR_ACTOR_STARTING_PROFESSION_OPTIONS =
{
	"artisan",
	"brawler",
	"entertainer",
	"marksman",
	"medic",
	"scout",
	"jedi"
};

const string[] COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS =
{
	"architect",
	"armorsmith",
	"artisan",
	"bioengineer",
	"bountyhunter",
	"brawler",
	"carbineer",
	"chef",
	"combatmedic",
	"commando",
	"creaturehandler",
	"dancer",
	"doctor",
	"droidengineer",
	"entertainer",
	"fencer",
	"imagedesigner",
	"marksman",
	"medic",
	"merchant",
	"musician",
	"pikeman",
	"pistoleer",
	"politician",
	"ranger",
	"rifleman",
	"scout",
	"smuggler",
	"squadleader",
	"swordsman",
	"tailor",
	"teraskasi",
	"weaponsmith"
};

const string[] COMBAT_SIMULATOR_ACTOR_PROFESSION_LEVEL_OPTIONS =
{
	"novice",
	"1",
	"2",
	"3",
	"4",
	"master",
	"none"
};

const string[] COMBAT_SIMULATOR_ACTOR_ATTRIBUTES =
{
	"health",
	"constitution",
	"action",
	"stamina",
	"mind",
	"willpower",
	"reset"
};

// ***************************
// main window
// ***************************
void combatSimulatorMain()
{
	obj_id self = getSelf();

	// set up initial weapons
	string[] allWeapons = dataTableGetStringColumnNoDefaults(weapons.WEAPON_DATA_TABLE, weapons.COL_TEMPLATE);
	utils.setScriptVar(self, "combat_simulator.weapons", allWeapons);
	// set up initial armor
	string[] allArmorInitial = dataTableGetStringColumnNoDefaults(armor.DATATABLE_MASTER_ARMOR, "crafted_object_template");
	// only keep those with object/tangible/wearables/armor/ in it
	resizeable string[] allArmor = new Vector();
	for (int i = 0; i < allArmorInitial.length; ++i)
		if (allArmorInitial[i].startsWith("object/tangible/wearables/armor/"))
			allArmor.add(allArmorInitial[i]);
	utils.setScriptVar(self, "combat_simulator.armor", allArmor);
	// set up list of all creatures
	string[] creatureList = dataTableGetStringColumnNoDefaults(create.CREATURE_TABLE, "creatureName");
	Arrays.sort(creatureList);
	utils.setScriptVar(self, "combat_simulator.creature_list", creatureList);
	// TODO - set up initial skillset from datatables/skills/skills.iff : NAME

	string label = "Main options:";

	if (utils.hasScriptVar(self, "combat_simulator.label"))
	{
		label += "\nCurrent label is: ";
		label += utils.getStringScriptVar(self, "combat_simulator.label");
	}
	if (utils.hasScriptVar(self, "combat_simulator.rounds"))
	{
		label += "\nCurrent number of rounds is: ";
		label += utils.getIntScriptVar(self, "combat_simulator.rounds");
	}
	if (utils.hasScriptVar(self, "combat_simulator.range"))
	{
		label += "\nCurrent range is: ";
		label += utils.getIntScriptVar(self, "combat_simulator.range");
	}

	utils.setScriptVar(self, "combat_simulator.current_actor", "A");
	label += "\n\nActor A: ";
	label += getActorInfo();
	utils.setScriptVar(self, "combat_simulator.current_actor", "B");
	label += "\n\nActor B: ";
	label += getActorInfo();
	utils.removeScriptVar(self, "combat_simulator.current_actor");

	closeOldWindowPid();
	int pid = sui.listbox(self, self,  label, sui.OK_CANCEL, "Combat simulator", COMBAT_SIMULATOR_MAIN_OPTIONS, "mainOptionsOk", true, false);
	setWindowPid(pid);
}

messageHandler mainOptionsOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

	if (btn == sui.BP_CANCEL || idx == -1)
		return SCRIPT_CONTINUE;

	switch(idx)
	{
		case 0:
			// set label
			setLabel();
			break;
		case 1:
			// set num rounds
			setNumberOfRounds();
			break;
		case 2:
			// set combat range
			setRange();
			break;
		case 3:
			// customize actor A
			utils.setScriptVar(self, "combat_simulator.current_actor", "A");
			customizeActor();
			break;
		case 4:
			// customize actor B
			utils.setScriptVar(self, "combat_simulator.current_actor", "B");
			customizeActor();
			break;
		case 5:
			// start sim!
			startSimulation();
			break;
		case 6:
			// destroy running simulation
			destroySimulation();
			break;
		case 7:
			// reset everything
			reset("combat_simulator");
			break;
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// label window
// ***************************
void setLabel()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string label = "Input a label for this simulation:";
	label += "\n(will also be data output filename)";
	dictionary params = new dictionary();

	if (utils.hasScriptVar(self, "combat_simulator.label"))
	{
		label += "\nCurrent label is: ";
		string pastLabel = utils.getStringScriptVar(self, "combat_simulator.label");
		label += pastLabel;
		params.put(sui.INPUTBOX_INPUT + "-" + sui.PROP_TEXT, pastLabel);
	}

	int pid = sui.inputbox(self, self, label, sui.OK_CANCEL, "Set Label", sui.INPUT_NORMAL, null, "setLabelOk", params);
	setWindowPid(pid);
}

messageHandler setLabelOk()
{
	string label = sui.getInputBoxText(params);
	int button = sui.getIntButtonPressed(params);

	if (button == sui.BP_OK)
	{
		if (utils.hasScriptVar(self, "combat_simulator.label") && label == "")
			utils.removeScriptVar(self, "combat_simulator.label");
		else
			utils.setScriptVar(self, "combat_simulator.label", label);
	}

	combatSimulatorMain();

	return SCRIPT_CONTINUE;
}

// ***************************
// num rounds window
// ***************************
void setNumberOfRounds()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string label = "Set the number of rounds you want to run in this simulation:";

	if (utils.hasScriptVar(self, "combat_simulator.rounds"))
	{
		label += "\nCurrent number of rounds is: ";
		label += utils.getIntScriptVar(self, "combat_simulator.rounds");
	}

	label += "\n(an even number is recommended to even out first-shot advantage)";

	int pid = sui.inputbox(self, self, label, sui.OK_CANCEL, "Set Runs", sui.INPUT_NORMAL, null, "setNumberOfRoundsOk", null);
	setWindowPid(pid);

}

messageHandler setNumberOfRoundsOk()
{
	string label = sui.getInputBoxText(params);
	int button = sui.getIntButtonPressed(params);

	if (button == sui.BP_OK)
	{
		if (utils.hasScriptVar(self, "combat_simulator.rounds") && label == "")
			utils.removeScriptVar(self, "combat_simulator.rounds");
		else if (label != "")
			utils.setScriptVar(self, "combat_simulator.rounds", utils.stringToInt(label));
	}

	combatSimulatorMain();

	return SCRIPT_CONTINUE;
}

// ***************************
// set range window
// ***************************
void setRange()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string label = "Input a range for simulation:";

	if (utils.hasScriptVar(self, "combat_simulator.range"))
	{
		label += "\nCurrent range is: ";
		label += utils.getIntScriptVar(self, "combat_simulator.range");
	}

	int pid = sui.inputbox(self, self, label, sui.OK_CANCEL, "Set Range", sui.INPUT_NORMAL, null, "setRangeOk", null);
	setWindowPid(pid);
}

messageHandler setRangeOk()
{
	string range = sui.getInputBoxText(params);
	int button = sui.getIntButtonPressed(params);

	if (button == sui.BP_OK)
	{
		if (utils.hasScriptVar(self, "combat_simulator.range") && range == "")
			utils.removeScriptVar(self, "combat_simulator.range");
		else if (range != "")
			utils.setScriptVar(self, "combat_simulator.range", utils.stringToInt(range));
	}

	combatSimulatorMain();

	return SCRIPT_CONTINUE;
}

// ***************************
// customize actor window
// ***************************
void customizeActor()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string player = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string textbox = "Options for actor " + player + ":\n";
	textbox += "Current actor info: ";
	textbox += getActorInfo();
	int pid = sui.listbox(self, self,  textbox, sui.OK_CANCEL, "Actor customization", COMBAT_SIMULATOR_ACTOR_OPTIONS, "customizeActorOk", true, false);
	setWindowPid(pid);
}

messageHandler customizeActorOk()
{
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

	if (btn == sui.BP_CANCEL || idx == -1)
	{
		utils.removeScriptVar(self, "combat_simulator.current_actor");
		combatSimulatorMain();
		return SCRIPT_CONTINUE;
	}

	switch(idx)
	{
		case 0:
			// set race
			setRace();
			break;
		case 1:
			// set gender
			setGender();
			break;
		case 2:
			// set starting profession
			setStartingProfession();
			break;
		case 3:
			// set professions
			setProfessions();
			break;
		case 4:
			// weapons
			setWeapon();
			break;
		case 5:
			// armor
			setArmor();
			break;
		case 6:
			// buffs
			setBuffs();
			break;
/*		case 7:
			// consumables
			setConsumables();
			break;
*/		case 7:
			break;
		case 8:
			// command queue
			setCommandQueue();
			break;
		case 9:
			// copy other actor
			copyOtherActor();
			break;
		case 10:
			// make a creature
			setCreatureLetter();
			break;
		case 11:
			// reset player
			reset("combat_simulator." + utils.getStringScriptVar(self, "combat_simulator.current_actor"));
			break;
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// race window
// ***************************
void setRace()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a race:";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".race"))
	{
		label += "\nCurrent race is: ";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".race");
	}

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Race selection", COMBAT_SIMULATOR_ACTOR_RACE_OPTIONS, "setRaceOk", true, false);
	setWindowPid(pid);
}

messageHandler setRaceOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	if (btn == sui.BP_OK && idx != -1)
		utils.setScriptVar(self, "combat_simulator." + actor + ".race", COMBAT_SIMULATOR_ACTOR_RACE_OPTIONS[idx]);

	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// gender window
// ***************************
void setGender()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a gender:";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".gender"))
	{
		label += "\nCurrent gender is: ";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".gender");
	}

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Gender selection", COMBAT_SIMULATOR_ACTOR_GENDER_OPTIONS, "setGenderOk", true, false);
	setWindowPid(pid);
}

messageHandler setGenderOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	if (btn == sui.BP_OK && idx != -1)
		utils.setScriptVar(self, "combat_simulator." + actor + ".gender", COMBAT_SIMULATOR_ACTOR_GENDER_OPTIONS[idx]);

	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// starting profession window
// ***************************
void setStartingProfession()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a starting profession:";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".starting_profession"))
	{
		label += "\nCurrent starting profession is: ";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".starting_profession");
	}

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Starting profession selection", COMBAT_SIMULATOR_ACTOR_STARTING_PROFESSION_OPTIONS, "setStartingProfessionOk", true, false);
	setWindowPid(pid);
}

messageHandler setStartingProfessionOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	if (btn == sui.BP_OK && idx != -1)
		utils.setScriptVar(self, "combat_simulator." + actor + ".starting_profession", COMBAT_SIMULATOR_ACTOR_STARTING_PROFESSION_OPTIONS[idx]);

	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// professions window
// ***************************
void setProfessions()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a profession to grant:";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".professions"))
	{
		label += "\nCurrent professions are: ";
		string[] professions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");
		for (int i = 0; i < professions.length; ++i)
		{
			java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
			int professionIndex = utils.stringToInt(st.nextToken());
			string professionLevel = st.nextToken();

			if (professionLevel == "0")
				professionLevel = "novice";
			if (professionLevel == "5")
				professionLevel = "master";

			label += "\n";
			label += (COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS[professionIndex] + " " + professionLevel);
		}
	}

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Profession selection", COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS, "setProfessionsOk", true, false);
	setWindowPid(pid);
}

messageHandler setProfessionsOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	int btn = sui.getIntButtonPressed(params);
	obj_id player = sui.getPlayerId(params);
	int idx = sui.getListboxSelectedRow(params);

	if (btn == sui.BP_CANCEL || idx == -1)
	{
		customizeActor();
		return SCRIPT_CONTINUE;
	}

	utils.setScriptVar(self, "combat_simulator.current_profession", idx);

	setProfessionLevel();
	return SCRIPT_CONTINUE;
}

// ***************************
// professions level window
// ***************************
void setProfessionLevel()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	int currentProfessionIndex = utils.getIntScriptVar(self, "combat_simulator.current_profession");

	string label = "Select a level to grant for " + COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS[currentProfessionIndex] + ":";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".professions"))
	{
		label += "\nCurrent profession level is: ";
		string[] professions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");
		for (int i = 0; i < professions.length; ++i)
		{
			java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
			int professionIndex = utils.stringToInt(st.nextToken());
			string professionLevel = st.nextToken();

			if (currentProfessionIndex == professionIndex)
			{
				if (professionLevel == "0")
					professionLevel = "novice";
				if (professionLevel == "5")
					professionLevel = "master";

				label += "\n";
				label += (COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS[professionIndex] + " " + professionLevel);
			}
		}
	}

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Profession level selection", COMBAT_SIMULATOR_ACTOR_PROFESSION_LEVEL_OPTIONS, "setProfessionLevelOk", true, false);
	setWindowPid(pid);
}

messageHandler setProfessionLevelOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	int currentProfessionIndex = utils.getIntScriptVar(self, "combat_simulator.current_profession");
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	utils.removeScriptVar(self, "combat_simulator.current_profession");

	if (btn == sui.BP_CANCEL || idx == -1)
	{
		setProfessions();
		return SCRIPT_CONTINUE;
	}

	string professionToAdd = (currentProfessionIndex + " " + idx);
	resizeable string[] professions = new Vector();

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".professions"))
		professions = utils.getResizeableStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");

	boolean foundProfession = false;
	for (int i = 0; i < professions.length; ++i)
	{
		java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
		int professionIndex = utils.stringToInt(st.nextToken());
		string professionLevel = st.nextToken();

		if (currentProfessionIndex == professionIndex)
		{
			// special case for none
			if (idx == (COMBAT_SIMULATOR_ACTOR_PROFESSION_LEVEL_OPTIONS.length - 1))
				professions.remove(i);
			else
			{
				professions.set(i, professionToAdd);
				foundProfession = true;
			}
		}
	}

	if (!foundProfession && idx != 6)
		professions.add(professionToAdd);

	java.util.Collections.sort(professions);
	if (professions.length > 0)
		utils.setScriptVar(self, "combat_simulator." + actor + ".professions", professions);
	else
		utils.removeScriptVar(self, "combat_simulator." + actor + ".professions");

	setProfessions();
	return SCRIPT_CONTINUE;
}

// ***************************
// weapon window
// ***************************
void setWeapon()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a Weapon:";
	string depth = "";
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".weapon"))
	{
		label += "\nCurrent weapon is: \n";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".weapon");
	}

	if (utils.hasScriptVar(self, "combat_simulator.weapon_depth"))
	{
		label += "\nCurrent depth is: \n";
		depth = utils.getStringScriptVar(self, "combat_simulator.weapon_depth");
		label += depth;
	}

	string[] weaponChoices = getLayerOfArray("object/weapon/" + depth, "combat_simulator.weapons");
	utils.setScriptVar(self, "combat_simulator.weapon_choices", weaponChoices);

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Weapon selection", weaponChoices, "setWeaponOk", true, false);
	setWindowPid(pid);
}

messageHandler setWeaponOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	obj_id player = sui.getPlayerId(params);
	string[] weaponChoices = utils.getStringArrayScriptVar(self, "combat_simulator.weapon_choices");
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string depth = "";
	if (utils.hasScriptVar(self, "combat_simulator.weapon_depth"))
		depth = utils.getStringScriptVar(self, "combat_simulator.weapon_depth");

	if (btn == sui.BP_CANCEL || idx == -1)
	{
		if (depth == "")
		{
			utils.removeScriptVar(self, "combat_simulator.weapon_choices");
			customizeActor();
			return SCRIPT_CONTINUE;
		}
		else
		{
			// pop off the last backslash
			depth = depth.substring(0, depth.length() - 1);
			int lastSlash = depth.lastIndexOf('/');

			// pop off the last directory
			if (lastSlash == -1)
				utils.removeScriptVar(self, "combat_simulator.weapon_depth");
			else
			{
				depth = depth.substring(0, lastSlash+1);
				utils.setScriptVar(self, "combat_simulator.weapon_depth", depth);
			}

			setWeapon();
			return SCRIPT_CONTINUE;
		}
	}

	string selectedWeapon = weaponChoices[idx];

	if (selectedWeapon == "reset")
	{
		utils.removeScriptVar(self, "combat_simulator.weapon_choices");
		utils.removeScriptVar(self, "combat_simulator.weapon_depth");
		utils.removeScriptVar(self, "combat_simulator." + actor + ".weapon");
		setWeapon();
		return SCRIPT_CONTINUE;
	}

	if (selectedWeapon.endsWith(".iff"))
	{
		utils.removeScriptVar(self, "combat_simulator.weapon_depth");
		utils.setScriptVar(self, "combat_simulator." + actor + ".weapon", depth + selectedWeapon);
		customizeActor();
	}
	else
	{
		utils.setScriptVar(self, "combat_simulator.weapon_depth", depth + selectedWeapon);
		setWeapon();
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// armor window
// ***************************
void setArmor()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a piece of armor:";
	string depth = "";
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".armor"))
	{
		label += "\nCurrent armor is: ";

		string[] currentArmor = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".armor");
		for (int i = 0; i < currentArmor.length; ++i)
			label += ("\n" + currentArmor[i]);
	}

	if (utils.hasScriptVar(self, "combat_simulator.armor_depth"))
	{
		label += "\nCurrent depth is: \n";
		depth = utils.getStringScriptVar(self, "combat_simulator.armor_depth");
		label += depth;
	}

	string[] armorChoices = getLayerOfArray("object/tangible/wearables/armor/" + depth, "combat_simulator.armor");
	utils.setScriptVar(self, "combat_simulator.armor_choices", armorChoices);

	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Armor selection", armorChoices, "setArmorOk", true, false);
	setWindowPid(pid);
}

messageHandler setArmorOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	obj_id player = sui.getPlayerId(params);
	string[] armorChoices = utils.getStringArrayScriptVar(self, "combat_simulator.armor_choices");
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string depth = "";
	if (utils.hasScriptVar(self, "combat_simulator.armor_depth"))
		depth = utils.getStringScriptVar(self, "combat_simulator.armor_depth");

	if (btn == sui.BP_CANCEL || idx == -1)
	{
		if (depth == "")
		{
			utils.removeScriptVar(self, "combat_simulator.armor_choices");
			customizeActor();
			return SCRIPT_CONTINUE;
		}
		else
		{
			// pop off the last backslash
			depth = depth.substring(0, depth.length() - 1);
			int lastSlash = depth.lastIndexOf('/');

			// pop off the last directory
			if (lastSlash == -1)
				utils.removeScriptVar(self, "combat_simulator.armor_depth");
			else
			{
				depth = depth.substring(0, lastSlash+1);
				utils.setScriptVar(self, "combat_simulator.armor_depth", depth);
			}

			setArmor();
			return SCRIPT_CONTINUE;
		}
	}

	string selectedArmor = armorChoices[idx];

	if (selectedArmor == "reset")
	{
		utils.removeScriptVar(self, "combat_simulator.armor_choices");
		utils.removeScriptVar(self, "combat_simulator.armor_depth");
		utils.removeScriptVar(self, "combat_simulator." + actor + ".armor");
		setArmor();
		return SCRIPT_CONTINUE;
	}

	if (selectedArmor.endsWith(".iff"))
	{
		resizeable string[] armorPieces = new Vector();

		if (utils.hasScriptVar(self, "combat_simulator." + actor + ".armor"))
			armorPieces = utils.getResizeableStringArrayScriptVar(self, "combat_simulator." + actor + ".armor");

		// check all elements to see if there is already an armor piece of this type, if so, replace it
		boolean foundArmor = false;
		int selectedArmorCategory = getArmorType(depth + selectedArmor);
		for (int i = 0; i < armorPieces.length; ++i)
		{
			if (selectedArmorCategory == getArmorType(armorPieces[i]))
			{
				armorPieces.set(i, depth + selectedArmor);
				foundArmor = true;
			}
		}
		// if not, add it
		if (!foundArmor)
			armorPieces.add(depth + selectedArmor);

		java.util.Collections.sort(armorPieces);
		utils.setScriptVar(self, "combat_simulator." + actor + ".armor", armorPieces);
		setArmor();
	}
	else
	{
		utils.setScriptVar(self, "combat_simulator.armor_depth", depth + selectedArmor);
		setArmor();
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// buffs window
// ***************************
void setBuffs()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a buff to grant:";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".buffs"))
	{
		label += "\nCurrent buffs are: ";
		string[] buffs = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".buffs");
		for (int i = 0; i < buffs.length; ++i)
		{
			label += "\n";
			label += buffs[i];
		}
	}
	
	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Buffs selection", COMBAT_SIMULATOR_ACTOR_ATTRIBUTES, "setBuffsOk", true, false);
	setWindowPid(pid);
}

messageHandler setBuffsOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	
	if (btn == sui.BP_CANCEL || idx == -1)
	{
		customizeActor();
		return SCRIPT_CONTINUE;
	}
	
	if (idx == (COMBAT_SIMULATOR_ACTOR_ATTRIBUTES.length - 1))
	{
		// reset buffs
		utils.removeScriptVar(self, "combat_simulator." + actor + ".buffs");
		setBuffs();
		return SCRIPT_CONTINUE;
	}

	string buffToAdd = COMBAT_SIMULATOR_ACTOR_ATTRIBUTES[idx];
	resizeable string[] buffs = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".buffs"))
		buffs = utils.getResizeableStringArrayScriptVar(self, "combat_simulator." + actor + ".buffs");
	
	boolean foundBuff = false;
	for (int i = 0; i < buffs.length; ++i)
	{
		if (((String)buffs.get(i)).indexOf(buffToAdd) == 0)
			foundBuff = true;
	}
	
	if (!foundBuff)
		buffs.add(buffToAdd);
		
	java.util.Collections.sort(buffs);
	utils.setScriptVar(self, "combat_simulator." + actor + ".buffs", buffs);

	setBuffs();
	return SCRIPT_CONTINUE;
}

// ***************************
// consumables window
// ***************************
void setConsumables()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	int pid = sui.msgbox(self, self, "This feature has not yet been implemented", sui.OK_ONLY, "Not yet implemented", sui.MSG_EXCLAMATION, "setConsumablesOk");
	setWindowPid(pid);
}

messageHandler setConsumablesOk()
{
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// wound window
// ***************************
void setWounds()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a wound level to set:";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".wounds"))
	{
		label += "\nCurrent wound levels are: ";
		string[] wounds = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".wounds");
		for (int i = 0; i < wounds.length; ++i)
		{
			label += "\n";
			label += wounds[i];
		}
	}
	
	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Wounds levels", COMBAT_SIMULATOR_ACTOR_ATTRIBUTES, "setWoundsOk", true, false);
	setWindowPid(pid);
}

messageHandler setWoundsOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	int btn = sui.getIntButtonPressed(params);
	obj_id player = sui.getPlayerId(params);
	int idx = sui.getListboxSelectedRow(params);
	
	if (btn == sui.BP_CANCEL || idx == -1)
	{
		customizeActor();
		return SCRIPT_CONTINUE;
	}

	if (idx == (COMBAT_SIMULATOR_ACTOR_ATTRIBUTES.length - 1))
	{
		// reset wounds
		utils.removeScriptVar(self, "combat_simulator." + actor + ".wounds");
		setWounds();
		return SCRIPT_CONTINUE;
	}

	utils.setScriptVar(self, "combat_simulator.current_wound", COMBAT_SIMULATOR_ACTOR_ATTRIBUTES[idx]);

	setWoundLevel();
	return SCRIPT_CONTINUE;
}

// ***************************
// wound levels window
// ***************************
void setWoundLevel()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string wound = utils.getStringScriptVar(self, "combat_simulator.current_wound");
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	
	string label = "Specify a wound amount for " + wound + ":";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".wounds"))
	{
		string[] wounds = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".wounds");
		for (int i = 0; i < wounds.length; ++i)
		{
			if (((String)wounds[i]).indexOf(wound) == 0)
			{
				label += "\nCurrent wound level is: \n";
				label += wounds[i];
			}
		}
	}
	
	int pid = sui.inputbox(self, self, label, sui.OK_CANCEL, "Set wound level", sui.INPUT_NORMAL, null, "setWoundLevelOk", null);
	setWindowPid(pid);
}

messageHandler setWoundLevelOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string label = sui.getInputBoxText(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string wound = utils.getStringScriptVar(self, "combat_simulator.current_wound");
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	utils.removeScriptVar(self, "combat_simulator.current_wound");

	if (btn == sui.BP_CANCEL || label == "")
	{
		setWounds();
		return SCRIPT_CONTINUE;
	}
	
	string woundToAdd = wound + " " + label;
	
	resizeable string[] wounds = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".wounds"))
		wounds = utils.getResizeableStringArrayScriptVar(self, "combat_simulator." + actor + ".wounds");
	
	boolean foundWound = false;
	for (int i = 0; i < wounds.length; ++i)
	{
		string currentWound = toString(wounds.get(i));
		
		if (currentWound.startsWith(wound))
		{
			foundWound = true;
			wounds.set(i, woundToAdd);
		}
	}
	
	if (!foundWound)
		wounds.add(woundToAdd);
		
	java.util.Collections.sort(wounds);
	utils.setScriptVar(self, "combat_simulator." + actor + ".wounds", wounds);

	setWounds();
	return SCRIPT_CONTINUE;
}

// ***************************
// command queue window
// ***************************
void setCommandQueue()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a command to add to the queue:";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".commands"))
	{
		label += "\nCurrent commands are: ";
		string[] commands = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".commands");
		for (int i = 0; i < commands.length; ++i)
		{
			label += "\n";
			label += commands[i];
		}
	}
	
	// get the valid commands for the player
	string[] validCommands;
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".valid_commands"))
		validCommands = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".valid_commands");
	else
	{
		validCommands = buildCommandListForActor();
		utils.setScriptVar(self, "combat_simulator." + actor + ".valid_commands", validCommands);
	}
	
	int pid;
	if (validCommands.length == 0)
		pid = sui.msgbox(self, self, "No valid commands found - does the actor have any professions?", sui.OK_ONLY, "No commands", sui.MSG_NORMAL, "setCommandQueueMessageOk");
	else	
		pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Command selection", validCommands, "setCommandQueueOk", true, false);
		
	setWindowPid(pid);
}

messageHandler setCommandQueueMessageOk()
{
	customizeActor();
	return SCRIPT_CONTINUE;
}

messageHandler setCommandQueueOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string[] validCommands = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".valid_commands");
	int btn = sui.getIntButtonPressed(params);
	obj_id player = sui.getPlayerId(params);
	int idx = sui.getListboxSelectedRow(params);
	
	if (btn == sui.BP_CANCEL || idx == -1)
	{
		utils.removeScriptVar(self, "combat_simulator." + actor + ".valid_commands");
		customizeActor();
		return SCRIPT_CONTINUE;
	}

	if (validCommands[idx] == "reset")
	{
		utils.removeScriptVar(self, "combat_simulator." + actor + ".commands");
		setCommandQueue();
		return SCRIPT_CONTINUE;
	}

	string commandToAdd = validCommands[idx];
	
	resizeable string[] commands = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".commands"))
		commands = utils.getResizeableStringArrayScriptVar(self, "combat_simulator." + actor + ".commands");
	
	boolean foundCommand = false;
	for (int i = 0; i < commands.length; ++i)
	{
		if (((String)commands.get(i)) == commandToAdd)
			foundCommand = true;
	}
	
	if (!foundCommand)
		commands.add(commandToAdd);
		
	utils.setScriptVar(self, "combat_simulator." + actor + ".commands", commands);

	setCommandQueue();
	return SCRIPT_CONTINUE;
}

// ***************************
// copy other actor window
// ***************************
void copyOtherActor()
{
	obj_id self = getSelf();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	closeOldWindowPid();
	
	string prompt = ("Are you sure you want to remove all settings from actor " + actor + " and replace them the other actor's settings?");
	
	int pid = sui.msgbox(self, self, prompt, sui.OK_CANCEL, "Copy actor?", sui.MSG_QUESTION, "copyOtherActorOk");
	setWindowPid(pid);
}

messageHandler copyOtherActorOk()
{	
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	int btn = sui.getIntButtonPressed(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	if (btn == sui.BP_CANCEL)
	{
		customizeActor();
		return SCRIPT_CONTINUE;
	}

	
	utils.removeScriptVarTree(self, "combat_simulator." + actor);

	string otherActor;
	if (actor.equals("A"))
		otherActor = "B";
	else
		otherActor = "A";

	deltadictionary dd = self.getScriptVars();
	Enumeration keys = dd.keys();
	while ( keys.hasMoreElements() )
	{
		string key = (string)(keys.nextElement());
			
		if (key.equals("combat_simulator." + otherActor + ".race") || key.equals("combat_simulator." + otherActor + ".gender") || key.equals("combat_simulator." + otherActor + ".starting_profession") || key.equals("combat_simulator." + otherActor + ".weapon") || key.equals("combat_simulator." + otherActor + ".creature"))
		{
			string newKey = ("combat_simulator." + actor + key.substring(18));
			dd.put(newKey, dd.getString(key));
		}
		else if (key.equals("combat_simulator." + otherActor + ".professions") || key.equals("combat_simulator." + otherActor + ".armor") || key.equals("combat_simulator." + otherActor + ".buffs") || key.equals("combat_simulator." + otherActor + ".wounds") || key.equals("combat_simulator." + otherActor + ".commands"))
		{
			string newKey = ("combat_simulator." + actor + key.substring(18));
			dd.put(newKey, dd.getStringArray(key));
		}
	}
	
	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// select creature letter window
// ***************************
void setCreatureLetter()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	string label = "Select a creature starting letter:";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
	{
		label += "\nCurrent creature selection is: ";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".creature");
	}
	
	label += "\n(Only buffs and wound level selections are taken into account when you make a creature actor)";
	
	resizeable string[] alphabet = new Vector();
	
	for (int i = (int)'a'; i <= (int)'z'; ++i)
		alphabet.add("" + (char)i);
		
	alphabet.add("reset");
	
	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Creature selection", alphabet, "setCreatureLetterOk", true, false);
	setWindowPid(pid);
}

messageHandler setCreatureLetterOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");

	if (btn == sui.BP_OK && idx != -1)
	{
		// if index is the last element (# of letters in the alphabet), reset
		if (idx == 26)
		{
			utils.removeScriptVar(self, "combat_simulator." + actor + ".creature");
			customizeActor();
			return SCRIPT_CONTINUE;
		}

		utils.setScriptVar(self, "combat_simulator." + actor + ".creature_letter", ("" + (char)((int)'a' + idx)));
		setCreature();
		return SCRIPT_CONTINUE;
	}

	customizeActor();
	return SCRIPT_CONTINUE;
}

// ***************************
// select creature window
// ***************************
void setCreature()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string creatureLetter = utils.getStringScriptVar(self, "combat_simulator." + actor + ".creature_letter");

	string label = "Select a creature:";
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
	{
		label += "\nCurrent creature selection is: ";
		label += utils.getStringScriptVar(self, "combat_simulator." + actor + ".creature");
	}
	
	label += "\n(Only buffs and wound level selections are taken into account when you make a creature actor)";
	
	string[] allCreatures = utils.getStringArrayScriptVar(self, "combat_simulator.creature_list");
	resizeable string[] availableCreatures = new Vector();
	
	for (int i = 0; i < allCreatures.length; ++i)
		if (allCreatures[i].startsWith(creatureLetter))
			availableCreatures.add(allCreatures[i]);
	
	availableCreatures.add("reset");
	
	utils.setScriptVar(self, "combat_simulator." + actor + ".creature_letter_list", availableCreatures);
	
	int pid = sui.listbox(self, self, label, sui.OK_CANCEL, "Creature selection", availableCreatures, "setCreatureOk", true, false);
	setWindowPid(pid);
}

messageHandler setCreatureOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string[] availableCreatures = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".creature_letter_list");
	utils.removeScriptVar(self, "combat_simulator.creature_letter_list");
	utils.removeScriptVar(self, "combat_simulator." + actor + ".creature_letter");

	if (btn == sui.BP_OK && idx != -1)
	{
		// if index is the last element, reset
		if (idx == (availableCreatures.length - 1))
		{
			utils.removeScriptVar(self, "combat_simulator." + actor + ".creature");
			customizeActor();
			return SCRIPT_CONTINUE;
		}

		utils.setScriptVar(self, "combat_simulator." + actor + ".creature", availableCreatures[idx]);
		customizeActor();
		return SCRIPT_CONTINUE;
	}
	
	setCreatureLetter();
	
	return SCRIPT_CONTINUE;
}

// ***************************
// start simulation window
// ***************************
void startSimulation()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	
	if (	!(utils.hasScriptVar(self, "combat_simulator.label") && utils.hasScriptVar(self, "combat_simulator.rounds") && 
		((utils.hasScriptVar(self, "combat_simulator.A.race") && utils.hasScriptVar(self, "combat_simulator.A.gender") && utils.hasScriptVar(self, "combat_simulator.A.starting_profession")) || utils.hasScriptVar(self, "combat_simulator.A.creature")) &&
		((utils.hasScriptVar(self, "combat_simulator.B.race") && utils.hasScriptVar(self, "combat_simulator.B.gender") && utils.hasScriptVar(self, "combat_simulator.B.starting_profession")) || utils.hasScriptVar(self, "combat_simulator.B.creature"))))
	{
		string message = "You need to have at least a label and number of rounds as well as a race, gender, and starting profession for each customized actor or a creature selection for each creature actor to begin a simulation";
		
		int pid = sui.msgbox(self, self, message, sui.OK_ONLY, "Cannot run", sui.MSG_EXCLAMATION, "startSimulationMessageOk");
		setWindowPid(pid);
		return;	
	}

	string message = "Start simulation with these settings?";
	
	message += ("\nLabel: " + utils.getStringScriptVar(self, "combat_simulator.label"));
	message += ("\nRounds: " + utils.getIntScriptVar(self, "combat_simulator.rounds"));
	if (utils.hasScriptVar(self, "combat_simulator.range"))
		message += ("\nRange: " + utils.getIntScriptVar(self, "combat_simulator.range"));
	
	utils.setScriptVar(self, "combat_simulator.current_actor", "A");
	message += "\n\nActor A: ";
	message += getActorInfo();
	utils.setScriptVar(self, "combat_simulator.current_actor", "B");
	message += "\n\nActor B: ";
	message += getActorInfo();
	utils.removeScriptVar(self, "combat_simulator.current_actor");
	
	int pid = sui.msgbox(self, self, message, sui.OK_CANCEL, "Start simulation?", sui.MSG_QUESTION, "startSimulationOk");
}

messageHandler startSimulationMessageOk()
{
	combatSimulatorMain();
	return SCRIPT_CONTINUE;
}

messageHandler startSimulationOk()
{
	if ((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);

	if (btn == sui.BP_CANCEL)
	{
		combatSimulatorMain();
		return SCRIPT_CONTINUE;
	}

	resizeable string[] commands = new Vector();
	
	// spawn the simulator master, attach his script, give him an objvar, and then fire him up!	
	location combatLocation = getLocation(self);
	combatLocation.z += 3;

	obj_id combatMaster = createObjectSimulator("object/creature/player/human_male.iff", combatLocation);
	attachScript(combatMaster, COMBAT_MASTER_SCRIPT);
	setInvulnerable(combatMaster, true);

	// label, num rounds and range
	commands.add("setLabel " + utils.getStringScriptVar(self, "combat_simulator.label"));
	commands.add("setNumRounds " + utils.getIntScriptVar(self, "combat_simulator.rounds"));
	if (utils.hasScriptVar(self, "combat_simulator.range"))
		commands.add("setRange " + utils.getIntScriptVar(self, "combat_simulator.range"));

	// makePlayer commands
	commands.add(getMakePlayerCommand("A"));
	commands.add(getMakePlayerCommand("B"));
	
	// professions
	// make sure to look up professions via their index
	commands.addAll(getProfessionCommands("A"));
	commands.addAll(getProfessionCommands("B"));
	
	// wounds
	commands.addAll(getWoundCommands("A"));
	commands.addAll(getWoundCommands("B"));
	
	// buffs
	commands.addAll(getBuffCommands("A"));
	commands.addAll(getBuffCommands("B"));
	
	// weapon
	if (utils.hasScriptVar(self, "combat_simulator.A.weapon"))
		commands.add(getWeaponCommand("A"));
	if (utils.hasScriptVar(self, "combat_simulator.B.weapon"))
		commands.add(getWeaponCommand("B"));
	
	// armor
	commands.addAll(getArmorCommands("A"));
	commands.addAll(getArmorCommands("B"));
	
	// commands
	// make sure to add commands to the queue after you have stripped them (improved x\d) if there
	commands.addAll(getActionCommands("A"));
	commands.addAll(getActionCommands("B"));
	
	putCommandList(combatMaster, (String[])commands.toArray(new string[0]));
	setObjVar(combatMaster, "combat_simulator.stop_accumulating_commands", 1);
	setObjVar(combatMaster, "combat_simulator.created_from_combat_simulator_user", 1);
	setObjVar(combatMaster, "combat_simulator.current_round", 1);
	messageTo(combatMaster, "runSimulation", null, 0, false);

	// before we finish, increment the label if it has a '.' and a counter at the end, if so, increment it
	string label = utils.getStringScriptVar(self, "combat_simulator.label");
	if (label.indexOf(".") != -1)
	{
		int splitIndex = -1;

		// check the last 4, 3, 2 and 1 character(s) to see if they are numbers
		if (utils.stringToInt(label.substring(label.length() - 4)) != -1)
			splitIndex = (label.length() - 4);
		else if (utils.stringToInt(label.substring(label.length() - 3)) != -1)
			splitIndex = (label.length() - 3);
		else if (utils.stringToInt(label.substring(label.length() - 2)) != -1)
			splitIndex = (label.length() - 2);
		else if (utils.stringToInt(label.substring(label.length() - 1)) != -1)
			splitIndex = (label.length() - 1);
		
		if (splitIndex != -1)
		{
			int currentNumber = utils.stringToInt(label.substring(splitIndex));
			label = label.substring(0, splitIndex);
			++currentNumber;
			label += currentNumber;
			utils.setScriptVar(self, "combat_simulator.label", label);
		}
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// destroy simulation window
// ***************************
void destroySimulation()
{
	obj_id self = getSelf();
	closeOldWindowPid();
	dictionary params = new dictionary();
	obj_id currentSelectedObject = getLookAtTarget(self);
	if (currentSelectedObject != null)
		params.put(sui.INPUTBOX_INPUT + "-" + sui.PROP_TEXT, "" + currentSelectedObject);

	string label = "Input the object id of the combat master of the simulation you wish to destroy:\n(the main person that spawns the two combatants)";
	
	int pid = sui.inputbox(self, self, label, sui.OK_CANCEL, "Enter combat master", sui.INPUT_NORMAL, null, "destroySimulationOk", params);
	setWindowPid(pid);
}

messageHandler destroySimulationOk()
{
	string label = sui.getInputBoxText(params);
	int button = sui.getIntButtonPressed(params);
	
	if (button == sui.BP_OK && label != "")
	{
		obj_id target = utils.stringToObjId(label);
		debugSpeakMsg(target, "reset");
		removeAllObjVars(target);
		destroyObjectSimulator(target);
	}
		
	combatSimulatorMain();
	
	return SCRIPT_CONTINUE;
}

// ***************************
// reset window
// ***************************
void reset(string tag)
{
	obj_id self = getSelf();
	utils.setScriptVar(self, "combat_simulator.reset_tag", tag);
	closeOldWindowPid();
	
	string prompt = "Are you sure you want to reset ";
	if (tag == "combat_simulator")
		prompt += "all combat simulator settings?";
	else if (tag == "combat_simulator.A")
		prompt += "all actor A customizations?";
	else if (tag == "combat_simulator.B")
		prompt += "all actor B customizations?";
	
	int pid = sui.msgbox(self, self, prompt, sui.OK_CANCEL, "Reset alert!", sui.MSG_EXCLAMATION, "resetOk");
	setWindowPid(pid);
}

messageHandler resetOk()
{
	string resetTag = utils.getStringScriptVar(self, "combat_simulator.reset_tag");
	utils.removeScriptVar(self, "combat_simulator.reset_tag");
	
	int button = sui.getIntButtonPressed(params);

	if (button == sui.BP_OK)
		utils.removeScriptVarTree(self, resetTag);

	if (resetTag == "combat_simulator")
		combatSimulatorMain();
	else if (resetTag == "combat_simulator.A")
	{
		utils.setScriptVar(self, "combat_simulator.current_actor", "A");
		customizeActor();
	}
	else if (resetTag == "combat_simulator.B")
	{
		utils.setScriptVar(self, "combat_simulator.current_actor", "B");
		customizeActor();
	}

	return SCRIPT_CONTINUE;
}

// ***************************
// helper functions
// ***************************
void closeOldWindowPid()
{
	obj_id self = getSelf();
	if (utils.hasScriptVar(self, "combat_simulator.pid"))
	{
		int oldpid = utils.getIntScriptVar(self, "combat_simulator.pid");
		forceCloseSUIPage (oldpid);
		utils.removeScriptVar(self, "combat_simulator.pid");
	}
}

void setWindowPid(int pid)
{
	obj_id self = getSelf();
	if (pid > -1) utils.setScriptVar(self, "combat_simulator.pid", pid);
}

void cleanScriptVars()
{
	obj_id self = getSelf();

	utils.removeScriptVarTree(self, "combat_simulator");
}

string [] buildCommandListForActor()
{
	obj_id self = getSelf();
	string[] professions = new string[0];
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	resizeable string[] commands = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".professions"))
		professions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");
	else 
		return professions;
	
	for (int i = 0; i < professions.length; ++i)
	{
		java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
		int professionIndex = utils.stringToInt(st.nextToken());
		int professionLevel = utils.stringToInt(st.nextToken());

		resizeable string [] skills = new Vector();
		
		for (int j = 0; j < PROFESSION_SKILLS[professionIndex].length; ++j)
			if (getSkillLevel(PROFESSION_SKILLS[professionIndex][j]) <= professionLevel)
				skills.add(PROFESSION_SKILLS[professionIndex][j]);
		
		for (int j = 0; j < skills.length; ++j)
		{
			string[] prereqSkills = getSkillPrerequisiteSkills((String)skills.get(j));
			for (int m = 0; m < prereqSkills.length; ++m)
				if (!skills.contains(prereqSkills[m]))
					skills.add(prereqSkills[m]);
		
			string[] skillCommands = getSkillCommandsProvided((String)skills.get(j));
			
			for (int k = 0; k < skillCommands.length; ++k)
			{
				string displayCommand = skillCommands[k];
				
				java.util.StringTokenizer commandTok = new java.util.StringTokenizer(displayCommand, "_");
				string initialCommand = commandTok.nextToken();
				
				// special case 
				if (displayCommand.indexOf('+') != -1)
					continue;
				
				string additionalCommand = "";
				int level = 0;
				// check if we have a level with this command
				if (commandTok.countTokens() == 1)
				{
					level = utils.stringToInt(commandTok.nextToken());
					
					if (level == -1)
						continue;
					additionalCommand = (" (improved x" + level + ")");
				}
				else if (commandTok.countTokens() > 1)
				{
					continue;
				}
				
				boolean foundCommand = false;
				// search the array and see if we already have the command
				for (int l = 0; l < commands.length; ++l)
				{
					string com = commands.get(l).toString();
					if (com.startsWith(initialCommand))
					{
						foundCommand = true;
						
						int ind = com.indexOf(" (improved x");
						int comLevel = 0;
						
						if (ind != -1)
						{							
							ind += 12;
							comLevel = utils.stringToInt(com.substring(ind, ind+1));
						}
						
						if (level > comLevel)
							commands.set(l, (initialCommand + additionalCommand));
					}
				}
				
				// if not, add it
				if (!foundCommand)
					commands.add(initialCommand + additionalCommand);
			}		
		}		
	}
	
	java.util.Collections.sort(commands);
	
	commands.add("defaultAttack");
	commands.add("reset");
	
	return (String[])commands.toArray(new string[0]);
}

int getSkillLevel(string skill)
{
	if (skill.endsWith("_novice"))
		return 0;
	else if (skill.endsWith("_01"))
		return 1;
	else if (skill.endsWith("_02"))
		return 2;
	else if (skill.endsWith("_03"))
		return 3;
	else if (skill.endsWith("_04"))
		return 4;
	else if (skill.endsWith("_master"))
		return 5;
	else 
		return -1;	
}

string getActorInfo()
{
	obj_id self = getSelf();
	string actor = utils.getStringScriptVar(self, "combat_simulator.current_actor");
	string output = "";
	boolean isCreature = false;
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
	{
		output += ("\nCreature:\n   " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".creature"));
		isCreature = true;
	}
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".race") && !isCreature)
		output += ("\nRace:\n   " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".race"));

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".gender") && !isCreature)
		output += ("\nGender:\n   " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".gender"));

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".starting_profession") && !isCreature)
		output += ("\nStarting Profession:\n   " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".starting_profession"));

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".professions") && !isCreature)
	{
		output += "\nProfessions: ";
		string[] professions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");
		for (int i = 0; i < professions.length; ++i)
		{
			java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
			int professionIndex = utils.stringToInt(st.nextToken());
			string professionLevel = st.nextToken();
		
			if (professionLevel == "0")
				professionLevel = "novice";
			if (professionLevel == "5")
				professionLevel = "master";
				
			output += ("\n   " + COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS[professionIndex] + " " + professionLevel);
		}
	}
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".weapon") && !isCreature)
		output += ("\nWeapon:\n   " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".weapon"));

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".armor") && !isCreature)
	{
		output += "\nArmor: ";
		string[] armor = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".armor");
		for (int i = 0; i < armor.length; ++i)
		{
			output += ("\n   " + armor[i]);
		}
	}

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".buffs"))
	{
		output += "\nBuffs: ";
		string[] buffs = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".buffs");
		for (int i = 0; i < buffs.length; ++i)
		{
			output += ("\n   " + buffs[i]);
		}
	}
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".wounds"))
	{
		output += "\nWound levels: ";
		string[] wounds = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".wounds");
		for (int i = 0; i < wounds.length; ++i)
		{
			output += ("\n   " + wounds[i]);
		}
	}
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".commands") && !isCreature)
	{
		output += "\nCommands: ";
		string[] commands = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".commands");
		for (int i = 0; i < commands.length; ++i)
		{
			output += ("\n   " + commands[i]);
		}
	}
	
	return output;
}

string[] getLayerOfArray(string depth, string scriptVar)
{
	obj_id self = getSelf();
	resizeable string[] newElements = new Vector();
	string[] totalElements = utils.getStringArrayScriptVar(self, scriptVar);
	
	for (int i = 0; i < totalElements.length; ++i)
	{
		string currentElement = totalElements[i];
		
		if (currentElement.startsWith(depth))
		{
			// strip off the common beginning 
			currentElement = currentElement.substring(depth.length(), currentElement.length());
			
			// strip off all the stuff after the first slash if the string has one
			int firstSlash = currentElement.indexOf('/');
			
			if (firstSlash != -1)
				currentElement = currentElement.substring(0, firstSlash+1);
			
			if (!newElements.contains(currentElement))
				newElements.add(currentElement);
		}
	}
	
	java.util.Collections.sort(newElements);

	newElements.add("reset");

	return (String[])newElements.toArray(new string[0]);
}

string getMakePlayerCommand(string actor)
{
	obj_id self = getSelf();
	
	string command = "";

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
	{
		command += "makeCreature";
		command += (" " + actor);
		command += (" " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".creature"));
	}
	else
	{
		command += "makePlayer";
		command += (" " + actor);
		command += (" " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".race"));
		command += (" " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".gender"));
		command += (" " + utils.getStringScriptVar(self, "combat_simulator." + actor + ".starting_profession"));
	}
	
	return command;
}

resizeable string[] getProfessionCommands(string actor)
{
	obj_id self = getSelf();
	
	resizeable string[] commands = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
		return commands;	
	
	string[] professions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".professions");
	if (professions == null)
		professions = new string[0];
	for (int i = 0; i < professions.length; ++i)
	{
		java.util.StringTokenizer st = new java.util.StringTokenizer(professions[i]);
		int professionIndex = utils.stringToInt(st.nextToken());
		string professionLevel = st.nextToken();

		commands.add("giveProfession " + actor + " " + COMBAT_SIMULATOR_ACTOR_PROFESSION_OPTIONS[professionIndex] + " " + professionLevel);
	}
	
	return commands;
}
	
resizeable string[] getWoundCommands(string actor)
{
	obj_id self = getSelf();
	
	resizeable string[] commands = new Vector();
	string[] wounds = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".wounds");
	if (wounds == null)
		wounds = new string[0];
	for (int i = 0; i < wounds.length; ++i)
	{
		java.util.StringTokenizer st = new java.util.StringTokenizer(wounds[i]);
		string attrib = st.nextToken();
		string value = st.nextToken();

		commands.add("setAttribWound " + actor + " " + attrib + " " + value);
	}
		
	return commands;
}
	
resizeable string[] getBuffCommands(string actor)
{
	obj_id self = getSelf();
	
	resizeable string[] commands = new Vector();
	string[] buffs = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".buffs");
	if (buffs == null)
		buffs = new string[0];
	for (int i = 0; i < buffs.length; ++i)
		commands.add("giveBuff " + actor + " " + buffs[i]);
	
	return commands;
}
	
string getWeaponCommand(string actor)
{
	obj_id self = getSelf();

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
		return "";	
	
	string command = "giveEquipment";
	command += (" " + actor);
	command += (" object/weapon/" + utils.getStringScriptVar(self, "combat_simulator." + actor + ".weapon"));
	
	return command;
}
	
resizeable string[] getArmorCommands(string actor)
{
	obj_id self = getSelf();
	
	resizeable string[] commands = new Vector();

	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
		return commands;

	string[] armor = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".armor");
	if (armor == null)
		armor = new string[0];
	for (int i = 0; i < armor.length; ++i)
		commands.add("giveEquipment " + actor + " object/tangible/wearables/armor/" + armor[i]);
	
	return commands;
}
	
resizeable string[] getActionCommands(string actor)
{
	obj_id self = getSelf();
	
	resizeable string[] commands = new Vector();
	
	if (utils.hasScriptVar(self, "combat_simulator." + actor + ".creature"))
		return commands;	
	
	string[] actions = utils.getStringArrayScriptVar(self, "combat_simulator." + actor + ".commands");
	if (actions == null)
		actions = new string[0];
	for (int i = 0; i < actions.length; ++i)
	{
		string action = actions[i];
		int improvedIndex = action.indexOf("(improved x");
		if (improvedIndex != -1)
			action = action.substring(0, improvedIndex);
	
		commands.add("addCommand " + actor + " " + action);
	}
	
	return commands;
}

void putCommandList(obj_id combatMaster, string[] commands)
{
	int commandListNumber = 0;
	resizeable string[] newCommands = new Vector();
	int sizeOfNewCommands = 0;

	for (int i = 0; i < commands.length; ++i)
	{
		string nextCommand = commands[i];

		if (nextCommand.length() + sizeOfNewCommands > 900)
		{
			setObjVar(combatMaster, "combat_simulator.command_list."+commandListNumber, newCommands);
			++commandListNumber;
			sizeOfNewCommands = 0;
			newCommands.clear();
		}

		newCommands.add(nextCommand);
		sizeOfNewCommands += nextCommand.length();
	}

	if (sizeOfNewCommands > 0)
		setObjVar(combatMaster, "combat_simulator.command_list."+commandListNumber, newCommands);
}

int getArmorType(string armorPiece)
{
	if (armorPiece.indexOf("backpack") != -1)
		return 0;
	else if (armorPiece.indexOf("bandolier") != -1)
		return 1;
	else if (armorPiece.indexOf("belt") != -1)
		return 2;
	else if (armorPiece.indexOf("bicep_l") != -1)
		return 3;
	else if (armorPiece.indexOf("bicep_r") != -1)
		return 4;
	else if (armorPiece.indexOf("bracer_l") != -1)
		return 5;
	else if (armorPiece.indexOf("bracer_r") != -1)
		return 6;
	else if (armorPiece.indexOf("chest_plate") != -1)
		return 7;
	else if (armorPiece.indexOf("gloves") != -1)
		return 8;
	else if (armorPiece.indexOf("helmet") != -1)
		return 9;
	else if (armorPiece.indexOf("leggings") != -1)
		return 10;
	else if (armorPiece.indexOf("pants") != -1)
		return 11;
	else if (armorPiece.indexOf("shirt") != -1)
		return 12;
	else if (armorPiece.indexOf("shoes") != -1)
		return 13;
	else if (armorPiece.indexOf("utility_belt") != -1)
		return 14;
	else
		return -1;
}

trigger OnSpeaking(string text)
{
	if (!isGod(self))
	{
		sendSystemMessageTestingOnly(self, "You cannot run the combat simulator when not in god mode");
		return SCRIPT_OVERRIDE;
	}

	text = toLower(text);

	if (text == "startcombatsimulator" || text == "scs")
	{
		combatSimulatorMain();
		return SCRIPT_OVERRIDE;
	}
	
	return SCRIPT_CONTINUE;
}

// ***************************
// other consts
// ***************************
// TODO - don't have these hard coded
const string[][] PROFESSION_SKILLS = 
{
	{	// 0
		"crafting_architect_novice",
		"crafting_architect_production_01",
		"crafting_architect_production_02",
		"crafting_architect_production_03",
		"crafting_architect_production_04",
		"crafting_architect_techniques_01",
		"crafting_architect_techniques_02",
		"crafting_architect_techniques_03",
		"crafting_architect_techniques_04",
		"crafting_architect_harvesting_01",
		"crafting_architect_harvesting_02",
		"crafting_architect_harvesting_03",
		"crafting_architect_harvesting_04",
		"crafting_architect_blueprints_01",
		"crafting_architect_blueprints_02",
		"crafting_architect_blueprints_03",
		"crafting_architect_blueprints_04",
		"crafting_architect_master"
	},
	
	{	// 1
		"crafting_armorsmith_novice",
		"crafting_armorsmith_personal_01",
		"crafting_armorsmith_personal_02",
		"crafting_armorsmith_personal_03",
		"crafting_armorsmith_personal_04",
		"crafting_armorsmith_heavy_01",
		"crafting_armorsmith_heavy_02",
		"crafting_armorsmith_heavy_03",
		"crafting_armorsmith_heavy_04",
		"crafting_armorsmith_deflectors_01",
		"crafting_armorsmith_deflectors_02",
		"crafting_armorsmith_deflectors_03",
		"crafting_armorsmith_deflectors_04",
		"crafting_armorsmith_complexity_01",
		"crafting_armorsmith_complexity_02",
		"crafting_armorsmith_complexity_03",
		"crafting_armorsmith_complexity_04",
		"crafting_armorsmith_master"
	},
	
	{	// 2
		"crafting_artisan_novice",
		"crafting_artisan_engineering_01",
		"crafting_artisan_engineering_02",
		"crafting_artisan_engineering_03",
		"crafting_artisan_engineering_04",
		"crafting_artisan_domestic_01",
		"crafting_artisan_domestic_02",
		"crafting_artisan_domestic_03",
		"crafting_artisan_domestic_04",
		"crafting_artisan_business_01",
		"crafting_artisan_business_02",
		"crafting_artisan_business_03",
		"crafting_artisan_business_04",
		"crafting_artisan_survey_01",
		"crafting_artisan_survey_02",
		"crafting_artisan_survey_03",
		"crafting_artisan_survey_04",
		"crafting_artisan_master"
	},

	{	//3
		"outdoors_bio_engineer_novice",
		"outdoors_bio_engineer_creature_01",
		"outdoors_bio_engineer_creature_02",
		"outdoors_bio_engineer_creature_03",
		"outdoors_bio_engineer_creature_04",
		"outdoors_bio_engineer_tissue_01",
		"outdoors_bio_engineer_tissue_02",
		"outdoors_bio_engineer_tissue_03",
		"outdoors_bio_engineer_tissue_04",
		"outdoors_bio_engineer_dna_harvesting_01",
		"outdoors_bio_engineer_dna_harvesting_02",
		"outdoors_bio_engineer_dna_harvesting_03",
		"outdoors_bio_engineer_dna_harvesting_04",
		"outdoors_bio_engineer_production_01",
		"outdoors_bio_engineer_production_02",
		"outdoors_bio_engineer_production_03",
		"outdoors_bio_engineer_production_04",
		"outdoors_bio_engineer_master"
	},

	{	// 4
		"combat_bountyhunter_novice",
		"combat_bountyhunter_investigation_01",
		"combat_bountyhunter_investigation_02",
		"combat_bountyhunter_investigation_03",
		"combat_bountyhunter_investigation_04",
		"combat_bountyhunter_droidcontrol_01",
		"combat_bountyhunter_droidcontrol_02",
		"combat_bountyhunter_droidcontrol_03",
		"combat_bountyhunter_droidcontrol_04",
		"combat_bountyhunter_droidresponse_01",
		"combat_bountyhunter_droidresponse_02",
		"combat_bountyhunter_droidresponse_03",
		"combat_bountyhunter_droidresponse_04",
		"combat_bountyhunter_support_01",
		"combat_bountyhunter_support_02",
		"combat_bountyhunter_support_03",
		"combat_bountyhunter_support_04",
		"combat_bountyhunter_master"
	},

	{	// 5
		"combat_brawler_novice",
		"combat_brawler_unarmed_01",
		"combat_brawler_unarmed_02",
		"combat_brawler_unarmed_03",
		"combat_brawler_unarmed_04",
		"combat_brawler_1handmelee_01",
		"combat_brawler_1handmelee_02",
		"combat_brawler_1handmelee_03",
		"combat_brawler_1handmelee_04",
		"combat_brawler_2handmelee_01",
		"combat_brawler_2handmelee_02",
		"combat_brawler_2handmelee_03",
		"combat_brawler_2handmelee_04",
		"combat_brawler_polearm_01",
		"combat_brawler_polearm_02",
		"combat_brawler_polearm_03",
		"combat_brawler_polearm_04",
		"combat_brawler_master"
	},

	{	// 6
		"combat_carbine_novice",
		"combat_carbine_accuracy_01",
		"combat_carbine_accuracy_02",
		"combat_carbine_accuracy_03",
		"combat_carbine_accuracy_04",
		"combat_carbine_speed_01",
		"combat_carbine_speed_02",
		"combat_carbine_speed_03",
		"combat_carbine_speed_04",
		"combat_carbine_ability_01",
		"combat_carbine_ability_02",
		"combat_carbine_ability_03",
		"combat_carbine_ability_04",
		"combat_carbine_support_01",
		"combat_carbine_support_02",
		"combat_carbine_support_03",
		"combat_carbine_support_04",
		"combat_carbine_master"
	},

	{	// 7
		"crafting_chef_novice",
		"crafting_chef_dish_01",
		"crafting_chef_dish_02",
		"crafting_chef_dish_03",
		"crafting_chef_dish_04",
		"crafting_chef_dessert_01",
		"crafting_chef_dessert_02",
		"crafting_chef_dessert_03",
		"crafting_chef_dessert_04",
		"crafting_chef_drink_01",
		"crafting_chef_drink_02",
		"crafting_chef_drink_03",
		"crafting_chef_drink_04",
		"crafting_chef_techniques_01",
		"crafting_chef_techniques_02",
		"crafting_chef_techniques_03",
		"crafting_chef_techniques_04",
		"crafting_chef_master"
	},
	
	{	// 8
		"science_combatmedic_novice",
		"science_combatmedic_healing_range_01",
		"science_combatmedic_healing_range_02",
		"science_combatmedic_healing_range_03",
		"science_combatmedic_healing_range_04",
		"science_combatmedic_healing_range_speed_01",
		"science_combatmedic_healing_range_speed_02",
		"science_combatmedic_healing_range_speed_03",
		"science_combatmedic_healing_range_speed_04",
		"science_combatmedic_medicine_01",
		"science_combatmedic_medicine_02",
		"science_combatmedic_medicine_03",
		"science_combatmedic_medicine_04",
		"science_combatmedic_support_01",
		"science_combatmedic_support_02",
		"science_combatmedic_support_03",
		"science_combatmedic_support_04",
		"science_combatmedic_master"
	},
	
	{	// 9
		"combat_commando_novice",
		"combat_commando_heavyweapon_accuracy_01",
		"combat_commando_heavyweapon_accuracy_02",
		"combat_commando_heavyweapon_accuracy_03",
		"combat_commando_heavyweapon_accuracy_04",
		"combat_commando_heavyweapon_speed_01",
		"combat_commando_heavyweapon_speed_02",
		"combat_commando_heavyweapon_speed_03",
		"combat_commando_heavyweapon_speed_04",
		"combat_commando_thrownweapon_01",
		"combat_commando_thrownweapon_02",
		"combat_commando_thrownweapon_03",
		"combat_commando_thrownweapon_04",
		"combat_commando_support_01",
		"combat_commando_support_02",
		"combat_commando_support_03",
		"combat_commando_support_04",
		"combat_commando_master"
	},

	{	// 10
		"outdoors_creaturehandler_novice",
		"outdoors_creaturehandler_taming_01",
		"outdoors_creaturehandler_taming_02",
		"outdoors_creaturehandler_taming_03",
		"outdoors_creaturehandler_taming_04",
		"outdoors_creaturehandler_training_01",
		"outdoors_creaturehandler_training_02",
		"outdoors_creaturehandler_training_03",
		"outdoors_creaturehandler_training_04",
		"outdoors_creaturehandler_healing_01",
		"outdoors_creaturehandler_healing_02",
		"outdoors_creaturehandler_healing_03",
		"outdoors_creaturehandler_healing_04",
		"outdoors_creaturehandler_support_01",
		"outdoors_creaturehandler_support_02",
		"outdoors_creaturehandler_support_03",
		"outdoors_creaturehandler_support_04",
		"outdoors_creaturehandler_master"
	},
	
	{	// 11
		"social_dancer_novice",
		"social_dancer_ability_01",
		"social_dancer_ability_02",
		"social_dancer_ability_03",
		"social_dancer_ability_04",
		"social_dancer_wound_01",
		"social_dancer_wound_02",
		"social_dancer_wound_03",
		"social_dancer_wound_04",
		"social_dancer_knowledge_01",
		"social_dancer_knowledge_02",
		"social_dancer_knowledge_03",
		"social_dancer_knowledge_04",
		"social_dancer_shock_01",
		"social_dancer_shock_02",
		"social_dancer_shock_03",
		"social_dancer_shock_04",
		"social_dancer_master"
	},

	{	// 12
		"science_doctor_novice",
		"science_doctor_wound_speed_01",
		"science_doctor_wound_speed_02",
		"science_doctor_wound_speed_03",
		"science_doctor_wound_speed_04",
		"science_doctor_wound_01",
		"science_doctor_wound_02",
		"science_doctor_wound_03",
		"science_doctor_wound_04",
		"science_doctor_ability_01",
		"science_doctor_ability_02",
		"science_doctor_ability_03",
		"science_doctor_ability_04",
		"science_doctor_support_01",
		"science_doctor_support_02",
		"science_doctor_support_03",
		"science_doctor_support_04",
		"science_doctor_master"
	},

	{	// 13
		"crafting_droidengineer_novice",
		"crafting_droidengineer_production_01",
		"crafting_droidengineer_production_02",
		"crafting_droidengineer_production_03",
		"crafting_droidengineer_production_04",
		"crafting_droidengineer_techniques_01",
		"crafting_droidengineer_techniques_02",
		"crafting_droidengineer_techniques_03",
		"crafting_droidengineer_techniques_04",
		"crafting_droidengineer_refinement_01",
		"crafting_droidengineer_refinement_02",
		"crafting_droidengineer_refinement_03",
		"crafting_droidengineer_refinement_04",
		"crafting_droidengineer_blueprints_01",
		"crafting_droidengineer_blueprints_02",
		"crafting_droidengineer_blueprints_03",
		"crafting_droidengineer_blueprints_04",
		"crafting_droidengineer_master"
	},

	{	// 14
		"social_entertainer_novice",
		"social_entertainer_hairstyle_01",
		"social_entertainer_hairstyle_02",
		"social_entertainer_hairstyle_03",
		"social_entertainer_hairstyle_04",
		"social_entertainer_music_01",
		"social_entertainer_music_02",
		"social_entertainer_music_03",
		"social_entertainer_music_04",
		"social_entertainer_dance_01",
		"social_entertainer_dance_02",
		"social_entertainer_dance_03",
		"social_entertainer_dance_04",
		"social_entertainer_healing_01",
		"social_entertainer_healing_02",
		"social_entertainer_healing_03",
		"social_entertainer_healing_04",
		"social_entertainer_master"
	},

	{	// 15
		"combat_1hsword_novice",
		"combat_1hsword_accuracy_01",
		"combat_1hsword_accuracy_02",
		"combat_1hsword_accuracy_03",
		"combat_1hsword_accuracy_04",
		"combat_1hsword_speed_01",
		"combat_1hsword_speed_02",
		"combat_1hsword_speed_03",
		"combat_1hsword_speed_04",
		"combat_1hsword_ability_01",
		"combat_1hsword_ability_02",
		"combat_1hsword_ability_03",
		"combat_1hsword_ability_04",
		"combat_1hsword_support_01",
		"combat_1hsword_support_02",
		"combat_1hsword_support_03",
		"combat_1hsword_support_04",
		"combat_1hsword_master"
	},

	{	// 16
		"social_imagedesigner_novice",
		"social_imagedesigner_hairstyle_01",
		"social_imagedesigner_hairstyle_02",
		"social_imagedesigner_hairstyle_03",
		"social_imagedesigner_hairstyle_04",
		"social_imagedesigner_exotic_01",
		"social_imagedesigner_exotic_02",
		"social_imagedesigner_exotic_03",
		"social_imagedesigner_exotic_04",
		"social_imagedesigner_bodyform_01",
		"social_imagedesigner_bodyform_02",
		"social_imagedesigner_bodyform_03",
		"social_imagedesigner_bodyform_04",
		"social_imagedesigner_markings_01",
		"social_imagedesigner_markings_02",
		"social_imagedesigner_markings_03",
		"social_imagedesigner_markings_04",
		"social_imagedesigner_master"
	},
	
	{	// 17
		"combat_marksman_novice",
		"combat_marksman_rifle_01",
		"combat_marksman_rifle_02",
		"combat_marksman_rifle_03",
		"combat_marksman_rifle_04",
		"combat_marksman_pistol_01",
		"combat_marksman_pistol_02",
		"combat_marksman_pistol_03",
		"combat_marksman_pistol_04",
		"combat_marksman_carbine_01",
		"combat_marksman_carbine_02",
		"combat_marksman_carbine_03",
		"combat_marksman_carbine_04",
		"combat_marksman_support_01",
		"combat_marksman_support_02",
		"combat_marksman_support_03",
		"combat_marksman_support_04",
		"combat_marksman_master"
	},

	{	// 18 
		"science_medic_novice",
		"science_medic_injury_01",
		"science_medic_injury_02",
		"science_medic_injury_03",
		"science_medic_injury_04",
		"science_medic_injury_speed_01",
		"science_medic_injury_speed_02",
		"science_medic_injury_speed_03",
		"science_medic_injury_speed_04",
		"science_medic_ability_01",
		"science_medic_ability_02",
		"science_medic_ability_03",
		"science_medic_ability_04",
		"science_medic_crafting_01",
		"science_medic_crafting_02",
		"science_medic_crafting_03",
		"science_medic_crafting_04",
		"science_medic_master"
	},

	{	// 19
		"crafting_merchant_novice",
		"crafting_merchant_advertising_01",
		"crafting_merchant_advertising_02",
		"crafting_merchant_advertising_03",
		"crafting_merchant_advertising_04",
		"crafting_merchant_sales_01",
		"crafting_merchant_sales_02",
		"crafting_merchant_sales_03",
		"crafting_merchant_sales_04",
		"crafting_merchant_hiring_01",
		"crafting_merchant_hiring_02",
		"crafting_merchant_hiring_03",
		"crafting_merchant_hiring_04",
		"crafting_merchant_management_01",
		"crafting_merchant_management_02",
		"crafting_merchant_management_03",
		"crafting_merchant_management_04",
		"crafting_merchant_master"
	},

	{	// 20
		"social_musician_novice",
		"social_musician_ability_01",
		"social_musician_ability_02",
		"social_musician_ability_03",
		"social_musician_ability_04",
		"social_musician_wound_01",
		"social_musician_wound_02",
		"social_musician_wound_03",
		"social_musician_wound_04",
		"social_musician_knowledge_01",
		"social_musician_knowledge_02",
		"social_musician_knowledge_03",
		"social_musician_knowledge_04",
		"social_musician_shock_01",
		"social_musician_shock_02",
		"social_musician_shock_03",
		"social_musician_shock_04",
		"social_musician_master"
	},
	
	{	// 21
		"combat_polearm_novice",
		"combat_polearm_accuracy_01",
		"combat_polearm_accuracy_02",
		"combat_polearm_accuracy_03",
		"combat_polearm_accuracy_04",
		"combat_polearm_speed_01",
		"combat_polearm_speed_02",
		"combat_polearm_speed_03",
		"combat_polearm_speed_04",
		"combat_polearm_ability_01",
		"combat_polearm_ability_02",
		"combat_polearm_ability_03",
		"combat_polearm_ability_04",
		"combat_polearm_support_01",
		"combat_polearm_support_02",
		"combat_polearm_support_03",
		"combat_polearm_support_04",
		"combat_polearm_master"
	},

	{	// 22
		"combat_pistol_novice",
		"combat_pistol_accuracy_01",
		"combat_pistol_accuracy_02",
		"combat_pistol_accuracy_03",
		"combat_pistol_accuracy_04",
		"combat_pistol_speed_01",
		"combat_pistol_speed_02",
		"combat_pistol_speed_03",
		"combat_pistol_speed_04",
		"combat_pistol_ability_01",
		"combat_pistol_ability_02",
		"combat_pistol_ability_03",
		"combat_pistol_ability_04",
		"combat_pistol_support_01",
		"combat_pistol_support_02",
		"combat_pistol_support_03",
		"combat_pistol_support_04",
		"combat_pistol_master"
	},

	{	// 23
		"social_politician_novice",
		"social_politician_fiscal_01",
		"social_politician_fiscal_02",
		"social_politician_fiscal_03",
		"social_politician_fiscal_04",
		"social_politician_martial_01",
		"social_politician_martial_02",
		"social_politician_martial_03",
		"social_politician_martial_04",
		"social_politician_civic_01",
		"social_politician_civic_02",
		"social_politician_civic_03",
		"social_politician_civic_04",
		"social_politician_urban_01",
		"social_politician_urban_02",
		"social_politician_urban_03",
		"social_politician_urban_04",
		"social_politician_master"
	},
	
	{	// 24
		"outdoors_ranger_novice",
		"outdoors_ranger_movement_01",
		"outdoors_ranger_movement_02",
		"outdoors_ranger_movement_03",
		"outdoors_ranger_movement_04",
		"outdoors_ranger_tracking_01",
		"outdoors_ranger_tracking_02",
		"outdoors_ranger_tracking_03",
		"outdoors_ranger_tracking_04",
		"outdoors_ranger_harvest_01",
		"outdoors_ranger_harvest_02",
		"outdoors_ranger_harvest_03",
		"outdoors_ranger_harvest_04",
		"outdoors_ranger_support_01",
		"outdoors_ranger_support_02",
		"outdoors_ranger_support_03",
		"outdoors_ranger_support_04",
		"outdoors_ranger_master"
	},

	{	// 25
		"combat_rifleman_novice",
		"combat_rifleman_accuracy_01",
		"combat_rifleman_accuracy_02",
		"combat_rifleman_accuracy_03",
		"combat_rifleman_accuracy_04",
		"combat_rifleman_speed_01",
		"combat_rifleman_speed_02",
		"combat_rifleman_speed_03",
		"combat_rifleman_speed_04",
		"combat_rifleman_ability_01",
		"combat_rifleman_ability_02",
		"combat_rifleman_ability_03",
		"combat_rifleman_ability_04",
		"combat_rifleman_support_01",
		"combat_rifleman_support_02",
		"combat_rifleman_support_03",
		"combat_rifleman_support_04",
		"combat_rifleman_master"
	},

	{	// 26
		"outdoors_scout_novice",
		"outdoors_scout_movement_01",
		"outdoors_scout_movement_02",
		"outdoors_scout_movement_03",
		"outdoors_scout_movement_04",
		"outdoors_scout_tools_01",
		"outdoors_scout_tools_02",
		"outdoors_scout_tools_03",
		"outdoors_scout_tools_04",
		"outdoors_scout_harvest_01",
		"outdoors_scout_harvest_02",
		"outdoors_scout_harvest_03",
		"outdoors_scout_harvest_04",
		"outdoors_scout_camp_01",
		"outdoors_scout_camp_02",
		"outdoors_scout_camp_03",
		"outdoors_scout_camp_04",
		"outdoors_scout_master"
	},

	{	// 27
		"combat_smuggler_novice",
		"combat_smuggler_master",
		"combat_smuggler_underworld_01",
		"combat_smuggler_underworld_02",
		"combat_smuggler_underworld_03",
		"combat_smuggler_underworld_04",
		"combat_smuggler_slicing_01",
		"combat_smuggler_slicing_02",
		"combat_smuggler_slicing_03",
		"combat_smuggler_slicing_04",
		"combat_smuggler_combat_01",
		"combat_smuggler_combat_02",
		"combat_smuggler_combat_03",
		"combat_smuggler_combat_04",
		"combat_smuggler_spice_01",
		"combat_smuggler_spice_02",
		"combat_smuggler_spice_03",
		"combat_smuggler_spice_04"
	},

	{	// 28
		"outdoors_squadleader_novice",
		"outdoors_squadleader_movement_01",
		"outdoors_squadleader_movement_02",
		"outdoors_squadleader_movement_03",
		"outdoors_squadleader_movement_04",
		"outdoors_squadleader_offense_01",
		"outdoors_squadleader_offense_02",
		"outdoors_squadleader_offense_03",
		"outdoors_squadleader_offense_04",
		"outdoors_squadleader_defense_01",
		"outdoors_squadleader_defense_02",
		"outdoors_squadleader_defense_03",
		"outdoors_squadleader_defense_04",
		"outdoors_squadleader_support_01",
		"outdoors_squadleader_support_02",
		"outdoors_squadleader_support_03",
		"outdoors_squadleader_support_04",
		"outdoors_squadleader_master"
	},
	
	{	// 29
		"combat_2hsword_novice",
		"combat_2hsword_accuracy_01",
		"combat_2hsword_accuracy_02",
		"combat_2hsword_accuracy_03",
		"combat_2hsword_accuracy_04",
		"combat_2hsword_speed_01",
		"combat_2hsword_speed_02",
		"combat_2hsword_speed_03",
		"combat_2hsword_speed_04",
		"combat_2hsword_ability_01",
		"combat_2hsword_ability_02",
		"combat_2hsword_ability_03",
		"combat_2hsword_ability_04",
		"combat_2hsword_support_01",
		"combat_2hsword_support_02",
		"combat_2hsword_support_03",
		"combat_2hsword_support_04",
		"combat_2hsword_master"
	},

	{	// 30
		"crafting_tailor_novice",
		"crafting_tailor_casual_01",
		"crafting_tailor_casual_02",
		"crafting_tailor_casual_03",
		"crafting_tailor_casual_04",
		"crafting_tailor_field_01",
		"crafting_tailor_field_02",
		"crafting_tailor_field_03",
		"crafting_tailor_field_04",
		"crafting_tailor_formal_01",
		"crafting_tailor_formal_02",
		"crafting_tailor_formal_03",
		"crafting_tailor_formal_04",
		"crafting_tailor_production_01",
		"crafting_tailor_production_02",
		"crafting_tailor_production_03",
		"crafting_tailor_production_04",
		"crafting_tailor_master"
	},
	
	{	// 31
		"combat_unarmed_novice",
		"combat_unarmed_accuracy_01",
		"combat_unarmed_accuracy_02",
		"combat_unarmed_accuracy_03",
		"combat_unarmed_accuracy_04",
		"combat_unarmed_speed_01",
		"combat_unarmed_speed_02",
		"combat_unarmed_speed_03",
		"combat_unarmed_speed_04",
		"combat_unarmed_ability_01",
		"combat_unarmed_ability_02",
		"combat_unarmed_ability_03",
		"combat_unarmed_ability_04",
		"combat_unarmed_support_01",
		"combat_unarmed_support_02",
		"combat_unarmed_support_03",
		"combat_unarmed_support_04",
		"combat_unarmed_master"
	},

	{	// 32
		"crafting_weaponsmith_novice",
		"crafting_weaponsmith_melee_01",
		"crafting_weaponsmith_melee_02",
		"crafting_weaponsmith_melee_03",
		"crafting_weaponsmith_melee_04",
		"crafting_weaponsmith_firearms_01",
		"crafting_weaponsmith_firearms_02",
		"crafting_weaponsmith_firearms_03",
		"crafting_weaponsmith_firearms_04",
		"crafting_weaponsmith_munitions_01",
		"crafting_weaponsmith_munitions_02",
		"crafting_weaponsmith_munitions_03",
		"crafting_weaponsmith_munitions_04",
		"crafting_weaponsmith_techniques_01",
		"crafting_weaponsmith_techniques_02",
		"crafting_weaponsmith_techniques_03",
		"crafting_weaponsmith_techniques_04",
		"crafting_weaponsmith_master"
	}
};

#endif
