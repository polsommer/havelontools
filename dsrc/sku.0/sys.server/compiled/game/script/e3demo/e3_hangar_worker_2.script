
include library.anims;
include library.space_utils;
include library.factions;
trigger OnAttach()
{
	messageTo( self, "moveToLocationOne", null, 5, false );
	setObjVar(self, "intDestination", 1);
	factions.setFaction( self, "Imperial");
	return SCRIPT_CONTINUE;
}

messageHandler moveToLocationOne()
{
	pathToLocationOne( self );	
	return SCRIPT_CONTINUE;
}

void pathToLocationOne( obj_id self)
{
	//debugSpeakMsg(self, "going to 1");
	location destLoc = new location(getLocation( self));
	destLoc.x = -0.9f;
	destLoc.y = 206.5f;
	destLoc.z = 300.4f;
	setObjVar( self, "intIndex", 1);
	pathTo( self, destLoc );
}

void pathToLocationTwo( obj_id self)
{
	//debugSpeakMsg(self, "going to 2");
	location destLoc = new location(getLocation( self));
	destLoc.x = -5f;
	destLoc.y = 206.5f;
	destLoc.z = 294.1f;
	setObjVar( self, "intIndex", 2);
	pathTo( self, destLoc );
}


void pathToLocationThree( obj_id self)
{
	//debugSpeakMsg(self, "going to 3");
	location destLoc = new location(getLocation( self));
	destLoc.x = -4.6f;
	destLoc.y = 206.5f;
	destLoc.z = 307.4f;
	setObjVar( self, "intIndex", 3);
	pathTo( self, destLoc );
}

void pathToLocationFour( obj_id self)
{
	//debugSpeakMsg(self, "going to 4");
	location destLoc = new location(getLocation( self));
	destLoc.x = -0.4f;
	destLoc.y = 206.5f;
	destLoc.z = 305.8f;
	setObjVar( self, "intIndex", 4);
	pathTo( self, destLoc );
}



trigger OnMovePathComplete()
{	
	// wait is 
	int intIndex = getIntObjVar(self, "intIndex");
	int intDestination = getIntObjVar(self, "intDestination");
	if(intDestination==4)
	{
		if(intIndex==4)
		{
			//debugSpeakMsg(self, "Got to 4, dest was 4");
			setObjVar(self, "intDestination", 1);
			messageTo(self, "doFaceTo", null, 1.5f, false);
			// do twiddle crap 
		}
		else
		{
			if(intIndex==1)
			{
				pathToLocationTwo(self);
			}
			if(intIndex==2)
			{
				pathToLocationThree(self);
			}
			if(intIndex==3)
			{
				pathToLocationFour(self);
			}			
		}
		
	}
	else
	{
		if(intIndex==1)
		{
			//debugSpeakMsg(self, "Got to 1, dest was 1");
			setObjVar(self, "intDestination", 4);
			messageTo(self, "doFaceTo", null, 1.5f, false);
			
		}
		else
		{
			if(intIndex==2)
			{
				pathToLocationOne(self);
			}
			if(intIndex==3)
			{
				pathToLocationTwo(self);
			}
			if(intIndex==4)
			{
				pathToLocationThree(self);
			}			
		}
	
	}

	
		
	return SCRIPT_CONTINUE;
}
messageHandler doFaceTo()
{
	obj_id[] objTestObjects = getAllObjectsWithObjVar(getLocation(self), 2000, "astromech1LookAt");
	faceTo(self, getLocation(objTestObjects[0]));			
	messageTo(self, "doTwiddle", null, 1.5f, false);			
	return SCRIPT_CONTINUE;

}

messageHandler doLocationOne()
{
	pathToLocationOne(self);
	return SCRIPT_CONTINUE;

}

messageHandler doLocationTwo()
{
	pathToLocationTwo(self);
	return SCRIPT_CONTINUE;
}

messageHandler doLocationThree()
{
	pathToLocationThree(self);
	return SCRIPT_CONTINUE;
}

messageHandler doLocationFour()
{
	pathToLocationFour(self);
	return SCRIPT_CONTINUE;
}

messageHandler doTwiddle()
{

//const string ASTROMECH_STD_MANIPULATE_HIGH = "std_manipulate_high";
//const string ASTROMECH_STD_MANIPULATE_LOW = "std_manipulate_low";
//const string ASTROMECH_STD_MANIPULATE_MEDIUM = "std_manipulate_medium";
	float fltWait = rand(2, 5);
	doAnimationAction( self, anims.ASTROMECH_STD_MANIPULATE_HIGH);
	int intDestination = getIntObjVar(self, "intDestination");
	if(intDestination==1)
	{
		
		messageTo(self, "doLocationThree",  null, fltWait, false);
	}
	else
	{
		messageTo(self, "doLocationTwo",  null, fltWait, false);
	
	}	
	return SCRIPT_CONTINUE;
}


