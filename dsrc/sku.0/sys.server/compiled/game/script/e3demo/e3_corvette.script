include library.create;
include library.utils;
include library.space_crafting;
include library.space_combat;
include library.anims;
include library.space_utils;
include library.space_create;
include library.ship_ai;

trigger OnAttach()
{
	//messageTo(self, "spawnAttackers", null, 5, false);
	setObjVar(self, "intAlwaysDump", 1);
	messageTo(self, "delayedSpawn", null, 1, false);
	messageTo(self, "damageLoop", null, 1, false);
	//setObjVar(self, "convo.appearance", "object/mobile/stormtrooper.iff");
	attachScript(self, "conversation.e3_corvette");	
	return SCRIPT_CONTINUE;
}	
messageHandler spawnAttackers()
{
	string strSquad = "squad_tie_bomberwithguard_ace";
	resizeable obj_id[]  objMembers = space_create.createSquadHyperspace(self, strSquad, getTransform_o2p(self), rand(200,300), null);
	for(int intI = 0; intI < objMembers.length; intI++)
	{
		ship_ai.unitAddDamageTaken(objMembers[intI], self, 100f);
	}
	strSquad = "squad_tie_bomberwithguard_ace";
	objMembers = space_create.createSquadHyperspace(self, strSquad, getTransform_o2p(self), rand(200,300), null);
	for(int intI = 0; intI < objMembers.length; intI++)
	{
		ship_ai.unitAddDamageTaken(objMembers[intI], self, 100f);
	}
	/*
	strSquad = "squad_tie_interceptor_ace";
	objMembers = space_create.createSquadHyperspace(self, strSquad, getTransform_o2p(self), rand(200,300), null);
	for(int intI = 0; intI < objMembers.length; intI++)
	{
		ship_ai.unitAddDamageTaken(objMembers[intI], self, 100f);
	}
	strSquad = "squad_tie_bomberwithguard_ace";
	objMembers = space_create.createSquadHyperspace(self, strSquad, getTransform_o2p(self), rand(200,300), null);
	for(int intI = 0; intI < objMembers.length; intI++)
	{
		ship_ai.unitAddDamageTaken(objMembers[intI], self, 100f);
	}
	strSquad = "squad_tie_interceptor_ace";
	objMembers = space_create.createSquadHyperspace(self, strSquad, getTransform_o2p(self), rand(200,300), null);
	for(int intI = 0; intI < objMembers.length; intI++)
	{
		ship_ai.unitAddDamageTaken(objMembers[intI], self, 100f);
	}
	*/
	return SCRIPT_CONTINUE;
	

}

messageHandler damageLoop()
{
	int intCount = rand(1, 3);
	for (int intI = 0; intI < intCount; intI++)
	{
		int intDamageType = rand(1, 4);
		int intDamageIntensity = rand(1, 2);
		dictionary dctParams = new dictionary();
		dctParams.put("intDamageType", intDamageType);
		dctParams.put("intDamageIntensity", intDamageIntensity);
		space_utils.notifyObject(self, "interiorDamageNotification", dctParams);
	}
	messageTo(self, "damageLoop", null, rand(5,10), false);
	return SCRIPT_CONTINUE;
}



	



messageHandler delayedSpawn()
{

	transform[] trSpawnLocations= utils.getTransformArrayScriptVar(self, "locSpawners");
	obj_id[] objCells = utils.getObjIdArrayScriptVar(self, "locSpawnersCells");
	int intIndex = utils.getIntLocalVar(self, "intIndex");
	location locSpawnLocation = space_utils.getLocationFromTransform(trSpawnLocations[intIndex]);
	locSpawnLocation.cell = objCells[intIndex];						
	
	string[] strMobs = 	{
				"rebel_crewman"	
				};
	int intRoll = rand(0, strMobs.length-1);
	obj_id objMob = create.object(strMobs[intRoll], locSpawnLocation);
	LOG("create", "Made mob "+objMob+" at location "+locSpawnLocation);
	setState(objMob, STATE_SHIP_INTERIOR, false);
	setObjVar(objMob, "intDeleteOnReset", 1);
	intIndex = intIndex +1;	
	if(intIndex<trSpawnLocations.length)
	{
		// recycle
		utils.setLocalVar(self, "intIndex", intIndex);
		messageTo(self, "delayedSpawn", null, 1, false);	
	}
	else
	{
		utils.removeLocalVar(self, "intIndex");			
	}
	return SCRIPT_CONTINUE;

}

