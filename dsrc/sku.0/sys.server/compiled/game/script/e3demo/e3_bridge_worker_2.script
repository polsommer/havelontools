
include library.anims;
include library.space_utils;
trigger OnAttach()
{
	messageTo( self, "moveToLocationOne", null, 5, false );
	setObjVar(self, "intDestination", 1);
	return SCRIPT_CONTINUE;
}

messageHandler moveToLocationOne()
{
	pathToLocationOne( self );	
	return SCRIPT_CONTINUE;
}

void pathToLocationOne( obj_id self)
{
	//debugSpeakMsg(self, "going to 1");
	location destLoc = new location(getLocation( self));
	destLoc.x = -5.9f;
	destLoc.y = 453f;
	destLoc.z = 326.4f;
	setObjVar( self, "intIndex", 1);
	pathTo( self, destLoc );
}

void pathToLocationTwo( obj_id self)
{
	//debugSpeakMsg(self, "going to 2");
	location destLoc = new location(getLocation( self));
	destLoc.x = -6.8f;
	destLoc.y = 453f;
	destLoc.z = 331.3f;
	setObjVar( self, "intIndex", 2);
	pathTo( self, destLoc );
}


void pathToLocationThree( obj_id self)
{
	//debugSpeakMsg(self, "going to 3");
	location destLoc = new location(getLocation( self));
	destLoc.x = -4.6f;
	destLoc.y = 206.5f;
	destLoc.z = 307.4f;
	setObjVar( self, "intIndex", 3);
	pathTo( self, destLoc );
}

void pathToLocationFour( obj_id self)
{
	//debugSpeakMsg(self, "going to 4");
	location destLoc = new location(getLocation( self));
	destLoc.x = -0.4f;
	destLoc.y = 206.5f;
	destLoc.z = 305.8f;
	setObjVar( self, "intIndex", 4);
	pathTo( self, destLoc );
}



trigger OnMovePathComplete()
{	
	// wait is 
	messageTo(self, "doFaceTo", null, 2.5f, false);		
	return SCRIPT_CONTINUE;
}
messageHandler doFaceTo()
{
	int intIndex = getIntObjVar(self, "intIndex");
	location locTest = getLocation(self);

	if(intIndex==1)
	{
		locTest.x = -6.9f;
		locTest.y = 453f;
		locTest.z = 325.5f;
	}
	else
	{
		locTest.x = -7.7f;
		locTest.y = 453f;
		locTest.z = 331f;	
	}
	
	
	faceTo(self, locTest);
	messageTo(self, "doTwiddle", null, 2.5f, false);			
	return SCRIPT_CONTINUE;

}

messageHandler doLocationOne()
{
	pathToLocationOne(self);
	return SCRIPT_CONTINUE;

}

messageHandler doLocationTwo()
{
	pathToLocationTwo(self);
	return SCRIPT_CONTINUE;
}

messageHandler doLocationThree()
{
	pathToLocationThree(self);
	return SCRIPT_CONTINUE;
}

messageHandler doLocationFour()
{
	pathToLocationFour(self);
	return SCRIPT_CONTINUE;
}

messageHandler doTwiddle()
{

//const string ASTROMECH_STD_MANIPULATE_HIGH = "std_manipulate_high";
//const string ASTROMECH_STD_MANIPULATE_LOW = "std_manipulate_low";
//const string ASTROMECH_STD_MANIPULATE_MEDIUM = "std_manipulate_medium";
	float fltWait = rand(3, 8);
	doAnimationAction( self, "manipulate_medium");
	int intIndex = getIntObjVar(self, "intIndex");
	if(intIndex==1)
	{	
		messageTo(self, "doLocationTwo",  null, fltWait, false);
	
	}	
	else
	{
		messageTo(self, "doLocationOne",  null, fltWait, false);
	}
	
	return SCRIPT_CONTINUE;
}


