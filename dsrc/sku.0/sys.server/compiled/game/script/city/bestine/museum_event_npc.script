include library.ai_lib;
include library.chat;
include library.planetary_map;
include library.utils;

const string FACE_TO_VOLUME_NAME = "faceToTriggerVolume";

const string VARNAME_MUSEUM_STATUS = "strMuseumEventStatus";
const string VARNAME_MUSEUM_WINNER = "strMuseumEventWinner";
const string VARNAME_MUSEUM_NUM = "intMuseumEventNum";
const string VARNAME_MUSEUM_WINNER_ARTWORK_INDEX = "intMuseumWinnerArtworkIndex";
const string OBJVAR_MUSEUM_BUILDING = "bestine.objMuseumBuilding";
const string DATATABLE_NAME = "datatables/city/bestine/bestine_museum_event.iff";

trigger OnAttach()
{	
	createTriggerVolume( FACE_TO_VOLUME_NAME, 8.0f, true );
	
	// if NPC is the curator, Lilas Dinhint, setup event totals.
	string creatureName = ai_lib.getCreatureName(self);
	if ( creatureName == "lilas_dinhint" )
	{
		messageTo(self, "handleCuratorSetup", null, 9, false);
		return SCRIPT_CONTINUE;
	}
	
	// update museum event status
	messageTo(self, "handleMuseumEventNpcSetup", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( isPlayer( breacher ) )
	{
		if ( volumeName == FACE_TO_VOLUME_NAME )
		{
			if ( !isInNpcConversation(self) )
			{
				if ( canSee( self, breacher ) )
				{
					faceTo( self, breacher );
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

// ************** Bestine Curator Message Handlers and Triggers

// Curator, Lilas Dinhint, setup - getting vote totals from master object.
// Only used when the curator is respawned.
messageHandler handleCuratorSetup()
{
	string creatureName = ai_lib.getCreatureName(self);
	if ( creatureName != "lilas_dinhint" )
	{
		return SCRIPT_CONTINUE;
	}
	
	dictionary msgData = new dictionary();
	msgData.put( "objRequester", self);
	obj_id museumBuilding = getObjIdObjVar(self, OBJVAR_MUSEUM_BUILDING);
	
	messageTo(museumBuilding, "handleCuratorSetupRequest", msgData, 9, false);
	return SCRIPT_CONTINUE;
}

// handles the vote totals setup response from the master object.
messageHandler handleCuratorSetupResponse()
{
	clearMuseumEventObjvars(self);
	
	// set museum event objvars.
	// museumEventStatus will either be "museumEventStarted" or "museumEventEnded"
	string museumEventStatus = params.getString(VARNAME_MUSEUM_STATUS);
	string museumEventStatusObjvar = "bestine." + museumEventStatus;
	string museumEventWinner = params.getString(VARNAME_MUSEUM_WINNER);
	int museumEventWinnerArtworkIndex = params.getInt(VARNAME_MUSEUM_WINNER_ARTWORK_INDEX);
		
	setObjVar(self, museumEventStatusObjvar, params.getInt(VARNAME_MUSEUM_NUM));
	setObjVar(self, "bestine.museumEventWinner", museumEventWinner);
	setObjVar(self, "bestine.museumEventWinnerArtworkIndex", museumEventWinnerArtworkIndex);
	
	if ( museumEventStatus.equals("museumEventStarted") )
	{
		setObjVar(self, "bestine.votesForEntry01", params.getInt("intVotesForEntry01"));
		setObjVar(self, "bestine.votesForEntry02", params.getInt("intVotesForEntry02"));
		setObjVar(self, "bestine.votesForEntry03", params.getInt("intVotesForEntry03"));
		
		setObjVar(self, "bestine.museumEventEntry01", params.getString("strMuseumEventEntry01"));
		setObjVar(self, "bestine.museumEventEntry02", params.getString("strMuseumEventEntry02"));
		setObjVar(self, "bestine.museumEventEntry03", params.getString("strMuseumEventEntry03"));
		
		setObjVar(self, "bestine.museumEventIndex01", params.getInt("intMuseumEventIndex01"));
		setObjVar(self, "bestine.museumEventIndex02", params.getInt("intMuseumEventIndex02"));
		setObjVar(self, "bestine.museumEventIndex03", params.getInt("intMuseumEventIndex03"));
	}
	
	if ( museumEventWinner != null && !museumEventWinner.equals("none") )
	{
		dictionary artistData = dataTableGetRow(DATATABLE_NAME, museumEventWinner);
		
		string artworkColumn = "artwork_" + museumEventWinnerArtworkIndex;
		string schematicColumn = "schematic_" + museumEventWinnerArtworkIndex;
		string artworkTemplate = artistData.getString(artworkColumn);
		string schematicTemplate = artistData.getString(schematicColumn);

		setObjVar(self, "bestine.museumEventFeaturedArtwork", artworkTemplate);
		setObjVar(self, "bestine.museumEventFeaturedSchematic", schematicTemplate);
	}
	
	int timeNextEventStarts = params.getInt("timeNextEventStarts");
	if ( timeNextEventStarts > 0 )
		setObjVar(self, "bestine.timeNextEventStarts", timeNextEventStarts);
	
	// update the master object with the vote totals every 10 minutes.	
	messageTo(self, "handleCuratorDataStorage", null, 600, false);
	return SCRIPT_CONTINUE;
}

// Sends current vote totals from the curator, Lilas Dinhint, so that
// they will be persisted on the master object.
// Called every 10 minutes (600 seconds) during the election.
messageHandler handleCuratorDataStorage()
{
	if ( hasObjVar(self, "bestine.museumEventStarted") )
	{
		int votesForEntry01 = 0;
		int votesForEntry02 = 0;
		int votesForEntry03 = 0;
		if ( hasObjVar(self, "bestine.votesForEntry01") )
			votesForEntry01 = getIntObjVar(self, "bestine.votesForEntry01");
			
		if ( hasObjVar(self, "bestine.votesForEntry02") )
			votesForEntry01 = getIntObjVar(self, "bestine.votesForEntry02");
			
		if ( hasObjVar(self, "bestine.votesForEntry03") )
			votesForEntry03 = getIntObjVar(self, "bestine.votesForEntry03");
		
		dictionary msgData = new dictionary();
		msgData.put("objRequester", self);
		msgData.put("intVotesForEntry01", votesForEntry01);
		msgData.put("intVotesForEntry02", votesForEntry02);
		msgData.put("intVotesForEntry03", votesForEntry03);
		
		obj_id museumBuilding = getObjIdObjVar(self, OBJVAR_MUSEUM_BUILDING);
		
		messageTo(museumBuilding, "processCuratorDataStorageRequest", msgData, 1, false);
		messageTo(self, "handleCuratorDataStorage", null, 600, false);
	}
	return SCRIPT_CONTINUE;
}

// This happens when the event switches status...
// from museumEventStarted to museumEventEnded or vice versa.
messageHandler handleMuseumEventStateChangeCuratorAlert()
{
	clearMuseumEventObjvars(self);
	
	// get new museum event status data
	string museumEventStatus = params.getString(VARNAME_MUSEUM_STATUS);
	string museumEventWinner = params.getString(VARNAME_MUSEUM_WINNER);
	int museumEventNum = params.getInt(VARNAME_MUSEUM_NUM);
	int museumEventWinnerArtworkIndex = params.getInt(VARNAME_MUSEUM_WINNER_ARTWORK_INDEX);
	
	int timeNextEventStarts = params.getInt("timeNextEventStarts");
	if ( timeNextEventStarts > 0 )
	{
		setObjVar(self, "bestine.timeNextEventStarts", timeNextEventStarts);
	}
	else
	{
	if ( hasObjVar(self, "bestine.timeNextEventStarts" ) )
		removeObjVar(self, "bestine.timeNextEventStarts");
	}
	
	dictionary msgData = new dictionary();
	
	// if the museum event has ended, determine the winner.
	if ( museumEventStatus == "museumEventEnded" )
	{
		int votesForEntry01 = getIntObjVar(self, "bestine.votesForEntry01");
		int votesForEntry02 = getIntObjVar(self, "bestine.votesForEntry02");
		int votesForEntry03 = getIntObjVar(self, "bestine.votesForEntry03");
		
		string entry01 = getStringObjVar(self, "bestine.museumEventEntry01");
		string entry02 = getStringObjVar(self, "bestine.museumEventEntry02");
		string entry03 = getStringObjVar(self, "bestine.museumEventEntry03");
		
		int index01 = getIntObjVar(self, "bestine.museumEventIndex01");
		int index02 = getIntObjVar(self, "bestine.museumEventIndex02");
		int index03 = getIntObjVar(self, "bestine.museumEventIndex03");
		
		// Entry01 Wins!
		if ( votesForEntry01 > votesForEntry02 && votesForEntry01 > votesForEntry03)
		{
			museumEventWinner = entry01;
			museumEventWinnerArtworkIndex = index01;
		}
		// Entry02 wins!
		else if ( votesForEntry02 > votesForEntry01 && votesForEntry02 > votesForEntry03)
		{
			museumEventWinner = entry02;
			museumEventWinnerArtworkIndex = index02;
		}
		// Entry03 wins!
		else if ( votesForEntry03 > votesForEntry01 && votesForEntry03 > votesForEntry02)
		{
			museumEventWinner = entry03;
			museumEventWinnerArtworkIndex = index03;
		}
		// Drat! A tie!! Um... er... it's a fixed event!!
		// Determine a winner unless no entry got any votes.
		else if (votesForEntry01 == 0 && votesForEntry02 == 0 && votesForEntry03 == 0)
		{
			museumEventWinner = "none";
			museumEventWinnerArtworkIndex = 0;
		}
		// all three got equal votes
		else if ( votesForEntry01 == votesForEntry02 && votesForEntry02 == votesForEntry03 )
		{
			int chance = rand(1,3);
			switch(chance)
			{
				case 1:
					museumEventWinner = entry01;
					museumEventWinnerArtworkIndex = index01;
					break;
				case 2:
					museumEventWinner = entry02;
					museumEventWinnerArtworkIndex = index02;
					break;
				case 3:
					museumEventWinner = entry03;
					museumEventWinnerArtworkIndex = index03;
					break;
			}
		}
		// entry01 and entry02 got the same num votes
		else if ( votesForEntry01 == votesForEntry02 && votesForEntry02 != votesForEntry03 )
		{
			int chance = rand(1,2);
			switch(chance)
			{
				case 1:
					museumEventWinner = entry01;
					museumEventWinnerArtworkIndex = index01;
					break;
				case 2:
					museumEventWinner = entry02;
					museumEventWinnerArtworkIndex = index02;
					break;
			}
		}
		// entry01 and entry03 got the same num votes
		else if ( votesForEntry01 == votesForEntry03 && votesForEntry03 != votesForEntry02 )
		{
			int chance = rand(1,2);
			switch(chance)
			{
				case 1:
					museumEventWinner = entry01;
					museumEventWinnerArtworkIndex = index01;
					break;
				case 2:
					museumEventWinner = entry03;
					museumEventWinnerArtworkIndex = index03;
					break;
			}
		}
		// entry02 and entry03 got the same num votes
		else if ( votesForEntry02 == votesForEntry03 && votesForEntry03 != votesForEntry01 )
		{
			int chance = rand(1,2);
			switch(chance)
			{
				case 1:
					museumEventWinner = entry02;
					museumEventWinnerArtworkIndex = index02;
					break;
				case 2:
					museumEventWinner = entry03;
					museumEventWinnerArtworkIndex = index03;
					break;
			}
		}
		else
		{
			museumEventWinner = "none";
			museumEventWinnerArtworkIndex = 0;
		}
		
		if ( museumEventWinner == null )
		{
			museumEventWinner = "none";
		}
		
		if ( !museumEventWinner.equals("none") )
		{
			dictionary artistData = dataTableGetRow(DATATABLE_NAME, museumEventWinner);
			
			string artworkColumn = "artwork_" + museumEventWinnerArtworkIndex;
			string schematicColumn = "schematic_" + museumEventWinnerArtworkIndex;
			string artworkTemplate = artistData.getString(artworkColumn);
			string schematicTemplate = artistData.getString(schematicColumn);
			
			setObjVar(self, "bestine.museumEventFeaturedArtwork", artworkTemplate);
			setObjVar(self, "bestine.museumEventFeaturedSchematic", schematicTemplate);
		}
		else
		{
			removeObjVar(self, "bestine.museumEventFeaturedArtwork");
			removeObjVar(self, "bestine.museumEventFeaturedSchematic");
		}
			
		for (int i = 1; i <= 3; i++)
		{
			string votesObjVar = "bestine.votesForEntry0" + i;
			string entryObjVar = "bestine.museumEventEntry0" + i;
			string indexObjVar = "bestine.museumEventIndex0" + i;
				
			if ( hasObjVar(self, votesObjVar) )
				removeObjVar(self, votesObjVar);
			
			if ( hasObjVar(self, entryObjVar) )
				removeObjVar(self, entryObjVar);	
				
			if ( hasObjVar(self, indexObjVar) )
				removeObjVar(self, indexObjVar);
		}
	}
	
	
	// if the museum event is beginning, initialize the event.
	if ( museumEventStatus == "museumEventStarted" )
	{
		messageTo(self, "handleCuratorSetup", null, 10, false);
		
	}
	
	string museumEventStatusObjvar = "bestine." + museumEventStatus;
	setObjVar(self, museumEventStatusObjvar, museumEventNum);
	setObjVar(self, "bestine.museumEventWinner", museumEventWinner);
	setObjVar(self, "bestine.museumEventWinnerArtworkIndex", museumEventWinnerArtworkIndex);
	
	msgData.put(VARNAME_MUSEUM_WINNER, museumEventWinner);
	msgData.put(VARNAME_MUSEUM_WINNER_ARTWORK_INDEX, museumEventWinnerArtworkIndex);
	
	obj_id museumBuilding = getObjIdObjVar(self, OBJVAR_MUSEUM_BUILDING);	
	messageTo(museumBuilding, "handleSetMuseumEventWinner", msgData, 10, false);
	return SCRIPT_CONTINUE;
}


// *********** General museum event Message Handlers

// Get current status of the museum event when the NPC is respawned.
messageHandler handleMuseumEventNpcSetup()
{
	if ( hasObjVar(self, OBJVAR_MUSEUM_BUILDING) )
	{
		dictionary msgData = new dictionary();
		msgData.put( "objRequester", self);
		obj_id museumBuilding = getObjIdObjVar(self, OBJVAR_MUSEUM_BUILDING);
		
		listenToMessage(museumBuilding, "handleMuseumEventStatusResponse");
		messageTo(museumBuilding, "handleMuseumEventStatusRequest", msgData, 10, false);
	}
	else
	{
		messageTo(self, "checkForMuseumBuilding", null, 1, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler checkForMuseumBuilding()
{
	location here = getLocation(self);
	
	// Using a registered object as an event master object.
	map_location registeredMuseum = planetary_map.findClosestLocation( self, "museum", "");
	if ( registeredMuseum != null )
	{
		obj_id objMuseumBuilding = registeredMuseum.getLocationId();
		
		deltadictionary dctScriptVars = self.getScriptVars();
		int numMuseumChecks = dctScriptVars.getInt("numMuseumChecks");
		if ( !isIdValid(objMuseumBuilding) )
		{
			// check a few times before giving up
			if ( numMuseumChecks < 10)
			{
				numMuseumChecks = numMuseumChecks + 1;
				dctScriptVars.put("numMuseumChecks", numMuseumChecks);
				messageTo(self, "checkForMuseumBuilding", null, 60, false);
				return SCRIPT_CONTINUE;
			}
			else
			{
				LOG("DESIGNER_FATAL", "city.bestine.museum_event_spawner: Could not find obj_id for a registered museum from here:" + here);
				return SCRIPT_CONTINUE;
			}
		}
		else
		{
			setObjVar(self, OBJVAR_MUSEUM_BUILDING, objMuseumBuilding);
			dctScriptVars.put("objMuseumBuilding", objMuseumBuilding);
		}
	}
	else
	{
		LOG("DESIGNER_FATAL", "city.bestine.museum_event_spawner: Could not find a map_location for a registered museum from here: " + here);
	}
	return SCRIPT_CONTINUE;
}


// response received about election status.
messageHandler handleMuseumEventStatusResponse()
{
	clearMuseumEventObjvars(self);
	
	// set museum event objvars.
	// museumEventStatus will either be "museumEventStarted" or "museumEventEnded"
	string museumEventStatus = params.getString(VARNAME_MUSEUM_STATUS);
	string museumEventStatusObjvar = "bestine." + museumEventStatus;
	setObjVar(self, museumEventStatusObjvar, params.getInt(VARNAME_MUSEUM_NUM));
	setObjVar(self, "bestine.museumEventWinner", params.getString(VARNAME_MUSEUM_WINNER));
	
	if ( museumEventStatus.equals("museumEventStarted") )
	{
		setObjVar(self, "bestine.museumEventEntry01", params.getString("strMuseumEventEntry01"));
		setObjVar(self, "bestine.museumEventEntry02", params.getString("strMuseumEventEntry02"));
		setObjVar(self, "bestine.museumEventEntry03", params.getString("strMuseumEventEntry03"));
	}
	else
	{
		if ( hasObjVar(self, "bestine.museumEventEntry01") )
			removeObjVar(self, "bestine.museumEventEntry01");
		
		if ( hasObjVar(self, "bestine.museumEventEntry02") )
			removeObjVar(self, "bestine.museumEventEntry02");
		
		if ( hasObjVar(self, "bestine.museumEventEntry03") )
			removeObjVar(self, "bestine.museumEventEntry03");
	}
	
	return SCRIPT_CONTINUE;
}


// ************* Functions
void clearMuseumEventObjvars(obj_id self)
{
	if (hasObjVar(self, "bestine.museumEventStarted") )
		removeObjVar(self, "bestine.museumEventStarted");
			
	if (hasObjVar(self, "bestine.museumEventEnded") )
		removeObjVar(self, "bestine.museumEventEnded");
	
	if (hasObjVar(self, "bestine.museumEventWinner") )
		removeObjVar(self, "bestine.museumEventWinner");
		
	if (hasObjVar(self, "bestine.museumEventWinnerArtworkIndex") )
		removeObjVar(self, "bestine.museumEventWinnerArtworkIndex");
	
	return;
}
