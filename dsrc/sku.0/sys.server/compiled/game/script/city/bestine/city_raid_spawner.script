include library.factions;
include library.create;
include library.hq;
include library.utils;

const float SPAWN_DELAY = 1.0f;
const int ONE_DAY_IN_SECS = 86400;
const int EIGHT_HOURS_IN_SECS  = 28800;

trigger OnAttach()
{
	if ( !hasScript(self, "city.bestine.politician_event_npc") )
		attachScript(self, "city.bestine.politician_event_npc");
	
	if (!hasObjVar(self, "nextWave"))
	{
		// Start the raid for the first time in 1 to 2 days
		// offset by 8 hours.
		int startTime = EIGHT_HOURS_IN_SECS + ( rand(1,2)*ONE_DAY_IN_SECS );
		messageTo(self, "startRaid", null, startTime, true);
	}
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( !hasScript(self, "city.bestine.politician_event_npc") )
		attachScript(self, "city.bestine.politician_event_npc");
	
	if ( hasObjVar(self, "raidAlreadyStarted") )
		removeObjVar(self, "raidAlreadyStarted");
	
	return SCRIPT_CONTINUE;
}


messageHandler startRaid()
{
	if ( hasObjVar(self, "raidAlreadyStarted") )
			return SCRIPT_CONTINUE;
			
	setObjVar(self, "raidAlreadyStarted", 1);
	
	// SCRIPTVARS
	deltadictionary dctScriptVars = self.getScriptVars();
	
	if (hasObjVar(self, "strDataTable"))
	{
		string strDataTable = getStringObjVar(self, "strDataTable");
		//LOG("city_raid", "strDataTable is "+strDataTable);
		
		dctScriptVars.put("intWave", 1);
		
		dictionary dctInfo = dataTableGetRow(strDataTable, 0);
		
		int intMinWaveDelay =dctInfo.getInt("intMinWaveDelay");
		dctScriptVars.put("intMinWaveDelay", intMinWaveDelay);	
		
		int intMaxWaveDelay = dctInfo.getInt("intMaxWaveDelay"); 
		dctScriptVars.put("intMaxWaveDelay", intMaxWaveDelay);
		
		// default to shorter Commerce recylce times
		int intMinRecycleTime = dctInfo.getInt("intMinCommerceRecycleTime");
		dctScriptVars.put("intMinRecycleTime", intMinRecycleTime);
			
		int intMaxRecycleTime = dctInfo.getInt("intMaxCommerceRecycleTime");
		dctScriptVars.put("intMaxRecycleTime", intMaxRecycleTime);
		
		if ( hasObjVar(self, "bestine.electionWinner") )
		{
			string electionWinner = getStringObjVar(self, "bestine.electionWinner");
			if ( electionWinner.equals("Victor")  || electionWinner.equals("victor") )
			{
				intMinRecycleTime = dctInfo.getInt("intMinDefenseRecycleTime");
				dctScriptVars.put("intMinRecycleTime", intMinRecycleTime);
							
				intMaxRecycleTime = dctInfo.getInt("intMaxDefenseRecycleTime");
				dctScriptVars.put("intMaxRecycleTime", intMaxRecycleTime);
			}
		}
		
		int intNumWaves = dctInfo.getInt("intNumWaves");
		dctScriptVars.put("intNumWaves", intNumWaves);	
		
		dctScriptVars.put( "strDataTable", strDataTable);	
		dctScriptVars.put("intIndex", 0);
		dctScriptVars.put("intNumKilled", 0);
		messageTo(self, "spawnWave", null, 1, false);
	
	}
	return SCRIPT_CONTINUE;
}

messageHandler spawnWave()
{
	deltadictionary dctScriptVars = self.getScriptVars();
	int intWave = dctScriptVars.getInt("intWave"); // which wave
	int intIndex = dctScriptVars.getInt("intIndex");	
	
	string strDataTable = dctScriptVars.getString("strDataTable");		
	string[] strSpawns = dataTableGetStringColumnNoDefaults(strDataTable, "strWave"+intWave);
	utils.setBatchScriptVar(self, "strSpawns", strSpawns);
	
	/*for(int intI = 0; intI<strSpawns.length; intI++)
	{
		LOG("city_raid", "strSpawns "+intI+" is "+strSpawns[intI]);
	}*/
	//LOG("city_raid", "Wave is "+intWave+" and column name is strWave"+intWave);
	
	float[] fltSpawnLoc_X = dataTableGetFloatColumn(strDataTable, "fltSpawnLoc_X");
	float[] fltSpawnLoc_Y = dataTableGetFloatColumn(strDataTable, "fltSpawnLoc_Y");
	float[] fltSpawnLoc_Z = dataTableGetFloatColumn(strDataTable, "fltSpawnLoc_Z");
	
	dctScriptVars.put("fltSpawnLoc_X", fltSpawnLoc_X);
	dctScriptVars.put("fltSpawnLoc_Y", fltSpawnLoc_Y);
	dctScriptVars.put("fltSpawnLoc_Z", fltSpawnLoc_Z);
	
	int intWaveSize = fltSpawnLoc_X.length;
	dctScriptVars.put("intWaveSize", intWaveSize);
	
	float coordX = fltSpawnLoc_X[intIndex];
	float coordY = fltSpawnLoc_Y[intIndex];
	float coordZ = fltSpawnLoc_Z[intIndex];
	
	// LOG("city_raid", "spawnWave: intIndex is " + intIndex + " and location is " + coordX + " " + coordY + " " + coordZ);
	
	location locSelf = getLocation (self);
	string strPlanet = locSelf.area;
	location locSpawnLocation= new location (coordX, coordY, coordZ, strPlanet, null);
	
	if ( locSpawnLocation != null)
	{
		int intSpawnChoice = rand(0, (strSpawns.length-1));
		//LOG("city_raid", "Spawning a " + strSpawns[intSpawnChoice]);
		obj_id objMob = create.object(strSpawns[intSpawnChoice], locSpawnLocation);
		if ( isIdValid(objMob) )
		{
			attachScript(objMob, "city.bestine.city_raid_mob");
			setObjVar(objMob, "objRaidSpawner", self);
		}
	}
	
	intIndex = intIndex + 1;
	dctScriptVars.put("intIndex", intIndex);
	if( intIndex < intWaveSize )
	{
		dctScriptVars.put("intIndex", intIndex);
		messageTo(self, "continueSpawns", null, SPAWN_DELAY, false);			
	}	

	return SCRIPT_CONTINUE;
}

messageHandler continueSpawns()
{
	deltadictionary dctScriptVars = self.getScriptVars();
	int intIndex = dctScriptVars.getInt("intIndex");	
	//LOG("city_raid", "intIndex in continue spawns is  "+intIndex);
	
	string[] strSpawns = utils.getStringBatchScriptVar(self, "strSpawns");
	if ( strSpawns == null || strSpawns.length == 0 )
		return SCRIPT_CONTINUE;
	
	float[] fltSpawnLoc_X = dctScriptVars.getFloatArray("fltSpawnLoc_X");
	float[] fltSpawnLoc_Y = dctScriptVars.getFloatArray("fltSpawnLoc_Y");
	float[] fltSpawnLoc_Z = dctScriptVars.getFloatArray("fltSpawnLoc_Z");
	
	float coordX = fltSpawnLoc_X[intIndex];
	float coordY = fltSpawnLoc_Y[intIndex];
	float coordZ = fltSpawnLoc_Z[intIndex];
	
	// LOG("city_raid", "continueSpawns: intIndex is " + intIndex + " and location is " + coordX + " " + coordY + " " + coordZ);
	
	location locSelf = getLocation (self);
	string strPlanet = locSelf.area;
	location locSpawnLocation= new location (coordX, coordY, coordZ, strPlanet, null);
	
	if ( locSpawnLocation != null )
	{
		int intSpawnChoice = rand(0, (strSpawns.length-1));
		//LOG("city_raid", "Spawning a " + strSpawns[intSpawnChoice]);
		obj_id objMob = create.object(strSpawns[intSpawnChoice], locSpawnLocation);
		if ( isIdValid(objMob) )
		{
			attachScript(objMob, "city.bestine.city_raid_mob");	
			setObjVar(objMob, "objRaidSpawner", self);
		}
	}
	
	intIndex = intIndex + 1;	
	dctScriptVars.put("intIndex", intIndex);
	int intWaveSize = dctScriptVars.getInt("intWaveSize");
	//LOG("city_raid", "intIndex is now "+ intIndex +" and length is "+ intWaveSize);
	if(intIndex < intWaveSize)
	{		
		messageTo(self, "continueSpawns", null, SPAWN_DELAY, false);			
	}	
	return SCRIPT_CONTINUE;
}

messageHandler elementDestroyed()
{
	deltadictionary dctScriptVars = self.getScriptVars();	
	int intWaveSize = dctScriptVars.getInt("intWaveSize");
	int intNumKilled = dctScriptVars.getInt("intNumKilled");
	//LOG("city_raid", "ELEMENT DESTROUED");
	//LOG("city_raid", "intWaveSize is "+intWaveSize);
	
	intNumKilled = intNumKilled + 1;
	//LOG("city_raid", "intKilled is "+intNumKilled);
	if(intNumKilled >= intWaveSize)
	{
		resetWave(self);	
	}
	else
	{
		dctScriptVars.put("intNumKilled", intNumKilled);
	}
	return SCRIPT_CONTINUE;
}

void resetWave(obj_id objRaidSpawner)
{
	deltadictionary dctScriptVars = objRaidSpawner.getScriptVars();
	
	dctScriptVars.put("intIndex", 0);
	dctScriptVars.put("intNumKilled", 0);
	
	int intNumWaves = dctScriptVars.getInt("intNumWaves");
	
	int intWave = dctScriptVars.getInt("intWave");

	intWave = intWave + 1;
	// LOG("city_raid", "Intwave is "+ intWave +" and intNumWaves is "+ intNumWaves);
	if(intWave > intNumWaves)
	{	
		// Current attack is over...
		// Time to set the delay for the next raid.
		if ( hasObjVar(objRaidSpawner, "raidAlreadyStarted") )
			removeObjVar(objRaidSpawner, "raidAlreadyStarted");
			
		int intMinRecycleTime = dctScriptVars.getInt("intMinRecycleTime");	
		int intMaxRecycleTime = dctScriptVars.getInt("intMaxRecycleTime");
		
		dctScriptVars.put("intWave", 1);
		messageTo(objRaidSpawner, "startRaid", null, rand(intMinRecycleTime, intMaxRecycleTime), true);	
	}
	else
	{
		int intMinWaveDelay =dctScriptVars.getInt("intMinWaveDelay");	
		int intMaxWaveDelay = dctScriptVars.getInt("intMaxWaveDelay"); 
	
		dctScriptVars.put("intWave", intWave);
		// do another wave
		messageTo(objRaidSpawner, "spawnWave", null, rand(intMinWaveDelay, intMaxWaveDelay), false);			
	}
}


trigger OnHearSpeech(obj_id speaker, string text)
{
	// If the speaker is not in godmode, go no further!
	if ( !isGod(speaker))
 		return SCRIPT_CONTINUE;
 	
 	if ( hasObjVar(speaker, "bestine.raidTesting") )
 	{
 		int stringCheck = text.indexOf("initiate_raid");
 		if ( stringCheck > -1 )
 		{
 			messageTo(self, "startRaid", null, 2, false);
 			return SCRIPT_OVERRIDE;
 		}
 	}
	
	return SCRIPT_CONTINUE;
}