include library.create;
include library.ai_lib;
include library.utils;
include library.planetary_map;

trigger OnInitialize()
{
	deltadictionary dctScriptVars = self.getScriptVars();
	dctScriptVars.put("numCapitolChecks", 1);
	messageTo(self, "checkForCapitolBuilding", null, 60, false);
	return SCRIPT_CONTINUE;
}

messageHandler checkForCapitolBuilding()
{
	location here = getLocation(self);
	
	// The politician event master object is created by the capitol building.
	deltadictionary dctScriptVars = self.getScriptVars();
	int numCapitolChecks = dctScriptVars.getInt("numCapitolChecks");
	
	map_location[] allRegisteredCapitols = getPlanetaryMapLocations("capitol", "");
	if ( allRegisteredCapitols != null &&  allRegisteredCapitols.length != 0)
	{
		obj_id tatooinCapitolObjId = null;
		for ( int m=0; m < allRegisteredCapitols.length; m++ )
		{
			map_location tatooinCapitol = allRegisteredCapitols[m];
			string capitolNameCodeString = tatooinCapitol.getLocationName();
			string_id capitolNameStringId = utils.unpackString(capitolNameCodeString);
			string capitolName = getString(capitolNameStringId);
			if ( capitolName != null && capitolName.equals("Bestine") )
			{
				tatooinCapitolObjId = tatooinCapitol.getLocationId();
			}
		}
		
		if ( !isIdValid(tatooinCapitolObjId) )
		{
			// only check for up to 30 minutes
			if ( numCapitolChecks <= 30)
			{
				numCapitolChecks = numCapitolChecks + 1;
				dctScriptVars.put("numCapitolChecks", numCapitolChecks);
				messageTo(self, "checkForCapitolBuilding", null, 60, false);
				return SCRIPT_CONTINUE;
			}
			else
			{
				LOG("DESIGNER_FATAL", "BESTINE POLITICIAN EVENT: Could not find registered capitol building from here: " + here);
				return SCRIPT_CONTINUE;
			}
		}
		else
		{
			dctScriptVars.put("tatooinCapitolObjId", tatooinCapitolObjId);
			spawnNpc(self);
		}
	}
	else
	{
		// check for up to 30 minutes
		if ( numCapitolChecks <= 30)
		{
			numCapitolChecks = numCapitolChecks + 1;
			dctScriptVars.put("numCapitolChecks", numCapitolChecks);
			messageTo(self, "checkForCapitolBuilding", null, 60, false);
			return SCRIPT_CONTINUE;
		}
		else
		{
			LOG("DESIGNER_FATAL", "BESTINE POLITICIAN EVENT: Couldn't find a valid map_location for a registered capitol after "+numCapitolChecks+" capitolChecks from here: " + here);
		}
	}
	
	return SCRIPT_CONTINUE;
}

void spawnNpc(obj_id self)
{
	string spawn = getStringObjVar (self, "spawns");
	location here = getLocation(self);
	if ( spawn.equals("hutt_informant_quest") )
	{
		here = new location (-1120.21f, 12.0f, -3639.71f, "tatooine", null);
	}
	
	obj_id npc = create.staticObject(spawn, here);
	setInvulnerable(npc, true);
	setCreatureStatic (npc, true);
	ai_lib.setDefaultCalmBehavior( npc, ai_lib.BEHAVIOR_SENTINEL );
	
	deltadictionary dctScriptVars = self.getScriptVars();
	obj_id tatooinCapitolObjId = dctScriptVars.getObjId("tatooinCapitolObjId");
	setObjVar(npc, "bestine.tatooineCapitolObjId", tatooinCapitolObjId);
	attachScript(npc, "city.bestine.politician_event_npc");
	
	if (hasObjVar (self, "quest_script"))
	{
		string script = getStringObjVar (self, "quest_script");
		attachScript (npc, script);
	}
	
	if (hasObjVar (self, "quest_table"))
	{
		string table = getStringObjVar (self, "quest_table");
		setObjVar (npc, "quest_table", table);
	}	
	
	if (hasObjVar (self, "npc_name"))
	{
		string name = getStringObjVar (self, "npc_name");
		
		if (name != null)
		{
			if (name != "")
			{
				setName (npc, name);
			}
		}
	}
	return;
}