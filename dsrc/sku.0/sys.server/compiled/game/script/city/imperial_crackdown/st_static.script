include library.ai_lib;
include library.chat;
include library.factions;
include library.prose;
include library.utils;


/*** CONSTANTS ***/

const string VOLUME_NAME = "perception";
const string STRING_FILE = "conversation/crackdown_st_static";

const string_id REBEL_BREACH  = new string_id(STRING_FILE, "rebel_breach");
const string_id FOLLOW_START  = new string_id(STRING_FILE, "follow_start");
const string_id FOLLOW_LOST   = new string_id(STRING_FILE, "follow_lost");
const string_id FOLLOW_GIVEUP = new string_id(STRING_FILE, "follow_giveup");
const string_id SALUTE		  = new string_id(STRING_FILE, "salute");
const string_id SALUTE_NAME	  = new string_id(STRING_FILE, "salute_name");


/*** TRIGGER EVENTS ***/

trigger OnAttach() {

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	createTriggerVolume(VOLUME_NAME, 10.0f, true);

	return SCRIPT_CONTINUE;
}

/* trigger OnHearSpeech(obj_id player, string text) {

	dictionary params = new dictionary();

	string playerName = getName(player);

	if(text == "test_rebel") {

		utils.setScriptVar(self, "event", true);

		params.put("playerName", playerName);
		messageTo(self, "rebelBreach", params, 10, false);

		return SCRIPT_CONTINUE;

	} else if(text == "test_follow") {

		utils.setScriptVar(self, "event", true);

		params.put("player", player);
		messageTo(self, "playerFollow", params, 2, false);

		return SCRIPT_CONTINUE;

	} else if(text == "test_bark") {

		messageTo(self, "playerBark", null, 1, false);

		return SCRIPT_CONTINUE;

	} else if(text == "test_loiter") {

		utils.setScriptVar(self, "event", true);

		params.put("player", player);
		messageTo(self, "playerLoiter", params, 10, false);

		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
} */

trigger OnTriggerVolumeEntered(string volumeName, obj_id player) {

	// If the player breaches our harassment volume
	if(volumeName == VOLUME_NAME) {

		// So long as there is not already a harassment event going on
		if(!utils.hasScriptVar(self, "event")) {

			// Make sure the breacher is a player, and make sure I'm not in combat
			if(isPlayer(player) && !ai_lib.isInCombat(self)) {

				dictionary params = new dictionary();

				int lotto;

				string playerFaction = factions.getFaction(player);

				if(playerFaction == null || playerFaction == "") {

					playerFaction = "neutral";

				}

				// If the player is an Imperial, let him or her pass, we don't care
				if(playerFaction.equals(factions.FACTION_IMPERIAL)) {

					// debugSpeakMsg(self, "You are an Imperial");

					if(factions.pvpGetType(player) == factions.PVPTYPE_DECLARED) {

						//debugSpeakMsg(self, "You are overt");

						int rank = pvpGetCurrentGcwRank(player);

						if(rank > 6) {

							utils.setScriptVar(self, "event", true);

							params.put("player", player);
							params.put("rank", rank);
							messageTo(self, "officerBreach", params, 0, false);

							return SCRIPT_CONTINUE;
						}

					} else {

						//debugSpeakMsg(self, "You are covert");
					}

					return SCRIPT_CONTINUE;
				}

				// If the player is a rebel...
				if(playerFaction.equals(factions.FACTION_REBEL)) {

					lotto = rand(1, 100);

					// debugSpeakMsg(self, "Your roll is " + lotto + ", you rebel scum");

					// 5% chance to perform special rebel harassment
					if(lotto <= 5) {

						// Get the name of the player
						string playerName = getName(player);

						// Note that an event is occurring
						utils.setScriptVar(self, "event", true);

						// Start rebel harassment
						params.put("playerName", playerName);
						messageTo(self, "rebelBreach", params, 10, false);

						return SCRIPT_CONTINUE;
					}

					return SCRIPT_CONTINUE;

				// If the player is not rebel, do general harassment
				} else {

					lotto = rand(1, 1000);

					// debugSpeakMsg(self, "Your roll is " + lotto);

					// 0.5% chance to perform persuit harassment
					if(lotto <= 5) {

						// Note that an event is occurring
						utils.setScriptVar(self, "event", true);

						// Start the persuit harassment
						params.put("player", player);
						messageTo(self, "playerFollow", params, 2, false);

						return SCRIPT_CONTINUE;

					// 2% chance to perform barking harassment
					} else if(lotto <= 20) {

						// Start barking
						params.put("player", player);
						messageTo(self, "playerBark", params, 1, false);

						return SCRIPT_CONTINUE;

					// 10% chance to check for loiterers
					} else if(lotto <= 100) {

						// Note that an event is occurring
						utils.setScriptVar(self, "event", true);

						// Start the loiter check
						params.put("player", player);
						messageTo(self, "playerLoiter", params, 10, false);

						return SCRIPT_CONTINUE;
					}

					return SCRIPT_CONTINUE;
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

/* trigger OnTriggerVolumeExited(string volumeName, obj_id player) {

	if(volumeName == VOLUME_NAME) {

		// debugSpeakMsg(self, "You have left my personal space");
	}

	return SCRIPT_CONTINUE;
} */

trigger OnFollowTargetLost(obj_id oldTarget) {

	string selfName = getName(self);
	prose_package pp = prose.getPackage(FOLLOW_LOST, selfName);

	location homeLoc = getHomeLocation(self);

	removeObjVar(self, "ai.persistantFollowing");

	if(!ai_lib.isInCombat(self)) {

		chat.publicChat(self, null, null, null, pp);

		addLocationTarget("home", homeLoc, 1.5f);
		setMovementWalk(self);
		pathTo(self, homeLoc);
	}

	return SCRIPT_CONTINUE;
}

trigger OnFollowPathNotFound(obj_id target) {

	string selfName = getName(self);
	prose_package pp = prose.getPackage(FOLLOW_LOST, selfName);

	location homeLoc = getHomeLocation(self);

	removeObjVar(self, "ai.persistantFollowing");

	if(!ai_lib.isInCombat(self)) {

		chat.publicChat(self, null, null, null, pp);

		addLocationTarget("home", homeLoc, 1.5f);
		setMovementWalk(self);
		pathTo(self, homeLoc);
	}

	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{
	pathTo(self, getHomeLocation(self));

	dictionary params = new dictionary();

	params.put("oldLocation", getLocation(self));
	messageTo(self, "amIStuck", params, 20, false);

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string loc)
{
	// When arrived back at home location, note the event as complete
	utils.removeScriptVar(self, "event");

	return SCRIPT_CONTINUE;
}

trigger OnDestroy() {

	// If I was stuck and had to destroy myself, this will tell my master spawner that I was destroyed
	// Travis H. "borrowed" this portion of script from Todd B. so I am using this as well to notify the spawner

	obj_id mom = getObjIdObjVar(self, "mom");

	if(!isIdValid(mom) || mom == null) {

		return SCRIPT_OVERRIDE;
	}

	int spawnNum = getIntObjVar(self, "spawn_number");

	if(spawnNum == 0) {

		return SCRIPT_OVERRIDE;
	}

	int respawnTime = getIntObjVar(self, "respawn_time");

	if(respawnTime == 0) {

		respawnTime = 300;
	}

	dictionary info = new dictionary();
	info.put("spawnNumber", spawnNum);
	info.put("spawnMob", self);

	messageTo(mom, "tellingMomIDied", info, respawnTime, false);

	return SCRIPT_CONTINUE;
}

/*** MESSAGE HANDLERS ***/

messageHandler rebelBreach() {

	string playerName = params.getString("playerName");
	prose_package pp = prose.getPackage(REBEL_BREACH, playerName);

	// If I am not in combat
	if(!ai_lib.isInCombat(self)) {

		// Harass the rebel
		chat.publicChat(self, null, chat.CHAT_COMMAND, null, pp);
	}

	// Note the event as complete
	utils.removeScriptVar(self, "event");

	return SCRIPT_CONTINUE;
}

messageHandler playerFollow() {

	string selfName = getName(self);
	prose_package pp = prose.getPackage(FOLLOW_START, selfName);


	// If I am not in combat
	if(!ai_lib.isInCombat(self)) {

		// Notify my commanding officer
		chat.publicChat(self, null, null, null, pp);

		obj_id player = params.getObjId("player");

		// If the player is still valid
		if(isIdValid(player)) {

			// Start following the player
			setObjVar(self, "ai.persistantFollowing", player);
			setMovementRun(self);
			follow(self, player, 8f, 10f );

			// Stop following in 30 seconds
			messageTo(self, "stopPersuit", null, 30, false);
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler stopPersuit() {

	string selfName = getName(self);
	prose_package pp = prose.getPackage(FOLLOW_GIVEUP, selfName);

	// Remember where my home location is
	location homeLoc = getHomeLocation(self);

	// Stop the following behavior
	removeObjVar(self, "ai.persistantFollowing");

	// I won't retreat from combat!
	if(!ai_lib.isInCombat(self)) {

		// Notify my commanding officer
		chat.publicChat(self, null, null, null, pp);

		// Go home
		setMovementWalk(self);
		addLocationTarget("home", homeLoc, 1.5f);
		pathTo(self, homeLoc);
	}

	return SCRIPT_CONTINUE;
}

messageHandler amIStuck() {

	location oldLocation = params.getLocation("oldLocation");

	// If I haven't yet moved from the place where I was last blocked or lost
	if(oldLocation == getLocation(self)) {

		// Destroy myself
		destroyObject(self);
	}

	return SCRIPT_CONTINUE;
}

messageHandler playerBark() {

	// Get the ID of the player I'm yelling at
	obj_id player = params.getObjId("player");

	// Pick a random number for string to bark
	int randStr = rand(1, 3);

	string_id barkString = new string_id(STRING_FILE, "bark_s" + randStr);

	// If I'm not in combat
	if(!ai_lib.isInCombat(self)) {

		// Harass passers-by
		faceTo(self, player);
		chat.chat(self, barkString);
	}

	return SCRIPT_CONTINUE;
}

messageHandler playerLoiter() {

	// Get the ID of the player I'm checking for
	obj_id player = params.getObjId("player");

	// Get all of the objects in my trigger volume
	obj_id[] nearby = getTriggerVolumeContents(self, VOLUME_NAME);

	// Note the even as complete
	utils.removeScriptVar(self, "event");

	// If the player I'm checking on is still valid
	if(isIdValid(player)) {

		// Go through all the objects in the trigger volume
		for(int i=0; i < nearby.length; i++) {

			// If one of the objects is my player
			if(nearby[i] == player) {

				int randStr = rand(1, 2);

				string_id warnString = new string_id(STRING_FILE, "loiter_s" + randStr);

				// So long as I'm not in combat...
				if(!ai_lib.isInCombat(self)) {

					// Fuss at him or her for loitering
					faceTo(self, player);
					chat.chat(self, warnString);

					int randAnim = rand(0, 2);
					if(randAnim == 0) {

						doAnimationAction(self, "point_left");

					} else if(randAnim == 1) {

						doAnimationAction(self, "wave_on_directing");
					}

					return SCRIPT_CONTINUE;
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler officerBreach() {

	obj_id player = params.getObjId("player");
	int rank = params.getInt("rank");
	string faction = factions.getFaction(player);
	int lastSaluted = utils.getIntScriptVar(player, "saluted");

	//debugSpeakMsg(self, "Your rank is: " + rank);

	if((getGameTime() - lastSaluted) < 3600) {

		utils.removeScriptVar(self, "event");
		return SCRIPT_CONTINUE;

	} else {

		utils.setScriptVar(player, "saluted", getGameTime());
	}

	faceTo(self, player);
	doAnimationAction(self, "salute2");

	string playerName = getName(player);
	prose_package pp = new prose_package();

	java.util.StringTokenizer st = new java.util.StringTokenizer(playerName, " ");
	if(st.countTokens() == 2) {

		string firstName = st.nextToken();
		string lastName = st.nextToken();

		pp = prose.getPackage(SALUTE_NAME, factions.getRankNameStringId(rank, faction), lastName);

	} else {

		pp = prose.getPackage(SALUTE, factions.getRankNameStringId(rank, faction));
	}

	chat.publicChat(self, null, null, null, pp);

	messageTo(self, "removeEvent", null, 10, true);

	return SCRIPT_CONTINUE;
}

messageHandler removeEvent() {

	utils.removeScriptVar(self, "event");

	return SCRIPT_CONTINUE;
}