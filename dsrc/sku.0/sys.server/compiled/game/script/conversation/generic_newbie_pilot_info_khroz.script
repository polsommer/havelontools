// ======================================================================
//
// generic_newbie_pilot_info_khroz.script
// Copyright 2003, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.21 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.features;
include library.skill;
include library.space_quest;
include library.space_skill;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/generic_newbie_pilot_info_khroz";

// ======================================================================
// Script Conditions
// ======================================================================

boolean generic_newbie_pilot_info_khroz_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_remembersPlayer (obj_id player, obj_id npc)
{
	return ( utils.hasScriptVar( player, "metNewbiePilot" ));
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_isImperialPilot (obj_id player, obj_id npc)
{
	return ( hasSkill( player, "pilot_imperial_navy_novice" ));
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_isRebelPilot (obj_id player, obj_id npc)
{
	return ( hasSkill( player, "pilot_rebel_navy_novice" ));
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_isPrivateerPilot (obj_id player, obj_id npc)
{
	return hasSkill( player, "pilot_neutral_novice" );
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_hasSpaceExpansion (obj_id player, obj_id npc)
{
	return ( features.isSpaceEdition( player ) );
}

// ----------------------------------------------------------------------

boolean generic_newbie_pilot_info_khroz_condition_hasSpaceShip (obj_id player, obj_id npc)
{
	return ( space_quest.hasShip( player ) );
}

// ======================================================================
// Script Actions
// ======================================================================

void generic_newbie_pilot_info_khroz_action_rememberPlayer (obj_id player, obj_id npc)
{
	utils.setScriptVar( player, "metNewbiePilot", true );
}

// ----------------------------------------------------------------------

void generic_newbie_pilot_info_khroz_action_grantQuestOne (obj_id player, obj_id npc)
{
	space_quest.grantQuest ( player, "delivery", "tatooine_newbie_1");
	space_quest.grantNewbieShip( player, "rebel");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int generic_newbie_pilot_info_khroz_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] Generic Greeting. First time meeting player.
	//-- NPC: I don't have time for you, citizen! See my man. He can help you. And if he can't... get out of here!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Okay. Good-bye.
	if (response == "s_61485a8a")
	{
		//-- [NOTE] 
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "cough_polite");

			//-- NPC: Yes. Of course.
			string_id message = new string_id (c_stringFile, "s_dba34f4");
			removeObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What are you doing here?
	if (response == "s_b26194cb")
	{
		//-- [NOTE] 
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "check_wrist_device");

			//-- NPC: Waiting. What business is it of yours?
			string_id message = new string_id (c_stringFile, "s_788a4dba");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I just want to know.
			boolean hasResponse0 = false;
			if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm waiting, too.
			boolean hasResponse1 = false;
			if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_b78c4998");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_89cbe37c");

				setObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int generic_newbie_pilot_info_khroz_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Waiting. What business is it of yours?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I just want to know.
	if (response == "s_b78c4998")
	{
		//-- [NOTE] 
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "point_accusingly");

			//-- NPC: Now you know.
			string_id message = new string_id (c_stringFile, "s_5dc9f5db");
			removeObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm waiting, too.
	if (response == "s_89cbe37c")
	{
		//-- [NOTE] 
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "gesticulate_wildly");

			//-- NPC: Leave me alone! I'm tired of you rabble nipping at my heels every time I leave the Emperor's retreat!
			string_id message = new string_id (c_stringFile, "s_91979dc5");
			removeObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.generic_newbie_pilot_info_khroz");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setCondition( self, CONDITION_SPACE_INTERESTING );
	setName (self, "Inquisitor Khroz");

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setCondition( self, CONDITION_SPACE_INTERESTING );
	setName (self, "Inquisitor Khroz");

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);

	faceTo( self, player );
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.generic_newbie_pilot_info_khroz");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] Generic Greeting. First time meeting player.
	if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "wave_finger_warning");

		//-- NPC: I don't have time for you, citizen! See my man. He can help you. And if he can't... get out of here!
		string_id message = new string_id (c_stringFile, "s_775bc39f");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Okay. Good-bye.
		boolean hasResponse0 = false;
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: What are you doing here?
		boolean hasResponse1 = false;
		if (generic_newbie_pilot_info_khroz_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_61485a8a");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_b26194cb");

			setObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId", 1);

			npcStartConversation (player, npc, "generic_newbie_pilot_info_khroz", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "generic_newbie_pilot_info_khroz")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = getIntObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

	if (branchId == 1 && generic_newbie_pilot_info_khroz_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && generic_newbie_pilot_info_khroz_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	removeObjVar (player, "conversation.generic_newbie_pilot_info_khroz.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

