// ======================================================================
//
// imp_p3_major.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.trial;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/imp_p3_major";

// ======================================================================
// Script Conditions
// ======================================================================

boolean imp_p3_major_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void imp_p3_major_action_start_p3 (obj_id player, obj_id npc)
{
	trial.sendSequenceTrigger("trigger_p3_march");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int imp_p3_major_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We are ready to begin the assault.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Go now before they can mount a proper defense.
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (imp_p3_major_condition__defaultCondition (player, npc))
		{
			imp_p3_major_action_start_p3 (player, npc);

			//-- NPC: Troopers! Start the final push.
			string_id message = new string_id (c_stringFile, "s_8");
			utils.removeScriptVar (player, "conversation.imp_p3_major.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: We must wait for the rest of my team to prepare.
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (imp_p3_major_condition__defaultCondition (player, npc))
		{
			//-- NPC: We cannot wait for long. When the ground command sends word we will begin the assault with or without you.
			string_id message = new string_id (c_stringFile, "s_12");
			utils.removeScriptVar (player, "conversation.imp_p3_major.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.imp_p3_major");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.imp_p3_major");

	return SCRIPT_CONTINUE;
}

messageHandler start_p3()
{
	chat.chat(self, "Troopers! Begin the ground assault.");
	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (imp_p3_major_condition__defaultCondition (player, npc))
	{
		//-- NPC: We are ready to begin the assault.
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Go now before they can mount a proper defense.
		boolean hasResponse0 = false;
		if (imp_p3_major_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: We must wait for the rest of my team to prepare.
		boolean hasResponse1 = false;
		if (imp_p3_major_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_10");

			utils.setScriptVar (player, "conversation.imp_p3_major.branchId", 1);

			npcStartConversation (player, npc, "imp_p3_major", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "imp_p3_major")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.imp_p3_major.branchId");

	if (branchId == 1 && imp_p3_major_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.imp_p3_major.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

