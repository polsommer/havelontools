// ======================================================================
//
// som_kenobi_cursed_shard_sucker.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.35 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.jedi;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/som_kenobi_cursed_shard_sucker";

// ======================================================================
// Script Conditions
// ======================================================================

boolean som_kenobi_cursed_shard_sucker_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean som_kenobi_cursed_shard_sucker_condition_givingAwayCrystal (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "som_kenobi_cursed_shard_2", "givingUpShard");
}

// ----------------------------------------------------------------------

boolean som_kenobi_cursed_shard_sucker_condition_playerJedi (obj_id player, obj_id npc)
{
	return jedi.isForceSensitive (player);
}

// ======================================================================
// Script Actions
// ======================================================================

void som_kenobi_cursed_shard_sucker_action_signalGivenCrystal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "gaveAwayShard");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int som_kenobi_cursed_shard_sucker_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What you want?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm here to offer you a deal of a lifetime!
	if (response == "s_6")
	{
		doAnimationAction (player, "thumbs_up");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shake_head_no");

			//-- NPC: I have job to do. Unless it food, I not interested!
			string_id message = new string_id (c_stringFile, "s_8");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Well, it's not food, but look at this crystal! Pretty eh?
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I have job to do. Unless it food, I not interested!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Well, it's not food, but look at this crystal! Pretty eh?
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "rub_chin_thoughtful");

			//-- NPC: Sure is shiny...
			string_id message = new string_id (c_stringFile, "s_12");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I know! You offer me something nice in return and it's yours!
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Sure is shiny...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I know! You offer me something nice in return and it's yours!
	if (response == "s_14")
	{
		doAnimationAction (player, "point_forward");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shrug_shoulders");

			//-- NPC: So...what it do?
			string_id message = new string_id (c_stringFile, "s_16");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Do? It doesn't do anything...
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Do? Well, it can create food out of water, of course!
			boolean hasResponse1 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Do? It brings you great luck and fortune!
			boolean hasResponse2 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_18");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_29");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: So...what it do?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Do? It doesn't do anything...
	if (response == "s_18")
	{
		doAnimationAction (player, "rub_chin_thoughtful");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shrug_hands");

			//-- NPC: Then why I want it?
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: [Use the Force] Since it's real pretty, you will pay well for it.
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition_playerJedi (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Well, it's so pretty.
			boolean hasResponse1 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Do? Well, it can create food out of water, of course!
	if (response == "s_29")
	{
		doAnimationAction (player, "thumb_up");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			//-- NPC: Get out of here! That would be so good! Wait a minute. You show first! You think I a fool?!
			string_id message = new string_id (c_stringFile, "s_31");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: [Use the Force] You are a fool and will pay well for the crystal.
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition_playerJedi (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Well, I don't think there's any water around here...
			boolean hasResponse1 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I can't. It only works during night time.
			boolean hasResponse2 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_33");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Do? It brings you great luck and fortune!
	if (response == "s_46")
	{
		doAnimationAction (player, "thumb_up");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shrug_shoulders");

			//-- NPC: I already have luck and fortune.
			string_id message = new string_id (c_stringFile, "s_48");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: [Use the Force] You could always use more fortune.
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition_playerJedi (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Well, couldn't you use some more luck and fortune?
			boolean hasResponse1 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Oh...and food. I forgot to mention it can make food of water!
			boolean hasResponse2 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_58");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Then why I want it?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: [Use the Force] Since it's real pretty, you will pay well for it.
	if (response == "s_22")
	{
		doAnimationAction (player, "wave_finger_warning");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			som_kenobi_cursed_shard_sucker_action_signalGivenCrystal (player, npc);

			//-- NPC: It is really pretty. I pay you well for it. Here, take this. Give me the shiny.
			string_id message = new string_id (c_stringFile, "s_24");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Well, it's so pretty.
	if (response == "s_26")
	{
		doAnimationAction (player, "thumb_up");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shake_head_no");

			//-- NPC: It is pretty, but not pretty enough. Now leave before I have you for food. I really hungry!
			string_id message = new string_id (c_stringFile, "s_35");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Get out of here! That would be so good! Wait a minute. You show first! You think I a fool?!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: [Use the Force] You are a fool and will pay well for the crystal.
	if (response == "s_33")
	{
		doAnimationAction (player, "wave_finger_warning");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_multiple");

			som_kenobi_cursed_shard_sucker_action_signalGivenCrystal (player, npc);

			//-- NPC: I be a fool and will give you this for the shiny. Now give it!
			string_id message = new string_id (c_stringFile, "s_36");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Well, I don't think there's any water around here...
	if (response == "s_38")
	{
		doAnimationAction (player, "shrug_hands");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "threaten");

			doAnimationAction (player, "taken_aback");

			//-- NPC: Yeah, you probably right. Wait a minute, then when I be able to use it?! Get out of here before I have you for food! I really hungry!
			string_id message = new string_id (c_stringFile, "s_40");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I can't. It only works during night time.
	if (response == "s_42")
	{
		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_multiple");

			som_kenobi_cursed_shard_sucker_action_signalGivenCrystal (player, npc);

			//-- NPC: Ohh yeah, that makes sense. Alright, you take this. I take shiny.
			string_id message = new string_id (c_stringFile, "s_44");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int som_kenobi_cursed_shard_sucker_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I already have luck and fortune.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: [Use the Force] You could always use more fortune.
	if (response == "s_50")
	{
		doAnimationAction (player, "wave_finger_warning");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			som_kenobi_cursed_shard_sucker_action_signalGivenCrystal (player, npc);

			//-- NPC: I could always use more fortune. Here, you take this. Now give shiny!
			string_id message = new string_id (c_stringFile, "s_52");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Well, couldn't you use some more luck and fortune?
	if (response == "s_54")
	{
		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "stamp_feet");

			//-- NPC: No! Now get out of here before I have you for food! I really hungry!
			string_id message = new string_id (c_stringFile, "s_56");
			utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Oh...and food. I forgot to mention it can make food of water!
	if (response == "s_58")
	{
		doAnimationAction (player, "thumb_up");

		//-- [NOTE] 
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			//-- NPC: Get out of here! That would be so good! Wait a minute. You show first! You think I a fool?!
			string_id message = new string_id (c_stringFile, "s_31");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: [Use the Force] You are a fool and will pay well for the crystal.
			boolean hasResponse0 = false;
			if (som_kenobi_cursed_shard_sucker_condition_playerJedi (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Well, I don't think there's any water around here...
			boolean hasResponse1 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I can't. It only works during night time.
			boolean hasResponse2 = false;
			if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_33");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.som_kenobi_cursed_shard_sucker");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.som_kenobi_cursed_shard_sucker");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (som_kenobi_cursed_shard_sucker_condition_givingAwayCrystal (player, npc))
	{
		doAnimationAction (npc, "nod_head_once");

		//-- NPC: What you want?
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm here to offer you a deal of a lifetime!
		boolean hasResponse0 = false;
		if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			utils.setScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId", 1);

			npcStartConversation (player, npc, "som_kenobi_cursed_shard_sucker", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (som_kenobi_cursed_shard_sucker_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "stop");

		doAnimationAction (player, "greet");

		//-- NPC: Step back or be hurt!
		string_id message = new string_id (c_stringFile, "s_60");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "som_kenobi_cursed_shard_sucker")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

	if (branchId == 1 && som_kenobi_cursed_shard_sucker_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && som_kenobi_cursed_shard_sucker_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && som_kenobi_cursed_shard_sucker_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && som_kenobi_cursed_shard_sucker_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && som_kenobi_cursed_shard_sucker_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && som_kenobi_cursed_shard_sucker_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && som_kenobi_cursed_shard_sucker_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.som_kenobi_cursed_shard_sucker.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

