// ======================================================================
//
// ep3_rodian_junk_dealer.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_rodian_junk_dealer";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_rodian_junk_dealer_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_rodian_junk_dealer_condition_check_inv (obj_id player, obj_id npc)
{
	string datatable = "datatables/npc/junk_dealer/junk_dealer.iff";
	
	string item = "";
	string itemTemplate = "";
	
	int itemLength = dataTableGetNumRows(datatable);
	
	int x = 0;
	int y = 0;
	
	obj_id inventory = utils.getInventoryContainer(player);
	
	if(isIdValid(inventory))
	{
		obj_id[] contents = utils.getContents(inventory, true);

		if(contents != null)
		{
			for(x = 0; x < contents.length; x++)
			{
				y = 0;
				if(hasObjVar(contents[x], "junkDealer.intPrice")) 
					return true;				
				
				if (!isCrafted(contents[x])) {
					itemTemplate = getTemplateName(contents[x]);
					
					while(y < itemLength) {
	
						item = dataTableGetString(datatable, y, "items");
						
						if(itemTemplate == item) {
					
						return true;
					}
					
						y++;
					}
				}	
			}
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean ep3_rodian_junk_dealer_condition_cannotSpeakWookiee (obj_id player, obj_id npc)
{
	if(hasSkill(player, "class_smuggler_phase1_novice"))
		return false;
	if(hasSkill(player, "social_language_wookiee_comprehend")) 
		return false;
	else
		return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_rodian_junk_dealer_action_start_dealing (obj_id player, obj_id npc)
{
	playClientEffectObj(npc, "clienteffect/voc_wookiee_med_4sec.cef", player, "");
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startDealing", params, 1.0f, false);
}

// ----------------------------------------------------------------------

void ep3_rodian_junk_dealer_action_vocalizeMed (obj_id player, obj_id npc)
{
	playClientEffectObj(npc, "clienteffect/voc_wookiee_med_4sec.cef", player, "");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_rodian_junk_dealer_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Welcome. Perhaps you have something on your person that you wish to sell. My company is interested in all sorts of goods that people tend to come across.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I have some things that you might be interested in.
	if (response == "s_54fab04f")
	{
		//-- [NOTE] 
		if (ep3_rodian_junk_dealer_condition__defaultCondition (player, npc))
		{
			ep3_rodian_junk_dealer_action_start_dealing (player, npc);

			//-- NPC: Alright, let me see what you are offering.
			string_id message = new string_id (c_stringFile, "s_84a67771");
			utils.removeScriptVar (player, "conversation.ep3_rodian_junk_dealer.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am sorry but I don't think I have anything you would want.
	if (response == "s_cd7a3f41")
	{
		//-- [NOTE] 
		if (ep3_rodian_junk_dealer_condition__defaultCondition (player, npc))
		{
			ep3_rodian_junk_dealer_action_vocalizeMed (player, npc);

			//-- NPC: That is too bad. Remember to come visit me in the future if you happen to come across anything I would be interested in.
			string_id message = new string_id (c_stringFile, "s_4bd9d15e");
			utils.removeScriptVar (player, "conversation.ep3_rodian_junk_dealer.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_rodian_junk_dealer");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);
	faceTo(self, player);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_rodian_junk_dealer");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_rodian_junk_dealer_condition__defaultCondition (player, npc))
	{
		ep3_rodian_junk_dealer_action_vocalizeMed (player, npc);

		//-- NPC: Welcome. Perhaps you have something on your person that you wish to sell. My company is interested in all sorts of goods that people tend to come across.
		string_id message = new string_id (c_stringFile, "s_bef51e38");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I have some things that you might be interested in.
		boolean hasResponse0 = false;
		if (ep3_rodian_junk_dealer_condition_check_inv (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I am sorry but I don't think I have anything you would want.
		boolean hasResponse1 = false;
		if (ep3_rodian_junk_dealer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_54fab04f");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_cd7a3f41");

			utils.setScriptVar (player, "conversation.ep3_rodian_junk_dealer.branchId", 1);

			npcStartConversation (player, npc, "ep3_rodian_junk_dealer", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_rodian_junk_dealer")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_rodian_junk_dealer.branchId");

	if (branchId == 1 && ep3_rodian_junk_dealer_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_rodian_junk_dealer.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

