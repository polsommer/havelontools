// ======================================================================
//
// c_tutorial_rm3.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/c_tutorial_rm3";

// ======================================================================
// Script Conditions
// ======================================================================

boolean c_tutorial_rm3_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm3_condition_playerOnQuest (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainQuestJournal = groundquests.getTaskId(questId, "explainQuestJournal");
	int explainInventory = groundquests.getTaskId(questId, "explainInventory");
	
	boolean onTask = questIsQuestActive(questId, player)&&
		!questIsTaskComplete(questId, explainQuestJournal, player)&&
		questIsTaskComplete(questId, explainInventory, player);
	
	return onTask;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm3_condition_TaskComplete (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainQuestJournal = groundquests.getTaskId(questId, "explainQuestJournal"); 
	
	boolean onTask = questIsTaskComplete(questId, explainQuestJournal, player);
	
	return onTask;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm3_condition_playerOnQuestStep02 (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainInventory = groundquests.getTaskId(questId, "explainInventory"); 
	
	boolean onTask = questIsQuestActive(questId, player)&&!questIsTaskComplete(questId, explainInventory, player);
	
	return onTask;
}

// ======================================================================
// Script Actions
// ======================================================================

void c_tutorial_rm3_action_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void c_tutorial_rm3_action_actionSendSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "explainQuestJournal");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int c_tutorial_rm3_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your quest journal provided us with some interesting information on you.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Quest Journal? I've never seen that book before
	if (response == "s_23")
	{
		doAnimationAction (player, "shake_head_no");

		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "rub_chin_thoughtful");

			//-- NPC: It was in your equipment when we rescued you. It said:  'Quest Journal, Property of %TU'. It made for some very interesting reading. In fact, it convinced certain people that our interest in you has not been misplaced. I'm certain it will be useful to you in the future.
			string_id message = new string_id (c_stringFile, "s_25");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You read my journal?
			boolean hasResponse0 = false;
			if (c_tutorial_rm3_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_27");

				utils.setScriptVar (player, "conversation.c_tutorial_rm3.branchId", 2);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				chat.chat (npc, player, pp);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What were you doing with my book?
	if (response == "s_31")
	{
		doAnimationAction (player, "point_accusingly");

		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "rub_chin_thoughtful");

			//-- NPC: We wanted to be sure we were returning it to the rightful owner. It said  'Quest Journal, Property of %TU'.  It has been very interesting reading.  In fact, it has convinced people that our interest in you has not been misplaced.  I'm certain it will be useful to you in the future.
			string_id message = new string_id (c_stringFile, "s_33");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You read my journal?
			boolean hasResponse0 = false;
			if (c_tutorial_rm3_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_35");

				utils.setScriptVar (player, "conversation.c_tutorial_rm3.branchId", 5);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				chat.chat (npc, player, pp);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm3_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It was in your equipment when we rescued you. It said:  'Quest Journal, Property of %TU'. It made for some very interesting reading. In fact, it convinced certain people that our interest in you has not been misplaced. I'm certain it will be useful to you in the future.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You read my journal?
	if (response == "s_27")
	{
		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod");

			//-- NPC: Military security, I'm sure you understand. We needed proof of your identity. Also, we were hoping to get some insight into why those pirates wanted you dead. I regret entries had to be erased for security reasons.
			string_id message = new string_id (c_stringFile, "s_29");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: And what insight do you have now?
			boolean hasResponse0 = false;
			if (c_tutorial_rm3_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_13");

				utils.setScriptVar (player, "conversation.c_tutorial_rm3.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm3_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Military security, I'm sure you understand. We needed proof of your identity. Also, we were hoping to get some insight into why those pirates wanted you dead. I regret entries had to be erased for security reasons.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: And what insight do you have now?
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			c_tutorial_rm3_action_actionSendSignal (player, npc);

			//-- NPC: Well, if you'll just move along to the next room, they have more information for you there.
			string_id message = new string_id (c_stringFile, "s_14");
			utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm3_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We wanted to be sure we were returning it to the rightful owner. It said  'Quest Journal, Property of %TU'.  It has been very interesting reading.  In fact, it has convinced people that our interest in you has not been misplaced.  I'm certain it will be useful to you in the future.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You read my journal?
	if (response == "s_35")
	{
		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod");

			//-- NPC: Military security, you know. We needed proof of your identity. Also, we were hoping to get some insight into just why those pirates would want you dead. I regret entries had to be erased.
			string_id message = new string_id (c_stringFile, "s_37");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: And what insight do you have now?
			boolean hasResponse0 = false;
			if (c_tutorial_rm3_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_16");

				utils.setScriptVar (player, "conversation.c_tutorial_rm3.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm3_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Military security, you know. We needed proof of your identity. Also, we were hoping to get some insight into just why those pirates would want you dead. I regret entries had to be erased.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: And what insight do you have now?
	if (response == "s_16")
	{
		//-- [NOTE] 
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			c_tutorial_rm3_action_actionSendSignal (player, npc);

			//-- NPC: Well, if you'll just move along to the next room, they have more information for you there.
			string_id message = new string_id (c_stringFile, "s_18");
			utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.c_tutorial_rm3");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "Major Taison");	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "Major Taison");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.c_tutorial_rm3");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (c_tutorial_rm3_condition_playerOnQuest (player, npc))
	{
		doAnimationAction (npc, "nod_head_once");

		c_tutorial_rm3_action_facePlayer (player, npc);

		//-- NPC: Your quest journal provided us with some interesting information on you.
		string_id message = new string_id (c_stringFile, "s_21");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Quest Journal? I've never seen that book before
		boolean hasResponse0 = false;
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: What were you doing with my book?
		boolean hasResponse1 = false;
		if (c_tutorial_rm3_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_23");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_31");

			utils.setScriptVar (player, "conversation.c_tutorial_rm3.branchId", 1);

			npcStartConversation (player, npc, "c_tutorial_rm3", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (c_tutorial_rm3_condition_TaskComplete (player, npc))
	{
		doAnimationAction (npc, "wave_on_dismissing");

		c_tutorial_rm3_action_facePlayer (player, npc);

		//-- NPC: Move along the corridor please.
		string_id message = new string_id (c_stringFile, "s_39");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (c_tutorial_rm3_condition_playerOnQuestStep02 (player, npc))
	{
		doAnimationAction (npc, "point_forward");

		c_tutorial_rm3_action_facePlayer (player, npc);

		//-- NPC: You need to see Lieutenant Alin in the inventory room.
		string_id message = new string_id (c_stringFile, "s_24");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "c_tutorial_rm3")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.c_tutorial_rm3.branchId");

	if (branchId == 1 && c_tutorial_rm3_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && c_tutorial_rm3_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && c_tutorial_rm3_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && c_tutorial_rm3_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && c_tutorial_rm3_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.c_tutorial_rm3.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

