// ======================================================================
//
// rebel_remembrance_day_wedge.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.badge;
include library.buff;
include library.chat;
include library.collection;
include library.conversation;
include library.create;
include library.factions;
include library.groundquests;
include library.holiday;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/rebel_remembrance_day_wedge";

// ======================================================================
// Script Conditions
// ======================================================================

boolean rebel_remembrance_day_wedge_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rebel_remembrance_day_wedge_condition_isImperialPlayer (obj_id player, obj_id npc)
{
	rebel_remembrance_day_wedge_action_faceTo(npc, player);
	return (factions.isImperial(player));
}

// ----------------------------------------------------------------------

boolean rebel_remembrance_day_wedge_condition_isNeutralPlayer (obj_id player, obj_id npc)
{
	return(!factions.isImperial(player) && !factions.isRebel(player));
}

// ======================================================================
// Script Actions
// ======================================================================

void rebel_remembrance_day_wedge_action_faceTo (obj_id player, obj_id npc)
{
	rebel_remembrance_day_wedge_action_faceTo(npc, player);
}

// ----------------------------------------------------------------------

void rebel_remembrance_day_wedge_action_spawnTroopers (obj_id player, obj_id npc)
{
	//spawn some mean enemies
	for (int i = 0; i < 3; i++)
	{
		location guardLocation = groundquests.getRandom2DLocationAroundLocation(npc, 1, 1, 5, 12);
		int mobLevel = getLevel(player);
		obj_id guard = create.object("rebel_emperorsday_ceremony_sentry", guardLocation, mobLevel);
		attachScript(guard, "event.emp_day.factional_guard_self_destruct");
		startCombat(guard, player);
	}
}

// ----------------------------------------------------------------------

void rebel_remembrance_day_wedge_action_grantFirstMission (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, holiday.EMPIREDAYQUEST_REB_COMBAT_01); 
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int rebel_remembrance_day_wedge_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: ...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Aren't you the Wedge Antilles?
	if (response == "s_8")
	{
		//-- [NOTE] 
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_once");

			rebel_remembrance_day_wedge_action_faceTo (player, npc);

			//-- NPC: Uh yes...please don't tell me you want my autograph.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Well uh...actually...
			boolean hasResponse0 = false;
			if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				utils.setScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rebel_remembrance_day_wedge_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Uh yes...please don't tell me you want my autograph.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Well uh...actually...
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "rub_chin_thoughtful");

			rebel_remembrance_day_wedge_action_faceTo (player, npc);

			//-- NPC: Hold that thought. I just received a priority message from the Chief of Intelligence.  
			string_id message = new string_id (c_stringFile, "s_12");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: ...
			boolean hasResponse0 = false;
			if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_17");

				utils.setScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rebel_remembrance_day_wedge_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hold that thought. I just received a priority message from the Chief of Intelligence.  

	//-- [RESPONSE NOTE] 
	//-- PLAYER: ...
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			rebel_remembrance_day_wedge_action_faceTo (player, npc);

			//-- NPC: Uh oh. I need someone competent immediately.
			string_id message = new string_id (c_stringFile, "s_18");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: *Clear Throat*
			boolean hasResponse0 = false;
			if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_20");

				utils.setScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rebel_remembrance_day_wedge_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Uh oh. I need someone competent immediately.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: *Clear Throat*
	if (response == "s_20")
	{
		//-- [NOTE] 
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			rebel_remembrance_day_wedge_action_faceTo (player, npc);

			//-- NPC: I suppose you might due. An Imperial Lambda shuttle has just crash landed on Yavin IV. I need you to investigate the location and recover any intelligence. Does this seem like something you can handle?
			string_id message = new string_id (c_stringFile, "s_22");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes sir!
			boolean hasResponse0 = false;
			if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_24");

				utils.setScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rebel_remembrance_day_wedge_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I suppose you might due. An Imperial Lambda shuttle has just crash landed on Yavin IV. I need you to investigate the location and recover any intelligence. Does this seem like something you can handle?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes sir!
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			rebel_remembrance_day_wedge_action_faceTo (player, npc);

			//-- NPC: Here are the coordinates.
			string_id message = new string_id (c_stringFile, "s_25");
			utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.rebel_remembrance_day_wedge");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.rebel_remembrance_day_wedge");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (rebel_remembrance_day_wedge_condition_isImperialPlayer (player, npc))
	{
		rebel_remembrance_day_wedge_action_spawnTroopers (player, npc);

		//-- NPC: Guards!!  I have an Imperial combatant at my location!
		string_id message = new string_id (c_stringFile, "s_26");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rebel_remembrance_day_wedge_condition_isNeutralPlayer (player, npc))
	{
		rebel_remembrance_day_wedge_action_faceTo (player, npc);

		//-- NPC: Hello citizen.
		string_id message = new string_id (c_stringFile, "s_27");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
	{
		rebel_remembrance_day_wedge_action_faceTo (player, npc);

		//-- NPC: ...
		string_id message = new string_id (c_stringFile, "s_7");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Aren't you the Wedge Antilles?
		boolean hasResponse0 = false;
		if (rebel_remembrance_day_wedge_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_8");

			utils.setScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId", 3);

			npcStartConversation (player, npc, "rebel_remembrance_day_wedge", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "rebel_remembrance_day_wedge")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

	if (branchId == 3 && rebel_remembrance_day_wedge_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && rebel_remembrance_day_wedge_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && rebel_remembrance_day_wedge_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && rebel_remembrance_day_wedge_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && rebel_remembrance_day_wedge_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.rebel_remembrance_day_wedge.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

