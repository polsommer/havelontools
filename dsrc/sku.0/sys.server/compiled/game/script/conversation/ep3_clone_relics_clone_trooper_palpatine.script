// ======================================================================
//
// ep3_clone_relics_clone_trooper_palpatine.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.pclib;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_clone_relics_clone_trooper_palpatine";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_clone_relics_clone_trooper_palpatine_condition_onTaskTalkEmperor (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "ep3_clone_relics_clone_trooper_mort_imperial", "talkToEmperor"));
}

// ----------------------------------------------------------------------

boolean ep3_clone_relics_clone_trooper_palpatine_condition_onTaskMorkov (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "ep3_clone_relics_clone_trooper_mort_imperial", "killMorkov"));
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_clone_relics_clone_trooper_palpatine_action_emperorDone (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "talkedToEmperor");
	setObjVar (player, "doneWithEmperor", 1);
}

// ----------------------------------------------------------------------

void ep3_clone_relics_clone_trooper_palpatine_action_deathOfPlayer (obj_id player, obj_id npc)
{
	attacker_results   attackerResults = new attacker_results();
	defender_results[] defenderResults = new defender_results[1];
	
	attackerResults.id = npc;
	attackerResults.weapon = null;
	
	defenderResults[0] = new defender_results();
	defenderResults[0].id = player;
	defenderResults[0].endPosture = getPosture(player);
	defenderResults[0].result = COMBAT_RESULT_HIT;
	
	doCombatResults("force_lightning_1_particle_level_5_medium", attackerResults, defenderResults);
			
	dictionary outparams = new dictionary ();
	outparams.put ("player", player );
	outparams.put ("npc", npc );
	messageTo ( npc, "playerKnockedOut", outparams, 3, false );
}

messageHandler playerKnockedOut ()
{
	obj_id player = params.getObjId( "player" );
	obj_id npc = params.getObjId( "npc" );
	pclib.killPlayer(player, npc, false);
	messageTo ( npc, "playerDies", params, 1, false );
	
		return SCRIPT_CONTINUE;
}

messageHandler playerDies ()
{
	obj_id player = params.getObjId( "player" );
	obj_id npc = params.getObjId( "npc" );
	pclib.coupDeGrace(player, npc, false, false);
	
		return SCRIPT_CONTINUE;
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_clone_relics_clone_trooper_palpatine_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: And so we meet %TU. I just wish it hadn't been under such... distracting circumstances.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Y..yes my Lord.
	if (response == "s_174")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: Come closer, let me see you. Yes... I understand that you don't quite grasp what it is you have come across so let me explain.
			string_id message = new string_id (c_stringFile, "s_176");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Thank you my Lord.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Come closer, let me see you. Yes... I understand that you don't quite grasp what it is you have come across so let me explain.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you my Lord.
	if (response == "s_178")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: Although this Morkov is indeed the spider in the web, the treachery reaches deep in to our glorious Empire. The information you sent us is allowing my loyal subjects to find and... remove these disturbances quickly and efficiently.
			string_id message = new string_id (c_stringFile, "s_180");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm glad I could be of service my Lord.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_182");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Although this Morkov is indeed the spider in the web, the treachery reaches deep in to our glorious Empire. The information you sent us is allowing my loyal subjects to find and... remove these disturbances quickly and efficiently.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm glad I could be of service my Lord.
	if (response == "s_182")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: So you have been %TU, so you have been. There is one more favor to the Empire I'd like to ask of you though.
			string_id message = new string_id (c_stringFile, "s_184");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Of course my Lord.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_186");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 5);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				chat.chat (npc, player, pp);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: So you have been %TU, so you have been. There is one more favor to the Empire I'd like to ask of you though.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Of course my Lord.
	if (response == "s_186")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: Morkov, I want all of the logs from his 'business' and then I never want to hear of him again. Am I making myself clear?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes my Lord, I understand.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm sorry my Lord, I'm not a killer.
			boolean hasResponse1 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_194");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Morkov, I want all of the logs from his 'business' and then I never want to hear of him again. Am I making myself clear?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes my Lord, I understand.
	if (response == "s_190")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_once");

			doAnimationAction (player, "bow5");

			ep3_clone_relics_clone_trooper_palpatine_action_emperorDone (player, npc);

			//-- NPC: Good, I am most pleased. Until we meet again %TU.
			string_id message = new string_id (c_stringFile, "s_192");
			utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, pp);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm sorry my Lord, I'm not a killer.
	if (response == "s_194")
	{
		doAnimationAction (player, "shake_head_no");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: Oh but I think you are %TU...
			string_id message = new string_id (c_stringFile, "s_196");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes my Lord, I will do as you say.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm afraid you are wrong my Lord.
			boolean hasResponse1 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_198");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_200");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 8);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				chat.chat (npc, player, pp);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh but I think you are %TU...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes my Lord, I will do as you say.
	if (response == "s_198")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_once");

			doAnimationAction (player, "bow5");

			ep3_clone_relics_clone_trooper_palpatine_action_emperorDone (player, npc);

			//-- NPC: Good, I am most pleased. Until we meet again %TU.
			string_id message = new string_id (c_stringFile, "s_192");
			utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, pp);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm afraid you are wrong my Lord.
	if (response == "s_200")
	{
		doAnimationAction (player, "shake_head_no");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			//-- NPC: You are starting to disappoint me %TU. In these times, I don't like being disappointed.
			string_id message = new string_id (c_stringFile, "s_202");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand my Lord, it will be done then.
			boolean hasResponse0 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm sorry, you will have to be in this case my Lord.
			boolean hasResponse1 = false;
			if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_204");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 9);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				chat.chat (npc, player, pp);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_clone_relics_clone_trooper_palpatine_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You are starting to disappoint me %TU. In these times, I don't like being disappointed.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand my Lord, it will be done then.
	if (response == "s_204")
	{
		doAnimationAction (player, "nod_head_once");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_once");

			doAnimationAction (player, "bow5");

			ep3_clone_relics_clone_trooper_palpatine_action_emperorDone (player, npc);

			//-- NPC: Good, I am most pleased. Until we meet again %TU.
			string_id message = new string_id (c_stringFile, "s_192");
			utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, pp);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm sorry, you will have to be in this case my Lord.
	if (response == "s_206")
	{
		doAnimationAction (player, "apologize");

		//-- [NOTE] 
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			doAnimationAction (player, "squirm");

			ep3_clone_relics_clone_trooper_palpatine_action_deathOfPlayer (player, npc);

			//-- NPC: No %TU, I don't think so...
			string_id message = new string_id (c_stringFile, "s_208");
			utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, pp);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_clone_relics_clone_trooper_palpatine");
		
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName(self, new string_id( "ep3/npc_names", "clone_relics_palpatine" ));
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName(self, new string_id( "ep3/npc_names", "clone_relics_palpatine" ));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);
	faceTo (self, player);
	
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_clone_relics_clone_trooper_palpatine");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_clone_relics_clone_trooper_palpatine_condition_onTaskMorkov (player, npc))
	{
		doAnimationAction (npc, "point_forward");

		doAnimationAction (player, "bow5");

		//-- NPC: You know what I want %TU. Now leave.
		string_id message = new string_id (c_stringFile, "s_170");
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_clone_relics_clone_trooper_palpatine_condition_onTaskTalkEmperor (player, npc))
	{
		doAnimationAction (npc, "nod_head_once");

		doAnimationAction (player, "bow5");

		//-- NPC: And so we meet %TU. I just wish it hadn't been under such... distracting circumstances.
		string_id message = new string_id (c_stringFile, "s_172");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Y..yes my Lord.
		boolean hasResponse0 = false;
		if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_174");

			utils.setScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId", 2);

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcStartConversation (player, npc, "ep3_clone_relics_clone_trooper_palpatine", null, pp, responses);
		}
		else
		{
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_clone_relics_clone_trooper_palpatine_condition__defaultCondition (player, npc))
	{
		doAnimationAction (player, "squirm");

		ep3_clone_relics_clone_trooper_palpatine_action_deathOfPlayer (player, npc);

		//-- NPC: You should have known better...
		string_id message = new string_id (c_stringFile, "s_1554");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_clone_relics_clone_trooper_palpatine")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

	if (branchId == 2 && ep3_clone_relics_clone_trooper_palpatine_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && ep3_clone_relics_clone_trooper_palpatine_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && ep3_clone_relics_clone_trooper_palpatine_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && ep3_clone_relics_clone_trooper_palpatine_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && ep3_clone_relics_clone_trooper_palpatine_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && ep3_clone_relics_clone_trooper_palpatine_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && ep3_clone_relics_clone_trooper_palpatine_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_clone_relics_clone_trooper_palpatine.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

