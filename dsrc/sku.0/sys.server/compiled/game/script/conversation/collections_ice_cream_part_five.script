// ======================================================================
//
// collections_ice_cream_part_five.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/collections_ice_cream_part_five";

// ======================================================================
// Script Conditions
// ======================================================================

boolean collections_ice_cream_part_five_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean collections_ice_cream_part_five_condition_hasActiveTask (obj_id player, obj_id npc)
{
	if(groundquests.isQuestActive(player, "chapter9_ice_cream"))
	{	
		return groundquests.isTaskActive(player, "chapter9_ice_cream", "meet_kerhi_hilak");
	}	
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void collections_ice_cream_part_five_action_signalNextTask (obj_id player, obj_id npc)
{
	modifyCollectionSlotValue(player, "col_fried_icecream_part_05", 1);
	groundquests.sendSignal(player, "meet_kerhi_hilak"); 
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int collections_ice_cream_part_five_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hello my name is Kerhi hi-Lak welcome to my humble shop.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hi Kerhi hi-Lak, I was told that you might know something about this fryer?
	if (response == "s_9")
	{
		//-- [NOTE] 
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			//-- NPC: I know a few things about those old fryers.  Mainly that they break down and they are impossible to sell.  If you are here to sell it, I am not interested.
			string_id message = new string_id (c_stringFile, "s_10");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Actually I am hoping to reverse engineer it.
			boolean hasResponse0 = false;
			if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_12");

				utils.setScriptVar (player, "conversation.collections_ice_cream_part_five.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int collections_ice_cream_part_five_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I know a few things about those old fryers.  Mainly that they break down and they are impossible to sell.  If you are here to sell it, I am not interested.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Actually I am hoping to reverse engineer it.
	if (response == "s_12")
	{
		//-- [NOTE] 
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			//-- NPC: Hah!  The first thing I would recommend changing is the Timer Mechanism.  The old models had a defective timer, probably affected by the extreme heat.  If you insulate the timer mechanism from the heat I bet it would help.
			string_id message = new string_id (c_stringFile, "s_14");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What does the Timer Mechanism do exactly?  
			boolean hasResponse0 = false;
			if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_16");

				utils.setScriptVar (player, "conversation.collections_ice_cream_part_five.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int collections_ice_cream_part_five_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hah!  The first thing I would recommend changing is the Timer Mechanism.  The old models had a defective timer, probably affected by the extreme heat.  If you insulate the timer mechanism from the heat I bet it would help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What does the Timer Mechanism do exactly?  
	if (response == "s_16")
	{
		//-- [NOTE] 
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			//-- NPC: The timer is manually set by the cook. It is usually used to avoid over cooking what ever is in the fryer.  If the timer is defective, not only will the food burn, but so will the oil.  Perhaps even the entire fryer and anything in the immediate area would also be damaged.
			string_id message = new string_id (c_stringFile, "s_18");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Some great information.  Thank you.
			boolean hasResponse0 = false;
			if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_19");

				utils.setScriptVar (player, "conversation.collections_ice_cream_part_five.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int collections_ice_cream_part_five_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The timer is manually set by the cook. It is usually used to avoid over cooking what ever is in the fryer.  If the timer is defective, not only will the food burn, but so will the oil.  Perhaps even the entire fryer and anything in the immediate area would also be damaged.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Some great information.  Thank you.
	if (response == "s_19")
	{
		//-- [NOTE] 
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			//-- NPC: You might want to speak with Tombl Blaus. He was an old fryer assembly worker. Used to work in the factory on one or two of the parts for these things.
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Where would Tombl Blaus be located exactly?
			boolean hasResponse0 = false;
			if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_24");

				utils.setScriptVar (player, "conversation.collections_ice_cream_part_five.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int collections_ice_cream_part_five_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You might want to speak with Tombl Blaus. He was an old fryer assembly worker. Used to work in the factory on one or two of the parts for these things.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Where would Tombl Blaus be located exactly?
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			collections_ice_cream_part_five_action_signalNextTask (player, npc);

			//-- NPC: Here is his location. Good luck.
			string_id message = new string_id (c_stringFile, "s_25");
			utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.collections_ice_cream_part_five");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.collections_ice_cream_part_five");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (collections_ice_cream_part_five_condition_hasActiveTask (player, npc))
	{
		//-- NPC: Hello my name is Kerhi hi-Lak welcome to my humble shop.
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Hi Kerhi hi-Lak, I was told that you might know something about this fryer?
		boolean hasResponse0 = false;
		if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_9");

			utils.setScriptVar (player, "conversation.collections_ice_cream_part_five.branchId", 1);

			npcStartConversation (player, npc, "collections_ice_cream_part_five", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (collections_ice_cream_part_five_condition__defaultCondition (player, npc))
	{
		//-- NPC: Hello my name is Kerhi Hilak welcome to my humble shop.  Feel free to look around and ask questions.
		string_id message = new string_id (c_stringFile, "s_26");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "collections_ice_cream_part_five")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

	if (branchId == 1 && collections_ice_cream_part_five_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && collections_ice_cream_part_five_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && collections_ice_cream_part_five_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && collections_ice_cream_part_five_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && collections_ice_cream_part_five_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.collections_ice_cream_part_five.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

