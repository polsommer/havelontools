// ======================================================================
//
// rancor_boss_fight_controller.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.features;
include library.groundquests;
include library.space_quest;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/rancor_boss_fight_controller";

// ======================================================================
// Script Conditions
// ======================================================================

boolean rancor_boss_fight_controller_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rancor_boss_fight_controller_condition_hasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "outbreak_undead_rancor_boss_fight");
}

// ----------------------------------------------------------------------

boolean rancor_boss_fight_controller_condition_hasGroup (obj_id player, obj_id npc)
{
	obj_id groupid = getGroupObject(player);
	if(!isValidId(groupid))
	{
		//systemMessageTestingOnly(player, "no group");
		return false;		
	}
	return true;
}

// ----------------------------------------------------------------------

boolean rancor_boss_fight_controller_condition_hasCompleted (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "outbreak_undead_rancor_boss_fight");
}

// ----------------------------------------------------------------------

boolean rancor_boss_fight_controller_condition_hasQuestAndGroup (obj_id player, obj_id npc)
{
	if(!rancor_boss_fight_controller_condition_hasGroup(player,npc))
		return false;
	if(!rancor_boss_fight_controller_condition_hasQuest(player,npc))
		return false;		
	return groundquests.isTaskActive(player, "outbreak_undead_rancor_boss_fight", "defeatUndeadRancor");
}

// ----------------------------------------------------------------------

boolean rancor_boss_fight_controller_condition_wave_event_active (obj_id player, obj_id npc)
{
	int wave = utils.getIntScriptVar(npc, "waveEventCurrentWave");
	return  wave > 0;
}

// ======================================================================
// Script Actions
// ======================================================================

void rancor_boss_fight_controller_action_giveWaypoint (obj_id player, obj_id npc)
{
	location loc = new location(-7342, 505, -7536, "dathomir");  
	obj_id wpt = createWaypointInDatapad(player, loc);
	setWaypointName(wpt, "Command Console");
	setWaypointActive(wpt, true);
}

// ----------------------------------------------------------------------

void rancor_boss_fight_controller_action_bringRancorOut (obj_id player, obj_id npc)
{
	obj_id groupid = getGroupObject(player);
	if(!isValidId(groupid))
	{
		return;		
	}
	
	dictionary webster = new dictionary();
	webster.put("player", player);
	messageTo(npc, "waveEventControllerNPCStart", webster, 0, false);
}

// ----------------------------------------------------------------------

void rancor_boss_fight_controller_action_getQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "outbreak_undead_rancor_boss_fight"); 
}

// ----------------------------------------------------------------------

void rancor_boss_fight_controller_action_removeQuest (obj_id player, obj_id npc)
{
	groundquests.clearQuest(player, "outbreak_undead_rancor_boss_fight"); 
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int rancor_boss_fight_controller_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Group needed for containment cell event.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Log off
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			//-- NPC: Remember, safety is free so use it generously.
			string_id message = new string_id (c_stringFile, "s_177");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Quest needed for containment cell event.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Recieve Quest
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			rancor_boss_fight_controller_action_getQuest (player, npc);

			//-- NPC: Quest Granted
			string_id message = new string_id (c_stringFile, "s_19");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Remove Completed Quest
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			//-- NPC: Are you sure?
			string_id message = new string_id (c_stringFile, "s_27");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes
			boolean hasResponse0 = false;
			if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_28");

				utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Are you sure?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes
	if (response == "s_28")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			rancor_boss_fight_controller_action_removeQuest (player, npc);

			//-- NPC: Quest cleared. You can now receive the group quest again.
			string_id message = new string_id (c_stringFile, "s_29");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Containment cell occupied. Check back later.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Log off
	if (response == "s_171")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			//-- NPC: Remember, safety is free so use it generously.
			string_id message = new string_id (c_stringFile, "s_172");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Containment cell security alert!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Obtain Security Report
	if (response == "s_101")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "scream");

			//-- NPC: Containment cell door malfunction. Cell breach. Facility Security needed.
			string_id message = new string_id (c_stringFile, "s_153");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Report in as Security Detail.
			boolean hasResponse0 = false;
			if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_173");

				utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Containment cell door malfunction. Cell breach. Facility Security needed.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Report in as Security Detail.
	if (response == "s_173")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			rancor_boss_fight_controller_action_bringRancorOut (player, npc);

			//-- NPC: Acknowledged.
			string_id message = new string_id (c_stringFile, "s_174");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rancor_boss_fight_controller_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We're sorry. The command you were looking for was not found. Please try again later.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Log off
	if (response == "s_31")
	{
		//-- [NOTE] 
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			//-- NPC: Remember, safety is free so use it generously.
			string_id message = new string_id (c_stringFile, "s_33");
			utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

messageHandler handleQuestFlavorObjectCleanup()
{
	if((params == null) || (params.isEmpty()))
	{
		CustomerServiceLog("outbreak_themepark", "rancor_boss_fight_controller.handleQuestFlavorObjectCleanup() Params invalid.");
		return SCRIPT_CONTINUE;
	}
	if(!params.containsKey("player"))
	{
		CustomerServiceLog("outbreak_themepark", "rancor_boss_fight_controller.handleQuestFlavorObjectCleanup() player param not found.");
		return SCRIPT_CONTINUE;
	}
	if(!params.containsKey("taskCompleted"))
	{
		CustomerServiceLog("outbreak_themepark", "rancor_boss_fight_controller.handleQuestFlavorObjectCleanup() taskCompleted param not found.");
		return SCRIPT_CONTINUE;
	}
	
	obj_id player = params.getObjId("player");
	if(!isValidId(player) || !exists(player))
	{
		CustomerServiceLog("outbreak_themepark", "rancor_boss_fight_controller.handleQuestFlavorObjectCleanup() player OID invalid.");
		return SCRIPT_CONTINUE;
	}

	boolean taskCompleted = params.getBoolean("taskCompleted");
	if(!taskCompleted)
	{
		return SCRIPT_CONTINUE;
	}

	obj_id[] groupMembersInRange = groundquests.getGroupMembersInRange(self, player);
	if(groupMembersInRange == null || groupMembersInRange.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "rancor_boss_fight_controller.handleQuestFlavorObjectCleanup() groupMembersInRange was NULL. Still rewarding player:"+player);	
		if(!hasCompletedCollectionSlot(player, "undead_rancor_killed"))
		{
			modifyCollectionSlotValue(player, "undead_rancor_killed", 1);
		}
		return SCRIPT_CONTINUE;
	}

	for(int i = 0; i < groupMembersInRange.length; i++)
	{			
		if(!hasCompletedCollectionSlot(groupMembersInRange[i], "undead_rancor_killed"))
		{
			modifyCollectionSlotValue(groupMembersInRange[i], "undead_rancor_killed", 1);
		}
	}
	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (!rancor_boss_fight_controller_condition_hasGroup (player, npc))
	{
		//-- NPC: Group needed for containment cell event.
		string_id message = new string_id (c_stringFile, "s_175");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Log off
		boolean hasResponse0 = false;
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_176");

			utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 1);

			npcStartConversation (player, npc, "rancor_boss_fight_controller", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!rancor_boss_fight_controller_condition_hasQuest (player, npc))
	{
		//-- NPC: Quest needed for containment cell event.
		string_id message = new string_id (c_stringFile, "s_15");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Recieve Quest
		boolean hasResponse0 = false;
		if (!rancor_boss_fight_controller_condition_hasCompleted (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Remove Completed Quest
		boolean hasResponse1 = false;
		if (rancor_boss_fight_controller_condition_hasCompleted (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_17");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_26");

			utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 3);

			npcStartConversation (player, npc, "rancor_boss_fight_controller", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rancor_boss_fight_controller_condition_wave_event_active (player, npc))
	{
		//-- NPC: Containment cell occupied. Check back later.
		string_id message = new string_id (c_stringFile, "s_165");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Log off
		boolean hasResponse0 = false;
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_171");

			utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 7);

			npcStartConversation (player, npc, "rancor_boss_fight_controller", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rancor_boss_fight_controller_condition_hasQuestAndGroup (player, npc))
	{
		//-- NPC: Containment cell security alert!
		string_id message = new string_id (c_stringFile, "s_100");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Obtain Security Report
		boolean hasResponse0 = false;
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_101");

			utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 9);

			npcStartConversation (player, npc, "rancor_boss_fight_controller", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
	{
		//-- NPC: We're sorry. The command you were looking for was not found. Please try again later.
		string_id message = new string_id (c_stringFile, "s_25");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Log off
		boolean hasResponse0 = false;
		if (rancor_boss_fight_controller_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_31");

			utils.setScriptVar (player, "conversation.rancor_boss_fight_controller.branchId", 12);

			npcStartConversation (player, npc, "rancor_boss_fight_controller", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "rancor_boss_fight_controller")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

	if (branchId == 1 && rancor_boss_fight_controller_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && rancor_boss_fight_controller_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && rancor_boss_fight_controller_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && rancor_boss_fight_controller_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && rancor_boss_fight_controller_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && rancor_boss_fight_controller_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && rancor_boss_fight_controller_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.rancor_boss_fight_controller.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

