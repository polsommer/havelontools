// ======================================================================
//
// fence.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/fence";

// ======================================================================
// Script Conditions
// ======================================================================

boolean fence_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean fence_condition_hasContrabandToGive (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	string questName = getStringObjVar (npc, "quest_name");
	string taskName = getStringObjVar (npc, "task_name");
	string dataTableItemToGive = "ITEM_TO_GIVE";
	int questCrc = groundquests.getQuestIdFromString (questName);
	int taskId = groundquests.getTaskId (questCrc, taskName);

	if (!questIsTaskActive(questCrc, taskId, player))
	{
		// Need to check for alternate quest here
		if (hasObjVar(npc, "alternate_quest_name"))
		{
			questName = getStringObjVar (npc, "alternate_quest_name");
		}
		else
		{
			return false;
		}
		
		questCrc = groundquests.getQuestIdFromString (questName);
		
		if (!questIsTaskActive(questCrc, taskId, player))
		{
			return false;
		}	
	}
	
	string itemToGive = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableItemToGive);
	
	obj_id[] contents = getInventoryAndEquipment(player);
	if (contents != null && contents.length > 0)
	{
		for(int i = 0;i < contents.length;i++)
		{
			if (static_item.isStaticItem(contents[i]))
			{
				string itemName = getStaticItemName(contents[i]);
				if (itemName == itemToGive)
				{
					if(!ai_lib.isInCombat(player))
					{
						dictionary webster = new dictionary();

						webster.put ("questName", questName);
						webster.put ("taskName", taskName);
						webster.put ("itemName", itemName);

						messageTo (player, "itemGivenToNpc", webster, 0, false);
						return true;
					}
				}	
			}
		}
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fence_condition_inCombat (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	if (ai_lib.isInCombat(player))
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean fence_condition_pvpTimer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	string questName = getStringObjVar (npc, "quest_name");
	string taskName = getStringObjVar (npc, "task_name");
	string dataTableItemToGive = "ITEM_TO_GIVE";
	int questCrc = groundquests.getQuestIdFromString (questName);
	int taskId = groundquests.getTaskId (questCrc, taskName);

	if (!questIsTaskActive(questCrc, taskId, player))
	{
		// Need to check for alternate quest here
		if (hasObjVar(npc, "alternate_quest_name"))
		{
			questName = getStringObjVar (npc, "alternate_quest_name");
		}
		else
		{
			return false;
		}
		
		questCrc = groundquests.getQuestIdFromString (questName);
		
		if (!questIsTaskActive(questCrc, taskId, player))
		{
			return false;
		}	
	}
	
	string itemToGive = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableItemToGive);
	
	obj_id[] contents = getInventoryAndEquipment(player);
	if (contents != null && contents.length > 0)
	{
		for(int i = 0;i < contents.length;i++)
		{
			if (static_item.isStaticItem(contents[i]))
			{
				string itemName = getStaticItemName(contents[i]);
				if (itemName == itemToGive)
				{
					if (groundquests.isTimeRemainingBeforeCompletion(player, questCrc, taskId))
					{
						return true;
					}	
				}	
			}
		}
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fence_condition_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.fence");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.fence");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (fence_condition_pvpTimer (player, npc))
	{
		//-- NPC: I cannot accept delivery yet! You need to wait until I am sure you haven't been followed.
		string_id message = new string_id (c_stringFile, "s_9");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fence_condition_hasContrabandToGive (player, npc))
	{
		//-- NPC: Thanks! I have been expecting this. Business is good, tell our friend I am pleased. 
		string_id message = new string_id (c_stringFile, "s_5");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fence_condition_inCombat (player, npc))
	{
		//-- NPC: Come back to me when things aren't so hot.  I see you have a fight on your hands at the moment.
		string_id message = new string_id (c_stringFile, "s_7");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fence_condition_facePlayer (player, npc))
	{
		//-- NPC: If you don't mind, I am trying to keep a low profile.  Now if you had something I was interested in, it might be a different story.
		string_id message = new string_id (c_stringFile, "s_10");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "fence")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.fence.branchId");

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.fence.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

