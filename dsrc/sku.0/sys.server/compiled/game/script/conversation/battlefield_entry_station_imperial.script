// ======================================================================
//
// battlefield_entry_station_imperial.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.space_battlefield;
include library.space_combat;
include library.space_transition;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/battlefield_entry_station_imperial";

// ======================================================================
// Script Conditions
// ======================================================================

boolean battlefield_entry_station_imperial_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isPlayerRebel (obj_id player, obj_id npc)
{
	return space_battlefield.isInRebelShip(player);
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isPlayerImperial (obj_id player, obj_id npc)
{
	return space_battlefield.isInImperialShip(player);
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_canAffordEntry (obj_id player, obj_id npc)
{
	int intCost = space_battlefield.canAffordPrestigePointCost(space_transition.getContainingShip(player), npc);
	if(intCost==0)
	{
		return false;
	}
	return true;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isFactionCorrectForEntry (obj_id player, obj_id npc)
{
	obj_id objShip = space_transition.getContainingShip(player);
	obj_id objOwner = getOwner(objShip);
	return space_battlefield.isInImperialShip(objOwner);
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isPlayerNeutral (obj_id player, obj_id npc)
{
	if(space_battlefield.isInNeutralShip(player))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isTooFar (obj_id player, obj_id npc)
{
	space_combat.playCombatTauntSound( player );
	obj_id containingShip = space_transition.getContainingShip(player);
	return ( getDistance( npc, containingShip ) > space_transition.STATION_COMM_MAX_DISTANCE );
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_imperial_condition_isInYacht (obj_id player, obj_id npc)
{
	obj_id ship = space_transition.getContainingShip(player);
	if (isIdValid( ship) )
	{
		string template = getTemplateName(ship);
		if ( template != null && template.endsWith("_yacht.iff") )
			return true;
	}
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void battlefield_entry_station_imperial_action_gotToImperialBattlefield (obj_id player, obj_id npc)
{
	obj_id ship = space_transition.getContainingShip(player);
	setObjVar(ship, "spaceFaction.FactionOverride", ##"imperial");
	space_battlefield.doBattleFieldTransition(space_transition.getContainingShip(player), npc, "imperial_entry");
}

// ----------------------------------------------------------------------

void battlefield_entry_station_imperial_action_goToKessel (obj_id player, obj_id npc)
{
	space_battlefield.doKesselTransition(space_transition.getContainingShip(player), npc);
}

// ----------------------------------------------------------------------

void battlefield_entry_station_imperial_action_goToRebelBattlefield (obj_id player, obj_id npc)
{
	obj_id ship = space_transition.getContainingShip(player);
	setObjVar(ship, "spaceFaction.FactionOverride", ##"rebel");
	space_battlefield.doBattleFieldTransition(space_transition.getContainingShip(player), npc, "rebel_entry");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

int battlefield_entry_station_imperial_tokenDI_prestigeCost (obj_id player, obj_id npc)
{
	return space_battlefield.getPrestigeCostForTransition(player, npc);	
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int battlefield_entry_station_imperial_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Welcome to the Imperial Space Station!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I would like to enter Deep Space!
	if (response == "s_fa22e207")
	{
		//-- [NOTE] 
		if (!battlefield_entry_station_imperial_condition_isFactionCorrectForEntry (player, npc))
		{
			//-- NPC: You are not of the proper faction. Go find your own station.
			string_id message = new string_id (c_stringFile, "s_33f71018");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (battlefield_entry_station_imperial_condition__defaultCondition (player, npc))
		{
			battlefield_entry_station_imperial_action_gotToImperialBattlefield (player, npc);

			//-- NPC: Good luck!
			string_id message = new string_id (c_stringFile, "s_19");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I would like to go to Kessel.
	if (response == "s_597d7f95")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_imperial_condition__defaultCondition (player, npc))
		{
			battlefield_entry_station_imperial_action_goToKessel (player, npc);

			//-- NPC: Good luck!
			string_id message = new string_id (c_stringFile, "s_17");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{

	setCondition (self, CONDITION_CONVERSABLE);
	setObjVar(self, "convo.appearance", "object/mobile/space_comm_imperial_officer_02.iff" );
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setObjVar(self, "convo.appearance", "object/mobile/space_comm_imperial_officer_02.iff" );
	detachScript(self, "space.content_tools.spacestation");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.battlefield_entry_station_imperial");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (battlefield_entry_station_imperial_condition_isInYacht (player, npc))
	{
		//-- NPC: There's nothing we can do for you while you're in that civilian ship.
		string_id message = new string_id (c_stringFile, "s_358253b2");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_imperial_condition_isPlayerRebel (player, npc))
	{
		//-- NPC: You are not welcome at this station, Rebel SCUM!
		string_id message = new string_id (c_stringFile, "s_33077605");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_imperial_condition_isPlayerNeutral (player, npc))
	{
		//-- NPC: Sign up with the Empire and we'll talk.
		string_id message = new string_id (c_stringFile, "s_2e491159");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_imperial_condition_isTooFar (player, npc))
	{
		//-- NPC: You need to move closer to this station.
		string_id message = new string_id (c_stringFile, "s_48f82131");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_imperial_condition__defaultCondition (player, npc))
	{
		//-- NPC: Welcome to the Imperial Space Station!
		string_id message = new string_id (c_stringFile, "s_a136b7d3");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I would like to enter Deep Space!
		boolean hasResponse0 = false;
		if (battlefield_entry_station_imperial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I would like to go to Kessel.
		boolean hasResponse1 = false;
		if (battlefield_entry_station_imperial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_fa22e207");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_597d7f95");

			utils.setScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId", 5);

			npcStartConversation (player, npc, "battlefield_entry_station_imperial", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "battlefield_entry_station_imperial")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId");

	if (branchId == 5 && battlefield_entry_station_imperial_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.battlefield_entry_station_imperial.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

