// ======================================================================
//
// rtp_mon_mothma_main.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.groundquests;
include library.space_quest;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/rtp_mon_mothma_main";

// ======================================================================
// Script Conditions
// ======================================================================

boolean rtp_mon_mothma_main_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_rtp_mon_mothma_01_active (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "rtp_mon_mothma_01");
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_rtp_mon_mothma_01_complete (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "rtp_mon_mothma_01", "rtp_mon_mothma_01_03") ||
	 groundquests.hasCompletedQuest(player, "rtp_mon_mothma_01");
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_completedAckbar (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "rtp_ackbar_02");
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_rtp_mon_mothma_01_task02_active (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "rtp_mon_mothma_01", "rtp_mon_mothma_01_02");
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_notRebel (obj_id player, obj_id npc)
{
	string playerFaction = factions.getFaction(player);
	if ( playerFaction == null || !playerFaction.equals("Rebel") )
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean rtp_mon_mothma_main_condition_rebel_isOnLeave (obj_id player, obj_id npc)
{
	return factions.isOnLeave(player);
}

// ======================================================================
// Script Actions
// ======================================================================

void rtp_mon_mothma_main_action_rtp_mon_mothma_01_granted (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "rtp_mon_mothma_01");
}

// ----------------------------------------------------------------------

void rtp_mon_mothma_main_action_rtp_mon_mothma_01_signal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "rtp_mon_mothma_01_03");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int rtp_mon_mothma_main_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Finished with Admiral Ackbar? Excellent. You are to retrieve a damaged Imperial reconnaissance droid. You are to find it.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm on my way.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (rtp_mon_mothma_main_condition__defaultCondition (player, npc))
		{
			rtp_mon_mothma_main_action_rtp_mon_mothma_01_granted (player, npc);

			//-- NPC: We have the droid's general location, but you'll have to narrow it down from there. We must have whatever information is stored within that droid.
			string_id message = new string_id (c_stringFile, "s_38");
			utils.removeScriptVar (player, "conversation.rtp_mon_mothma_main.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No thank you.
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (rtp_mon_mothma_main_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well.
			string_id message = new string_id (c_stringFile, "s_42");
			utils.removeScriptVar (player, "conversation.rtp_mon_mothma_main.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.rtp_mon_mothma_main");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	
	faceTo( self, player );

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.rtp_mon_mothma_main");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition_notRebel (player, npc))
	{
		//-- NPC: There is nothing for you here.
		string_id message = new string_id (c_stringFile, "s_44");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!rtp_mon_mothma_main_condition_completedAckbar (player, npc))
	{
		//-- NPC: Not now trooper. I'm trying to pinpoint the location of a stray Imperial reconnaissance droid. Report to Admiral Ackbar if you wish to serve.
		string_id message = new string_id (c_stringFile, "s_13");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition_rebel_isOnLeave (player, npc))
	{
		//-- NPC: Return when you are on active duty, soldier.
		string_id message = new string_id (c_stringFile, "s_43");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition_rtp_mon_mothma_01_complete (player, npc))
	{
		rtp_mon_mothma_main_action_rtp_mon_mothma_01_signal (player, npc);

		//-- NPC: Excellent work! Those Imperial generals were responsible for a lot of damage to the Rebel Alliance. We'll all sleep a bit easier now. Well, not you. You are to travel to Yavin IV and report to General Dodonna.
		string_id message = new string_id (c_stringFile, "s_20");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition_rtp_mon_mothma_01_task02_active (player, npc))
	{
		//-- NPC: According to information from the droid, two ruthless Imperial generals are present at an Imperial base on Dantooine as is an assassin who has been hired to take out General Dodonna and Admiral Ackbar. You must eliminate these threats to the Rebel Alliance.
		string_id message = new string_id (c_stringFile, "s_14");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition_rtp_mon_mothma_01_active (player, npc))
	{
		//-- NPC: Retrieve that damaged Imperial reconnaissance droid. We have its general location, but you'll have to narrow it down from there. We must have whatever information is stored within that droid.
		string_id message = new string_id (c_stringFile, "s_32");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rtp_mon_mothma_main_condition__defaultCondition (player, npc))
	{
		//-- NPC: Finished with Admiral Ackbar? Excellent. You are to retrieve a damaged Imperial reconnaissance droid. You are to find it.
		string_id message = new string_id (c_stringFile, "s_34");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm on my way.
		boolean hasResponse0 = false;
		if (rtp_mon_mothma_main_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: No thank you.
		boolean hasResponse1 = false;
		if (rtp_mon_mothma_main_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_36");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_40");

			utils.setScriptVar (player, "conversation.rtp_mon_mothma_main.branchId", 7);

			npcStartConversation (player, npc, "rtp_mon_mothma_main", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "rtp_mon_mothma_main")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.rtp_mon_mothma_main.branchId");

	if (branchId == 7 && rtp_mon_mothma_main_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.rtp_mon_mothma_main.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

