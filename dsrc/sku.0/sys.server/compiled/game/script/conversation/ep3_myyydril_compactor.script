// ======================================================================
//
// ep3_myyydril_compactor.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_myyydril_compactor";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_myyydril_compactor_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_compactor_condition_check_inv (obj_id player, obj_id npc)
{
	string datatable = "datatables/npc/junk_dealer/junk_dealer.iff";
	
	string item = "";
	string itemTemplate = "";
	
	int itemLength = dataTableGetNumRows(datatable);
	
	int x = 0;
	int y = 0;
	
	obj_id inventory = utils.getInventoryContainer(player);
	
	if(isIdValid(inventory))
	{
		obj_id[] contents = utils.getContents(inventory, true);

		if(contents != null)
		{
			for(x = 0; x < contents.length; x++)
			{
				y = 0;
				if(hasObjVar(contents[x], "junkDealer.intPrice")) 
					return true;				
				
				if (!isCrafted(contents[x])) {
					itemTemplate = getTemplateName(contents[x]);
					
					while(y < itemLength) {
	
						item = dataTableGetString(datatable, y, "items");
						
						if(itemTemplate == item) {
					
						return true;
					}
					
						y++;
					}
				}	
			}
		}
	}
	
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_myyydril_compactor_action_start_dealing (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startDealing", params, 1.0f, false);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_myyydril_compactor_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Scanning... [The Compactor 3000 jiggles.]  ... Greetings, adventurer! Keep our cave clean by depositing your trash here.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Trash? What do you mean?
	if (response == "s_111")
	{
		//-- [NOTE] 
		if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Proccessing... [The Compactor 3000's lights start to blink.] We realize you may find things during your adventure that you have no use for. Help keep our caves clean by depositing unwanted items here. We give credit rewards to those to help us keep our caves clean.
			string_id message = new string_id (c_stringFile, "s_113");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Hmm.. I have some trash for you.
			boolean hasResponse0 = false;
			if (ep3_myyydril_compactor_condition_check_inv (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I don't have any trash at the moment.
			boolean hasResponse1 = false;
			if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.ep3_myyydril_compactor.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_compactor.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_compactor_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Proccessing... [The Compactor 3000's lights start to blink.] We realize you may find things during your adventure that you have no use for. Help keep our caves clean by depositing unwanted items here. We give credit rewards to those to help us keep our caves clean.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hmm.. I have some trash for you.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
		{
			ep3_myyydril_compactor_action_start_dealing (player, npc);

			//-- NPC: Processing... We give top credits for unwanted items. The Compactor 3000 thanks you.
			string_id message = new string_id (c_stringFile, "s_117");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_compactor.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't have any trash at the moment.
	if (response == "s_119")
	{
		//-- [NOTE] 
		if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
		{
			//-- NPC: [The Compactor 3000 shuts down, waiting for the next customer.]
			string_id message = new string_id (c_stringFile, "s_121");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_compactor.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_myyydril_compactor");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable(self, true);
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable(self, true);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_myyydril_compactor");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
	{
		//-- NPC: Scanning... [The Compactor 3000 jiggles.]  ... Greetings, adventurer! Keep our cave clean by depositing your trash here.
		string_id message = new string_id (c_stringFile, "s_109");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Trash? What do you mean?
		boolean hasResponse0 = false;
		if (ep3_myyydril_compactor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_111");

			utils.setScriptVar (player, "conversation.ep3_myyydril_compactor.branchId", 1);

			npcStartConversation (player, npc, "ep3_myyydril_compactor", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_myyydril_compactor")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_myyydril_compactor.branchId");

	if (branchId == 1 && ep3_myyydril_compactor_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && ep3_myyydril_compactor_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_myyydril_compactor.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

