// ======================================================================
//
// event_cheerleader_vader.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/event_cheerleader_vader";

// ======================================================================
// Script Conditions
// ======================================================================

boolean event_cheerleader_vader_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_isRebel (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return false;

	if (whichFaction == "Rebel")
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_isNeutral (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_hasMaxQuests (obj_id player, obj_id npc)
{
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb50 = questGetQuestId("quest/event_gcwcheerleader_sfreb50");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp4 = questGetQuestId("quest/event_gcwcheerleader_cmimp4");

	return (	
				// One PvE and One PvP active
				( (	questIsQuestActive(killReb5, player)	||
					questIsQuestActive(killReb10, player)	||
					questIsQuestActive(killReb20, player)	||
					questIsQuestActive(killReb50, player)		) &&

				(	questIsQuestActive(cmImp1, player)		||
					questIsQuestActive(cmImp2, player)		||
					questIsQuestActive(cmImp3, player)		||
					questIsQuestActive(cmImp4, player)			) )	||
					
				// All PvP done and any PvE active
				( 	questIsQuestComplete(killReb50, player)	&&
				(	questIsQuestActive(cmImp1, player)		||
					questIsQuestActive(cmImp2, player)		||
					questIsQuestActive(cmImp3, player)		||
					questIsQuestActive(cmImp4, player)			) )	||
	
				// All PvE done and any PvP active				
				(	questIsQuestComplete(cmImp4, player)	&&
				(	questIsQuestActive(killReb5, player)	||
					questIsQuestActive(killReb10, player)	||
					questIsQuestActive(killReb20, player)	||
					questIsQuestActive(killReb50, player) 		) )			);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_completedAll (obj_id player, obj_id npc)
{
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb50 = questGetQuestId("quest/event_gcwcheerleader_sfreb50");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp4 = questGetQuestId("quest/event_gcwcheerleader_cmimp4");

	return(questIsQuestComplete(killReb5, player)	&&
			questIsQuestComplete(killReb10, player)	&&
			questIsQuestComplete(killReb20, player)	&&
			questIsQuestComplete(killReb50, player)	&&
			questIsQuestComplete(cmImp1, player)	&&
			questIsQuestComplete(cmImp2, player)	&&
			questIsQuestComplete(cmImp3, player)	&&
			questIsQuestComplete(cmImp4, player)	);


}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_noMissionsComplete (obj_id player, obj_id npc)
{
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return (!questIsQuestComplete(killReb5, player) && !questIsQuestComplete(cmImp1, player) &&
			!questIsQuestActive(killReb5, player) && !questIsQuestActive(cmImp1, player) );
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pvp1Ready (obj_id player, obj_id npc)
{
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	
	return (!questIsQuestComplete(killReb20, player)	&&
			!questIsQuestComplete(killReb10, player)	&&
			!questIsQuestComplete(killReb5, player)		&&
			!questIsQuestActive(killReb20, player)		&&
			!questIsQuestActive(killReb10, player)		&&
			!questIsQuestActive(killReb5, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pve1Ready (obj_id player, obj_id npc)
{
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return ( !questIsQuestComplete(cmImp3, player)	&& 
			!questIsQuestComplete(cmImp2, player)	&&
			!questIsQuestActive(cmImp3, player)		&& 
			!questIsQuestActive(cmImp2, player)		&&
			!questIsQuestActive(cmImp1, player)		&&
			!questIsQuestComplete(cmImp1, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pve2Ready (obj_id player, obj_id npc)
{
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return ( !questIsQuestComplete(cmImp3, player)	&& 
			!questIsQuestComplete(cmImp2, player)	&&
			!questIsQuestActive(cmImp2, player)		&&
			!questIsQuestActive(cmImp3, player)		&& 
			questIsQuestComplete(cmImp1, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pvp2Ready (obj_id player, obj_id npc)
{
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	
	return (!questIsQuestComplete(killReb20, player)	&&
			!questIsQuestComplete(killReb10, player)	&&
			!questIsQuestActive(killReb20, player)		&&
			!questIsQuestActive(killReb10, player)		&&
			questIsQuestComplete(killReb5, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pve3Ready (obj_id player, obj_id npc)
{
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return ( !questIsQuestComplete(cmImp3, player)	&& 
			!questIsQuestActive(cmImp3, player)		&& 
			questIsQuestComplete(cmImp2, player)	&&
			questIsQuestComplete(cmImp1, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pvp3Ready (obj_id player, obj_id npc)
{
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	
	return (!questIsQuestComplete(killReb20, player)	&&
			!questIsQuestActive(killReb20, player)		&&
			questIsQuestComplete(killReb10, player)		&&
			questIsQuestComplete(killReb5, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pvp4Ready (obj_id player, obj_id npc)
{
	int killReb50 = questGetQuestId("quest/event_gcwcheerleader_sfreb50");
	int killReb20 = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	int killReb10 = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	
	return (!questIsQuestActive(killReb50, player)&&
			!questIsQuestComplete(killReb50, player)&&
			questIsQuestComplete(killReb20, player)	&&
			questIsQuestComplete(killReb10, player)	&&
			questIsQuestComplete(killReb5, player)	);

}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_pve4Ready (obj_id player, obj_id npc)
{
	int cmImp4 = questGetQuestId("quest/event_gcwcheerleader_cmimp4");
	int cmImp3 = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	int cmImp2 = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return (!questIsQuestComplete(cmImp4, player)	&&  
			!questIsQuestActive(cmImp4, player)		&&  
			questIsQuestComplete(cmImp3, player)	&& 
			questIsQuestComplete(cmImp2, player)	&&
			questIsQuestComplete(cmImp1, player)	);
}

// ----------------------------------------------------------------------

boolean event_cheerleader_vader_condition_hasMinOne (obj_id player, obj_id npc)
{
	int killReb5 = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	int cmImp1 = questGetQuestId("quest/event_gcwcheerleader_cmimp1");

	return(questIsQuestComplete(killReb5, player) || questIsQuestComplete(cmImp1, player) ||
			questIsQuestActive(killReb5, player) || questIsQuestActive(cmImp1, player) );
}

// ======================================================================
// Script Actions
// ======================================================================

void event_cheerleader_vader_action_pvp1mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_sfreb5");
	groundquests.grantQuest(questId, player, npc, true);
	attachScript(player, "event.gcwraids.spec_force_killer");
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pve1mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_cmimp1");
	groundquests.grantQuest(questId, player, npc, true);
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pvp2mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_sfreb10");
	groundquests.grantQuest(questId, player, npc, true);
	attachScript(player, "event.gcwraids.spec_force_killer");
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pve2mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_cmimp2");
	groundquests.grantQuest(questId, player, npc, true);
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pvp3mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_sfreb20");
	groundquests.grantQuest(questId, player, npc, true);
	attachScript(player, "event.gcwraids.spec_force_killer");
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pve3mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_cmimp3");
	groundquests.grantQuest(questId, player, npc, true);
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pvp4mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_sfreb50");
	groundquests.grantQuest(questId, player, npc, true);
	attachScript(player, "event.gcwraids.spec_force_killer");
}

// ----------------------------------------------------------------------

void event_cheerleader_vader_action_pve4mission (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/event_gcwcheerleader_cmimp4");
	groundquests.grantQuest(questId, player, npc, true);
	attachScript(player, "event.gcwraids.pve_badge");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int event_cheerleader_vader_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Empire has need of loyal Soldiers to fight the Rebels. Will you serve the Emperor in these tasks?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready to serve.
	if (response == "s_34")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Rebels grow more brazen every day. We must prove to all that the Empire is in control.
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What do you need me to do?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Rebels grow more brazen every day. We must prove to all that the Empire is in control.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you need me to do?
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your task will be simple. Eliminate Rebels. However, you must choose whether to face Rebel Combatants or Special Forces.
			string_id message = new string_id (c_stringFile, "s_40");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll face the Rebel Combatants.
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'll take on the Rebellion's Special forces.
			boolean hasResponse1 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your task will be simple. Eliminate Rebels. However, you must choose whether to face Rebel Combatants or Special Forces.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll face the Rebel Combatants.
	if (response == "s_42")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pve1mission (player, npc);

			//-- NPC: Very good. I'll upload the mission for you. Do not fail me.
			string_id message = new string_id (c_stringFile, "s_44");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll take on the Rebellion's Special forces.
	if (response == "s_46")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pvp1mission (player, npc);

			//-- NPC: Very good. I'll upload the mission for you. Do not fail me.
			string_id message = new string_id (c_stringFile, "s_48");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have served effectively in the past. Are you ready to serve again?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready to fight against enemy combatants.
	if (response == "s_52")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: We must keep the Rebels off balance to prevent them from regrouping. Even now they gather to attack Imperial controlled cities.
			string_id message = new string_id (c_stringFile, "s_54");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What do you need me to do?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_56");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I want to fight against enemy Special Forces.
	if (response == "s_64")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: We need to make sure the Rebels don't stage a counter-strike. We need to keep them busy and prevent them from regrouping.
			string_id message = new string_id (c_stringFile, "s_66");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What do you need me to do?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_68");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I want to fight more enemy combatants.
	if (response == "s_76")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: Watchful rebel guards in this region are trying to recruit the locals into the Rebellion. We need to show everyone what happens to those who oppose the Emperor.
			string_id message = new string_id (c_stringFile, "s_78");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Take out watchful Rebel guards? I can do that.
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_80");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 17);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I want to fight more enemy Special Forces.
	if (response == "s_84")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pvp2mission (player, npc);

			//-- NPC: Good. We need to show everyone what happens to those who oppose the Emperor.
			string_id message = new string_id (c_stringFile, "s_86");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready for a real challenge against enemy combatants.
	if (response == "s_88")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: You have done well in the past, so I feel that you are up to an even greater challenge.
			string_id message = new string_id (c_stringFile, "s_90");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm up to it. What do you need from me?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready for a real challenge against enemy Special Forces.
	if (response == "s_96")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: Our forces are doing well on this planet, but the Rebels could retaliate at any time. We have to deplete their resources to keep them off balance.
			string_id message = new string_id (c_stringFile, "s_98");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Just like last time?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_100");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Enemy combatants are my specialty.
	if (response == "s_104")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Rebels are relying more and more on their Admirals. By breaking the chain of command at that level we can disrupt their operations greatly. 
			string_id message = new string_id (c_stringFile, "s_106");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What do I do?
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_108");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 24);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Enemy Special Forces are my specialty.
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pvp4mission (player, npc);

			//-- NPC: These Special Forces are responsible for almost all of our base losses. Succeed in this task and I'll see that you are given command of a detachment headquarters.
			string_id message = new string_id (c_stringFile, "s_118");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We must keep the Rebels off balance to prevent them from regrouping. Even now they gather to attack Imperial controlled cities.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you need me to do?
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: Continue as you did before, but my expectations are now higher.
			string_id message = new string_id (c_stringFile, "s_58");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll do my best against the Rebel combatants.
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Continue as you did before, but my expectations are now higher.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll do my best against the Rebel combatants.
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pve1mission (player, npc);

			//-- NPC: I expect nothing less. I'll upload the mission for you. Do not fail me.
			string_id message = new string_id (c_stringFile, "s_62");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We need to make sure the Rebels don't stage a counter-strike. We need to keep them busy and prevent them from regrouping.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you need me to do?
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: We need you to take part in hit-and-run strikes on their ground forces. Just enough to keep them busy.
			string_id message = new string_id (c_stringFile, "s_70");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll take on the Rebels's Special forces. 
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We need you to take part in hit-and-run strikes on their ground forces. Just enough to keep them busy.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll take on the Rebels's Special forces. 
	if (response == "s_72")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pvp1mission (player, npc);

			//-- NPC: I expect nothing less. I'll upload the mission for you. Do not fail me.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Watchful rebel guards in this region are trying to recruit the locals into the Rebellion. We need to show everyone what happens to those who oppose the Emperor.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Take out watchful Rebel guards? I can do that.
	if (response == "s_80")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pve2mission (player, npc);

			//-- NPC: Good. We need to show the populace who controls the cities. Removing some Rebels should clarify the situation.
			string_id message = new string_id (c_stringFile, "s_82");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have done well in the past, so I feel that you are up to an even greater challenge.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm up to it. What do you need from me?
	if (response == "s_92")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pve3mission (player, npc);

			//-- NPC: Excellent. The Rebels refuse to die. You will strike against the Rebel leadership from the ground up. Your assignment is to seek out those Rebels you can find and permanently change their status.
			string_id message = new string_id (c_stringFile, "s_94");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch22 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Our forces are doing well on this planet, but the Rebels could retaliate at any time. We have to deplete their resources to keep them off balance.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Just like last time?
	if (response == "s_100")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pvp3mission (player, npc);

			//-- NPC: Yes. The Rebellion relies heavily on their Special Forces Soldiers. By eliminating as many of them as possible we will dramatically impact their offensive efforts.
			string_id message = new string_id (c_stringFile, "s_102");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch24 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Rebels are relying more and more on their Admirals. By breaking the chain of command at that level we can disrupt their operations greatly. 

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do I do?
	if (response == "s_108")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			//-- NPC: Rebel Admirals aren't easy to find, but they are out there. Do what you can to find one and remove him from command.
			string_id message = new string_id (c_stringFile, "s_110");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm on it.
			boolean hasResponse0 = false;
			if (event_cheerleader_vader_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 25);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int event_cheerleader_vader_handleBranch25 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Rebel Admirals aren't easy to find, but they are out there. Do what you can to find one and remove him from command.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm on it.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			event_cheerleader_vader_action_pve4mission (player, npc);

			//-- NPC: Succeed in this task and I'll see that you are given command of a detachment headquarters.
			string_id message = new string_id (c_stringFile, "s_114");
			utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.event_cheerleader_vader");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.event_cheerleader_vader");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_isRebel (player, npc))
	{
		//-- NPC: The Rebellion will fail. Return to your friends and inform them of their impending destruction. Leave my sight before I stop being so generous towards you.
		string_id message = new string_id (c_stringFile, "s_24");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_isNeutral (player, npc))
	{
		//-- NPC: If you wish to join me in destroying the Rebellion and bringing order to the galaxy you must join the Imperial side of this war.
		string_id message = new string_id (c_stringFile, "s_26");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_hasMaxQuests (player, npc))
	{
		//-- NPC: There is still more to be done, but you have too much to accomplish already. Finish your current missions so you can focus on the task at hand.
		string_id message = new string_id (c_stringFile, "s_28");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_completedAll (player, npc))
	{
		//-- NPC: You have proven yourself a worthy member of the Empire. I have no more assignments for one such as you. You will have to take on missions of your own choosing from now on. Goodbye.
		string_id message = new string_id (c_stringFile, "s_30");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_noMissionsComplete (player, npc))
	{
		//-- NPC: The Empire has need of loyal Soldiers to fight the Rebels. Will you serve the Emperor in these tasks?
		string_id message = new string_id (c_stringFile, "s_32");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm ready to serve.
		boolean hasResponse0 = false;
		if (event_cheerleader_vader_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_34");

			utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 5);

			npcStartConversation (player, npc, "event_cheerleader_vader", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (event_cheerleader_vader_condition_hasMinOne (player, npc))
	{
		//-- NPC: You have served effectively in the past. Are you ready to serve again?
		string_id message = new string_id (c_stringFile, "s_50");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm ready to fight against enemy combatants.
		boolean hasResponse0 = false;
		if (event_cheerleader_vader_condition_pve1Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I want to fight against enemy Special Forces.
		boolean hasResponse1 = false;
		if (event_cheerleader_vader_condition_pvp1Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I want to fight more enemy combatants.
		boolean hasResponse2 = false;
		if (event_cheerleader_vader_condition_pve2Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: I want to fight more enemy Special Forces.
		boolean hasResponse3 = false;
		if (event_cheerleader_vader_condition_pvp2Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		//-- PLAYER: I'm ready for a real challenge against enemy combatants.
		boolean hasResponse4 = false;
		if (event_cheerleader_vader_condition_pve3Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse4 = true;
		}

		//-- PLAYER: I'm ready for a real challenge against enemy Special Forces.
		boolean hasResponse5 = false;
		if (event_cheerleader_vader_condition_pvp3Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse5 = true;
		}

		//-- PLAYER: Enemy combatants are my specialty.
		boolean hasResponse6 = false;
		if (event_cheerleader_vader_condition_pve4Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse6 = true;
		}

		//-- PLAYER: Enemy Special Forces are my specialty.
		boolean hasResponse7 = false;
		if (event_cheerleader_vader_condition_pvp4Ready (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse7 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_52");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_64");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_76");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_84");

			if (hasResponse4)
				responses [responseIndex++] = new string_id (c_stringFile, "s_88");

			if (hasResponse5)
				responses [responseIndex++] = new string_id (c_stringFile, "s_96");

			if (hasResponse6)
				responses [responseIndex++] = new string_id (c_stringFile, "s_104");

			if (hasResponse7)
				responses [responseIndex++] = new string_id (c_stringFile, "s_116");

			utils.setScriptVar (player, "conversation.event_cheerleader_vader.branchId", 10);

			npcStartConversation (player, npc, "event_cheerleader_vader", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "event_cheerleader_vader")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.event_cheerleader_vader.branchId");

	if (branchId == 5 && event_cheerleader_vader_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && event_cheerleader_vader_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && event_cheerleader_vader_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && event_cheerleader_vader_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && event_cheerleader_vader_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && event_cheerleader_vader_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && event_cheerleader_vader_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && event_cheerleader_vader_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && event_cheerleader_vader_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && event_cheerleader_vader_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 22 && event_cheerleader_vader_handleBranch22 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 24 && event_cheerleader_vader_handleBranch24 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 25 && event_cheerleader_vader_handleBranch25 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.event_cheerleader_vader.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

