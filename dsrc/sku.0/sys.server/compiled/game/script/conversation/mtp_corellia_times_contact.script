// ======================================================================
//
// mtp_corellia_times_contact.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.collection;
include library.conversation;
include library.groundquests;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/mtp_corellia_times_contact";

// ======================================================================
// Script Conditions
// ======================================================================

boolean mtp_corellia_times_contact_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isVaniPointerActive (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "mtp_hideout_pointer");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_allMeatlumpCollectionsComplete (obj_id player, obj_id npc)
{
	return ((mtp_corellia_times_contact_condition_isMeatlumpFoodCollectionComplete(player, npc) &&
	mtp_corellia_times_contact_condition_isMeatlumpWeaponCollectionComplete(player, npc) &&
	mtp_corellia_times_contact_condition_isMeatlumpBombCollectionComplete(player, npc) &&
	mtp_corellia_times_contact_condition_isMeatlumpMapCollectionComplete(player, npc) &&
	mtp_corellia_times_contact_condition_isMeatlumpContainerCollectionComplete(player, npc)) &&
	mtp_corellia_times_contact_condition_isMeatlumpSafeCollectionComplete(player, npc));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpSafeCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_safe_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpContainerCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_container_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpMapCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_map_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpBombCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_bomb_sabotage_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpWeaponCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_weapon_sabotage_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isMeatlumpFoodCollectionComplete (obj_id player, obj_id npc)
{
	return hasCompletedCollection(player, "col_meatlump_food_sabotage_01");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_mealtumpCollectionCompleteQuestActive (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_allMeatlumpCollectionsComplete(player, npc) && groundquests.isTaskActive(player, "mtp_collection_tracking", "goBackToHaldenWes"));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_repeatMeatlumpQuestComplete (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_allMeatlumpCollectionsComplete(player, npc) && groundquests.isTaskActive(player, "mtp_collection_tracking_02", "goBackToHaldenWes"));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_meatlumpCollectionCompleteQuestComplete (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_allMeatlumpCollectionsComplete(player, npc) && groundquests.hasCompletedQuest(player, "mtp_collection_tracking"));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasSafeDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_safe.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasContainerDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_container.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasMapDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_map.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasWeaponDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_weapon.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasFoodDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_food.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasBombDeviceStack (obj_id player, obj_id npc)
{
	return utils.playerHasItemByTemplateInBankOrInventory(player, "object/tangible/meatlump/event/slicing_device_meatlump_bomb.iff");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasAllDevices (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_hasBombDeviceStack(player, npc) && 
	mtp_corellia_times_contact_condition_hasFoodDeviceStack(player, npc) &&
	mtp_corellia_times_contact_condition_hasWeaponDeviceStack(player, npc) &&
	mtp_corellia_times_contact_condition_hasMapDeviceStack(player, npc) &&
	mtp_corellia_times_contact_condition_hasContainerDeviceStack(player, npc) &&
	mtp_corellia_times_contact_condition_hasSafeDeviceStack(player, npc));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasCollectionQuestActive (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "mtp_collection_tracking");
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasQuestButNotAllDevices (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) && !mtp_corellia_times_contact_condition_hasAllDevices(player, npc));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isReadyForCollectionQuest (obj_id player, obj_id npc)
{
	return (!mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) && ((mtp_corellia_times_contact_condition_isVaniPointerActive(player, npc)) || mtp_corellia_times_contact_condition_hasCompletedPrerequisites(player, npc)));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_hasCompletedPrerequisites (obj_id player, obj_id npc)
{
	return (groundquests.hasCompletedQuest(player, "mtp_hideout_pointer") && 
	!groundquests.isQuestActive(player, "mtp_collection_tracking"));
}

// ----------------------------------------------------------------------

boolean mtp_corellia_times_contact_condition_isSomehowBroken (obj_id player, obj_id npc)
{
	return (mtp_corellia_times_contact_condition_isMeatlumpBombCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) ||
	mtp_corellia_times_contact_condition_isMeatlumpContainerCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) ||
	mtp_corellia_times_contact_condition_isMeatlumpFoodCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) ||
	mtp_corellia_times_contact_condition_isMeatlumpMapCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) ||
	mtp_corellia_times_contact_condition_isMeatlumpSafeCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc) ||
	mtp_corellia_times_contact_condition_isMeatlumpWeaponCollectionComplete(player, npc) && !mtp_corellia_times_contact_condition_hasCollectionQuestActive(player, npc));
}

// ======================================================================
// Script Actions
// ======================================================================

void mtp_corellia_times_contact_action_sendVaniPointerSignal (obj_id player, obj_id npc)
{
	if(mtp_corellia_times_contact_condition_isVaniPointerActive(player, npc))
		groundquests.sendSignal(player, "mtp_hideout_pointer_03");
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_removeAndReactivateMeatlumpCollectionsAndQuest (obj_id player, obj_id npc)
{
	mtp_corellia_times_contact_action_removeMeatlumpCollections(player, npc);
	mtp_corellia_times_contact_action_activateMeatlumpCollections(player, npc);
	groundquests.clearQuest(player, "quest/mtp_collection_tracking");
	groundquests.grantQuest(player, "mtp_collection_tracking");
	//remove all quests dealing with the camps, bombs
	groundquests.clearQuest(player, "mtp_map_quest_dathomir_01");
	groundquests.clearQuest(player, "mtp_map_quest_naboo_02");
	groundquests.clearQuest(player, "mtp_map_quest_corellia_01");
	groundquests.clearQuest(player, "mtp_map_quest_corellia_02");
	groundquests.clearQuest(player, "mtp_map_quest_endor_01");
	groundquests.clearQuest(player, "mtp_map_quest_lok_01");
	groundquests.clearQuest(player, "mtp_map_quest_naboo_01");
	groundquests.clearQuest(player, "mtp_map_quest_naboo_03");
	groundquests.clearQuest(player, "mtp_map_quest_talus_01");
	groundquests.clearQuest(player, "mtp_map_quest_tatooine_01");
	groundquests.clearQuest(player, "mtp_camp_quest_lok");
	groundquests.clearQuest(player, "mtp_camp_quest_corellia");
	groundquests.clearQuest(player, "mtp_camp_quest_rori_talus");
	groundquests.clearQuest(player, "mtp_camp_quest_tatooine");
	groundquests.clearQuest(player, "mtp_camp_quest_naboo");
	groundquests.clearQuest(player, "mtp_find_infiltrator_1");
	groundquests.clearQuest(player, "mtp_find_infiltrator_2");
	groundquests.clearQuest(player, "mtp_find_infiltrator_3");
	groundquests.clearQuest(player, "mtp_find_infiltrator_4");
	groundquests.clearQuest(player, "mtp_find_infiltrator_5");
	groundquests.clearQuest(player, "mtp_hideout_retrieve_delivery");
	groundquests.clearQuest(player, "mtp_hideout_get_lunch");
	groundquests.clearQuest(player, "mtp_hideout_collect_bomb_items");
	groundquests.clearQuest(player, "mtp_hideout_ragtag");
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_grantMeatlumpCollectionAndQuest (obj_id player, obj_id npc)
{
	mtp_corellia_times_contact_action_activateMeatlumpCollections(player, npc);
	mtp_corellia_times_contact_action_grantCollectionQuest(player, npc);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_activateMeatlumpCollections (obj_id player, obj_id npc)
{
	string activationStringList[] = 
	{
		"meatlump_safe_activation_01",
		"meatlump_container_activation_01",
		"meatlump_map_activation_01",
		"meatlump_bomb_activation_01",
		"meatlump_weapon_activation_01",
		"meatlump_food_activation_01"
	};
	
	for(int b = 0; b < activationStringList.length; b++)
		modifyCollectionSlotValue(player, activationStringList[b], 1);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_removeMeatlumpCollections (obj_id player, obj_id npc)
{
	string collectionStringList[] = 
	{
		"col_meatlump_safe_01",
		"col_meatlump_container_01",
		"col_meatlump_map_01",
		"col_meatlump_bomb_sabotage_01",
		"col_meatlump_weapon_sabotage_01",
		"col_meatlump_food_sabotage_01"
	};
	for(int a = 0; a < collectionStringList.length; a++)
		collection.removeCompletedCollection(player, collectionStringList[a]);	
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_completeCollectionQuest (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "returnToHaldenWes");
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveSafeDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_safe_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveContainerDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_container_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveMapDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_map_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveBombDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_bomb_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveWeaponDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_weapon_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveFoodDevices (obj_id player, obj_id npc)
{
	obj_id inv = utils.getInventoryContainer(player);
	if(!isIdValid(inv) || !exists(inv))
		return;
		
	static_item.createNewItemFunction("item_meatlump_device_food_01", inv);
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_giveAllDevices (obj_id player, obj_id npc)
{
	mtp_corellia_times_contact_action_giveFoodDevices(player, npc);
	mtp_corellia_times_contact_action_giveWeaponDevices(player, npc);
	mtp_corellia_times_contact_action_giveBombDevices(player, npc);
	mtp_corellia_times_contact_action_giveMapDevices(player, npc);
	mtp_corellia_times_contact_action_giveContainerDevices(player, npc);
	mtp_corellia_times_contact_action_giveSafeDevices(player, npc);					
}

// ----------------------------------------------------------------------

void mtp_corellia_times_contact_action_grantCollectionQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "mtp_collection_tracking");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int mtp_corellia_times_contact_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It is only a matter of time before the Meatlumps refortify those base camps and continue their antics.  If you can continue to raze those positions I would gladly pay you the same that I did last time. Interested?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.  It was a lot of fun handing it to the Meatlumps.
	if (response == "s_39")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_removeAndReactivateMeatlumpCollectionsAndQuest (player, npc);

			//-- NPC: Good to hear.  Let me reset the mission instructions on your datapad.  Good Luck!
			string_id message = new string_id (c_stringFile, "s_41");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No thanks.  I have other things to do.
	if (response == "s_43")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: I understand. Take some time off and then come back. There will always be more work for you.
			string_id message = new string_id (c_stringFile, "s_45");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I have been expecting you.  Thanks to you the recent Corellia Times article has brought us a flood of new information and with it new challenges.  Are you interested in additional work?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That depends what it entails.
	if (response == "s_12")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: Well it is quite important actually.  We have reports that small teams of Meatlumps have taken their cause to other planets in the Galaxy.  Obviously, this is a much bigger story than previously expected. 
			string_id message = new string_id (c_stringFile, "s_14");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: And what would you like me to do?
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_16");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well it is quite important actually.  We have reports that small teams of Meatlumps have taken their cause to other planets in the Galaxy.  Obviously, this is a much bigger story than previously expected. 

	//-- [RESPONSE NOTE] 
	//-- PLAYER: And what would you like me to do?
	if (response == "s_16")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: We need someone to spoil their plans.  We can't have a gang from Corellia spreading to other parts of the Galaxy and giving the planet a bad name...
			string_id message = new string_id (c_stringFile, "s_18");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You have to be kidding me right?  Call in the authorities.
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_21");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We need someone to spoil their plans.  We can't have a gang from Corellia spreading to other parts of the Galaxy and giving the planet a bad name...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You have to be kidding me right?  Call in the authorities.
	if (response == "s_21")
	{
		doAnimationAction (player, "laugh");

		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: Okay, okay.  What I mean is, this is a Corellia Times story and we deserve credit.  Our news isn't widely distributed off planet.  If a larger syndicated news service got wind of this I'd miss....I mean the Times would miss its chance.  If we can delay the expansion long enough for more investigative reporting as well as a few additional published articles everyone will be in a better position.
			string_id message = new string_id (c_stringFile, "s_23");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Everyone except me.
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_25");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Okay, okay.  What I mean is, this is a Corellia Times story and we deserve credit.  Our news isn't widely distributed off planet.  If a larger syndicated news service got wind of this I'd miss....I mean the Times would miss its chance.  If we can delay the expansion long enough for more investigative reporting as well as a few additional published articles everyone will be in a better position.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Everyone except me.
	if (response == "s_25")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'll make the pay worth your while.
			string_id message = new string_id (c_stringFile, "s_27");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Now you are talking my language.
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_29");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'll make the pay worth your while.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Now you are talking my language.
	if (response == "s_29")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let me put what information I have in your datapad. Unfortunately I don't have any waypoints but reports place the Meatlump Camps just outside of towns and cities throughout the Galaxy.  Shouldn't be too hard to find a few guys walking around in the Meatlump colors. 
			string_id message = new string_id (c_stringFile, "s_31");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Shouldn't be too hard.
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_33");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Let me put what information I have in your datapad. Unfortunately I don't have any waypoints but reports place the Meatlump Camps just outside of towns and cities throughout the Galaxy.  Shouldn't be too hard to find a few guys walking around in the Meatlump colors. 

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Shouldn't be too hard.
	if (response == "s_33")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveAllDevices (player, npc);

			//-- NPC: Once there, destroy supplies, loot their containers and gather any intel you can.  I am putting the tools you need in your inventory. Each tool has a specific purpose. If you run out of any of the tools you can come back to me to receive more.
			string_id message = new string_id (c_stringFile, "s_35");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Uh. What is the Bomb Defuser for?
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Once there, destroy supplies, loot their containers and gather any intel you can.  I am putting the tools you need in your inventory. Each tool has a specific purpose. If you run out of any of the tools you can come back to me to receive more.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uh. What is the Bomb Defuser for?
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "salute2");

			//-- NPC: Oh that?  In case you find any Meatlump Bombs in or around one of their targets...that device will help you defuse it.  Don't worry...it does all the work for you.  Well, almost all the work anyway.
			string_id message = new string_id (c_stringFile, "s_42");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Uh...defuse bombs?  Well, alright then.
			boolean hasResponse0 = false;
			if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh that?  In case you find any Meatlump Bombs in or around one of their targets...that device will help you defuse it.  Don't worry...it does all the work for you.  Well, almost all the work anyway.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uh...defuse bombs?  Well, alright then.
	if (response == "s_46")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_grantMeatlumpCollectionAndQuest (player, npc);

			//-- NPC: Remember to come back and get additional tools when you run out.  You won't be able to complete your mission without the tools.
			string_id message = new string_id (c_stringFile, "s_48");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_corellia_times_contact_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hello again, need more tools?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Bomb Defusers please.
	if (response == "s_52")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveBombDevices (player, npc);

			//-- NPC: Here you go.
			string_id message = new string_id (c_stringFile, "s_54");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Biological Yeast Dispensers please
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveFoodDevices (player, npc);

			//-- NPC: Ok. Here you are.
			string_id message = new string_id (c_stringFile, "s_58");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Power Cell Abatements please.
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveWeaponDevices (player, npc);

			//-- NPC: Added to your inventory.
			string_id message = new string_id (c_stringFile, "s_62");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Decryptors please.
	if (response == "s_64")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveMapDevices (player, npc);

			//-- NPC: Done
			string_id message = new string_id (c_stringFile, "s_66");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Lock Breakers Please
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveContainerDevices (player, npc);

			//-- NPC: Here you go.
			string_id message = new string_id (c_stringFile, "s_70");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Safe Slicers please.
	if (response == "s_72")
	{
		//-- [NOTE] 
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			mtp_corellia_times_contact_action_giveSafeDevices (player, npc);

			//-- NPC: You will find them in your inventory.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.mtp_corellia_times_contact");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.mtp_corellia_times_contact");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (mtp_corellia_times_contact_condition_meatlumpCollectionCompleteQuestComplete (player, npc))
	{
		//-- NPC: It is only a matter of time before the Meatlumps refortify those base camps and continue their antics.  If you can continue to raze those positions I would gladly pay you the same that I did last time. Interested?
		string_id message = new string_id (c_stringFile, "s_37");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes.  It was a lot of fun handing it to the Meatlumps.
		boolean hasResponse0 = false;
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: No thanks.  I have other things to do.
		boolean hasResponse1 = false;
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_39");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_43");

			utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 1);

			npcStartConversation (player, npc, "mtp_corellia_times_contact", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_corellia_times_contact_condition_mealtumpCollectionCompleteQuestActive (player, npc))
	{
		doAnimationAction (npc, "bow");

		doAnimationAction (player, "thumb_up");

		mtp_corellia_times_contact_action_completeCollectionQuest (player, npc);

		//-- NPC: I see that you have completed your missions.  You have done well, but all is not over.  Come back when you are ready for more work. 
		string_id message = new string_id (c_stringFile, "s_19");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_corellia_times_contact_condition_isReadyForCollectionQuest (player, npc))
	{
		mtp_corellia_times_contact_action_sendVaniPointerSignal (player, npc);

		//-- NPC: I have been expecting you.  Thanks to you the recent Corellia Times article has brought us a flood of new information and with it new challenges.  Are you interested in additional work?
		string_id message = new string_id (c_stringFile, "s_10");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: That depends what it entails.
		boolean hasResponse0 = false;
		if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_12");

			utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 5);

			npcStartConversation (player, npc, "mtp_corellia_times_contact", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_corellia_times_contact_condition_hasQuestButNotAllDevices (player, npc))
	{
		//-- NPC: Hello again, need more tools?
		string_id message = new string_id (c_stringFile, "s_50");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Bomb Defusers please.
		boolean hasResponse0 = false;
		if (!mtp_corellia_times_contact_condition_hasBombDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Biological Yeast Dispensers please
		boolean hasResponse1 = false;
		if (!mtp_corellia_times_contact_condition_hasFoodDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Power Cell Abatements please.
		boolean hasResponse2 = false;
		if (!mtp_corellia_times_contact_condition_hasWeaponDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: Decryptors please.
		boolean hasResponse3 = false;
		if (!mtp_corellia_times_contact_condition_hasMapDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		//-- PLAYER: Lock Breakers Please
		boolean hasResponse4 = false;
		if (!mtp_corellia_times_contact_condition_hasContainerDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse4 = true;
		}

		//-- PLAYER: Safe Slicers please.
		boolean hasResponse5 = false;
		if (!mtp_corellia_times_contact_condition_hasSafeDeviceStack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse5 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_52");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_56");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_60");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_64");

			if (hasResponse4)
				responses [responseIndex++] = new string_id (c_stringFile, "s_68");

			if (hasResponse5)
				responses [responseIndex++] = new string_id (c_stringFile, "s_72");

			utils.setScriptVar (player, "conversation.mtp_corellia_times_contact.branchId", 14);

			npcStartConversation (player, npc, "mtp_corellia_times_contact", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_corellia_times_contact_condition__defaultCondition (player, npc))
	{
		//-- NPC: Great day isn't it?  
		string_id message = new string_id (c_stringFile, "s_76");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "mtp_corellia_times_contact")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

	if (branchId == 1 && mtp_corellia_times_contact_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && mtp_corellia_times_contact_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && mtp_corellia_times_contact_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && mtp_corellia_times_contact_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && mtp_corellia_times_contact_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && mtp_corellia_times_contact_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && mtp_corellia_times_contact_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && mtp_corellia_times_contact_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && mtp_corellia_times_contact_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && mtp_corellia_times_contact_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.mtp_corellia_times_contact.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

