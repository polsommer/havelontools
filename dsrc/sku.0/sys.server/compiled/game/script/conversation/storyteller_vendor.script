// ======================================================================
//
// storyteller_vendor.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.storyteller;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/storyteller_vendor";

// ======================================================================
// Script Conditions
// ======================================================================

boolean storyteller_vendor_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean storyteller_vendor_condition_checkFromToken (obj_id player, obj_id npc)
{
	if( isFreeTrialAccount(player) )
	{
		return false;
	}
	
	if ( hasObjVar(npc, "storytellerid") )
	{
		obj_id storytelledId = getObjIdObjVar(npc, "storytellerid");
		if ( isIdValid(storytelledId) )
		{
			if ( storytelledId == player || storytelledId == utils.getObjIdScriptVar(player, "storytellerAssistant") )
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void storyteller_vendor_action_showStorytellerVendorSui (obj_id player, obj_id npc)
{
	storyteller.displayAvailableStorytellerTokenTypes(player, npc);
	return;
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int storyteller_vendor_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Greetings and Salutations! Are you an enterprising showman? If so, you've come to the right place. I have props that will impress even the most jaded spectator. Special effects that will amaze and astound. Why, you can even hire professional actors who will help you to bring your stories to life. What is your pleasure?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I need supplies.  Do you have anything available?
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (storyteller_vendor_condition__defaultCondition (player, npc))
		{
			storyteller_vendor_action_showStorytellerVendorSui (player, npc);

			//-- NPC: As you wish.  I will show you what is available.
			string_id message = new string_id (c_stringFile, "s_8");
			utils.removeScriptVar (player, "conversation.storyteller_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Oh, I...nothing. I must have spoken to the wrong person.
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (storyteller_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: A common mistake. Good journeys to you, my friend.
			string_id message = new string_id (c_stringFile, "s_12");
			utils.removeScriptVar (player, "conversation.storyteller_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.storyteller_vendor");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.storyteller_vendor");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (storyteller_vendor_condition_checkFromToken (player, npc))
	{
		//-- NPC: Greetings and Salutations! Are you an enterprising showman? If so, you've come to the right place. I have props that will impress even the most jaded spectator. Special effects that will amaze and astound. Why, you can even hire professional actors who will help you to bring your stories to life. What is your pleasure?
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I need supplies.  Do you have anything available?
		boolean hasResponse0 = false;
		if (storyteller_vendor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Oh, I...nothing. I must have spoken to the wrong person.
		boolean hasResponse1 = false;
		if (storyteller_vendor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_10");

			utils.setScriptVar (player, "conversation.storyteller_vendor.branchId", 1);

			npcStartConversation (player, npc, "storyteller_vendor", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (storyteller_vendor_condition__defaultCondition (player, npc))
	{
		//-- NPC: Greetings and Salutations!
		string_id message = new string_id (c_stringFile, "s_14");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "storyteller_vendor")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.storyteller_vendor.branchId");

	if (branchId == 1 && storyteller_vendor_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.storyteller_vendor.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

