// ======================================================================
//
// heroic_sd_intro_rebel.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.groundquests;
include library.instance;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/heroic_sd_intro_rebel";

// ======================================================================
// Script Conditions
// ======================================================================

boolean heroic_sd_intro_rebel_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean heroic_sd_intro_rebel_condition_notRebelFaction (obj_id player, obj_id npc)
{
	return !factions.isRebel(player);
}

// ----------------------------------------------------------------------

boolean heroic_sd_intro_rebel_condition_onQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "star_destroyer_intro_rebel");
}

// ----------------------------------------------------------------------

boolean heroic_sd_intro_rebel_condition_returningQuest (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "star_destroyer_intro_rebel", "star_destroyer_intro_07") || 
	groundquests.hasCompletedQuest(player, "star_destroyer_intro_rebel");
}

// ======================================================================
// Script Actions
// ======================================================================

void heroic_sd_intro_rebel_action_grantIntroQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "star_destroyer_intro_rebel");
	
	string questUtilityScript = "theme_park.dathomir.aurilia.star_destroyer_intro_player";
	
	if ( !hasScript(player, questUtilityScript) )
	{
		attachScript(player, questUtilityScript);
	}
	
	return;
}

// ----------------------------------------------------------------------

void heroic_sd_intro_rebel_action_sendIntroSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "star_destroyer_intro_07");
	
	if ( !instance.isFlaggedForInstance(player, "heroic_star_destroyer") )
	{
		instance.flagPlayerForInstance(player, "heroic_star_destroyer");
	}
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int heroic_sd_intro_rebel_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Pssst...c'mere. You interested in one heck of a mission? Word is that an Imperial Star Destroyer has been liberated from the Empire. I need someone capable who can learn more about this. Interested?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Definitely!
	if (response == "s_12")
	{
		//-- [NOTE] 
		if (heroic_sd_intro_rebel_condition__defaultCondition (player, npc))
		{
			heroic_sd_intro_rebel_action_grantIntroQuest (player, npc);

			//-- NPC: I knew you would be.
			string_id message = new string_id (c_stringFile, "s_14");
			utils.removeScriptVar (player, "conversation.heroic_sd_intro_rebel.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.heroic_sd_intro_rebel");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.heroic_sd_intro_rebel");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (heroic_sd_intro_rebel_condition_notRebelFaction (player, npc))
	{
		//-- NPC: I have nothing to say to you.
		string_id message = new string_id (c_stringFile, "s_4");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (heroic_sd_intro_rebel_condition_returningQuest (player, npc))
	{
		doAnimationAction (player, "laugh");

		heroic_sd_intro_rebel_action_sendIntroSignal (player, npc);

		//-- NPC: Excellent work. Now you just need to get up there and take control of that Star Destroyer for the Rebel Alliance. Why are you laughing?
		string_id message = new string_id (c_stringFile, "s_6");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (heroic_sd_intro_rebel_condition_onQuest (player, npc))
	{
		//-- NPC: Word is that an Imperial Star Destroyer has been liberated from the Empire. I need someone capable who can learn more about this.
		string_id message = new string_id (c_stringFile, "s_8");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (heroic_sd_intro_rebel_condition__defaultCondition (player, npc))
	{
		//-- NPC: Pssst...c'mere. You interested in one heck of a mission? Word is that an Imperial Star Destroyer has been liberated from the Empire. I need someone capable who can learn more about this. Interested?
		string_id message = new string_id (c_stringFile, "s_10");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Definitely!
		boolean hasResponse0 = false;
		if (heroic_sd_intro_rebel_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_12");

			utils.setScriptVar (player, "conversation.heroic_sd_intro_rebel.branchId", 4);

			npcStartConversation (player, npc, "heroic_sd_intro_rebel", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "heroic_sd_intro_rebel")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.heroic_sd_intro_rebel.branchId");

	if (branchId == 4 && heroic_sd_intro_rebel_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.heroic_sd_intro_rebel.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

