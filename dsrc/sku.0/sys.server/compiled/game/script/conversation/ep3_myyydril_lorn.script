// ======================================================================
//
// ep3_myyydril_lorn.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_myyydril_lorn";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_myyydril_lorn_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_condition_completedTalkToLorn (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "ep3_myyydril_lorn_talkto");
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_condition_canTalkToLorn (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "ep3_myyydril_lorn_talkto");
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_myyydril_lorn_action_giveQuestOne (obj_id player, obj_id npc)
{
	// Apply the first quest to the player here
	groundquests.grantQuest(player, "ep3_myyydril_lorn_retrieve_6");
}

// ----------------------------------------------------------------------

void ep3_myyydril_lorn_action_giveSignalOne (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "lorn");
}

// ----------------------------------------------------------------------

void ep3_myyydril_lorn_action_spawnGrievous (obj_id player, obj_id npc)
{
	location selfLoc = getLocation(npc);
	obj_id manager = createObject("object/tangible/theme_park/myyydril/myyydril_grievous_encounter_manager.iff", selfLoc);
	messageTo(manager, "handleStartEncounter", null, 5.0f, false);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_myyydril_lorn_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: My crystal? My crystal?! Do you have it..?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I have it. Here.
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
		{
			//-- NPC: My crystal! [Lorn takes it in his hands.] ... for you alone, my master. For you!
			string_id message = new string_id (c_stringFile, "s_58");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Wait! What's the crystal for?
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What crystal?
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
		{
			//-- NPC: Why do you waste my time! Away with you! I would have my opus if you would only bring me my crystal!
			string_id message = new string_id (c_stringFile, "s_70");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: My crystal! [Lorn takes it in his hands.] ... for you alone, my master. For you!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Wait! What's the crystal for?
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
		{
			//-- NPC: [Lorn points to the lifeless form.] My master. I have named him N-K 'Necrosis'. I must awaken him. I have spent many years trying to wake my master. He'll be so disappointed. I've taken too long. I still haven't been able to string together the right reaction to give him life. Now, I have it.. the crystal!!
			string_id message = new string_id (c_stringFile, "s_62");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is your master? It's just a pile of junk.
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: [Lorn points to the lifeless form.] My master. I have named him N-K 'Necrosis'. I must awaken him. I have spent many years trying to wake my master. He'll be so disappointed. I've taken too long. I still haven't been able to string together the right reaction to give him life. Now, I have it.. the crystal!!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is your master? It's just a pile of junk.
	if (response == "s_64")
	{
		ep3_myyydril_lorn_action_giveSignalOne (player, npc);

		//-- [NOTE] 
		if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
		{
			ep3_myyydril_lorn_action_spawnGrievous (player, npc);

			//-- NPC: [Lorn hisses.] No more talking! [Lorn turns away, whispering.] .. for you, my master! For you!
			string_id message = new string_id (c_stringFile, "s_66");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_myyydril_lorn");

	setCondition (self, CONDITION_CONVERSABLE);
	setName (self, new string_id( "ep3/npc_names", "lorn" ));
	setInvulnerable(self, true);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setName (self, new string_id( "ep3/npc_names", "lorn" ));
	setInvulnerable(self, true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_myyydril_lorn");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_myyydril_lorn_condition_completedTalkToLorn (player, npc))
	{
		//-- NPC: [Lorn hisses.] No more talking! [Lorn turns away, whispering.] .. for you, my master! For you!
		string_id message = new string_id (c_stringFile, "s_11");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_myyydril_lorn_condition__defaultCondition (player, npc))
	{
		//-- NPC: My crystal? My crystal?! Do you have it..?
		string_id message = new string_id (c_stringFile, "s_54");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, I have it. Here.
		boolean hasResponse0 = false;
		if (ep3_myyydril_lorn_condition_canTalkToLorn (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: What crystal?
		boolean hasResponse1 = false;
		if (!ep3_myyydril_lorn_condition_canTalkToLorn (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_56");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_68");

			utils.setScriptVar (player, "conversation.ep3_myyydril_lorn.branchId", 2);

			npcStartConversation (player, npc, "ep3_myyydril_lorn", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_myyydril_lorn")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

	if (branchId == 2 && ep3_myyydril_lorn_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && ep3_myyydril_lorn_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && ep3_myyydril_lorn_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

