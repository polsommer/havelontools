// ======================================================================
//
// boss_terminal_mining_cave_foreman.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.create;
include library.features;
include library.groundquests;
include library.space_quest;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/boss_terminal_mining_cave_foreman";

// ======================================================================
// Script Conditions
// ======================================================================

boolean boss_terminal_mining_cave_foreman_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean boss_terminal_mining_cave_foreman_condition_hasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "outbreak_undead_rancor_boss_fight");
}

// ----------------------------------------------------------------------

boolean boss_terminal_mining_cave_foreman_condition_hasGroup (obj_id player, obj_id npc)
{
	obj_id groupid = getGroupObject(player);
	if(!isValidId(groupid))
	{
		//systemMessageTestingOnly(player, "no group");
		return false;		
	}
	return true;
}

// ----------------------------------------------------------------------

boolean boss_terminal_mining_cave_foreman_condition_hasBossTask (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "u16_nym_themepark_mine_boss", "findForemanMine")
	|| groundquests.isTaskActive(player, "u16_nym_themepark_mine_boss", "killGrandForeman"))
	&& hasCompletedCollectionSlot(player, "kill_nyms_themepark_boss_mine_activate");
}

// ----------------------------------------------------------------------

boolean boss_terminal_mining_cave_foreman_condition_hasQuestAndGroup (obj_id player, obj_id npc)
{
	if(!boss_terminal_mining_cave_foreman_condition_hasGroup(player,npc))
		return false;
	if(!boss_terminal_mining_cave_foreman_condition_hasQuest(player,npc))
		return false;		
	return groundquests.isTaskActive(player, "outbreak_undead_rancor_boss_fight", "defeatUndeadRancor");
}

// ----------------------------------------------------------------------

boolean boss_terminal_mining_cave_foreman_condition_wave_event_active (obj_id player, obj_id npc)
{
	int wave = utils.getIntScriptVar(npc, "waveEventCurrentWave");
	return  wave > 0;
}

// ======================================================================
// Script Actions
// ======================================================================

void boss_terminal_mining_cave_foreman_action_startEvent (obj_id player, obj_id npc)
{
	boss_terminal_mining_cave_foreman_action_foundTerminal(player,npc);
	//Tell the controller we are busy.
	dictionary dict = new dictionary();
	dict.put("player", player);
	messageTo(npc, "waveEventControllerNPCStart", dict, 4, false);
}

// ----------------------------------------------------------------------

void boss_terminal_mining_cave_foreman_action_foundTerminal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasFoundForemanMine");
	obj_id myGroup = getGroupObject(player);
	if(isValidId(myGroup))
	{
		obj_id[] members = getGroupMemberIds(myGroup);

		for(int i = 0; i < members.length; i++)
		{
			if(!isIdValid(members[i]) || !exists(members[i]))
				continue;
		
			if(getDistance(members[i], npc) > 200)
				continue;
				
			if(boss_terminal_mining_cave_foreman_condition_hasBossTask(members[i], npc))
			{
				groundquests.sendSignal(members[i], "hasFoundForemanMine");
			}			
		}	
	}	
}

// ----------------------------------------------------------------------

void boss_terminal_mining_cave_foreman_action_unauthorizedUse (obj_id player, obj_id npc)
{
	string_id barkString = new string_id("theme_park_nym/messages", "terminal_unauthorized");
	chat.chat(npc, barkString);
}

// ----------------------------------------------------------------------

void boss_terminal_mining_cave_foreman_action_busyWithOtherPlayer (obj_id player, obj_id npc)
{
	string_id barkString = new string_id("theme_park_nym/messages", "terminal_busy");
	chat.chat(npc, barkString);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int boss_terminal_mining_cave_foreman_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Terminal busy.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Log Off
	if (response == "s_9")
	{
		//-- [NOTE] 
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			//-- NPC: Have a nice day!
			string_id message = new string_id (c_stringFile, "s_10");
			utils.removeScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int boss_terminal_mining_cave_foreman_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Grand Foreman Terminal

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Call the Grand Foreman
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			boss_terminal_mining_cave_foreman_action_startEvent (player, npc);

			//-- NPC: Command accepted.
			string_id message = new string_id (c_stringFile, "s_37");
			utils.removeScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int boss_terminal_mining_cave_foreman_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Unauthorized terminal access.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Log off.
	if (response == "s_14")
	{
		//-- [NOTE] 
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			//-- NPC: Have a nice day!
			string_id message = new string_id (c_stringFile, "s_16");
			utils.removeScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

messageHandler spawnEnemies()
{
	if(params == null)
	{
		return SCRIPT_CONTINUE;
	}
	
	messageTo(self, "waveEventControllerNPCStart", params, 0, false);	
	return SCRIPT_CONTINUE;
}

messageHandler handleQuestFlavorObjectCleanup()
{
	if(!utils.hasScriptVar(self, "handleQuestFlavorObjectCleanup"))
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id objList[] = utils.getObjIdArrayScriptVar(self, "handleQuestFlavorObjectCleanup");
	if(objList == null || objList.length <= 0)
	{
		return SCRIPT_CONTINUE;
	}	

	for(int i = 0; 1 < objList.length; i++)
	{
		if(!isValidId(objList[i]))
			continue;
		
		messageTo(objList[i], "destroySelf", null, 0, false);
	}
	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (boss_terminal_mining_cave_foreman_condition_wave_event_active (player, npc))
	{
		//-- NPC: Terminal busy.
		string_id message = new string_id (c_stringFile, "s_7");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Log Off
		boolean hasResponse0 = false;
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_9");

			utils.setScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId", 1);

			npcStartConversation (player, npc, "boss_terminal_mining_cave_foreman", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (boss_terminal_mining_cave_foreman_condition_hasBossTask (player, npc))
	{
		//-- NPC: Grand Foreman Terminal
		string_id message = new string_id (c_stringFile, "s_35");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Call the Grand Foreman
		boolean hasResponse0 = false;
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_36");

			utils.setScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId", 3);

			npcStartConversation (player, npc, "boss_terminal_mining_cave_foreman", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
	{
		boss_terminal_mining_cave_foreman_action_unauthorizedUse (player, npc);

		//-- NPC: Unauthorized terminal access.
		string_id message = new string_id (c_stringFile, "s_34");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Log off.
		boolean hasResponse0 = false;
		if (boss_terminal_mining_cave_foreman_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_14");

			utils.setScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId", 5);

			npcStartConversation (player, npc, "boss_terminal_mining_cave_foreman", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "boss_terminal_mining_cave_foreman")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId");

	if (branchId == 1 && boss_terminal_mining_cave_foreman_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && boss_terminal_mining_cave_foreman_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && boss_terminal_mining_cave_foreman_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.boss_terminal_mining_cave_foreman.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

