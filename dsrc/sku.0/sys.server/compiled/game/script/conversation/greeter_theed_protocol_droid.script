// ======================================================================
//
// greeter_theed_protocol_droid.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.35 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.features;
include library.skill;
include library.space_flags;
include library.space_quest;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/greeter_theed_protocol_droid";

// ======================================================================
// Script Conditions
// ======================================================================

boolean greeter_theed_protocol_droid_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_remembersPlayer (obj_id player, obj_id npc)
{
	return ( utils.hasScriptVar( player, "metNewbiePilot" ));
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_speaksMonCal (obj_id player, obj_id npc)
{
	return hasSkill(player, "language_mon_cal");
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_isAnyPilot (obj_id player, obj_id npc)
{
	if ( greeter_theed_protocol_droid_condition_isAnImperialPilot(player, npc) )
		return true;
	
	if ( greeter_theed_protocol_droid_condition_isPrivateerPilot(player, npc) )
		return true;
		
	if ( greeter_theed_protocol_droid_condition_isARebelPilot(player, npc) )
		return true;
	
	return false;
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_isAnImperialPilot (obj_id player, obj_id npc)
{
	return space_flags.isImperialPilot(player);
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_isARebelPilot (obj_id player, obj_id npc)
{
	return space_flags.isRebelPilot(player);
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_isPrivateerPilot (obj_id player, obj_id npc)
{
	return space_flags.isNeutralPilot(player);
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_hasSpaceExpansion (obj_id player, obj_id npc)
{
	return ( features.isSpaceEdition( player ) );
}

// ----------------------------------------------------------------------

boolean greeter_theed_protocol_droid_condition_hasSpaceShip (obj_id player, obj_id npc)
{
	return ( space_quest.hasShip( player ) );
}

// ======================================================================
// Script Actions
// ======================================================================

void greeter_theed_protocol_droid_action_rememberPlayer (obj_id player, obj_id npc)
{
	utils.setScriptVar( player, "metNewbiePilot", true );
}

// ----------------------------------------------------------------------

void greeter_theed_protocol_droid_action_grantQuestOne (obj_id player, obj_id npc)
{
	space_quest.grantQuest ( player, "delivery", "tatooine_newbie_1");
	space_quest.grantNewbieShip( player, "rebel");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.greeter_theed_protocol_droid");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setCondition( self, CONDITION_SPACE_INTERESTING );
	//setName (self, "J1-P0 (a protocol droid)");

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setCondition( self, CONDITION_SPACE_INTERESTING );
	//setName (self, "J1-P0 (a protocol droid)");

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable(self, true);
	faceTo( self, player );
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	setCondition( self, CONDITION_SPACE_INTERESTING );
	
	detachScript (self, "conversation.greeter_theed_protocol_droid");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (greeter_theed_protocol_droid_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "explain");

		//-- NPC: I bid you hello. Master Woodle only speaks Mon Calamari. Master Woodle was once a captain on a freighter, but he is now retired.
		string_id message = new string_id (c_stringFile, "s_2124eaf5");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "greeter_theed_protocol_droid")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.greeter_theed_protocol_droid.branchId");

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.greeter_theed_protocol_droid.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

