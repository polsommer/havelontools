// ======================================================================
//
// prof_medic_11_second.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/prof_medic_11_second";

// ======================================================================
// Script Conditions
// ======================================================================

boolean prof_medic_11_second_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean prof_medic_11_second_condition_playerOnCorrectStep (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "profession_medic_11", "talktosecond");
}

// ----------------------------------------------------------------------

boolean prof_medic_11_second_condition_playercompletedTask (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedTask(player, "profession_medic_11", "talktosecond");
}

// ======================================================================
// Script Actions
// ======================================================================

void prof_medic_11_second_action_givePassSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "profession_medic_11_second_victim");
}

// ----------------------------------------------------------------------

void prof_medic_11_second_action_healnpc (obj_id player, obj_id npc)
{
	playClientEffectObj(player, "clienteffect/prof_medic_21_heal2.cef", npc, "");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int prof_medic_11_second_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh, my head.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Have you been able to stand?
	if (response == "s_20")
	{
		//-- [NOTE] 
		if (prof_medic_11_second_condition__defaultCondition (player, npc))
		{
			//-- NPC: No, not at all. The world is spinning and I feel sick.
			string_id message = new string_id (c_stringFile, "s_22");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ok. I think I can take care of it. Be very still.
			boolean hasResponse0 = false;
			if (prof_medic_11_second_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_8");

				utils.setScriptVar (player, "conversation.prof_medic_11_second.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.prof_medic_11_second.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int prof_medic_11_second_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: No, not at all. The world is spinning and I feel sick.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Ok. I think I can take care of it. Be very still.
	if (response == "s_8")
	{
		prof_medic_11_second_action_healnpc (player, npc);

		//-- [NOTE] 
		if (prof_medic_11_second_condition__defaultCondition (player, npc))
		{
			//-- NPC: Huh. That ... I think I'm feeling a bit better.
			string_id message = new string_id (c_stringFile, "s_11");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rest here for a bit, then go drink lots of fluids.
			boolean hasResponse0 = false;
			if (prof_medic_11_second_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_13");

				utils.setScriptVar (player, "conversation.prof_medic_11_second.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.prof_medic_11_second.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int prof_medic_11_second_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Huh. That ... I think I'm feeling a bit better.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Rest here for a bit, then go drink lots of fluids.
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (prof_medic_11_second_condition__defaultCondition (player, npc))
		{
			prof_medic_11_second_action_givePassSignal (player, npc);

			//-- NPC: Thank you! I shouldn't say this, but I have friends in the Alliance. If you want to do some work for them, talk to Droma Ordo in Anchorhead. You will have to find him, but he will make it worth your while.
			string_id message = new string_id (c_stringFile, "s_15");
			utils.removeScriptVar (player, "conversation.prof_medic_11_second.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.prof_medic_11_second");

	setCondition (self, CONDITION_CONVERSABLE);
//	setCondition (self, CONDITION_INTERESTING);
	setPosture (self, POSTURE_SITTING);
	setInvulnerable (self, true);
	setName (self, "Jorund Redd");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
//	setCondition (self, CONDITION_INTERESTING);
	setInvulnerable (self, true);
	setPosture (self, POSTURE_SITTING);
	setName (self, "Jorund Redd");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.prof_medic_11_second");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (prof_medic_11_second_condition_playercompletedTask (player, npc))
	{
		//-- NPC: I'm going to take some time rest until I feel better.
		string_id message = new string_id (c_stringFile, "s_9");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (prof_medic_11_second_condition_playerOnCorrectStep (player, npc))
	{
		//-- NPC: Oh, my head.
		string_id message = new string_id (c_stringFile, "s_18");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Have you been able to stand?
		boolean hasResponse0 = false;
		if (prof_medic_11_second_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_20");

			utils.setScriptVar (player, "conversation.prof_medic_11_second.branchId", 2);

			npcStartConversation (player, npc, "prof_medic_11_second", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (prof_medic_11_second_condition__defaultCondition (player, npc))
	{
		//-- NPC: Oh.. I can't... see too well. Everything is spinning.
		string_id message = new string_id (c_stringFile, "s_28");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "prof_medic_11_second")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.prof_medic_11_second.branchId");

	if (branchId == 2 && prof_medic_11_second_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && prof_medic_11_second_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && prof_medic_11_second_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.prof_medic_11_second.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

