// ======================================================================
//
// emp_day_reb_colonel.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.31 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/emp_day_reb_colonel";

// ======================================================================
// Script Conditions
// ======================================================================

boolean emp_day_reb_colonel_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_isRebel (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return false;

	if (whichFaction == "Rebel")
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_notReadyForYou (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/emp_day_rebel");
	int task1 = groundquests.getTaskId(questId, "converseContact");
	int task2 = groundquests.getTaskId(questId, "killImperials");
	int task3 = groundquests.getTaskId(questId, "diskGuy1");
	int task4 = groundquests.getTaskId(questId, "disksToContact");
	int task5 = groundquests.getTaskId(questId, "toRebelSpy");

	return (questIsTaskActive(questId, task1, player) ||
	questIsTaskActive(questId, task2, player) ||
	questIsTaskActive(questId, task3, player) || 
	questIsTaskActive(questId, task4, player) ||
	questIsTaskActive(questId, task5, player) ||
	!questIsQuestActive(questId, player) );
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_questCompleted (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/emp_day_rebel");
	return questIsQuestComplete(questId, player);
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_hasTask6 (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/emp_day_rebel");
	int task6 = groundquests.getTaskId(questId, "toRebelColonel");
	int task7 = groundquests.getTaskId(questId, "toSolo");

	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	return (questIsTaskActive(questId, task6, player)	||
	(questIsTaskActive(questId, task7, player) && whichFaction == null) );
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_isNeutral (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_hasTask8 (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/emp_day_rebel");
	int task8 = groundquests.getTaskId(questId, "empDayComplete");
	return questIsTaskActive(questId, task8, player);
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_isImperial (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return false;

	if (whichFaction == "Imperial")
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_hasTask7 (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/emp_day_rebel");
	int task7 = groundquests.getTaskId(questId, "toSolo");
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	return (questIsTaskActive(questId, task7, player) && whichFaction == "Rebel");
}

// ----------------------------------------------------------------------

boolean emp_day_reb_colonel_condition_convertOfficer (obj_id player, obj_id npc)
{
	return (getIntObjVar(player, "event.emp_day.converted_officer") == 1);
}

// ======================================================================
// Script Actions
// ======================================================================

void emp_day_reb_colonel_action_rewardAndEndNow (obj_id player, obj_id npc)
{

	obj_id playerInventory = utils.getInventoryContainer(player);
	obj_id createdObject = createObject("object/tangible/furniture/all/frn_all_banner_rebel.iff", playerInventory, "");

	if(isIdValid(createdObject))
	{	
		groundquests.sendSignal(player, "to_solo");
		groundquests.sendSignal(player, "emp_day_complete");
		removeObjVar(player, "empire_day.waypoint");
		removeObjVar(player, "event.emp_day.han_access");
		setObjVar(player, "event.emp_day.rewarded", 1);
		removeObjVar(player, "event.emp_day.converted_officer");
	}
	else
	{
		sendSystemMessage(player, new string_id("quest/lifeday/lifeday", "full_inv"));	
	}

}

// ----------------------------------------------------------------------

void emp_day_reb_colonel_action_giveSoloAccess (obj_id player, obj_id npc)
{
	setObjVar(player, "event.emp_day.han_access", 0);
	groundquests.sendSignal(player, "to_rebel_colonel");
}

// ----------------------------------------------------------------------

void emp_day_reb_colonel_action_signal6 (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "to_rebel_colonel");
}

// ----------------------------------------------------------------------

void emp_day_reb_colonel_action_rewardAndTwoBanners (obj_id player, obj_id npc)
{
	obj_id playerInventory = utils.getInventoryContainer(player);
	obj_id createdObject = createObject("object/tangible/furniture/all/frn_all_banner_rebel.iff", playerInventory, "");
	obj_id createdObjectTwo = createObject("object/tangible/furniture/all/frn_all_banner_rebel.iff", playerInventory, "");
	
	if(isIdValid(createdObject))
	{	
		if(isIdValid(createdObjectTwo) )
		{
			groundquests.sendSignal(player, "to_solo");
			groundquests.sendSignal(player, "emp_day_complete");
			removeObjVar(player, "empire_day.waypoint");
			removeObjVar(player, "event.emp_day.han_access");
			setObjVar(player, "event.emp_day.rewarded", 1);
			removeObjVar(player, "event.emp_day.converted_officer");
		}
		else
		{
			destroyObject(createdObject);
			sendSystemMessage(player, new string_id("quest/lifeday/lifeday", "full_inv"));
		}

	}
	else
	{
		sendSystemMessage(player, new string_id("quest/lifeday/lifeday", "full_inv"));	
	}
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int emp_day_reb_colonel_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Did you speak to Han Solo? Such an inspiration to have him here. You're lucky you arrived today. I don't think he'll be here long.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. He said you would have something for me?
	if (response == "s_303")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			emp_day_reb_colonel_action_rewardAndTwoBanners (player, npc);

			//-- NPC: We wanted to give you an Alliance banner as a reward for your work. However, since you managed to convince Tellulon's friend to join the Rebellion, I thought I'd give you two banners. May the Force be with you.
			string_id message = new string_id (c_stringFile, "s_307");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. He said you would have something for me?
	if (response == "s_310")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			emp_day_reb_colonel_action_rewardAndEndNow (player, npc);

			//-- NPC: We wanted to give you an Alliance banner as a reward for your work. We appreciate all you've done for us. Hopefully this will be the last Empire Day we'll have to endure.
			string_id message = new string_id (c_stringFile, "s_312");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int emp_day_reb_colonel_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Tellulon's mission is on schedule. Excellent. Han Solo is here to check on the operation and now we have good news.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Han Solo is here? 
	if (response == "s_318")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			//-- NPC: Yes. The Princess has taken a personal interest in this campaign, so he's come to oversee it personally.
			string_id message = new string_id (c_stringFile, "s_320");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Do you think I can meet him?
			boolean hasResponse0 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_322");

				utils.setScriptVar (player, "conversation.emp_day_reb_colonel.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int emp_day_reb_colonel_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes. The Princess has taken a personal interest in this campaign, so he's come to oversee it personally.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Do you think I can meet him?
	if (response == "s_322")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition_isRebel (player, npc))
		{
			emp_day_reb_colonel_action_giveSoloAccess (player, npc);

			//-- NPC: He's not really here on a social call, but I suppose it couldn't hurt. After all, you had a part in the operation's success. He's in the command room. Go on in.
			string_id message = new string_id (c_stringFile, "s_324");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (emp_day_reb_colonel_condition_isNeutral (player, npc))
		{
			//-- NPC: If you were a member of the Rebellion, I'd consider it, but otherwise I'm afraid it would be too much of a risk. You can sign up officially if you'd like.
			string_id message = new string_id (c_stringFile, "s_326");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like that. How do I join the Rebellion?
			boolean hasResponse0 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm not ready to commit to the Rebellion.
			boolean hasResponse1 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let me think out this and get back to you.
			boolean hasResponse2 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_328");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_344");

				utils.setScriptVar (player, "conversation.emp_day_reb_colonel.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int emp_day_reb_colonel_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If you were a member of the Rebellion, I'd consider it, but otherwise I'm afraid it would be too much of a risk. You can sign up officially if you'd like.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like that. How do I join the Rebellion?
	if (response == "s_328")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			emp_day_reb_colonel_action_signal6 (player, npc);

			//-- NPC: Go speak to the Outpost Recruiter then come back and speak to me. Han won't be here for long, so don't delay.
			string_id message = new string_id (c_stringFile, "s_330");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm not ready to commit to the Rebellion.
	if (response == "s_332")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			emp_day_reb_colonel_action_signal6 (player, npc);

			//-- NPC: Are you sure? If you decide not to join you will not be able to meet Han Solo.
			string_id message = new string_id (c_stringFile, "s_334");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I don't want to join the Rebellion and meet Han Solo.
			boolean hasResponse0 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let me think out this and get back to you.
			boolean hasResponse1 = false;
			if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_336");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_340");

				utils.setScriptVar (player, "conversation.emp_day_reb_colonel.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let me think out this and get back to you.
	if (response == "s_344")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			//-- NPC: Understood. Come see me when you're ready, but don't take too long.
			string_id message = new string_id (c_stringFile, "s_346");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int emp_day_reb_colonel_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Are you sure? If you decide not to join you will not be able to meet Han Solo.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't want to join the Rebellion and meet Han Solo.
	if (response == "s_336")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			emp_day_reb_colonel_action_rewardAndEndNow (player, npc);

			//-- NPC: Very well. Let me give you a banner to show our appreciation. Thank you for your help in revealing the true nature of the Empire.
			string_id message = new string_id (c_stringFile, "s_338");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let me think out this and get back to you.
	if (response == "s_340")
	{
		//-- [NOTE] 
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			//-- NPC: Understood. Come see me when you're ready, but don't take too long.
			string_id message = new string_id (c_stringFile, "s_342");
			utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.emp_day_reb_colonel");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.emp_day_reb_colonel");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_isImperial (player, npc))
	{
		//-- NPC: Get out of here, Imperial scum. There's nothing here for you.
		string_id message = new string_id (c_stringFile, "s_293");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_questCompleted (player, npc))
	{
		//-- NPC: Thank you for your help. The Rebellion needs more people like you.
		string_id message = new string_id (c_stringFile, "s_295");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_hasTask8 (player, npc))
	{
		//-- NPC: Did you speak to Han Solo? Such an inspiration to have him here. You're lucky you arrived today. I don't think he'll be here long.
		string_id message = new string_id (c_stringFile, "s_299");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes. He said you would have something for me?
		boolean hasResponse0 = false;
		if (emp_day_reb_colonel_condition_convertOfficer (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Yes. He said you would have something for me?
		boolean hasResponse1 = false;
		if (!emp_day_reb_colonel_condition_convertOfficer (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_303");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_310");

			utils.setScriptVar (player, "conversation.emp_day_reb_colonel.branchId", 3);

			npcStartConversation (player, npc, "emp_day_reb_colonel", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_notReadyForYou (player, npc))
	{
		//-- NPC: Sorry, I don't have time to talk.
		string_id message = new string_id (c_stringFile, "s_314");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_hasTask6 (player, npc))
	{
		//-- NPC: Tellulon's mission is on schedule. Excellent. Han Solo is here to check on the operation and now we have good news.
		string_id message = new string_id (c_stringFile, "s_316");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Han Solo is here? 
		boolean hasResponse0 = false;
		if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_318");

			utils.setScriptVar (player, "conversation.emp_day_reb_colonel.branchId", 7);

			npcStartConversation (player, npc, "emp_day_reb_colonel", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition_hasTask7 (player, npc))
	{
		//-- NPC: You shouldn't be talking to me, you should be talking to Han Solo while he's still here. 
		string_id message = new string_id (c_stringFile, "s_348");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_reb_colonel_condition__defaultCondition (player, npc))
	{
		//-- NPC: I don't have time to talk. You should relax. Perhaps get a drink at the cantina.
		string_id message = new string_id (c_stringFile, "s_350");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "emp_day_reb_colonel")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

	if (branchId == 3 && emp_day_reb_colonel_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && emp_day_reb_colonel_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && emp_day_reb_colonel_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && emp_day_reb_colonel_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && emp_day_reb_colonel_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.emp_day_reb_colonel.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

