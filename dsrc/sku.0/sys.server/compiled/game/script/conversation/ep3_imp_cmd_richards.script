// ======================================================================
//
// ep3_imp_cmd_richards.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_imp_cmd_richards";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_imp_cmd_richards_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_imp_cmd_richards_condition_isOnTask02 (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "ep3_imp_cmd_richards", 3);
}

// ----------------------------------------------------------------------

boolean ep3_imp_cmd_richards_condition_hasCompletedQuest01 (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "ep3_imp_cmd_richards");
}

// ----------------------------------------------------------------------

boolean ep3_imp_cmd_richards_condition_isOnQuest (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedTask(player, "ep3_imp_cmd_richards", 0);
}

// ----------------------------------------------------------------------

boolean ep3_imp_cmd_richards_condition_isOnTask01 (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "ep3_imp_cmd_richards", 0);
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_imp_cmd_richards_action_doSignal02 (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "reportToRichards");
}

// ----------------------------------------------------------------------

void ep3_imp_cmd_richards_action_doSignal01 (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "readyForRichards");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_imp_cmd_richards_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: So you made it back in one piece. What have you to report?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I managed to get the blood sample and the records.
	if (response == "s_45")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "salute1");

			ep3_imp_cmd_richards_action_doSignal02 (player, npc);

			//-- NPC: Excellent job, soldier. With my brilliant planning and your ability to follow orders, I never had a doubt that we would succeed. I need you to rush the blood sample and the medical reports over to Price right away. Well, don't just stand there...move it, soldier!
			string_id message = new string_id (c_stringFile, "s_47");
			utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_imp_cmd_richards_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You must be %NU. I understand that you are assisting Price with collecting his samples. No...don't bother trying to explain, I am well briefed on the entire situation. I have formulated the plan of attack, run all the simulations, and confirmed that my plan cannot fail.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Right. Now maybe you would like to fill me in.
	if (response == "s_51")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_once");

			//-- NPC: What! Oh, yes...I do suppose you need to know the plan. It is simple, we have secured the pass codes for the Avatar Space Platform. You are to fly to the platform, use the pass codes to gain access, and investigate the station for signs of Trandoshan treachery.
			string_id message = new string_id (c_stringFile, "s_53");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Won't they notice me sneaking around?
			boolean hasResponse0 = false;
			if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_55");

				utils.setScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_imp_cmd_richards_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What! Oh, yes...I do suppose you need to know the plan. It is simple, we have secured the pass codes for the Avatar Space Platform. You are to fly to the platform, use the pass codes to gain access, and investigate the station for signs of Trandoshan treachery.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Won't they notice me sneaking around?
	if (response == "s_55")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "explain");

			//-- NPC: Yes...well they would have except we have been monitoring a situation taking place on the platform. Apparently the Wookiee resistance has somehow gotten hold of some passwords and have staged their own assault on the platform. This lends us the perfect opportunity to use the chaos of the situation to find out what we need to know.
			string_id message = new string_id (c_stringFile, "s_57");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: And what exactly is it that I need to do?
			boolean hasResponse0 = false;
			if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				utils.setScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_imp_cmd_richards_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes...well they would have except we have been monitoring a situation taking place on the platform. Apparently the Wookiee resistance has somehow gotten hold of some passwords and have staged their own assault on the platform. This lends us the perfect opportunity to use the chaos of the situation to find out what we need to know.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: And what exactly is it that I need to do?
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "explain");

			//-- NPC: Simple. We need a blood sample from a Wookiee captive who has already been through the medical procedures. And then we need the medical records of the station from the medical lab. We believe that Wookiees who have gone through the medical procedure are held in a containment area near the medical labs.
			string_id message = new string_id (c_stringFile, "s_62");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Blood sample then medical records, check.
			boolean hasResponse0 = false;
			if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I don't think I am ready for this yet.
			boolean hasResponse1 = false;
			if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_68");

				utils.setScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_imp_cmd_richards_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Simple. We need a blood sample from a Wookiee captive who has already been through the medical procedures. And then we need the medical records of the station from the medical lab. We believe that Wookiees who have gone through the medical procedure are held in a containment area near the medical labs.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Blood sample then medical records, check.
	if (response == "s_64")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "salute1");

			ep3_imp_cmd_richards_action_doSignal01 (player, npc);

			//-- NPC: Once you have collected both the sample and the records return to me. Remember that station is going to be in shambles and everyone up there will probably try to kill you, so watch your back. Good luck, soldier.
			string_id message = new string_id (c_stringFile, "s_66");
			utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't think I am ready for this yet.
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "pound_fist_palm");

			//-- NPC: Listen, soldier. We do not have a lot of time. There is no way to know how long the Wookiee resistance fighters will continue their assault on the platform. The situation really needs to be taken advantage of. You take care of your other obligations and get back here right away. 
			string_id message = new string_id (c_stringFile, "s_70");
			utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_imp_cmd_richards");

	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	setInvulnerable (self, true);
	setName(self, "Commander Richards");

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	setInvulnerable (self, true);
	setName(self, "Commander Richards");

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);
	faceTo(self, player);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_imp_cmd_richards");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_imp_cmd_richards_condition_hasCompletedQuest01 (player, npc))
	{
		doAnimationAction (npc, "wave_on_dismissing");

		//-- NPC: Soldier, you should know better then speaking to your superior without permission. Just because you served me well in the past does not give you free reign. I have no need of you at this time. If that changes I will let you know.
		string_id message = new string_id (c_stringFile, "s_58");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_imp_cmd_richards_condition_isOnTask02 (player, npc))
	{
		doAnimationAction (npc, "rub_chin_thoughtful");

		//-- NPC: So you made it back in one piece. What have you to report?
		string_id message = new string_id (c_stringFile, "s_275");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I managed to get the blood sample and the records.
		boolean hasResponse0 = false;
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_45");

			utils.setScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId", 2);

			npcStartConversation (player, npc, "ep3_imp_cmd_richards", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_imp_cmd_richards_condition_isOnQuest (player, npc))
	{
		doAnimationAction (npc, "point_accusingly");

		//-- NPC: What is your major malfunction, soldier? You are supposed to be on the Avatar Space Platform getting a blood sample and those medical records. Get up there on the double!
		string_id message = new string_id (c_stringFile, "s_276");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_imp_cmd_richards_condition_isOnTask01 (player, npc))
	{
		doAnimationAction (npc, "rub_chin_thoughtful");

		//-- NPC: You must be %NU. I understand that you are assisting Price with collecting his samples. No...don't bother trying to explain, I am well briefed on the entire situation. I have formulated the plan of attack, run all the simulations, and confirmed that my plan cannot fail.
		string_id message = new string_id (c_stringFile, "s_277");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Right. Now maybe you would like to fill me in.
		boolean hasResponse0 = false;
		if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_51");

			utils.setScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId", 5);

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcStartConversation (player, npc, "ep3_imp_cmd_richards", null, pp, responses);
		}
		else
		{
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_imp_cmd_richards_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "wave_on_dismissing");

		//-- NPC: You are not authorized to speak with me. I suggest you move along before I have you removed.
		string_id message = new string_id (c_stringFile, "s_278");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_imp_cmd_richards")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

	if (branchId == 2 && ep3_imp_cmd_richards_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && ep3_imp_cmd_richards_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && ep3_imp_cmd_richards_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && ep3_imp_cmd_richards_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && ep3_imp_cmd_richards_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_imp_cmd_richards.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

