// ======================================================================
//
// story_arc_chapter_three_pilot.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.group;
include library.instance;
include library.space_dungeon;
include library.space_dungeon_data;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/story_arc_chapter_three_pilot";

// ======================================================================
// Script Conditions
// ======================================================================

boolean story_arc_chapter_three_pilot_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean story_arc_chapter_three_pilot_condition_travelToVolcano (obj_id player, obj_id npc)
{
	if (groundquests.isTaskActive(player, "som_story_arc_chapter_three_03", "volcano_arena_one"))
	{
		instance.flagPlayerForInstance(player, "mustafar_volcano");
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean story_arc_chapter_three_pilot_condition_travelToVolcanoTwo (obj_id player, obj_id npc)
{
	
	if (groundquests.hasCompletedTask(player, "som_story_arc_chapter_three_03", "volcano_arena_one") ||
		 groundquests.hasCompletedQuest(player, "som_story_arc_chapter_three_03"))
	{
		instance.flagPlayerForInstance(player, "mustafar_volcano");
		return true;
	}
	else
		return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void story_arc_chapter_three_pilot_action_sendFirstSignal (obj_id player, obj_id npc)
{
	if(group.isGrouped(player))
	{
		resizeable obj_id[] members = group.getPCMembersInRange(player, 80f);
		if ( members != null && members.length > 0 )
		{
			int numInGroup = members.length;
			if (numInGroup < 1)
				return;

			for (int i = 0; i < numInGroup; i++)
			{
				obj_id thisMember = members[i];
				if(groundquests.isTaskActive(thisMember, "som_story_arc_chapter_three_03", "volcano_arena_one"))
				{
					groundquests.sendSignal(thisMember, "volcano_arena_pilot");
				}
			}
		}
	}
	else
	{
		if(groundquests.isTaskActive(player, "som_story_arc_chapter_three_03", "volcano_arena_one"))
		{
			groundquests.sendSignal(player, "volcano_arena_pilot");
				return;
		}
	}
	return;
}

// ----------------------------------------------------------------------

void story_arc_chapter_three_pilot_action_sendGroupToVolcano (obj_id player, obj_id npc)
{
	instance.requestInstanceMovement(player, "mustafar_volcano");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int story_arc_chapter_three_pilot_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You want to go back? Are you ready to go now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am ready.
	if (response == "s_29")
	{
		story_arc_chapter_three_pilot_action_sendFirstSignal (player, npc);

		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "thumb_up");

			story_arc_chapter_three_pilot_action_sendGroupToVolcano (player, npc);

			//-- NPC: That is what I like to hear. Nothing better than a nice crater flight.
			string_id message = new string_id (c_stringFile, "s_31");
			utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Not yet.
	if (response == "s_30")
	{
		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			//-- NPC: Just let me know when you want to go back.
			string_id message = new string_id (c_stringFile, "s_32");
			utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int story_arc_chapter_three_pilot_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Menddle is my name and flying is my game. If you need to get somewhere in a hurry, I am the...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That's great but I am in a hurry.
	if (response == "s_18")
	{
		doAnimationAction (player, "wave_on_dismissing");

		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "salute1");

			//-- NPC: Well then, let's not waste anytime with idle chitchat. Just tell me where you need to go and leave the rest to me.
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I need to be dropped off in the crater of that volcano.
			boolean hasResponse0 = false;
			if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				utils.setScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int story_arc_chapter_three_pilot_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well then, let's not waste anytime with idle chitchat. Just tell me where you need to go and leave the rest to me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I need to be dropped off in the crater of that volcano.
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "snap_finger1");

			//-- NPC: Volcano crater flight, eh? Lava shooting up all around us. Intense heat. High risk factor. That will be no problem at all. One thing I learned about flying around this rock is that if you come in low, the heat from the lava helps keep your ship up...most of the time.
			string_id message = new string_id (c_stringFile, "s_24");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That's great. But I really need to get up there...now!
			boolean hasResponse0 = false;
			if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				utils.setScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int story_arc_chapter_three_pilot_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Volcano crater flight, eh? Lava shooting up all around us. Intense heat. High risk factor. That will be no problem at all. One thing I learned about flying around this rock is that if you come in low, the heat from the lava helps keep your ship up...most of the time.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That's great. But I really need to get up there...now!
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "slow_down");

			//-- NPC: Say no more...say no more. We can leave at once. Hold onto your hat...or whatever. This is going to be a bumpy ride. Is your party ready to go?
			string_id message = new string_id (c_stringFile, "s_28");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yep, let's fly.
			boolean hasResponse0 = false;
			if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Not yet.
			boolean hasResponse1 = false;
			if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_34");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int story_arc_chapter_three_pilot_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Say no more...say no more. We can leave at once. Hold onto your hat...or whatever. This is going to be a bumpy ride. Is your party ready to go?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yep, let's fly.
	if (response == "s_34")
	{
		story_arc_chapter_three_pilot_action_sendFirstSignal (player, npc);

		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "celebrate");

			story_arc_chapter_three_pilot_action_sendGroupToVolcano (player, npc);

			//-- NPC: That is what I like to hear. Nothing better than a nice crater flight.
			string_id message = new string_id (c_stringFile, "s_36");
			utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Not yet.
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			//-- NPC: Well, then we better wait until they all show.
			string_id message = new string_id (c_stringFile, "s_40");
			utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.story_arc_chapter_three_pilot");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setCondition( self, CONDITION_INTERESTING );
	setName (self, "Master Pilot Menddle");

	if (!hasObjVar(self, "space_dungeon.ticket.point"))
		setObjVar(self, "space_dungeon.ticket.point", "mustafar");
	if (!hasObjVar(self, "space_dungeon.ticket.dungeon"))
		setObjVar(self, "space_dungeon.ticket.dungeon", "volcano_battlefield");
		
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setCondition( self, CONDITION_INTERESTING );
	setName (self, "Master Pilot Menddle");

	if (!hasObjVar(self, "space_dungeon.ticket.point"))
		setObjVar(self, "space_dungeon.ticket.point", "mustafar");
	if (!hasObjVar(self, "space_dungeon.ticket.dungeon"))
		setObjVar(self, "space_dungeon.ticket.dungeon", "volcano_battlefield");
		
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.story_arc_chapter_three_pilot");

	return SCRIPT_CONTINUE;
}

trigger OnClusterWideDataResponse(string manage_name, string dungeon_type, int request_id, string[] element_name_list, dictionary[] dungeon_data, int lock_key)
{
	// This trigger is fired whenever a request for space dungeon travel has been made.
	LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse");

	// Get the player that initiated this trigger.
	obj_id player = space_dungeon.getDungeonTraveler(self, request_id);
	if (!isIdValid(player) || !player.isAuthoritative())
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- player is invalid or not authoritative.");
		releaseClusterWideDataLock("dungeon", lock_key);

		if (isIdValid(player))
			space_dungeon.cleanupPlayerTicketObjvars(player);

		return SCRIPT_CONTINUE;
	}

	obj_id ticket = null;

	if (hasObjVar(player, space_dungeon.VAR_TICKET_USED))
		ticket = getObjIdObjVar(player, space_dungeon.VAR_TICKET_USED);
	else
	{
		//-- player can be used as the ticket, and carries all the necessary ticket information as objvars
		ticket = player;
	}

	// Make sure the player ticket is still valid
	if (!isIdValid(ticket) || !ticket.isAuthoritative())
	{
		sendSystemMessage(player, space_dungeon.SID_ILLEGAL_TICKET);
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}

	if (!manage_name.equals("dungeon"))
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- ignorning manage_name " + manage_name + " because it is not dungeon.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}
	if (request_id < 1)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- invalid request_id value of " + request_id);
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}
	if (dungeon_data == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon_data is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}
	if (element_name_list == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- element_name_list is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}
	if (dungeon_type == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon_type is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock("dungeon", lock_key);

		return SCRIPT_CONTINUE;
	}

	// The dungeon type is the dungeon name with a wildcard search (ie: dungeon_name*)
	string dungeon_name = dungeon_type.substring(0, dungeon_type.length() - 1);
	//LOG("space_dungeon", "dungeon_name ->" + dungeon_name);

	// Pull the data we need from the dictionary.
	for (int i = 0; i < dungeon_data.length; i++)
	{
		// Check to make certain that the name is in the dungeon datatable.
		if (false == space_dungeon_data.isValidDungeon(dungeon_name))
		{
			LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon name of " + dungeon_name + " is not in the dungeon datatable.");
			break;
		}
		dictionary dungeon = dungeon_data[i];
		obj_id dungeon_id = dungeon.getObjId("dungeon_id");
		//int participants = dungeon.getInt("participants");
		int session_id = dungeon.getInt("session_id");
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- session_id ->" + session_id + " dungeon_instance ->" + element_name_list[i]);
		float[] dungeon_position = {dungeon.getInt("position_x"), dungeon.getInt("position_y"), dungeon.getInt("position_z")};
		if (!isIdValid(dungeon_id))
		{
			LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- bad data found for dungeon entry " + i + ". Ignoring.");
			continue;
		}
		if (session_id < 1)
		{
			// Mark the player with his dungeon session id
			setObjVar(player, space_dungeon.VAR_SESSION_ID, lock_key);

			// Update the cluster data with the session_id.
			dictionary dungeon_update = new dictionary();
			dungeon_update.put("session_id", lock_key);
			updateClusterWideData("dungeon", element_name_list[i], dungeon_update, lock_key);

			// Release the lock on the dungeon data
			releaseClusterWideDataLock("dungeon", lock_key);

			// Send a message to the dungeon to mark it's session id.  After this is acknowledged, the transport starts.
			dictionary d = new dictionary();
			d.put("session_id", lock_key);
			d.put("request_id", request_id);
			d.put("player", player);
			d.put("ticket_collector", self);
			if (hasObjVar(ticket, space_dungeon.VAR_TICKET_QUEST_TYPE))
				d.put("quest_type", getStringObjVar(ticket, space_dungeon.VAR_TICKET_QUEST_TYPE));
			messageTo(dungeon_id, "msgSetSessionId", d, 0.0f, false);

			return SCRIPT_CONTINUE;
		}
	}

	// Release the lock on the dungeon data
	releaseClusterWideDataLock("dungeon", lock_key);

	// Clean up the player's ticket data
	space_dungeon.cleanupPlayerTicketObjvars(player);
	space_dungeon.removeDungeonTraveler(self, request_id);

	// Could not find a dungeon.  Check for a "fictional" reason to deny entry. If that doesn't exist, give the
	// generic response.
	string_id success = space_dungeon_data.getDungeonFailureString(dungeon_name);
	if (success == null)
		sendSystemMessage(player, space_dungeon.SID_UNABLE_TO_FIND_DUNGEON);
	else
		sendSystemMessage(player, success);

	return SCRIPT_CONTINUE;
}


/***** MESSAGEHANDLERS *************************************************/
messageHandler msgStartDungeonTravel()
{
	int session_id = params.getInt("session_id");
	LOG("space_dungeon", "msgStartDungeonTravel -- session_id ->" + session_id);

	obj_id dungeon_id = params.getObjId("dungeon_id");
	if (!isIdValid(dungeon_id))
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- dungeon_id is invalid for " + self + ".");
		return SCRIPT_CONTINUE;
	}
	string dungeon_name = params.getString("dungeon_name");
	if (dungeon_id == null)
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- dungeon_name is null for " + self + ".");
		return SCRIPT_CONTINUE;
	}
	int request_id = params.getInt("request_id");
	obj_id player = space_dungeon.getDungeonTraveler(self, request_id);
	if (!isIdValid(player))
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- player is null for " + self);
		return SCRIPT_CONTINUE;
	}
	space_dungeon.removeDungeonTraveler(self, request_id);
	if (player.isAuthoritative())
	{
		location dungeon_loc = params.getLocation("dungeon_loc");
		if (dungeon_loc == null)
		{
			LOG("space_dungeon", "travel_space_dungeon.msgStartDungeonTravel -- location is null for " + self + ".");
			return SCRIPT_CONTINUE;
		}

		space_dungeon.movePlayerGroupToDungeon(player, dungeon_id, dungeon_name, dungeon_loc);
	}

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (story_arc_chapter_three_pilot_condition_travelToVolcanoTwo (player, npc))
	{
		doAnimationAction (npc, "snap_finger1");

		//-- NPC: You want to go back? Are you ready to go now?
		string_id message = new string_id (c_stringFile, "s_7");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I am ready.
		boolean hasResponse0 = false;
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Not yet.
		boolean hasResponse1 = false;
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_29");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_30");

			utils.setScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId", 1);

			npcStartConversation (player, npc, "story_arc_chapter_three_pilot", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (story_arc_chapter_three_pilot_condition_travelToVolcano (player, npc))
	{
		doAnimationAction (npc, "pose_proudly");

		//-- NPC: Menddle is my name and flying is my game. If you need to get somewhere in a hurry, I am the...
		string_id message = new string_id (c_stringFile, "s_16");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: That's great but I am in a hurry.
		boolean hasResponse0 = false;
		if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_18");

			utils.setScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId", 4);

			npcStartConversation (player, npc, "story_arc_chapter_three_pilot", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (story_arc_chapter_three_pilot_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "pound_fist_chest");

		//-- NPC: Menddle is my name and flying is my game. If you need to get somewhere in a hurry, I am the man...well, Mon Cal, anyways. Don't be fooled into letting someone else fly you around this rock. No job is too hard; no location too unattainable.
		string_id message = new string_id (c_stringFile, "s_42");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "story_arc_chapter_three_pilot")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

	if (branchId == 1 && story_arc_chapter_three_pilot_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && story_arc_chapter_three_pilot_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && story_arc_chapter_three_pilot_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && story_arc_chapter_three_pilot_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && story_arc_chapter_three_pilot_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.story_arc_chapter_three_pilot.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

