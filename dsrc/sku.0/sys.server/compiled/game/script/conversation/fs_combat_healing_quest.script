// ======================================================================
//
// fs_combat_healing_quest.script
// Copyright 2003, Sony Online Entertainment
// All Rights Reserved.
//
// DO NOT EDIT THIS AUTO-GENERATED FILE.  PLEASE USE THE CONVERATION EDITOR!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.fs_quests;
include library.quests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/fs_combat_healing_quest";

// ======================================================================
// Script Conditions
// ======================================================================

boolean fs_combat_healing_quest_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_canTalkToVillagers (obj_id player, obj_id npc)
{
	return fs_quests.isVillageEligible(player);
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_Finished (obj_id player, obj_id npc)
{
	return quests.isComplete("fs_combat_healing_finish",player);
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_inProgress (obj_id player, obj_id npc)
{
	if (hasObjVar(player,"quest.fs_combat_healing.totalhealed"))
	{
		int totalhealed = getIntObjVar(player,"quest.fs_combat_healing.totalhealed");
		if ( totalhealed < 50 && quests.isActive("fs_combat_healing_1",player)) return true;
		else if ( totalhealed < 100 && quests.isActive("fs_combat_healing_2",player)) return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_hasCompletedFirstSet (obj_id player, obj_id npc)
{
	if (hasObjVar(player,"quest.fs_combat_healing.totalhealed"))
	{
		int totalhealed = getIntObjVar(player,"quest.fs_combat_healing.totalhealed");
		if (totalhealed >= 50 && !quests.isComplete("fs_combat_healing_1",player))
		{
			return true;
		}
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_intentroyCheck (obj_id player, obj_id npc)
{

	obj_id inv = utils.getInventoryContainer(player);
	int freeSpace = getVolumeFree(inv);
	if (freeSpace<1)
	{
		if (hasObjVar(player,"quest.fs_combat_healing.totalhealed"))
		{
			int totalhealed = getIntObjVar(player,"quest.fs_combat_healing.totalhealed");
			//if ( totalhealed >= 50 && !quests.isComplete("fs_combat_healing_1",player)) return true;
			if ( totalhealed >= 100 && !quests.isComplete("fs_combat_healing_2",player)) return true;
		}
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_hasCompletedSecondSet (obj_id player, obj_id npc)
{
	if (hasObjVar(player,"quest.fs_combat_healing.totalhealed"))
	{
		int totalhealed = getIntObjVar(player,"quest.fs_combat_healing.totalhealed");
		if (totalhealed >= 100 && quests.isComplete("fs_combat_healing_1",player))
		{
			return true;
		}
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_ableToDoQuest (obj_id player, obj_id npc)
{	
	return fs_quests.hasQuestAccepted(player);
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_doneFirstSet (obj_id player, obj_id npc)
{
	if (quests.canActivate("fs_combat_healing_2",player) && quests.isComplete("fs_combat_healing_1",player) )
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean fs_combat_healing_quest_condition_hasMedicSkill (obj_id player, obj_id npc)
{
	return hasSkill(player, "science_medic_novice");
}

// ======================================================================
// Script Actions
// ======================================================================

void fs_combat_healing_quest_action_giveQuest1 (obj_id player, obj_id npc)
{
	quests.activate("fs_combat_healing_1",player,npc);
	fs_quests.setQuestAccepted(player);
	attachScript(player, "quest.force_sensitive.fs_combat_healing");
	setObjVar(player,"quest.fs_combat_healing.totalhealed",0);
}

// ----------------------------------------------------------------------

void fs_combat_healing_quest_action_giveQuest2 (obj_id player, obj_id npc)
{
	quests.activate("fs_combat_healing_2",player,npc);
}

// ----------------------------------------------------------------------

void fs_combat_healing_quest_action_giveReward (obj_id player, obj_id npc)
{
	obj_id playerInventory = utils.getInventoryContainer(player);
	obj_id createdObject = createObject("object/tangible/item/quest/force_sensitive/bacta_tank.iff", playerInventory, "");	
	quests.complete("fs_combat_healing_2",player,true);
	detachScript(player, "quest.force_sensitive.fs_combat_healing");
}

// ----------------------------------------------------------------------

void fs_combat_healing_quest_action_unlockMedicBranch (obj_id player, obj_id npc)
{
	fs_quests.unlockBranch(player, "force_sensitive_heightened_senses_healing");
	quests.complete("fs_combat_healing_1",player,true);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

string fs_combat_healing_quest_tokenTO_numberHealed (obj_id player, obj_id npc)
{
	int totalhealed = -1;
	if (hasObjVar(player,"quest.fs_combat_healing.totalhealed"))
	{
		totalhealed = getIntObjVar(player,"quest.fs_combat_healing.totalhealed");
	}
	if (totalhealed <= 1)
		return localize (new string_id ("quest/force_sensitive/fs_medic", "combat_healing_just_started"));
	string healingCountPartOne = localize (new string_id ("quest/force_sensitive/fs_medic", "combat_healing_count_part1"));
	string healingCountPartTwo = localize (new string_id ("quest/force_sensitive/fs_medic", "combat_healing_count_part2"));
	return  healingCountPartOne + " " + totalhealed + " " + healingCountPartTwo;
}

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "npc.conversation.fs_combat_healing_quest");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "npc.conversation.fs_combat_healing_quest");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	if (ai_lib.isInCombat (self) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (!fs_combat_healing_quest_condition_canTalkToVillagers (player, self))
	{
		//-- NPC: What? Do I look like I have time to chit chat?!?
		string_id message = new string_id (c_stringFile, "s_48b1807b");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_Finished (player, self))
	{
		//-- NPC: Thank you! Thank you so much for your help! Can't talk much, still have much to do.
		string_id message = new string_id (c_stringFile, "s_7263868e");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_inProgress (player, self))
	{
		//-- NPC: I see, I see, yes very good, it looks like %TO
		string_id message = new string_id (c_stringFile, "s_e6d3592a");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Okay.
		boolean hasResponse0 = false;
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_67e6df55");

			setObjVar (player, "conversation.fs_combat_healing_quest.branchId", 3);

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (self);
			pp.other.set (fs_combat_healing_quest_tokenTO_numberHealed (player, self));

			npcStartConversation (player, self, "fs_combat_healing_quest", null, pp, responses);
		}
		else
		{
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (self);
			pp.other.set (fs_combat_healing_quest_tokenTO_numberHealed (player, self));

			chat.chat (self, player, null, null, pp);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_intentroyCheck (player, self))
	{
		//-- NPC: Huh? I can't deal with you if you don't have any room to hold things, clear up some room and come back! And hurry, I'm not sure how long we have.
		string_id message = new string_id (c_stringFile, "s_a7b82bb9");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_hasCompletedSecondSet (player, self))
	{
		fs_combat_healing_quest_action_giveReward (player, self);

		//-- NPC: Ah! Yes, you're back! You've done so much, I happen to have an extra tank that we don't have room for, I'm sure a gifted healer such as yourself will find a good place for it.
		string_id message = new string_id (c_stringFile, "s_5b948c11");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_hasCompletedFirstSet (player, self))
	{
		fs_combat_healing_quest_action_unlockMedicBranch (player, self);

		//-- NPC: Hmm... I see the Force has gifted you as a healer. You seem to have unlocked some potential in yourself. I wish I could guide you more, but that is all I can do for you. There is still much to do, let me know if you would like to help some more.
		string_id message = new string_id (c_stringFile, "s_8d7b6d3");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_doneFirstSet (player, self))
	{
		//-- NPC: Hmm... I can tell you are a great healer, I may have something else for you if you are interested in helping some more.
		string_id message = new string_id (c_stringFile, "s_6a7931f2");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Sure, I'll help.
		boolean hasResponse0 = false;
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Sorry, maybe later.
		boolean hasResponse1 = false;
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_aa2e6c00");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_2e7fd1c");

			setObjVar (player, "conversation.fs_combat_healing_quest.branchId", 8);

			npcStartConversation (player, self, "fs_combat_healing_quest", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!fs_combat_healing_quest_condition_hasMedicSkill (player, self))
	{
		//-- NPC: You don't seem to have any medical training at all. I'm sorry, but I don't think you are going to be able to help me
		string_id message = new string_id (c_stringFile, "s_14e60463");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition_ableToDoQuest (player, self))
	{
		//-- NPC: Who? Oh, you seem far too busy to help me now, if you have time please see if there are any other medics available.
		string_id message = new string_id (c_stringFile, "s_5b2d3e0f");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_combat_healing_quest_condition__defaultCondition (player, self))
	{
		//-- NPC: Huh? Oh! Great! More medics! The troops are in desperate need of support. Are you here to provide the medical support?
		string_id message = new string_id (c_stringFile, "s_7ed32afc");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, I want to help.
		boolean hasResponse0 = false;
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Sorry, no.
		boolean hasResponse1 = false;
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_8fddaea0");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_d4d1a11f");

			setObjVar (player, "conversation.fs_combat_healing_quest.branchId", 13);

			npcStartConversation (player, self, "fs_combat_healing_quest", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "fs_combat_healing_quest")
		return SCRIPT_CONTINUE;

	int branchId = getIntObjVar (player, "conversation.fs_combat_healing_quest.branchId");

	//-- [BRANCH NOTE] 
	//-- NPC: I see, I see, yes very good, it looks like %TO
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Okay.
	if (branchId == 3 && response == "s_67e6df55")
	{
		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Keep at it!
			string_id message = new string_id (c_stringFile, "s_e734fdf3");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'I see, I see, yes very good, it looks like %TO' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Hmm... I can tell you are a great healer, I may have something else for you if you are interested in helping some more.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure, I'll help.
	if (branchId == 8 && response == "s_aa2e6c00")
	{
		fs_combat_healing_quest_action_giveQuest2 (player, self);

		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Brilliant! I need you to, well to help the troops more. If you can help out a total of 100 times that would be wonderful.
			string_id message = new string_id (c_stringFile, "s_3fd56843");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Hmm... I can tell you are a great healer, I may have something else for you if you are interested in helping some more.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Hmm... I can tell you are a great healer, I may have something else for you if you are interested in helping some more.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sorry, maybe later.
	if (branchId == 8 && response == "s_2e7fd1c")
	{
		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Well, let me know if you change your mind!
			string_id message = new string_id (c_stringFile, "s_671a071f");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Hmm... I can tell you are a great healer, I may have something else for you if you are interested in helping some more.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Huh? Oh! Great! More medics! The troops are in desperate need of support. Are you here to provide the medical support?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I want to help.
	if (branchId == 13 && response == "s_8fddaea0")
	{
		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Help? Yes, you can help! What I need you to help with is troop support. This may put you in direct harms way, and you won't be able to help the other villagers with their tasks, but I will make sure Noldan helps you to develop your healing abilities even more. Are you sure?
			string_id message = new string_id (c_stringFile, "s_ad2d5f2b");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, I'm sure.
			boolean hasResponse0 = false;
			if (fs_combat_healing_quest_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: On second thought...
			boolean hasResponse1 = false;
			if (fs_combat_healing_quest_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_25b83816");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5d4f7fdb");

				setObjVar (player, "conversation.fs_combat_healing_quest.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Huh? Oh! Great! More medics! The troops are in desperate need of support. Are you here to provide the medical support?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Huh? Oh! Great! More medics! The troops are in desperate need of support. Are you here to provide the medical support?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sorry, no.
	if (branchId == 13 && response == "s_d4d1a11f")
	{
		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Too bad, too bad, we need some help here, but I'm sure you already realized that. Excuse me, I have much to do.
			string_id message = new string_id (c_stringFile, "s_df4917e");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Huh? Oh! Great! More medics! The troops are in desperate need of support. Are you here to provide the medical support?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Help? Yes, you can help! What I need you to help with is troop support. This may put you in direct harms way, and you won't be able to help the other villagers with their tasks, but I will make sure Noldan helps you to develop your healing abilities even more. Are you sure?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I'm sure.
	if (branchId == 14 && response == "s_25b83816")
	{
		fs_combat_healing_quest_action_giveQuest1 (player, self);

		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: Yes! Yes! I need you to go find the groups of defenders and join them, you will need to support them while they are defending us as any good medic would. Be careful, you will be in harms way sometimes! If you can help out fifty times that would be a great help! Oh, and you can come back and talk to me or the droids to track your progress!
			string_id message = new string_id (c_stringFile, "s_1f0513d3");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Help? Yes, you can help! What I need you to help with is troop support. This may put you in direct harms way, and you won't be able to help the other villagers with their tasks, but I will make sure Noldan helps you to develop your healing abilities even more. Are you sure?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Help? Yes, you can help! What I need you to help with is troop support. This may put you in direct harms way, and you won't be able to help the other villagers with their tasks, but I will make sure Noldan helps you to develop your healing abilities even more. Are you sure?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: On second thought...
	if (branchId == 14 && response == "s_5d4f7fdb")
	{
		//-- [NOTE] 
		if (fs_combat_healing_quest_condition__defaultCondition (player, self))
		{
			//-- NPC: I see, I see... I was hoping you would be made of sterner stuff, but I guess not.
			string_id message = new string_id (c_stringFile, "s_8c663fab");
			removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Help? Yes, you can help! What I need you to help with is troop support. This may put you in direct harms way, and you won't be able to help the other villagers with their tasks, but I will make sure Noldan helps you to develop your healing abilities even more. Are you sure?' were false.");

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	removeObjVar (player, "conversation.fs_combat_healing_quest.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

