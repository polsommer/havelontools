// ======================================================================
//
// npe_new_jtl_tutorial.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_new_jtl_tutorial";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_new_jtl_tutorial_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_new_jtl_tutorial_action_disableTraining (obj_id player, obj_id npc)
{
	clearCondition(npc, CONDITION_CONVERSABLE);
	clearCondition(npc, CONDITION_INFLIGHT_TUTORIAL);	
	removeObjVar(npc, "convo.appearance");
	detachScript(npc, "conversation.npe_new_jtl_tutorial");
	return;
	
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_new_jtl_tutorial_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Welcome to the Ybella Systems 'Starfighter Training' program. Press and hold the ALT key on your keyboard to activate your mouse cursor, then select one of the training options below to begin.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Basic flight controls
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Directions to Station Gamma
	if (response == "s_50")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is the Waypoint Monitor?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Tell me about onscreen waypoints.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: When I arrive at Station Gamma?
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I think I can find Gamma.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Full piloting manual
	if (response == "s_74")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Skip training (ESC)
	if (response == "s_462")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Affirmative. If you would like to continue training at a later time, select the Holodisc Trainer button on your HUD. Press ALT to gain control of your mouse to select the button.
			string_id message = new string_id (c_stringFile, "s_464");
			utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Disable Permanently
	if (response == "s_466")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Ybella Systems strongly discourages deactivation of your starship training protocol. Please confirm your choice as this deactivation is permanent.
			string_id message = new string_id (c_stringFile, "s_468");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Affirmative.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Negative.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_470");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_474");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 81);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Mouse mode/Flight mode
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display (HUD) defaults to Flight mode, allowing you to pilot with the mouse. Holding the ALT key switches to Mouse mode. This lets you interact with HUD elements like the Comm window.
			string_id message = new string_id (c_stringFile, "s_16");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_17");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Flying.
	if (response == "s_14")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In Flight mode, you can use your mouse to change your heading. Pressing W will accelerate, while S will decelerate. Pressing A will turn left and D will turn the ship right.
			string_id message = new string_id (c_stringFile, "s_18");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sounds simple enough.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_20");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Firing weapons.
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pressing your left mouse button will fire your primary weapon. You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle hostile targets.
			string_id message = new string_id (c_stringFile, "s_24");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I know if I have a target?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What about friendly ships nearby?
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Space loot.
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: You will automatically collect any salvageable equipment when you destroy an enemy ship. This space loot can later be used to upgrade your own ship. You will see the loot in your inventory.
			string_id message = new string_id (c_stringFile, "s_42");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great!
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_44");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I get it.
	if (response == "s_46")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Select a training option.
			string_id message = new string_id (c_stringFile, "s_48");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Directions to Station Gamma
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Full piloting manual
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Skip training (ESC)
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Disable Permanently
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_6");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_74");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_462");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_466");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Heads-Up Display (HUD) defaults to Flight mode, allowing you to pilot with the mouse. Holding the ALT key switches to Mouse mode. This lets you interact with HUD elements like the Comm window.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand.
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In Flight mode, you can use your mouse to change your heading. Pressing W will accelerate, while S will decelerate. Pressing A will turn left and D will turn the ship right.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sounds simple enough.
	if (response == "s_20")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Pressing your left mouse button will fire your primary weapon. You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle hostile targets.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I know if I have a target?
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: If you have something targeted, you will see a targeting box surrounding the craft at the four corners of their ship. You will also see a target info box appear in the upper right of your HUD.
			string_id message = new string_id (c_stringFile, "s_28");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Excellent.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_30");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What about friendly ships nearby?
	if (response == "s_32")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: K will target the nearest friendly player ship, while L will cycle through them. The [;] key selects the nearest friendly non-player character (NPC) ship, and the ['] key cycles through them.
			string_id message = new string_id (c_stringFile, "s_34");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neat.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand.
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If you have something targeted, you will see a targeting box surrounding the craft at the four corners of their ship. You will also see a target info box appear in the upper right of your HUD.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Excellent.
	if (response == "s_30")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pressing your left mouse button will fire your primary weapon. You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle hostile targets.
			string_id message = new string_id (c_stringFile, "s_24");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I know if I have a target?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What about friendly ships nearby?
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: K will target the nearest friendly player ship, while L will cycle through them. The [;] key selects the nearest friendly non-player character (NPC) ship, and the ['] key cycles through them.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Neat.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pressing your left mouse button will fire your primary weapon. You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle hostile targets.
			string_id message = new string_id (c_stringFile, "s_24");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I know if I have a target?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What about friendly ships nearby?
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You will automatically collect any salvageable equipment when you destroy an enemy ship. This space loot can later be used to upgrade your own ship. You will see the loot in your inventory.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great!
	if (response == "s_44")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Select a training option.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Basic flight controls
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's take this ship for a ride, shall we? There are some things you need to know before we go. What would you like to learn about? Hold the ALT key to engage Mouse mode and select one.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Mouse mode/Flight mode
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flying.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Firing weapons.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Space loot.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get it.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Directions to Station Gamma
	if (response == "s_50")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is the Waypoint Monitor?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Tell me about onscreen waypoints.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: When I arrive at Station Gamma?
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I think I can find Gamma.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Full piloting manual
	if (response == "s_74")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Skip training (ESC)
	if (response == "s_462")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Affirmative. If you would like to continue training at a later time, select the Holodisc Trainer button on your HUD. Press ALT to gain control of your mouse to select the button.
			string_id message = new string_id (c_stringFile, "s_464");
			utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Disable Permanently
	if (response == "s_466")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Ybella Systems strongly discourages deactivation of your starship training protocol. Please confirm your choice as this deactivation is permanent.
			string_id message = new string_id (c_stringFile, "s_468");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Affirmative.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Negative.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_470");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_474");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 81);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What is the Waypoint Monitor?
	if (response == "s_54")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The waypoint monitor appears on the right of your Heads-Up Display (HUD). It shows your current waypoint's name and distance. To help find it, an arrow points in the direction of the waypoint.
			string_id message = new string_id (c_stringFile, "s_56");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is helpful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_58");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about onscreen waypoints.
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Follow the direction of the arrow until you see it change to a GREEN triangular icon. This means that it is in front of your ship. Fly towards the icon or beacon of light to reach your destination.
			string_id message = new string_id (c_stringFile, "s_62");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: When I arrive at Station Gamma?
	if (response == "s_66")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Upon arrival at Gamma, the station will hail you through a Comm window. Activate Mouse mode (Holding ALT) to communicate with them and state your intentions. Land if you like, or fly back to Serissu.
			string_id message = new string_id (c_stringFile, "s_68");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll do it.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_70");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think I can find Gamma.
	if (response == "s_72")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome to the Ybella Systems 'Starfighter Training' program. Press and hold the ALT key on your keyboard to activate your mouse cursor, then select one of the training options below to begin.
			string_id message = new string_id (c_stringFile, "s_4");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Directions to Station Gamma
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Full piloting manual
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Skip training (ESC)
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Disable Permanently
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_6");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_74");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_462");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_466");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The waypoint monitor appears on the right of your Heads-Up Display (HUD). It shows your current waypoint's name and distance. To help find it, an arrow points in the direction of the waypoint.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is helpful.
	if (response == "s_58")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is the Waypoint Monitor?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Tell me about onscreen waypoints.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: When I arrive at Station Gamma?
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I think I can find Gamma.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Follow the direction of the arrow until you see it change to a GREEN triangular icon. This means that it is in front of your ship. Fly towards the icon or beacon of light to reach your destination.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_64")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is the Waypoint Monitor?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Tell me about onscreen waypoints.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: When I arrive at Station Gamma?
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I think I can find Gamma.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Upon arrival at Gamma, the station will hail you through a Comm window. Activate Mouse mode (Holding ALT) to communicate with them and state your intentions. Land if you like, or fly back to Serissu.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll do it.
	if (response == "s_70")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: We have been cleared for flight to Station Gamma. The station has set up a waypoint for us to follow. Let's learn about how to use waypoints. Hold the ALT key down and choose one of the topics.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is the Waypoint Monitor?
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Tell me about onscreen waypoints.
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: When I arrive at Station Gamma?
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I think I can find Gamma.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Heads-Up Display (HUD)
	if (response == "s_78")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.
			string_id message = new string_id (c_stringFile, "s_80");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ship systems
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Comm window
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Target info box
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Waypoint monitor
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand the HUD.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Flight controls
	if (response == "s_158")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Most pilots do not have the luxury of fancy colored rings to fly through for learning. That is why I am here. I was programmed to teach you to fly. Shall we get to it then?
			string_id message = new string_id (c_stringFile, "s_160");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic Flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_162");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_186");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 29);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Starfighter combat
	if (response == "s_216")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: I have been programmed with the most recent tactical advice regarding starfighter combat. I will teach you to use your weapons and your systems to great effect in a dogfight. Learn and live.
			string_id message = new string_id (c_stringFile, "s_218");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic starfighter combat
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced starfighter combat
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Player vs. Player Combat (PvP)
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand starfighter combat.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_220");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_250");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_274");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_302");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Navigation procedures
	if (response == "s_304")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.
			string_id message = new string_id (c_stringFile, "s_306");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Camera Functions
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Landing procedures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Space Zone Map
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand Navigation.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_308");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_368");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_398");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_458");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 54);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I know how to fly.
	if (response == "s_460")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome to the Ybella Systems 'Starfighter Training' program. Press and hold the ALT key on your keyboard to activate your mouse cursor, then select one of the training options below to begin.
			string_id message = new string_id (c_stringFile, "s_4");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Directions to Station Gamma
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Full piloting manual
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Skip training (ESC)
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Disable Permanently
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_6");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_74");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_462");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_466");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Ship systems
	if (response == "s_82")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The HUD is designed to keep you informed about the status of your ship. Everything from how your ship is running to where it is running is shown. Select an option for more detailed information.
			string_id message = new string_id (c_stringFile, "s_84");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Throttle/Energy indicator
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Radar
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: System status flyouts
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I have a feel for the ship systems.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_86");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Comm window
	if (response == "s_135")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Comm window on the left shows you anybody who is hailing you. This may be friendly or enemy pilots, or even contacts on the ground. Hold ALT to respond, if there is something to say.
			string_id message = new string_id (c_stringFile, "s_137");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: So this is the Comm window.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_139");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 25);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Target info box
	if (response == "s_141")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Target info box will show you the name of and distance to a target. It will also display a ship classification and ship systems status for your target. It appears at the top right of your HUD.
			string_id message = new string_id (c_stringFile, "s_143");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is useful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 26);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Waypoint monitor
	if (response == "s_147")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The waypoint monitor appears on the right of your HUD. It shows your current waypoint's name and distance. To help find it, an arrow points in the direction of the waypoint.
			string_id message = new string_id (c_stringFile, "s_149");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Onscreen waypoints
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 27);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand the HUD.
	if (response == "s_156")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The HUD is designed to keep you informed about the status of your ship. Everything from how your ship is running to where it is running is shown. Select an option for more detailed information.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Throttle/Energy indicator
	if (response == "s_86")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Near the center of the HUD is a BLUE circular bar on the left. This is your Throttle indicator. On the right is the RED energy indicator. This shows you the current power of your weapon capacitor.
			string_id message = new string_id (c_stringFile, "s_88");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I see them.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_90");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 17);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Radar
	if (response == "s_92")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: At the bottom of your HUD is your radar. This shows the ships in space around you. It is important to know where contacts are in relation to your ship. Let me explain the details.
			string_id message = new string_id (c_stringFile, "s_94");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Viewpoint
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Contacts
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Armor and shields
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the radar.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_96");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_102");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: System status flyouts
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: On the right of your screen are six icons that represent the different systems of your ship. As they become damaged, status changes will pop out from the icons to indicate current strength.
			string_id message = new string_id (c_stringFile, "s_129");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neat.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_131");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 24);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I have a feel for the ship systems.
	if (response == "s_133")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.
			string_id message = new string_id (c_stringFile, "s_80");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ship systems
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Comm window
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Target info box
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Waypoint monitor
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand the HUD.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Near the center of the HUD is a BLUE circular bar on the left. This is your Throttle indicator. On the right is the RED energy indicator. This shows you the current power of your weapon capacitor.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I see them.
	if (response == "s_90")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The HUD is designed to keep you informed about the status of your ship. Everything from how your ship is running to where it is running is shown. Select an option for more detailed information.
			string_id message = new string_id (c_stringFile, "s_84");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Throttle/Energy indicator
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Radar
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: System status flyouts
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I have a feel for the ship systems.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_86");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch18 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: At the bottom of your HUD is your radar. This shows the ships in space around you. It is important to know where contacts are in relation to your ship. Let me explain the details.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Viewpoint
	if (response == "s_96")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Things directly in front of you are in the center of the circle while contacts around you appear to the sides. Someone fully behind you appears at the very edges of the radar.
			string_id message = new string_id (c_stringFile, "s_98");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Interesting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_100");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 19);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Contacts
	if (response == "s_102")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Each contact is assigned a colored blip. WHITE is friendly and cannot be damaged. YELLOW is neutral and can be attacked, but might attack back if upset. RED is hostile and will attack you on sight.
			string_id message = new string_id (c_stringFile, "s_104");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Target tracking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Mission-Critical ships
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand radar contacts.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_106");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_111");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Armor and shields
	if (response == "s_119")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In the radar are two circular bars. The outer, BLUE bar is your front/rear shield strength. The inner, RED bars are your front/rear armor strength. Be careful, shields recharge but armor does not.
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is important.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_123");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 23);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand the radar.
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The HUD is designed to keep you informed about the status of your ship. Everything from how your ship is running to where it is running is shown. Select an option for more detailed information.
			string_id message = new string_id (c_stringFile, "s_84");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Throttle/Energy indicator
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Radar
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: System status flyouts
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I have a feel for the ship systems.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_86");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Things directly in front of you are in the center of the circle while contacts around you appear to the sides. Someone fully behind you appears at the very edges of the radar.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Interesting.
	if (response == "s_100")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: At the bottom of your HUD is your radar. This shows the ships in space around you. It is important to know where contacts are in relation to your ship. Let me explain the details.
			string_id message = new string_id (c_stringFile, "s_94");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Viewpoint
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Contacts
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Armor and shields
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the radar.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_96");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_102");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Each contact is assigned a colored blip. WHITE is friendly and cannot be damaged. YELLOW is neutral and can be attacked, but might attack back if upset. RED is hostile and will attack you on sight.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Target tracking
	if (response == "s_106")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your current target will appear in your radar with BLUE brackets around it. This helps you quickly tell which of the blips is your target and where it is.
			string_id message = new string_id (c_stringFile, "s_108");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great!
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_243");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 21);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Mission-Critical ships
	if (response == "s_111")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: When the intel is available, mission-critical craft such as escorts and destroyable marks will have small ORANGE brackets around them on the radar and larger ones in your main viewscreen.
			string_id message = new string_id (c_stringFile, "s_113");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is very helpful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand radar contacts.
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: At the bottom of your HUD is your radar. This shows the ships in space around you. It is important to know where contacts are in relation to your ship. Let me explain the details.
			string_id message = new string_id (c_stringFile, "s_94");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Viewpoint
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Contacts
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Armor and shields
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the radar.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_96");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_102");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch21 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your current target will appear in your radar with BLUE brackets around it. This helps you quickly tell which of the blips is your target and where it is.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great!
	if (response == "s_243")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Each contact is assigned a colored blip. WHITE is friendly and cannot be damaged. YELLOW is neutral and can be attacked, but might attack back if upset. RED is hostile and will attack you on sight.
			string_id message = new string_id (c_stringFile, "s_104");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Target tracking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Mission-Critical ships
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand radar contacts.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_106");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_111");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch22 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: When the intel is available, mission-critical craft such as escorts and destroyable marks will have small ORANGE brackets around them on the radar and larger ones in your main viewscreen.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is very helpful.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Each contact is assigned a colored blip. WHITE is friendly and cannot be damaged. YELLOW is neutral and can be attacked, but might attack back if upset. RED is hostile and will attack you on sight.
			string_id message = new string_id (c_stringFile, "s_104");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Target tracking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Mission-Critical ships
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand radar contacts.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_106");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_111");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch23 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In the radar are two circular bars. The outer, BLUE bar is your front/rear shield strength. The inner, RED bars are your front/rear armor strength. Be careful, shields recharge but armor does not.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is important.
	if (response == "s_123")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: At the bottom of your HUD is your radar. This shows the ships in space around you. It is important to know where contacts are in relation to your ship. Let me explain the details.
			string_id message = new string_id (c_stringFile, "s_94");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Viewpoint
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Contacts
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Armor and shields
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the radar.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_96");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_102");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch24 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: On the right of your screen are six icons that represent the different systems of your ship. As they become damaged, status changes will pop out from the icons to indicate current strength.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Neat.
	if (response == "s_131")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The HUD is designed to keep you informed about the status of your ship. Everything from how your ship is running to where it is running is shown. Select an option for more detailed information.
			string_id message = new string_id (c_stringFile, "s_84");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Throttle/Energy indicator
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Radar
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: System status flyouts
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I have a feel for the ship systems.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_86");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch25 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Comm window on the left shows you anybody who is hailing you. This may be friendly or enemy pilots, or even contacts on the ground. Hold ALT to respond, if there is something to say.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: So this is the Comm window.
	if (response == "s_139")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.
			string_id message = new string_id (c_stringFile, "s_80");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ship systems
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Comm window
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Target info box
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Waypoint monitor
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand the HUD.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch26 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Target info box will show you the name of and distance to a target. It will also display a ship classification and ship systems status for your target. It appears at the top right of your HUD.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is useful.
	if (response == "s_145")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.
			string_id message = new string_id (c_stringFile, "s_80");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ship systems
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Comm window
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Target info box
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Waypoint monitor
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand the HUD.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch27 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The waypoint monitor appears on the right of your HUD. It shows your current waypoint's name and distance. To help find it, an arrow points in the direction of the waypoint.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Onscreen waypoints
	if (response == "s_151")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Follow the direction of the arrow until you see it change to a GREEN triangular icon. This means that it is in front of your ship. Fly towards the icon or beacon of light to reach your destination.
			string_id message = new string_id (c_stringFile, "s_153");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_242");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 28);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch28 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Follow the direction of the arrow until you see it change to a GREEN triangular icon. This means that it is in front of your ship. Fly towards the icon or beacon of light to reach your destination.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_242")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Heads-Up Display is your eyes and ears for your ship. It is a holographic interface designed to give you all the information you need to keep you flying. Select an option to begin.
			string_id message = new string_id (c_stringFile, "s_80");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ship systems
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Comm window
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Target info box
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Waypoint monitor
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand the HUD.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch29 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Most pilots do not have the luxury of fancy colored rings to fly through for learning. That is why I am here. I was programmed to teach you to fly. Shall we get to it then?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Basic Flight controls
	if (response == "s_162")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Learning to control your ship is very important. It can mean the difference between a successful flight and smashing into an asteroid. Let's review the basics.
			string_id message = new string_id (c_stringFile, "s_164");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Speed Settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Heading
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Boosters
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_166");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_172");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Advanced Flight controls
	if (response == "s_186")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rolling
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Following Another Ship
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Inspection
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I'm comfortable with Advanced flight.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_208");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch30 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Learning to control your ship is very important. It can mean the difference between a successful flight and smashing into an asteroid. Let's review the basics.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Speed Settings
	if (response == "s_166")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pressing W will accelerate incrementally, while S will decelerate. To set engines to their maximum thrust, use the HOME key. To cut the engines to full stop, use END.
			string_id message = new string_id (c_stringFile, "s_168");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_170");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 31);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Heading
	if (response == "s_172")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Use the mouse to change your ship's heading. Moving the mouse back and forth will control the ship's pitch while moving left/right will control the ship's lateral yaw. A and D will also turn.
			string_id message = new string_id (c_stringFile, "s_174");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neat.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 32);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Boosters
	if (response == "s_178")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some ships are equipped with boosters. These high-powered recharging rockets propel your ship far beyond the threshold of the normal engines, but for a limited time. Hit B to engage and disengage.
			string_id message = new string_id (c_stringFile, "s_180");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sounds fun.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_182");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 33);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I get the basics.
	if (response == "s_184")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Most pilots do not have the luxury of fancy colored rings to fly through for learning. That is why I am here. I was programmed to teach you to fly. Shall we get to it then?
			string_id message = new string_id (c_stringFile, "s_160");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic Flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_162");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_186");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 29);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch31 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Pressing W will accelerate incrementally, while S will decelerate. To set engines to their maximum thrust, use the HOME key. To cut the engines to full stop, use END.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great.
	if (response == "s_170")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Learning to control your ship is very important. It can mean the difference between a successful flight and smashing into an asteroid. Let's review the basics.
			string_id message = new string_id (c_stringFile, "s_164");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Speed Settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Heading
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Boosters
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_166");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_172");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch32 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Use the mouse to change your ship's heading. Moving the mouse back and forth will control the ship's pitch while moving left/right will control the ship's lateral yaw. A and D will also turn.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Neat.
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Learning to control your ship is very important. It can mean the difference between a successful flight and smashing into an asteroid. Let's review the basics.
			string_id message = new string_id (c_stringFile, "s_164");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Speed Settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Heading
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Boosters
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_166");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_172");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch33 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Some ships are equipped with boosters. These high-powered recharging rockets propel your ship far beyond the threshold of the normal engines, but for a limited time. Hit B to engage and disengage.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sounds fun.
	if (response == "s_182")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Learning to control your ship is very important. It can mean the difference between a successful flight and smashing into an asteroid. Let's review the basics.
			string_id message = new string_id (c_stringFile, "s_164");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Speed Settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Heading
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Boosters
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_166");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_172");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch34 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Rolling
	if (response == "s_190")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To roll to the left, press the Q key. To roll right, use the E key. Use this in combat to perform barrel rolls and dodge enemy fire, or get a better view of the action.
			string_id message = new string_id (c_stringFile, "s_192");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_194");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 35);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Docking
	if (response == "s_196")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In some missions, you are required to dock with another craft. To dock with the ship, it must be stationary. Target it and press U to dock. Some ships may deny your docking request.
			string_id message = new string_id (c_stringFile, "s_198");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Understood.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_200");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 36);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Following Another Ship
	if (response == "s_202")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To auto-follow another ship, hit ENTER to engage the chat window and type /follow with your target selected. Moving the mouse will disengage the autopilot. This can be useful on escort missions.
			string_id message = new string_id (c_stringFile, "s_204");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 37);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Inspection
	if (response == "s_208")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Sometimes you will want to inspect another ship to see what sort of cargo they are carrying. To perform a technical scan of the vessel, target it and use the I key. This may take a few seconds.
			string_id message = new string_id (c_stringFile, "s_210");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_212");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 38);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm comfortable with Advanced flight.
	if (response == "s_214")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch35 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To roll to the left, press the Q key. To roll right, use the E key. Use this in combat to perform barrel rolls and dodge enemy fire, or get a better view of the action.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great.
	if (response == "s_194")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rolling
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Following Another Ship
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Inspection
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I'm comfortable with Advanced flight.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_208");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch36 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In some missions, you are required to dock with another craft. To dock with the ship, it must be stationary. Target it and press U to dock. Some ships may deny your docking request.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Understood.
	if (response == "s_200")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rolling
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Following Another Ship
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Inspection
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I'm comfortable with Advanced flight.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_208");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch37 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To auto-follow another ship, hit ENTER to engage the chat window and type /follow with your target selected. Moving the mouse will disengage the autopilot. This can be useful on escort missions.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_206")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rolling
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Following Another Ship
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Inspection
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I'm comfortable with Advanced flight.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_208");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch38 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Sometimes you will want to inspect another ship to see what sort of cargo they are carrying. To perform a technical scan of the vessel, target it and use the I key. This may take a few seconds.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand.
	if (response == "s_212")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Skilled pilots know how to get the maximum maneuverability out of their ships. Some of these advanced maneuvers can really make the difference in an encounter. What would you like to learn?
			string_id message = new string_id (c_stringFile, "s_188");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Rolling
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Following Another Ship
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Inspection
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I'm comfortable with Advanced flight.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_208");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch39 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I have been programmed with the most recent tactical advice regarding starfighter combat. I will teach you to use your weapons and your systems to great effect in a dogfight. Learn and live.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Basic starfighter combat
	if (response == "s_220")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To fire your primary weapon, use the left mouse button. Each shot fired will drain a little energy from your capacitor. Conserve energy and make sure you always have enough to fire when threatened.
			string_id message = new string_id (c_stringFile, "s_222");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Targeting
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Lead Reticle
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Component targeting
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_224");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_234");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_240");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_248");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Advanced starfighter combat
	if (response == "s_250")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: While a good blaster or ion cannon is a great thing to have, sometimes you just need more. Ordnance and other more advanced tactics are invaluable to an ace pilot. Here are a few solid examples.
			string_id message = new string_id (c_stringFile, "s_252");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Missiles
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Countermeasures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Speed Matching
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand advanced tactics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_254");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_266");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_272");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 45);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Player vs. Player Combat (PvP)
	if (response == "s_274")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Much like on the ground, players in space can fight other players. Under Imperial decree, you are not allowed to engage in battle unless you are declared a Rebel, Freelance, or an Imperial Pilot.
			string_id message = new string_id (c_stringFile, "s_276");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neutral settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: PvP settings
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: PvP systems
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I grasp how PvP works.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_284");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_294");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_300");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 49);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand starfighter combat.
	if (response == "s_302")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch40 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To fire your primary weapon, use the left mouse button. Each shot fired will drain a little energy from your capacitor. Conserve energy and make sure you always have enough to fire when threatened.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Targeting
	if (response == "s_224")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle through hostile targets. ESC will clear your current target.
			string_id message = new string_id (c_stringFile, "s_226");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Friendly targets
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 41);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Lead Reticle
	if (response == "s_234")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: This reticle compares your target's speed with the velocity of your weaponry, then helps you aim. Line up the small crosshair in your larger GREEN X reticle and fire. It lights up when in range.
			string_id message = new string_id (c_stringFile, "s_236");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is helpful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_238");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 43);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Component targeting
	if (response == "s_240")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: You do not always have to destroy a ship to defeat it. Press [ or ] to target specific components of a ship. If you disable the engines or reactor, it may render them immobile.
			string_id message = new string_id (c_stringFile, "s_244");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Wow. That is neat.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_246");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand the basics.
	if (response == "s_248")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: I have been programmed with the most recent tactical advice regarding starfighter combat. I will teach you to use your weapons and your systems to great effect in a dogfight. Learn and live.
			string_id message = new string_id (c_stringFile, "s_218");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic starfighter combat
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced starfighter combat
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Player vs. Player Combat (PvP)
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand starfighter combat.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_220");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_250");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_274");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_302");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch41 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You can use X to target something directly in front of you, while TAB will target the closest enemy. T will cycle through hostile targets. ESC will clear your current target.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Friendly targets
	if (response == "s_228")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: K will target the nearest friendly player ship, while L will cycle through them. The [;] key selects the nearest friendly non-player character (NPC) ship, and the ['] key cycles through them.
			string_id message = new string_id (c_stringFile, "s_230");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_232");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 42);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch42 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: K will target the nearest friendly player ship, while L will cycle through them. The [;] key selects the nearest friendly non-player character (NPC) ship, and the ['] key cycles through them.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_232")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To fire your primary weapon, use the left mouse button. Each shot fired will drain a little energy from your capacitor. Conserve energy and make sure you always have enough to fire when threatened.
			string_id message = new string_id (c_stringFile, "s_222");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Targeting
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Lead Reticle
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Component targeting
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_224");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_234");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_240");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_248");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch43 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: This reticle compares your target's speed with the velocity of your weaponry, then helps you aim. Line up the small crosshair in your larger GREEN X reticle and fire. It lights up when in range.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is helpful.
	if (response == "s_238")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To fire your primary weapon, use the left mouse button. Each shot fired will drain a little energy from your capacitor. Conserve energy and make sure you always have enough to fire when threatened.
			string_id message = new string_id (c_stringFile, "s_222");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Targeting
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Lead Reticle
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Component targeting
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_224");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_234");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_240");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_248");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch44 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You do not always have to destroy a ship to defeat it. Press [ or ] to target specific components of a ship. If you disable the engines or reactor, it may render them immobile.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Wow. That is neat.
	if (response == "s_246")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To fire your primary weapon, use the left mouse button. Each shot fired will drain a little energy from your capacitor. Conserve energy and make sure you always have enough to fire when threatened.
			string_id message = new string_id (c_stringFile, "s_222");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Targeting
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Lead Reticle
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Component targeting
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand the basics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_224");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_234");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_240");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_248");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch45 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: While a good blaster or ion cannon is a great thing to have, sometimes you just need more. Ordnance and other more advanced tactics are invaluable to an ace pilot. Here are a few solid examples.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Missiles
	if (response == "s_254")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some ships have missiles or space bombs which lock on to a selected target if it is kept in the reticle long enough. When the boxes become solid and 'lock in', press the right mouse button to fire.
			string_id message = new string_id (c_stringFile, "s_256");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_258");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 46);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Countermeasures
	if (response == "s_260")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: If an enemy missile is fired at you, a warning tone sounds. Press the middle mouse button to release countermeasures and try to break the lock. Advanced missiles may require multiple countermeasures.
			string_id message = new string_id (c_stringFile, "s_262");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_264");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 47);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Speed Matching
	if (response == "s_266")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some pilots find it helpful in a dogfight to match the speed of their target. This allows for easier tailing and helps with escorts as well. Target the craft and use M to match their speed.
			string_id message = new string_id (c_stringFile, "s_268");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Interesting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_270");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 48);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand advanced tactics.
	if (response == "s_272")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: I have been programmed with the most recent tactical advice regarding starfighter combat. I will teach you to use your weapons and your systems to great effect in a dogfight. Learn and live.
			string_id message = new string_id (c_stringFile, "s_218");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic starfighter combat
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced starfighter combat
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Player vs. Player Combat (PvP)
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand starfighter combat.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_220");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_250");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_274");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_302");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch46 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Some ships have missiles or space bombs which lock on to a selected target if it is kept in the reticle long enough. When the boxes become solid and 'lock in', press the right mouse button to fire.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great.
	if (response == "s_258")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: While a good blaster or ion cannon is a great thing to have, sometimes you just need more. Ordnance and other more advanced tactics are invaluable to an ace pilot. Here are a few solid examples.
			string_id message = new string_id (c_stringFile, "s_252");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Missiles
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Countermeasures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Speed Matching
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand advanced tactics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_254");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_266");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_272");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 45);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch47 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If an enemy missile is fired at you, a warning tone sounds. Press the middle mouse button to release countermeasures and try to break the lock. Advanced missiles may require multiple countermeasures.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_264")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: While a good blaster or ion cannon is a great thing to have, sometimes you just need more. Ordnance and other more advanced tactics are invaluable to an ace pilot. Here are a few solid examples.
			string_id message = new string_id (c_stringFile, "s_252");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Missiles
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Countermeasures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Speed Matching
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand advanced tactics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_254");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_266");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_272");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 45);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch48 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Some pilots find it helpful in a dogfight to match the speed of their target. This allows for easier tailing and helps with escorts as well. Target the craft and use M to match their speed.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Interesting.
	if (response == "s_270")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: While a good blaster or ion cannon is a great thing to have, sometimes you just need more. Ordnance and other more advanced tactics are invaluable to an ace pilot. Here are a few solid examples.
			string_id message = new string_id (c_stringFile, "s_252");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Missiles
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Countermeasures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Speed Matching
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand advanced tactics.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_254");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_266");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_272");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 45);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch49 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Much like on the ground, players in space can fight other players. Under Imperial decree, you are not allowed to engage in battle unless you are declared a Rebel, Freelance, or an Imperial Pilot.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Neutral settings
	if (response == "s_278")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: All pilots are declared neutral unless they decide otherwise. This means that you cannot damage or be damaged by other player ships under normal circumstances. Duels are allowed if you type /duel.
			string_id message = new string_id (c_stringFile, "s_280");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Safe and sound. Got it.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_282");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 50);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: PvP settings
	if (response == "s_284")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Flying to a factional station and declaring your allegiance is the only way to enter into space PvP combat. Once declared, you may freely attack or be targeted by any member of the opposing faction.
			string_id message = new string_id (c_stringFile, "s_286");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Enemy player targeting
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_288");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 51);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: PvP systems
	if (response == "s_294")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In some systems, such as Kessel and 'Deep Space', the entire zone is engaged in a PvP battle. Only masterful pilots, sent by their trainers, are allowed to fight for their faction in these zones.
			string_id message = new string_id (c_stringFile, "s_296");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sounds exciting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_298");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 53);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I grasp how PvP works.
	if (response == "s_300")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: I have been programmed with the most recent tactical advice regarding starfighter combat. I will teach you to use your weapons and your systems to great effect in a dogfight. Learn and live.
			string_id message = new string_id (c_stringFile, "s_218");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic starfighter combat
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Advanced starfighter combat
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Player vs. Player Combat (PvP)
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand starfighter combat.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_220");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_250");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_274");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_302");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch50 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: All pilots are declared neutral unless they decide otherwise. This means that you cannot damage or be damaged by other player ships under normal circumstances. Duels are allowed if you type /duel.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Safe and sound. Got it.
	if (response == "s_282")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Much like on the ground, players in space can fight other players. Under Imperial decree, you are not allowed to engage in battle unless you are declared a Rebel, Freelance, or an Imperial Pilot.
			string_id message = new string_id (c_stringFile, "s_276");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neutral settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: PvP settings
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: PvP systems
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I grasp how PvP works.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_284");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_294");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_300");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 49);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch51 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Flying to a factional station and declaring your allegiance is the only way to enter into space PvP combat. Once declared, you may freely attack or be targeted by any member of the opposing faction.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Enemy player targeting
	if (response == "s_288")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Use SHIFT-TAB to target the closest enemy player target, and Z to cycle through player enemy targets nearby.
			string_id message = new string_id (c_stringFile, "s_290");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Excellent!
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_292");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 52);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch52 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Use SHIFT-TAB to target the closest enemy player target, and Z to cycle through player enemy targets nearby.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Excellent!
	if (response == "s_292")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Much like on the ground, players in space can fight other players. Under Imperial decree, you are not allowed to engage in battle unless you are declared a Rebel, Freelance, or an Imperial Pilot.
			string_id message = new string_id (c_stringFile, "s_276");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neutral settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: PvP settings
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: PvP systems
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I grasp how PvP works.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_284");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_294");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_300");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 49);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch53 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In some systems, such as Kessel and 'Deep Space', the entire zone is engaged in a PvP battle. Only masterful pilots, sent by their trainers, are allowed to fight for their faction in these zones.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sounds exciting.
	if (response == "s_298")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Much like on the ground, players in space can fight other players. Under Imperial decree, you are not allowed to engage in battle unless you are declared a Rebel, Freelance, or an Imperial Pilot.
			string_id message = new string_id (c_stringFile, "s_276");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Neutral settings
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: PvP settings
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: PvP systems
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I grasp how PvP works.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_284");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_294");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_300");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 49);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch54 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Camera Functions
	if (response == "s_308")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pilots with tunnel vision end up as dead pilots. Use your camera to get the best view of the action. The NUMLOCK key will lock your camera to your current target. Press again to release.
			string_id message = new string_id (c_stringFile, "s_310");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Cockpit/external views
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Looking Around
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Rear View
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I know how to use the camera.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_312");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_318");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_324");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_330");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 55);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Landing procedures
	if (response == "s_332")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To find a planetary station, you can hit C to target the nearest station or capitol ship. If this does not bring up the one you want, you may have to visually find it.
			string_id message = new string_id (c_stringFile, "s_334");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Station Communication
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking permissions
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Ship Repairs
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get how to land.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_336");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_342");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_360");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_366");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 59);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Space Zone Map
	if (response == "s_368")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?
			string_id message = new string_id (c_stringFile, "s_370");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Navigation
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Display options
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Waypoint settings
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Autopilot
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get how to use the map.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_372");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_378");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_384");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_390");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_396");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hyperspace procedures
	if (response == "s_398")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Traveling through hyperspace is an exhilarating experience, but it can also be deadly for the inexperienced. Let me teach you some specifics about hyperspace travel.
			string_id message = new string_id (c_stringFile, "s_400");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Returning to Home Port
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Choosing a destination
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Engine Limitations
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures make sense.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_402");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_408");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_432");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_456");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 70);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand Navigation.
	if (response == "s_458")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Congratulations, pilot. You are taking your first steps into becoming a master pilot. Hold ALT and select from any of the topics below to get started. Pay attention and the galaxies will be yours!
			string_id message = new string_id (c_stringFile, "s_76");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Heads-Up Display (HUD)
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Flight controls
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Starfighter combat
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Navigation procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I know how to fly.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_78");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_158");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_304");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_460");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch55 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Pilots with tunnel vision end up as dead pilots. Use your camera to get the best view of the action. The NUMLOCK key will lock your camera to your current target. Press again to release.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Cockpit/external views
	if (response == "s_312")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship comes equipped with a small camera drone that can give you an external view of your ship. Use the mousewheel to zoom out of your ship and back into the cockpit.
			string_id message = new string_id (c_stringFile, "s_314");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is useful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_316");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 56);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Looking Around
	if (response == "s_318")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To move your head and look around in your cockpit, press and hold the INS key on your NUMPAD, then move the mouse to move your head. Just don't forget to turn back around and face forward.
			string_id message = new string_id (c_stringFile, "s_320");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll remember.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_322");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 57);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Rear View
	if (response == "s_324")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Check your six, pilot! Press and hold the DEL on the NUMPAD to get a rear view from your ship. This is helpful when you are on the run or when you cannot see your attackers.
			string_id message = new string_id (c_stringFile, "s_326");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Nobody will sneak up on me.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_328");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 58);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I know how to use the camera.
	if (response == "s_330")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.
			string_id message = new string_id (c_stringFile, "s_306");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Camera Functions
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Landing procedures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Space Zone Map
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand Navigation.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_308");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_368");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_398");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_458");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 54);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch56 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your ship comes equipped with a small camera drone that can give you an external view of your ship. Use the mousewheel to zoom out of your ship and back into the cockpit.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is useful.
	if (response == "s_316")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pilots with tunnel vision end up as dead pilots. Use your camera to get the best view of the action. The NUMLOCK key will lock your camera to your current target. Press again to release.
			string_id message = new string_id (c_stringFile, "s_310");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Cockpit/external views
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Looking Around
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Rear View
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I know how to use the camera.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_312");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_318");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_324");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_330");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 55);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch57 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To move your head and look around in your cockpit, press and hold the INS key on your NUMPAD, then move the mouse to move your head. Just don't forget to turn back around and face forward.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll remember.
	if (response == "s_322")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pilots with tunnel vision end up as dead pilots. Use your camera to get the best view of the action. The NUMLOCK key will lock your camera to your current target. Press again to release.
			string_id message = new string_id (c_stringFile, "s_310");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Cockpit/external views
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Looking Around
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Rear View
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I know how to use the camera.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_312");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_318");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_324");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_330");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 55);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch58 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Check your six, pilot! Press and hold the DEL on the NUMPAD to get a rear view from your ship. This is helpful when you are on the run or when you cannot see your attackers.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Nobody will sneak up on me.
	if (response == "s_328")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Pilots with tunnel vision end up as dead pilots. Use your camera to get the best view of the action. The NUMLOCK key will lock your camera to your current target. Press again to release.
			string_id message = new string_id (c_stringFile, "s_310");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Cockpit/external views
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Looking Around
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Rear View
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I know how to use the camera.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_312");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_318");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_324");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_330");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 55);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch59 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To find a planetary station, you can hit C to target the nearest station or capitol ship. If this does not bring up the one you want, you may have to visually find it.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Station Communication
	if (response == "s_336")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In order to land, you must get permission from the planetary station. Press SHIFT-C to target the station and open a communications frequency if the station does not automatically hail you first.
			string_id message = new string_id (c_stringFile, "s_338");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Interesting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_340");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 60);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Docking permissions
	if (response == "s_342")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Once you have an open comm channel with the station, you must ask to land. Some landing sites are only available to certain pilots who have gained access from local authorities.
			string_id message = new string_id (c_stringFile, "s_344");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Landing and parking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Returning to space
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand about landing.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_346");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_352");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_358");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 61);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Ship Repairs
	if (response == "s_360")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Many stations will offer to repair your damage for a small fee. They can replace lost armor and fix vital components. Stations have varying equipment in stock, so some may not fix as much as another.
			string_id message = new string_id (c_stringFile, "s_362");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Repairs are good.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_364");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 64);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I get how to land.
	if (response == "s_366")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.
			string_id message = new string_id (c_stringFile, "s_306");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Camera Functions
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Landing procedures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Space Zone Map
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand Navigation.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_308");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_368");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_398");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_458");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 54);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch60 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In order to land, you must get permission from the planetary station. Press SHIFT-C to target the station and open a communications frequency if the station does not automatically hail you first.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Interesting.
	if (response == "s_340")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To find a planetary station, you can hit C to target the nearest station or capitol ship. If this does not bring up the one you want, you may have to visually find it.
			string_id message = new string_id (c_stringFile, "s_334");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Station Communication
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking permissions
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Ship Repairs
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get how to land.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_336");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_342");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_360");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_366");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 59);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch61 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Once you have an open comm channel with the station, you must ask to land. Some landing sites are only available to certain pilots who have gained access from local authorities.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Landing and parking
	if (response == "s_346")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: There is no fee to land. The planetary defense systems of all modern worlds will automatically convey you to the planet surface and secure your starship in a municipal starport hangar.
			string_id message = new string_id (c_stringFile, "s_348");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Excellent!
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_350");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 62);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Returning to space
	if (response == "s_352")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship will be parked at the starport in the city or outpost where you chose to land. When you want to return to space, go to the starport where your ship is parked, and use the starship terminal.
			string_id message = new string_id (c_stringFile, "s_354");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll remember where my ship is.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_356");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 63);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand about landing.
	if (response == "s_358")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To find a planetary station, you can hit C to target the nearest station or capitol ship. If this does not bring up the one you want, you may have to visually find it.
			string_id message = new string_id (c_stringFile, "s_334");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Station Communication
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking permissions
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Ship Repairs
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get how to land.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_336");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_342");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_360");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_366");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 59);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch62 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: There is no fee to land. The planetary defense systems of all modern worlds will automatically convey you to the planet surface and secure your starship in a municipal starport hangar.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Excellent!
	if (response == "s_350")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Once you have an open comm channel with the station, you must ask to land. Some landing sites are only available to certain pilots who have gained access from local authorities.
			string_id message = new string_id (c_stringFile, "s_344");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Landing and parking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Returning to space
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand about landing.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_346");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_352");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_358");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 61);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch63 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your ship will be parked at the starport in the city or outpost where you chose to land. When you want to return to space, go to the starport where your ship is parked, and use the starship terminal.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll remember where my ship is.
	if (response == "s_356")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Once you have an open comm channel with the station, you must ask to land. Some landing sites are only available to certain pilots who have gained access from local authorities.
			string_id message = new string_id (c_stringFile, "s_344");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Landing and parking
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Returning to space
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I understand about landing.
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_346");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_352");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_358");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 61);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch64 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Many stations will offer to repair your damage for a small fee. They can replace lost armor and fix vital components. Stations have varying equipment in stock, so some may not fix as much as another.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Repairs are good.
	if (response == "s_364")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To find a planetary station, you can hit C to target the nearest station or capitol ship. If this does not bring up the one you want, you may have to visually find it.
			string_id message = new string_id (c_stringFile, "s_334");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Station Communication
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Docking permissions
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Ship Repairs
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I get how to land.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_336");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_342");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_360");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_366");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 59);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch65 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Navigation
	if (response == "s_372")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: In the map, a left mouse drag will pan and CTRL+left mouse drags will rotate the view. CTRL+ mousewheel zooms in and out, while right-clicking opens up the menu options.
			string_id message = new string_id (c_stringFile, "s_374");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Great.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_376");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 66);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Display options
	if (response == "s_378")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: At the bottom of the map, you have a series of filters you may turn on and off. These will stop certain things from being displayed. Use this to simplify your map when needed.
			string_id message = new string_id (c_stringFile, "s_380");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Good to know.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_382");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 67);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Waypoint settings
	if (response == "s_384")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: On the right is a listing of Stations, Waypoints, and Points of Interest. Double-clicking on these focuses the map on the item. You can also right-click in the map to create a waypoint at your cursor.
			string_id message = new string_id (c_stringFile, "s_386");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Nice.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_388");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 68);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Autopilot
	if (response == "s_390")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: If your cursor is over a selectable object, it will change to an arrow. Right-clicking an object and selecting 'Autopilot to' will take you there. To disengage the autopilot, just move the mouse.
			string_id message = new string_id (c_stringFile, "s_392");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is very helpful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_394");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 69);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I get how to use the map.
	if (response == "s_396")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.
			string_id message = new string_id (c_stringFile, "s_306");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Camera Functions
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Landing procedures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Space Zone Map
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand Navigation.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_308");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_368");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_398");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_458");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 54);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch66 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: In the map, a left mouse drag will pan and CTRL+left mouse drags will rotate the view. CTRL+ mousewheel zooms in and out, while right-clicking opens up the menu options.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Great.
	if (response == "s_376")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?
			string_id message = new string_id (c_stringFile, "s_370");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Navigation
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Display options
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Waypoint settings
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Autopilot
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get how to use the map.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_372");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_378");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_384");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_390");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_396");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch67 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: At the bottom of the map, you have a series of filters you may turn on and off. These will stop certain things from being displayed. Use this to simplify your map when needed.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Good to know.
	if (response == "s_382")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?
			string_id message = new string_id (c_stringFile, "s_370");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Navigation
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Display options
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Waypoint settings
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Autopilot
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get how to use the map.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_372");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_378");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_384");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_390");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_396");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch68 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: On the right is a listing of Stations, Waypoints, and Points of Interest. Double-clicking on these focuses the map on the item. You can also right-click in the map to create a waypoint at your cursor.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Nice.
	if (response == "s_388")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?
			string_id message = new string_id (c_stringFile, "s_370");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Navigation
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Display options
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Waypoint settings
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Autopilot
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get how to use the map.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_372");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_378");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_384");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_390");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_396");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch69 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If your cursor is over a selectable object, it will change to an arrow. Right-clicking an object and selecting 'Autopilot to' will take you there. To disengage the autopilot, just move the mouse.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is very helpful.
	if (response == "s_394")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Space Zone Map can be opened and closed by pressing N. This is an incredibly powerful tool for finding your way in a new system. What section would you like to learn about?
			string_id message = new string_id (c_stringFile, "s_370");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Navigation
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Display options
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Waypoint settings
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Autopilot
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I get how to use the map.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_372");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_378");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_384");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_390");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_396");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch70 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Traveling through hyperspace is an exhilarating experience, but it can also be deadly for the inexperienced. Let me teach you some specifics about hyperspace travel.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Returning to Home Port
	if (response == "s_402")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Most ships have the ability to set a Home Port, usually the station you launched from. Sometimes even the best pilots get lost. To hyperspace back to your Home Port, press <key to be defined>.
			string_id message = new string_id (c_stringFile, "s_404");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That is convenient.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_406");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 71);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Choosing a destination
	if (response == "s_408")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To open your Galaxy Map, press H. This will show a listing of all available destination systems. Hyperspace travel is useful because sublight engines alone cannot take you to other systems.
			string_id message = new string_id (c_stringFile, "s_410");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Galaxy Map
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Planet zones
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Zone Information
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Destinations understood.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_412");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_418");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_424");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_430");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 72);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Engine Limitations
	if (response == "s_432")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some notorious pilots are always having their engines break down on them. Learn about your engine limits and try not to push them too hard. Take care of them and they'll take care of you.
			string_id message = new string_id (c_stringFile, "s_434");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Route Calculation time
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Engine Recharge time
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Aborting a Jump
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand engine limitations
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_436");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_442");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_448");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_454");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hyperspace procedures make sense.
	if (response == "s_456")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your ship has many navigation systems in place to keep you from getting lost in the vastness of space. Learning to get around the universe is a pilot's greatest asset. Here are some of the basics.
			string_id message = new string_id (c_stringFile, "s_306");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Camera Functions
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Landing procedures
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Space Zone Map
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I understand Navigation.
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_308");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_332");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_368");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_398");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_458");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 54);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch71 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Most ships have the ability to set a Home Port, usually the station you launched from. Sometimes even the best pilots get lost. To hyperspace back to your Home Port, press <key to be defined>.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That is convenient.
	if (response == "s_406")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Traveling through hyperspace is an exhilarating experience, but it can also be deadly for the inexperienced. Let me teach you some specifics about hyperspace travel.
			string_id message = new string_id (c_stringFile, "s_400");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Returning to Home Port
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Choosing a destination
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Engine Limitations
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures make sense.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_402");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_408");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_432");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_456");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 70);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch72 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: To open your Galaxy Map, press H. This will show a listing of all available destination systems. Hyperspace travel is useful because sublight engines alone cannot take you to other systems.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Galaxy Map
	if (response == "s_412")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Once in the Galaxy Map, you will see a full listing of systems and their respective planets.
			string_id message = new string_id (c_stringFile, "s_414");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Interesting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_416");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 73);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Planet zones
	if (response == "s_418")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Each system has a series of hyperspace beacons which you can travel to. Clicking on a planet will list the possible destinations in the system.
			string_id message = new string_id (c_stringFile, "s_420");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Makes perfect sense.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_422");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 74);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Zone Information
	if (response == "s_424")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Once you have selected a destination, you will see the area's inhabitants, danger level, and exact coordinates of the beacon. Be careful when jumping into restricted or high danger areas.
			string_id message = new string_id (c_stringFile, "s_426");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll be careful.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_428");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 75);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Destinations understood.
	if (response == "s_430")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Traveling through hyperspace is an exhilarating experience, but it can also be deadly for the inexperienced. Let me teach you some specifics about hyperspace travel.
			string_id message = new string_id (c_stringFile, "s_400");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Returning to Home Port
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Choosing a destination
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Engine Limitations
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures make sense.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_402");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_408");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_432");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_456");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 70);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch73 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Once in the Galaxy Map, you will see a full listing of systems and their respective planets.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Interesting.
	if (response == "s_416")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To open your Galaxy Map, press H. This will show a listing of all available destination systems. Hyperspace travel is useful because sublight engines alone cannot take you to other systems.
			string_id message = new string_id (c_stringFile, "s_410");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Galaxy Map
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Planet zones
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Zone Information
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Destinations understood.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_412");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_418");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_424");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_430");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 72);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch74 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Each system has a series of hyperspace beacons which you can travel to. Clicking on a planet will list the possible destinations in the system.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Makes perfect sense.
	if (response == "s_422")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To open your Galaxy Map, press H. This will show a listing of all available destination systems. Hyperspace travel is useful because sublight engines alone cannot take you to other systems.
			string_id message = new string_id (c_stringFile, "s_410");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Galaxy Map
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Planet zones
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Zone Information
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Destinations understood.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_412");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_418");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_424");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_430");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 72);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch75 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Once you have selected a destination, you will see the area's inhabitants, danger level, and exact coordinates of the beacon. Be careful when jumping into restricted or high danger areas.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll be careful.
	if (response == "s_428")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: To open your Galaxy Map, press H. This will show a listing of all available destination systems. Hyperspace travel is useful because sublight engines alone cannot take you to other systems.
			string_id message = new string_id (c_stringFile, "s_410");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Galaxy Map
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Planet zones
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Zone Information
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Destinations understood.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_412");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_418");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_424");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_430");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 72);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch76 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Some notorious pilots are always having their engines break down on them. Learn about your engine limits and try not to push them too hard. Take care of them and they'll take care of you.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Route Calculation time
	if (response == "s_436")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your navigation computer needs some time to carefully calculate your trajectory through hyperspace. If it did not, you might fly through a sun or an asteroid. Once finished, you will make the jump.
			string_id message = new string_id (c_stringFile, "s_438");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll leave enough time.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_440");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 77);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Engine Recharge time
	if (response == "s_442")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your hyperdrive engines use a lot of power when making a jump to lightspeed. Once you drop out of hyperspace, they need time to recharge before they can be used again. 35 seconds is about average.
			string_id message = new string_id (c_stringFile, "s_444");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Got it.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_446");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 78);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Aborting a Jump
	if (response == "s_448")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: On rare occasions, you may decide to cancel your hyperspace jump. This can be done at any point during route calculations. Press ENTER to open the chat window and type /abort to abort the jump.
			string_id message = new string_id (c_stringFile, "s_450");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Interesting.
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_452");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 79);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand engine limitations
	if (response == "s_454")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Traveling through hyperspace is an exhilarating experience, but it can also be deadly for the inexperienced. Let me teach you some specifics about hyperspace travel.
			string_id message = new string_id (c_stringFile, "s_400");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Returning to Home Port
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Choosing a destination
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Engine Limitations
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Hyperspace procedures make sense.
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_402");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_408");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_432");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_456");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 70);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch77 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your navigation computer needs some time to carefully calculate your trajectory through hyperspace. If it did not, you might fly through a sun or an asteroid. Once finished, you will make the jump.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll leave enough time.
	if (response == "s_440")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some notorious pilots are always having their engines break down on them. Learn about your engine limits and try not to push them too hard. Take care of them and they'll take care of you.
			string_id message = new string_id (c_stringFile, "s_434");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Route Calculation time
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Engine Recharge time
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Aborting a Jump
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand engine limitations
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_436");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_442");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_448");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_454");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch78 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Your hyperdrive engines use a lot of power when making a jump to lightspeed. Once you drop out of hyperspace, they need time to recharge before they can be used again. 35 seconds is about average.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Got it.
	if (response == "s_446")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some notorious pilots are always having their engines break down on them. Learn about your engine limits and try not to push them too hard. Take care of them and they'll take care of you.
			string_id message = new string_id (c_stringFile, "s_434");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Route Calculation time
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Engine Recharge time
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Aborting a Jump
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand engine limitations
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_436");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_442");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_448");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_454");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch79 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: On rare occasions, you may decide to cancel your hyperspace jump. This can be done at any point during route calculations. Press ENTER to open the chat window and type /abort to abort the jump.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Interesting.
	if (response == "s_452")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Some notorious pilots are always having their engines break down on them. Learn about your engine limits and try not to push them too hard. Take care of them and they'll take care of you.
			string_id message = new string_id (c_stringFile, "s_434");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Route Calculation time
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Engine Recharge time
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Aborting a Jump
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I understand engine limitations
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_436");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_442");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_448");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_454");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_new_jtl_tutorial_handleBranch81 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ybella Systems strongly discourages deactivation of your starship training protocol. Please confirm your choice as this deactivation is permanent.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Affirmative.
	if (response == "s_470")
	{
		npe_new_jtl_tutorial_action_disableTraining (player, npc);

		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			npe_new_jtl_tutorial_action_disableTraining (player, npc);

			//-- NPC: Command accepted. Ybella Systems thanks you for your patronage.
			string_id message = new string_id (c_stringFile, "s_472");
			utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Negative.
	if (response == "s_474")
	{
		//-- [NOTE] 
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome to the Ybella Systems 'Starfighter Training' program. Press and hold the ALT key on your keyboard to activate your mouse cursor, then select one of the training options below to begin.
			string_id message = new string_id (c_stringFile, "s_4");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Basic flight controls
			boolean hasResponse0 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Directions to Station Gamma
			boolean hasResponse1 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Full piloting manual
			boolean hasResponse2 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Skip training (ESC)
			boolean hasResponse3 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Disable Permanently
			boolean hasResponse4 = false;
			if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_6");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_74");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_462");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_466");

				utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	LOG("npe", "New OnInit here");
	setObjVar(self, "convo.appearance", "object/mobile/tt8l_y7.iff" );
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INFLIGHT_TUTORIAL);	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	LOG("npe", "New onAttach here");
	setCondition (self, CONDITION_CONVERSABLE);
	setObjVar(self, "convo.appearance", "object/mobile/tt8l_y7.iff" );
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INFLIGHT_TUTORIAL);	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	

	return SCRIPT_CONTINUE;
}
trigger OnDetach()
{
	LOG("npe", "New ondetach here");
	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
	{
		//-- NPC: Welcome to the Ybella Systems 'Starfighter Training' program. Press and hold the ALT key on your keyboard to activate your mouse cursor, then select one of the training options below to begin.
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Basic flight controls
		boolean hasResponse0 = false;
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Directions to Station Gamma
		boolean hasResponse1 = false;
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Full piloting manual
		boolean hasResponse2 = false;
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: Skip training (ESC)
		boolean hasResponse3 = false;
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		//-- PLAYER: Disable Permanently
		boolean hasResponse4 = false;
		if (npe_new_jtl_tutorial_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse4 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_50");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_74");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_462");

			if (hasResponse4)
				responses [responseIndex++] = new string_id (c_stringFile, "s_466");

			utils.setScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId", 1);

			npcStartConversation (player, npc, "npe_new_jtl_tutorial", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_new_jtl_tutorial")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

	if (branchId == 1 && npe_new_jtl_tutorial_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && npe_new_jtl_tutorial_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && npe_new_jtl_tutorial_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && npe_new_jtl_tutorial_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && npe_new_jtl_tutorial_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && npe_new_jtl_tutorial_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && npe_new_jtl_tutorial_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && npe_new_jtl_tutorial_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && npe_new_jtl_tutorial_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && npe_new_jtl_tutorial_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && npe_new_jtl_tutorial_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && npe_new_jtl_tutorial_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && npe_new_jtl_tutorial_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && npe_new_jtl_tutorial_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && npe_new_jtl_tutorial_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && npe_new_jtl_tutorial_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && npe_new_jtl_tutorial_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 18 && npe_new_jtl_tutorial_handleBranch18 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && npe_new_jtl_tutorial_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && npe_new_jtl_tutorial_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 21 && npe_new_jtl_tutorial_handleBranch21 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 22 && npe_new_jtl_tutorial_handleBranch22 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 23 && npe_new_jtl_tutorial_handleBranch23 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 24 && npe_new_jtl_tutorial_handleBranch24 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 25 && npe_new_jtl_tutorial_handleBranch25 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 26 && npe_new_jtl_tutorial_handleBranch26 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 27 && npe_new_jtl_tutorial_handleBranch27 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 28 && npe_new_jtl_tutorial_handleBranch28 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 29 && npe_new_jtl_tutorial_handleBranch29 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 30 && npe_new_jtl_tutorial_handleBranch30 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 31 && npe_new_jtl_tutorial_handleBranch31 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 32 && npe_new_jtl_tutorial_handleBranch32 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 33 && npe_new_jtl_tutorial_handleBranch33 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 34 && npe_new_jtl_tutorial_handleBranch34 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 35 && npe_new_jtl_tutorial_handleBranch35 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 36 && npe_new_jtl_tutorial_handleBranch36 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 37 && npe_new_jtl_tutorial_handleBranch37 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 38 && npe_new_jtl_tutorial_handleBranch38 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 39 && npe_new_jtl_tutorial_handleBranch39 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 40 && npe_new_jtl_tutorial_handleBranch40 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 41 && npe_new_jtl_tutorial_handleBranch41 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 42 && npe_new_jtl_tutorial_handleBranch42 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 43 && npe_new_jtl_tutorial_handleBranch43 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 44 && npe_new_jtl_tutorial_handleBranch44 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 45 && npe_new_jtl_tutorial_handleBranch45 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 46 && npe_new_jtl_tutorial_handleBranch46 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 47 && npe_new_jtl_tutorial_handleBranch47 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 48 && npe_new_jtl_tutorial_handleBranch48 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 49 && npe_new_jtl_tutorial_handleBranch49 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 50 && npe_new_jtl_tutorial_handleBranch50 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 51 && npe_new_jtl_tutorial_handleBranch51 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 52 && npe_new_jtl_tutorial_handleBranch52 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 53 && npe_new_jtl_tutorial_handleBranch53 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 54 && npe_new_jtl_tutorial_handleBranch54 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 55 && npe_new_jtl_tutorial_handleBranch55 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 56 && npe_new_jtl_tutorial_handleBranch56 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 57 && npe_new_jtl_tutorial_handleBranch57 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 58 && npe_new_jtl_tutorial_handleBranch58 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 59 && npe_new_jtl_tutorial_handleBranch59 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 60 && npe_new_jtl_tutorial_handleBranch60 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 61 && npe_new_jtl_tutorial_handleBranch61 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 62 && npe_new_jtl_tutorial_handleBranch62 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 63 && npe_new_jtl_tutorial_handleBranch63 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 64 && npe_new_jtl_tutorial_handleBranch64 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 65 && npe_new_jtl_tutorial_handleBranch65 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 66 && npe_new_jtl_tutorial_handleBranch66 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 67 && npe_new_jtl_tutorial_handleBranch67 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 68 && npe_new_jtl_tutorial_handleBranch68 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 69 && npe_new_jtl_tutorial_handleBranch69 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 70 && npe_new_jtl_tutorial_handleBranch70 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 71 && npe_new_jtl_tutorial_handleBranch71 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 72 && npe_new_jtl_tutorial_handleBranch72 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 73 && npe_new_jtl_tutorial_handleBranch73 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 74 && npe_new_jtl_tutorial_handleBranch74 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 75 && npe_new_jtl_tutorial_handleBranch75 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 76 && npe_new_jtl_tutorial_handleBranch76 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 77 && npe_new_jtl_tutorial_handleBranch77 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 78 && npe_new_jtl_tutorial_handleBranch78 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 79 && npe_new_jtl_tutorial_handleBranch79 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 81 && npe_new_jtl_tutorial_handleBranch81 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_new_jtl_tutorial.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

