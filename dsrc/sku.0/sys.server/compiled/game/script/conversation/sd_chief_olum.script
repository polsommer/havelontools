// ======================================================================
//
// sd_chief_olum.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.trial;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/sd_chief_olum";

// ======================================================================
// Script Conditions
// ======================================================================

boolean sd_chief_olum_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean sd_chief_olum_condition_hasTalked (obj_id player, obj_id npc)
{
	return hasObjVar(npc, "talked");
}

// ======================================================================
// Script Actions
// ======================================================================

void sd_chief_olum_action_setFaceToPlayer (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_greeting");
	
	utils.sendSystemMessageProse(players, pp);	
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_kickoffSdEvent (obj_id player, obj_id npc)
{
	dictionary dict = trial.getSessionDict(trial.getTop(npc));
	dict.put("triggerType", "triggerId");
	dict.put("triggerName", "olum_path");
	
	messageTo(trial.getTop(npc), "triggerFired", dict, 0.0f, false);
	setObjVar(npc, "talked", 1);
	
	detachScript(npc, "conversation.sd_chief_olum");
	
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_follow_me");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_playerPosition (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_player_position");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_olumQuiteRight (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_quite_right");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_playerTurnAgainst (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_player_turn_against");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_olumNotProblem (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_not_problem");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ----------------------------------------------------------------------

void sd_chief_olum_action_playerLeadWay (obj_id player, obj_id npc)
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(npc));
	prose_package pp = new prose_package();
	pp.target.set(player);
	pp.stringId = new string_id("spam", "olum_player_lead_way");
	
	utils.sendSystemMessageProse(players, pp);	
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int sd_chief_olum_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Who are you?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: One would think that I were in the position to ask questions.
	if (response == "s_6")
	{
		sd_chief_olum_action_playerPosition (player, npc);

		//-- [NOTE] 
		if (sd_chief_olum_condition__defaultCondition (player, npc))
		{
			sd_chief_olum_action_olumQuiteRight (player, npc);

			//-- NPC: Quite right. I am Chief Engineer Olum. I ran the engineering team until Captain, excuse me, Grand Admiral Sait decided the Empire wasn't the place for him. I am the only one of the dissenting officers that wasn't thrown out an air lock. I guess they figured they might need me some day.
			string_id message = new string_id (c_stringFile, "s_8");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: We can turn that against them. Kenkirk is sitting behind a wall that we can't bring down.
			boolean hasResponse0 = false;
			if (sd_chief_olum_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_11");

				utils.setScriptVar (player, "conversation.sd_chief_olum.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.sd_chief_olum.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int sd_chief_olum_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Quite right. I am Chief Engineer Olum. I ran the engineering team until Captain, excuse me, Grand Admiral Sait decided the Empire wasn't the place for him. I am the only one of the dissenting officers that wasn't thrown out an air lock. I guess they figured they might need me some day.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: We can turn that against them. Kenkirk is sitting behind a wall that we can't bring down.
	if (response == "s_11")
	{
		sd_chief_olum_action_playerTurnAgainst (player, npc);

		//-- [NOTE] 
		if (sd_chief_olum_condition__defaultCondition (player, npc))
		{
			sd_chief_olum_action_olumNotProblem (player, npc);

			//-- NPC: Not a problem. I can introduce a short in the thrusters that would temporarily shunt power away from non-essential systems such as those gates. That deck is sealed off, but I can get you up there.
			string_id message = new string_id (c_stringFile, "s_12");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Lead the way.
			boolean hasResponse0 = false;
			if (sd_chief_olum_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				utils.setScriptVar (player, "conversation.sd_chief_olum.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.sd_chief_olum.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int sd_chief_olum_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Not a problem. I can introduce a short in the thrusters that would temporarily shunt power away from non-essential systems such as those gates. That deck is sealed off, but I can get you up there.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Lead the way.
	if (response == "s_14")
	{
		sd_chief_olum_action_playerLeadWay (player, npc);

		//-- [NOTE] 
		if (sd_chief_olum_condition__defaultCondition (player, npc))
		{
			sd_chief_olum_action_kickoffSdEvent (player, npc);

			//-- NPC: Follow me to the engineering lift.
			string_id message = new string_id (c_stringFile, "s_16");
			utils.removeScriptVar (player, "conversation.sd_chief_olum.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.sd_chief_olum");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.sd_chief_olum");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (sd_chief_olum_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "wave_finger_warning");

		sd_chief_olum_action_setFaceToPlayer (player, npc);

		//-- NPC: Who are you?
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: One would think that I were in the position to ask questions.
		boolean hasResponse0 = false;
		if (sd_chief_olum_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			utils.setScriptVar (player, "conversation.sd_chief_olum.branchId", 1);

			npcStartConversation (player, npc, "sd_chief_olum", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "sd_chief_olum")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.sd_chief_olum.branchId");

	if (branchId == 1 && sd_chief_olum_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && sd_chief_olum_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && sd_chief_olum_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.sd_chief_olum.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

