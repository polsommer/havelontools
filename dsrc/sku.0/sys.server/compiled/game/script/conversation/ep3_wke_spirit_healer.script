// ======================================================================
//
// ep3_wke_spirit_healer.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.buff;
include library.chat;
include library.pclib;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_wke_spirit_healer";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_wke_spirit_healer_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_wke_spirit_healer_condition_isSick (obj_id player, obj_id npc)
{
	return buff.hasBuff(player, "cloning_sickness");
}

// ----------------------------------------------------------------------

boolean ep3_wke_spirit_healer_condition_canAffordCure (obj_id player, obj_id npc)
{
	return pclib.canAffordCloningSicknessCure(player);
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_wke_spirit_healer_action_queueInsure (obj_id player, obj_id npc)
{
	queueCommand(player, ##"insure", npc, "", COMMAND_PRIORITY_DEFAULT);
}

// ----------------------------------------------------------------------

void ep3_wke_spirit_healer_action_insureAll (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	messageTo(npc, "handleConfirmInsureAll", params, 1, false);
}

// ----------------------------------------------------------------------

void ep3_wke_spirit_healer_action_payForCure (obj_id player, obj_id npc)
{
	pclib.cureCloningSickness(player);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

int ep3_wke_spirit_healer_tokenDI_cureCost (obj_id player, obj_id npc)
{
	return pclib.getCloningSicknessCureCost(player);
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_wke_spirit_healer_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The forest spirits watch over you.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Are you able to cure my cloning sickness?
	if (response == "s_11")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Yes, I could do that for you... if you were to offer a small monetary donation.
			string_id message = new string_id (c_stringFile, "s_12");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How much?
			boolean hasResponse0 = false;
			if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Never mind.
			boolean hasResponse1 = false;
			if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_13");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_14");

				utils.setScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll keep that in mind.
	if (response == "s_34")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Be one with the forest spirits.
			string_id message = new string_id (c_stringFile, "s_36");
			utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_wke_spirit_healer_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes, I could do that for you... if you were to offer a small monetary donation.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How much?
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			//-- NPC: A donation of %DI credits should please the spirits of the forest.
			string_id message = new string_id (c_stringFile, "s_17");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I will make a donation.
			boolean hasResponse0 = false;
			if (ep3_wke_spirit_healer_condition_canAffordCure (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Thank you, but no.
			boolean hasResponse1 = false;
			if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_19");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_21");

				utils.setScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = ep3_wke_spirit_healer_tokenDI_cureCost (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = ep3_wke_spirit_healer_tokenDI_cureCost (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Never mind.
	if (response == "s_14")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Be one with the forest spirits.
			string_id message = new string_id (c_stringFile, "s_16");
			utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_wke_spirit_healer_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: A donation of %DI credits should please the spirits of the forest.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I will make a donation.
	if (response == "s_19")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			ep3_wke_spirit_healer_action_payForCure (player, npc);

			//-- NPC: Be one with the forest spirits.
			string_id message = new string_id (c_stringFile, "s_31");
			utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you, but no.
	if (response == "s_21")
	{
		//-- [NOTE] 
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Be one with the forest spirits.
			string_id message = new string_id (c_stringFile, "s_25");
			utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_wke_spirit_healer");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_wke_spirit_healer");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
	{
		//-- NPC: The forest spirits watch over you.
		string_id message = new string_id (c_stringFile, "s_20");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Are you able to cure my cloning sickness?
		boolean hasResponse0 = false;
		if (ep3_wke_spirit_healer_condition_isSick (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'll keep that in mind.
		boolean hasResponse1 = false;
		if (ep3_wke_spirit_healer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_11");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_34");

			utils.setScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId", 1);

			npcStartConversation (player, npc, "ep3_wke_spirit_healer", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_wke_spirit_healer")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

	if (branchId == 1 && ep3_wke_spirit_healer_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && ep3_wke_spirit_healer_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && ep3_wke_spirit_healer_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_wke_spirit_healer.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

