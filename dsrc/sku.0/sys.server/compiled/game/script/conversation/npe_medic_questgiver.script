// ======================================================================
//
// npe_medic_questgiver.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.npe;
include library.skill;
include library.space_quest;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_medic_questgiver";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_medic_questgiver_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_isTaskCompleteBacta (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_medic", "npe_medic_return");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_canTakeDna (obj_id player, obj_id npc)
{
	return (!groundquests.isQuestActiveOrComplete(player, "npe_side_dungeon_dna") &&
			npe_medic_questgiver_condition_hasCompletedTemplate(player, npc));
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_isTaskCompleteDna (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_side_dungeon_dna", "npe_side_dungeon_dna_signal");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_isMedicTaskActive (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_medic", "npe_medic_heal_1");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_hasCompletedMedicQuest (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "npe_medic");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_isDnaTaskActive (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_side_dungeon_dna", "npe_side_dungeon_dna_wait");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_isAnyTaskActive (obj_id player, obj_id npc)
{
	return (npe_medic_questgiver_condition_isMedicTaskActive(player, npc) || npe_medic_questgiver_condition_isDnaTaskActive(player, npc));
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_needsPack (obj_id player, obj_id npc)
{
	boolean needsItem = false;
	boolean hasItem = false;
	obj_id[] playerStuff = getInventoryAndEquipment(player);
	//loop thru players inventory, make sure they dont have the item already.
	for(int i =0; i < playerStuff.length; i++)
	{
		string templateName = static_item.getStaticItemName(playerStuff[i]);
		if(templateName != null)
		{
			if(templateName == "item_bactapack_01_01")
				hasItem = true;
		}
	}
	if(groundquests.isTaskActive(player, "npe_medic", "npe_medic_heal_1") && hasItem == false)
		needsItem = true;
	return needsItem;
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_hasCompletedSolo (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "npe_solo_profession");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_needsToFinishTraining (obj_id player, obj_id npc)
{
	return (!npe_medic_questgiver_condition_hasCompletedTemplate(player, npc) && npe_medic_questgiver_condition_isTaskCompleteBacta(player, npc));
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_pointedToHere (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "npe_pointer_medic");
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_cantHelp (obj_id player, obj_id npc)
{
	return !npe_medic_questgiver_condition_pointedToHere(player, npc) && !npe_medic_questgiver_condition_hasCompletedTemplate(player, npc);
}

// ----------------------------------------------------------------------

boolean npe_medic_questgiver_condition_hasCompletedTemplate (obj_id player, obj_id npc)
{
	return 	hasObjVar(player, "npe.finishedTemplate");
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_medic_questgiver_action_giveMedicQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "npe_medic");
	groundquests.sendSignal(player, "talked_to_aja");
	npe.giveHealPopUp(player, npc);
	
	boolean hasItem = false;
	obj_id[] playerStuff = getInventoryAndEquipment(player);
	//loop thru players inventory, make sure they dont have the item already.
	for(int i =0; i < playerStuff.length; i++)
	{
		string templateName = static_item.getStaticItemName(playerStuff[i]);
		if(templateName != null)
		{
			if(templateName == "item_bactapack_01_01")
			{
				hasItem = true;
				newbieTutorialSetToolbarElement(player, 5, playerStuff[i]);
				newbieTutorialHighlightUIElement (player, "/GroundHUD.Toolbar.volume.5", 5.0f);
			}
		}
	}
	if(hasItem == false)
	{
		obj_id bactaPack = static_item.createNewItemFunction("item_bactapack_01_01", player);
		obj_id[] items = new obj_id[1];
		items[0] = bactaPack;
		showLootBox(player, items);
		newbieTutorialSetToolbarElement(player, 5, bactaPack);
		dictionary dic = new dictionary();
		dic.put("player", player);
		dic.put("location", 5);
		dic.put("time", 5.0f);
		messageTo(player, "makeUiElementAnimate", dic, 0.25f, true);
		//newbieTutorialHighlightUIElement (player, "/GroundHUD.Toolbar.volume.5", 5.0f);
	}	
}

// ----------------------------------------------------------------------

void npe_medic_questgiver_action_giveSignalHealDone (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "npe_medic_done_healing");
	groundquests.sendSignal(player, "finished_aja");
	//npe.sendDelayed3poPopup(player, 3, 10, "sound/c3po_29.snd", "npe", "pop_credits", "npe.credits");
	//npe.giveCreditPopUp(player, npc);
}

// ----------------------------------------------------------------------

void npe_medic_questgiver_action_giveNewPack (obj_id player, obj_id npc)
{
		obj_id bactaPack = static_item.createNewItemFunction("item_bactapack_01_01", player);
		obj_id[] items = new obj_id[1];
		items[0] = bactaPack;
		showLootBox(player, items);
		newbieTutorialSetToolbarElement(player, 5, bactaPack);
		dictionary dic = new dictionary();
		dic.put("player", player);
		dic.put("location", 5);
		dic.put("time", 5.0f);
		messageTo(player, "makeUiElementAnimate", dic, 0.25f, true);
}

// ----------------------------------------------------------------------

void npe_medic_questgiver_action_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void npe_medic_questgiver_action_giveDnaQuest (obj_id player, obj_id npc)
{
	groundquests.requestGrantQuest(player, "npe_side_dungeon_dna");
	npe.giveStationWaypoint(player);
	if(!hasObjVar(player, npe.QUEST_REWORK_VAR))
		setObjVar(player, npe.QUEST_REWORK_VAR, npe.QUEST_ENUMERATION);
}

// ----------------------------------------------------------------------

void npe_medic_questgiver_action_giveSignalDna (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "npe_side_dungeon_dna_signal");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_medic_questgiver_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Why are you back so soon?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I lost my bactapack.
	if (response == "s_52")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			npe_medic_questgiver_action_giveNewPack (player, npc);

			//-- NPC: Okay, here is a new one. Try not to lose it this time %TU.
			string_id message = new string_id (c_stringFile, "s_59");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcEndConversationWithMessage (player, pp);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're back! Did you get the blood samples?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, here they are.
	if (response == "s_65")
	{
		doAnimationAction (player, "feed_creature_medium");

		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			npe_medic_questgiver_action_giveSignalDna (player, npc);

			//-- NPC: Good, I will run tests on these right away. Thank you.
			string_id message = new string_id (c_stringFile, "s_66");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hello, %TU. I have a request for you, if you have the time.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure.
	if (response == "s_96")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I need you to go to Station Gamma and collect DNA from the hostile Rak'qua clones there. All you need to do is kill them and get blood samples. I'll need a few different blood type samples.
			string_id message = new string_id (c_stringFile, "s_97");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll head over there now.
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No thank you. I don't want to hunt down clones.
			boolean hasResponse1 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_55");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_56");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Depends on what it is.
	if (response == "s_51")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I have heard that there is some cloning experimentation going on at Station Gamma. Do you think you can help me confirm or deny these claims?
			string_id message = new string_id (c_stringFile, "s_53");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What would you like me to do?
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What is 'Station Gamma'?
			boolean hasResponse1 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_54");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_35");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am too busy right now, maybe later.
	if (response == "s_100")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: Okay, please come back when it is more convenient for you.
			string_id message = new string_id (c_stringFile, "s_102");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I need you to go to Station Gamma and collect DNA from the hostile Rak'qua clones there. All you need to do is kill them and get blood samples. I'll need a few different blood type samples.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll head over there now.
	if (response == "s_55")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod");

			npe_medic_questgiver_action_giveDnaQuest (player, npc);

			//-- NPC: Excellent. Flying to Station Gamma is not difficult. I'll give you a waypoint, but you will need a starship to get there.
			string_id message = new string_id (c_stringFile, "s_57");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No thank you. I don't want to hunt down clones.
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "goodbye");

			//-- NPC: Hopefully they feel the same about you. Come back if you change your mind.
			string_id message = new string_id (c_stringFile, "s_58");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I have heard that there is some cloning experimentation going on at Station Gamma. Do you think you can help me confirm or deny these claims?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What would you like me to do?
	if (response == "s_54")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I need you to collect blood samples from the Rak'qua 'clones' there. I'll need several different blood types to do a comprehensive analysis. If you have never been to space, talk to Serissu.
			string_id message = new string_id (c_stringFile, "s_61");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I will bring the samples back for you.
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_62");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What is 'Station Gamma'?
	if (response == "s_35")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: It is a space station that was sealed off, until recently. Several people have gone and returned with some very strange tales. I hear it can be a rough place, so you might want to gather some friends to help you out.
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What would you like me to do?
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I need you to collect blood samples from the Rak'qua 'clones' there. I'll need several different blood types to do a comprehensive analysis. If you have never been to space, talk to Serissu.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I will bring the samples back for you.
	if (response == "s_62")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			npe_medic_questgiver_action_giveDnaQuest (player, npc);

			//-- NPC: Thank you.
			string_id message = new string_id (c_stringFile, "s_63");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It is a space station that was sealed off, until recently. Several people have gone and returned with some very strange tales. I hear it can be a rough place, so you might want to gather some friends to help you out.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What would you like me to do?
	if (response == "s_37")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I need you to collect blood samples from the Rak'qua 'clones' there. I'll need several different blood types to do a comprehensive analysis. If you have never been to space, talk to Serissu.
			string_id message = new string_id (c_stringFile, "s_61");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I will bring the samples back for you.
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_62");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: How is the mechanic?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The bactapack worked very well. He's much better.
	if (response == "s_32")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: Thank you for your help. I'm sure the mechanic appreciates it. Here, take this stimpack. Use it on yourself whenever you are injured.
			string_id message = new string_id (c_stringFile, "s_104");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Thank you.
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_106");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Thank you for your help. I'm sure the mechanic appreciates it. Here, take this stimpack. Use it on yourself whenever you are injured.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you.
	if (response == "s_106")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			npe_medic_questgiver_action_giveSignalHealDone (player, npc);

			//-- NPC: No, thank you. You have saved me precious time.
			string_id message = new string_id (c_stringFile, "s_108");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch18 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I am extremely busy. I hope you are here to help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Billingsly sent me here to help.
	if (response == "s_44")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: Oh, thank goodness. There is a mechanic here that needs medical attention. Why don't you practice your skills with him? I'll stay here and make sure that you have no problems.
			string_id message = new string_id (c_stringFile, "s_127");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What can I do to help?
			boolean hasResponse0 = false;
			if (npe_medic_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_129");

				utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 19);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_medic_questgiver_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh, thank goodness. There is a mechanic here that needs medical attention. Why don't you practice your skills with him? I'll stay here and make sure that you have no problems.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What can I do to help?
	if (response == "s_129")
	{
		//-- [NOTE] 
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			npe_medic_questgiver_action_giveMedicQuest (player, npc);

			//-- NPC: Take this bactapack and use it on him. A shot of bacta from this should help him out.
			string_id message = new string_id (c_stringFile, "s_131");
			utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.npe_medic_questgiver");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	//setCondition( self, CONDITION_INTERESTING );
	setName( self, "Aja Sen (Medic)");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	//setCondition( self, CONDITION_INTERESTING );
	setName( self, "Aja Sen (Medic)");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.npe_medic_questgiver");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_needsPack (player, npc))
	{
		//-- NPC: Why are you back so soon?
		string_id message = new string_id (c_stringFile, "s_50");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I lost my bactapack.
		boolean hasResponse0 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_52");

			utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 1);

			npcStartConversation (player, npc, "npe_medic_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_isTaskCompleteDna (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: You're back! Did you get the blood samples?
		string_id message = new string_id (c_stringFile, "s_64");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, here they are.
		boolean hasResponse0 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_65");

			utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 3);

			npcStartConversation (player, npc, "npe_medic_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_canTakeDna (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: Hello, %TU. I have a request for you, if you have the time.
		string_id message = new string_id (c_stringFile, "s_49");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Sure.
		boolean hasResponse0 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Depends on what it is.
		boolean hasResponse1 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I am too busy right now, maybe later.
		boolean hasResponse2 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_96");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_51");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_100");

			utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 5);

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcStartConversation (player, npc, "npe_medic_questgiver", null, pp, responses);
		}
		else
		{
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_isAnyTaskActive (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: What is it? You still haven't finished what I tasked you with. Return when you are done.
		string_id message = new string_id (c_stringFile, "s_29");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_isTaskCompleteBacta (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: How is the mechanic?
		string_id message = new string_id (c_stringFile, "s_30");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: The bactapack worked very well. He's much better.
		boolean hasResponse0 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_32");

			utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 15);

			npcStartConversation (player, npc, "npe_medic_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_pointedToHere (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: I am extremely busy. I hope you are here to help.
		string_id message = new string_id (c_stringFile, "s_42");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Billingsly sent me here to help.
		boolean hasResponse0 = false;
		if (npe_medic_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_44");

			utils.setScriptVar (player, "conversation.npe_medic_questgiver.branchId", 18);

			npcStartConversation (player, npc, "npe_medic_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_needsToFinishTraining (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: I think Billingsly needs you more than I do at this moment.
		string_id message = new string_id (c_stringFile, "s_48");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition_cantHelp (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: Is there something you need?
		string_id message = new string_id (c_stringFile, "s_67");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_medic_questgiver_condition__defaultCondition (player, npc))
	{
		npe_medic_questgiver_action_facePlayer (player, npc);

		//-- NPC: I have no more work for you.
		string_id message = new string_id (c_stringFile, "s_94");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_medic_questgiver")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_medic_questgiver.branchId");

	if (branchId == 1 && npe_medic_questgiver_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && npe_medic_questgiver_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && npe_medic_questgiver_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && npe_medic_questgiver_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && npe_medic_questgiver_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && npe_medic_questgiver_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && npe_medic_questgiver_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && npe_medic_questgiver_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && npe_medic_questgiver_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 18 && npe_medic_questgiver_handleBranch18 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && npe_medic_questgiver_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_medic_questgiver.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

