// ======================================================================
//
// death_watch_medical_droid.script
// Copyright 2003, Sony Online Entertainment
// All Rights Reserved.
//
// DO NOT EDIT THIS AUTO-GENERATED FILE.  PLEASE USE THE CONVERATION EDITOR!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/death_watch_medical_droid";

// ======================================================================
// Script Conditions
// ======================================================================

boolean death_watch_medical_droid_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean death_watch_medical_droid_condition_hasObjVarMedicine (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "death_watch.drill_01"))
	{
		obj_id[] objContents = utils.getContents(player, true);

		if( objContents != null )
		{
			for( int intI = 0; intI<objContents.length; intI++ )
			{
				string strItemTemplate = getTemplateName(objContents[intI]);
				if( strItemTemplate=="object/tangible/dungeon/death_watch_bunker/crazed_miner_medicine.iff")
				{
					return false;
				}
			}
		}
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean death_watch_medical_droid_condition_noInvSpace (obj_id player, obj_id npc)
{
	boolean hasNoInvRoom = false;
	obj_id playerInv = utils.getInventoryContainer(player);
	if ( isIdValid(playerInv) )
	{
		int free_space = getVolumeFree(playerInv);
		if (free_space < 1 )
		{
			hasNoInvRoom = true;
		}
	}
	return hasNoInvRoom;
}

// ======================================================================
// Script Actions
// ======================================================================

void death_watch_medical_droid_action__defaultAction (obj_id player, obj_id npc)
{
}

// ----------------------------------------------------------------------

void death_watch_medical_droid_action_giveMedicine (obj_id player, obj_id npc)
{
	obj_id[] objContents = utils.getContents(player, true);

	if( objContents != null )
	{
		for( int intI = 0; intI<objContents.length; intI++ )
		{
			string strItemTemplate = getTemplateName(objContents[intI]);
			if( !strItemTemplate=="object/tangible/dungeon/death_watch_bunker/crazed_miner_medicine.iff")
			{
				obj_id playerInv = getObjectInSlot( player, "inventory" );
				if(isIdValid(playerInv))
				{
					obj_id item = createObject( "object/tangible/dungeon/death_watch_bunker/crazed_miner_medicine.iff", playerInv, "" );
					if(isIdValid(item))
						return;
				}
			}
		}
	}
	return;
}

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "npc.conversation.death_watch_medical_droid");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	setInvulnerable (self, true);
	setName(self, "G12-4J (a medical droid)");
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "npc.conversation.death_watch_medical_droid");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

trigger OnStartNpcConversation (obj_id player)
{
	if (ai_lib.isInCombat (self) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (death_watch_medical_droid_condition__defaultCondition (player, self))
	{
		//-- NPC: Welcome. I am medical droid designation G12-4J. How may I be of service to you?
		string_id message = new string_id (c_stringFile, "s_22f2cc9b");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I need some medicine to cure alum sickness.
		boolean hasResponse0 = false;
		if (death_watch_medical_droid_condition_hasObjVarMedicine (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I don't think there is anything that I need.
		boolean hasResponse1 = false;
		if (death_watch_medical_droid_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_ab36bcfc");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_82d3782a");

			setObjVar (player, "conversation.death_watch_medical_droid.branchId", 1);

			npcStartConversation (player, self, "death_watch_medical_droid", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "death_watch_medical_droid")
		return SCRIPT_CONTINUE;

	int branchId = getIntObjVar (player, "conversation.death_watch_medical_droid.branchId");

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome. I am medical droid designation G12-4J. How may I be of service to you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I need some medicine to cure alum sickness.
	if (branchId == 1 && response == "s_ab36bcfc")
	{
		//-- [NOTE] 
		if (!death_watch_medical_droid_condition_noInvSpace (player, self))
		{
			death_watch_medical_droid_action_giveMedicine (player, self);

			//-- NPC: Alum sickness cure has been issued. Please administer to the subject directly and allow for medicine to take effect. Resume normal, unpolluted breathing or alum sickness may return. Thank you.
			string_id message = new string_id (c_stringFile, "s_6a6a070d");
			removeObjVar (player, "conversation.death_watch_medical_droid.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (death_watch_medical_droid_condition_noInvSpace (player, self))
		{
			//-- NPC: I would like to issue you the alum sickness cure medication but you do not have any room in your inventory. Please speak to me again once you have cleared up some space.
			string_id message = new string_id (c_stringFile, "s_46d286cc");
			removeObjVar (player, "conversation.death_watch_medical_droid.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome. I am medical droid designation G12-4J. How may I be of service to you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome. I am medical droid designation G12-4J. How may I be of service to you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't think there is anything that I need.
	if (branchId == 1 && response == "s_82d3782a")
	{
		//-- [NOTE] 
		if (death_watch_medical_droid_condition__defaultCondition (player, self))
		{
			//-- NPC: Please return if there is anything that I can be of service to you for. Thank you.
			string_id message = new string_id (c_stringFile, "s_52a263b9");
			removeObjVar (player, "conversation.death_watch_medical_droid.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome. I am medical droid designation G12-4J. How may I be of service to you?' were false.");

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	removeObjVar (player, "conversation.death_watch_medical_droid.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

