// ======================================================================
//
// junk_dealer_arms.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.smuggler;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/junk_dealer_arms";

// ======================================================================
// Script Conditions
// ======================================================================

boolean junk_dealer_arms_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean junk_dealer_arms_condition_check_inv (obj_id player, obj_id npc)
{
	return smuggler.checkInventory(player, npc);
}

// ======================================================================
// Script Actions
// ======================================================================

void junk_dealer_arms_action_start_dealing (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startDealing", params, 1.0f, false);
}

// ----------------------------------------------------------------------

void junk_dealer_arms_action_face_to (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int junk_dealer_arms_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hmmm. You seem to be a discreet sort. Perhaps you are looking to do some business. If you have any untraceable weapons that maybe you would like to get off your hands I am the right person to see.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think I have a few things that you might be interested in.
	if (response == "s_c86eba88")
	{
		//-- [NOTE] 
		if (junk_dealer_arms_condition__defaultCondition (player, npc))
		{
			junk_dealer_arms_action_start_dealing (player, npc);

			//-- NPC: Just remember what I said about discretion. My buyers would be less then pleased if the authorities got word of this transaction. And I don't think you want my buyers to be unhappy.
			string_id message = new string_id (c_stringFile, "s_24f30320");
			utils.removeScriptVar (player, "conversation.junk_dealer_arms.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't think that I have anything you would be interested in.
	if (response == "s_370a03c")
	{
		//-- [NOTE] 
		if (junk_dealer_arms_condition__defaultCondition (player, npc))
		{
			//-- NPC: Right you are. Oh, and we never met.
			string_id message = new string_id (c_stringFile, "s_df5bd64e");
			utils.removeScriptVar (player, "conversation.junk_dealer_arms.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.junk_dealer_arms");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.junk_dealer_arms");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (junk_dealer_arms_condition__defaultCondition (player, npc))
	{
		junk_dealer_arms_action_face_to (player, npc);

		//-- NPC: Hmmm. You seem to be a discreet sort. Perhaps you are looking to do some business. If you have any untraceable weapons that maybe you would like to get off your hands I am the right person to see.
		string_id message = new string_id (c_stringFile, "s_3c06418f");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I think I have a few things that you might be interested in.
		boolean hasResponse0 = false;
		if (junk_dealer_arms_condition_check_inv (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I don't think that I have anything you would be interested in.
		boolean hasResponse1 = false;
		if (junk_dealer_arms_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_c86eba88");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_370a03c");

			utils.setScriptVar (player, "conversation.junk_dealer_arms.branchId", 1);

			npcStartConversation (player, npc, "junk_dealer_arms", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "junk_dealer_arms")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.junk_dealer_arms.branchId");

	if (branchId == 1 && junk_dealer_arms_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.junk_dealer_arms.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

