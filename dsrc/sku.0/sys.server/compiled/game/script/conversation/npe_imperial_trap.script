// ======================================================================
//
// npe_imperial_trap.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.anims;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_imperial_trap";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_imperial_trap_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean npe_imperial_trap_condition_hasSmugglerQuest (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_smuggler_try", "rightChoice");
}

// ----------------------------------------------------------------------

boolean npe_imperial_trap_condition_onDarkForceStep (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_force_dark", "stormtrooper");
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_imperial_trap_action_giveTrapsignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "goodOne");
	
}

// ----------------------------------------------------------------------

void npe_imperial_trap_action_giveMyselfsignal (obj_id player, obj_id npc)
{
	messageTo(npc, "help", null, 1, false);
}

// ----------------------------------------------------------------------

void npe_imperial_trap_action_incap4tw (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "goodOne");
	doAnimationAction (npc, "cough_heavy");
	messageTo(npc, "help", null, 1, false);
}

// ----------------------------------------------------------------------

void npe_imperial_trap_action_animPunch (obj_id player, obj_id npc)
{
	doAnimationAction (player, "cbt_unarmed_prone_punch");
}

// ----------------------------------------------------------------------

void npe_imperial_trap_action_completeDarkForceQuest (obj_id player, obj_id npc)
{
	setObjVar(player, "npe.finishedTemplate", 1);
	groundquests.sendSignal(player, "npe_force_done_signal");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_imperial_trap_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What do you want, citizen?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You should be more respectful. I have a job for you.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shake_head_no");

			//-- NPC: You are not my commanding officer. You have no authority over me.
			string_id message = new string_id (c_stringFile, "s_37");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You will sabotage Tansarii Station.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You are not my commanding officer. You have no authority over me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You will sabotage Tansarii Station.
	if (response == "s_38")
	{
		doAnimationAction (player, "beckon");

		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod");

			//-- NPC: I will sabotage Tansarii Station.
			string_id message = new string_id (c_stringFile, "s_39");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Go down to the engine room and overload the reactors.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I will sabotage Tansarii Station.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Go down to the engine room and overload the reactors.
	if (response == "s_40")
	{
		doAnimationAction (player, "beckon");

		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: I will go down to the engine room and overload the reactors.
			string_id message = new string_id (c_stringFile, "s_41");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Wait until I leave the station before you complete your duty.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I will go down to the engine room and overload the reactors.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Wait until I leave the station before you complete your duty.
	if (response == "s_42")
	{
		doAnimationAction (player, "beckon");

		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			npe_imperial_trap_action_completeDarkForceQuest (player, npc);

			//-- NPC: I will wait until you leave the station before I complete my duty.
			string_id message = new string_id (c_stringFile, "s_43");
			utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hold it right there, citizen.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, sir?
	if (response == "s_15")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: It would be wise if you left. This area has been secured by the Empire. No one is allowed in.
			string_id message = new string_id (c_stringFile, "s_17");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: But... I lost something very dear to me in there.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_19");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you want?
	if (response == "s_31")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: Excuse me? You had better watch your tone, kid. You realize that this area has been secured by the Empire, correct? No one is allowed in.
			string_id message = new string_id (c_stringFile, "s_33");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I don't see nothin' preventing me from going in there.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_44");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It would be wise if you left. This area has been secured by the Empire. No one is allowed in.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: But... I lost something very dear to me in there.
	if (response == "s_19")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: I said move along, citizen!
			string_id message = new string_id (c_stringFile, "s_21");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I left my copy of TIE Fighter in there. Please, my father used to play that game. It'll only take a minute. I promise.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_23");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I said move along, citizen!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I left my copy of TIE Fighter in there. Please, my father used to play that game. It'll only take a minute. I promise.
	if (response == "s_23")
	{
		doAnimationAction (player, "implore");

		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: Well... Okay, fine. But go quickly.
			string_id message = new string_id (c_stringFile, "s_25");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Quick as a gurrcat.
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_27");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well... Okay, fine. But go quickly.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Quick as a gurrcat.
	if (response == "s_27")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			npe_imperial_trap_action_giveTrapsignal (player, npc);

			//-- NPC: I better not end up in the brig over this...
			string_id message = new string_id (c_stringFile, "s_29");
			utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Excuse me? You had better watch your tone, kid. You realize that this area has been secured by the Empire, correct? No one is allowed in.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't see nothin' preventing me from going in there.
	if (response == "s_44")
	{
		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			//-- NPC: You're talking to an Imperial stormtrooper here! I can arrest you for your blasphemy to the Empire!
			string_id message = new string_id (c_stringFile, "s_46");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Oh yeah? Blasphemy this!
			boolean hasResponse0 = false;
			if (npe_imperial_trap_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_48");

				utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_imperial_trap_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're talking to an Imperial stormtrooper here! I can arrest you for your blasphemy to the Empire!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Oh yeah? Blasphemy this!
	if (response == "s_48")
	{
		doAnimationAction (player, "backhand");

		//-- [NOTE] 
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "taken_aback");

			npe_imperial_trap_action_incap4tw (player, npc);

			//-- NPC: Hey! TK-363 requesting backup. Situation in progress.
			string_id message = new string_id (c_stringFile, "s_50");
			utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.npe_imperial_trap");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "TK-363");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "TK-363");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.npe_imperial_trap");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_imperial_trap_condition_onDarkForceStep (player, npc))
	{
		//-- NPC: What do you want, citizen?
		string_id message = new string_id (c_stringFile, "s_35");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: You should be more respectful. I have a job for you.
		boolean hasResponse0 = false;
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_36");

			utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 1);

			npcStartConversation (player, npc, "npe_imperial_trap", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_imperial_trap_condition_hasSmugglerQuest (player, npc))
	{
		//-- NPC: Hold it right there, citizen.
		string_id message = new string_id (c_stringFile, "s_13");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, sir?
		boolean hasResponse0 = false;
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: What do you want?
		boolean hasResponse1 = false;
		if (npe_imperial_trap_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_15");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_31");

			utils.setScriptVar (player, "conversation.npe_imperial_trap.branchId", 6);

			npcStartConversation (player, npc, "npe_imperial_trap", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_imperial_trap_condition__defaultCondition (player, npc))
	{
		//-- NPC: Move along, citizen.
		string_id message = new string_id (c_stringFile, "s_52");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_imperial_trap")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_imperial_trap.branchId");

	if (branchId == 1 && npe_imperial_trap_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && npe_imperial_trap_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && npe_imperial_trap_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && npe_imperial_trap_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && npe_imperial_trap_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && npe_imperial_trap_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && npe_imperial_trap_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && npe_imperial_trap_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && npe_imperial_trap_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && npe_imperial_trap_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_imperial_trap.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

