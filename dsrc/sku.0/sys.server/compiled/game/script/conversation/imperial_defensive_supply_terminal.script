// ======================================================================
//
// imperial_defensive_supply_terminal.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.factions;
include library.gcw;
include library.groundquests;
include library.static_item;
include library.sui;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/imperial_defensive_supply_terminal";

// ======================================================================
// Script Conditions
// ======================================================================

boolean imperial_defensive_supply_terminal_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isTrader (obj_id player, obj_id npc)
{
	int level = utils.getLevel(player);
	if(	utils.isProfession(player, utils.TRADER) && (level > 45))
	{
		return true;
	}
	return false;

}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isRebelPlayer (obj_id player, obj_id npc)
{
	return (factions.isRebelorRebelHelper(player));
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isImperialPlayer (obj_id player, obj_id npc)
{
	
	
	if(factions.isImperial(player) && !factions.isOnLeave(player))
	{
		return true;
	}
	
	if(factions.isImperialHelper(player))
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isSliced (obj_id player, obj_id npc)
{
	int cband = getIntObjVar(npc, "gcw.contraband");
	if((cband > 0) && (utils.isProfession(player, utils.TRADER)))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_canGetCband (obj_id player, obj_id npc)
{
	int time = getGameTime();
	int oldTime = utils.getIntScriptVar(player, "gcw.gotCbandTime");
	time = (time - oldTime);
	if(time > 30)
	{
		return true;
	
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isGodCheck (obj_id player, obj_id npc)
{
	return isGod(player);
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isSmuggler (obj_id player, obj_id npc)
{
	return utils.isProfession(player, utils.SMUGGLER);
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isMaxScanLevel (obj_id player, obj_id npc)
{
	if(!groundquests.isQuestActive(player, gcw.GCW_SMUGGLER_SLICING))
	{
		return false;
	}
	
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		int scanTier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
		
		if(scanTier >= 10)	
		{
			return true;
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_isSlicing (obj_id player, obj_id npc)
{
	if(groundquests.isQuestActive(player, gcw.GCW_SMUGGLER_SLICING))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_maxScanLevel (obj_id player, obj_id npc)
{
	if(!groundquests.isQuestActive(player, gcw.GCW_SMUGGLER_SLICING))
	{
		return false;
	}
	
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		int scanTier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
		
		if(scanTier >= 10)
		{
			return false;
		}
	}
	
	return true;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_missingSequence (obj_id player, obj_id npc)
{
	if(!utils.hasScriptVar(player, "gcw.sliceSequence"))
	{
		groundquests.clearQuest(player, gcw.GCW_SMUGGLER_SLICING); 
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_noSlicingQuest (obj_id player, obj_id npc)
{
	if(!groundquests.isQuestActive(player, gcw.GCW_SMUGGLER_SLICING))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_notMissingCombination (obj_id player, obj_id npc)
{
	if(utils.hasScriptVar(player, "gcw.sliceSequence"))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_sliceInstruction (obj_id player, obj_id npc)
{
	
	int scanTier = 0;
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		scanTier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
	}
	
	if(!utils.hasScriptVar(player, "gcw.sliceSequence"))
	{
		return false;
	}	
	int[] sliceSequence = utils.getIntArrayScriptVar(player, "gcw.sliceSequence");
	if(sliceSequence[scanTier] == 2)
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_sliceOpCore (obj_id player, obj_id npc)
{
	
	int scanTier = 0;
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		scanTier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
	}
	
	if(!utils.hasScriptVar(player, "gcw.sliceSequence"))
	{
		return false;
	}	
	int[] sliceSequence = utils.getIntArrayScriptVar(player, "gcw.sliceSequence");
	if(sliceSequence[scanTier] == 3)
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean imperial_defensive_supply_terminal_condition_slicePipeline (obj_id player, obj_id npc)
{
	
	int scanTier = 0;
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		scanTier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
	}
	
	if(!utils.hasScriptVar(player, "gcw.sliceSequence"))
	{
		return false;
	}	
	int[] sliceSequence = utils.getIntArrayScriptVar(player, "gcw.sliceSequence");
	if(sliceSequence[scanTier] == 1)
	{
		return true;
	}
	
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void imperial_defensive_supply_terminal_action_giveBarricadeItems (obj_id player, obj_id npc)
{
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id obj1 = static_item.createNewItemFunction("item_gcw_energy_absorbant", pInv);
	obj_id obj2 = static_item.createNewItemFunction("item_gcw_high_density_plating", pInv);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_giveTowerItems (obj_id player, obj_id npc)
{
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id obj1 = static_item.createNewItemFunction("item_gcw_heat_resistant_wiring", pInv);
	obj_id obj2 = static_item.createNewItemFunction("item_gcw_high_performance_circuit_board", pInv);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_giveReinforcementItems (obj_id player, obj_id npc)
{
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id obj1 = static_item.createNewItemFunction("item_gcw_adrenalin_stimulant", pInv);
	obj_id obj2 = static_item.createNewItemFunction("item_gcw_bacta_injectors", pInv);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_giveTurretItems (obj_id player, obj_id npc)
{
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id obj1 = static_item.createNewItemFunction("item_gcw_rapid_firing_mech", pInv);
	obj_id obj2 = static_item.createNewItemFunction("item_gcw_heat_absorbent_casing", pInv);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_giveContraband (obj_id player, obj_id npc)
{
	obj_id pInv = utils.getInventoryContainer(player);
		
	if(hasObjVar(npc, "gcw.contraband"))
	{
		int cband = getIntObjVar(npc, "gcw.contraband");
		if (cband > 0)
		{
			float fcband = (int)cband;
			obj_id obj = createObject("object/tangible/gcw/crafting_quest/gcw_material_enhancers.iff", pInv, "");
			setObjVar(obj, "crafting_components.charge", fcband);
			setObjVar(obj, "crafting_components.power", fcband);
		}
		utils.setScriptVar(player, "gcw.gotCbandTime", getGameTime());
	}
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_closeSliceSUI (obj_id player, obj_id npc)
{
	int pid = utils.getIntScriptVar(player, "PIDvar");
	sui.closeSUI(player, pid);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_increaseCharge (obj_id player, obj_id npc)
{
	int charges;
	if(!hasObjVar(npc, "gcw.contraband"))
	{
		charges = 0;
		setObjVar(npc, "gcw.contraband", charges);
	}
	charges = getIntObjVar(npc, "gcw.contraband");
	charges++;
	setObjVar(npc, "gcw.contraband", charges);

}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_resetCharges (obj_id player, obj_id npc)
{
	int charges = 0;
	setObjVar(npc, "gcw.contraband", charges);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_rebelAction (obj_id player, obj_id npc)
{
	chat.chat(npc, player, "Your identity has been associated with a known Rebel collaborator. Please discontinue any use of this terminal and report to the nearest imperial representative for arrest.", 0);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_correctSlice (obj_id player, obj_id npc)
{
	if(!utils.hasScriptVar(player, "gcw.terminalScanTier"))
	{
		utils.setScriptVar(player, "gcw.terminalScanTier", 0);
	}
	
	int tier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
	tier++;
	utils.setScriptVar(player, "gcw.terminalScanTier", tier);

}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_grantSlicingQuest (obj_id player, obj_id npc)
{
	if(groundquests.hasCompletedQuest(player, gcw.GCW_SMUGGLER_SLICING))
	{
		groundquests.clearQuest(player, gcw.GCW_SMUGGLER_SLICING); 
	}

	utils.setScriptVar(player, "gcw.tier", 0);
	utils.setScriptVar(player, "gcw.maxTier", 0);
	utils.setScriptVar(player, "gcw.terminalScanTier", 0);
	
	int[] sliceSeqence = new int[10];
	for ( int i = 0; i < sliceSeqence.length; i++ )
	{
		sliceSeqence[i] = rand(1, 3);
		if(isGod(player))
		{
			sendSystemMessage(player, "sequence nr."+i+" is set to:"+sliceSeqence[i], null);
		}
		utils.setScriptVar(player, "gcw.sliceSequence", sliceSeqence);
	}
	
	groundquests.grantQuest(player, gcw.GCW_SMUGGLER_SLICING);
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_incorrectSlice (obj_id player, obj_id npc)
{
		utils.setScriptVar(player, "gcw.terminalScanTier", 0);
	
}

// ----------------------------------------------------------------------

void imperial_defensive_supply_terminal_action_startSlicing (obj_id player, obj_id npc)
{

	dictionary params = new dictionary();
	params.put("player", player);
	messageTo(npc, "startSlicing", params, 1.0f, false);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

int imperial_defensive_supply_terminal_tokenDI_sliceTier (obj_id player, obj_id npc)
{
	int tier = 0;
	if(utils.hasScriptVar(player, "gcw.terminalScanTier"));
	{
		tier = utils.getIntScriptVar(player, "gcw.terminalScanTier");
	}
	tier++;
	return tier;
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int imperial_defensive_supply_terminal_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Accessing defensive supply terminal. Please note that access to this terminal is restricted to Imperial personal only.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: <Access Terminal>
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isRebelPlayer (player, npc))
		{
			imperial_defensive_supply_terminal_action_rebelAction (player, npc);

			//-- NPC: Your identity has been associated with a known Rebel collaborator. Please discontinue any use of this terminal and report to the nearest imperial representative for arrest.
			string_id message = new string_id (c_stringFile, "s_227");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isImperialPlayer (player, npc))
		{
			//-- NPC: You have been recognized as a legitimate Imperial operative. Please select the type of activity you are interested in.
			string_id message = new string_id (c_stringFile, "s_229");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm looking to help in building up the local defenses.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition_isTrader (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: <Slice Terminal>
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition_isSmuggler (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Please give me some material enhancers.
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition_isSliced (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'm looking to help out in the fighting
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: <In God Mode> Increase the slicing level
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition_isGodCheck (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_231");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_283");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_89");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_317");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_321");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Your identity has not been registered as an active Imperial Operative. Please proceed to the nearest recruitment center to join the Imperial Forces.
			string_id message = new string_id (c_stringFile, "s_333");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have been recognized as a legitimate Imperial operative. Please select the type of activity you are interested in.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm looking to help in building up the local defenses.
	if (response == "s_231")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .
			string_id message = new string_id (c_stringFile, "s_233");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Barricade Construction
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Reinforcement Point Construction
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Tower Construction
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Turret Construction
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I think I'll pass
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_235");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_245");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_265");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_275");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: <Slice Terminal>
	if (response == "s_283")
	{
		imperial_defensive_supply_terminal_action_grantSlicingQuest (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Please give me some material enhancers.
	if (response == "s_89")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_canGetCband (player, npc))
		{
			imperial_defensive_supply_terminal_action_giveContraband (player, npc);

			//-- NPC: Dispencing material enhancers
			string_id message = new string_id (c_stringFile, "s_91");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Material enhancers can only be dispenced once every 60 seconds. Please return later.
			string_id message = new string_id (c_stringFile, "s_93");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm looking to help out in the fighting
	if (response == "s_317")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Best of luck. The Empire appreciates your commitment to law and order. However this terminal has no combat related tasks available at this time.
			string_id message = new string_id (c_stringFile, "s_319");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: <In God Mode> Increase the slicing level
	if (response == "s_321")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: This option will result in the terminal granting the optional item in addition to setting / increasing the bonus value on the optional item
			string_id message = new string_id (c_stringFile, "s_323");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Increase charges by 1
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: This option will reset the 'charges' value on the terminal to 0
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_325");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_329");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 28);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Barricade Construction
	if (response == "s_235")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Barricade Construction is work especially suited for a Structure Trader. However any Trader will be able to help.
			string_id message = new string_id (c_stringFile, "s_237");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes. I'll help construct barricades
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I think I'll look for something else
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_239");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_243");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Reinforcement Point Construction
	if (response == "s_245")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Reinforcement Point Construction is work especially suited for a Domestic Trader. However any Trader will be able to help.
			string_id message = new string_id (c_stringFile, "s_247");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes. I'll help construct reinforcement points
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I think I'll look for something else
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_249");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_253");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tower Construction
	if (response == "s_255")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Tower Construction is work especially suited for an Engineering Trader. However any Trader will be able to help.
			string_id message = new string_id (c_stringFile, "s_257");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes. I'll help construct towers. 
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I think I'll look for something else
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_259");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_263");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Turret Construction
	if (response == "s_265")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Turret Construction is work especially suited for a Munitions Trader. However any Trader will be able to help.
			string_id message = new string_id (c_stringFile, "s_267");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes. I'll help construct turrets
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I think I'll look for something else
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_269");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_273");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think I'll pass
	if (response == "s_275")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well. Thank you for supporting your local Imperial forces.
			string_id message = new string_id (c_stringFile, "s_277");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Barricade Construction is work especially suited for a Structure Trader. However any Trader will be able to help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. I'll help construct barricades
	if (response == "s_239")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_giveBarricadeItems (player, npc);

			//-- NPC: Thank you and good luck.
			string_id message = new string_id (c_stringFile, "s_241");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I think I'll look for something else
	if (response == "s_243")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .
			string_id message = new string_id (c_stringFile, "s_233");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Barricade Construction
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Reinforcement Point Construction
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Tower Construction
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Turret Construction
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I think I'll pass
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_235");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_245");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_265");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_275");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Reinforcement Point Construction is work especially suited for a Domestic Trader. However any Trader will be able to help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. I'll help construct reinforcement points
	if (response == "s_249")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_giveReinforcementItems (player, npc);

			//-- NPC: Thank you and good luck. 
			string_id message = new string_id (c_stringFile, "s_251");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I think I'll look for something else
	if (response == "s_253")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .
			string_id message = new string_id (c_stringFile, "s_233");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Barricade Construction
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Reinforcement Point Construction
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Tower Construction
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Turret Construction
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I think I'll pass
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_235");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_245");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_265");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_275");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Tower Construction is work especially suited for an Engineering Trader. However any Trader will be able to help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. I'll help construct towers. 
	if (response == "s_259")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_giveTowerItems (player, npc);

			//-- NPC: Thank you and good luck.
			string_id message = new string_id (c_stringFile, "s_261");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I think I'll look for something else
	if (response == "s_263")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .
			string_id message = new string_id (c_stringFile, "s_233");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Barricade Construction
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Reinforcement Point Construction
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Tower Construction
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Turret Construction
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I think I'll pass
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_235");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_245");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_265");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_275");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Turret Construction is work especially suited for a Munitions Trader. However any Trader will be able to help.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. I'll help construct turrets
	if (response == "s_269")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_giveTurretItems (player, npc);

			//-- NPC: Thank you, good luck.
			string_id message = new string_id (c_stringFile, "s_271");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I think I'll look for something else
	if (response == "s_273")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: We currently have four tasks available: Barricade Construction, Reinforcement Point Construction, Tower Construction or Turret Construction .
			string_id message = new string_id (c_stringFile, "s_233");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Barricade Construction
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Reinforcement Point Construction
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Tower Construction
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Turret Construction
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I think I'll pass
			boolean hasResponse4 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_235");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_245");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_265");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_275");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Select component to scan for a level %DI security flaw.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Scan the Data Pipeline
	if (response == "s_287")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_slicePipeline (player, npc))
		{
			//-- NPC: You have located an exploitable security flaw in level %DI's Data Pipeline
			string_id message = new string_id (c_stringFile, "s_289");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Proceed to the next security level
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_291");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 15);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_incorrectSlice (player, npc);

			//-- NPC: You found no security flaws in the level %DI's Data Pipeline. Returning to level 1.
			string_id message = new string_id (c_stringFile, "s_295");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Restart scan at level 1
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 16);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Scan the Instruction Handler
	if (response == "s_297")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_sliceInstruction (player, npc))
		{
			//-- NPC: You have located an exploitable security flaw in level %DI's Instruction Handler
			string_id message = new string_id (c_stringFile, "s_299");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Proceed to the next security level
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_301");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 17);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_incorrectSlice (player, npc);

			//-- NPC: You found no security flaws in the level %DI's Instruction Handler. Returning to level 1.
			string_id message = new string_id (c_stringFile, "s_305");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Restart scan at level 1
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_67");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 18);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Scan the Operations Core
	if (response == "s_307")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_sliceOpCore (player, npc))
		{
			//-- NPC: You have located an exploitable security flaw in level %DI's Operations Core
			string_id message = new string_id (c_stringFile, "s_309");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Proceed to the next security level
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_311");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 19);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_incorrectSlice (player, npc);

			//-- NPC: You found no security flaws in the level %DI's Operations Core. Returning to level 1.
			string_id message = new string_id (c_stringFile, "s_315");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Restart scan at level 1
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_68");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 20);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Disconnect and start slicing the terminal.
	if (response == "s_69")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_startSlicing (player, npc);

			//-- NPC: disconnecting...
			string_id message = new string_id (c_stringFile, "s_70");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have located an exploitable security flaw in level %DI's Data Pipeline

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Proceed to the next security level
	if (response == "s_291")
	{
		imperial_defensive_supply_terminal_action_correctSlice (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You found no security flaws in the level %DI's Data Pipeline. Returning to level 1.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Restart scan at level 1
	if (response == "s_66")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have located an exploitable security flaw in level %DI's Instruction Handler

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Proceed to the next security level
	if (response == "s_301")
	{
		imperial_defensive_supply_terminal_action_correctSlice (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch18 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You found no security flaws in the level %DI's Instruction Handler. Returning to level 1.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Restart scan at level 1
	if (response == "s_67")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have located an exploitable security flaw in level %DI's Operations Core

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Proceed to the next security level
	if (response == "s_311")
	{
		imperial_defensive_supply_terminal_action_correctSlice (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You found no security flaws in the level %DI's Operations Core. Returning to level 1.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Restart scan at level 1
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch22 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Disconnect and start slicing the terminal.
	if (response == "s_72")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			imperial_defensive_supply_terminal_action_startSlicing (player, npc);

			//-- NPC: disconnecting...
			string_id message = new string_id (c_stringFile, "s_73");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch28 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: This option will result in the terminal granting the optional item in addition to setting / increasing the bonus value on the optional item

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Increase charges by 1
	if (response == "s_325")
	{
		imperial_defensive_supply_terminal_action_increaseCharge (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: ok
			string_id message = new string_id (c_stringFile, "s_327");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: This option will reset the 'charges' value on the terminal to 0
	if (response == "s_329")
	{
		imperial_defensive_supply_terminal_action_resetCharges (player, npc);

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: ok
			string_id message = new string_id (c_stringFile, "s_331");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int imperial_defensive_supply_terminal_handleBranch32 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Scan terminal for security flaws...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Scanning
	if (response == "s_80")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_maxScanLevel (player, npc))
		{
			imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

			//-- NPC: Select component to scan for a level %DI security flaw.
			string_id message = new string_id (c_stringFile, "s_285");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Scan the Data Pipeline
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Scan the Instruction Handler
			boolean hasResponse1 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Scan the Operations Core
			boolean hasResponse2 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse3 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_287");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_297");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_307");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 14);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = imperial_defensive_supply_terminal_tokenDI_sliceTier (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_isMaxScanLevel (player, npc))
		{
			//-- NPC: You have successfully scanned all ten security levels. You now have to disconnect from the terminal and slice the components.
			string_id message = new string_id (c_stringFile, "s_71");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Disconnect and start slicing the terminal.
			boolean hasResponse0 = false;
			if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
		{
			//-- NPC: The security has been reset. Please disconnect from this terminal.
			string_id message = new string_id (c_stringFile, "s_74");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Resetting Quest
	if (response == "s_85")
	{
		//-- [NOTE] 
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			//-- NPC: disconnecting...
			string_id message = new string_id (c_stringFile, "s_87");
			utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.imperial_defensive_supply_terminal");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.imperial_defensive_supply_terminal");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (imperial_defensive_supply_terminal_condition_noSlicingQuest (player, npc))
	{
		//-- NPC: Accessing defensive supply terminal. Please note that access to this terminal is restricted to Imperial personal only.
		string_id message = new string_id (c_stringFile, "s_37");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: <Access Terminal>
		boolean hasResponse0 = false;
		if (imperial_defensive_supply_terminal_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_38");

			utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 1);

			npcStartConversation (player, npc, "imperial_defensive_supply_terminal", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (imperial_defensive_supply_terminal_condition_isSlicing (player, npc))
	{
		imperial_defensive_supply_terminal_action_closeSliceSUI (player, npc);

		//-- NPC: Scan terminal for security flaws...
		string_id message = new string_id (c_stringFile, "s_78");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Scanning
		boolean hasResponse0 = false;
		if (imperial_defensive_supply_terminal_condition_notMissingCombination (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Resetting Quest
		boolean hasResponse1 = false;
		if (imperial_defensive_supply_terminal_condition_missingSequence (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_80");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_85");

			utils.setScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId", 32);

			npcStartConversation (player, npc, "imperial_defensive_supply_terminal", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "imperial_defensive_supply_terminal")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

	if (branchId == 1 && imperial_defensive_supply_terminal_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && imperial_defensive_supply_terminal_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && imperial_defensive_supply_terminal_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && imperial_defensive_supply_terminal_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && imperial_defensive_supply_terminal_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && imperial_defensive_supply_terminal_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && imperial_defensive_supply_terminal_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && imperial_defensive_supply_terminal_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && imperial_defensive_supply_terminal_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && imperial_defensive_supply_terminal_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && imperial_defensive_supply_terminal_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 18 && imperial_defensive_supply_terminal_handleBranch18 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && imperial_defensive_supply_terminal_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && imperial_defensive_supply_terminal_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 22 && imperial_defensive_supply_terminal_handleBranch22 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 28 && imperial_defensive_supply_terminal_handleBranch28 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 32 && imperial_defensive_supply_terminal_handleBranch32 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.imperial_defensive_supply_terminal.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

