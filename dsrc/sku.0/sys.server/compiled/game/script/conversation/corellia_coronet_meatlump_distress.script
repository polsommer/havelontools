// ======================================================================
//
// corellia_coronet_meatlump_distress.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.34 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/corellia_coronet_meatlump_distress";

// ======================================================================
// Script Conditions
// ======================================================================

boolean corellia_coronet_meatlump_distress_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_meatlumpLieutenant (obj_id player, obj_id npc)
{
	if ( groundquests.isTaskActive(player, "corellia_coronet_meatlump_act1_part3", "meatlumpsAct1_meatlumpLieutenant") )
	{
		int questNum = groundquests.getQuestIdFromString("corellia_coronet_meatlump_act1_part3");
		int taskNum = groundquests.getTaskId(questNum, "meatlumpsAct1_meatlumpLieutenant");
		string questBaseObjVar = groundquests.getBaseObjVar(player, "encounter", "quest/corellia_coronet_meatlump_act1_part3", taskNum);
		
		string spawnListObjVarName = questBaseObjVar + ".spawnList";
		
		if( hasObjVar(player, spawnListObjVarName) )
		{
			obj_id[] spawnList = getObjIdArrayObjVar(player, spawnListObjVarName);
			if(spawnList != null)
			{
				for(int k = 0; k < spawnList.length; ++k)
				{
					obj_id spawn = spawnList[k];
					if(spawn == npc)
					{
						return true;
					}
				}
			}
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_gotPassword (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "corellia_coronet_meatlump_act1_end", "meatlumpsAct1_gotPassword");
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code1 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 1;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code2 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 2;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code3 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 3;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code4 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 4;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code5 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 5;
}

// ----------------------------------------------------------------------

boolean corellia_coronet_meatlump_distress_condition_code6 (obj_id player, obj_id npc)
{
	return utils.getIntScriptVar(player, "meatlumpAct1.codeNumber") == 6;
}

// ======================================================================
// Script Actions
// ======================================================================

void corellia_coronet_meatlump_distress_action_pickCorrectCode (obj_id player, obj_id npc)
{
	int species = getSpecies(player);
	int codeNum = rand(1,6);
	switch(species)
	{
		case SPECIES_HUMAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 1;
					break;
				case 3:
				case 4:
					codeNum = 2;
					break;	
				case 5:
				case 6:
					codeNum = 3;
					break;
			}
			break;
		case SPECIES_RODIAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 4;
					break;
				case 3:
				case 4:
					codeNum = 5;
					break;	
				case 5:
				case 6:
					codeNum = 6;
					break;
			}
			break;
		case SPECIES_TRANDOSHAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 2;
					break;
				case 3:
				case 4:
					codeNum = 4;
					break;	
				case 5:
				case 6:
					codeNum = 6;
					break;
			}
			break;
		case SPECIES_MON_CALAMARI:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 1;
					break;
				case 3:
				case 4:
					codeNum = 3;
					break;	
				case 5:
				case 6:
					codeNum = 5;
					break;
			}
			break;
		case SPECIES_WOOKIEE:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 1;
					break;
				case 3:
				case 4:
					codeNum = 2;
					break;	
				case 5:
				case 6:
					codeNum = 4;
					break;
			}
			break;
		case SPECIES_BOTHAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 3;
					break;
				case 3:
				case 4:
					codeNum = 5;
					break;	
				case 5:
				case 6:
					codeNum = 6;
					break;
			}
			break;
		case SPECIES_TWILEK:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 1;
					break;
				case 3:
				case 4:
					codeNum = 4;
					break;	
				case 5:
				case 6:
					codeNum = 5;
					break;
			}
			break;
		case SPECIES_ZABRAK:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 2;
					break;
				case 3:
				case 4:
					codeNum = 3;
					break;	
				case 5:
				case 6:
					codeNum = 6;
					break;
			}
			break;
		case SPECIES_ITHORIAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 1;
					break;
				case 3:
				case 4:
					codeNum = 5;
					break;	
				case 5:
				case 6:
					codeNum = 6;
					break;
			}
			break;
		case SPECIES_SULLUSTAN:
			switch(codeNum)
			{
				case 1:
				case 2:
					codeNum = 2;
					break;
				case 3:
				case 4:
					codeNum = 3;
					break;	
				case 5:
				case 6:
					codeNum = 4;
					break;
			}
			break;
		default:
			break;
	}
	
	utils.setScriptVar(player, "meatlumpAct1.codeNumber", codeNum);
}

// ----------------------------------------------------------------------

void corellia_coronet_meatlump_distress_action_attack (obj_id player, obj_id npc)
{
		setInvulnerable(npc, false);
		startCombat(npc, player);
		
		clearCondition (npc, CONDITION_CONVERSABLE);
		detachScript (npc, "conversation.corellia_coronet_meatlump_distress");
}

// ----------------------------------------------------------------------

void corellia_coronet_meatlump_distress_action_givePassword (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "meatlumpsAct1_spokenPassword");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int corellia_coronet_meatlump_distress_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] Is on meatlumps act I quest
	//-- NPC: Why did you send a distress signal?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I need to know the datapad password.
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
		{
			//-- NPC: Password? Why? What is your code?
			string_id message = new string_id (c_stringFile, "s_15");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sunlight shining into shadows.
			boolean hasResponse0 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Life invading the grave.
			boolean hasResponse1 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Fish walking the land.
			boolean hasResponse2 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Clouds floating in the grass.
			boolean hasResponse3 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Night falling at midday.
			boolean hasResponse4 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Music listening in silence.
			boolean hasResponse5 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Give me the password. And do so NOW.
			boolean hasResponse6 = false;
			if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_17");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_19");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_21");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_23");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_27");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_48");

				utils.setScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I summon you to your death!
	if (response == "s_52")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: Death? That is distress. But as you wish. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_54");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int corellia_coronet_meatlump_distress_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Password? Why? What is your code?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sunlight shining into shadows.
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code1 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_30");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code1 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password, You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_37");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Life invading the grave.
	if (response == "s_19")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code2 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_31");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code2 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password, You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_38");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Fish walking the land.
	if (response == "s_21")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code3 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_32");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code3 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password, You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_39");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Clouds floating in the grass.
	if (response == "s_23")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code4 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_33");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code4 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password, You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_40");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Night falling at midday.
	if (response == "s_27")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code5 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_34");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code5 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password, You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_41");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Music listening in silence.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition_code6 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_givePassword (player, npc);

			//-- NPC: Very well. Password is 'meatlump.' Farewell.
			string_id message = new string_id (c_stringFile, "s_43");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!corellia_coronet_meatlump_distress_condition_code6 (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: No. No password. You should not send distress signal. You should not leave this place. You will not leave this place. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_46");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Give me the password. And do so NOW.
	if (response == "s_48")
	{
		//-- [NOTE] 
		if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
		{
			corellia_coronet_meatlump_distress_action_attack (player, npc);

			//-- NPC: I will give you what I will give you. And what I will give you is pain and death. [*ATTACKS*]
			string_id message = new string_id (c_stringFile, "s_50");
			utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.corellia_coronet_meatlump_distress");

	setCondition (self, CONDITION_CONVERSABLE);
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if ( !ai_lib.isInCombat(self) )
	{
		stop(self);
		
		int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
		menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
		menuInfoData.setServerNotify (false);
		setCondition (self, CONDITION_CONVERSABLE);
	}

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.corellia_coronet_meatlump_distress");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] Is on meatlumps act I quest, but done with task.
	if (corellia_coronet_meatlump_distress_condition_gotPassword (player, npc))
	{
		//-- NPC: You should go now.
		string_id message = new string_id (c_stringFile, "s_45");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] Is on meatlumps act I quest
	if (corellia_coronet_meatlump_distress_condition_meatlumpLieutenant (player, npc))
	{
		corellia_coronet_meatlump_distress_action_pickCorrectCode (player, npc);

		//-- NPC: Why did you send a distress signal?
		string_id message = new string_id (c_stringFile, "s_12");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I need to know the datapad password.
		boolean hasResponse0 = false;
		if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I summon you to your death!
		boolean hasResponse1 = false;
		if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_13");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_52");

			utils.setScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId", 2);

			npcStartConversation (player, npc, "corellia_coronet_meatlump_distress", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] Is not on meatlumps act I quest
	if (corellia_coronet_meatlump_distress_condition__defaultCondition (player, npc))
	{
		//-- NPC: You did not send the distress signal. Go.
		string_id message = new string_id (c_stringFile, "s_56");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "corellia_coronet_meatlump_distress")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

	if (branchId == 2 && corellia_coronet_meatlump_distress_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && corellia_coronet_meatlump_distress_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.corellia_coronet_meatlump_distress.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

