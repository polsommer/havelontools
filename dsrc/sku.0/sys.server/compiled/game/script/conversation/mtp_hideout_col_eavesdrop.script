// ======================================================================
//
// mtp_hideout_col_eavesdrop.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.buff;
include library.chat;
include library.conversation;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/mtp_hideout_col_eavesdrop";

// ======================================================================
// Script Conditions
// ======================================================================

boolean mtp_hideout_col_eavesdrop_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_hideout_col_eavesdrop_condition_activeOrCompleteCollection (obj_id player, obj_id npc)
{
	if(hasCompletedCollection(player, "col_meatlump_eavesdrop") || hasCompletedCollectionSlotPrereq(player, "eavesdrop_location_1"))
	{
		return false;
	}
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_hideout_col_eavesdrop_condition_collectionActive (obj_id player, obj_id npc)
{
	if(!hasCompletedCollection(player, "col_meatlump_eavesdrop") && hasCompletedCollectionSlotPrereq(player, "eavesdrop_location_1"))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean mtp_hideout_col_eavesdrop_condition_readyForTurnIn (obj_id player, obj_id npc)
{
	//check to ensure each slot is complete
	for(int k = 0; k < BUG_LOCATIONS.length; k++)
	{
		if(!hasCompletedCollectionSlot(player, BUG_LOCATIONS[k]))
		{
			return false;
		}
	}
	//see if the player has the bug jar
	obj_id bug_jar = utils.getStaticItemInInventory(player, "col_listening_device_02_01");
	//has bug jar and has collection active.
	if(!isIdValid(bug_jar))
	{
		return false;
	}
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_hideout_col_eavesdrop_condition_collectionComplete (obj_id player, obj_id npc)
{
	if(hasCompletedCollection(player, "col_meatlump_eavesdrop"))
	{
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------

boolean mtp_hideout_col_eavesdrop_condition_hasLockoutBuff (obj_id player, obj_id npc)
{
	if(buff.hasBuff(player, "mtp_eavesdrop_lockout"))
	{
		return false;
	}
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void mtp_hideout_col_eavesdrop_action_grantBugJar (obj_id player, obj_id npc)
{
	//give the player a bug jar.
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id bug_jar = static_item.createNewItemFunction("col_listening_device_02_01", pInv);

	//activate the collection for them.
	modifyCollectionSlotValue(player, "meatlump_eavesdrop_start", 1);
	
	//ensure the camera was created correctly.
	if(!isIdValid(bug_jar) || !exists(bug_jar))
	{
		//TODO: CS LOG
	}
}

// ----------------------------------------------------------------------

void mtp_hideout_col_eavesdrop_action_returnBugJar (obj_id player, obj_id npc)
{
	//make sure the player has the bug_jar - 
	obj_id bug_jar = utils.getStaticItemInInventory(player, "col_listening_device_02_01");
	if(!isIdValid(bug_jar))
	{
		//player does not have the bug_jar in his inventory.
		return;
	}
	if(!hasCompletedCollectionSlotPrereq(player, "eavesdrop_location_1"))
	{
		return;
	}
	//check to ensure each slot is complete
	for(int j = 0; j < BUG_LOCATIONS.length; j++)
	{
		if(!hasCompletedCollectionSlot(player, BUG_LOCATIONS[j]))
		{
			return;
		}
	}
	
	//grant the final slot for the collection
	modifyCollectionSlotValue(player, "meatlump_eavesdrop_finish", 1);
	
	if(hasCompletedCollection(player, "col_meatlump_eavesdrop"))
	{
		//destroy the camera - the player no longer has any need for it.
		detachScript(bug_jar, "item.special.nodestroy");
		destroyObject(bug_jar);
		CustomerServiceLog("Collection: ", "Player " + getFirstName(player) + "(" + player + ") completed the 'meatlump photo' collection. " + "item 'col_listening_device_02_01'" + "(" + bug_jar + ") " + "was deleted.  *****This deletion is required to finish the collection!*****");
		//apply a 23 hour lockout.
		buff.applyBuff(player, "mtp_eavesdrop_lockout");
	}
}

// ----------------------------------------------------------------------

void mtp_hideout_col_eavesdrop_action_clearCollectionGrantNew (obj_id player, obj_id npc)
{
	//clear the collection...so we can grant it again.
	string[] completedSlots = getCompletedCollectionSlotsInCollection(player, "col_meatlump_eavesdrop");
	for(int q = 0; q < completedSlots.length; q++)
	{
		long value = getCollectionSlotValue(player, completedSlots[q]);
		modifyCollectionSlotValue(player, completedSlots[q], value * -1);
	}
	//give the player a bug jar.
	obj_id pInv = utils.getInventoryContainer(player);
	obj_id bug_jar = static_item.createNewItemFunction("col_listening_device_02_01", pInv);

	//activate the collection for them.
	modifyCollectionSlotValue(player, "meatlump_eavesdrop_start", 1);
	
	//ensure the camera was created correctly.
	if(!isIdValid(bug_jar) || !exists(bug_jar))
	{
		//TODO: CS LOG
	}
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int mtp_hideout_col_eavesdrop_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hey...psssst...I need to talk to you.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hey, I'm in no mood for getting haggled for loose change today.  
	if (response == "s_5")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: I don't want any money, I need you to do something for me.
			string_id message = new string_id (c_stringFile, "s_27");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: *sigh* Always when I'm busy...what is it  you need?
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_28");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Go away, I can't be bothered right now.
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: But...*sigh*
			string_id message = new string_id (c_stringFile, "s_41");
			utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've placed all of the bugs you wanted me to.  Here's what's left of these disgusting critters.
	if (response == "s_42")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			mtp_hideout_col_eavesdrop_action_returnBugJar (player, npc);

			//-- NPC: That's great!  Thanks for your help.  
			string_id message = new string_id (c_stringFile, "s_43");
			utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Any chance you need more more 'bugs' placed?
	if (response == "s_44")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition_hasLockoutBuff (player, npc))
		{
			//-- NPC: As a matter of fact, I do.  Something happened to the previous set that was placed.  Might have been a sewage flash flood.
			string_id message = new string_id (c_stringFile, "s_45");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sounds really gross, I'm glad I wasn't here to experience that.
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (!mtp_hideout_col_eavesdrop_condition_hasLockoutBuff (player, npc))
		{
			//-- NPC: Not today, try back tomorrow and I might need some more placed.
			string_id message = new string_id (c_stringFile, "s_51");
			utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I don't want any money, I need you to do something for me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: *sigh* Always when I'm busy...what is it  you need?
	if (response == "s_28")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: It's obvious that you're not really a Meatlump, well, neither am I.
			string_id message = new string_id (c_stringFile, "s_29");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: And you're telling me this...why?
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_31");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It's obvious that you're not really a Meatlump, well, neither am I.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: And you're telling me this...why?
	if (response == "s_31")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: They've been very suspicious of me lately, ever since I helped a captured droid escape. I haven't been able to gather much intelligence in weeks.
			string_id message = new string_id (c_stringFile, "s_33");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What is it you need?
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_34");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: They've been very suspicious of me lately, ever since I helped a captured droid escape. I haven't been able to gather much intelligence in weeks.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What is it you need?
	if (response == "s_34")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: Take this jar of bugs, each bug has a listening device strapped to it.
			string_id message = new string_id (c_stringFile, "s_35");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: uhh...
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Take this jar of bugs, each bug has a listening device strapped to it.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: uhh...
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			//-- NPC: With as many rodents that run around in these sewers, no one will notice an extra bug or two.  This will allow me to continue my spying duties without drawing any more attention.
			string_id message = new string_id (c_stringFile, "s_37");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Ok, hand over the jar.  I'll be back in a few.
			boolean hasResponse0 = false;
			if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: With as many rodents that run around in these sewers, no one will notice an extra bug or two.  This will allow me to continue my spying duties without drawing any more attention.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Ok, hand over the jar.  I'll be back in a few.
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			mtp_hideout_col_eavesdrop_action_grantBugJar (player, npc);

			//-- NPC: Find good locations for them, not just any spot will do.  There is something big being planned, the more intelligence we can gather about it, the better.
			string_id message = new string_id (c_stringFile, "s_49");
			utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_hideout_col_eavesdrop_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: As a matter of fact, I do.  Something happened to the previous set that was placed.  Might have been a sewage flash flood.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sounds really gross, I'm glad I wasn't here to experience that.
	if (response == "s_46")
	{
		//-- [NOTE] 
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			mtp_hideout_col_eavesdrop_action_clearCollectionGrantNew (player, npc);

			//-- NPC: Don't forget, find good locations for them, not just any spot will do.
			string_id message = new string_id (c_stringFile, "s_50");
			utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

const string[] BUG_LOCATIONS =
{
	"eavesdrop_location_1", 
	"eavesdrop_location_2", 
	"eavesdrop_location_3", 
	"eavesdrop_location_4", 
	"eavesdrop_location_5"
};

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.mtp_hideout_col_eavesdrop");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.mtp_hideout_col_eavesdrop");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
	{
		//-- NPC: Hey...psssst...I need to talk to you.
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Hey, I'm in no mood for getting haggled for loose change today.  
		boolean hasResponse0 = false;
		if (mtp_hideout_col_eavesdrop_condition_activeOrCompleteCollection (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Go away, I can't be bothered right now.
		boolean hasResponse1 = false;
		if (mtp_hideout_col_eavesdrop_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I've placed all of the bugs you wanted me to.  Here's what's left of these disgusting critters.
		boolean hasResponse2 = false;
		if (mtp_hideout_col_eavesdrop_condition_readyForTurnIn (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: Any chance you need more more 'bugs' placed?
		boolean hasResponse3 = false;
		if (mtp_hideout_col_eavesdrop_condition_collectionComplete (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_5");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_42");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_44");

			utils.setScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId", 1);

			npcStartConversation (player, npc, "mtp_hideout_col_eavesdrop", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "mtp_hideout_col_eavesdrop")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

	if (branchId == 1 && mtp_hideout_col_eavesdrop_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && mtp_hideout_col_eavesdrop_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && mtp_hideout_col_eavesdrop_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && mtp_hideout_col_eavesdrop_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && mtp_hideout_col_eavesdrop_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && mtp_hideout_col_eavesdrop_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && mtp_hideout_col_eavesdrop_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.mtp_hideout_col_eavesdrop.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

