// ======================================================================
//
// space_duty_vendor.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.static_item;
include library.trial;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/space_duty_vendor";

// ======================================================================
// Script Conditions
// ======================================================================

boolean space_duty_vendor_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean space_duty_vendor_condition_canAffordComp (obj_id player, obj_id npc)
{
	int tokens = trial.getTokenTotal(player, trial.SPACE_DUTY_TOKEN);
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	int price = trial.getSpaceDutyTokenPrice(level);
	
	if (tokens >= price) 
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean space_duty_vendor_condition_canAffortSchematic (obj_id player, obj_id npc)
{
	if(trial.getTokenTotal(player, trial.SPACE_DUTY_TOKEN) >= 50)
	{
		return true;
	}
	
	return false;

}

// ======================================================================
// Script Actions
// ======================================================================

void space_duty_vendor_action_setLevel1 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 1);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel2 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 2);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel3 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 3);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel4 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 4);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyArmor (obj_id player, obj_id npc)
{

	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "armor");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	
	utils.removeScriptVar(player, "dutyVendor.level");

}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel5 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 5);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel6 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 6);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel7 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 7);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel8 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 8);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel9 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 9);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_setLevel10 (obj_id player, obj_id npc)
{
	utils.setScriptVar(player, "dutyVendor.level", 10);
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyBooster (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "booster");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	
	utils.removeScriptVar(player, "dutyVendor.level");

}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyWeapCap (obj_id player, obj_id npc)
{

	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "weap_cap");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	
	utils.removeScriptVar(player, "dutyVendor.level");

}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyWeapon (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "weapon");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	utils.removeScriptVar(player, "dutyVendor.level");

}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyShield (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "shield");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	utils.removeScriptVar(player, "dutyVendor.level");
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyReactor (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "reactor");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	utils.removeScriptVar(player, "dutyVendor.level");
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyEngine (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "engine");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	utils.removeScriptVar(player, "dutyVendor.level");
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyDroidInterface (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	dictionary params = new dictionary();
	params.put("level", level);
	params.put("component", "droid_interface");
	params.put("player", player);
	messageTo(npc, "buySpaceDutyItem", params, 0, false);
	utils.removeScriptVar(player, "dutyVendor.level");
}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyInterdictionGenerator (obj_id player, obj_id npc)
{
	obj_id inventory = utils.getInventoryContainer(player);
	obj_id generator = static_item.createNewItemFunction("item_interdiction_terminal_schematic", inventory);
	if(!isIdValid(generator))
	{
		return;
	}
	//If the payment fails, destroy the item
	if(!trial.purchaseTokenItem(player, 50, trial.SPACE_DUTY_TOKEN))
	{
		destroyObject(generator);
	}

}

// ----------------------------------------------------------------------

void space_duty_vendor_action_buyInterfaceScanner (obj_id player, obj_id npc)
{
	obj_id inventory = utils.getInventoryContainer(player);
	obj_id scanner = static_item.createNewItemFunction("item_interface_scanner_schematic", inventory);
	if(!isIdValid(scanner))
	{
		return;
	}
	//If the payment fails, destroy the item
	if(!trial.purchaseTokenItem(player, 50, trial.SPACE_DUTY_TOKEN))
	{
		destroyObject(scanner);
	}

}

// ======================================================================
// Script %TO Tokens
// ======================================================================

string space_duty_vendor_tokenTO_certLevel (obj_id player, obj_id npc)
{
	string cert = "Certification Level "+(utils.getIntScriptVar(player, "dutyVendor.level"));
	return cert;
}

// ======================================================================
// Script %DI Tokens
// ======================================================================

int space_duty_vendor_tokenDI_DiPrice (obj_id player, obj_id npc)
{
	int level = utils.getIntScriptVar(player, "dutyVendor.level");
	int price = trial.getSpaceDutyTokenPrice(level);
	
	return price;
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int space_duty_vendor_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Welcome. I represent certain buisnesses that wish to offer a range of ship components in exchange for Space Duty Mercenary tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I have tokens to trade. What do you have to sell?
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well. What level of component are you interested in perusing? 
			string_id message = new string_id (c_stringFile, "s_24");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Certification Level 1
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Certification Level 2
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Certification Level 3
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Certification Level 4
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Certification Level 5
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Certification Level 6
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Certification Level 7
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Certification Level 8
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Certification Level 9
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			//-- PLAYER: Certification Level 10
			boolean hasResponse9 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse9 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_26");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_130");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_132");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_136");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_138");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_140");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_142");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse9)
					responses [responseIndex++] = new string_id (c_stringFile, "s_146");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm looking for some specialized parts. 
	if (response == "s_161")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: What parts would that be?
			string_id message = new string_id (c_stringFile, "s_162");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: A Droid Interface Scanner schematic.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A Burst Interdiction Generator schematic.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_163");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_164");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 37);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Purchase? Tokens?
	if (response == "s_160")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: A new customer perhaps? Very well. As I mentioned, I represent certain businesses that wish to offer a tangible reward for any Space Duty Mercenary token you might have earned.
			string_id message = new string_id (c_stringFile, "s_174");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Very well. What level of component are you interested in perusing? 

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 1
	if (response == "s_26")
	{
		space_duty_vendor_action_setLevel1 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 2
	if (response == "s_130")
	{
		space_duty_vendor_action_setLevel2 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 3
	if (response == "s_132")
	{
		space_duty_vendor_action_setLevel3 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 4
	if (response == "s_134")
	{
		space_duty_vendor_action_setLevel4 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 5
	if (response == "s_136")
	{
		space_duty_vendor_action_setLevel5 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 6
	if (response == "s_138")
	{
		space_duty_vendor_action_setLevel6 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 7
	if (response == "s_140")
	{
		space_duty_vendor_action_setLevel7 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 8
	if (response == "s_142")
	{
		space_duty_vendor_action_setLevel8 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 9
	if (response == "s_144")
	{
		space_duty_vendor_action_setLevel9 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Certification Level 10
	if (response == "s_146")
	{
		space_duty_vendor_action_setLevel10 (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?
			string_id message = new string_id (c_stringFile, "s_36");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Armor plates.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: A ships booster.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Weapon capacitors.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: A droid interface
			boolean hasResponse3 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: A ships engine.
			boolean hasResponse4 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: A new reactor.
			boolean hasResponse5 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: Protective shield.
			boolean hasResponse6 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			//-- PLAYER: Weapon. Just show me the guns!
			boolean hasResponse7 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse7 = true;
			}

			//-- PLAYER: Nothing thanks.
			boolean hasResponse8 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse8 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_37");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_38");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_79");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_98");

				if (hasResponse7)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse8)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 3);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Very good. Based on the Certification Level, the cost will be %DI tokens. And what type of component were you looking for?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Armor plates.
	if (response == "s_37")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase %TO Armor for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_46");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_55");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_56");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 4);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_87");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A ships booster.
	if (response == "s_38")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase a %TO a booster for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_47");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_60");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 8);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_88");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Weapon capacitors.
	if (response == "s_39")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase  %TO weapon capacitors for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_48");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_63");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 12);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_89");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A droid interface
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase  a %TO droid interface for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_49");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_67");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_68");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 16);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_90");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A ships engine.
	if (response == "s_50")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase  a %TO engine for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_52");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_71");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_74");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 20);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_91");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A new reactor.
	if (response == "s_79")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase  a %TO reactor for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_81");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_83");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_92");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 24);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_96");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Protective shield.
	if (response == "s_98")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Certainly. Please verify that you wish to purchase  a %TO shield for the price of %DI tokens.
			string_id message = new string_id (c_stringFile, "s_100");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_102");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_106");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 28);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_110");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Weapon. Just show me the guns!
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition_canAffordComp (player, npc))
		{
			//-- NPC: Of course.. why would one care about anything else? Please verify that you wish to purchase  a %TO form of death and destruction for the price of %DI tokens. One can almost hear the cries of mercy already.
			string_id message = new string_id (c_stringFile, "s_114");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.. please I want the gun!
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I've changed my mind. No thanks.
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 32);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.other.set (space_duty_vendor_tokenTO_certLevel (player, npc));
				pp.digitInteger = space_duty_vendor_tokenDI_DiPrice (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I apologize, but it looks like you lack the required number of tokens to make this purchase.
			string_id message = new string_id (c_stringFile, "s_124");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Nothing thanks.
	if (response == "s_126")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: I understand, our prices are not for everyone.
			string_id message = new string_id (c_stringFile, "s_128");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase %TO Armor for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes
	if (response == "s_55")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyArmor (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_57");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_58");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase a %TO a booster for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes
	if (response == "s_59")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyBooster (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_61");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_60")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_62");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase  %TO weapon capacitors for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_63")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyWeapCap (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_65");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_64")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_66");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase  a %TO droid interface for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_67")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyDroidInterface (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_69");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_68")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_70");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase  a %TO engine for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_71")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyEngine (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_73");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_74")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_76");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch24 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase  a %TO reactor for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_83")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyReactor (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_85");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_92")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_94");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch28 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly. Please verify that you wish to purchase  a %TO shield for the price of %DI tokens.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_102")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyShield (player, npc);

			//-- NPC: Very well, here you are.
			string_id message = new string_id (c_stringFile, "s_104");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_106")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_108");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch32 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Of course.. why would one care about anything else? Please verify that you wish to purchase  a %TO form of death and destruction for the price of %DI tokens. One can almost hear the cries of mercy already.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.. please I want the gun!
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			space_duty_vendor_action_buyWeapon (player, npc);

			//-- NPC: Of course sir. Please remember that it may cause serious health issues to it's targets.
			string_id message = new string_id (c_stringFile, "s_118");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I've changed my mind. No thanks.
	if (response == "s_120")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, have a good day.
			string_id message = new string_id (c_stringFile, "s_122");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch37 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What parts would that be?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A Droid Interface Scanner schematic.
	if (response == "s_163")
	{
		//-- [NOTE] 
		if (!space_duty_vendor_condition_canAffortSchematic (player, npc))
		{
			//-- NPC: You don't have enough tokens. Come back with at least 50 tokens, and then we'll talk.
			string_id message = new string_id (c_stringFile, "s_167");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Hm, I can sell you that for 50 tokens. But if anyone asks, you didn't get it from me.
			string_id message = new string_id (c_stringFile, "s_165");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Deal.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_168");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: A Burst Interdiction Generator schematic.
	if (response == "s_164")
	{
		//-- [NOTE] 
		if (!space_duty_vendor_condition_canAffortSchematic (player, npc))
		{
			//-- NPC: You don't have enough tokens. Come back with at least 50 tokens, and then we'll talk.
			string_id message = new string_id (c_stringFile, "s_170");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Hm, I can sell you that for 50 tokens. But if anyone asks, you didn't get it from me.
			string_id message = new string_id (c_stringFile, "s_166");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Deal.
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_171");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 42);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch39 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hm, I can sell you that for 50 tokens. But if anyone asks, you didn't get it from me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Deal.
	if (response == "s_168")
	{
		space_duty_vendor_action_buyInterfaceScanner (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, here you go.
			string_id message = new string_id (c_stringFile, "s_169");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch42 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hm, I can sell you that for 50 tokens. But if anyone asks, you didn't get it from me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Deal.
	if (response == "s_171")
	{
		space_duty_vendor_action_buyInterdictionGenerator (player, npc);

		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very well, here you go.
			string_id message = new string_id (c_stringFile, "s_172");
			utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch44 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: A new customer perhaps? Very well. As I mentioned, I represent certain businesses that wish to offer a tangible reward for any Space Duty Mercenary token you might have earned.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I earn these tokens?
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Simple. When you undertake space destroy duty missions you will earn a number of tokens along with the standard monetary reward. The number of tokens will be based on the severity of the mission with an additional bonus for bosses and for taking down whole waves of enemies. Most space stations have a list of mercenary duties in the area.
			string_id message = new string_id (c_stringFile, "s_178");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What can I do with these tokens?
	if (response == "s_180")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: You can trade them for ships components. The cost will be based on the certification level of the item you wish to purchase. Simple tell me what level and type of item you wish and I will trade you one. Remember that while you do get to decide on the level and type of items, the specific quality of the item. Well, that's random.
			string_id message = new string_id (c_stringFile, "s_182");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think that's enough information for now.
	if (response == "s_184")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome. I represent certain buisnesses that wish to offer a range of ship components in exchange for Space Duty Mercenary tokens.
			string_id message = new string_id (c_stringFile, "s_21");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I have tokens to trade. What do you have to sell?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm looking for some specialized parts. 
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Purchase? Tokens?
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_161");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch45 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Simple. When you undertake space destroy duty missions you will earn a number of tokens along with the standard monetary reward. The number of tokens will be based on the severity of the mission with an additional bonus for bosses and for taking down whole waves of enemies. Most space stations have a list of mercenary duties in the area.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I earn these tokens?
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Simple. When you undertake space destroy duty missions you will earn a number of tokens along with the standard monetary reward. The number of tokens will be based on the severity of the mission with an additional bonus for bosses and for taking down whole waves of enemies. Most space stations have a list of mercenary duties in the area.
			string_id message = new string_id (c_stringFile, "s_178");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What can I do with these tokens?
	if (response == "s_180")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: You can trade them for ships components. The cost will be based on the certification level of the item you wish to purchase. Simple tell me what level and type of item you wish and I will trade you one. Remember that while you do get to decide on the level and type of items, the specific quality of the item. Well, that's random.
			string_id message = new string_id (c_stringFile, "s_182");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think that's enough information for now.
	if (response == "s_184")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome. I represent certain buisnesses that wish to offer a range of ship components in exchange for Space Duty Mercenary tokens.
			string_id message = new string_id (c_stringFile, "s_21");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I have tokens to trade. What do you have to sell?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm looking for some specialized parts. 
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Purchase? Tokens?
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_161");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int space_duty_vendor_handleBranch46 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You can trade them for ships components. The cost will be based on the certification level of the item you wish to purchase. Simple tell me what level and type of item you wish and I will trade you one. Remember that while you do get to decide on the level and type of items, the specific quality of the item. Well, that's random.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I earn these tokens?
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Simple. When you undertake space destroy duty missions you will earn a number of tokens along with the standard monetary reward. The number of tokens will be based on the severity of the mission with an additional bonus for bosses and for taking down whole waves of enemies. Most space stations have a list of mercenary duties in the area.
			string_id message = new string_id (c_stringFile, "s_178");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What can I do with these tokens?
	if (response == "s_180")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: You can trade them for ships components. The cost will be based on the certification level of the item you wish to purchase. Simple tell me what level and type of item you wish and I will trade you one. Remember that while you do get to decide on the level and type of items, the specific quality of the item. Well, that's random.
			string_id message = new string_id (c_stringFile, "s_182");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I earn these tokens?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What can I do with these tokens?
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I think that's enough information for now.
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 44);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I think that's enough information for now.
	if (response == "s_184")
	{
		//-- [NOTE] 
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			//-- NPC: Welcome. I represent certain buisnesses that wish to offer a range of ship components in exchange for Space Duty Mercenary tokens.
			string_id message = new string_id (c_stringFile, "s_21");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I have tokens to trade. What do you have to sell?
			boolean hasResponse0 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'm looking for some specialized parts. 
			boolean hasResponse1 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Purchase? Tokens?
			boolean hasResponse2 = false;
			if (space_duty_vendor_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_161");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.space_duty_vendor");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.space_duty_vendor");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (space_duty_vendor_condition__defaultCondition (player, npc))
	{
		//-- NPC: Welcome. I represent certain buisnesses that wish to offer a range of ship components in exchange for Space Duty Mercenary tokens.
		string_id message = new string_id (c_stringFile, "s_21");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I have tokens to trade. What do you have to sell?
		boolean hasResponse0 = false;
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'm looking for some specialized parts. 
		boolean hasResponse1 = false;
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Purchase? Tokens?
		boolean hasResponse2 = false;
		if (space_duty_vendor_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_22");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_161");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_160");

			utils.setScriptVar (player, "conversation.space_duty_vendor.branchId", 1);

			npcStartConversation (player, npc, "space_duty_vendor", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "space_duty_vendor")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.space_duty_vendor.branchId");

	if (branchId == 1 && space_duty_vendor_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && space_duty_vendor_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && space_duty_vendor_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && space_duty_vendor_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && space_duty_vendor_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && space_duty_vendor_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && space_duty_vendor_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && space_duty_vendor_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 24 && space_duty_vendor_handleBranch24 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 28 && space_duty_vendor_handleBranch28 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 32 && space_duty_vendor_handleBranch32 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 37 && space_duty_vendor_handleBranch37 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 39 && space_duty_vendor_handleBranch39 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 42 && space_duty_vendor_handleBranch42 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 44 && space_duty_vendor_handleBranch44 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 45 && space_duty_vendor_handleBranch45 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 46 && space_duty_vendor_handleBranch46 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.space_duty_vendor.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

