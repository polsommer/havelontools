// ======================================================================
//
// npe_rebel_1_rund.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.35 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_rebel_1_rund";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_rebel_1_rund_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean npe_rebel_1_rund_condition_hasRebQuest (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_rebel_1", "rund");
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_rebel_1_rund_action_signalReb (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "npe_rebel_1_rund");
}

// ----------------------------------------------------------------------

void npe_rebel_1_rund_action_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_rebel_1_rund_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'm pretty busy right now. With all the madness on the station, my cloning facility is seeing a lot of use. Did you need something?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Garek sent me. He said you have some information.
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (npe_rebel_1_rund_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "feed_creature_medium");

			//-- NPC: Ah...yes, here it is. The information on that data disk is TOP SECRET. Keep it out of your inventory and in a safe place. Don't you dare sell us out!
			string_id message = new string_id (c_stringFile, "s_8");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I will.
			boolean hasResponse0 = false;
			if (npe_rebel_1_rund_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				utils.setScriptVar (player, "conversation.npe_rebel_1_rund.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_rebel_1_rund.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_rebel_1_rund_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ah...yes, here it is. The information on that data disk is TOP SECRET. Keep it out of your inventory and in a safe place. Don't you dare sell us out!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I will.
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (npe_rebel_1_rund_condition__defaultCondition (player, npc))
		{
			npe_rebel_1_rund_action_signalReb (player, npc);

			//-- NPC: Thank you.
			string_id message = new string_id (c_stringFile, "s_12");
			utils.removeScriptVar (player, "conversation.npe_rebel_1_rund.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.npe_rebel_1_rund");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setName( self, "Rund Jesela");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable( self, true );
	setName( self, "Rund Jesela");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.npe_rebel_1_rund");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_rebel_1_rund_condition_hasRebQuest (player, npc))
	{
		npe_rebel_1_rund_action_facePlayer (player, npc);

		//-- NPC: I'm pretty busy right now. With all the madness on the station, my cloning facility is seeing a lot of use. Did you need something?
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Garek sent me. He said you have some information.
		boolean hasResponse0 = false;
		if (npe_rebel_1_rund_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			utils.setScriptVar (player, "conversation.npe_rebel_1_rund.branchId", 1);

			npcStartConversation (player, npc, "npe_rebel_1_rund", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_rebel_1_rund_condition__defaultCondition (player, npc))
	{
		npe_rebel_1_rund_action_facePlayer (player, npc);

		//-- NPC: Sorry. I don't have time to chat right now. 
		string_id message = new string_id (c_stringFile, "s_14");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_rebel_1_rund")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_rebel_1_rund.branchId");

	if (branchId == 1 && npe_rebel_1_rund_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && npe_rebel_1_rund_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_rebel_1_rund.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

