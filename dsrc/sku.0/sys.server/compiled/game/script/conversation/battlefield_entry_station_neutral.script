// ======================================================================
//
// battlefield_entry_station_neutral.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.space_battlefield;
include library.space_combat;
include library.space_flags;
include library.space_transition;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/battlefield_entry_station_neutral";

// ======================================================================
// Script Conditions
// ======================================================================

boolean battlefield_entry_station_neutral_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isPlayerRebel (obj_id player, obj_id npc)
{
	return space_battlefield.isInRebelShip(player);
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isPlayerImperial (obj_id player, obj_id npc)
{
	return space_battlefield.isInImperialShip(player);
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_canAffordEntry (obj_id player, obj_id npc)
{
	int intCost = space_battlefield.canAffordPrestigePointCost(space_transition.getContainingShip(player), npc);
	if(intCost==0)
	{
		return false;
	}
	return true;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isTooFar (obj_id player, obj_id npc)
{
	space_combat.playCombatTauntSound( player );
	obj_id containingShip = space_transition.getContainingShip(player);
	return ( getDistance( npc, containingShip ) > space_transition.STATION_COMM_MAX_DISTANCE );
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isPlayerNeutral (obj_id player, obj_id npc)
{
	return space_battlefield.isInNeutralShip(player);	
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isRebelFactionPlayer (obj_id player, obj_id npc)
{
	int playerFactionID = pvpGetAlignedFaction(player);
	
	if(playerFactionID == ##"rebel" || space_flags.isRebelHelperPilot(player))
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isImperialFactionPlayer (obj_id player, obj_id npc)
{
	int playerFactionID = pvpGetAlignedFaction(player);
	
	if(playerFactionID == ##"imperial" || space_flags.isImperialHelperPilot(player))
	{
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean battlefield_entry_station_neutral_condition_isInYacht (obj_id player, obj_id npc)
{
	obj_id ship = space_transition.getContainingShip(player);
	if (isIdValid( ship) )
	{
		string template = getTemplateName(ship);
		if ( template != null && template.endsWith("_yacht.iff") )
			return true;
	}
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void battlefield_entry_station_neutral_action_goToRebelBattlefield (obj_id player, obj_id npc)
{
	//setObjVar(space_transition.getContainingShip(player), "intBattlefieldTeam", ##"rebel");	

	obj_id ship = space_transition.getContainingShip(player);
	setObjVar(ship, "spaceFaction.FactionOverride", ##"rebel");

	space_battlefield.doBattleFieldTransition(space_transition.getContainingShip(player), npc, "rebel_entry");
}

// ----------------------------------------------------------------------

void battlefield_entry_station_neutral_action_goToKessel (obj_id player, obj_id npc)
{
	space_battlefield.doKesselTransition(space_transition.getContainingShip(player), npc);
}

// ----------------------------------------------------------------------

void battlefield_entry_station_neutral_action_goToImperialBattlefield (obj_id player, obj_id npc)
{	
//	setObjVar(space_transition.getContainingShip(player), "intBattlefieldTeam", ##"imperial");	
//  Changing DS to use the univaersal PvP system

	obj_id ship = space_transition.getContainingShip(player);
	setObjVar(ship, "spaceFaction.FactionOverride", ##"imperial");

	space_battlefield.doBattleFieldTransition(space_transition.getContainingShip(player), npc, "imperial_entry");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

int battlefield_entry_station_neutral_tokenDI_prestigeCost (obj_id player, obj_id npc)
{
	return space_battlefield.getPrestigeCostForTransition(player, npc);	
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int battlefield_entry_station_neutral_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Welcome, pilot!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I would like to enter Deep Space!
	if (response == "s_fa22e207")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			//-- NPC: This area of Deep Space has been closed by order of the Empire.  The only way to get in is to pose as either an Imperial yourself, or to use the Rebel Alliance's hyperspace route.  Be warned though, whichever route you choose, you will be treated as an enemy by the other side!
			string_id message = new string_id (c_stringFile, "s_a99b5897");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand
			boolean hasResponse0 = false;
			if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Forget that!
			boolean hasResponse1 = false;
			if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_43be1790");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1e10b20e");

				utils.setScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I want to go to Kessel
	if (response == "s_c4588d4d")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			battlefield_entry_station_neutral_action_goToKessel (player, npc);

			//-- NPC: Good Luck
			string_id message = new string_id (c_stringFile, "s_f61543c9");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int battlefield_entry_station_neutral_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: This area of Deep Space has been closed by order of the Empire.  The only way to get in is to pose as either an Imperial yourself, or to use the Rebel Alliance's hyperspace route.  Be warned though, whichever route you choose, you will be treated as an enemy by the other side!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand
	if (response == "s_43be1790")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			//-- NPC: Which side would you like to support?
			string_id message = new string_id (c_stringFile, "s_a785faa6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: The Rebel Alliance
			boolean hasResponse0 = false;
			if (!battlefield_entry_station_neutral_condition_isImperialFactionPlayer (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: The Empire
			boolean hasResponse1 = false;
			if (!battlefield_entry_station_neutral_condition_isRebelFactionPlayer (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_d62f971d");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5f09f8fe");

				utils.setScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Forget that!
	if (response == "s_1e10b20e")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			//-- NPC: Ha ha!  I don't blame you.  Goodbye, then.
			string_id message = new string_id (c_stringFile, "s_11e15256");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int battlefield_entry_station_neutral_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Which side would you like to support?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The Rebel Alliance
	if (response == "s_d62f971d")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			battlefield_entry_station_neutral_action_goToRebelBattlefield (player, npc);

			//-- NPC: Good luck
			string_id message = new string_id (c_stringFile, "s_34");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The Empire
	if (response == "s_5f09f8fe")
	{
		//-- [NOTE] 
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			battlefield_entry_station_neutral_action_goToImperialBattlefield (player, npc);

			//-- NPC: Good luck
			string_id message = new string_id (c_stringFile, "s_36");
			utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{

	setCondition (self, CONDITION_CONVERSABLE);
	setObjVar(self, "convo.appearance", "object/mobile/space_comm_hutt_02.iff" );
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setObjVar(self, "convo.appearance", "object/mobile/space_comm_hutt_02.iff" );
	detachScript(self, "space.content_tools.spacestation");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.battlefield_entry_station_neutral");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (battlefield_entry_station_neutral_condition_isInYacht (player, npc))
	{
		//-- NPC: There's nothing we can do for you as long as you're in that civilian ship.
		string_id message = new string_id (c_stringFile, "s_3693fe50");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_neutral_condition_isPlayerImperial (player, npc))
	{
		//-- NPC: Imperials are not welcome here.
		string_id message = new string_id (c_stringFile, "s_993453d7");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_neutral_condition_isPlayerRebel (player, npc))
	{
		//-- NPC: Rebels are not welcome here
		string_id message = new string_id (c_stringFile, "s_45e440c8");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_neutral_condition_isTooFar (player, npc))
	{
		//-- NPC: You need to move close to this station, %TU.
		string_id message = new string_id (c_stringFile, "s_3b257674");
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
	{
		//-- NPC: Welcome, pilot!
		string_id message = new string_id (c_stringFile, "s_729b53ce");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I would like to enter Deep Space!
		boolean hasResponse0 = false;
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I want to go to Kessel
		boolean hasResponse1 = false;
		if (battlefield_entry_station_neutral_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_fa22e207");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_c4588d4d");

			utils.setScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId", 5);

			npcStartConversation (player, npc, "battlefield_entry_station_neutral", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "battlefield_entry_station_neutral")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

	if (branchId == 5 && battlefield_entry_station_neutral_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && battlefield_entry_station_neutral_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && battlefield_entry_station_neutral_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.battlefield_entry_station_neutral.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

