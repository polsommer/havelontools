// ======================================================================
//
// npe_side_dungeon_meat.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.npe;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_side_dungeon_meat";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_side_dungeon_meat_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_isOnDungeonMain (obj_id player, obj_id npc)
{
	return groundquests.isQuestActiveOrComplete(player, "npe_dungeon_main");
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_hasFinished (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "npe_side_dungeon_meat");
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_isTaskActiveAny (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "npe_side_dungeon_meat", "npe_side_dungeon_meat_start") ||
			groundquests.isTaskActive(player, "npe_side_dungeon_meat", "npe_side_dungeon_meat_more") ||
			groundquests.isTaskActive(player, "npe_side_dungeon_meat", "npe_side_dungeon_meat_com"));
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_isTaskActiveFirst (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_side_dungeon_meat", "npe_side_dungeon_meat_return");
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_isTaksActiveLast (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_side_dungeon_meat", "npe_side_dungeon_meat_more_signal");
}

// ----------------------------------------------------------------------

boolean npe_side_dungeon_meat_condition_hasTemplate (obj_id player, obj_id npc)
{
	return 	hasObjVar(player, "npe.finishedTemplate");
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_side_dungeon_meat_action_giveQuest (obj_id player, obj_id npc)
{
	groundquests.requestGrantQuest(player, "npe_side_dungeon_meat");
	setObjVar (player, "npe.talkedToFiask", 1);
}

// ----------------------------------------------------------------------

void npe_side_dungeon_meat_action_sendSignalStack (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "npe_side_dungeon_meat_more_signal");
	npe.sendDelayed3poPopup(player, 3, 11, "sound/c3po_29.snd", "npe", "pop_credits", "npe.credits");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_side_dungeon_meat_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're back! Good, I can't wait to get started on this.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That's going to be one crazy stew, you know.
	if (response == "s_27")
	{
		doAnimationAction (player, "feed_creature_medium");

		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: I know, but my job is on the line. Here, take these.
			string_id message = new string_id (c_stringFile, "s_28");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Thanks.
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_29");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I know, but my job is on the line. Here, take these.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thanks.
	if (response == "s_29")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			npe_side_dungeon_meat_action_sendSignalStack (player, npc);

			//-- NPC: Maybe I can send you more money if Jabba likes the stew. If not, he's liable to feed me to his rancor.
			string_id message = new string_id (c_stringFile, "s_30");
			utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Are you going in there?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That was my intention, yes.
	if (response == "s_17")
	{
		doAnimationAction (player, "nod");

		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: Oh, good. Another candidate. I need someone to go get something for me.
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What do you need, and why can't you get it yourself?
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: What do you mean, another candidate?
			boolean hasResponse1 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_48");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh, good. Another candidate. I need someone to go get something for me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you need, and why can't you get it yourself?
	if (response == "s_32")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: Too dangerous for me. You see, I am a chef, and I am trying to make a new meat stew. I plan to serve it to Jabba the Hutt himself. What I need is a new kind of meat...meat that you can't get anywhere else.
			string_id message = new string_id (c_stringFile, "s_34");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You want me to collect some meat from whatever I find in there?
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you mean, another candidate?
	if (response == "s_48")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: What? Oh, nothing. It's just that I sent someone else in there, and they haven't come back yet. You shouldn't have anything to worry about, though.
			string_id message = new string_id (c_stringFile, "s_50");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure I don't...
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_52");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Too dangerous for me. You see, I am a chef, and I am trying to make a new meat stew. I plan to serve it to Jabba the Hutt himself. What I need is a new kind of meat...meat that you can't get anywhere else.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You want me to collect some meat from whatever I find in there?
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: Yes, but only a sample for now. We need to determine if it is even edible yet. Will you help me?
			string_id message = new string_id (c_stringFile, "s_38");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, I think I can help.
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No. That is disgusting, and I want nothing to do with it.
			boolean hasResponse1 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_44");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes, but only a sample for now. We need to determine if it is even edible yet. Will you help me?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I think I can help.
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			npe_side_dungeon_meat_action_giveQuest (player, npc);

			//-- NPC: Thank you! Please return with a sample of some meat.
			string_id message = new string_id (c_stringFile, "s_42");
			utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No. That is disgusting, and I want nothing to do with it.
	if (response == "s_44")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: Call it what you will...those Hutts will eat anything.
			string_id message = new string_id (c_stringFile, "s_46");
			utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What? Oh, nothing. It's just that I sent someone else in there, and they haven't come back yet. You shouldn't have anything to worry about, though.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure I don't...
	if (response == "s_52")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: You see, I'm a chef, and I'm trying to make a new meat stew. I plan on serving it to Jabba the Hutt himself. What I need is a new kind of meat...meat that you can't get anywhere else.
			string_id message = new string_id (c_stringFile, "s_54");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: You want me to collect some meat from whatever I find in there?
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_side_dungeon_meat_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You see, I'm a chef, and I'm trying to make a new meat stew. I plan on serving it to Jabba the Hutt himself. What I need is a new kind of meat...meat that you can't get anywhere else.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: You want me to collect some meat from whatever I find in there?
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			//-- NPC: Yes, but only a sample for now. We need to determine if it is even edible yet. Will you help me?
			string_id message = new string_id (c_stringFile, "s_38");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, I think I can help.
			boolean hasResponse0 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No. That is disgusting, and I want nothing to do with it.
			boolean hasResponse1 = false;
			if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_44");

				utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.npe_side_dungeon_meat");

	setInvulnerable (self, true);
	setCondition (self, CONDITION_CONVERSABLE);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	//setCondition (self, CONDITION_INTERESTING);
	setName( self, "Fiask Nidori");
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setInvulnerable (self, true);
	setCondition (self, CONDITION_CONVERSABLE);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	//setCondition (self, CONDITION_INTERESTING);
	setName( self, "Fiask Nidori");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.npe_side_dungeon_meat");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_side_dungeon_meat_condition_hasFinished (player, npc))
	{
		doAnimationAction (npc, "shoo");

		//-- NPC: I already paid you all you're going to get. Go away.
		string_id message = new string_id (c_stringFile, "s_56");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_side_dungeon_meat_condition_isTaskActiveAny (player, npc))
	{
		doAnimationAction (npc, "point_down");

		//-- NPC: What are you doing back? I need more samples of meat.
		string_id message = new string_id (c_stringFile, "s_19");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_side_dungeon_meat_condition_isTaksActiveLast (player, npc))
	{
		//-- NPC: You're back! Good, I can't wait to get started on this.
		string_id message = new string_id (c_stringFile, "s_26");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: That's going to be one crazy stew, you know.
		boolean hasResponse0 = false;
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_27");

			utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 3);

			npcStartConversation (player, npc, "npe_side_dungeon_meat", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_side_dungeon_meat_condition_hasTemplate (player, npc))
	{
		//-- NPC: Are you going in there?
		string_id message = new string_id (c_stringFile, "s_15");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: That was my intention, yes.
		boolean hasResponse0 = false;
		if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_17");

			utils.setScriptVar (player, "conversation.npe_side_dungeon_meat.branchId", 6);

			npcStartConversation (player, npc, "npe_side_dungeon_meat", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_side_dungeon_meat_condition__defaultCondition (player, npc))
	{
		//-- NPC: You can't possibly help me right now.
		string_id message = new string_id (c_stringFile, "s_41");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_side_dungeon_meat")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

	if (branchId == 3 && npe_side_dungeon_meat_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && npe_side_dungeon_meat_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && npe_side_dungeon_meat_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && npe_side_dungeon_meat_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && npe_side_dungeon_meat_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && npe_side_dungeon_meat_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && npe_side_dungeon_meat_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && npe_side_dungeon_meat_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_side_dungeon_meat.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

