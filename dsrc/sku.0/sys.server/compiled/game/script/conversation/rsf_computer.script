// ======================================================================
//
// rsf_computer.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.badge;
include library.chat;
include library.content;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/rsf_computer";

// ======================================================================
// Script Conditions
// ======================================================================

boolean rsf_computer_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_isOnDecoderQuest (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasProperSecurityClearance (obj_id player, obj_id npc)
{
	return badge.hasBadge(player, "bdg_content_rsf_clearance_7");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_module1_alreadyHasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_2") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_3") ||
	( groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3") && 
	!groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3_pt2") ) ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_4");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_module4_alreadyHasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_1") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_2") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_3") ||
	( groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3") && 
	!groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3_pt2") );
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_module3_alreadyHasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_1") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_2") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_4");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_module2_alreadyHasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_1") ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_3") ||
	( groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3") && 
	!groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3_pt2") ) ||
	groundquests.isQuestActive(player, "legacy_naboo_droid_module_4");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasDroidModule4Quest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_4") ||
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_4");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasDroidModule3Quest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_3") ||
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasDroidModule2Quest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_2") ||
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_2");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasDroidModule1Quest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "legacy_naboo_droid_module_1") ||
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_1");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasAllDroidParts (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_1") &&
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_2") &&
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_3_pt2") &&
	groundquests.hasCompletedQuest(player, "legacy_naboo_droid_module_4") &&
	!groundquests.isQuestActiveOrComplete(player, "legacy_naboo_back_to_rebel") &&
	!groundquests.isQuestActiveOrComplete(player, "legacy_naboo_back_to_imperial");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_needsDroidModuleUpdate (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "legacy_naboo_droid_module_1", "findDroidPart1_03") ||
	groundquests.isTaskActive(player, "legacy_naboo_droid_module_2", "findDroidPart2_03") ||
	groundquests.isTaskActive(player, "legacy_naboo_droid_module_3_pt2", "findDroidPart3_08") ||
	groundquests.isTaskActive(player, "legacy_naboo_droid_module_4", "findDroidPart4_06");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasModule1 (obj_id player, obj_id npc)
{
	return groundquests.isQuestActiveOrComplete(player, "legacy_naboo_droid_module_1");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasModule2 (obj_id player, obj_id npc)
{
	return groundquests.isQuestActiveOrComplete(player, "legacy_naboo_droid_module_2");
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasModule3 (obj_id player, obj_id npc)
{
	return (groundquests.isQuestActiveOrComplete(player, "legacy_naboo_droid_module_3_pt2") || 
	 		groundquests.isQuestActiveOrComplete(player, "legacy_naboo_droid_module_3"));
}

// ----------------------------------------------------------------------

boolean rsf_computer_condition_hasModule4 (obj_id player, obj_id npc)
{
	return groundquests.isQuestActiveOrComplete(player, "legacy_naboo_droid_module_4");
}

// ======================================================================
// Script Actions
// ======================================================================

void rsf_computer_action_grantDroidModule1Quest (obj_id player, obj_id npc)
{
	if ( groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_imp") || 
	groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_reb") )
	{
		groundquests.sendSignal (player, "usedSecurityClearanceToAccessRsfComputer");
	}
	
	groundquests.requestGrantQuest(player, "legacy_naboo_droid_module_1");
	return;
}

// ----------------------------------------------------------------------

void rsf_computer_action_sendBackToContact (obj_id player, obj_id npc)
{
	if ( hasObjVar(player, content.REBEL_PATH_OBJVAR_NAME) )
	{
		groundquests.requestGrantQuest(player, "legacy_naboo_back_to_rebel");
	}
	else if ( hasObjVar(player, content.IMPERIAL_PATH_OBJVAR_NAME) )
	{
		groundquests.requestGrantQuest(player, "legacy_naboo_back_to_imperial");
	}
	return;
}

// ----------------------------------------------------------------------

void rsf_computer_action_grantDroidModule4Quest (obj_id player, obj_id npc)
{
	if ( groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_imp") || 
	groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_reb") )
	{
		groundquests.sendSignal (player, "usedSecurityClearanceToAccessRsfComputer");
	}
	
	groundquests.requestGrantQuest(player, "legacy_naboo_droid_module_4");
}

// ----------------------------------------------------------------------

void rsf_computer_action_grantDroidModule3Quest (obj_id player, obj_id npc)
{
	if ( groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_imp") || 
	groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_reb") )
	{
		groundquests.sendSignal (player, "usedSecurityClearanceToAccessRsfComputer");
	}
	
	groundquests.requestGrantQuest(player, "legacy_naboo_droid_module_3");
}

// ----------------------------------------------------------------------

void rsf_computer_action_grantDroidModule2Quest (obj_id player, obj_id npc)
{
	if ( groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_imp") || 
	groundquests.isQuestActive(player, "naboo_theed_goto_mainframe_reb") )
	{
		groundquests.sendSignal (player, "usedSecurityClearanceToAccessRsfComputer");
	}
	
	groundquests.requestGrantQuest(player, "legacy_naboo_droid_module_2");
}

// ----------------------------------------------------------------------

void rsf_computer_action_updateDroidModuleInfo (obj_id player, obj_id npc)
{
	if ( groundquests.isTaskActive(player, "legacy_naboo_droid_module_1", "findDroidPart1_03") )
	{
		groundquests.sendSignal (player, "findDroidPart1_03");
	}
	else if ( groundquests.isTaskActive(player, "legacy_naboo_droid_module_2", "findDroidPart2_03") )
	{
		groundquests.sendSignal (player, "findDroidPart2_03");
	}
	else if ( groundquests.isTaskActive(player, "legacy_naboo_droid_module_3_pt2", "findDroidPart3_08") )
	{
		groundquests.sendSignal (player, "findDroidPart3_08");
	}
	else if ( groundquests.isTaskActive(player, "legacy_naboo_droid_module_4", "findDroidPart4_06") )
	{
		groundquests.sendSignal (player, "findDroidPart4_06");
	}
	return;
}

// ----------------------------------------------------------------------

void rsf_computer_action_sendMaulerDecode (obj_id player, obj_id npc)
{
	groundquests.sendSignal (player, "decodedMaulerMessages");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int rsf_computer_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: NABOO RSF SECURE CONNECTION - Enter your query -

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Search Databanks
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Old Republic Droid Modules
	if (response == "s_81")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Decoder
	if (response == "s_231")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_isOnDecoderQuest (player, npc))
		{
			rsf_computer_action_sendMaulerDecode (player, npc);

			//-- NPC: Decoding Mauler Data... ... ... ... ...decoded.
			string_id message = new string_id (c_stringFile, "s_235");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Error decoding...Either there is nothing to decode, or the decoder needs to be upgraded to the latest version. Would you like to (Q)uit or (R)etry?
			string_id message = new string_id (c_stringFile, "s_239");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Q
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: R
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_252");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_256");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_292")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The databank contains information available to the general public. What would you like to access?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Entertainment
	if (response == "s_120")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Games
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Theater
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Music
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_154");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Organizations
	if (response == "s_156")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_158");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Free Trader Association of Naboo
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Trade Federation of Planets
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Brotherhood of the Sith
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_170");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Planetary
	if (response == "s_192")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_194");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Corellia System
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Outlying Worlds
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Moons
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_226");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Starship
	if (response == "s_228")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_230");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: TIE Fighters
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Y-Wings
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Star Destroyers
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_232");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_242");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_288");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_290")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Please Specify a sub-category:

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Games
	if (response == "s_124")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Popular games in the galaxy include Sabacc, a card game made up of four suits: Coins, Staves, Flasks, and Sabers, and several different cards, including The Idiot, Demise, and the Queen of Air and Darkness. Sports games include Wegsphere, which is the official sport of the New Order.
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Entertainment Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_128");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_130");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_132");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Theater
	if (response == "s_134")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Serpent Rain, a play by the famous Thalos Lorin, is considered possibly one of the best theater experiences available right now.
			string_id message = new string_id (c_stringFile, "s_136");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Entertainment Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_138");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_140");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_142");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Music
	if (response == "s_144")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Music is very popular in all parts of the galaxy, and in fact, before the clone wars the most popular song in existence was a song called 11011101 #2. Only one song has ever earned a Crimson rating from the Empire, that being Only In Your Dreams.
			string_id message = new string_id (c_stringFile, "s_146");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Entertainment Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_148");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_150");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_152");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_154")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Popular games in the galaxy include Sabacc, a card game made up of four suits: Coins, Staves, Flasks, and Sabers, and several different cards, including The Idiot, Demise, and the Queen of Air and Darkness. Sports games include Wegsphere, which is the official sport of the New Order.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Entertainment Category -
	if (response == "s_128")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Games
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Theater
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Music
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_154");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_130")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_132")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Serpent Rain, a play by the famous Thalos Lorin, is considered possibly one of the best theater experiences available right now.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Entertainment Category -
	if (response == "s_138")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Games
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Theater
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Music
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_154");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_140")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_142")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Music is very popular in all parts of the galaxy, and in fact, before the clone wars the most popular song in existence was a song called 11011101 #2. Only one song has ever earned a Crimson rating from the Empire, that being Only In Your Dreams.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Entertainment Category -
	if (response == "s_148")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Games
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Theater
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Music
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_154");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_150")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_152")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Please Specify a sub-category:

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Free Trader Association of Naboo
	if (response == "s_160")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Free Trader Association of Naboo was established by Shep Contopault, and was determined to allow independent spacers to set up permanent bases at Kwilaan Spaceport.
			string_id message = new string_id (c_stringFile, "s_162");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Organizations -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_164");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_166");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_168");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Trade Federation of Planets
	if (response == "s_170")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Formed some 350 years before the Battle of Yavin this organization was a monetary monitoring group. Later, while controlled by the Neimoidians, they became more war-like, developing droids, testing them on distant planets, like Lok, and holding planets like Naboo hostage. The Trade Federation was eventually absorbed into the Empire.
			string_id message = new string_id (c_stringFile, "s_172");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Organizations -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_174");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_176");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_178");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Brotherhood of the Sith
	if (response == "s_180")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Very little is known of the Brotherhood of the Sith, save that it was formed by Exar Kun, and developed the rules for the training and education of Sith pupils.
			string_id message = new string_id (c_stringFile, "s_182");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Organizations -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_184");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_186");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_188");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_190")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Free Trader Association of Naboo was established by Shep Contopault, and was determined to allow independent spacers to set up permanent bases at Kwilaan Spaceport.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Organizations -
	if (response == "s_164")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_158");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Free Trader Association of Naboo
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Trade Federation of Planets
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Brotherhood of the Sith
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_170");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_166")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_168")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Formed some 350 years before the Battle of Yavin this organization was a monetary monitoring group. Later, while controlled by the Neimoidians, they became more war-like, developing droids, testing them on distant planets, like Lok, and holding planets like Naboo hostage. The Trade Federation was eventually absorbed into the Empire.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Organizations -
	if (response == "s_174")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_158");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Free Trader Association of Naboo
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Trade Federation of Planets
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Brotherhood of the Sith
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_170");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_176")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_178")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Very little is known of the Brotherhood of the Sith, save that it was formed by Exar Kun, and developed the rules for the training and education of Sith pupils.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Organizations -
	if (response == "s_184")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_158");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Free Trader Association of Naboo
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Trade Federation of Planets
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Brotherhood of the Sith
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_160");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_170");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_180");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_190");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_186")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_188")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Please Specify a sub-category:

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Corellia System
	if (response == "s_196")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Corellia is part of a five planet system that includes Selonia, Drall, Talus, and Tralus, which orbit the Centerpoint Station. Corellia is a very civilized world, and is known for some of its delicacies, such as clams, which on Corellia are notoriously hard to open.
			string_id message = new string_id (c_stringFile, "s_198");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Planetary Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_200");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_202");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_204");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Outlying Worlds
	if (response == "s_206")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Outlying worlds, or worlds that are off the beaten path, such as Tatooine, which is 43,000 light years from the Galactic Core, are an important part of the galactic economy. Dathomir, located in the Quelii system houses an Imperial Prison. And for hunting season, you might try Dantooine, which boasts a perfect 25 hour day.
			string_id message = new string_id (c_stringFile, "s_208");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Planetary Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_210");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_212");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_214");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Moons
	if (response == "s_216")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Moons are smaller celestial bodies that orbit a planet, such as Rori, which orbits the planet Naboo. Many planets have more than one moon, such as Endor, which has nine moons orbiting it. Not all moons are inhabitable. In fact, only three of Yavin's moons are.
			string_id message = new string_id (c_stringFile, "s_218");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return to Planetary Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_220");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_222");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_224");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_226")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Corellia is part of a five planet system that includes Selonia, Drall, Talus, and Tralus, which orbit the Centerpoint Station. Corellia is a very civilized world, and is known for some of its delicacies, such as clams, which on Corellia are notoriously hard to open.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Planetary Category -
	if (response == "s_200")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_194");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Corellia System
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Outlying Worlds
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Moons
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_226");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_202")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_204")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Outlying worlds, or worlds that are off the beaten path, such as Tatooine, which is 43,000 light years from the Galactic Core, are an important part of the galactic economy. Dathomir, located in the Quelii system houses an Imperial Prison. And for hunting season, you might try Dantooine, which boasts a perfect 25 hour day.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Planetary Category -
	if (response == "s_210")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_194");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Corellia System
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Outlying Worlds
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Moons
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_226");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_212")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_214")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Moons are smaller celestial bodies that orbit a planet, such as Rori, which orbits the planet Naboo. Many planets have more than one moon, such as Endor, which has nine moons orbiting it. Not all moons are inhabitable. In fact, only three of Yavin's moons are.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return to Planetary Category -
	if (response == "s_220")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_194");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Corellia System
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Outlying Worlds
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Moons
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_196");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_206");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_216");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_226");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_222")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_224")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Please Specify a sub-category:

	//-- [RESPONSE NOTE] 
	//-- PLAYER: TIE Fighters
	if (response == "s_232")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The TIE fighter (Twin Ion Engine) is the standard starfighter of the Imperial arsenal. They are single seat short range vehicles with no hyperspace capabilities. They fire twin linked laser cannons chin-mounted on the ship's central cockpit.
			string_id message = new string_id (c_stringFile, "s_234");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return To Starship Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_236");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_238");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_240");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Y-Wings
	if (response == "s_242")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Y-Wing, also referred to as the Koensayr BTL Longprobe star fighter, was designed for long range recon missions. These ships are capable of one or two man crews, with room for an astromech droid, and can maneuver at 1,000 km per hour in atmosphere.
			string_id message = new string_id (c_stringFile, "s_270");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return To Starship Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_272");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_274");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_276");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 17);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Star Destroyers
	if (response == "s_278")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Star Destroyers are the forefront of the Imperial Navy. There are several designations of size for Star Destroyers, including Imperial 1, Imperial 2, and Super-I and Super-II class ships. The original Victory class ships were made by Rendili StarDrive for the Old Republic, but all new Star Destroyers are made by the Kuat Drive Yards.
			string_id message = new string_id (c_stringFile, "s_280");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Return To Starship Category -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: - Return To General Information Databank -
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_282");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_284");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_286");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_288")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The TIE fighter (Twin Ion Engine) is the standard starfighter of the Imperial arsenal. They are single seat short range vehicles with no hyperspace capabilities. They fire twin linked laser cannons chin-mounted on the ship's central cockpit.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To Starship Category -
	if (response == "s_236")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_230");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: TIE Fighters
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Y-Wings
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Star Destroyers
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_232");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_242");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_288");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_238")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_240")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Y-Wing, also referred to as the Koensayr BTL Longprobe star fighter, was designed for long range recon missions. These ships are capable of one or two man crews, with room for an astromech droid, and can maneuver at 1,000 km per hour in atmosphere.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To Starship Category -
	if (response == "s_272")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_230");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: TIE Fighters
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Y-Wings
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Star Destroyers
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_232");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_242");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_288");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_274")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_276")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch18 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Star Destroyers are the forefront of the Imperial Navy. There are several designations of size for Star Destroyers, including Imperial 1, Imperial 2, and Super-I and Super-II class ships. The original Victory class ships were made by Rendili StarDrive for the Old Republic, but all new Star Destroyers are made by the Kuat Drive Yards.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To Starship Category -
	if (response == "s_282")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Please Specify a sub-category:
			string_id message = new string_id (c_stringFile, "s_230");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: TIE Fighters
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Y-Wings
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Star Destroyers
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_232");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_242");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_278");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_288");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Return To General Information Databank -
	if (response == "s_284")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The databank contains information available to the general public. What would you like to access?
			string_id message = new string_id (c_stringFile, "s_118");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Entertainment
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Organizations
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Planetary
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Starship
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse4 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_120");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_156");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_192");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_228");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_290");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_286")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Update Information about acquisition of a droid module.
	if (response == "s_296")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_updateDroidModuleInfo (player, npc);

			//-- NPC: Updating.... Database updated.
			string_id message = new string_id (c_stringFile, "s_298");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update: All Droid Modules Acquired
			boolean hasResponse0 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Return to Old Republic Droid Modules Front Page
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_300");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_262");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_302");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 21);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] mouse droid in skaak tipper bunker near kadaara
	//-- PLAYER: 1. - Positional Awareness Triangulator Chip
	if (response == "s_95")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The abstract theory behind positional awareness triangulation is to allow a droid or robot to have autonomous control over its own movement. Such a chip allows a droid to determine its path and locomotion autonomously, or without a centralized database of topography. It allows a droid to see its surroundings on its own and make determinations based on the incoming information.
			string_id message = new string_id (c_stringFile, "s_97");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: QUERY: Last Known Location
			boolean hasResponse0 = false;
			if (!rsf_computer_condition_hasDroidModule1Quest (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Return to Old Republic Droid Modules Front Page
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_99");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_110");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 23);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] computer terminal in Borv's bunker
	//-- PLAYER: 2. - Decentralized Autonomy Chip
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The decentralized autonomy chip allows a droid to make its own decisions, based on its own historical record and the historical record of its nearest neighbors. Rather than a decentralized computer storage bay that controls a vast army of droids, droid behaviors would be predicated based on the droids it is closest to, and its own history.
			string_id message = new string_id (c_stringFile, "s_117");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: QUERY: Last Known Location
			boolean hasResponse0 = false;
			if (!rsf_computer_condition_hasDroidModule2Quest (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Return to Old Republic Droid Modules Front Page
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_121");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_143");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 27);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] droideka at stonewall labs in deeja peak
	//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
	if (response == "s_151")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Strategy/Tactics Simulation chip allows a droid to access not only its own historical battle information, but the information available for all simulated tactical and real world battle situations. The chip itself can perform over 32 million calculations a second, allowing a droid with this chip to determine the correct course of combat action within a frame of computation.
			string_id message = new string_id (c_stringFile, "s_155");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: QUERY: Last Known Location
			boolean hasResponse0 = false;
			if (!rsf_computer_condition_hasDroidModule3Quest (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Return to Old Republic Droid Modules Front Page
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_159");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_181");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_185");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 31);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] super battle droid in ultragungan militia bunker
	//-- PLAYER: 4. - Stochastic Decision Chip
	if (response == "s_189")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Stochastic Decision chip allows for what the doctor called random learning. This allowed a chip to make random decisions about given situations for a time, allowing itself to learn the best course of action in each situation. The chip didn't allow for contiguous cycles, which meant that if it decided to take course A in one situation, given that situation again, it wasn't forced to choose course A. This was a huge departure for the robotics field.
			string_id message = new string_id (c_stringFile, "s_193");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: QUERY: Last Known Location
			boolean hasResponse0 = false;
			if (!rsf_computer_condition_hasDroidModule4Quest (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Return to Old Republic Droid Modules Front Page
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_197");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_219");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_223");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 35);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: 5. - Update: All Droid Modules Acquired
	if (response == "s_251")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_sendBackToContact (player, npc);

			//-- NPC: Updating.... Database updated.
			string_id message = new string_id (c_stringFile, "s_328");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_261");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_227")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch21 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Updating.... Database updated.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Update: All Droid Modules Acquired
	if (response == "s_300")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_sendBackToContact (player, npc);

			//-- NPC: Updating.... Database updated.
			string_id message = new string_id (c_stringFile, "s_328");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_261");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 22);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Return to Old Republic Droid Modules Front Page
	if (response == "s_262")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_302")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch22 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Updating.... Database updated.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_261")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch23 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The abstract theory behind positional awareness triangulation is to allow a droid or robot to have autonomous control over its own movement. Such a chip allows a droid to determine its path and locomotion autonomously, or without a centralized database of topography. It allows a droid to see its surroundings on its own and make determinations based on the incoming information.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Last Known Location
	if (response == "s_99")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Positional Awareness Chip was last located in a mouse droid an RSF researcher kept with him as a personal assistant. The droid was lost during a shipping heist by some Skaak Tippers who are rumored to reside near Kaadara.
			string_id message = new string_id (c_stringFile, "s_101");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Download Information to Datapad -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_103");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_108");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 24);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Return to Old Republic Droid Modules Front Page
	if (response == "s_110")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch24 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Positional Awareness Chip was last located in a mouse droid an RSF researcher kept with him as a personal assistant. The droid was lost during a shipping heist by some Skaak Tippers who are rumored to reside near Kaadara.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Download Information to Datapad -
	if (response == "s_103")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_module1_alreadyHasQuest (player, npc))
		{
			//-- NPC: *** WARNING: Authorization Exceeded ***  Download of further information unauthorized. Complete current transaction before seeking another.
			string_id message = new string_id (c_stringFile, "s_243");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_grantDroidModule1Quest (player, npc);

			//-- NPC: Download Complete.
			string_id message = new string_id (c_stringFile, "s_244");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_253");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 26);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_108")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch26 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Download Complete.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_253")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch27 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The decentralized autonomy chip allows a droid to make its own decisions, based on its own historical record and the historical record of its nearest neighbors. Rather than a decentralized computer storage bay that controls a vast army of droids, droid behaviors would be predicated based on the droids it is closest to, and its own history.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Last Known Location
	if (response == "s_121")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Decentralized autonomy chip was stolen. Records indicate that the probability that this chip now resides in the hands of Borvo the Hutt are 98.334334392 %.
			string_id message = new string_id (c_stringFile, "s_125");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Download Information to Datapad -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_129");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_139");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 28);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Return to Old Republic Droid Modules Front Page
	if (response == "s_143")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_147")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch28 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Decentralized autonomy chip was stolen. Records indicate that the probability that this chip now resides in the hands of Borvo the Hutt are 98.334334392 %.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Download Information to Datapad -
	if (response == "s_129")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_module2_alreadyHasQuest (player, npc))
		{
			//-- NPC: *** WARNING: Authorization Exceeded ***  Download of further information unauthorized. Complete current transaction before seeking another.
			string_id message = new string_id (c_stringFile, "s_245");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_grantDroidModule2Quest (player, npc);

			//-- NPC: Download Complete.
			string_id message = new string_id (c_stringFile, "s_246");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_255");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_139")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch30 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Download Complete.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_255")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch31 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Strategy/Tactics Simulation chip allows a droid to access not only its own historical battle information, but the information available for all simulated tactical and real world battle situations. The chip itself can perform over 32 million calculations a second, allowing a droid with this chip to determine the correct course of combat action within a frame of computation.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Last Known Location
	if (response == "s_159")
	{
		//-- [NOTE] The Strategy/Tactics chip was still in use by the republic forces during the battle of Naboo. It was held in only a few of the battle droids, however, and all but one were destroyed. The only remaining chip is contained by a battle droid taken by the Gungans as a spoil of war.
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Strategy/Tactics chip was being studied at Stonewall Labs near Dee'ja Peak until that facility closed its doors almost a year ago. Professor Zanier Hudmasse, who still resides in Dee'ja Peak, was the Head of Research at Stonewall Labs at the time of its closing and is listed as a reference for information about the labs and the research that was done there.
			string_id message = new string_id (c_stringFile, "s_163");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Download Information to Datapad -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_167");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_177");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 32);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Return to Old Republic Droid Modules Front Page
	if (response == "s_181")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_185")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch32 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] The Strategy/Tactics chip was still in use by the republic forces during the battle of Naboo. It was held in only a few of the battle droids, however, and all but one were destroyed. The only remaining chip is contained by a battle droid taken by the Gungans as a spoil of war.
	//-- NPC: The Strategy/Tactics chip was being studied at Stonewall Labs near Dee'ja Peak until that facility closed its doors almost a year ago. Professor Zanier Hudmasse, who still resides in Dee'ja Peak, was the Head of Research at Stonewall Labs at the time of its closing and is listed as a reference for information about the labs and the research that was done there.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Download Information to Datapad -
	if (response == "s_167")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_module3_alreadyHasQuest (player, npc))
		{
			//-- NPC: *** WARNING: Authorization Exceeded ***  Download of further information unauthorized. Complete current transaction before seeking another.
			string_id message = new string_id (c_stringFile, "s_247");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_grantDroidModule3Quest (player, npc);

			//-- NPC: Download Complete.
			string_id message = new string_id (c_stringFile, "s_248");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_257");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 34);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_177")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch34 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Download Complete.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_257")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch35 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: The Stochastic Decision chip allows for what the doctor called random learning. This allowed a chip to make random decisions about given situations for a time, allowing itself to learn the best course of action in each situation. The chip didn't allow for contiguous cycles, which meant that if it decided to take course A in one situation, given that situation again, it wasn't forced to choose course A. This was a huge departure for the robotics field.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: QUERY: Last Known Location
	if (response == "s_197")
	{
		//-- [NOTE] This information has been deleted. In order to find more information about the Stochastic Chip see the last authorized editor of this file : <NPC NAME>
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: The Stochastic chip was still in use by the republic forces during the battle of Naboo. It was held in only a few of the battle droids, however, and all but one were destroyed. The only remaining chip is contained by a battle droid taken by the Gungans as a spoil of war.
			string_id message = new string_id (c_stringFile, "s_201");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: - Download Information to Datapad -
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_205");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_215");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 36);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Return to Old Republic Droid Modules Front Page
	if (response == "s_219")
	{
		//-- [NOTE] 
		if (!rsf_computer_condition_hasProperSecurityClearance (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** You are not authorized to view this file.
			string_id message = new string_id (c_stringFile, "s_83");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: SUBJECT: Old Republic Droid Modules *** CLASSIFICATION: Security Clearance 7 *** Authorization Granted. Please Choose a topic to learn more about Old Republic Droid Modules.
			string_id message = new string_id (c_stringFile, "s_85");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Update Information about acquisition of a droid module.
			boolean hasResponse0 = false;
			if (rsf_computer_condition_needsDroidModuleUpdate (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: 1. - Positional Awareness Triangulator Chip
			boolean hasResponse1 = false;
			if (!rsf_computer_condition_hasModule1 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: 2. - Decentralized Autonomy Chip
			boolean hasResponse2 = false;
			if (!rsf_computer_condition_hasModule2 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: 3. - Strategy/Tactics Simulation Chip
			boolean hasResponse3 = false;
			if (!rsf_computer_condition_hasModule3 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: 4. - Stochastic Decision Chip
			boolean hasResponse4 = false;
			if (!rsf_computer_condition_hasModule4 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: 5. - Update: All Droid Modules Acquired
			boolean hasResponse5 = false;
			if (rsf_computer_condition_hasAllDroidParts (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse6 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse6 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_296");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_151");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_189");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_251");

				if (hasResponse6)
					responses [responseIndex++] = new string_id (c_stringFile, "s_227");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_223")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch36 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] This information has been deleted. In order to find more information about the Stochastic Chip see the last authorized editor of this file : <NPC NAME>
	//-- NPC: The Stochastic chip was still in use by the republic forces during the battle of Naboo. It was held in only a few of the battle droids, however, and all but one were destroyed. The only remaining chip is contained by a battle droid taken by the Gungans as a spoil of war.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: - Download Information to Datapad -
	if (response == "s_205")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_module4_alreadyHasQuest (player, npc))
		{
			//-- NPC: *** WARNING: Authorization Exceeded ***  Download of further information unauthorized. Complete current transaction before seeking another.
			string_id message = new string_id (c_stringFile, "s_249");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			rsf_computer_action_grantDroidModule4Quest (player, npc);

			//-- NPC: Download Complete.
			string_id message = new string_id (c_stringFile, "s_250");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: END SESSION
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_259");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 38);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_215")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch38 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Download Complete.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_259")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int rsf_computer_handleBranch40 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Error decoding...Either there is nothing to decode, or the decoder needs to be upgraded to the latest version. Would you like to (Q)uit or (R)etry?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Q
	if (response == "s_252")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: NABOO RSF SECURE CONNECTION - Enter your query -
			string_id message = new string_id (c_stringFile, "s_4");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: QUERY: Search Databanks
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: QUERY: Old Republic Droid Modules
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: QUERY: Decoder
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse3 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_81");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_231");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_292");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: R
	if (response == "s_256")
	{
		//-- [NOTE] 
		if (rsf_computer_condition_isOnDecoderQuest (player, npc))
		{
			rsf_computer_action_sendMaulerDecode (player, npc);

			//-- NPC: Decoding Mauler Data... ... ... ... ...decoded.
			string_id message = new string_id (c_stringFile, "s_235");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Error decoding...Either there is nothing to decode, or the decoder needs to be upgraded to the latest version. Would you like to (Q)uit or (R)etry?
			string_id message = new string_id (c_stringFile, "s_239");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Q
			boolean hasResponse0 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: R
			boolean hasResponse1 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: END SESSION
			boolean hasResponse2 = false;
			if (rsf_computer_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_252");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_256");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_260");

				utils.setScriptVar (player, "conversation.rsf_computer.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: END SESSION
	if (response == "s_260")
	{
		//-- [NOTE] 
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			//-- NPC: Files Closed.
			string_id message = new string_id (c_stringFile, "s_294");
			utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ( (isPlayer (self)) )
		detachScript(self, "conversation.rsf_computer");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	string_id funk = new string_id ("terminal_ui", "access_rsf_computer");
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, funk);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.rsf_computer");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (rsf_computer_condition__defaultCondition (player, npc))
	{
		//-- NPC: NABOO RSF SECURE CONNECTION - Enter your query -
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: QUERY: Search Databanks
		boolean hasResponse0 = false;
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: QUERY: Old Republic Droid Modules
		boolean hasResponse1 = false;
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: QUERY: Decoder
		boolean hasResponse2 = false;
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: END SESSION
		boolean hasResponse3 = false;
		if (rsf_computer_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_116");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_81");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_231");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_292");

			utils.setScriptVar (player, "conversation.rsf_computer.branchId", 1);

			npcStartConversation (player, npc, "rsf_computer", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "rsf_computer")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.rsf_computer.branchId");

	if (branchId == 1 && rsf_computer_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && rsf_computer_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && rsf_computer_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && rsf_computer_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && rsf_computer_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && rsf_computer_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && rsf_computer_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && rsf_computer_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && rsf_computer_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && rsf_computer_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && rsf_computer_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && rsf_computer_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && rsf_computer_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && rsf_computer_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && rsf_computer_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && rsf_computer_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && rsf_computer_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 18 && rsf_computer_handleBranch18 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && rsf_computer_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 21 && rsf_computer_handleBranch21 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 22 && rsf_computer_handleBranch22 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 23 && rsf_computer_handleBranch23 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 24 && rsf_computer_handleBranch24 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 26 && rsf_computer_handleBranch26 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 27 && rsf_computer_handleBranch27 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 28 && rsf_computer_handleBranch28 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 30 && rsf_computer_handleBranch30 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 31 && rsf_computer_handleBranch31 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 32 && rsf_computer_handleBranch32 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 34 && rsf_computer_handleBranch34 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 35 && rsf_computer_handleBranch35 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 36 && rsf_computer_handleBranch36 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 38 && rsf_computer_handleBranch38 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 40 && rsf_computer_handleBranch40 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.rsf_computer.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

