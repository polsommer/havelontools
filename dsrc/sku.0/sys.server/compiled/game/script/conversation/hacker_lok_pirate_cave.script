// ======================================================================
//
// hacker_lok_pirate_cave.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/hacker_lok_pirate_cave";

// ======================================================================
// Script Conditions
// ======================================================================

boolean hacker_lok_pirate_cave_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasCompletedPirate (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.hasCompletedQuest(player, "u16_nym_themepark_pirate_hideout");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasHackTask (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "findSecuritySystem")
	|| groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "helpSliceSecurity");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasReturnTask (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "returnPirateComplete");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "colorWheel");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasJokeTaskActive (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "joke");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasNumberTaskActive (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "number");
}

// ----------------------------------------------------------------------

boolean hacker_lok_pirate_cave_condition_hasSlicedTheSystem (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_pirate_hideout", "findDroidDisk");
}

// ======================================================================
// Script Actions
// ======================================================================

void hacker_lok_pirate_cave_action_colorWheelDone (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "colorWheelDone");
}

// ----------------------------------------------------------------------

void hacker_lok_pirate_cave_action_foundSecuritySys (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasFoundSecuritySystem");
}

// ----------------------------------------------------------------------

void hacker_lok_pirate_cave_action_numbersDone (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "numberDone");
}

// ----------------------------------------------------------------------

void hacker_lok_pirate_cave_action_jokeDone (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "jokeDone");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int hacker_lok_pirate_cave_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Aargh!  Can you help me with this thing?  I've found a back door to this security system, but the AI program keeps asking me these stupid questions! Can you lend me your brain?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What are you talking about?
	if (response == "s_56")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'm trying to slice through the pirates' security system. The system itself is really basic, but the final safeguard includes three questions that I need to answer. The questions don't have anything to do with the pirates or computers. I'm totally lost.
			string_id message = new string_id (c_stringFile, "s_58");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Tell me what you need.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me what you need.
	if (response == "s_57")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: I can't answer these riddles.  Who built this thing? Can you help me answer these questions?
			string_id message = new string_id (c_stringFile, "s_60");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure.  What are the questions?
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'm trying to slice through the pirates' security system. The system itself is really basic, but the final safeguard includes three questions that I need to answer. The questions don't have anything to do with the pirates or computers. I'm totally lost.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me what you need.
	if (response == "s_59")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: I can't answer these riddles.  Who built this thing? Can you help me answer these questions?
			string_id message = new string_id (c_stringFile, "s_60");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure.  What are the questions?
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_82");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I can't answer these riddles.  Who built this thing? Can you help me answer these questions?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure.  What are the questions?
	if (response == "s_82")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Great. I need to reroute the access commands, reset the security network, and break the defender chip. But I have to answer one question before I can complete each task. I can give you the questions in any order.
			string_id message = new string_id (c_stringFile, "s_109");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Great. I need to reroute the access commands, reset the security network, and break the defender chip. But I have to answer one question before I can complete each task. I can give you the questions in any order.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm pretty sure it's purple.
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Apparently that wasn't it...
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: It's brown!  Hah! I knew that one.
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Apparently that wasn't it...
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: It's orange. I'm sure of it.
	if (response == "s_119")
	{
		hacker_lok_pirate_cave_action_colorWheelDone (player, npc);

		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Great!  You must have studied art or something.  I'd have never gotten that.  Now what?
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_141");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_142");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_149");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 11);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Apparently that wasn't it...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch10 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Apparently that wasn't it...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Great!  You must have studied art or something.  I'd have never gotten that.  Now what?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_141")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_142")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_149")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'

	//-- [RESPONSE NOTE] 
	//-- PLAYER: It's multiplying. 720.
	if (response == "s_124")
	{
		hacker_lok_pirate_cave_action_numbersDone (player, npc);

		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's it!  Good thing you know your math.  All right, what now?
			string_id message = new string_id (c_stringFile, "s_127");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_143");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_144");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_148");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uh...220.
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Apparently that wasn't it...
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: It's nine.  I'm sure of it.
	if (response == "s_126")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Apparently that wasn't it...
			string_id message = new string_id (c_stringFile, "s_129");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's it!  Good thing you know your math.  All right, what now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_143")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_144")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_148")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Apparently that wasn't it...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Apparently that wasn't it...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What do you call a womprat that can lift a bantha?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sir!
	if (response == "s_133")
	{
		hacker_lok_pirate_cave_action_jokeDone (player, npc);

		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: Ugh...that's terrible.  What kind of...never mind.  What is next?
			string_id message = new string_id (c_stringFile, "s_136");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_146");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_147");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 17);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: To get to the other side!
	if (response == "s_134")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's not even funny!
			string_id message = new string_id (c_stringFile, "s_137");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No such thing?
	if (response == "s_135")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's not even funny!
			string_id message = new string_id (c_stringFile, "s_138");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do the network reset.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition_hasColorWheelTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Let's reroute the access commands.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition_hasNumberTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Let's deal with the defender chip.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition_hasJokeTaskActive (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: See if the security system grants access now.
			boolean hasResponse3 = false;
			if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_113");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_114");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ugh...that's terrible.  What kind of...never mind.  What is next?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_145")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_146")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_147")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch18 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's not even funny!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int hacker_lok_pirate_cave_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's not even funny!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do the network reset.
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'On a color wheel, this color is the opposite of blue...'  What does that mean?  What's a color wheel?  And what's the opposite of blue?
			string_id message = new string_id (c_stringFile, "s_116");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm pretty sure it's purple.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: It's brown!  Hah! I knew that one.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's orange. I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_119");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's reroute the access commands.
	if (response == "s_113")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: It says, 'Finish this number pair sequence... 1-2, 3-6, 4-24, 5-120, 6-?'
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: It's multiplying. 720.
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uh...220.
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: It's nine.  I'm sure of it.
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_126");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's deal with the defender chip.
	if (response == "s_114")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: What do you call a womprat that can lift a bantha?
			string_id message = new string_id (c_stringFile, "s_130");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sir!
			boolean hasResponse0 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: To get to the other side!
			boolean hasResponse1 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No such thing?
			boolean hasResponse2 = false;
			if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_133");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_134");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_135");

				utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: See if the security system grants access now.
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			//-- NPC: That did it!  It's open! The droid is inside the room.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.hacker_lok_pirate_cave");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.hacker_lok_pirate_cave");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (hacker_lok_pirate_cave_condition_hasCompletedPirate (player, npc))
	{
		//-- NPC: I think we are done here. Just don't blow my cover with the pirates.
		string_id message = new string_id (c_stringFile, "s_54");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (hacker_lok_pirate_cave_condition_hasReturnTask (player, npc))
	{
		//-- NPC: Tell Vana everything is going as planned, thanks to you. See you topside.
		string_id message = new string_id (c_stringFile, "s_53");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (hacker_lok_pirate_cave_condition_hasSlicedTheSystem (player, npc))
	{
		//-- NPC: You did it. I'm glad Vana sent you. You'll find the droid inside the room.
		string_id message = new string_id (c_stringFile, "s_52");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (hacker_lok_pirate_cave_condition_hasHackTask (player, npc))
	{
		hacker_lok_pirate_cave_action_foundSecuritySys (player, npc);

		//-- NPC: Aargh!  Can you help me with this thing?  I've found a back door to this security system, but the AI program keeps asking me these stupid questions! Can you lend me your brain?
		string_id message = new string_id (c_stringFile, "s_55");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: What are you talking about?
		boolean hasResponse0 = false;
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Tell me what you need.
		boolean hasResponse1 = false;
		if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_56");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_57");

			utils.setScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId", 4);

			npcStartConversation (player, npc, "hacker_lok_pirate_cave", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (hacker_lok_pirate_cave_condition__defaultCondition (player, npc))
	{
		//-- NPC: You seem lost. Go somewhere else.
		string_id message = new string_id (c_stringFile, "s_61");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "hacker_lok_pirate_cave")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

	if (branchId == 4 && hacker_lok_pirate_cave_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && hacker_lok_pirate_cave_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && hacker_lok_pirate_cave_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && hacker_lok_pirate_cave_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && hacker_lok_pirate_cave_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && hacker_lok_pirate_cave_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 10 && hacker_lok_pirate_cave_handleBranch10 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && hacker_lok_pirate_cave_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && hacker_lok_pirate_cave_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && hacker_lok_pirate_cave_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && hacker_lok_pirate_cave_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && hacker_lok_pirate_cave_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && hacker_lok_pirate_cave_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && hacker_lok_pirate_cave_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 18 && hacker_lok_pirate_cave_handleBranch18 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && hacker_lok_pirate_cave_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.hacker_lok_pirate_cave.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

