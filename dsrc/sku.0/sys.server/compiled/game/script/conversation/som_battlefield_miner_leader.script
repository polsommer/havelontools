// ======================================================================
//
// som_battlefield_miner_leader.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/som_battlefield_miner_leader";

// ======================================================================
// Script Conditions
// ======================================================================

boolean som_battlefield_miner_leader_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean som_battlefield_miner_leader_condition_isMinerFollowing (obj_id player, obj_id npc)
{
	return (ai_lib.isFollowing(npc) && !utils.hasScriptVar(npc, "deployed"));
}

// ----------------------------------------------------------------------

boolean som_battlefield_miner_leader_condition_isNotFollowing (obj_id player, obj_id npc)
{
	return (!ai_lib.isFollowing(npc) && !utils.hasScriptVar(npc, "deployed"));
}

// ----------------------------------------------------------------------

boolean som_battlefield_miner_leader_condition_isDeployed (obj_id player, obj_id npc)
{
	return utils.hasScriptVar(npc, "deployed");
}

// ----------------------------------------------------------------------

boolean som_battlefield_miner_leader_condition_isNotDeployed (obj_id player, obj_id npc)
{
	return (!utils.hasScriptVar(npc, "deployed"));
}

// ======================================================================
// Script Actions
// ======================================================================

void som_battlefield_miner_leader_action_deployForces (obj_id player, obj_id npc)
{
	ai_lib.aiStopFollowing(npc);
	location here = getLocation(npc);
	aiSetHomeLocation(npc, here);
	utils.setScriptVar(npc, "player", player);
	messageTo(npc, "deployForces", null, 0, false);
}

// ----------------------------------------------------------------------

void som_battlefield_miner_leader_action_startFollowing (obj_id player, obj_id npc)
{
	ai_lib.aiFollow(npc, player);
	setMovementRun(npc);
}

// ----------------------------------------------------------------------

void som_battlefield_miner_leader_action_stopFollowing (obj_id player, obj_id npc)
{
	ai_lib.aiStopFollowing(npc);
	location here = getLocation(npc);
	aiSetHomeLocation(npc, here);
	ai_lib.setDefaultCalmBehavior(npc, ai_lib.BEHAVIOR_SENTINEL);
	
}

// ----------------------------------------------------------------------

void som_battlefield_miner_leader_action_undeployAndFollow (obj_id player, obj_id npc)
{
	messageTo(npc, "unDeployForces", null, 0, false);
	ai_lib.aiFollow(npc, player);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int som_battlefield_miner_leader_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What do I need to do?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Follow me.
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (som_battlefield_miner_leader_condition__defaultCondition (player, npc))
		{
			som_battlefield_miner_leader_action_startFollowing (player, npc);

			//-- NPC: Following.
			string_id message = new string_id (c_stringFile, "s_8");
			utils.removeScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Stop here.
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (som_battlefield_miner_leader_condition__defaultCondition (player, npc))
		{
			som_battlefield_miner_leader_action_stopFollowing (player, npc);

			//-- NPC: Stopping here.
			string_id message = new string_id (c_stringFile, "s_12");
			utils.removeScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Deploy your people in this area.
	if (response == "s_14")
	{
		//-- [NOTE] 
		if (som_battlefield_miner_leader_condition__defaultCondition (player, npc))
		{
			som_battlefield_miner_leader_action_deployForces (player, npc);

			//-- NPC: Will do.
			string_id message = new string_id (c_stringFile, "s_16");
			utils.removeScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: We need to move your position.
	if (response == "s_18")
	{
		//-- [NOTE] 
		if (som_battlefield_miner_leader_condition__defaultCondition (player, npc))
		{
			som_battlefield_miner_leader_action_undeployAndFollow (player, npc);

			//-- NPC: We are ready to move out.
			string_id message = new string_id (c_stringFile, "s_20");
			utils.removeScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.som_battlefield_miner_leader");

	setCondition (self, CONDITION_CONVERSABLE);
	chat.setChatMood(self, chat.MOOD_NONE);
	setCondition (self, CONDITION_INVULNERABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	chat.setChatMood(self, chat.MOOD_NONE);
	setCondition (self, CONDITION_INVULNERABLE);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.som_battlefield_miner_leader");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (som_battlefield_miner_leader_condition__defaultCondition (player, npc))
	{
		//-- NPC: What do I need to do?
		string_id message = new string_id (c_stringFile, "s_4");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Follow me.
		boolean hasResponse0 = false;
		if (som_battlefield_miner_leader_condition_isNotFollowing (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Stop here.
		boolean hasResponse1 = false;
		if (som_battlefield_miner_leader_condition_isMinerFollowing (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Deploy your people in this area.
		boolean hasResponse2 = false;
		if (som_battlefield_miner_leader_condition_isNotDeployed (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: We need to move your position.
		boolean hasResponse3 = false;
		if (som_battlefield_miner_leader_condition_isDeployed (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_10");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_14");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_18");

			utils.setScriptVar (player, "conversation.som_battlefield_miner_leader.branchId", 1);

			npcStartConversation (player, npc, "som_battlefield_miner_leader", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "som_battlefield_miner_leader")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

	if (branchId == 1 && som_battlefield_miner_leader_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.som_battlefield_miner_leader.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

