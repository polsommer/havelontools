// ======================================================================
//
// mtp_trapped_meatlump_target.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.trial;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/mtp_trapped_meatlump_target";

// ======================================================================
// Script Conditions
// ======================================================================

boolean mtp_trapped_meatlump_target_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_trapped_meatlump_target_condition_isMeatlumpFollowing (obj_id player, obj_id npc)
{
	return ai_lib.isFollowing(npc);
}

// ----------------------------------------------------------------------

boolean mtp_trapped_meatlump_target_condition_isCowering (obj_id player, obj_id npc)
{
	return utils.hasScriptVar(npc, "mtp_isCowering");
}

// ----------------------------------------------------------------------

boolean mtp_trapped_meatlump_target_condition_isCoweringCombat (obj_id player, obj_id npc)
{
	return utils.hasScriptVar(npc, "mtp_isCowering") && ai_lib.isInCombat(player);
}

// ----------------------------------------------------------------------

boolean mtp_trapped_meatlump_target_condition_isSafe (obj_id player, obj_id npc)
{
	return utils.hasScriptVar(npc, "mtp_isSafe");
}

// ======================================================================
// Script Actions
// ======================================================================

void mtp_trapped_meatlump_target_action_followPlayer (obj_id player, obj_id npc)
{
	if ( utils.hasScriptVar(npc, "mtp_isCowering") )
	{
		utils.removeScriptVar(npc, "mtp_isCowering");
	}

	ai_lib.setMood(npc, chat.MOOD_NERVOUS);
	chat.setChatMood(npc, chat.MOOD_NERVOUS);
	chat.setChatType(npc, chat.CHAT_YELP);
	
	utils.setScriptVar(player, "mtp_rescuedMeatlump", npc);
	utils.setScriptVar(npc, "mtp_rescuingPlayer", player);
	
	detachScript(npc, "ai.ai");
	detachScript(npc, "ai.creature_combat");
	
	setMovementRun(npc);
	setMaster(npc, player);
	ai_lib.aiFollow(npc, player, 2.0f, 3.0f);
	
	if ( !utils.hasScriptVar(npc, "mtp_spawnedPhase2") )
	{
		utils.setScriptVar(npc, "mtp_spawnedPhase2", true);
		obj_id building = trial.getTop(npc);
		
		if ( isIdValid(building) )
		{
			dictionary dict = trial.getSessionDict(building);
			dict.put("triggerType", "triggerId");
			dict.put("triggerName", "mtp_escort_trapped_meatlump_p2");
			messageTo(building, "triggerFired", dict, 0.0f, false);
			
			dictionary webster = new dictionary();
			webster.put("player", player);
			webster.put("playerCombatLevel", getLevel(player));
			messageTo(building, "setMtpInstanceCombatLevel", webster, 1, false);
		}
	}
	return;
}

// ----------------------------------------------------------------------

void mtp_trapped_meatlump_target_action_moveToPlayer (obj_id player, obj_id npc)
{
	if ( utils.hasScriptVar(npc, "mtp_cowerLoc") )
	{
		utils.removeScriptVar(npc, "mtp_cowerLoc");
	}
	
	if ( utils.hasScriptVar(npc, "mtp_cowerYaw") )
	{
		utils.removeScriptVar(npc, "mtp_cowerYaw");
	}

	location here = getLocation(player);
	location there = new location(here.x-1, here.y, here.z-1, here.area, here.cell);
	setMovementWalk(npc);
	pathTo(npc, there);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int mtp_trapped_meatlump_target_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Help! Help! Is it over?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: It is. Follow me.
	if (response == "s_12")
	{
		//-- [NOTE] 
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			mtp_trapped_meatlump_target_action_followPlayer (player, npc);

			//-- NPC: Is it safe? I suppose it's as safe as possible. I'll follow you again.
			string_id message = new string_id (c_stringFile, "s_13");
			utils.removeScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_trapped_meatlump_target_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Stay away! I'll bleed all over you! I will!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Calm down. I'm here to help.
	if (response == "s_18")
	{
		//-- [NOTE] 
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nervous");

			//-- NPC: Oh? You are? Oh, thank you!
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Follow me.
			boolean hasResponse0 = false;
			if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				utils.setScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Um...never mind. I'll be going.
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shiver");

			//-- NPC: That's right! Leave. I'm gonna stay here and cower.
			string_id message = new string_id (c_stringFile, "s_28");
			utils.removeScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int mtp_trapped_meatlump_target_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh? You are? Oh, thank you!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Follow me.
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			mtp_trapped_meatlump_target_action_followPlayer (player, npc);

			//-- NPC: Follow you? Yes, of course. I will.
			string_id message = new string_id (c_stringFile, "s_24");
			utils.removeScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.mtp_trapped_meatlump_target");

	setCondition (self, CONDITION_CONVERSABLE);
	//setCondition(self, CONDITION_INTERESTING);
	
	ai_lib.setDefaultCalmMood(self, "nervous");
	ai_lib.setMood(self, chat.MOOD_NERVOUS);
	chat.setChatMood(self, chat.MOOD_NERVOUS);
	chat.setChatType(self, chat.CHAT_YELP);
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	//setCondition(self, CONDITION_INTERESTING);
	
	ai_lib.setDefaultCalmMood(self, "nervous");
	ai_lib.setMood(self, chat.MOOD_NERVOUS);
	chat.setChatMood(self, chat.MOOD_NERVOUS);
	chat.setChatType(self, chat.CHAT_YELP);
	return SCRIPT_CONTINUE;
}

messageHandler mtp_handleRescuerAttacked()
{
	if ( utils.hasScriptVar(self, "mtp_cowerLoc") )
	{
		utils.removeScriptVar(self, "mtp_cowerLoc");
	}
	
	if ( utils.hasScriptVar(self, "mtp_cowerYaw") )
	{
		utils.removeScriptVar(self, "mtp_cowerYaw");
	}
	
	if ( ai_lib.isFollowing(self) )
	{
		utils.setScriptVar(self, "mtp_isCowering", true);
		obj_id player = utils.getObjIdScriptVar(self, "mtp_rescuingPlayer");
		
		//ai_lib.aiStopFollowing (self);
		removeObjVar(self, "ai.persistantFollowing");
		stop(self);
		
		// Handle stop and path to a location to cower in fear
		messageTo(self, "handlePathToFearLoc", null, 0.5f, false);

		doAnimationAction(self, "gesticulate_widly");
		ai_lib.setMood(self, chat.MOOD_SCARED);
		chat.setChatMood(self, chat.MOOD_SCARED);
		chat.setChatType(self, chat.CHAT_YELP);
		chat.chat(self, "Ahh, we're under attack!! Help!");
		sendSystemMessage(player, "Meatlump dunder yelps to you, 'Ahh, we're under attack!! Help!'", "");
	}
	return SCRIPT_CONTINUE;	
}

messageHandler handlePathToFearLoc()
{
	obj_id player = utils.getObjIdScriptVar(self, "mtp_rescuingPlayer");
	string datatable = "datatables/theme_park/meatlump/meatlump_instance_cower.iff";
	
	location here = getLocation(self);
	string cellName = getCellName(here.cell);
	if ( cellName == null || cellName.length() < 1 )
	{
		cellName = "default";
	}
	int row = dataTableSearchColumnForString(cellName, "currentCellName", datatable);
	
	string destCellName = "";
	if ( row > -1 )
	{
		destCellName = dataTableGetString(datatable, row, "destCellName");
	}
	
	if ( destCellName == null || destCellName.length() < 1 || destCellName.equals("none") )
	{
		// Do nothing.
	}
	else
	{
		float destX = dataTableGetFloat(datatable, row, "cellX");
		float destY = dataTableGetFloat(datatable, row, "cellY");
		float destZ = dataTableGetFloat(datatable, row, "cellZ");
		float destYaw = dataTableGetFloat(datatable, row, "cellYaw");
		
		obj_id destCellId = getCellId(trial.getTop(self), destCellName);
		location there = new location(destX, destY, destZ, "dungeon1", destCellId);
		
		utils.setScriptVar(self, "mtp_cowerLoc", there);
		utils.setScriptVar(self, "mtp_cowerYaw", destYaw);
		pathTo(self, there);
	}
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	if ( utils.hasScriptVar(self, "mtp_cowerLoc") )
	{
		location destLoc = utils.getLocationScriptVar(self, "mtp_cowerLoc");
		pathTo(self, destLoc);
		utils.removeScriptVar(self, "mtp_cowerLoc");
		
		if ( utils.hasScriptVar(self, "mtp_cowerYaw") )
		{
			float newYaw = utils.getFloatScriptVar(self, "mtp_cowerYaw");
			setYaw(self, newYaw);
			utils.removeScriptVar(self, "mtp_cowerYaw");
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{	
	if ( utils.hasScriptVar(self, "mtp_cowerLoc") )
	{
		location destLoc = utils.getLocationScriptVar(self, "mtp_cowerLoc");
		pathTo(self, destLoc);
		utils.removeScriptVar(self, "mtp_cowerLoc");
		
		if ( utils.hasScriptVar(self, "mtp_cowerYaw") )
		{
			float newYaw = utils.getFloatScriptVar(self, "mtp_cowerYaw");
			setYaw(self, newYaw);
			utils.removeScriptVar(self, "mtp_cowerYaw");
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.mtp_trapped_meatlump_target");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (mtp_trapped_meatlump_target_condition_isSafe (player, npc))
	{
		//-- NPC: Here's the ladder out of here! Thank you...I can climb up on my own. Thank you!
		string_id message = new string_id (c_stringFile, "s_15");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_trapped_meatlump_target_condition_isMeatlumpFollowing (player, npc))
	{
		//-- NPC: C'mon, c'mon. No time to chat. Let's get out of here!
		string_id message = new string_id (c_stringFile, "s_10");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_trapped_meatlump_target_condition_isCoweringCombat (player, npc))
	{
		doAnimationAction (npc, "catchbreath");

		//-- NPC: Help! Help! Too much violence!
		string_id message = new string_id (c_stringFile, "s_14");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_trapped_meatlump_target_condition_isCowering (player, npc))
	{
		mtp_trapped_meatlump_target_action_moveToPlayer (player, npc);

		//-- NPC: Help! Help! Is it over?
		string_id message = new string_id (c_stringFile, "s_11");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: It is. Follow me.
		boolean hasResponse0 = false;
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_12");

			utils.setScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId", 4);

			npcStartConversation (player, npc, "mtp_trapped_meatlump_target", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "gesticulate_wildly");

		//-- NPC: Stay away! I'll bleed all over you! I will!
		string_id message = new string_id (c_stringFile, "s_16");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Calm down. I'm here to help.
		boolean hasResponse0 = false;
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Um...never mind. I'll be going.
		boolean hasResponse1 = false;
		if (mtp_trapped_meatlump_target_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_18");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_26");

			utils.setScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId", 6);

			npcStartConversation (player, npc, "mtp_trapped_meatlump_target", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "mtp_trapped_meatlump_target")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

	if (branchId == 4 && mtp_trapped_meatlump_target_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && mtp_trapped_meatlump_target_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && mtp_trapped_meatlump_target_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.mtp_trapped_meatlump_target.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

