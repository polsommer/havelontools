// ======================================================================
//
// npe_entertainer_side_i_questgiver.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.34 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/npe_entertainer_side_i_questgiver";

// ======================================================================
// Script Conditions
// ======================================================================

boolean npe_entertainer_side_i_questgiver_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean npe_entertainer_side_i_questgiver_condition_playerOnQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "npe_entertainer_side_i");
}

// ----------------------------------------------------------------------

boolean npe_entertainer_side_i_questgiver_condition_playerDoneWithQuest (obj_id player, obj_id npc)
{
	return groundquests.hasCompletedQuest(player, "npe_entertainer_side_i");
}

// ----------------------------------------------------------------------

boolean npe_entertainer_side_i_questgiver_condition_playerOnInaldraTask (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "npe_entertainer_side_i", "inaldrasignal");
}

// ======================================================================
// Script Actions
// ======================================================================

void npe_entertainer_side_i_questgiver_action_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void npe_entertainer_side_i_questgiver_action_giveQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "npe_entertainer_side_i");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int npe_entertainer_side_i_questgiver_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Have you completed your assignment?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes. I overheard who owns this station.
	if (response == "s_19")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: Really?  I think you should talk with Mistress Inaldra herself. You know where she is.
			string_id message = new string_id (c_stringFile, "s_21");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am not done yet.
	if (response == "s_20")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I will wait here.
			string_id message = new string_id (c_stringFile, "s_22");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_entertainer_side_i_questgiver_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I hope you can help me.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do you need done?
	if (response == "s_4")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I suppose it is little suprise that Mistress Inaldra likes to keep tabs on the station, and what the rumors are. Her last informant had to leave the station suddenly. She needs someone to listen for rumors. If it's an important rumor, she will need to know the identity of the person spreading the particular rumor.
			string_id message = new string_id (c_stringFile, "s_9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: So, she needs a station spy?
			boolean hasResponse0 = false;
			if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I would be happy to help.
			boolean hasResponse1 = false;
			if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: No thanks. I do not like spying on others.
			boolean hasResponse2 = false;
			if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_10");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_12");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_13");

				utils.setScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Of course I will help you.
	if (response == "s_5")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			npe_entertainer_side_i_questgiver_action_giveQuest (player, npc);

			//-- NPC: Very good, indeed! Mistress Inaldra needs you to to go to the Cantina and perform there. Once there, just listen. You will know when you find something really juicy for her.
			string_id message = new string_id (c_stringFile, "s_15");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I can't right now, I'm busy.
	if (response == "s_6")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: Oh dear. I hope someone else will help me.
			string_id message = new string_id (c_stringFile, "s_7");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_entertainer_side_i_questgiver_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I suppose it is little suprise that Mistress Inaldra likes to keep tabs on the station, and what the rumors are. Her last informant had to leave the station suddenly. She needs someone to listen for rumors. If it's an important rumor, she will need to know the identity of the person spreading the particular rumor.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: So, she needs a station spy?
	if (response == "s_10")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: I beg your pardon! She merely needs someone who listens well and knows when to keep their mouth shut. Can you do that?
			string_id message = new string_id (c_stringFile, "s_11");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll do it!
			boolean hasResponse0 = false;
			if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No way. I can't do something so intrusive.
			boolean hasResponse1 = false;
			if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_16");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_17");

				utils.setScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I would be happy to help.
	if (response == "s_12")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			npe_entertainer_side_i_questgiver_action_giveQuest (player, npc);

			//-- NPC: Very good, indeed! Mistress Inaldra needs you to to go to the Cantina and perform there. Once there, just listen. You will know when you find something really juicy for her.
			string_id message = new string_id (c_stringFile, "s_15");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No thanks. I do not like spying on others.
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: You just don't understand how to run a space station. On your way. I'm busy.
			string_id message = new string_id (c_stringFile, "s_14");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int npe_entertainer_side_i_questgiver_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I beg your pardon! She merely needs someone who listens well and knows when to keep their mouth shut. Can you do that?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll do it!
	if (response == "s_16")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			npe_entertainer_side_i_questgiver_action_giveQuest (player, npc);

			//-- NPC: Very good, indeed! Mistress Inaldra needs you to to go to the Cantina and perform there. Once there, just listen. You will know when you find something really juicy for her.
			string_id message = new string_id (c_stringFile, "s_15");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No way. I can't do something so intrusive.
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			//-- NPC: You just don't understand how to run a space station. On your way. I'm busy.
			string_id message = new string_id (c_stringFile, "s_14");
			utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.npe_entertainer_side_i_questgiver");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.npe_entertainer_side_i_questgiver");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (npe_entertainer_side_i_questgiver_condition_playerDoneWithQuest (player, npc))
	{
		npe_entertainer_side_i_questgiver_action_facePlayer (player, npc);

		//-- NPC: Thank you for your help. Please excuse me, but I am very busy.
		string_id message = new string_id (c_stringFile, "s_23");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_entertainer_side_i_questgiver_condition_playerOnQuest (player, npc))
	{
		npe_entertainer_side_i_questgiver_action_facePlayer (player, npc);

		//-- NPC: Have you completed your assignment?
		string_id message = new string_id (c_stringFile, "s_18");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes. I overheard who owns this station.
		boolean hasResponse0 = false;
		if (npe_entertainer_side_i_questgiver_condition_playerOnInaldraTask (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I am not done yet.
		boolean hasResponse1 = false;
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_19");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_20");

			utils.setScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId", 2);

			npcStartConversation (player, npc, "npe_entertainer_side_i_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "implore");

		npe_entertainer_side_i_questgiver_action_facePlayer (player, npc);

		//-- NPC: I hope you can help me.
		string_id message = new string_id (c_stringFile, "s_3");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: What do you need done?
		boolean hasResponse0 = false;
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Of course I will help you.
		boolean hasResponse1 = false;
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I can't right now, I'm busy.
		boolean hasResponse2 = false;
		if (npe_entertainer_side_i_questgiver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_4");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_5");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6");

			utils.setScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId", 5);

			npcStartConversation (player, npc, "npe_entertainer_side_i_questgiver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "npe_entertainer_side_i_questgiver")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

	if (branchId == 2 && npe_entertainer_side_i_questgiver_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && npe_entertainer_side_i_questgiver_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && npe_entertainer_side_i_questgiver_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && npe_entertainer_side_i_questgiver_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.npe_entertainer_side_i_questgiver.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

