// ======================================================================
//
// racing_mosespa.script
// Copyright 2003, Sony Online Entertainment
// All Rights Reserved.
//
// DO NOT EDIT THIS AUTO-GENERATED FILE.  PLEASE USE THE CONVERATION EDITOR!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/racing_mosespa";

// ======================================================================
// Script Conditions
// ======================================================================

boolean racing_mosespa_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean racing_mosespa_condition_hasRaced (obj_id player, obj_id npc)
{
	return(hasObjVar(player, "racing.bestTime.mosespa"));
}

// ----------------------------------------------------------------------

boolean racing_mosespa_condition_isRacing (obj_id player, obj_id npc)
{
	return (getIntObjVar(player, "racing.mosespa.isRacing") == 1);
}

// ----------------------------------------------------------------------

boolean racing_mosespa_condition_hasLastTime (obj_id player, obj_id npc)
{
	return(hasObjVar(player, "racing.lastTime.mosespa"));
}

// ======================================================================
// Script Actions
// ======================================================================

void racing_mosespa_action_registerPersonalBest (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	
	messageTo(npc, "messageRegisterBest", params, 0, false);
}

// ----------------------------------------------------------------------

void racing_mosespa_action_startRace (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	params.put("value", 1);
	
	messageTo(npc, "messageStartMission", params, 0, false);
}

// ----------------------------------------------------------------------

void racing_mosespa_action_displayCurrentLeader (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	
	messageTo(npc, "messageDisplayLeader", params, 0, false);	
}

// ----------------------------------------------------------------------

void racing_mosespa_action_whatsMyBestTime (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	
	messageTo(npc, "messageWhatsMyTime", params, 0, false);
}

// ----------------------------------------------------------------------

void racing_mosespa_action_showBestTime (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	
	messageTo(npc, "messageShowBestTime", params, 0, false);
}

// ----------------------------------------------------------------------

void racing_mosespa_action_erasePersonalBest (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	params.put("npc", npc);
	
	messageTo(npc, "messageErasePersonalBest", params, 0, false);
}

// ----------------------------------------------------------------------

void racing_mosespa_action_abortRace (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	removeObjVar(player, "racing.lastTime.mosespa");	
	messageTo(player, "handleCleanUp", params, 0, false);
	playMusic(player, "sound/music_combat_bfield_death.snd");	
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "npc.conversation.racing_mosespa");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "npc.conversation.racing_mosespa");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	if (ai_lib.isInCombat (self) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (racing_mosespa_condition_isRacing (player, self))
	{
		//-- NPC: The clock is ticking, get moving!
		string_id message = new string_id (c_stringFile, "s_6a5b9858");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I need to abort this race.
		boolean hasResponse0 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_d900d1be");

			setObjVar (player, "conversation.racing_mosespa.branchId", 1);

			npcStartConversation (player, self, "racing_mosespa", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (racing_mosespa_condition_hasLastTime (player, self))
	{
		racing_mosespa_action_registerPersonalBest (player, self);

		//-- NPC: Race completed.
		string_id message = new string_id (c_stringFile, "s_891e1f6");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (racing_mosespa_condition_hasRaced (player, self))
	{
		//-- NPC: Welcome back! How may I serve you?
		string_id message = new string_id (c_stringFile, "s_48072ab3");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'd like to race this track again.
		boolean hasResponse0 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'd like to see who holds the current record for this track.
		boolean hasResponse1 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I'd like to see my best time for this track.
		boolean hasResponse2 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
		boolean hasResponse3 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		//-- PLAYER: I don't need anything right now.
		boolean hasResponse4 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse4 = true;
		}

		//-- PLAYER: Tell me about this track.
		boolean hasResponse5 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse5 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

			if (hasResponse4)
				responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

			if (hasResponse5)
				responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

			setObjVar (player, "conversation.racing_mosespa.branchId", 4);

			npcStartConversation (player, self, "racing_mosespa", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (racing_mosespa_condition__defaultCondition (player, self))
	{
		//-- NPC: Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?
		string_id message = new string_id (c_stringFile, "s_e0de16cc");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: How do I race?
		boolean hasResponse0 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'd like to see who holds the current record for this track.
		boolean hasResponse1 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I'd like to give this track a try.
		boolean hasResponse2 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: Tell me about this track.
		boolean hasResponse3 = false;
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

			setObjVar (player, "conversation.racing_mosespa.branchId", 15);

			npcStartConversation (player, self, "racing_mosespa", message, responses);
		}
		else
		{
			chat.chat (self, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "racing_mosespa")
		return SCRIPT_CONTINUE;

	int branchId = getIntObjVar (player, "conversation.racing_mosespa.branchId");

	//-- [BRANCH NOTE] 
	//-- NPC: The clock is ticking, get moving!
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I need to abort this race.
	if (branchId == 1 && response == "s_d900d1be")
	{
		racing_mosespa_action_abortRace (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Aborting race as requested.
			string_id message = new string_id (c_stringFile, "s_4aa68942");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'The clock is ticking, get moving!' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to race this track again.
	if (branchId == 4 && response == "s_ed644123")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
			string_id message = new string_id (c_stringFile, "s_d24f3595");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Give me another moment.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145d0a85");

				setObjVar (player, "conversation.racing_mosespa.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 4 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying data.
			string_id message = new string_id (c_stringFile, "s_abd9745d");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see my best time for this track.
	if (branchId == 4 && response == "s_838e4ffb")
	{
		racing_mosespa_action_whatsMyBestTime (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Accessing data...
			string_id message = new string_id (c_stringFile, "s_d459b94a");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
	if (branchId == 4 && response == "s_59d4e0ee")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
			string_id message = new string_id (c_stringFile, "s_27aa48e0");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I am CERTAIN I want to PERMANENTLY erase my best time.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: WAIT. I don't want to erase me best time.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_31168968");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5014ede5");

				setObjVar (player, "conversation.racing_mosespa.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't need anything right now.
	if (branchId == 4 && response == "s_fbd55d9d")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Nice speaking with you again anyway.
			string_id message = new string_id (c_stringFile, "s_8bc77434");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Welcome back! How may I serve you?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 4 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Welcome back! How may I serve you?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
	//-- [RESPONSE NOTE] 
	//-- PLAYER: GO!!!
	if (branchId == 5 && response == "s_2528fad7")
	{
		racing_mosespa_action_startRace (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: And they're off!
			string_id message = new string_id (c_stringFile, "s_b2acc217");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Give me another moment.
	if (branchId == 5 && response == "s_145d0a85")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: As you wish.
			string_id message = new string_id (c_stringFile, "s_6441a2a6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to race this track again.
	if (branchId == 7 && response == "s_ed644123")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
			string_id message = new string_id (c_stringFile, "s_d24f3595");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Give me another moment.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145d0a85");

				setObjVar (player, "conversation.racing_mosespa.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 7 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying data.
			string_id message = new string_id (c_stringFile, "s_abd9745d");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see my best time for this track.
	if (branchId == 7 && response == "s_838e4ffb")
	{
		racing_mosespa_action_whatsMyBestTime (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Accessing data...
			string_id message = new string_id (c_stringFile, "s_d459b94a");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
	if (branchId == 7 && response == "s_59d4e0ee")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
			string_id message = new string_id (c_stringFile, "s_27aa48e0");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I am CERTAIN I want to PERMANENTLY erase my best time.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: WAIT. I don't want to erase me best time.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_31168968");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5014ede5");

				setObjVar (player, "conversation.racing_mosespa.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't need anything right now.
	if (branchId == 7 && response == "s_fbd55d9d")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Nice speaking with you again anyway.
			string_id message = new string_id (c_stringFile, "s_8bc77434");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 7 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am CERTAIN I want to PERMANENTLY erase my best time.
	if (branchId == 10 && response == "s_31168968")
	{
		racing_mosespa_action_erasePersonalBest (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Very well. I am erasing your personal best time now... Oh hello, I don't believe we've met before!
			string_id message = new string_id (c_stringFile, "s_f9faa915");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: WAIT. I don't want to erase me best time.
	if (branchId == 10 && response == "s_5014ede5")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: As you wish. I have made no changes to my records.
			string_id message = new string_id (c_stringFile, "s_4c21202f");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to race this track again.
	if (branchId == 12 && response == "s_ed644123")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
			string_id message = new string_id (c_stringFile, "s_d24f3595");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Give me another moment.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145d0a85");

				setObjVar (player, "conversation.racing_mosespa.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 12 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying data.
			string_id message = new string_id (c_stringFile, "s_abd9745d");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see my best time for this track.
	if (branchId == 12 && response == "s_838e4ffb")
	{
		racing_mosespa_action_whatsMyBestTime (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Accessing data...
			string_id message = new string_id (c_stringFile, "s_d459b94a");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
	if (branchId == 12 && response == "s_59d4e0ee")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
			string_id message = new string_id (c_stringFile, "s_27aa48e0");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I am CERTAIN I want to PERMANENTLY erase my best time.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: WAIT. I don't want to erase me best time.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_31168968");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5014ede5");

				setObjVar (player, "conversation.racing_mosespa.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't need anything right now.
	if (branchId == 12 && response == "s_fbd55d9d")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Nice speaking with you again anyway.
			string_id message = new string_id (c_stringFile, "s_8bc77434");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: As you wish. I have made no changes to my records.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 12 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'As you wish. I have made no changes to my records.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to race this track again.
	if (branchId == 14 && response == "s_ed644123")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: That's the spirit! Just say go when you want me to begin the timer. Good luck and may the force be with you!
			string_id message = new string_id (c_stringFile, "s_d24f3595");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Give me another moment.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_145d0a85");

				setObjVar (player, "conversation.racing_mosespa.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 14 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying data.
			string_id message = new string_id (c_stringFile, "s_abd9745d");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see my best time for this track.
	if (branchId == 14 && response == "s_838e4ffb")
	{
		racing_mosespa_action_whatsMyBestTime (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Accessing data...
			string_id message = new string_id (c_stringFile, "s_d459b94a");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
	if (branchId == 14 && response == "s_59d4e0ee")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Oh dear, such a drastic measure but sometimes a fresh start can be invigorating. I am here to serve. I must warn you this will PERMANENTLY remove your best time and I will forget we've ever met. Are you CERTAIN you wish to do this?
			string_id message = new string_id (c_stringFile, "s_27aa48e0");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I am CERTAIN I want to PERMANENTLY erase my best time.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: WAIT. I don't want to erase me best time.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_31168968");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_5014ede5");

				setObjVar (player, "conversation.racing_mosespa.branchId", 10);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't need anything right now.
	if (branchId == 14 && response == "s_fbd55d9d")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Nice speaking with you again anyway.
			string_id message = new string_id (c_stringFile, "s_8bc77434");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 14 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'd like to race this track again.
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to see my best time for this track.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: I'd like to PERMANENTLY ERASE my personal best time.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: I don't need anything right now.
			boolean hasResponse4 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse5 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ed644123");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_838e4ffb");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59d4e0ee");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fbd55d9d");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I race?
	if (branchId == 15 && response == "s_e460e3d3")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
			string_id message = new string_id (c_stringFile, "s_4b4fb2b7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 15 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying current data...
			string_id message = new string_id (c_stringFile, "s_371b3f4");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to give this track a try.
	if (branchId == 15 && response == "s_dffdee4b")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Get ready... I'll start the timer when you say go!
			string_id message = new string_id (c_stringFile, "s_1cd82216");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uhh, wait a minute.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_262e8687");

				setObjVar (player, "conversation.racing_mosespa.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 15 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Greetings, I'm the race coordinator for the old Mos Espa Circuit. If you'd like to race the track, just let me know. How may I serve you today?' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I race?
	if (branchId == 16 && response == "s_e460e3d3")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
			string_id message = new string_id (c_stringFile, "s_4b4fb2b7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 16 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying current data...
			string_id message = new string_id (c_stringFile, "s_371b3f4");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to give this track a try.
	if (branchId == 16 && response == "s_dffdee4b")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Get ready... I'll start the timer when you say go!
			string_id message = new string_id (c_stringFile, "s_1cd82216");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uhh, wait a minute.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_262e8687");

				setObjVar (player, "conversation.racing_mosespa.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 16 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Get ready... I'll start the timer when you say go!
	//-- [RESPONSE NOTE] 
	//-- PLAYER: GO!!!
	if (branchId == 18 && response == "s_2528fad7")
	{
		racing_mosespa_action_startRace (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: And they're off!
			string_id message = new string_id (c_stringFile, "s_b2acc217");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Get ready... I'll start the timer when you say go!' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: Get ready... I'll start the timer when you say go!
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uhh, wait a minute.
	if (branchId == 18 && response == "s_262e8687")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: No hurry. Let me know when you're ready.
			string_id message = new string_id (c_stringFile, "s_c0918d6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'Get ready... I'll start the timer when you say go!' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: No hurry. Let me know when you're ready.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I race?
	if (branchId == 20 && response == "s_e460e3d3")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
			string_id message = new string_id (c_stringFile, "s_4b4fb2b7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'No hurry. Let me know when you're ready.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: No hurry. Let me know when you're ready.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 20 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying current data...
			string_id message = new string_id (c_stringFile, "s_371b3f4");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'No hurry. Let me know when you're ready.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: No hurry. Let me know when you're ready.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to give this track a try.
	if (branchId == 20 && response == "s_dffdee4b")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Get ready... I'll start the timer when you say go!
			string_id message = new string_id (c_stringFile, "s_1cd82216");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uhh, wait a minute.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_262e8687");

				setObjVar (player, "conversation.racing_mosespa.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'No hurry. Let me know when you're ready.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: No hurry. Let me know when you're ready.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 20 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'No hurry. Let me know when you're ready.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do I race?
	if (branchId == 21 && response == "s_e460e3d3")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: A series of waypoints will appear one after the other. Head to each waypoint as quickly as possible. When you arrive back here, talk to me again and I'll register your last time for this track.
			string_id message = new string_id (c_stringFile, "s_4b4fb2b7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to see who holds the current record for this track.
	if (branchId == 21 && response == "s_2492930f")
	{
		racing_mosespa_action_displayCurrentLeader (player, self);

		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Displaying current data...
			string_id message = new string_id (c_stringFile, "s_371b3f4");
			removeObjVar (player, "conversation.racing_mosespa.branchId");

			npcSpeak (player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd like to give this track a try.
	if (branchId == 21 && response == "s_dffdee4b")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: Get ready... I'll start the timer when you say go!
			string_id message = new string_id (c_stringFile, "s_1cd82216");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: GO!!!
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Uhh, wait a minute.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2528fad7");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_262e8687");

				setObjVar (player, "conversation.racing_mosespa.branchId", 18);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	//-- [BRANCH NOTE] 
	//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
	//-- [RESPONSE NOTE] 
	//-- PLAYER: Tell me about this track.
	if (branchId == 21 && response == "s_1736e216")
	{
		//-- [NOTE] 
		if (racing_mosespa_condition__defaultCondition (player, self))
		{
			//-- NPC: If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.
			string_id message = new string_id (c_stringFile, "s_cea50112");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do I race?
			boolean hasResponse0 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd like to see who holds the current record for this track.
			boolean hasResponse1 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I'd like to give this track a try.
			boolean hasResponse2 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Tell me about this track.
			boolean hasResponse3 = false;
			if (racing_mosespa_condition__defaultCondition (player, self))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e460e3d3");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_2492930f");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dffdee4b");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1736e216");

				setObjVar (player, "conversation.racing_mosespa.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				removeObjVar (player, "conversation.racing_mosespa.branchId");

				npcSpeak (player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

		chat.chat (self, "Error:  All conditions for OnNpcConversationResponse for branch 'If the information in my databanks are accurate, during the last decades of the Old Republic podraces were run on this track. The series was formed and controlled by the Hutts many years ago. Following the decline of podracing's popularity, this track was more or less abandoned by the Hutts. It was eventually taken over by a small band of swoop racers, who used it to stage a regular series of semi-legitimate races.' were false.");

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	removeObjVar (player, "conversation.racing_mosespa.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

