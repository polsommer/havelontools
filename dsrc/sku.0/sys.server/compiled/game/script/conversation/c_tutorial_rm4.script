// ======================================================================
//
// c_tutorial_rm4.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/c_tutorial_rm4";

// ======================================================================
// Script Conditions
// ======================================================================

boolean c_tutorial_rm4_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm4_condition_playerOnQuest (obj_id player, obj_id npc)
{	
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainRadar = groundquests.getTaskId(questId, "explainRadar"); 
	int explainQuestJournal = groundquests.getTaskId(questId, "explainQuestJournal");
		
	boolean onTask = questIsQuestActive(questId, player)&&
		!questIsTaskComplete(questId, explainRadar, player)&&
		questIsTaskComplete(questId, explainQuestJournal, player);
	
	return onTask;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm4_condition_TaskComplete (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainRadar = groundquests.getTaskId(questId, "explainRadar"); 
	
	boolean onTask = questIsTaskComplete(questId, explainRadar, player);
	
	return onTask;
}

// ----------------------------------------------------------------------

boolean c_tutorial_rm4_condition_playerOnQuestStep03 (obj_id player, obj_id npc)
{
	int questId = questGetQuestId("quest/c_newbie_hall_01");
	int explainQuestJournal = groundquests.getTaskId(questId, "explainQuestJournal"); 
	
	boolean onTask = questIsQuestActive(questId, player)&&!questIsTaskComplete(questId, explainQuestJournal, player);
	
	return onTask;
}

// ======================================================================
// Script Actions
// ======================================================================

void c_tutorial_rm4_action_facePlayer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void c_tutorial_rm4_action_actionSendSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "explainRadar");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int c_tutorial_rm4_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I've been expecting you! You will need some information to get around here.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you. Your help is appreciated.
	if (response == "s_96")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			//-- NPC: No thanks needed. We have been instructed to see that you are safe.
			string_id message = new string_id (c_stringFile, "s_98");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Safe?
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_100");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't need help.
	if (response == "s_120")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shrug_hands");

			//-- NPC: Certainly not. But information never hurts, so we wanted you to understand how to be prepared for any encounters. While you were recovering from the attack, we added some new technology to your compass and radar.
			string_id message = new string_id (c_stringFile, "s_122");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What did you add?
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_124");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: No thanks needed. We have been instructed to see that you are safe.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Safe?
	if (response == "s_100")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "poke");

			//-- NPC: Yes, there have been threats made against you. The commander wants to ensure you arrive safely.
			string_id message = new string_id (c_stringFile, "s_102");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Arrive where?
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Threats?
			boolean hasResponse1 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_104");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 3);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes, there have been threats made against you. The commander wants to ensure you arrive safely.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Arrive where?
	if (response == "s_104")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "shake_head_no");

			//-- NPC: I'm sorry, but I'm not privy to that information. Because of the war, our recent missions have been carefully guarded.  Now, notice your radar. It has been 'modified' and will now alert you to any life forms that are in the vicinity. I think you will find it quite useful in getting around safely.
			string_id message = new string_id (c_stringFile, "s_106");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Thank you.
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_108");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Threats?
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_multiple");

			//-- NPC: Yes, those pirates have made numerous threats against your life. In fact, they are rumored to have infiltrated this station. We are instructed to keep a close eye on you. Now, I am to instruct you in the use of your radar. It has been 'modified' and will now alert you to any life forms that are in the vicinity. I think you will find it quite useful in getting around safely.
			string_id message = new string_id (c_stringFile, "s_114");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Thank you.
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'm sorry, but I'm not privy to that information. Because of the war, our recent missions have been carefully guarded.  Now, notice your radar. It has been 'modified' and will now alert you to any life forms that are in the vicinity. I think you will find it quite useful in getting around safely.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you.
	if (response == "s_108")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			c_tutorial_rm4_action_actionSendSignal (player, npc);

			//-- NPC: Now, please move down the corridor to the next room.
			string_id message = new string_id (c_stringFile, "s_110");
			utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yes, those pirates have made numerous threats against your life. In fact, they are rumored to have infiltrated this station. We are instructed to keep a close eye on you. Now, I am to instruct you in the use of your radar. It has been 'modified' and will now alert you to any life forms that are in the vicinity. I think you will find it quite useful in getting around safely.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Thank you.
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			c_tutorial_rm4_action_actionSendSignal (player, npc);

			//-- NPC: Now, please move down the corridor to the next room.
			string_id message = new string_id (c_stringFile, "s_118");
			utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Certainly not. But information never hurts, so we wanted you to understand how to be prepared for any encounters. While you were recovering from the attack, we added some new technology to your compass and radar.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What did you add?
	if (response == "s_124")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod");

			//-- NPC: We added a lifeform detection module. With this your radar will detect all life forms in the area around you.  I think you will find it quite useful in getting around safely.
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, this could be useful.
			boolean hasResponse0 = false;
			if (c_tutorial_rm4_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_128");

				utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

				chat.chat (npc, player, message);
				npcEndConversation (player);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int c_tutorial_rm4_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: We added a lifeform detection module. With this your radar will detect all life forms in the area around you.  I think you will find it quite useful in getting around safely.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, this could be useful.
	if (response == "s_128")
	{
		//-- [NOTE] 
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "dismiss");

			c_tutorial_rm4_action_actionSendSignal (player, npc);

			//-- NPC: Now, please move down the corridor to the next room.
			string_id message = new string_id (c_stringFile, "s_130");
			utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.c_tutorial_rm4");

	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "Lieutenant Farin");	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setInvulnerable (self, true);
	setName (self, "Lieutenant Farin");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.c_tutorial_rm4");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (c_tutorial_rm4_condition_playerOnQuest (player, npc))
	{
		doAnimationAction (npc, "tap_foot");

		c_tutorial_rm4_action_facePlayer (player, npc);

		//-- NPC: I've been expecting you! You will need some information to get around here.
		string_id message = new string_id (c_stringFile, "s_94");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Thank you. Your help is appreciated.
		boolean hasResponse0 = false;
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I don't need help.
		boolean hasResponse1 = false;
		if (c_tutorial_rm4_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_96");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_120");

			utils.setScriptVar (player, "conversation.c_tutorial_rm4.branchId", 1);

			npcStartConversation (player, npc, "c_tutorial_rm4", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (c_tutorial_rm4_condition_TaskComplete (player, npc))
	{
		doAnimationAction (npc, "wave_on_dismissing");

		c_tutorial_rm4_action_facePlayer (player, npc);

		//-- NPC: Move along the corridor please.
		string_id message = new string_id (c_stringFile, "s_132");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (c_tutorial_rm4_condition_playerOnQuestStep03 (player, npc))
	{
		doAnimationAction (npc, "point_forward");

		c_tutorial_rm4_action_facePlayer (player, npc);

		//-- NPC: You need to see Major Taison in the war room.
		string_id message = new string_id (c_stringFile, "s_134");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "c_tutorial_rm4")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.c_tutorial_rm4.branchId");

	if (branchId == 1 && c_tutorial_rm4_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && c_tutorial_rm4_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && c_tutorial_rm4_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && c_tutorial_rm4_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && c_tutorial_rm4_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && c_tutorial_rm4_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && c_tutorial_rm4_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.c_tutorial_rm4.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

