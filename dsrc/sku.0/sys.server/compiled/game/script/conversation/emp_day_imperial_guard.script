// ======================================================================
//
// emp_day_imperial_guard.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.30 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/emp_day_imperial_guard";

// ======================================================================
// Script Conditions
// ======================================================================

boolean emp_day_imperial_guard_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean emp_day_imperial_guard_condition_isRebel (obj_id player, obj_id npc)
{
	int factionHashCode = factions.pvpGetAlignedFaction(player);
	string whichFaction = factions.getFactionNameByHashCode(factionHashCode);

	if (whichFaction==null)
		return false;

	if (whichFaction == "Rebel")
		return true;

	return false;
}

// ----------------------------------------------------------------------

boolean emp_day_imperial_guard_condition_allowed (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "event.emp_day.prisoner") )
		return false;
	
	int emp_day_imperial_guard_condition_allowed = getIntObjVar(player, "event.emp_day.prisoner");
	return (emp_day_imperial_guard_condition_allowed == 0);
}

// ----------------------------------------------------------------------

boolean emp_day_imperial_guard_condition_winner (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "event.emp_day.prisoner") )
		return false;
	
	int emp_day_imperial_guard_condition_allowed = getIntObjVar(player, "event.emp_day.prisoner");
	return (emp_day_imperial_guard_condition_allowed == 1);
}

// ----------------------------------------------------------------------

boolean emp_day_imperial_guard_condition_loser (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "event.emp_day.prisoner") )
		return false;
	
	int emp_day_imperial_guard_condition_allowed = getIntObjVar(player, "event.emp_day.prisoner");
	return (emp_day_imperial_guard_condition_allowed == 2);
}

// ----------------------------------------------------------------------

boolean emp_day_imperial_guard_condition_rewarded (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "event.emp_day.prisoner") )
		return false;
	
	int emp_day_imperial_guard_condition_allowed = getIntObjVar(player, "event.emp_day.prisoner");
	return (emp_day_imperial_guard_condition_allowed == 3);
}

// ======================================================================
// Script Actions
// ======================================================================

void emp_day_imperial_guard_action_winReward (obj_id player, obj_id npc)
{
	obj_id playerInventory = utils.getInventoryContainer(player);
	obj_id createdObject = createObject("object/tangible/furniture/all/bestine_quest_imp_banner.iff", playerInventory, "");

	if(isIdValid(createdObject))
	{	
		setObjVar(player, "event.emp_day.prisoner", 3);
		factions.addFactionStanding(player, "Imperial", 1000);
	}
	else
	{
		sendSystemMessage(player, new string_id("quest/lifeday/lifeday", "full_inv"));	
	}

	
	//faction and flag
}

// ----------------------------------------------------------------------

void emp_day_imperial_guard_action_loseReward (obj_id player, obj_id npc)
{
	setObjVar(player, "event.emp_day.prisoner", 3);
	factions.addFactionStanding(player, "Imperial", 1000);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int emp_day_imperial_guard_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Halt! Identify yourself.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The Commander said I could take a look at the prisoner.
	if (response == "s_502")
	{
		//-- [NOTE] 
		if (emp_day_imperial_guard_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's see...yes, you were added to the entry list. Better look now. I don't think that Jedi will last another session with Vader.
			string_id message = new string_id (c_stringFile, "s_504");
			utils.removeScriptVar (player, "conversation.emp_day_imperial_guard.branchId");

			chat.chat (npc, player, message);
			npcEndConversation (player);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.emp_day_imperial_guard");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.emp_day_imperial_guard");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (emp_day_imperial_guard_condition_isRebel (player, npc))
	{
		//-- NPC: I'm sorry. You aren't authorized to be here. I can't allow you access to the prisoner.
		string_id message = new string_id (c_stringFile, "s_494");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_imperial_guard_condition_winner (player, npc))
	{
		emp_day_imperial_guard_action_winReward (player, npc);

		//-- NPC: Nice job. We'll go over the cell's holos and forward that intel to the higher-ups. You might already have one of these banners, but have another for your excellent work on Empire Day.
		string_id message = new string_id (c_stringFile, "s_496");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_imperial_guard_condition_loser (player, npc))
	{
		emp_day_imperial_guard_action_loseReward (player, npc);

		//-- NPC: I was watching on the monitors. He's a tough one. Anyway, I think it's best you leave before Vader returns.
		string_id message = new string_id (c_stringFile, "s_498");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_imperial_guard_condition_allowed (player, npc))
	{
		//-- NPC: Halt! Identify yourself.
		string_id message = new string_id (c_stringFile, "s_500");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: The Commander said I could take a look at the prisoner.
		boolean hasResponse0 = false;
		if (emp_day_imperial_guard_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_502");

			utils.setScriptVar (player, "conversation.emp_day_imperial_guard.branchId", 4);

			npcStartConversation (player, npc, "emp_day_imperial_guard", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (emp_day_imperial_guard_condition_rewarded (player, npc))
	{
		//-- NPC: Thanks for your help with interrogating the prisoner. There's not much more you can do at this point, leave the rest to Vader.
		string_id message = new string_id (c_stringFile, "s_506");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!emp_day_imperial_guard_condition_allowed (player, npc))
	{
		//-- NPC: I cannot allow anyone access without authorization from the Outpost Commander. 
		string_id message = new string_id (c_stringFile, "s_508");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "emp_day_imperial_guard")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.emp_day_imperial_guard.branchId");

	if (branchId == 4 && emp_day_imperial_guard_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.emp_day_imperial_guard.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

