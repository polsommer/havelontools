// ======================================================================
//
// ep3_myyydril_lorn_servant.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/ep3_myyydril_lorn_servant";

// ======================================================================
// Script Conditions
// ======================================================================

boolean ep3_myyydril_lorn_servant_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_servant_condition_isTaskOneActive (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "ep3_myyydril_lorn_retrieve_6", "taskRetrieveCrystal");
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_servant_condition_hasCompletedTaskOne (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "ep3_myyydril_lorn_retrieve_6", "lornRetrieveCompleted");
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_servant_condition_hasBadge (obj_id player, obj_id npc)
{
	return false;
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_servant_condition_isValidforEncounter (obj_id player, obj_id npc)
{
	if (isGod(player))
		return true;
		
	if (!hasObjVar(player, "instance_lockout.myyydril_grievous.lockout_end"))
		return true;
		
	int lockoutEnd = getIntObjVar(player, "instance_lockout.myyydril_grievous.lockout_end");
	
	if (getGameTime() >= lockoutEnd)
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean ep3_myyydril_lorn_servant_condition_IfisGod (obj_id player, obj_id npc)
{
	return isGod(player);
}

// ======================================================================
// Script Actions
// ======================================================================

void ep3_myyydril_lorn_servant_action_grantQuestOne (obj_id player, obj_id npc)
{
	// Apply the first quest to the player here
	groundquests.grantQuest(player, "ep3_myyydril_lorn_retrieve_6");
}

// ----------------------------------------------------------------------

void ep3_myyydril_lorn_servant_action_grantQuestTwo (obj_id player, obj_id npc)
{
	// Apply the first quest to the player here
	dictionary dict = new dictionary();
	dict.put("player", player);
	obj_id top = getTopMostContainer(player);
	messageTo(top, "beginEncounter", dict, 1.0f, false);
	
	groundquests.grantQuest(player, "ep3_myyydril_lorn_talkto");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int ep3_myyydril_lorn_servant_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: [As soon as you approach, the once-lifeless droid springs into working condition.] I am a servant of Lorn, model 3-NIi. Are you the messenger with the crystal?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What crystal?
	if (response == "s_446")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			//-- NPC: [The droid takes a moment to process the information.] You are not the messenger. Please leave immediately.
			string_id message = new string_id (c_stringFile, "s_450");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Wait--I can help. Just tell me what crystal you need!
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_454");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId", 6);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: [God Mode] Start the Encounter! WARNING! This option will end any encounter currently running.
	if (response == "s_492")
	{
		ep3_myyydril_lorn_servant_action_grantQuestTwo (player, npc);

		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let it begin.
			string_id message = new string_id (c_stringFile, "s_496");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_servant_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: [The droid takes a moment to process the information.] You are not the messenger. Please leave immediately.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Wait--I can help. Just tell me what crystal you need!
	if (response == "s_454")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			//-- NPC: Termination in 5.. 4..
			string_id message = new string_id (c_stringFile, "s_460");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Red crystals? Blue crystals? I can be your messenger!
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_468");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId", 7);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_servant_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Termination in 5.. 4..

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Red crystals? Blue crystals? I can be your messenger!
	if (response == "s_468")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			//-- NPC: [The droid stops advancing toward you.] Termination process canceled. Processing information... [A hologram of a man appears.] I am Treun Lorn. You wish to help me? For my master?
			string_id message = new string_id (c_stringFile, "s_473");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Uh--yes, I want to help you. Just tell me what you need.
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_476");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_servant_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: [The droid stops advancing toward you.] Termination process canceled. Processing information... [A hologram of a man appears.] I am Treun Lorn. You wish to help me? For my master?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uh--yes, I want to help you. Just tell me what you need.
	if (response == "s_476")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			//-- NPC: [Treun Lorn continues to speak.] I need a crystal... one that contains a large amount of unnatural energy. Find it and you will see my creation come to life!!
			string_id message = new string_id (c_stringFile, "s_480");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Where can I find them? Do you know?
			boolean hasResponse0 = false;
			if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_484");

				utils.setScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int ep3_myyydril_lorn_servant_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: [Treun Lorn continues to speak.] I need a crystal... one that contains a large amount of unnatural energy. Find it and you will see my creation come to life!!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Where can I find them? Do you know?
	if (response == "s_484")
	{
		//-- [NOTE] 
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			ep3_myyydril_lorn_servant_action_grantQuestOne (player, npc);

			//-- NPC: [Treun Lorn's image starts to fade.] Just beyond this room.. *static* red..
			string_id message = new string_id (c_stringFile, "s_488");
			utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.ep3_myyydril_lorn_servant");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.ep3_myyydril_lorn_servant");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (!ep3_myyydril_lorn_servant_condition_isValidforEncounter (player, npc))
	{
		//-- NPC: [The servant of Lorn does not respond. Perhaps you should try again later].
		string_id message = new string_id (c_stringFile, "s_418");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_myyydril_lorn_servant_condition_hasBadge (player, npc))
	{
		//-- NPC: noob. lol!!!111
		string_id message = new string_id (c_stringFile, "s_430");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_myyydril_lorn_servant_condition_hasCompletedTaskOne (player, npc))
	{
		ep3_myyydril_lorn_servant_action_grantQuestTwo (player, npc);

		//-- NPC: The messenger has come. You may enter.
		string_id message = new string_id (c_stringFile, "s_434");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_myyydril_lorn_servant_condition_isTaskOneActive (player, npc))
	{
		//-- NPC: [The droid doesn't answer.]
		string_id message = new string_id (c_stringFile, "s_438");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
	{
		//-- NPC: [As soon as you approach, the once-lifeless droid springs into working condition.] I am a servant of Lorn, model 3-NIi. Are you the messenger with the crystal?
		string_id message = new string_id (c_stringFile, "s_442");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: What crystal?
		boolean hasResponse0 = false;
		if (ep3_myyydril_lorn_servant_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: [God Mode] Start the Encounter! WARNING! This option will end any encounter currently running.
		boolean hasResponse1 = false;
		if (ep3_myyydril_lorn_servant_condition_IfisGod (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_446");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_492");

			utils.setScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId", 5);

			npcStartConversation (player, npc, "ep3_myyydril_lorn_servant", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "ep3_myyydril_lorn_servant")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

	if (branchId == 5 && ep3_myyydril_lorn_servant_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && ep3_myyydril_lorn_servant_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && ep3_myyydril_lorn_servant_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && ep3_myyydril_lorn_servant_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && ep3_myyydril_lorn_servant_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.ep3_myyydril_lorn_servant.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

