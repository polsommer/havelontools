// ======================================================================
//
// computer_console_level_02_command_console.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/computer_console_level_02_command_console";

// ======================================================================
// Script Conditions
// ======================================================================

boolean computer_console_level_02_command_console_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_canUseFirstTime (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "outbreak_quest_facility_02_imperial", "useConsole")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_rebel", "useConsole")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_neutral", "useConsole"); 
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_answerCall (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "outbreak_quest_facility_02_imperial", "commFromSurvivor")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_rebel", "commFromSurvivor")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_neutral", "commFromSurvivor"))
	||
	(groundquests.isTaskActive(player, "outbreak_quest_facility_02_imperial", "answerCall")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_rebel", "answerCall")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_neutral", "answerCall"))
	;
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_answerSecCall (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "outbreak_quest_facility_02_imperial", "comm2")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_rebel", "comm2")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_neutral", "comm2"))
	||
	(groundquests.isTaskActive(player, "outbreak_quest_facility_02_imperial", "shutDownTask")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_rebel", "shutDownTask")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_02_neutral", "shutDownTask"))
	;
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_hasQuest (obj_id player, obj_id npc)
{
	return (groundquests.isQuestActive(player, "outbreak_quest_facility_02_imperial")
	|| groundquests.isQuestActive(player, "outbreak_quest_facility_02_rebel")
	|| groundquests.isQuestActive(player, "outbreak_quest_facility_02_neutral"))
	||(groundquests.isQuestActive(player, "outbreak_quest_facility_03"));
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_mustFindVents (obj_id player, obj_id npc)
{
	return (groundquests.isTaskActive(player, "outbreak_quest_facility_03", "comm3")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_03", "comm3")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_03", "comm3"))
	||
	(groundquests.isTaskActive(player, "outbreak_quest_facility_03", "useConsoleFindVents")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_03", "useConsoleFindVents")
	|| groundquests.isTaskActive(player, "outbreak_quest_facility_03", "useConsoleFindVents"))
	;
}

// ----------------------------------------------------------------------

boolean computer_console_level_02_command_console_condition_hasDeletedQuest (obj_id player, obj_id npc)
{
	return ((groundquests.hasCompletedQuest(player, "outbreak_quest_facility_02_neutral")
	|| groundquests.hasCompletedQuest(player, "outbreak_quest_facility_02_rebel")
	|| groundquests.hasCompletedQuest(player, "outbreak_quest_facility_02_imperial"))
	&& !groundquests.isQuestActiveOrComplete(player, "outbreak_quest_facility_03"));
}

// ======================================================================
// Script Actions
// ======================================================================

void computer_console_level_02_command_console_action_completeQuest (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "scienceConsoleUsed");
	string faction = "";
	string questPrefix = "quest/outbreak_faciltiy_02_";
	if(groundquests.hasCompletedQuest(player, "outbreak_quest_02_imperial"))
	{
		faction = "imperial";
	}
	else if (groundquests.hasCompletedQuest(player, "outbreak_quest_02_rebel"))
	{
		faction = "rebel";
	}
	else
	{
		faction = "neutral";	
	}
	if(faction == null || faction.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.completeQuest() Previous faction quest was not found for player: "
		+player+" ("+getPlayerName(player)+"). This may be due to the player somehow having a previous quest removed.");
		faction = "neutral";
	}
	string questString = questPrefix + faction;
	dictionary params = new dictionary();
	params.put("faction_quest", questString);
	params.put("player", player);	
	messageTo(npc, "rewardPlayerFactionalQuest", params, 0, true);
}

// ----------------------------------------------------------------------

void computer_console_level_02_command_console_action_signalConsoleUsedFirstTime (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasUsedCommandConsole");
}

// ----------------------------------------------------------------------

void computer_console_level_02_command_console_action_signalCallAnswered (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "playerAnswered");
}

// ----------------------------------------------------------------------

void computer_console_level_02_command_console_action_signalShutDown (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasDoneShutDown");
}

// ----------------------------------------------------------------------

void computer_console_level_02_command_console_action_signalFoundDmgVents (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasFoundAllDmgVents");
}

// ----------------------------------------------------------------------

void computer_console_level_02_command_console_action_fixDeletedQuest (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "outbreak_quest_facility_03"); 
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int computer_console_level_02_command_console_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Command Console Access...

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Search for Ventilation Systems
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Facility Systems
			string_id message = new string_id (c_stringFile, "s_113");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Blinking Com Light
	if (response == "s_107")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			computer_console_level_02_command_console_action_signalConsoleUsedFirstTime (player, npc);

			//-- NPC: Internal communication answered.
			string_id message = new string_id (c_stringFile, "s_131");
			utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Facility Systems

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: System reports contamination.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Fire System Inoperable - Error

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Emergency Ventilation Activated

	//-- [RESPONSE NOTE] 
	//-- PLAYER: System Override
	if (response == "s_122")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			computer_console_level_02_command_console_action_signalShutDown (player, npc);

			//-- NPC: Empergency Ventilation System Deactivated.
			string_id message = new string_id (c_stringFile, "s_129");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Search for Ventilation Systems
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition_answerSecCall (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Blinking Com Light
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition_canUseFirstTime (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_112");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_107");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 1);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Empergency Ventilation System Deactivated.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Search for Ventilation Systems
	if (response == "s_112")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Facility Systems
			string_id message = new string_id (c_stringFile, "s_113");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Blinking Com Light
	if (response == "s_107")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			computer_console_level_02_command_console_action_signalConsoleUsedFirstTime (player, npc);

			//-- NPC: Internal communication answered.
			string_id message = new string_id (c_stringFile, "s_131");
			utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Main Power Systems Operational

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Backup Power Systems Operational

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Damage Control Systems Operational

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Potable Water Supplies
	if (response == "s_116")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: System reports contamination.
			string_id message = new string_id (c_stringFile, "s_119");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency Fire Protection System
	if (response == "s_117")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Fire System Inoperable - Error
			string_id message = new string_id (c_stringFile, "s_120");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Emergency External Ventilation
	if (response == "s_115")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Emergency Ventilation Activated
			string_id message = new string_id (c_stringFile, "s_121");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: System Override
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_122");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 5);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Main Power Systems
	if (response == "s_118")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Main Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_123");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Backup Power Systems
	if (response == "s_125")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Backup Power Systems Operational
			string_id message = new string_id (c_stringFile, "s_126");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Damage Control Systems
	if (response == "s_127")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Damage Control Systems Operational
			string_id message = new string_id (c_stringFile, "s_128");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Potable Water Supplies
			boolean hasResponse0 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Emergency Fire Protection System
			boolean hasResponse1 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Emergency External Ventilation
			boolean hasResponse2 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			//-- PLAYER: Main Power Systems
			boolean hasResponse3 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse3 = true;
			}

			//-- PLAYER: Backup Power Systems
			boolean hasResponse4 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse4 = true;
			}

			//-- PLAYER: Damage Control Systems
			boolean hasResponse5 = false;
			if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse5 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_116");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_117");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_115");

				if (hasResponse3)
					responses [responseIndex++] = new string_id (c_stringFile, "s_118");

				if (hasResponse4)
					responses [responseIndex++] = new string_id (c_stringFile, "s_125");

				if (hasResponse5)
					responses [responseIndex++] = new string_id (c_stringFile, "s_127");

				utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 2);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch11 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Get 'Stupid Vents' Quest?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes please!
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			computer_console_level_02_command_console_action_fixDeletedQuest (player, npc);

			//-- NPC: Done
			string_id message = new string_id (c_stringFile, "s_27");
			utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int computer_console_level_02_command_console_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Unauthorized access detected.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Logoff
	if (response == "s_30")
	{
		//-- [NOTE] 
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			//-- NPC: Facility security notified of unauthorized access.
			string_id message = new string_id (c_stringFile, "s_32");
			utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.computer_console_level_02_command_console");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.computer_console_level_02_command_console");

	return SCRIPT_CONTINUE;
}

//--------------------------------
//--------------------------------
messageHandler rewardPlayerFactionalQuest()
{	
	if ((params == null) || (params.isEmpty()))
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler received no data. Catestrophic error.");
		return SCRIPT_CONTINUE;
	}
	if(!params.containsKey("player"))
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler received data but without critical PLAYER key. Catestrophic error.");
		return SCRIPT_CONTINUE;		
	}
	obj_id player = params.getObjId("player");
	if(!isValidId(player) || !exists(player))
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler received data but Player is no longer valid or no longer exists. Catestrophic error for player: "+player+".");
		return SCRIPT_CONTINUE;		
	}
	if(!params.containsKey("faction_quest"))
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler received data but without critical faction key. Catestrophic error for player: "+player+".");
		return SCRIPT_CONTINUE;		
	}		
	string factionQuest = params.getString("faction_quest");
	if(factionQuest == null || factionQuest.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler received data but faction quest is not valid. Catestrophic error for player: "+player);
		return SCRIPT_CONTINUE;		
	}
	groundquests.requestGrantQuest(player, factionQuest);
	CustomerServiceLog("outbreak_themepark", "computer_console_level_02 conversation script.rewardPlayerFactionalQuest() messageHandler requesting that player: "+player+" be granted quest: "+factionQuest);		
	return SCRIPT_CONTINUE;	
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (computer_console_level_02_command_console_condition_hasQuest (player, npc))
	{
		//-- NPC: Command Console Access...
		string_id message = new string_id (c_stringFile, "s_38");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Search for Ventilation Systems
		boolean hasResponse0 = false;
		if (computer_console_level_02_command_console_condition_answerSecCall (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Blinking Com Light
		boolean hasResponse1 = false;
		if (computer_console_level_02_command_console_condition_canUseFirstTime (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_112");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_107");

			utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 1);

			npcStartConversation (player, npc, "computer_console_level_02_command_console", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (computer_console_level_02_command_console_condition_hasDeletedQuest (player, npc))
	{
		//-- NPC: Get 'Stupid Vents' Quest?
		string_id message = new string_id (c_stringFile, "s_25");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes please!
		boolean hasResponse0 = false;
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_26");

			utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 11);

			npcStartConversation (player, npc, "computer_console_level_02_command_console", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
	{
		doAnimationAction (player, "shrug_shoulders");

		//-- NPC: Unauthorized access detected.
		string_id message = new string_id (c_stringFile, "s_65");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Logoff
		boolean hasResponse0 = false;
		if (computer_console_level_02_command_console_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_30");

			utils.setScriptVar (player, "conversation.computer_console_level_02_command_console.branchId", 13);

			npcStartConversation (player, npc, "computer_console_level_02_command_console", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "computer_console_level_02_command_console")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

	if (branchId == 1 && computer_console_level_02_command_console_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 2 && computer_console_level_02_command_console_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 3 && computer_console_level_02_command_console_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && computer_console_level_02_command_console_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && computer_console_level_02_command_console_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && computer_console_level_02_command_console_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && computer_console_level_02_command_console_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && computer_console_level_02_command_console_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && computer_console_level_02_command_console_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 11 && computer_console_level_02_command_console_handleBranch11 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && computer_console_level_02_command_console_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.computer_console_level_02_command_console.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

