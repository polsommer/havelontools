// ======================================================================
//
// junk_dealer_smuggler.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.group;
include library.quests;
include library.smuggler;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/junk_dealer_smuggler";

// ======================================================================
// Script Conditions
// ======================================================================

boolean junk_dealer_smuggler_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_check_inv (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return smuggler.checkInventory(player, npc);
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_hasNoInv (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	boolean hasNoInvRoom = false;
	obj_id playerInv = utils.getInventoryContainer(player);
	if ( isIdValid(playerInv) )
	{
		int free_space = getVolumeFree(playerInv);
		if (free_space < 1 )
		{
			hasNoInvRoom = true;
		}
	}
	return hasNoInvRoom;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_check_master (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	obj_id master = utils.getObjIdScriptVar(npc, "smugglerMaster");

	if(master != player)
	{
		return false;
	}

	return true;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_isInParty (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	obj_id master = utils.getObjIdScriptVar(npc, "smugglerMaster");

	if(player == master)
	{
		return true;
	}

	// Collect party members and set them on the Jedi casting this buff
	if(group.isGrouped(master))
	{
		Vector party = group.getPCMembersInRange(master, 32f);
		
		if(party != null)
		{
			for(int i = 0; i < party.size(); i++)
			{
				obj_id who = (obj_id)party.elementAt(i);

				if(player == who)
				{
					return true;
				}
			}
		}
	}

	return false;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_canGetPistolQuest (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	obj_id module = utils.getStaticItemInInventory(player, "item_reward_modify_pistol_01_01");
	
	if(!isIdValid(module) || getCount(module) <= 0)
	{
		return false;
	}

	if(groundquests.isQuestActive(player, "quest/smuggler_modules_for_pistol"))
	{
		return false;
	}

	return true;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_canGetPistolQuestComplete (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	obj_id module = utils.getStaticItemInInventory(player, "item_reward_modify_pistol_01_01");
	
	if(!isIdValid(module) || getCount(module) < 100)
	{
		return false;
	}

	if(!groundquests.isQuestActive(player, "quest/smuggler_modules_for_pistol"))
	{
		return false;
	}

	return true;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_hasBuyBackItems (obj_id player, obj_id npc)
{
	obj_id[] listOfBuyBacks = smuggler.getBuyBackItemsInContainer(player);
	return listOfBuyBacks != null && listOfBuyBacks.length > 0;
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_isInPartyWithBuyBack (obj_id player, obj_id npc)
{
	return junk_dealer_smuggler_condition_isInParty(player, npc) && junk_dealer_smuggler_condition_hasBuyBackItems(player, npc);
}

// ----------------------------------------------------------------------

boolean junk_dealer_smuggler_condition_checkBuyBackContainer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	if(!smuggler.hasBuyBackContainer(player))
	{
		junk_dealer_smuggler_action_createBuyBackContainer(player, npc);
	}
	return true;
}

// ======================================================================
// Script Actions
// ======================================================================

void junk_dealer_smuggler_action_start_dealing (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startDealing", params, 0.0f, false);
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_face_to (obj_id player, obj_id npc)
{
	faceTo(npc, player);
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_grant_pistol_quest (obj_id player, obj_id npc)
{
	groundquests.requestGrantQuest(player, "quest/smuggler_modules_for_pistol", true);
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_complete_pistol_quest (obj_id player, obj_id npc)
{
	obj_id module = utils.getStaticItemInInventory(player, "item_reward_modify_pistol_01_01");
	
	if(!isIdValid(module) || getCount(module) < 100)
	{
		return;
	}

	int count = getCount(module);
	
	count -= 100;
	
	if(count <= 0)
	{
		destroyObject(module);
	}
	else
	{
		setCount(module, count);
	}

	groundquests.sendSignal(player, "smugglerModulesCollected");
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_startBuyBack (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startBuyBack", params, 0.0f, false);
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_createBuyBackContainer (obj_id player, obj_id npc)
{
	if(!isValidId(smuggler.createBuyBackControlDeviceOnPlayer(player)))
	{
		CustomerServiceLog("Junk_Dealer: ", "junk_dealer_generic conversation - Player (OID: " + player + ") did not get his buy back container set up properly.");
	}
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_dismiss (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "dismissDealer", params, 1.0f, false);
}

// ----------------------------------------------------------------------

void junk_dealer_smuggler_action_startFlagNoSale (obj_id player, obj_id npc)
{
	dictionary params = new dictionary();
	params.put("player", player);
	
	messageTo(npc, "startFlaggingItemsNoSale", params, 0.0f, false);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int junk_dealer_smuggler_handleBranch1 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I hope you didn't call me out here for nothing.  Let's get on with it.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I sold you something I actually needed. Can I buy it back?
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition_hasNoInv (player, npc))
		{
			//-- NPC: Looks like your inventory is full. Come back when you make some room.
			string_id message = new string_id (c_stringFile, "s_18");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_startBuyBack (player, npc);

			//-- NPC: Of course! All you need to do is give me back the credits. What was the item?
			string_id message = new string_id (c_stringFile, "s_19");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I have some things that you might be interested in.
	if (response == "s_54fab04f")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_start_dealing (player, npc);

			//-- NPC: Alright, let me see what you are offering.
			string_id message = new string_id (c_stringFile, "s_84a67771");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How can I mark items so you know what to buy and not to buy?
	if (response == "s_20")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_startFlagNoSale (player, npc);

			//-- NPC: Just select an item in this list to toggle the items sellable or no sell.
			string_id message = new string_id (c_stringFile, "s_23");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am sorry but I don't think I have anything you would want.
	if (response == "s_cd7a3f41")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			//-- NPC: Arg!  I knew you were good for nothing!  I'll remember this the next time.
			string_id message = new string_id (c_stringFile, "s_4bd9d15e");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm done dealing with you.  Please leave.
	if (response == "s_43")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_dismiss (player, npc);

			//-- NPC: I better get going.  Make sure to keep me in mind, if you run across anything else I might find of value.
			string_id message = new string_id (c_stringFile, "s_44");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I heard you like pistol modifications.
	if (response == "s_15")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_grant_pistol_quest (player, npc);

			//-- NPC: Oh yes!  I collect them for...  uh...  research purposes!
			string_id message = new string_id (c_stringFile, "s_21");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Here are those pistol modules you requested.
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			junk_dealer_smuggler_action_complete_pistol_quest (player, npc);

			//-- NPC: Excellent!  I will make sure these get to the... uh... scientists!
			string_id message = new string_id (c_stringFile, "s_26");
			utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.junk_dealer_smuggler");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.junk_dealer_smuggler");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (junk_dealer_smuggler_condition_checkBuyBackContainer (player, npc))
	{
		//-- NPC: I hope you didn't call me out here for nothing.  Let's get on with it.
		string_id message = new string_id (c_stringFile, "s_bef51e38");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I sold you something I actually needed. Can I buy it back?
		boolean hasResponse0 = false;
		if (junk_dealer_smuggler_condition_isInPartyWithBuyBack (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I have some things that you might be interested in.
		boolean hasResponse1 = false;
		if (junk_dealer_smuggler_condition_isInParty (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: How can I mark items so you know what to buy and not to buy?
		boolean hasResponse2 = false;
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: I am sorry but I don't think I have anything you would want.
		boolean hasResponse3 = false;
		if (junk_dealer_smuggler_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		//-- PLAYER: I'm done dealing with you.  Please leave.
		boolean hasResponse4 = false;
		if (junk_dealer_smuggler_condition_check_master (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse4 = true;
		}

		//-- PLAYER: I heard you like pistol modifications.
		boolean hasResponse5 = false;
		if (junk_dealer_smuggler_condition_canGetPistolQuest (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse5 = true;
		}

		//-- PLAYER: Here are those pistol modules you requested.
		boolean hasResponse6 = false;
		if (junk_dealer_smuggler_condition_canGetPistolQuestComplete (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse6 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_17");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_54fab04f");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_20");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_cd7a3f41");

			if (hasResponse4)
				responses [responseIndex++] = new string_id (c_stringFile, "s_43");

			if (hasResponse5)
				responses [responseIndex++] = new string_id (c_stringFile, "s_15");

			if (hasResponse6)
				responses [responseIndex++] = new string_id (c_stringFile, "s_24");

			utils.setScriptVar (player, "conversation.junk_dealer_smuggler.branchId", 1);

			npcStartConversation (player, npc, "junk_dealer_smuggler", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "junk_dealer_smuggler")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

	if (branchId == 1 && junk_dealer_smuggler_handleBranch1 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.junk_dealer_smuggler.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

