// ======================================================================
//
// kole.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.collection;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/kole";

// ======================================================================
// Script Conditions
// ======================================================================

boolean kole_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean kole_condition_hasCompletedMine (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isQuestActiveOrComplete(player, "u16_nym_themepark_jinkins_kole")
	&& !groundquests.isQuestActiveOrComplete(player, "u16_nym_themepark_second_interview_moore");
}

// ----------------------------------------------------------------------

boolean kole_condition_hasCompletedMoore (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_second_interview_moore", "tellKoleMoore"); 
}

// ----------------------------------------------------------------------

boolean kole_condition_hasMooreQuest (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isQuestActive(player, "u16_nym_themepark_second_interview_moore");
}

// ----------------------------------------------------------------------

boolean kole_condition_hasMooreNotResearch (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return (groundquests.hasCompletedQuest(player, "u16_nym_themepark_second_interview_moore")
	&& !groundquests.isQuestActiveOrComplete(player, "u16_nym_themepark_research_facility")); 
}

// ----------------------------------------------------------------------

boolean kole_condition_hasDoneResearchFacility (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isTaskActive(player, "u16_nym_themepark_research_facility", "returnResearchFacilityComplete");
}

// ----------------------------------------------------------------------

boolean kole_condition_hasCompletedResearchFacilityDoesntHaveArena (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.hasCompletedQuest(player, "u16_nym_themepark_research_facility")
	&& !groundquests.isQuestActiveOrComplete(player, "u16_nym_themepark_nym_arena");
}

// ----------------------------------------------------------------------

boolean kole_condition_hasResearchQuestOrNeedsQuest (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.isQuestActive(player, "u16_nym_themepark_research_facility")
	|| kole_condition_hasMooreNotResearch(player, npc);
}

// ----------------------------------------------------------------------

boolean kole_condition_hasCompletedThemepark (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	return groundquests.hasCompletedQuest(player, "u16_nym_themepark_shuttle_ambush");
}

// ======================================================================
// Script Actions
// ======================================================================

void kole_action_grantInterviewMoore (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	groundquests.grantQuest(player, "u16_nym_themepark_second_interview_moore");
}

// ----------------------------------------------------------------------

void kole_action_grantFacilityQuest (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	if(!groundquests.isQuestActiveOrComplete(player, "u16_nym_themepark_research_facility"))
		groundquests.grantQuest(player, "u16_nym_themepark_research_facility"); 
    
    if(!hasCompletedCollectionSlot(player, "kill_nyms_themepark_mercenary_activate"))
	{
		modifyCollectionSlotValue(player, "kill_nyms_themepark_mercenary_activate", 1);
	}

    if(!hasCompletedCollectionSlot(player, "kill_nyms_themepark_lab_droideka_activate"))
	{
		modifyCollectionSlotValue(player, "kill_nyms_themepark_lab_droideka_activate", 1);
	}

     if(groundquests.isTaskActive(player, "u16_nym_themepark_second_interview_moore", "tellKoleMoore"))
	{
			groundquests.sendSignal(player, "hasToldKoleMoore");
	}	
}

// ----------------------------------------------------------------------

void kole_action_finishMooreQuest (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	groundquests.sendSignal(player, "hasToldKoleMoore");
}

// ----------------------------------------------------------------------

void kole_action_completeResearchFacility (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	groundquests.sendSignal(player, "hasCompletedResearchFacility");
}

// ----------------------------------------------------------------------

void kole_action_hasFoundKole (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasFoundKole");
}

// ----------------------------------------------------------------------

void kole_action_gotoNym (obj_id player, obj_id npc)
{
	if(!groundquests.hasCompletedQuest(player, "u16_nym_themepark_kole_to_nym"))
	{
		groundquests.grantQuest(player, "u16_nym_themepark_kole_to_nym");
	}
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int kole_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're back, and in one piece. Don't tell me...you got 'tied up' with something else and now you are here to give some lame excuse.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm back from the research facility.
	if (response == "s_57")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Prove it.
			string_id message = new string_id (c_stringFile, "s_58");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I have the IMGGCU prototype and the holodisk.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59");

				utils.setScriptVar (player, "conversation.kole.branchId", 4);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Prove it.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I have the IMGGCU prototype and the holodisk.
	if (response == "s_59")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			kole_action_completeResearchFacility (player, npc);

			//-- NPC: Well, well. We knew you could pull it off, %TU. Great work. Return to me when you are ready to prove yourself again.
			string_id message = new string_id (c_stringFile, "s_60");
			utils.removeScriptVar (player, "conversation.kole.branchId");

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcEndConversationWithMessage (player, pp);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch6 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What happend? You need to go to the Imperial Research Facility and bring back the Imperial Military Grade Grenade Casing Units and holodisk back up of the lab's computers. Now go.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm on my way.
	if (response == "s_73")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			kole_action_grantFacilityQuest (player, npc);

			//-- NPC: Try and make yourself useful and see if anyone else can make use of you while you're in that lab.
			string_id message = new string_id (c_stringFile, "s_71");
			utils.removeScriptVar (player, "conversation.kole.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're back. What did you find?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The facility has research data and IMGGCUs.
	if (response == "s_25")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Ah, Imperial Military Grade Grenade Casing Units. Obviously, there are two things we want: First, we'll want all the research the scientists have done that can fit on a holodisk. Just back up the memory unit from one of the lab's computers onto a disk. Second, I need some Imperial Military Grade Grenade Casing Units.
			string_id message = new string_id (c_stringFile, "s_26");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: This sounds a little more complex.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_27");

				utils.setScriptVar (player, "conversation.kole.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ah, Imperial Military Grade Grenade Casing Units. Obviously, there are two things we want: First, we'll want all the research the scientists have done that can fit on a holodisk. Just back up the memory unit from one of the lab's computers onto a disk. Second, I need some Imperial Military Grade Grenade Casing Units.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: This sounds a little more complex.
	if (response == "s_27")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'll make sure you're well-paid. Now get outta here! Bring me back what I asked for, and we'll do some business.
			string_id message = new string_id (c_stringFile, "s_28");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm going! I'm going!
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_69");

				utils.setScriptVar (player, "conversation.kole.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'll make sure you're well-paid. Now get outta here! Bring me back what I asked for, and we'll do some business.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm going! I'm going!
	if (response == "s_69")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			kole_action_grantFacilityQuest (player, npc);

			//-- NPC: Try and make yourself useful and see if anyone else can make use of you while you're in that lab.
			string_id message = new string_id (c_stringFile, "s_71");
			utils.removeScriptVar (player, "conversation.kole.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I ain't got nothing for you yet. Go talk to Jinkins. He's always handing out blue milk runs for outlanders like you.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Jinkins sent me to you.
	if (response == "s_23")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: What? Does that mean you got the mine filter?
			string_id message = new string_id (c_stringFile, "s_30");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				utils.setScriptVar (player, "conversation.kole.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What? Does that mean you got the mine filter?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_32")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Well then, you've certainly proven to be pirate material...maybe.
			string_id message = new string_id (c_stringFile, "s_34");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm ready for my next assignment.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Who are you?
			boolean hasResponse1 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_62");

				utils.setScriptVar (player, "conversation.kole.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well then, you've certainly proven to be pirate material...maybe.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready for my next assignment.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: I might have work for someone too stupid to know when to give up. Would that be you?
			string_id message = new string_id (c_stringFile, "s_38");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yep. That is me.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: The pay is good.
			boolean hasResponse1 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				utils.setScriptVar (player, "conversation.kole.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Who are you?
	if (response == "s_62")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: According to the Imperial criminal databank, my name's Kole, and that's the only name you need to know. I'm Nym's first mate, which means that I slip a vibro-blade between the ribs of anyone who he don't like. So watch yourself. Me and Jinkins, we've been around long enough to bury hundreds of outlanders just like you.  
			string_id message = new string_id (c_stringFile, "s_64");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'll keep that in mind.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_66");

				utils.setScriptVar (player, "conversation.kole.branchId", 19);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch15 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I might have work for someone too stupid to know when to give up. Would that be you?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yep. That is me.
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Right...well, there's an Imperial research facility on Lok that our spies think is filled with experimental weapons. Nym wants whatever that base is building.
			string_id message = new string_id (c_stringFile, "s_44");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Do we know what that might be?
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.kole.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: The pay is good.
	if (response == "s_42")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Right...well, there's an Imperial research facility on Lok that our spies think is filled with experimental weapons. Nym wants whatever that base is building.
			string_id message = new string_id (c_stringFile, "s_44");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Do we know what that might be?
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_46");

				utils.setScriptVar (player, "conversation.kole.branchId", 16);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch16 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Right...well, there's an Imperial research facility on Lok that our spies think is filled with experimental weapons. Nym wants whatever that base is building.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Do we know what that might be?
	if (response == "s_46")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: Not really. To find this out you'll need to talk to a 'friend' of Nym. This guy owes Nym money and to repay he'll be acting as an informant. You already know him...it is Sergeant Moore.
			string_id message = new string_id (c_stringFile, "s_48");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: That guy drained me of credits.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_50");

				utils.setScriptVar (player, "conversation.kole.branchId", 17);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch17 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Not really. To find this out you'll need to talk to a 'friend' of Nym. This guy owes Nym money and to repay he'll be acting as an informant. You already know him...it is Sergeant Moore.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That guy drained me of credits.
	if (response == "s_50")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			kole_action_grantInterviewMoore (player, npc);

			//-- NPC: Well, he has the information you need. Take care of business.
			string_id message = new string_id (c_stringFile, "s_52");
			utils.removeScriptVar (player, "conversation.kole.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: According to the Imperial criminal databank, my name's Kole, and that's the only name you need to know. I'm Nym's first mate, which means that I slip a vibro-blade between the ribs of anyone who he don't like. So watch yourself. Me and Jinkins, we've been around long enough to bury hundreds of outlanders just like you.  

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll keep that in mind.
	if (response == "s_66")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: So what did you need?
			string_id message = new string_id (c_stringFile, "s_68");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I'm ready for my next assignment.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_72");

				utils.setScriptVar (player, "conversation.kole.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int kole_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: So what did you need?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm ready for my next assignment.
	if (response == "s_72")
	{
		//-- [NOTE] 
		if (kole_condition__defaultCondition (player, npc))
		{
			//-- NPC: I might have work for someone too stupid to know when to give up. Would that be you?
			string_id message = new string_id (c_stringFile, "s_38");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yep. That is me.
			boolean hasResponse0 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: The pay is good.
			boolean hasResponse1 = false;
			if (kole_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_42");

				utils.setScriptVar (player, "conversation.kole.branchId", 15);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.kole.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.kole");

	setCondition (self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.kole");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (kole_condition_hasCompletedThemepark (player, npc))
	{
		//-- NPC: So you're one of us now? Don't even think of giving me orders!
		string_id message = new string_id (c_stringFile, "s_75");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasCompletedResearchFacilityDoesntHaveArena (player, npc))
	{
		kole_action_gotoNym (player, npc);

		//-- NPC: We're done, %TU. Speak with Nym.
		string_id message = new string_id (c_stringFile, "s_61");
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasDoneResearchFacility (player, npc))
	{
		doAnimationAction (npc, "applause_excited");

		//-- NPC: You're back, and in one piece. Don't tell me...you got 'tied up' with something else and now you are here to give some lame excuse.
		string_id message = new string_id (c_stringFile, "s_56");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm back from the research facility.
		boolean hasResponse0 = false;
		if (kole_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_57");

			utils.setScriptVar (player, "conversation.kole.branchId", 3);

			npcStartConversation (player, npc, "kole", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasResearchQuestOrNeedsQuest (player, npc))
	{
		//-- NPC: What happend? You need to go to the Imperial Research Facility and bring back the Imperial Military Grade Grenade Casing Units and holodisk back up of the lab's computers. Now go.
		string_id message = new string_id (c_stringFile, "s_55");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm on my way.
		boolean hasResponse0 = false;
		if (kole_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_73");

			utils.setScriptVar (player, "conversation.kole.branchId", 6);

			npcStartConversation (player, npc, "kole", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasCompletedMoore (player, npc))
	{
		doAnimationAction (npc, "applause_polite");

		kole_action_finishMooreQuest (player, npc);

		//-- NPC: You're back. What did you find?
		string_id message = new string_id (c_stringFile, "s_24");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: The facility has research data and IMGGCUs.
		boolean hasResponse0 = false;
		if (kole_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_25");

			utils.setScriptVar (player, "conversation.kole.branchId", 7);

			npcStartConversation (player, npc, "kole", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasMooreQuest (player, npc))
	{
		doAnimationAction (npc, "backhand_threaten");

		//-- NPC: What are you doing here? Go speak with Sergeant Moore in the cantina.
		string_id message = new string_id (c_stringFile, "s_53");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition_hasCompletedMine (player, npc))
	{
		doAnimationAction (npc, "shoo");

		kole_action_hasFoundKole (player, npc);

		//-- NPC: I ain't got nothing for you yet. Go talk to Jinkins. He's always handing out blue milk runs for outlanders like you.
		string_id message = new string_id (c_stringFile, "s_21");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Jinkins sent me to you.
		boolean hasResponse0 = false;
		if (kole_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_23");

			utils.setScriptVar (player, "conversation.kole.branchId", 12);

			npcStartConversation (player, npc, "kole", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (kole_condition__defaultCondition (player, npc))
	{
		doAnimationAction (npc, "rude");

		//-- NPC: Peddle your blue milk, or whatever you're selling, to someone else.
		string_id message = new string_id (c_stringFile, "s_76");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "kole")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.kole.branchId");

	if (branchId == 3 && kole_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && kole_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 6 && kole_handleBranch6 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 7 && kole_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && kole_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && kole_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && kole_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && kole_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && kole_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 15 && kole_handleBranch15 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 16 && kole_handleBranch16 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 17 && kole_handleBranch17 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && kole_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && kole_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.kole.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

