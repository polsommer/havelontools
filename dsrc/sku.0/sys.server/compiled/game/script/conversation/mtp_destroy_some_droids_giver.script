// ======================================================================
//
// mtp_destroy_some_droids_giver.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.groundquests;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/mtp_destroy_some_droids_giver";

// ======================================================================
// Script Conditions
// ======================================================================

boolean mtp_destroy_some_droids_giver_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean mtp_destroy_some_droids_giver_condition_alreadyHasQuest (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "mtp_hideout_instance_kill_specific_droids");
}

// ----------------------------------------------------------------------

boolean mtp_destroy_some_droids_giver_condition_returningQuestSuccess (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "mtp_hideout_instance_kill_specific_droids_success");
}

// ----------------------------------------------------------------------

boolean mtp_destroy_some_droids_giver_condition_notYetReadyForAnother (obj_id player, obj_id npc)
{
	if ( groundquests.hasCompletedQuest(player, "mtp_hideout_instance_kill_specific_droids_success") && hasObjVar(player, "mtp_hideout.eligibleSomeDroids") )
	{
		int eligibleForNextQuestAt = getIntObjVar(player, "mtp_hideout.eligibleSomeDroids");
		if ( getCalendarTime() < eligibleForNextQuestAt )
		{
			return true;
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean mtp_destroy_some_droids_giver_condition_returningQuestFailure (obj_id player, obj_id npc)
{
	return groundquests.isQuestActive(player, "mtp_hideout_instance_kill_specific_droids_fail");
}

// ======================================================================
// Script Actions
// ======================================================================

void mtp_destroy_some_droids_giver_action_grantDroidQuest (obj_id player, obj_id npc)
{
	groundquests.clearQuest(player, "mtp_hideout_instance_kill_specific_droids");
	groundquests.clearQuest(player, "mtp_hideout_instance_kill_specific_droids_fail");
	groundquests.clearQuest(player, "mtp_hideout_instance_kill_specific_droids_success");
	
	groundquests.grantQuest(player, "mtp_hideout_instance_kill_specific_droids");
	
	if ( hasObjVar(player, "mtp_hideout.eligibleSomeDroids") )
	{
		removeObjVar(player, "mtp_hideout.eligibleSomeDroids");
	}
	
	return;
}

// ----------------------------------------------------------------------

void mtp_destroy_some_droids_giver_action_sendDroidSuccessSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "mtp_kill_specific_droids_success");

	int now = getCalendarTime();
	int secondsUntil = secondsUntilNextDailyTime(4, 0, 0);
	int then = now + secondsUntil;
	
	setObjVar(player, "mtp_hideout.eligibleSomeDroids", then);
}

// ----------------------------------------------------------------------

void mtp_destroy_some_droids_giver_action_sendDroidFailureSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "mtp_kill_specific_droids_failed");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int mtp_destroy_some_droids_giver_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Can you help me? The lower maintenance areas are full of droids, but there are also security droids in the area. The droids must be destroyed, but we can't risk harming the security ones. Are you up to it?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I am.
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (mtp_destroy_some_droids_giver_condition__defaultCondition (player, npc))
		{
			mtp_destroy_some_droids_giver_action_grantDroidQuest (player, npc);

			//-- NPC: Oh good. You'll have to be fast though. You'll only have about ten minutes once you're down there before the security droids get too suspicious. And be sure not to harm any of the security droids or they will raise the alarm.
			string_id message = new string_id (c_stringFile, "s_15");
			utils.removeScriptVar (player, "conversation.mtp_destroy_some_droids_giver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No thanks.
	if (response == "s_17")
	{
		//-- [NOTE] 
		if (mtp_destroy_some_droids_giver_condition__defaultCondition (player, npc))
		{
			doAnimationAction (npc, "nod_head_multiple");

			//-- NPC: I understand. If you're looking for something else to do, you could try making people laugh. That's pretty safe.
			string_id message = new string_id (c_stringFile, "s_20");
			utils.removeScriptVar (player, "conversation.mtp_destroy_some_droids_giver.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.mtp_destroy_some_droids_giver");

	setCondition(self, CONDITION_CONVERSABLE);
	setCondition(self, CONDITION_SPACE_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition(self, CONDITION_SPACE_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	clearCondition (self, CONDITION_SPACE_INTERESTING);
	detachScript (self, "conversation.mtp_destroy_some_droids_giver");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (mtp_destroy_some_droids_giver_condition_returningQuestSuccess (player, npc))
	{
		mtp_destroy_some_droids_giver_action_sendDroidSuccessSignal (player, npc);

		//-- NPC: You got rid of all those droids? What a relief! Thank you!!
		string_id message = new string_id (c_stringFile, "s_4");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_destroy_some_droids_giver_condition_returningQuestFailure (player, npc))
	{
		mtp_destroy_some_droids_giver_action_sendDroidFailureSignal (player, npc);

		//-- NPC: Couldn't manage it? Don't worry. Not many Meatlumps can manage it. Let me know if you want to try again.
		string_id message = new string_id (c_stringFile, "s_19");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_destroy_some_droids_giver_condition_alreadyHasQuest (player, npc))
	{
		//-- NPC: Go get rid of those droids. The lower levels are full of them. But don't harm the security droids.
		string_id message = new string_id (c_stringFile, "s_7");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_destroy_some_droids_giver_condition_notYetReadyForAnother (player, npc))
	{
		//-- NPC: It's not yet safe to go back and get rid of more droids. The security droids are too thick right now. Maybe later.
		string_id message = new string_id (c_stringFile, "s_9");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (mtp_destroy_some_droids_giver_condition__defaultCondition (player, npc))
	{
		//-- NPC: Can you help me? The lower maintenance areas are full of droids, but there are also security droids in the area. The droids must be destroyed, but we can't risk harming the security ones. Are you up to it?
		string_id message = new string_id (c_stringFile, "s_11");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I am.
		boolean hasResponse0 = false;
		if (mtp_destroy_some_droids_giver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: No thanks.
		boolean hasResponse1 = false;
		if (mtp_destroy_some_droids_giver_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_13");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_17");

			utils.setScriptVar (player, "conversation.mtp_destroy_some_droids_giver.branchId", 5);

			npcStartConversation (player, npc, "mtp_destroy_some_droids_giver", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "mtp_destroy_some_droids_giver")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.mtp_destroy_some_droids_giver.branchId");

	if (branchId == 5 && mtp_destroy_some_droids_giver_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.mtp_destroy_some_droids_giver.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

