// ======================================================================
//
// quest_crowd_pleaser_manager.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.money;
include library.prose;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/quest_crowd_pleaser_manager";

// ======================================================================
// Script Conditions
// ======================================================================

boolean quest_crowd_pleaser_manager_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_entertainer (obj_id player, obj_id npc)
{
	return utils.isProfession(player, utils.ENTERTAINER);
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_1 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 1)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_event_in_progress (obj_id player, obj_id npc)
{
	return utils.hasScriptVar(npc, "quest.crowd_pleaser.performance.control");
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_dance_skill (obj_id player, obj_id npc)
{
	return hasSkill(player, "class_entertainer_phase1_master");
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_music_skill (obj_id player, obj_id npc)
{
	return hasSkill(player, "class_entertainer_phase1_master");
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_4 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 4)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_3 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 3)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_5 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 5) {
		
			if(!hasScript(player, "quest.crowd_pleaser.player_popularity"))
				attachScript(player, "quest.crowd_pleaser.player_popularity");
				
			return true;
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_6 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 6)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_7 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 7)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_9 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 9)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_10 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 10)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_11 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 11) {
		
			if(!hasScript(player, "quest.crowd_pleaser.player_popularity"))
				attachScript(player, "quest.crowd_pleaser.player_popularity");
				
			return true;
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_12 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 12)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_13 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 13)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_15 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 15)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_16 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 16)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_17 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 17) {
		
			if(!hasScript(player, "quest.crowd_pleaser.player_popularity"))
				attachScript(player, "quest.crowd_pleaser.player_popularity");
				
			return true;
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_18 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 18)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_19 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 19)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_status_21 (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.status")) {
	
		int status = getIntObjVar(player, "quest.crowd_pleaser.status");
		
		if(status == 21)
			return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_failed_recently (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.performance.failed")) {
	
		int failed = getIntObjVar(player, "quest.crowd_pleaser.performance.failed");
		int time = getGameTime();
		
		int test_time = 86400;
		string strTest = getConfigSetting("Quest", "CrowdPleaserTestTime");
		if(strTest != null && !strTest.equals("")) {
		
			test_time = utils.stringToInt(strTest);
			
			if(test_time < 0)
				test_time = 86400;
				
			if(isGod(player))
				sendSystemMessageTestingOnly(player, "<GOD MODE> Failure timer override - You need only wait " + test_time + " seconds after a failure");
		}
		
		if((time - failed) < test_time) {
		
			return true;
			
		} else {
		
			removeObjVar(player, "quest.crowd_pleaser.performance.failed");
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_failed_audition (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.audition.failed")) {
	
		int failed = getIntObjVar(player, "quest.crowd_pleaser.audition.failed");
		int time = getGameTime();
		
		int test_time = 86400;
		string strTest = getConfigSetting("Quest", "CrowdPleaserTestTime");
		if(strTest != null && !strTest.equals("")) {
		
			test_time = utils.stringToInt(strTest);
			
			if(test_time < 0)
				test_time = 86400;
			
			if(isGod(player))
				sendSystemMessageTestingOnly(player, "<GOD MODE> Failure timer override - You need only wait " + test_time + " seconds after a failure");
		}
		
		if((time - failed) < test_time) {
		
			return true;
			
		} else {
		
			removeObjVar(player, "quest.crowd_pleaser.audition.failed");
		}
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_completed_both (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "quest.crowd_pleaser.complete"))
		return false;
		
	string type = getStringObjVar(player, "quest.crowd_pleaser.complete");
	
	if(type == null || type.equals("")) {
		
		// This is most likely an old completion objvar, so we can remove it
		removeObjVar(player, "quest.crowd_pleaser.complete");
		return false;
	}
		
	if(type.equals("both"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_completed_one (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.crowd_pleaser.complete"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_completed_music (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "quest.crowd_pleaser.complete"))
		return false;
		
	string type = getStringObjVar(player, "quest.crowd_pleaser.complete");
	
	if(type == null || type.equals(""))
		return false;
		
	if(type.equals("music"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean quest_crowd_pleaser_manager_condition_has_completed_dance (obj_id player, obj_id npc)
{
	if(!hasObjVar(player, "quest.crowd_pleaser.complete"))
		return false;
		
	string type = getStringObjVar(player, "quest.crowd_pleaser.complete");
	
	if(type == null || type.equals(""))
		return false;
		
	if(type.equals("dance"))
		return true;
		
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void quest_crowd_pleaser_manager_action_set_status_1 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 1);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_2 (obj_id player, obj_id npc)
{
	obj_id building = getTopMostContainer(npc);
	
	if(!isIdValid(building))
		return;
		
	obj_id cell = getCellId(building, "theater");
	
	if(!isIdValid(cell))
		return;
	
	location myLoc = getLocation(npc);
	location loc = new location(0.58f, 2.13f, 58.69f, myLoc.area, cell);
	
	obj_id control = createObject("object/tangible/theme_park/invisible_object.iff", loc);
	
	if(!isIdValid(control))
		return;
		
	utils.setScriptVar(control, "quest.crowd_pleaser.audition.player", player);
	utils.setScriptVar(control, "quest.crowd_pleaser.audition.control", npc);
	
	utils.setScriptVar(npc, "quest.crowd_pleaser.performance.control", control);
	utils.setScriptVar(player, "quest.crowd_pleaser.performance.control", control);
	
	attachScript(control, "quest.crowd_pleaser.control_audition");
	attachScript(player, "quest.crowd_pleaser.player_performance");
	
	setObjVar(player, "quest.crowd_pleaser.status", 2);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_music (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.audition.type", "music");
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_dance (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.audition.type", "dance");
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_4 (obj_id player, obj_id npc)
{
	const int PAY = 500;
	
	setObjVar(player, "quest.crowd_pleaser.status", 4);
	
	money.systemPayout(money.ACCT_TEST, player, PAY, null, null);
	
	prose_package pp = prose.getPackage(new string_id("quest/crowd_pleaser/system_messages", "payout"), PAY);
	sendSystemMessageProse(player, pp);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_5 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 5);
	setObjVar(player, "quest.crowd_pleaser.popularity.number", 10);
	setObjVar(player, "quest.crowd_pleaser.popularity.level", 1);
	
	attachScript(player, "quest.crowd_pleaser.player_popularity");
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_7 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 7);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_8 (obj_id player, obj_id npc)
{
	obj_id building = getTopMostContainer(npc);
	
	if(!isIdValid(building))
		return;
		
	obj_id cell = getCellId(building, "theater");
	
	if(!isIdValid(cell))
		return;
	
	location myLoc = getLocation(npc);
	location loc = new location(0.58f, 2.13f, 58.69f, myLoc.area, cell);
	
	obj_id control = createObject("object/tangible/theme_park/invisible_object.iff", loc);
	
	if(!isIdValid(control))
		return;
		
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.player", player);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.level", 1);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.control", npc);
	
	string type = getStringObjVar(player, "quest.crowd_pleaser.audition.type");
	string pos = "";
	string neg = "";
	
	int c = 0;
	
	do {
		
		pos = getRandomPerformanceName(player, type);
		c++;
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos) && c < 100);
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos, 10);
	
	int flourish = rand(1, 8);
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, 10);
	
	c = 0;
	
	do {
		
		neg = getRandomPerformanceName(player, type);
		c++;
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg) && c < 100);
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg, -2);
	
	do {
		
		flourish = rand(1, 8);
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish));
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, -2);
	
	utils.setScriptVar(npc, "quest.crowd_pleaser.performance.control", control);
	utils.setScriptVar(player, "quest.crowd_pleaser.performance.control", control);
	
	attachScript(control, "quest.crowd_pleaser.control_performance");
	attachScript(player, "quest.crowd_pleaser.player_performance");
	
	setObjVar(player, "quest.crowd_pleaser.status", 8);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_10 (obj_id player, obj_id npc)
{
	const int PAY = 1000;
	
	setObjVar(player, "quest.crowd_pleaser.status", 10);
	
	money.systemPayout(money.ACCT_TEST, player, PAY, null, null);
	
	prose_package pp = prose.getPackage(new string_id("quest/crowd_pleaser/system_messages", "payout"), PAY);
	sendSystemMessageProse(player, pp);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_11 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 11);
	setObjVar(player, "quest.crowd_pleaser.popularity.number", 20);
	setObjVar(player, "quest.crowd_pleaser.popularity.level", 2);
	
	attachScript(player, "quest.crowd_pleaser.player_popularity");
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_13 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 13);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_14 (obj_id player, obj_id npc)
{
	obj_id building = getTopMostContainer(npc);
	
	if(!isIdValid(building))
		return;
		
	obj_id cell = getCellId(building, "theater");
	
	if(!isIdValid(cell))
		return;
	
	location myLoc = getLocation(npc);
	location loc = new location(0.58f, 2.13f, 58.69f, myLoc.area, cell);
	
	obj_id control = createObject("object/tangible/theme_park/invisible_object.iff", loc);
	
	if(!isIdValid(control))
		return;
		
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.player", player);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.level", 2);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.control", npc);
	
	string type = getStringObjVar(player, "quest.crowd_pleaser.audition.type");
	string pos = "";
	string neg = "";
	
	int c = 0;
	int flourish = 0;
	
	for(int i = 0; i < 2; i++) {
	
		do {
		
			pos = getRandomPerformanceName(player, type);
			c++;
	
		} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos) && c < 100);
	
		utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos, 10);
		
		do {
		
			flourish = rand(1, 8);
	
		} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish));
	
		utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, 10);
	}
	
	c = 0;
	
	do {
		
		neg = getRandomPerformanceName(player, type);
		c++;
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg) && c < 100);
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg, -2);
	
	do {
		
		flourish = rand(1, 8);
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish));
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, -2);
	
	utils.setScriptVar(npc, "quest.crowd_pleaser.performance.control", control);
	utils.setScriptVar(player, "quest.crowd_pleaser.performance.control", control);
	
	attachScript(control, "quest.crowd_pleaser.control_performance");
	attachScript(player, "quest.crowd_pleaser.player_performance");
	
	setObjVar(player, "quest.crowd_pleaser.status", 14);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_16 (obj_id player, obj_id npc)
{
	const int PAY = 1500;
	
	setObjVar(player, "quest.crowd_pleaser.status", 16);
	
	money.systemPayout(money.ACCT_CROWD_PLEASER, player, PAY, null, null);
	
	prose_package pp = prose.getPackage(new string_id("quest/crowd_pleaser/system_messages", "payout"), PAY);
	sendSystemMessageProse(player, pp);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_17 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 17);
	setObjVar(player, "quest.crowd_pleaser.popularity.number", 30);
	setObjVar(player, "quest.crowd_pleaser.popularity.level", 3);
	
	attachScript(player, "quest.crowd_pleaser.player_popularity");
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_19 (obj_id player, obj_id npc)
{
	setObjVar(player, "quest.crowd_pleaser.status", 19);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_status_20 (obj_id player, obj_id npc)
{
	obj_id building = getTopMostContainer(npc);
	
	if(!isIdValid(building))
		return;
		
	obj_id cell = getCellId(building, "theater");
	
	if(!isIdValid(cell))
		return;
	
	location myLoc = getLocation(npc);
	location loc = new location(0.58f, 2.13f, 58.69f, myLoc.area, cell);
	
	obj_id control = createObject("object/tangible/theme_park/invisible_object.iff", loc);
	
	if(!isIdValid(control))
		return;
		
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.player", player);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.level", 3);
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.control", npc);
	
	string type = getStringObjVar(player, "quest.crowd_pleaser.audition.type");
	string pos = "";
	string neg = "";
	
	int c = 0;
	int flourish = 0;
	
	for(int i = 0; i < 3; i++) {
	
		do {
		
			pos = getRandomPerformanceName(player, type);
			c++;
	
		} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos) && c < 100);
	
		utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + pos, 10);
		
		do {
		
			flourish = rand(1, 8);
	
		} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish));
	
		utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, 10);
	}
	
	c = 0;
	
	do {
		
		neg = getRandomPerformanceName(player, type);
		c++;
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg) && c < 100);
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + neg, -2);
	
	do {
		
		flourish = rand(1, 8);
	
	} while(utils.hasScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish));
	
	utils.setScriptVar(control, "quest.crowd_pleaser.performance.ratings." + flourish, -2);
	
	utils.setScriptVar(npc, "quest.crowd_pleaser.performance.control", control);
	utils.setScriptVar(player, "quest.crowd_pleaser.performance.control", control);
	
	attachScript(control, "quest.crowd_pleaser.control_performance");
	attachScript(player, "quest.crowd_pleaser.player_performance");
	
	setObjVar(player, "quest.crowd_pleaser.status", 20);
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_set_completion (obj_id player, obj_id npc)
{	
	const int PAY = 2000;
	
	money.systemPayout(money.ACCT_CROWD_PLEASER, player, PAY, null, null);
	
	prose_package pp = prose.getPackage(new string_id("quest/crowd_pleaser/system_messages", "payout"), PAY);
	sendSystemMessageProse(player, pp);
	
	if(hasObjVar(player, "quest.crowd_pleaser.audition.type")) {
	
		string type = getStringObjVar(player, "quest.crowd_pleaser.audition.type");
		if(type != null && !type.equals("")) {
		
			if(type.equals("dance")) {
			
				if(hasObjVar(player, "quest.crowd_pleaser.complete")) {
				
					removeObjVar(player, "quest.crowd_pleaser");
					setObjVar(player, "quest.crowd_pleaser.complete", "both");
				
				} else {
				
					removeObjVar(player, "quest.crowd_pleaser");
					setObjVar(player, "quest.crowd_pleaser.complete", "dance");
				}
				
				//obj_id dance_reward = createObjectInInventoryAllowOverload("object/tangible/item/quest/crowd_pleaser/dance_reward.iff", player);
				grantCommand(player, "startDance+theatrical");
				grantCommand(player, "startDance+theatrical2");
			
			} else if(type.equals("music")) {
			
				if(hasObjVar(player, "quest.crowd_pleaser.complete")) {
				
					removeObjVar(player, "quest.crowd_pleaser");
					setObjVar(player, "quest.crowd_pleaser.complete", "both");
				
				} else {
				
					removeObjVar(player, "quest.crowd_pleaser");
					setObjVar(player, "quest.crowd_pleaser.complete", "music");
				}
				
				//obj_id dance_reward = createObjectInInventoryAllowOverload("object/tangible/item/quest/crowd_pleaser/music_reward.iff", player);
				grantCommand(player, "startMusic+western");
			}
		}
	
	}
}

// ----------------------------------------------------------------------

void quest_crowd_pleaser_manager_action_giveMissingRewards (obj_id player, obj_id npc)
{
	if (!hasCommand(player, "startDance+theatrical"))
		grantCommand(player, "startDance+theatrical");
	if (!hasCommand(player, "startDance+theatrical2"))
		grantCommand(player, "startDance+theatrical2");
	if (!hasCommand(player, "startMusic+western"))
		grantCommand(player, "startMusic+western");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int quest_crowd_pleaser_manager_handleBranch7 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ah, you're here about your last show?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I am.
	if (response == "s_36a4e374")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: If you're ready now, I'll go ahead and start getting things set up. What do you say?
			string_id message = new string_id (c_stringFile, "s_b751f222");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do it!
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I'm not quite ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_dd4bb16d");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_d730c5dd");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 8);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Last show?
	if (response == "s_55e428e8")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's right. This is the last show scheduled for your concert series. But don't worry, for an entertainer such as yourself, I'm sure that there will be many opportunities for you in the future.
			string_id message = new string_id (c_stringFile, "s_2cf69669");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I see.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'd better come back later then.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_61657d0f");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fd047f06");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 12);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sorry, I'll come back later.
	if (response == "s_326a697e")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK, come back anytime.
			string_id message = new string_id (c_stringFile, "s_9d801ae8");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If you're ready now, I'll go ahead and start getting things set up. What do you say?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do it!
	if (response == "s_dd4bb16d")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get your show started.
			string_id message = new string_id (c_stringFile, "s_f148a2c3");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_20 (player, npc);

			//-- NPC: Good. I'll let the crew know so that they can start setting up. The performance will start in three minutes. You may speak with the audience beforehand if you like, but you must be on the stage when the show starts, alright?
			string_id message = new string_id (c_stringFile, "s_86731ce6");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I'm not quite ready yet.
	if (response == "s_d730c5dd")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fine. Take your time. Just come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_ab1c9c5f");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's right. This is the last show scheduled for your concert series. But don't worry, for an entertainer such as yourself, I'm sure that there will be many opportunities for you in the future.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I see.
	if (response == "s_61657d0f")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: If you're ready now, I'll go ahead and start getting things set up. What do you say?
			string_id message = new string_id (c_stringFile, "s_20");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Let's do it!
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I'm not quite ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_22");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_24");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'd better come back later then.
	if (response == "s_fd047f06")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back whenever you're ready.
			string_id message = new string_id (c_stringFile, "s_f72be127");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: If you're ready now, I'll go ahead and start getting things set up. What do you say?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Let's do it!
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get your show started.
			string_id message = new string_id (c_stringFile, "s_f148a2c3");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_20 (player, npc);

			//-- NPC: Good. I'll let the crew know so that they can start setting up. The performance will start in three minutes. You may speak with the audience beforehand if you like, but you must be on the stage when the show starts, alright?
			string_id message = new string_id (c_stringFile, "s_86731ce6");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I'm not quite ready yet.
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fine. Take your time. Just come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_26");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch19 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're here about your next show aren't you? Sure, sure, I understand. You'll need to go out and do some more promotion before you get started with the next performance, though. Is that alright?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That's fine. I don't mind doing the promotions.
	if (response == "s_5a936e2e")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fantastic. This is going to be your biggest performance ever! I can feel it!
			string_id message = new string_id (c_stringFile, "s_668b00bf");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What should I do?
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I changed my mind. I'm not ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_57c8489e");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ad679858");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't really like doing the promotions.
	if (response == "s_2f3d57d6")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Advertising and promotion is part of the business kid. Now are you ready to go out there and spread the word, or not?
			string_id message = new string_id (c_stringFile, "s_fe82f47f");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yeah, I guess so.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, not yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_a99397a");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_da9a29e9");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 25);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't have time for that stuff now.
	if (response == "s_1fe0d27c")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright, come back when you have the time.
			string_id message = new string_id (c_stringFile, "s_53");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch20 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's fantastic. This is going to be your biggest performance ever! I can feel it!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What should I do?
	if (response == "s_57c8489e")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Here's what you do. Go out and do a small performance routine for thirty people. Soon, everybody should be talking about you, and if the word is good, we might even have a sell out show!
			string_id message = new string_id (c_stringFile, "s_7cef0609");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: OK, I'll go get started.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Hm. I don't have time for that right now.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_c6403b16");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_d0fc43d");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 21);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I changed my mind. I'm not ready yet.
	if (response == "s_ad679858")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back whenever you're ready.
			string_id message = new string_id (c_stringFile, "s_44");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch21 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Here's what you do. Go out and do a small performance routine for thirty people. Soon, everybody should be talking about you, and if the word is good, we might even have a sell out show!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: OK, I'll go get started.
	if (response == "s_c6403b16")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_17 (player, npc);

			//-- NPC: Excellent. Just go out and entertain thirty people. After that, no more promotional work, I promise. Then come back and we'll talk about your next show.
			string_id message = new string_id (c_stringFile, "s_bba5f6f2");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Hm. I don't have time for that right now.
	if (response == "s_d0fc43d")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright, come back when you have the time.
			string_id message = new string_id (c_stringFile, "s_942ddb10");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch25 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Advertising and promotion is part of the business kid. Now are you ready to go out there and spread the word, or not?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yeah, I guess so.
	if (response == "s_a99397a")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fantastic. This is going to be your biggest performance ever! I can feel it!
			string_id message = new string_id (c_stringFile, "s_668b00bf");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: What should I do?
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I changed my mind. I'm not ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_57c8489e");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_ad679858");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 20);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, not yet.
	if (response == "s_da9a29e9")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back whenever you're ready.
			string_id message = new string_id (c_stringFile, "s_50");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch29 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: What? Oh, hello there. I'm sorry, it's recently become rather busy. What can I do for you?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm here to talk about my next performance.
	if (response == "s_1dc24a1")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Oh yes, I see, I see. Yes, we do have an open slot coming up here very shortly. Are you ready to get started with your show now?
			string_id message = new string_id (c_stringFile, "s_250ebca6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: As ready as I'll ever be.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Actually I'm not quite ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_59a59142");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_fb55e1c0");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 30);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sorry. I'll come back later.
	if (response == "s_3ef23ade")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK, that's fine.
			string_id message = new string_id (c_stringFile, "s_a19891a9");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch30 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh yes, I see, I see. Yes, we do have an open slot coming up here very shortly. Are you ready to get started with your show now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: As ready as I'll ever be.
	if (response == "s_59a59142")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get your show started.
			string_id message = new string_id (c_stringFile, "s_60");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_14 (player, npc);

			//-- NPC: Good. I'll let the crew know so that they can start setting up. The performance will start in two and a half minutes. You may speak with the audience beforehand if you like, but you must be on the stage when the show starts, alright?
			string_id message = new string_id (c_stringFile, "s_e66da464");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Actually I'm not quite ready yet.
	if (response == "s_fb55e1c0")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Nervous? I understand. Just come back when you're ready and we'll get you up on stage.
			string_id message = new string_id (c_stringFile, "s_38a3b1e2");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch35 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Great work! Really great work! I'm starting to hear a lot of people talk about you! I've got a feeling that this show is going to be fantastic.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: When can we get started with the next show?
	if (response == "s_7b58a334")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Whenever you like. Just go make yourself ready and speak to me again when you want to start.
			string_id message = new string_id (c_stringFile, "s_1e0d968c");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch38 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh yes. You're ready to get going for your next show. Let's not get too ahead of ourselves, though. You need to go out and do some more promotion before the next performance.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: More promotion?
	if (response == "s_847c3be4")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Indeed! This show will be even bigger than the last one! If the next show is as good as the last, you'll be on your way to the top!
			string_id message = new string_id (c_stringFile, "s_58ea419");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Alright. What do I need to do this time?
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I'll have to come back later.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_3e04f6f");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_11a3b43");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 39);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I see. I'm not ready for that yet.
	if (response == "s_6b02387e")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK, come back when you are.
			string_id message = new string_id (c_stringFile, "s_fa31756f");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch39 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Indeed! This show will be even bigger than the last one! If the next show is as good as the last, you'll be on your way to the top!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Alright. What do I need to do this time?
	if (response == "s_3e04f6f")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I would think that if you were to go out and do a performance routine for at least twenty people, that would be sufficient. Remember, the more people that get a taste of your act, the more tickets we'll sell!
			string_id message = new string_id (c_stringFile, "s_c9770db7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: OK, I'll get started on that now.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I don't have time for that now. I'll come back later.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_b6dac7cf");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_a820a6d1");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 40);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'll have to come back later.
	if (response == "s_11a3b43")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back whenever you're ready.
			string_id message = new string_id (c_stringFile, "s_81");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch40 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I would think that if you were to go out and do a performance routine for at least twenty people, that would be sufficient. Remember, the more people that get a taste of your act, the more tickets we'll sell!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: OK, I'll get started on that now.
	if (response == "s_b6dac7cf")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_11 (player, npc);

			//-- NPC: Excellent. Just go out and entertain twenty people. That should be enough. Then come back and we'll talk about your next show.
			string_id message = new string_id (c_stringFile, "s_f66a7b69");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't have time for that now. I'll come back later.
	if (response == "s_a820a6d1")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I see. Well, come back when you have more time and we'll get started.
			string_id message = new string_id (c_stringFile, "s_b1522710");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch46 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Ready to start the show, are you? Don't worry if you're nervous. Everybody gets like that the first time they're on stage.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I'm ready. Let's get this show on the road.
	if (response == "s_1377703a")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get your show started.
			string_id message = new string_id (c_stringFile, "s_88");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_8 (player, npc);

			//-- NPC: Good. I'll let the crew know so that they can start setting up. The performance will start in two minutes. You may speak with the audience beforehand if you like, but you must be on the stage when the show starts, alright?
			string_id message = new string_id (c_stringFile, "s_db3a3e40");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm not nervous.
	if (response == "s_4365b273")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Sure, sure. You've got a stomach of pure steel. So, are you ready to get started?
			string_id message = new string_id (c_stringFile, "s_85b97ed7");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, I'm ready. Let's get this show on the road.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, I'm not quite ready yet.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_93");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_95");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 49);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I'm not quite ready yet.
	if (response == "s_99")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fine. Take your time. Just come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_101");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch49 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Sure, sure. You've got a stomach of pure steel. So, are you ready to get started?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I'm ready. Let's get this show on the road.
	if (response == "s_93")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get your show started.
			string_id message = new string_id (c_stringFile, "s_88");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_8 (player, npc);

			//-- NPC: Good. I'll let the crew know so that they can start setting up. The performance will start in two minutes. You may speak with the audience beforehand if you like, but you must be on the stage when the show starts, alright?
			string_id message = new string_id (c_stringFile, "s_db3a3e40");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, I'm not quite ready yet.
	if (response == "s_95")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's fine. Take your time. Just come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_97");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch54 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Back already, huh? I don't blame you for wanting to get started.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: OK, so what do we do next?
	if (response == "s_694f2644")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Well, before you put on your first show, we need to do some advertising. You know, what good is a show if nobody comes to see it?
			string_id message = new string_id (c_stringFile, "s_353af024");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: How do we do that?
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: That sounds pretty hard, maybe I'll come back later.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_8ddf8010");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_e8276d66");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 55);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I'm not quite ready yet.
	if (response == "s_414898b2")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK, come back when you are.
			string_id message = new string_id (c_stringFile, "s_124");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch55 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well, before you put on your first show, we need to do some advertising. You know, what good is a show if nobody comes to see it?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How do we do that?
	if (response == "s_8ddf8010")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'll take care of all the promotions on this end, but you need to go out and promote yourself, if you know what I'm saying. Get your name out there on the streets... get people talking.
			string_id message = new string_id (c_stringFile, "s_4dbb8ff6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I see. Just tell me what I need to do.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: I don't really have time for that right now.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_34bf7b50");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_c7cb7929");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 56);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: That sounds pretty hard, maybe I'll come back later.
	if (response == "s_e8276d66")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back whenever you're ready.
			string_id message = new string_id (c_stringFile, "s_121");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch56 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'll take care of all the promotions on this end, but you need to go out and promote yourself, if you know what I'm saying. Get your name out there on the streets... get people talking.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I see. Just tell me what I need to do.
	if (response == "s_34bf7b50")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: It should be quite simple. Just go out there and do a little performance routine for some people. I think that if you were to entertain ten people, that would be enough. Are you ready to do this now?
			string_id message = new string_id (c_stringFile, "s_2224e2b8");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure, no time like the present.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Not right now, I've got some stuff to do first.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_7943785d");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_350a3257");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 57);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I don't really have time for that right now.
	if (response == "s_c7cb7929")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I see. Well, come back when you have more time and we'll get started.
			string_id message = new string_id (c_stringFile, "s_118");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch57 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: It should be quite simple. Just go out there and do a little performance routine for some people. I think that if you were to entertain ten people, that would be enough. Are you ready to do this now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure, no time like the present.
	if (response == "s_7943785d")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_5 (player, npc);

			//-- NPC: OK, I'll get the promotions started, you just go out and entertain ten people. Then come back here and we'll talk about getting the concert started.
			string_id message = new string_id (c_stringFile, "s_8b00fbc4");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Not right now, I've got some stuff to do first.
	if (response == "s_350a3257")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I see. Well, come back when you have more time and we'll get started.
			string_id message = new string_id (c_stringFile, "s_115");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch64 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: You're here for an audition, yes? Are you ready to get started now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, I'm ready.
	if (response == "s_4a1d2431")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I see. Now, do you want to audition as a musician or a dancer?
			string_id message = new string_id (c_stringFile, "s_1204a0c6");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: As a musician.
			boolean hasResponse0 = false;
			if (!quest_crowd_pleaser_manager_condition_has_completed_music (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: As a dancer.
			boolean hasResponse1 = false;
			if (!quest_crowd_pleaser_manager_condition_has_completed_dance (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: On second thought, I'm not quite ready yet.
			boolean hasResponse2 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_183e8ee4");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9172f29c");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_c73756f7");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 65);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, not quite yet.
	if (response == "s_f3d46f0b")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_144");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch65 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I see. Now, do you want to audition as a musician or a dancer?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: As a musician.
	if (response == "s_183e8ee4")
	{
		quest_crowd_pleaser_manager_action_set_music (player, npc);

		//-- [NOTE] 
		if (!quest_crowd_pleaser_manager_condition_has_music_skill (player, npc))
		{
			//-- NPC: It doesn't look like you're skilled enough to perform yet. Go practice a little more and come back when you're ready to try again.
			string_id message = new string_id (c_stringFile, "s_1c296980");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get you set up.
			string_id message = new string_id (c_stringFile, "s_57f90c0e");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_2 (player, npc);

			//-- NPC: Alright, I'll go ahead and get things set up. You'd better hurry up and get onstage. The audition will start in thirty seconds.
			string_id message = new string_id (c_stringFile, "s_274a8930");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: As a dancer.
	if (response == "s_9172f29c")
	{
		quest_crowd_pleaser_manager_action_set_dance (player, npc);

		//-- [NOTE] 
		if (!quest_crowd_pleaser_manager_condition_has_dance_skill (player, npc))
		{
			//-- NPC: It doesn't look like you're skilled enough to perform yet. Go practice a little more and come back when you're ready to try again.
			string_id message = new string_id (c_stringFile, "s_135");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
		{
			//-- NPC: Hm... it looks like someone else is on stage right now. Try back again in a little while and we'll see if we can get you set up.
			string_id message = new string_id (c_stringFile, "s_137");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_2 (player, npc);

			//-- NPC: Alright, I'll go ahead and get things set up. You'd better hurry up and get onstage. The audition will start in thirty seconds.
			string_id message = new string_id (c_stringFile, "s_139");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: On second thought, I'm not quite ready yet.
	if (response == "s_c73756f7")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. Come back when you're ready.
			string_id message = new string_id (c_stringFile, "s_303aa95e");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch74 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Oh, hello! Welcome back, friend. Are you looking to participate in another performance?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Is that possible?
	if (response == "s_dda95847")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_has_completed_dance (player, npc))
		{
			//-- NPC: Well, I'll be honest with you. Ever since your show, every hack that thinks he can dance a step has come here to perform. So we're all full on dance shows, but we still have a few spots open for a musical show if you're interested.
			string_id message = new string_id (c_stringFile, "s_919f9d5a");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure, I can give it a try.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, that's not really something I want to do.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39aa9593");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9728f9e3");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 75);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition_has_completed_music (player, npc))
		{
			//-- NPC: Well, I'll be honest with you. Ever since your show, every hack that thinks he can play a note has come here to perform. So we're all full on musical shows, but we still have a few spots open for a dance show if you're interested.
			string_id message = new string_id (c_stringFile, "s_a84a3743");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure, I can give it a try.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, that's not really something I want to do.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_39aa9593");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9728f9e3");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 75);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Actually, we're all booked up right now. Maybe some other time, sorry.
			string_id message = new string_id (c_stringFile, "s_68c92267");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, not really.
	if (response == "s_c5a66e82")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK... Well, if you ever need any more work, just come see me.
			string_id message = new string_id (c_stringFile, "s_67e4d556");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch75 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well, I'll be honest with you. Ever since your show, every hack that thinks he can dance a step has come here to perform. So we're all full on dance shows, but we still have a few spots open for a musical show if you're interested.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure, I can give it a try.
	if (response == "s_39aa9593")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK. You'll still need to audition though. Is that acceptable?
			string_id message = new string_id (c_stringFile, "s_70da1c6a");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, that's fine.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No way. I don't want to go through that again.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9739cb4c");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_4be62475");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, that's not really something I want to do.
	if (response == "s_9728f9e3")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. If you change your mind, I'll be here.
			string_id message = new string_id (c_stringFile, "s_1b58131a");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch76 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: OK. You'll still need to audition though. Is that acceptable?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, that's fine.
	if (response == "s_9739cb4c")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_1 (player, npc);

			//-- NPC: OK. Go ahead and make your preparations. You know the drill. Just come back and talk with me when you're ready to audition.
			string_id message = new string_id (c_stringFile, "s_14556b51");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No way. I don't want to go through that again.
	if (response == "s_4be62475")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I understand. Come back if you change your mind.
			string_id message = new string_id (c_stringFile, "s_56d2a81f");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch80 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Well, I'll be honest with you. Ever since your show, every hack that thinks he can play a note has come here to perform. So we're all full on musical shows, but we still have a few spots open for a dance show if you're interested.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure, I can give it a try.
	if (response == "s_39aa9593")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: OK. You'll still need to audition though. Is that acceptable?
			string_id message = new string_id (c_stringFile, "s_70da1c6a");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, that's fine.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No way. I don't want to go through that again.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9739cb4c");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_4be62475");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 76);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, that's not really something I want to do.
	if (response == "s_9728f9e3")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Alright. If you change your mind, I'll be here.
			string_id message = new string_id (c_stringFile, "s_1b58131a");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch83 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Hello there! You're a member of the entertainment industry are you not? I've got an offer for you if you're interested.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What is your offer?
	if (response == "s_499afb89")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'm looking for some new solo acts to perform here at the theater. I've been scouring the city trying to find fresh new talent to put on some live shows. Would you possibly be interested in doing a performance series?
			string_id message = new string_id (c_stringFile, "s_c08ff946");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Sure, that sounds like a lot of fun.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: How much will I get paid?
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: Nah, doesn't really sound like something I want to do.
			boolean hasResponse2 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_a2fae368");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_388438a6");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_1343b0ab");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 84);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Not right now, thanks.
	if (response == "s_2883b989")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Suit yourself.
			string_id message = new string_id (c_stringFile, "s_180");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch84 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I'm looking for some new solo acts to perform here at the theater. I've been scouring the city trying to find fresh new talent to put on some live shows. Would you possibly be interested in doing a performance series?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Sure, that sounds like a lot of fun.
	if (response == "s_a2fae368")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's not get ahead of ourselves. First, you must pass an audition. We can't just have anyone getting up on the stage now, can we?
			string_id message = new string_id (c_stringFile, "s_7b9543aa");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Audition? Uh, I'd rather not be judged.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9288900f");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64d20f97");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 85);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: How much will I get paid?
	if (response == "s_388438a6")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: That's all you youngsters are worried about these days, isn't it? Don't worry, you'll be compensated for your time.
			string_id message = new string_id (c_stringFile, "s_a2ce6dd9");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: OK, count me in.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Nah, it's not for me.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_8e4955d6");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_b85a558e");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 88);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Nah, doesn't really sound like something I want to do.
	if (response == "s_1343b0ab")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Suit yourself.
			string_id message = new string_id (c_stringFile, "s_177");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch85 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Let's not get ahead of ourselves. First, you must pass an audition. We can't just have anyone getting up on the stage now, can we?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I understand.
	if (response == "s_9288900f")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			quest_crowd_pleaser_manager_action_set_status_1 (player, npc);

			//-- NPC: Excellent. Make whatever preparations you feel are necessary, and then come back to me when you are ready to start the audition.
			string_id message = new string_id (c_stringFile, "s_705ff1a9");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Audition? Uh, I'd rather not be judged.
	if (response == "s_64d20f97")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Suit yourself.
			string_id message = new string_id (c_stringFile, "s_82b273a8");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int quest_crowd_pleaser_manager_handleBranch88 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: That's all you youngsters are worried about these days, isn't it? Don't worry, you'll be compensated for your time.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: OK, count me in.
	if (response == "s_8e4955d6")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Let's not get ahead of ourselves. First, you must pass an audition. We can't just have anyone getting up on the stage now, can we?
			string_id message = new string_id (c_stringFile, "s_7b9543aa");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: I understand.
			boolean hasResponse0 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Audition? Uh, I'd rather not be judged.
			boolean hasResponse1 = false;
			if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_9288900f");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_64d20f97");

				utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 85);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Nah, it's not for me.
	if (response == "s_b85a558e")
	{
		//-- [NOTE] 
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			//-- NPC: Suit yourself.
			string_id message = new string_id (c_stringFile, "s_174");
			utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

const string MUSIC_COMMAND					= "startMusic+";
const string DANCE_COMMAND					= "startDance+";

const string[] MUSIC_NAMES					= {"starwars1",
											   "rock",
											   "starwars2",
											   "folk",
											   "starwars3",
											   "ceremonial",
											   "ballad",
											   "waltz",
											   "jazz",
											   "virtuoso"};

const string[] DANCE_NAMES					= {"basic",
											   "rhythmic",
											   "basic2",
											   "rhythmic2",
											   "footloose",
											   //"formal",
											   "footloose2",
											   //"formal2",
											   "popular",
											   "poplock",
											   "popular2",
											   "poplock2",
											   //"lyrical",
											   "exotic",
											   "exotic2",
											   //"lyrical2",
											   "exotic3",
											   "exotic4"};
											   
trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.quest_crowd_pleaser_manager");

	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
    setCondition (self, CONDITION_INTERESTING);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);
	faceTo(self, player);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	clearCondition (self, CONDITION_INTERESTING);
	detachScript (self, "conversation.quest_crowd_pleaser_manager");

	return SCRIPT_CONTINUE;
}

string getRandomPerformanceName(obj_id player, string type) {

	string name = "";
	int c = 0;
	
	if(type == null || type.equals(""))
		type = "dance";

	do {

		if(type.equals("music")) {

			int r = rand(0, (MUSIC_NAMES.length - 1));
			string command = MUSIC_COMMAND + MUSIC_NAMES[r];

			if(hasCommand(player, command))
				return MUSIC_NAMES[r];

		} else if(type.equals("dance")) {

			int r = rand(0, (DANCE_NAMES.length - 1));
			string command = DANCE_COMMAND + DANCE_NAMES[r];

			if(hasCommand(player, command))
				return DANCE_NAMES[r];

		} else {

			return DANCE_NAMES[0];
		}

		c++;

	} while(c < 100);

	return DANCE_NAMES[0];
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_completed_both (player, npc))
	{
		quest_crowd_pleaser_manager_action_giveMissingRewards (player, npc);

		//-- NPC: Welcome back! I still can't tell you how impressed I am with your performances. You truly are a credit to the entertainment professions. Best of luck to you in the future, friend!
		string_id message = new string_id (c_stringFile, "s_e5438cc6");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!quest_crowd_pleaser_manager_condition_has_entertainer (player, npc))
	{
		//-- NPC: Only entertainers and crew should be backstage. What are you doing here?
		string_id message = new string_id (c_stringFile, "s_2a8b6bf");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_failed_audition (player, npc))
	{
		//-- NPC: Oh, you didn't pass the audition? That's too bad. We can set you up with another audition, but not until twenty-four hours have passed since your last audition. Come back then and we'll talk.
		string_id message = new string_id (c_stringFile, "s_3936bc63");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_failed_recently (player, npc))
	{
		//-- NPC: It looks like your previous show didn't go over so well. That's too bad. You can try the performance again, but not until twenty-four hours have passed since your last one. Come back then and we'll talk.
		string_id message = new string_id (c_stringFile, "s_aa18ac6");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_event_in_progress (player, npc))
	{
		//-- NPC: Too busy to talk right now. I'm very busy, sorry.
		string_id message = new string_id (c_stringFile, "s_d66dc712");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_21 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_completion (player, npc);

		//-- NPC: Amazing. Simply amazing. You truly are one of the best performers I've seen in a long time. Here's a bonus for doing so well. Also, one of our regular performers has offered to teach you a new act. Maybe you can use it at your next show.
		string_id message = new string_id (c_stringFile, "s_7223d3c0");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_19 (player, npc))
	{
		//-- NPC: Ah, you're here about your last show?
		string_id message = new string_id (c_stringFile, "s_16e98373");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, I am.
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Last show?
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Sorry, I'll come back later.
		boolean hasResponse2 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_36a4e374");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_55e428e8");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_326a697e");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 7);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_18 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_19 (player, npc);

		//-- NPC: Wow... this is fantastic! Everybody in town is talking about you! We'll have a sold out show for sure! Go make your preparations and come back whenever you're ready to start the performance!
		string_id message = new string_id (c_stringFile, "s_b5c6a62d");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_17 (player, npc))
	{
		//-- NPC: I'm hearing people talk about your upcoming show, but it's not enough. Go finish your promotional job, and then we'll discuss your performance.
		string_id message = new string_id (c_stringFile, "s_664ead2a");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_16 (player, npc))
	{
		//-- NPC: You're here about your next show aren't you? Sure, sure, I understand. You'll need to go out and do some more promotion before you get started with the next performance, though. Is that alright?
		string_id message = new string_id (c_stringFile, "s_ffa16d1d");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: That's fine. I don't mind doing the promotions.
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I don't really like doing the promotions.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: I don't have time for that stuff now.
		boolean hasResponse2 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_5a936e2e");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_2f3d57d6");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_1fe0d27c");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 19);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_15 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_16 (player, npc);

		//-- NPC: Wow, that was a great act! Really! Here, I'm supposed to give you an advance for your next performance. Go get some rest, and come see me whenever you want to talk about your next show.
		string_id message = new string_id (c_stringFile, "s_1a0fba4e");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_13 (player, npc))
	{
		//-- NPC: What? Oh, hello there. I'm sorry, it's recently become rather busy. What can I do for you?
		string_id message = new string_id (c_stringFile, "s_3cdabd0e");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: I'm here to talk about my next performance.
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Sorry. I'll come back later.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_1dc24a1");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_3ef23ade");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 29);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_12 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_13 (player, npc);

		//-- NPC: Great work! Really great work! I'm starting to hear a lot of people talk about you! I've got a feeling that this show is going to be fantastic.
		string_id message = new string_id (c_stringFile, "s_f29e46b6");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: When can we get started with the next show?
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_7b58a334");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 35);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_11 (player, npc))
	{
		//-- NPC: You haven't completed your promotional assignment have you? Come back when you're done and we'll talk about your next performance.
		string_id message = new string_id (c_stringFile, "s_3d244a46");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_10 (player, npc))
	{
		//-- NPC: Oh yes. You're ready to get going for your next show. Let's not get too ahead of ourselves, though. You need to go out and do some more promotion before the next performance.
		string_id message = new string_id (c_stringFile, "s_ed9c9f8d");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: More promotion?
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I see. I'm not ready for that yet.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_847c3be4");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_6b02387e");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 38);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_9 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_10 (player, npc);

		//-- NPC: You've completed your first show! Congratulations, the audience loved you. Let me give you another advance for your next performance. Come back and see me again when you're ready to talk about your next show.
		string_id message = new string_id (c_stringFile, "s_cad51774");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_7 (player, npc))
	{
		//-- NPC: Ready to start the show, are you? Don't worry if you're nervous. Everybody gets like that the first time they're on stage.
		string_id message = new string_id (c_stringFile, "s_b5131941");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, I'm ready. Let's get this show on the road.
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'm not nervous.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: No, I'm not quite ready yet.
		boolean hasResponse2 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_1377703a");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_4365b273");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_99");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 46);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_6 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_7 (player, npc);

		//-- NPC: Excellent work. I'm starting to hear the buzz about your performance! We should be able to put on the show whenever you're ready. Go make your preparations, then come speak with me again when you want to begin.
		string_id message = new string_id (c_stringFile, "s_2b8d253d");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_5 (player, npc))
	{
		//-- NPC: Oh, you're back. But I don't think you've finished your promotional campaign have you? Come back when you're done and we'll talk about your show.
		string_id message = new string_id (c_stringFile, "s_810fffd0");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_4 (player, npc))
	{
		//-- NPC: Back already, huh? I don't blame you for wanting to get started.
		string_id message = new string_id (c_stringFile, "s_937f2001");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: OK, so what do we do next?
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: I'm not quite ready yet.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_694f2644");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_414898b2");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 54);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_3 (player, npc))
	{
		quest_crowd_pleaser_manager_action_set_status_4 (player, npc);

		//-- NPC: Hey! I hear that you passed the audition! That's fantastic. Here, let me give you a payment in advance for your up-coming performances. You deserve a break now, though. Come back later and we'll discuss what needs to be done next.
		string_id message = new string_id (c_stringFile, "s_857ede28");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_status_1 (player, npc))
	{
		//-- NPC: You're here for an audition, yes? Are you ready to get started now?
		string_id message = new string_id (c_stringFile, "s_472f2a5e");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Yes, I'm ready.
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: No, not quite yet.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_4a1d2431");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_f3d46f0b");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 64);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition_has_completed_one (player, npc))
	{
		//-- NPC: Oh, hello! Welcome back, friend. Are you looking to participate in another performance?
		string_id message = new string_id (c_stringFile, "s_95037778");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Is that possible?
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: No, not really.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_dda95847");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_c5a66e82");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 74);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
	{
		//-- NPC: Hello there! You're a member of the entertainment industry are you not? I've got an offer for you if you're interested.
		string_id message = new string_id (c_stringFile, "s_37b822c1");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: What is your offer?
		boolean hasResponse0 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Not right now, thanks.
		boolean hasResponse1 = false;
		if (quest_crowd_pleaser_manager_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_499afb89");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_2883b989");

			utils.setScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId", 83);

			npcStartConversation (player, npc, "quest_crowd_pleaser_manager", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "quest_crowd_pleaser_manager")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

	if (branchId == 7 && quest_crowd_pleaser_manager_handleBranch7 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && quest_crowd_pleaser_manager_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && quest_crowd_pleaser_manager_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && quest_crowd_pleaser_manager_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 19 && quest_crowd_pleaser_manager_handleBranch19 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 20 && quest_crowd_pleaser_manager_handleBranch20 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 21 && quest_crowd_pleaser_manager_handleBranch21 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 25 && quest_crowd_pleaser_manager_handleBranch25 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 29 && quest_crowd_pleaser_manager_handleBranch29 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 30 && quest_crowd_pleaser_manager_handleBranch30 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 35 && quest_crowd_pleaser_manager_handleBranch35 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 38 && quest_crowd_pleaser_manager_handleBranch38 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 39 && quest_crowd_pleaser_manager_handleBranch39 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 40 && quest_crowd_pleaser_manager_handleBranch40 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 46 && quest_crowd_pleaser_manager_handleBranch46 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 49 && quest_crowd_pleaser_manager_handleBranch49 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 54 && quest_crowd_pleaser_manager_handleBranch54 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 55 && quest_crowd_pleaser_manager_handleBranch55 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 56 && quest_crowd_pleaser_manager_handleBranch56 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 57 && quest_crowd_pleaser_manager_handleBranch57 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 64 && quest_crowd_pleaser_manager_handleBranch64 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 65 && quest_crowd_pleaser_manager_handleBranch65 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 74 && quest_crowd_pleaser_manager_handleBranch74 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 75 && quest_crowd_pleaser_manager_handleBranch75 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 76 && quest_crowd_pleaser_manager_handleBranch76 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 80 && quest_crowd_pleaser_manager_handleBranch80 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 83 && quest_crowd_pleaser_manager_handleBranch83 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 84 && quest_crowd_pleaser_manager_handleBranch84 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 85 && quest_crowd_pleaser_manager_handleBranch85 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 88 && quest_crowd_pleaser_manager_handleBranch88 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.quest_crowd_pleaser_manager.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

