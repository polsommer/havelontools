// ======================================================================
//
// station_ord_mantell_dungeon.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.36 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.groundquests;
include library.npe;
include library.space_combat;
include library.space_crafting;
include library.space_transition;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/station_ord_mantell_dungeon";

// ======================================================================
// Script Conditions
// ======================================================================

boolean station_ord_mantell_dungeon_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean station_ord_mantell_dungeon_condition_isTooFar (obj_id player, obj_id npc)
{
	space_combat.playCombatTauntSound( player );
	location stationLoc = getLocation(npc);
	location playerLoc = getLocation(space_transition.getContainingShip(player));
	return ( getDistance(stationLoc, playerLoc) > space_transition.STATION_COMM_MAX_DISTANCE );
}

// ----------------------------------------------------------------------

boolean station_ord_mantell_dungeon_condition_canAfford100 (obj_id player, obj_id npc)
{
	return space_crafting.canAffordShipRepairs(player, npc, 1.0f);
}

// ----------------------------------------------------------------------

boolean station_ord_mantell_dungeon_condition_canAfford25 (obj_id player, obj_id npc)
{
		return ( space_crafting.canAffordShipRepairs(player, npc, .25f) && space_crafting.isDamaged( player ) );
}

// ----------------------------------------------------------------------

boolean station_ord_mantell_dungeon_condition_needsRepairs (obj_id player, obj_id npc)
{
	return space_crafting.isDamaged( player );
}

// ======================================================================
// Script Actions
// ======================================================================

void station_ord_mantell_dungeon_action_land (obj_id player, obj_id npc)
{	
	location stationLoc = getLocation(npc);
	location playerLoc = getLocation(space_transition.getContainingShip(player));
	float fltDistance = getDistance(stationLoc, playerLoc);
	if (fltDistance > 350.0f)
	{
		string_id strSpam = new string_id("space/space_interaction", "too_far");
		sendSystemMessage(player, strSpam);

	}
	else
	{
		npe.movePlayerFromOrdMantellSpaceToOrdMantellDungeon(player);
		groundquests.sendSignal(player, "leaving_station");

	}
}

// ----------------------------------------------------------------------

void station_ord_mantell_dungeon_action_fix100 (obj_id player, obj_id npc)
{
	space_crafting.doStationToShipRepairs(player, npc, 1.0f);
}

// ----------------------------------------------------------------------

void station_ord_mantell_dungeon_action_fix25 (obj_id player, obj_id npc)
{
	space_crafting.doStationToShipRepairs(player, npc, .25f);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

int station_ord_mantell_dungeon_tokenDI_get100FixCost (obj_id player, obj_id npc)
{
	return space_crafting.getStationRepairCost(player, npc, 1.0f);
}

// ----------------------------------------------------------------------

int station_ord_mantell_dungeon_tokenDI_get25FixCost (obj_id player, obj_id npc)
{
	return space_crafting.getStationRepairCost(player, npc, .25f);
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int station_ord_mantell_dungeon_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Incoming vessel: please state your business at Station Gamma.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Requesting permission to land.
	if (response == "s_8")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			station_ord_mantell_dungeon_action_land (player, npc);

			//-- NPC: Permission granted.  Pad 1 is clear for your arrival.
			string_id message = new string_id (c_stringFile, "s_10");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Requesting repairs.
	if (response == "s_13")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: Roger, %TU.  We are a fully functional station and can provide you with whatever level of repairs that are necessary.  Please indicate your status.
			string_id message = new string_id (c_stringFile, "s_14");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Repair all of the damage.
			boolean hasResponse0 = false;
			if (station_ord_mantell_dungeon_condition_canAfford100 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: Repair a little bit of damage.
			boolean hasResponse1 = false;
			if (station_ord_mantell_dungeon_condition_canAfford25 (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			//-- PLAYER: I can't afford the repair charges.
			boolean hasResponse2 = false;
			if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse2 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_16");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_28");

				if (hasResponse2)
					responses [responseIndex++] = new string_id (c_stringFile, "s_40");

				utils.setScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId", 4);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int station_ord_mantell_dungeon_handleBranch4 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Roger, %TU.  We are a fully functional station and can provide you with whatever level of repairs that are necessary.  Please indicate your status.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Repair all of the damage.
	if (response == "s_16")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: A complete repair of your ship will cost %DI credits, %TU.  Are you sure?
			string_id message = new string_id (c_stringFile, "s_18");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, please.
			boolean hasResponse0 = false;
			if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, thank you.
			boolean hasResponse1 = false;
			if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_20");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_24");

				utils.setScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId", 5);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = station_ord_mantell_dungeon_tokenDI_get100FixCost (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = station_ord_mantell_dungeon_tokenDI_get100FixCost (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Repair a little bit of damage.
	if (response == "s_28")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: A complete repair of your ship will cost %DI credits, %TU.  Are you sure?
			string_id message = new string_id (c_stringFile, "s_30");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes, please.
			boolean hasResponse0 = false;
			if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			//-- PLAYER: No, thank you.
			boolean hasResponse1 = false;
			if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse1 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_32");

				if (hasResponse1)
					responses [responseIndex++] = new string_id (c_stringFile, "s_36");

				utils.setScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId", 8);

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = station_ord_mantell_dungeon_tokenDI_get25FixCost (player, npc);

				npcSpeak (player, pp);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

				prose_package pp = new prose_package ();
				pp.stringId = message;
				pp.actor.set (player);
				pp.target.set (npc);
				pp.digitInteger = station_ord_mantell_dungeon_tokenDI_get25FixCost (player, npc);

				npcEndConversationWithMessage (player, pp);
			}

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: I can't afford the repair charges.
	if (response == "s_40")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: I'm sorry. I wish we could help you.
			string_id message = new string_id (c_stringFile, "s_42");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int station_ord_mantell_dungeon_handleBranch5 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: A complete repair of your ship will cost %DI credits, %TU.  Are you sure?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, please.
	if (response == "s_20")
	{
		station_ord_mantell_dungeon_action_fix100 (player, npc);

		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: There you are. Good bye!
			string_id message = new string_id (c_stringFile, "s_22");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, thank you.
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: Good luck out there!
			string_id message = new string_id (c_stringFile, "s_26");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int station_ord_mantell_dungeon_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: A complete repair of your ship will cost %DI credits, %TU.  Are you sure?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes, please.
	if (response == "s_32")
	{
		station_ord_mantell_dungeon_action_fix25 (player, npc);

		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: There you are. Good bye!
			string_id message = new string_id (c_stringFile, "s_34");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: No, thank you.
	if (response == "s_36")
	{
		//-- [NOTE] 
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			//-- NPC: Good luck out there!
			string_id message = new string_id (c_stringFile, "s_38");
			utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "conversation.station_ord_mantell_dungeon");

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.station_ord_mantell_dungeon");

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (station_ord_mantell_dungeon_condition_isTooFar (player, npc))
	{
		//-- NPC: You are out of range of our instruments.  Please adjust your position accordingly.
		string_id message = new string_id (c_stringFile, "s_5");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
	{
		//-- NPC: Incoming vessel: please state your business at Station Gamma.
		string_id message = new string_id (c_stringFile, "s_6");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Requesting permission to land.
		boolean hasResponse0 = false;
		if (station_ord_mantell_dungeon_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Requesting repairs.
		boolean hasResponse1 = false;
		if (station_ord_mantell_dungeon_condition_needsRepairs (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_8");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_13");

			utils.setScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId", 2);

			npcStartConversation (player, npc, "station_ord_mantell_dungeon", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "station_ord_mantell_dungeon")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

	if (branchId == 2 && station_ord_mantell_dungeon_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 4 && station_ord_mantell_dungeon_handleBranch4 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 5 && station_ord_mantell_dungeon_handleBranch5 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && station_ord_mantell_dungeon_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.station_ord_mantell_dungeon.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

