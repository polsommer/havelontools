// ======================================================================
//
// outbreak_defense_mika_horn_alpha.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.conversation;
include library.features;
include library.groundquests;
include library.space_quest;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/outbreak_defense_mika_horn_alpha";

// ======================================================================
// Script Conditions
// ======================================================================

boolean outbreak_defense_mika_horn_alpha_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_hasCompletedDefenseQuest (obj_id player, obj_id npc)
{
	return (groundquests.hasCompletedQuest(player, "camp_alpha_defense")
	|| groundquests.hasCompletedQuest(player, "camp_alpha_defense_02")
	|| groundquests.hasCompletedQuest(player, "camp_alpha_defense_03")
	|| groundquests.hasCompletedQuest(player, "camp_alpha_defense_04")
	&& outbreak_defense_mika_horn_alpha_condition_hasAvailableGuardPosts(player,npc));
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_isWaitingForRewardSignal (obj_id player, obj_id npc)
{
	return groundquests.isTaskActive(player, "camp_alpha_defense", "collectRewardAlpha")
	|| groundquests.isTaskActive(player, "camp_alpha_defense_02", "collectRewardAlpha") 
	|| groundquests.isTaskActive(player, "camp_alpha_defense_03", "collectRewardAlpha")
	|| groundquests.isTaskActive(player, "camp_alpha_defense_04", "collectRewardAlpha");
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_hasNeverSpoken (obj_id player, obj_id npc)
{

	return (hasCompletedCollectionSlot(player, "exp_icon_deathtroopers_camp_alpha")
	&& !groundquests.isQuestActiveOrComplete(player, "camp_alpha_defense")
	&& !groundquests.isQuestActiveOrComplete(player, "camp_alpha_defense_02")
	&& !groundquests.isQuestActiveOrComplete(player, "camp_alpha_defense_03")
	&& !groundquests.isQuestActiveOrComplete(player, "camp_alpha_defense_04")
	&& outbreak_defense_mika_horn_alpha_condition_hasAvailableGuardPosts(player,npc));

}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_isGodPlayerTester (obj_id player, obj_id npc)
{
	return isGod(player);
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_levelTooHigh (obj_id player, obj_id npc)
{
	return getLevel(player) >= 15;
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_hasDefenseQuest (obj_id player, obj_id npc)
{
	return (groundquests.isQuestActive(player, "camp_alpha_defense")
	|| groundquests.isQuestActive(player, "camp_alpha_defense_02")
	|| groundquests.isQuestActive(player, "camp_alpha_defense_03")
	|| groundquests.isQuestActive(player, "camp_alpha_defense_04"));
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_noAntiVirus (obj_id player, obj_id npc)
{
	return (!groundquests.hasCompletedQuest(player, "outbreak_quest_01_imperial")
	&& !groundquests.hasCompletedQuest(player, "outbreak_quest_01_rebel")
	&& !groundquests.hasCompletedQuest(player, "outbreak_quest_01_neutral"));
}

// ----------------------------------------------------------------------

boolean outbreak_defense_mika_horn_alpha_condition_hasAvailableGuardPosts (obj_id player, obj_id npc)
{
	//SEE TRIGGERS FOR THE REST OF THE CODE
	if(!utils.hasScriptVar(npc, "guardPostList"))
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.hasAvailableGuardPosts() the npc, "+npc+" has no guardPostList script var.");	
		return false;
	}
	obj_id[] guardPostList = utils.getObjIdArrayScriptVar(npc, "guardPostList");
	if(guardPostList == null || guardPostList.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.hasAvailableGuardPosts() the npc, "+npc+" has an invalid guardPostList script var.");	
		return false;		
	}
	
	for(int i = 0; i < guardPostList.length; i++)
	{
		if(!isValidId(guardPostList[i]) || !exists(guardPostList[i]))
			continue;
		if(!utils.hasScriptVar(guardPostList[i], "occupied"))
			return true;
	}	
	
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void outbreak_defense_mika_horn_alpha_action_giveQuest (obj_id player, obj_id npc)
{
	if(groundquests.hasCompletedQuest(player, "camp_alpha_defense"))
	{
		groundquests.clearQuest(player, "camp_alpha_defense"); 
	}
	if(groundquests.hasCompletedQuest(player, "camp_alpha_defense_02"))
	{	
		groundquests.clearQuest(player, "camp_alpha_defense_02"); 	
	}	
	if(groundquests.hasCompletedQuest(player, "camp_alpha_defense_03"))
	{
		groundquests.clearQuest(player, "camp_alpha_defense_03"); 	
	}
	if(groundquests.hasCompletedQuest(player, "camp_alpha_defense_04"))
	{
		groundquests.clearQuest(player, "camp_alpha_defense_04"); 
	}
	//SEE TRIGGERS FOR THE REST OF THE CODE
	if(!utils.hasScriptVar(npc, "guardPostList"))
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.giveQuest() the npc, "+npc+" has no guardPostList script var.");	
	}
	else
	{
		obj_id[] guardPostList = utils.getObjIdArrayScriptVar(npc, "guardPostList");
		if(guardPostList == null || guardPostList.length <= 0)
		{
			CustomerServiceLog("outbreak_themepark", "camp_defense.giveQuest() the npc, "+npc+" has an invalid guardPostList script var.");		
		}
		else
		{
		
			for(int i = 0; i < guardPostList.length; i++)
			{
				if(!isValidId(guardPostList[i]) || !exists(guardPostList[i]))
					continue;
				if(!utils.hasScriptVar(guardPostList[i], "occupied"))
				{
					string questName = getStringObjVar(guardPostList[i], "questObject");
					if(questName == null || questName.length() <=0)
					{
						CustomerServiceLog("outbreak_themepark", "camp_defense.giveQuest() the npc, "+npc+" has an invalid guardPostList script var.");			
					}
					else
					{
						CustomerServiceLog("outbreak_themepark", "camp_defense.giveQuest() the npc, "+npc+" is granting the player: "+player+" has an invalid guardPostList script var.");	
						groundquests.grantQuest(player, questName);
					}
				}
			}
		}
	}
}

// ----------------------------------------------------------------------

void outbreak_defense_mika_horn_alpha_action_sendQuestSignal (obj_id player, obj_id npc)
{
	groundquests.sendSignal(player, "hasCompletedAlpha"); 
	utils.removeScriptVar(player, "givenMoreDefenseTime");
	
	if(!hasCompletedCollectionSlot(player, "defend_camp_alpha"))
	{
			modifyCollectionSlotValue(player, "defend_camp_alpha", 1);
	}
}

// ----------------------------------------------------------------------

void outbreak_defense_mika_horn_alpha_action_action0001 (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "camp_alpha_defense");
}

// ----------------------------------------------------------------------

void outbreak_defense_mika_horn_alpha_action_action0002 (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "camp_alpha_defense_02");
}

// ----------------------------------------------------------------------

void outbreak_defense_mika_horn_alpha_action_action0003 (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "camp_alpha_defense_03");
}

// ----------------------------------------------------------------------

void outbreak_defense_mika_horn_alpha_action_action0004 (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, "camp_alpha_defense_04");
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int outbreak_defense_mika_horn_alpha_handleBranch3 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Godmode Quests

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Location 1
	if (response == "s_22")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_action0001 (player, npc);

			//-- NPC: Quest Given
			string_id message = new string_id (c_stringFile, "s_28");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Location 2
	if (response == "s_23")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_action0002 (player, npc);

			//-- NPC: Quest Given
			string_id message = new string_id (c_stringFile, "s_29");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Location 3
	if (response == "s_26")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_action0003 (player, npc);

			//-- NPC: Quest Given
			string_id message = new string_id (c_stringFile, "s_30");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Location 4
	if (response == "s_27")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_action0004 (player, npc);

			//-- NPC: Quest Given
			string_id message = new string_id (c_stringFile, "s_31");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int outbreak_defense_mika_horn_alpha_handleBranch8 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I was just thinking about how well you did last time. Think you can do it again?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Same amount of credits?
	if (response == "s_62")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			//-- NPC: Yep. Its worth it to me if it is worth it to you. Ready now?
			string_id message = new string_id (c_stringFile, "s_63");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Yes.
			boolean hasResponse0 = false;
			if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_24");

				utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 9);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int outbreak_defense_mika_horn_alpha_handleBranch9 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Yep. Its worth it to me if it is worth it to you. Ready now?

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Yes.
	if (response == "s_24")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_giveQuest (player, npc);

			//-- NPC: Okay, you know the deal. Go to the guard post and keep your eyes open.
			string_id message = new string_id (c_stringFile, "s_32");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int outbreak_defense_mika_horn_alpha_handleBranch12 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Would you mind helping me out?  I really need a forward watch guard to keep the undead away from the entrance.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: What do I do?
	if (response == "s_37")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			//-- NPC: All you need to do is stand guard outside the walls at the forward watch and warn us of mass attacks. It should be pretty easy. I haven't seen any mass attacks for a few hours now.
			string_id message = new string_id (c_stringFile, "s_39");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Uh mass attacks?
			boolean hasResponse0 = false;
			if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_41");

				utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 13);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int outbreak_defense_mika_horn_alpha_handleBranch13 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: All you need to do is stand guard outside the walls at the forward watch and warn us of mass attacks. It should be pretty easy. I haven't seen any mass attacks for a few hours now.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Uh mass attacks?
	if (response == "s_41")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			//-- NPC: Don't worry, you'll be fine. I'll tell you what; I'll give you a nice pile of credits if you do this.
			string_id message = new string_id (c_stringFile, "s_43");
			int numberOfResponses = 0;

			boolean hasResponse = false;

			//-- PLAYER: Alright. Where do I go?
			boolean hasResponse0 = false;
			if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
			{
				++numberOfResponses;
				hasResponse = true;
				hasResponse0 = true;
			}

			if (hasResponse)
			{
				int responseIndex = 0;
				string_id responses [] = new string_id [numberOfResponses];

				if (hasResponse0)
					responses [responseIndex++] = new string_id (c_stringFile, "s_49");

				utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 14);

				npcSpeak (player, message);
				npcSetConversationResponses (player, responses);
			}
			else
			{
				utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

				npcEndConversationWithMessage (player, message);
			}

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

int outbreak_defense_mika_horn_alpha_handleBranch14 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: Don't worry, you'll be fine. I'll tell you what; I'll give you a nice pile of credits if you do this.

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Alright. Where do I go?
	if (response == "s_49")
	{
		//-- [NOTE] 
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			outbreak_defense_mika_horn_alpha_action_giveQuest (player, npc);

			//-- NPC: Go to the waypoint I just gave you and keep your eyes peeled. Any undead that come your way...well kill them, again.
			string_id message = new string_id (c_stringFile, "s_77");
			utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	messageTo(self, "findGuardPosts", null, 5, false);	
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	messageTo(self, "findGuardPosts", null, 5, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

messageHandler findGuardPosts()
{
	obj_id[] guardPostList = getAllObjectsWithObjVar(getLocation(self), 200, "questObject");
	if(guardPostList == null || guardPostList.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" failed to find any valid guard post objects within 100 of "+getLocation(self));
		return SCRIPT_CONTINUE;
	}

	resizeable obj_id[] guardPostsFound = null;
	for(int i = 0; i < guardPostList.length; i++)
	{
		string spawnerQuestNameMatch = getStringObjVar(guardPostList[i], "questObject");
		if(spawnerQuestNameMatch == null || spawnerQuestNameMatch.length() <= 0)
		{
			CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" found a guard post object that did not have a quest string. Guard Post: "+guardPostList[i]);
			continue;
		}
		if(!spawnerQuestNameMatch.startsWith("camp_alpha_defense"))
			continue;
			
		CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" found a guard post object. Adding the object to the list. Guard Post: "+guardPostList[i]);
		utils.addElement(guardPostsFound, guardPostList[i]);
	}
	
	CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" loop for all the available guard posts has finished. Length of list: "+guardPostList.length);		
	if(guardPostList.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" had a problem finding guard posts.");	
		return SCRIPT_CONTINUE;
	}
	if(guardPostList.length != 4)
	{
		CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" found less or greater than 4 guard posts!");
	}
	
	utils.setScriptVar(self, "guardPostList", guardPostList);
	CustomerServiceLog("outbreak_themepark", "camp_defense.findGuardPosts() the npc, "+self+" has a list of guard posts as scriptvar.");
	return SCRIPT_CONTINUE;
	
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_noAntiVirus (player, npc))
	{
		doAnimationAction (npc, "wave_on_dismissing");

		//-- NPC: You don't have the anti-virus yet?? Get away from me...go see Doctor Cody. She can help you out.
		string_id message = new string_id (c_stringFile, "s_69");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_isWaitingForRewardSignal (player, npc))
	{
		outbreak_defense_mika_horn_alpha_action_sendQuestSignal (player, npc);

		//-- NPC: Great job soldier. Thanks for helping me out. Here is your reward.
		string_id message = new string_id (c_stringFile, "s_64");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_isGodPlayerTester (player, npc))
	{
		//-- NPC: Godmode Quests
		string_id message = new string_id (c_stringFile, "s_21");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Location 1
		boolean hasResponse0 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		//-- PLAYER: Location 2
		boolean hasResponse1 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse1 = true;
		}

		//-- PLAYER: Location 3
		boolean hasResponse2 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse2 = true;
		}

		//-- PLAYER: Location 4
		boolean hasResponse3 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse3 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_22");

			if (hasResponse1)
				responses [responseIndex++] = new string_id (c_stringFile, "s_23");

			if (hasResponse2)
				responses [responseIndex++] = new string_id (c_stringFile, "s_26");

			if (hasResponse3)
				responses [responseIndex++] = new string_id (c_stringFile, "s_27");

			utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 3);

			npcStartConversation (player, npc, "outbreak_defense_mika_horn_alpha", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_hasCompletedDefenseQuest (player, npc))
	{
		//-- NPC: I was just thinking about how well you did last time. Think you can do it again?
		string_id message = new string_id (c_stringFile, "s_55");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Same amount of credits?
		boolean hasResponse0 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_62");

			utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 8);

			npcStartConversation (player, npc, "outbreak_defense_mika_horn_alpha", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_hasDefenseQuest (player, npc))
	{
		//-- NPC: Get to your post soldier!
		string_id message = new string_id (c_stringFile, "s_47");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition_hasNeverSpoken (player, npc))
	{
		doAnimationAction (npc, "beckon");

		//-- NPC: Would you mind helping me out?  I really need a forward watch guard to keep the undead away from the entrance.
		string_id message = new string_id (c_stringFile, "s_35");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: What do I do?
		boolean hasResponse0 = false;
		if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_37");

			utils.setScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId", 12);

			npcStartConversation (player, npc, "outbreak_defense_mika_horn_alpha", message, responses);
		}
		else
		{
			chat.chat (npc, player, message);
		}

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (!outbreak_defense_mika_horn_alpha_condition_hasAvailableGuardPosts (player, npc))
	{
		//-- NPC: I have enough people helping out at the moment. Maybe come back later.
		string_id message = new string_id (c_stringFile, "s_44");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (outbreak_defense_mika_horn_alpha_condition__defaultCondition (player, npc))
	{
		//-- NPC: I'll be standing here for another 12 hours. There are a lot of people depending on me.
		string_id message = new string_id (c_stringFile, "s_90");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "outbreak_defense_mika_horn_alpha")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

	if (branchId == 3 && outbreak_defense_mika_horn_alpha_handleBranch3 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 8 && outbreak_defense_mika_horn_alpha_handleBranch8 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 9 && outbreak_defense_mika_horn_alpha_handleBranch9 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 12 && outbreak_defense_mika_horn_alpha_handleBranch12 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 13 && outbreak_defense_mika_horn_alpha_handleBranch13 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	if (branchId == 14 && outbreak_defense_mika_horn_alpha_handleBranch14 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.outbreak_defense_mika_horn_alpha.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

