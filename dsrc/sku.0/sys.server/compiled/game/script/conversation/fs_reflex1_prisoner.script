// ======================================================================
//
// fs_reflex1_prisoner.script
// Copyright 2003, Sony Online Entertainment
// All Rights Reserved.
//
// DO NOT EDIT THIS AUTO-GENERATED FILE.  PLEASE USE THE CONVERATION EDITOR!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.chat;
include library.factions;
include library.quests;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/fs_reflex1_prisoner";

// ======================================================================
// Script Conditions
// ======================================================================

boolean fs_reflex1_prisoner_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean fs_reflex1_prisoner_condition_combatNotReady (obj_id player, obj_id npc)
{
	if(ai_lib.isInCombat(npc))
		return true;
		
	if(!hasObjVar(npc, "player"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean fs_reflex1_prisoner_condition_notCorrectPlayer (obj_id player, obj_id npc)
{
	if(hasObjVar(npc, "player")) {
	
		obj_id target = getObjIdObjVar(npc, "player");
		
		if(target != player)
			return true;
			
	} else {
	
		return true;
	}
	
	return false;
}

// ----------------------------------------------------------------------

boolean fs_reflex1_prisoner_condition_isSafe (obj_id player, obj_id npc)
{
	if(hasObjVar(npc, "safe"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean fs_reflex1_prisoner_condition_isInProgress (obj_id player, obj_id npc)
{
	if(hasObjVar(npc, "in_progress"))
		return true;
		
	return false;
}

// ----------------------------------------------------------------------

boolean fs_reflex1_prisoner_condition_hasFailed (obj_id player, obj_id npc)
{
	if(hasObjVar(player, "quest.fs_reflex1.failed"))
		return true;
		
	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void fs_reflex1_prisoner_action_complete_quest (obj_id player, obj_id npc)
{
	setInvulnerable(npc, false);
	
	setObjVar(player, "quest.fs_reflex_rescue_quest_03.target", npc);
	setObjVar(player, "quest.fs_reflex_rescue_quest_04.parameter", 96.0f);
	
	quests.complete("fs_reflex_rescue_quest_02", player, true);
	
	setObjVar(npc, "in_progress", 1);
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

// ======================================================================
// Script %DI Tokens
// ======================================================================

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isMob (self)) || (isPlayer (self)))
		detachScript(self, "npc.conversation.fs_reflex1_prisoner");

	factions.setFaction(self, "fs_villager", false);
	
	setInvulnerable(self, true);
	
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	factions.setFaction(self, "fs_villager", false);
	
	setInvulnerable(self, true);

	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "npc.conversation.fs_reflex1_prisoner");

	return SCRIPT_CONTINUE;
}

messageHandler handleTaskDestroyOnArrival() {

	destroyObject(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler handleTaskArrived() {

	setObjVar(self, "safe", 1);

	return SCRIPT_CONTINUE;
}

messageHandler handleSetupPrisoner() {

	obj_id player = params.getObjId("player");
	
	setObjVar(self, "player", player);
	
	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	if (ai_lib.isInCombat (self) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition_notCorrectPlayer (player, self))
	{
		//-- NPC: I don't think that you're able to help me.
		string_id message = new string_id (c_stringFile, "s_e4480cdc");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition_isSafe (player, self))
	{
		//-- NPC: Thank you so much for rescuing me!
		string_id message = new string_id (c_stringFile, "s_1150de7c");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition_isInProgress (player, self))
	{
		//-- NPC: Let's hurry up and get back to the village!
		string_id message = new string_id (c_stringFile, "s_e9ddb716");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition_hasFailed (player, self))
	{
		//-- NPC: I don't think that you're able to help me anymore.
		string_id message = new string_id (c_stringFile, "s_780bc309");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition_combatNotReady (player, self))
	{
		//-- NPC: Not now! Give me a hand here!
		string_id message = new string_id (c_stringFile, "s_f77ac89f");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (fs_reflex1_prisoner_condition__defaultCondition (player, self))
	{
		fs_reflex1_prisoner_action_complete_quest (player, self);

		//-- NPC: Thank you so much for coming after me. Let's get out of here!
		string_id message = new string_id (c_stringFile, "s_2a6f5720");
		chat.chat (self, message);

		return SCRIPT_CONTINUE;
	}

	chat.chat (self, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "fs_reflex1_prisoner")
		return SCRIPT_CONTINUE;

	int branchId = getIntObjVar (player, "conversation.fs_reflex1_prisoner.branchId");

	chat.chat (self, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	removeObjVar (player, "conversation.fs_reflex1_prisoner.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

