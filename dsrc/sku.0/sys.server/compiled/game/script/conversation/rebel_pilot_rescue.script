// ======================================================================
//
// rebel_pilot_rescue.script
// Copyright 2004, Sony Online Entertainment
// All Rights Reserved.
//
// Created with SwgConversationEditor 1.37 - DO NOT EDIT THIS AUTO-GENERATED FILE!
//
// ======================================================================

// ======================================================================
// Library Includes
// ======================================================================

include library.ai_lib;
include library.badge;
include library.buff;
include library.chat;
include library.collection;
include library.conversation;
include library.create;
include library.factions;
include library.groundquests;
include library.holiday;
include library.static_item;
include library.utils;

// ======================================================================
// Script Constants
// ======================================================================

string c_stringFile = "conversation/rebel_pilot_rescue";

// ======================================================================
// Script Conditions
// ======================================================================

boolean rebel_pilot_rescue_condition__defaultCondition (obj_id player, obj_id npc)
{
	return true;
}

// ----------------------------------------------------------------------

boolean rebel_pilot_rescue_condition_hasTheMisionActiveAndIsMyRescuer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	if(!hasObjVar(npc, "rescuer") || !hasObjVar(npc, "rescuerQuest"))
	{
		return false;
	}
	
	obj_id rescuer = getObjIdObjVar(npc, "rescuer");
	if(!isValidId(rescuer) || !exists(rescuer))
	{
		return false;
	}

	if(rescuer != player)
	{
		return false;
	}
	
	string activeQuest = getStringObjVar(npc, "rescuerQuest");
	if(activeQuest == null || activeQuest.length() <= 0)
	{
		return false;
	}
	
	if(!groundquests.isQuestActive(player, activeQuest))
	{
		return false;
	}
	
	return true;
}

// ----------------------------------------------------------------------

boolean rebel_pilot_rescue_condition_isNotMyRescuer (obj_id player, obj_id npc)
{
	faceTo(npc, player);
	if(!hasObjVar(npc, "rescuer") || !hasObjVar(npc, "rescuerQuest"))
	{
		return true;
	}
	
	obj_id rescuer = getObjIdObjVar(npc, "rescuer");
	if(!isValidId(rescuer) || !exists(rescuer))
	{
		return true;
	}

	if(rescuer != player)
	{
		return true;
	}

	return false;
}

// ======================================================================
// Script Actions
// ======================================================================

void rebel_pilot_rescue_action_changeIntoDisguise (obj_id player, obj_id npc)
{
	groundquests.grantQuest(player, holiday.EMPIREDAYQUEST_REB_COMBAT_01); 
}

// ======================================================================
// Script %TO Tokens
// ======================================================================

string rebel_pilot_rescue_tokenTO_timeLeftRecruitment (obj_id player, obj_id npc)
{
	string returnString = holiday.getTimeRemainingBeforeLockoutRemoved(player, holiday.EMPIRE_DAY_RECRUITMENT_TIMESTAMP);
	if(returnString == null || returnString.equals(""))
		return "might have to contact Customer Service. I can't seem to get any time data off your character.";
	return returnString;
}

// ----------------------------------------------------------------------

string rebel_pilot_rescue_tokenTO_timeLeftPropaganda (obj_id player, obj_id npc)
{
	string returnString = holiday.getTimeRemainingBeforeLockoutRemoved(player, holiday.EMPIRE_DAY_PROPAGANDA_TIMESTAMP);
	if(returnString == null || returnString.equals(""))
		return "might have to contact Customer Service. I can't seem to get any time data off your character.";
	return returnString;
}

// ======================================================================
// Script %DI Tokens
// ======================================================================

int rebel_pilot_rescue_tokenDI_notUsed (obj_id player, obj_id npc)
{
	return 0;
}

// ======================================================================
// Script %DF Tokens
// ======================================================================

// ======================================================================
// handleBranch<n> Functions 
// ======================================================================

int rebel_pilot_rescue_handleBranch2 (obj_id player, obj_id npc, string_id response)
{
	//-- [BRANCH NOTE] 
	//-- NPC: I sure am glad to see you, %TU!

	//-- [RESPONSE NOTE] 
	//-- PLAYER: Here is your disguise.
	if (response == "s_79")
	{
		//-- [NOTE] 
		if (rebel_pilot_rescue_condition__defaultCondition (player, npc))
		{
			//-- NPC: Great. Let me make the change.
			string_id message = new string_id (c_stringFile, "s_80");
			utils.removeScriptVar (player, "conversation.rebel_pilot_rescue.branchId");

			npcEndConversationWithMessage (player, message);

			return SCRIPT_CONTINUE;
		}

	}

	return SCRIPT_DEFAULT;
}

// ----------------------------------------------------------------------

// ======================================================================
// User Script Triggers
// ======================================================================

trigger OnInitialize ()
{
	if ((!isTangible (self)) || (isPlayer (self)))
		detachScript(self, "conversation.rebel_pilot_rescue");

	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{

	setCondition (self, CONDITION_CONVERSABLE);
	setCondition (self, CONDITION_INTERESTING);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	int menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
	menuInfoData.setServerNotify (false);
	setCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	clearCondition (self, CONDITION_CONVERSABLE);
	detachScript (self, "conversation.rebel_pilot_rescue");

	return SCRIPT_CONTINUE;
}

trigger OnDetach ()
{
	clearCondition (self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

// ======================================================================
// Script Triggers
// ======================================================================

//-- This function should move to base_class.java
boolean npcStartConversation(obj_id player, obj_id npc, string convoName, string_id greetingId, prose_package greetingProse, string_id[] responses)
{
	Object[] objects = new Object[responses.length];
	System.arraycopy(responses, 0, objects, 0, responses.length);
	return npcStartConversation(player, npc, convoName, greetingId, greetingProse, objects);
}

// ----------------------------------------------------------------------

trigger OnStartNpcConversation (obj_id player)
{
	obj_id npc = self;

	if (ai_lib.isInCombat (npc) || ai_lib.isInCombat (player))
		return SCRIPT_OVERRIDE;

	//-- [NOTE] 
	if (rebel_pilot_rescue_condition_isNotMyRescuer (player, npc))
	{
		//-- NPC: I'm wating for someone else.
		string_id message = new string_id (c_stringFile, "s_81");
		chat.chat (npc, player, message);

		return SCRIPT_CONTINUE;
	}

	//-- [NOTE] 
	if (rebel_pilot_rescue_condition_hasTheMisionActiveAndIsMyRescuer (player, npc))
	{
		//-- NPC: I sure am glad to see you, %TU!
		string_id message = new string_id (c_stringFile, "s_78");
		int numberOfResponses = 0;

		boolean hasResponse = false;

		//-- PLAYER: Here is your disguise.
		boolean hasResponse0 = false;
		if (rebel_pilot_rescue_condition__defaultCondition (player, npc))
		{
			++numberOfResponses;
			hasResponse = true;
			hasResponse0 = true;
		}

		if (hasResponse)
		{
			int responseIndex = 0;
			string_id responses [] = new string_id [numberOfResponses];

			if (hasResponse0)
				responses [responseIndex++] = new string_id (c_stringFile, "s_79");

			utils.setScriptVar (player, "conversation.rebel_pilot_rescue.branchId", 2);

			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			npcStartConversation (player, npc, "rebel_pilot_rescue", null, pp, responses);
		}
		else
		{
			prose_package pp = new prose_package ();
			pp.stringId = message;
			pp.actor.set (player);
			pp.target.set (npc);

			chat.chat (npc, player, null, null, pp);
		}

		return SCRIPT_CONTINUE;
	}

	chat.chat (npc, "Error:  All conditions for OnStartNpcConversation were false.");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

trigger OnNpcConversationResponse (string conversationId, obj_id player, string_id response)
{
	if (conversationId != "rebel_pilot_rescue")
		return SCRIPT_CONTINUE;

	obj_id npc = self;

	int branchId = utils.getIntScriptVar (player, "conversation.rebel_pilot_rescue.branchId");

	if (branchId == 2 && rebel_pilot_rescue_handleBranch2 (player, npc, response) == SCRIPT_CONTINUE)
		return SCRIPT_CONTINUE;

	chat.chat (npc, "Error:  Fell through all branches and responses for OnNpcConversationResponse.");

	utils.removeScriptVar (player, "conversation.rebel_pilot_rescue.branchId");

	return SCRIPT_CONTINUE;
}

// ======================================================================

