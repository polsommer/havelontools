
// ======================================================================

include library.ai_lib;
include library.create;
include library.groundquests;
include library.pclib;
include library.skill;
include library.space_quest;
include library.sui;
include library.utils;
include library.weapons;
include library.player_structure;

inherits base.remote_object_requester;

// ======================================================================


// ======================================================================

// Hello World

trigger OnSpeaking(String text)
{
	if(isGod(self))
	{
		debugConsoleMsg( self, "juriarte_test OnSpeaking: " + text );

		java.util.StringTokenizer tok = new java.util.StringTokenizer (text);

		if (tok.hasMoreTokens ())
		{
			String command = tok.nextToken ();

			debugConsoleMsg( self, "command is: " + command);

			// ----------------------------------------------------------------------

			if (command.equalsIgnoreCase ("ju_getPobBaseItemLimit_target"))
			{
				const obj_id target = getLookAtTarget(self);
				int baseItemLimit = getPobBaseItemLimit(target);
				String s = "getPobBaseItemLimit_target returns " + baseItemLimit;
				debugSpeakMsg(self, s);	
			}
			
			
			
			if (command.equalsIgnoreCase ("ju_getPobBaseItemLimit_myContainer"))
			{
				const obj_id target = getTopMostContainer(self);
				int baseItemLimit = getPobBaseItemLimit(target);
				String s = "getPobBaseItemLimit_myContainer returns " + baseItemLimit;
				debugSpeakMsg(self, s);	
			}
			
			if (command.equalsIgnoreCase ("ju_getHologramType_target"))
			{
				const obj_id target = getLookAtTarget(self);
				int hologramType = getHologramType(target);
				String s = "getHologramType returns " + hologramType;
				debugSpeakMsg(self,s);	
			}
			
			if (command.equalsIgnoreCase ("ju_setHologramType4_target"))
			{
				const obj_id target = getLookAtTarget(self);
				setHologramType(target,HOLOGRAM_TYPE1_QUALITY4);
			}
			
			if (command.equalsIgnoreCase ("ju_setHologramType1_target"))
			{
				const obj_id target = getLookAtTarget(self);
				setHologramType(target,HOLOGRAM_TYPE1_QUALITY1);
			}
			
			if (command.equalsIgnoreCase ("ju_setVisibleOnMapAndRadar_true"))
			{
				
				const obj_id target = getLookAtTarget(self);
debugConsoleMsg( self, "... command is: " + command + " target is " + target);
				setVisibleOnMapAndRadar(target,true);
			}
						
			if (command.equalsIgnoreCase ("ju_setVisibleOnMapAndRadar_false"))
			{
				
				const obj_id target = getLookAtTarget(self);
debugConsoleMsg( self, "... command is: " + command + " target is " + target);
				setVisibleOnMapAndRadar(target,false);
			}

			if (command.equalsIgnoreCase ("ju_getVisibleOnMapAndRadar"))
			{
				
				const obj_id target = getLookAtTarget(self);
debugConsoleMsg( self, "... command is: " + command + " target is " + target + " result is " + getVisibleOnMapAndRadar(target));
				
			}
			
			if (command.equalsIgnoreCase ("ju_incubator_development"))
			{
				const obj_id target = getLookAtTarget(self);
debugConsoleMsg( self, "... command is: " + command + " target is " + target);
				incubatorStart_development(self,target);	
			
			}
			
			if (command.equalsIgnoreCase ("ju_incubator_test0"))
			{			
				const obj_id target = getLookAtTarget(self);
debugConsoleMsg( self, "... command is: " + command + " target is " + target);
				
				incubatorStart(
				1, // sessionNumber
				self, // playerId
				target, // terminalId
				72, // powerGauge
				2, // initialPointsSurvival
				3, // initialPointsBeastialResilience
				4, // initialPointsCunning
				5, // initialPointsIntelligence
				6, // initialPointsAggression
				7, // initialPointsHuntersInstinct
				4, // temperatureGauge
				5, // nutrientGuage
				-1,
				"foobar_deadbeef_1"
				);	
						
			}
			
		}
	}

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------



// ----------------------------------------------------------------------



// ----------------------------------------------------------------------

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------


// ----------------------------------------------------------------------

messageHandler startPerform()
{
	//LOG("QUEST_DEBUG", "startPerform");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------

messageHandler stopPerform()
{
	//LOG("QUEST_DEBUG", "stopPerform");

	return SCRIPT_CONTINUE;
}

// ----------------------------------------------------------------------



// ----------------------------------------------------------------------



// ======================================================================
