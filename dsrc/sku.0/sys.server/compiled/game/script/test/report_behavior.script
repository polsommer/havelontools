void dumpState(obj_id self, string label, int behavior)
{
	if (behavior < 0)
		behavior = 0;

	obj_id[] targets = getBehaviorTargets(self, behavior);
	string targetlist = "";
	int i;
	for (i=0; i<targets.length; ++i)
  {
    targetlist += targets[i].toString() + "(";
    float fear = getMentalStateToward(self, targets[i], FEAR);
    float anger = getMentalStateToward(self, targets[i], ANGER);
    targetlist += Float.toString(fear) + "/" + Float.toString(anger) + ") ";
  }
	switch (behavior)
	{
		 case BEHAVIOR_CALM:
				debugServerConsoleMsg(self, label + "CALM: " + targetlist);
				break;
		 case BEHAVIOR_ALERT:
				debugServerConsoleMsg(self, label + "ALERT: " + targetlist);
				break;
		 case BEHAVIOR_THREATEN:
				debugServerConsoleMsg(self, label + "THREATEN: " + targetlist);
				break;
		 case BEHAVIOR_FLEE:
				debugServerConsoleMsg(self, label + "FLEE: " + targetlist);
				break;
		 case BEHAVIOR_PANIC:
				debugServerConsoleMsg(self, label + "PANIC: " + targetlist);
				break;
		 case BEHAVIOR_ATTACK:
				debugServerConsoleMsg(self, label + "ATTACK: " + targetlist);
				break;
		 case BEHAVIOR_FRENZY:
				debugServerConsoleMsg(self, label + "FRENZY: " + targetlist);
				break;
	};
}

trigger OnBehaviorChange(int newBehavior, int oldBehavior, int[] changeFlags)
{
	string targetlist = "";
	int i;
	for (i=0; i<=BEHAVIOR_FRENZY; ++i)
	{
		 if (i == newBehavior)
				dumpState(self, "NOW ", i);
		 else if (i == oldBehavior)
				dumpState(self, "WAS ", i);
		 else if (changeFlags[i] != 0)
				dumpState(self, "", i);
	}
	return SCRIPT_CONTINUE;
}

trigger OnBehaviorTargetChange(int b, int[] changeFlags)
{
	 int i;
	 for (i=0; i<=BEHAVIOR_FRENZY; ++i)
	 {
			if (changeFlags[i] != 0)
			{
				 dumpState(self, "", i);
			}
	 }
	 return SCRIPT_CONTINUE;
}

