include library.utils;


trigger OnAttach()
{
	setInvulnerable(self, true );
	messageTo(self,"npeSetName", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnPreloadComplete()
{
	boolean setting = utils.checkConfigFlag("ScriptFlags", "npeSequencersActive");
	if(setting == true)
	{
		string myName = utils.getStringObjVar(self, "strSequenceIdentifier");
		if(myName == "drunk")
		{
			messageTo(self, "doEvents", null, 60, false);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler npeSetName()
{
	string myName = utils.getStringObjVar(self, "strSequenceIdentifier");
	if(myName == "drunk")
	{
		setName(self, "Pacus");
	}
	else
	{
		setName(self, "Irving");
		obj_id cup = createObject ("object/tangible/item/con_drinking_glass_01.iff", self, "hold_l");
		//equip(cup, self);
		setAnimationMood(self, "npc_standing_drinking");
	}
	return SCRIPT_CONTINUE;
}

messageHandler getglass()
{
	//debugSpeakMsg(self, "Getting glass now");
	obj_id inv = getObjectInSlot(self, "inventory");
	obj_id cup = createObject ("object/tangible/item/con_drinking_glass_01.iff", inv, "");
	equip(cup, self);
	return SCRIPT_CONTINUE;
}
messageHandler removeglass()
{
	//debugSpeakMsg(self, "Removing glass now");
	obj_id myInv = utils.getInventoryContainer(self);
	obj_id glass = getObjectInSlot(self, "hold_l");
	destroyObject(glass);
	return SCRIPT_CONTINUE;
}

messageHandler npeaddconvo()
{
	attachScript(self, "conversation.npe_drunk");
	return SCRIPT_CONTINUE;
}

messageHandler nperemoveconvo()
{
	detachScript(self, "conversation.npe_drunk");
	clearCondition(self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}