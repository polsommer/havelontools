/**********************************************************************
 * Copyright (c)2000-2006 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        npe_instance_travel_player
 * Description:  Attaches to a player that is currently in the npe
                 space station
 * @author       Vijay Thakkar
 * @version      1.0
 **********************************************************************/

include library.utils;
include library.space_dungeon;
include library.npe;

trigger OnClusterWideDataResponse(string manage_name, string name, int request_id, string[] element_name_list, dictionary[] data, int lock_key)
{
	// This trigger is fired whenever a request for travel to the npe space station is made
	LOG("npe", "npe_instance_travel_player.OnClusterWideDataResponse");

	boolean error = false;
	if (!manage_name.equals(npe.DUNGEON_PUBLIC_MANAGER_NAME))
	{
		LOG("npe", "npe_instance_travel_player.OnClusterWideDataResponse -- ignorning manage_name " + manage_name + " because it is not public_instances.");
		error = true;
	}
	if (request_id < 1)
	{
		LOG("npe", "npe_instance_travel_player.OnClusterWideDataResponse -- invalid request_id value of " + request_id);
		error = true;
	}
	if (data == null || data.length == 0)
	{
		LOG("npe", "npe_instance_travel_player.OnClusterWideDataResponse -- data is null.");
		error = true; 
	}
	if (element_name_list == null)
	{
		LOG("npe", "npe_instance_travel_player.OnClusterWideDataResponse -- element_name_list is null.");
		error = true; 
	}

	if (error)
	{
		releaseClusterWideDataLock(manage_name, lock_key);
		return SCRIPT_CONTINUE;	
	}

	if (!npe.performTransitionFromClusterWideData(self, data, name))
	{
		LOG("npe", "Failed to perform transition for player "+self+" instance name "+name);
	}

	releaseClusterWideDataLock(manage_name, lock_key);

	return SCRIPT_CONTINUE;
}

messageHandler msgNpeInstanceTravelComplete()
{
        // if they are coming from another dungeon and it should be reset now that they are in another dungeon, reset it
        if (hasObjVar(self, space_dungeon.VAR_RESET_DUNGEON))
        {
                obj_id dungeon_id = getObjIdObjVar(self, space_dungeon.VAR_RESET_DUNGEON);
                dictionary d = new dictionary();
                messageTo(dungeon_id, "msgManualDungeonReset", d, 0.0f, false);
                removeObjVar(self, space_dungeon.VAR_RESET_DUNGEON);
        }

        return SCRIPT_CONTINUE;
}
