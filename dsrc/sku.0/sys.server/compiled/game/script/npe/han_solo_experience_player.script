include library.features;
include library.utils;


messageHandler grenadedamage()
{
	int maxHealth = getMaxHealth(self);
	int newHealth = maxHealth/2;

	setHealth(self, newHealth);

	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	//player can never die!  woo!
	int currentHealth = getHealth(self);
	int maxHealth = getMaxHealth(self);

	if (currentHealth <= maxHealth/2)
		setHealth(self, maxHealth/2);

	return SCRIPT_CONTINUE;
}

trigger OnNewbieTutorialResponse(string strAction)
{
	//utils.sendDelayedSystemMessage(self, "You have received a client ready message of "+strAction, 5);
    if(strAction.equals("clientReady"))
	{
		obj_id hangar = getTopMostContainer(self);
		newbieTutorialEnableHudElement(self, "radar", false, 0);
		newbieTutorialEnableHudElement(self, "chatbox", false, 0);
		messageTo(hangar, "doEvents", null, 1, false);
		checkJtLStatus( self );
    }

    else if (strAction.equals("openInventory"))
    {

		if (utils.hasScriptVar(self, "npe.invCheck"))
		{
			utils.removeScriptVar(self, "npe.invCheck");
			obj_id building = getTopMostContainer(self);
			messageTo(building, "continueMainTable", null, 0, false);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

void checkJtLStatus( obj_id self )
{
		//this flags the player as having been given an intro to JtL via the NPE
		// and prevents any follow-up emails or player-teleporting to pilot
		// trainers and so on:
		if ( features.isSpaceEdition(self) )
			setObjVar( self, "jtlNewbie", 4 );

}
