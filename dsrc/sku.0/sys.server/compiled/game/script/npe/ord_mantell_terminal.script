include library.create;
include library.utils;
include library.npe;
include library.groundquests;
include library.space_quest;
include library.space_utils;
include library.space_crafting;

const string_id LAUNCH				= new string_id("npe", "launch");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{

	mi.addRootMenu(menu_info_types.ITEM_USE, LAUNCH);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		//remove any objvars the player used in the hangar
		if (!space_utils.hasShip (player))
		{
			// no pilot skills, so no space zone for you!!!!!!!!!
			string_id noCanFly = new string_id("npe",  "cantfly");
			sendSystemMessage(player, noCanFly);
			return SCRIPT_CONTINUE;
		}

		//repair the ship in case they blew up in the noobie yard(or ejected)
		obj_id vcdShipId = space_utils.hasUsableShip(player);
		obj_id [] shipId = getContents(vcdShipId);
		if (shipId != null && shipId.length != 0)
			space_crafting.repairDamage(player, shipId[0], 1.0f);

		if (checkGod(player))
			return SCRIPT_CONTINUE;

		location ordLoc = new location(200, 150, 600);

		npe.movePlayerFromSharedStationToOrdMantellSpace(player, ordLoc);
		groundquests.sendSignal(player, "accessedSpace");
	}
	return SCRIPT_CONTINUE;
}

boolean checkGod(obj_id self)
{
	if (isGod(self))
	{
		sendSystemMessageTestingOnly(self, "Please turn off god mode when moving between npe locations. God mode and instances do not get along");
		return true;
	}
	return false;
}