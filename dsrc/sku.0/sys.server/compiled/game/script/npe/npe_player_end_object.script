include library.npe;
include library.utils;

trigger OnAttach()
{
	createTriggerVolume("npeFalconRamp", 2.0f, true);

	obj_id[] contents = getTriggerVolumeContents(self, "npeFalconRamp");

	for (int i = 0; i < contents.length; i++)
	{
		if (isIdValid(contents[i]) && isPlayer(contents[i]))
		{
			//debugSpeakMsg(player, "entering");
			obj_id building = getTopMostContainer(contents[i]);
			utils.removeScriptVar(contents[i], "npe.hangarEventStarted");

			if (checkGod(contents[i]))
				return SCRIPT_CONTINUE;

			// just in case they got into the falcon and restarted the sequence, kill this scriptvar
			utils.removeScriptVar(contents[i], "npe.falconEventStarted");
			boolean moved = npe.movePlayerFromHangarToFalcon(contents[i]);

			if (moved)
			{
				detachScript(contents[i], "npe.han_solo_experience_player");
				attachScript(contents[i], "npe.npe_falcon_player");
			}

			removeTriggerVolume("npeFalconRamp");
			LOG("npe_falcon_ramp", "Player ID " + contents[i] + " is trying to board the falcon in hangar ID " + building + ".  Transition function returned " + moved);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id player)
{
	if (volumeName.equals("npeFalconRamp"))
	{
		if (isPlayer(player))
		{
			//debugSpeakMsg(player, "entering");
			obj_id building = getTopMostContainer(player);
			utils.removeScriptVar(player, "npe.hangarEventStarted");

			if (checkGod(player))
				return SCRIPT_CONTINUE;

			// just in case they got into the falcon and restarted the sequence, kill this scriptvar
			utils.removeScriptVar(player, "npe.falconEventStarted");
			boolean moved = npe.movePlayerFromHangarToFalcon(player);
			removeTriggerVolume("npeFalconRamp");
			if (moved)
			{
				detachScript(player, "npe.han_solo_experience_player");
				attachScript(player, "npe.npe_falcon_player");
			}

			LOG("npe_falcon_ramp", "Player ID " + player + " is trying to board the falcon in hangar ID " + building + ".  Transition function returned " + moved);
		}
	}
	return SCRIPT_CONTINUE;
}

boolean checkGod(obj_id self)
{
	if (isGod(self))
	{
		sendSystemMessageTestingOnly(self, "Please turn off god mode when moving between npe locations. God mode and instances do not get along");
		return true;
	}
	return false;
}