
include library.utils;

const string VAR_DELTA_TARGET					= "delta_target";

trigger OnAttach()
{
	debugSpeakMsg(self, "world delta script attached!");
	return SCRIPT_CONTINUE;
}

trigger OnSpeaking(string text)
{
 if ( text.startsWith("delta") )
 {
	obj_id target = getLookAtTarget(self);
  	boolean badTarget = true;
  	
  	java.util.StringTokenizer st = new java.util.StringTokenizer(text);
  	if ( st.countTokens() == 1 )
  	{
  		if ( (target == null) || (target == obj_id.NULL_ID) )
  		{
  			if ( hasObjVar(self, VAR_DELTA_TARGET) )
  			{
  				target = getObjIdObjVar(self, VAR_DELTA_TARGET);
  			}  			
  		}
  		else
  		{
  			debugSpeakMsg(self, "using my lookAtTarget: " + target);
  		}

		if ( target != null )
		{
			badTarget = false;
			//perform delta calcs here

			location pLoc = getLocation(self);
			location oLoc = getLocation(target);

			float dx = pLoc.x - oLoc.x;
			float dy = pLoc.y - oLoc.y;
			float dz = pLoc.z - oLoc.z;

			debugSpeakMsg(self, "(" + target + ") world delta = " + dx + " " + dy + " " + dz);
		}
  	}
  	else
  	{
  		st.nextToken();	//skip "delta" token
  		
  		string param = st.nextToken();
  		
  		if ( param.equals("target") )
  		{
  			if ( st.hasMoreTokens() )
  			{
				param = st.nextToken();
				target = utils.stringToObjId(param);
				if ( target != null )
				{
					setObjVar(self, VAR_DELTA_TARGET, target);
					debugSpeakMsg(self, "world delta target set to object " + target);
					badTarget = false;
				}
			}
  		}
  	}

	if ( badTarget )
	{
		debugSpeakMsg(self, "I need to set a delta target using 'delta target <obj_id>'");
	}
  	
 }
 return SCRIPT_CONTINUE;
}