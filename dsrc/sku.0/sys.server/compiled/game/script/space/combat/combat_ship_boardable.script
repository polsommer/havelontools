include library.utils;
include library.create;
include library.space_utils;
include library.space_crafting;
include library.space_combat;



// do buildout of interior
//s etup al lof the sapwns
// and more!@!@!

trigger OnAttach()
{

	string strBoardingType = getStringObjVar(self, "strBoardingType");	
	if(strBoardingType==null)
	{
		LOG("space", "BAD BOARDING TYPE ON "+self);
		return SCRIPT_CONTINUE;
	}
	
	// WE DO OUR THING..
	
	// I NEED TO FUNCTIONALIZE SOME STUFF!@!@!@!@
	// Let's assume ship_interior did my buildout.
	string strFileName = "datatables/space_content/capital_ship_interiors/"+strBoardingType+".iff";
	LOG("space", "Type is "+strFileName);
	string[] strMobs = dataTableGetStringColumn(strFileName, "strMobsToSpawn");
	string[] strBossesToSpawn = dataTableGetStringColumn(strFileName, "strBossesToSpawn");
	
	
	for(int intI= 0; intI<strBossesToSpawn.length; intI++)
	{
		location locSpawnLocation = getLocationFromLocationListRandom(self, "locBossSpawners", 1.5f);
		obj_id objMob = create.object(strBossesToSpawn[intI], locSpawnLocation);	
	}
	
	
	
	utils.setLocalVar(self, "strMobs", strMobs);
	
	messageTo(self, "delayedSpawn", null, 1, false);
	



	//setObjVar(objTest, "strLocationList", "locEntrance");
	//setObjVar(objTest, "strLocationList", "locBossSpawners");
	//setObjVar(objTest, "strLocationList", "locSpawners");
	
	return SCRIPT_CONTINUE;

}

location getLocationFromLocationList(obj_id objObject, string strLocationList)
{
	transform[] trTransforms = utils.getTransformArrayScriptVar(objObject, strLocationList);
	obj_id[] objCells = utils.getObjIdArrayScriptVar(objObject, strLocationList + "Cells");
	
	if((trTransforms==null)||(trTransforms.length==0))
	{
		LOG("space", "No location list for object "+objObject+" and List "+strLocationList);
		return null;
	}
	
	int intRoll= rand(0, trTransforms.length-1);
	transform tr = trTransforms[intRoll];
	
	location locTest = space_utils.getLocationFromTransform(tr);
	locTest.cell = objCells[intRoll];						
	return locTest;
}
location getLocationFromLocationListRandom(obj_id objObject, string strLocationList, float fltRandomValue)
{
	location locTest = getLocationFromLocationList(objObject, strLocationList);
	
	locTest.z = locTest.z + rand(-1* fltRandomValue, fltRandomValue);
	locTest.y =  locTest.y + rand(-1* fltRandomValue, fltRandomValue);
	return locTest;
}


messageHandler delayedSpawn()
{
	int intIndex = utils.getIntLocalVar(self, "intIndex");
	string[] strMobs= utils.getStringArrayLocalVar(self, "strMobs");	
	location locSpawnLocation = getLocationFromLocationListRandom(self, "locSpawners", 1.5f);
	
	obj_id objMob = create.object(strMobs[intIndex], locSpawnLocation);
	intIndex = intIndex +1;
	
	if(intIndex<strMobs.length)
	{
		// recycle
		utils.setLocalVar(self, "intIndex", intIndex);
		messageTo(self, "delayedSpawn", null, 1, false);	
	}
	else
	{
		utils.removeLocalVar(self, "intIndex");
		utils.removeLocalVar(self, "strMobs");
	
	}
	return SCRIPT_CONTINUE;

}


/// permission crap

// stuff
//permissionsMakePrivate ( cell );
//permissionsMakePublic( cell );



 
