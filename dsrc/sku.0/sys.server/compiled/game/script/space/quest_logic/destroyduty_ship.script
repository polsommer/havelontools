//------------------------------------------------
// destroyduty_ship.script
// Brandon Reinhart
//
// A special script for destroy duty targets.
//------------------------------------------------

//------------------------------------------------
// Includes
//------------------------------------------------

include library.space_quest;
include library.space_utils;
include library.utils;
include library.prose;

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	messageTo( self, "randomTaunt", null, rand(10,20), false );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// randomTaunt
//------------------------------------------------

messageHandler randomTaunt()
{
	float r = rand();
	if ( r < .15f )
	{
		// Taunt the player.
		obj_id quest = getObjIdObjVar( self, "quest" );
		if ( !exists( quest ) )
			return SCRIPT_CONTINUE;
		obj_id player = getObjIdObjVar( quest, space_quest.QUEST_OWNER );
		if ( !exists( player ) )
			return SCRIPT_CONTINUE;
		string questName = getStringObjVar( quest, space_quest.QUEST_NAME );
		string questType = getStringObjVar( quest, space_quest.QUEST_TYPE );
		int numTaunts = getIntObjVar( quest, "numResponses" );
		if ( numTaunts > 0 )
		{
			string_id taunt = new string_id( "spacequest/"+questType+"/"+questName, "taunt_"+rand(1,numTaunts) );
			string staunt = localize( taunt );
			if ( (staunt != null) && (staunt != "") )
			{
				prose_package pp = prose.getPackage( taunt, 0 );
				space_quest.groupTaunt( self, player, pp );
			}
		}
	}

	messageTo( self, "randomTaunt", null, rand(30,40), false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// objectDestroyed
// Called from the combat system when the ship is destroyed.
//------------------------------------------------

messageHandler objectDestroyed()
{
	obj_id quest = getObjIdObjVar( self, "quest" );
	dictionary outparams = new dictionary();
	outparams.put( "ship", self );
	space_utils.notifyObject( quest, "targetDestroyed", outparams );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// missionAbort
//------------------------------------------------

messageHandler missionAbort()
{
	destroyObjectHyperspace( self );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnDestroy
//------------------------------------------------

trigger OnDestroy()
{
	obj_id quest = getObjIdObjVar( self, "quest" );
	if ( isIdValid( quest ) && exists( quest ) && hasObjVar( quest, "critical_warped" ) )
	{
		dictionary outparams = new dictionary();
		outparams.put( "ship", self );
		messageTo( quest, "warpoutFailure", null, 2.f, false );
	}
	return SCRIPT_CONTINUE;
}