//------------------------------------------------
// quest_manager.script
// Brandon Reinhart
//
// Master quest manager for space.
// This exists on quest_manager.iff, an object which should exist per zone.
//------------------------------------------------

//------------------------------------------------
// Includes
//------------------------------------------------

include library.space_quest;
include library.space_utils;
include library.utils;

//------------------------------------------------
// OnPreloadComplete
//------------------------------------------------

trigger OnInitialize()
{
	// Register us as a named object.
	registerNamedObject( space_quest.QUEST_MANAGER, self );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// registerQuestLocation
//------------------------------------------------

messageHandler registerQuestLocation()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	obj_id new_point = params.getObjId( "point" );
	string new_point_name = getStringObjVar( new_point, "nav_name" );
	string type = params.getString( "type" );

	// Add the new point to the type list.
	obj_id[] points = utils.getObjIdArrayScriptVar( self, type+"_list" );
	if ( points == null )
	{
		points = new obj_id[1];
		points[0] = new_point;
		utils.setScriptVar( self, type+"_list", points );
	}
	else
	{
		obj_id[] updated_points = new obj_id[points.length+1];
		for ( int i=0; i<points.length; i++ )
		{
			if ( points[i] == new_point )
			{
				// Tried to register a duplicate quest point.
				debugServerConsoleMsg( self, "Quest Manager: Ignoring a duplicate registerQuestLocation request for object " + new_point );
				return SCRIPT_CONTINUE;
			}
			string point_name = getStringObjVar( points[i], "nav_name" );
			if ( (point_name != null) && point_name.equals( new_point_name ) )
			{
				// Tried to register a quest point with a name that matches a previous quest point.
				debugServerConsoleMsg( self, "Quest Manager: Tried to register a quest point with a duplicate name. " + new_point + " " + points[i] );
				return SCRIPT_CONTINUE;
			}

			updated_points[i] = points[i];
		}
		updated_points[points.length] = new_point;
		utils.setScriptVar( self, type+"_list", updated_points );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// createWaypointToSpawner
//------------------------------------------------

messageHandler createWaypointToSpawner()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	obj_id quest   = params.getObjId ( "quest"   );
	obj_id player  = params.getObjId ( "player"  );
	string name    = params.getString( "name"    );
	string spawner = params.getString( "spawner" );

	int taskId = params.getInt( "taskId" );
	string questName = params.getString( "questName" );
	int questId = params.getInt( "questId" );

	obj_id[] navs  = utils.getObjIdArrayScriptVar( self, "spawner_list" );
	if ( navs == null )
		return SCRIPT_CONTINUE;
	for ( int i=0; i<navs.length; i++ )
	{
		string curSpawnName = getStringObjVar( navs[i], "strSpawnerName" );
		if ( (curSpawnName != null) && curSpawnName.equals( spawner ) )
		{
			// Give the player a waypoint to this location.
			location loc = getLocation( navs[i] );
			obj_id waypoint = createWaypointInDatapad( player, loc );
			setWaypointVisible( waypoint, true );
			setWaypointActive( waypoint, true );
			setWaypointName( waypoint, name );
			setWaypointColor( waypoint, "space" );

			questActivateTask( questId, taskId, player );
			questSetQuestTaskLocation( player, questName, taskId, loc );

			dictionary outparams = new dictionary();
			outparams.put( "waypoint", waypoint );
			messageTo( quest, "createdWaypointToSpawner", outparams, 1.f, false );
			return SCRIPT_CONTINUE;
		}
	}

	if ( navs != null )
		sendSystemMessageTestingOnly( player, "Error: Failed to find spawner '" + spawner + "'.  " + navs.length + " spawners were searched.  The nav point object may not exist or your server may need to specify 'createZoneObjects=1'" );
	else
		sendSystemMessageTestingOnly( player, "Error: Failed to find spawner '" + spawner + "'.  No spawners were registered!  The nav point object may not exist or your server may need to specify 'createZoneObjects=1'" );

	return SCRIPT_CONTINUE;
}
