//------------------------------------------------
// assassinate_target.script
// Brandon Reinhart
//
// This script resides on the ship being assassinated.
//------------------------------------------------

//------------------------------------------------
// Includes
//------------------------------------------------

include library.space_quest;
include library.space_utils;
include library.utils;
include library.prose;

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// We don't want to hang around too long.
	// Warp us out if we are still alive after 20 minutes.
	messageTo( self, "warpOut", null, 1200.f, false );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// warpOut
//------------------------------------------------

messageHandler warpOut()
{
	// Warp us out if we are around for too long.
	setObjVar( self, "nowin", 1 );
	destroyObjectHyperspace( self );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// registerDestination
//------------------------------------------------

messageHandler registerDestination()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	// Set our final destination notification.
	obj_id quest = params.getObjId( "quest" );
	location loc = params.getLocation( "loc" );
	string dest = params.getString( "dest" );
	addLocationTarget3d( dest, loc, 300 );
	obj_id player = params.getObjId( "player" );
	setObjVar( self, "player", player );

	// Store reference to our quest parent.
	setObjVar( self, "quest", quest );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// objectDestroyed
// Called from the combat system when the ship is destroyed.
//------------------------------------------------

messageHandler objectDestroyed()
{
	obj_id quest = getObjIdObjVar( self, "quest" );
	if ( hasObjVar( self, "nowin" ) )
	{
		// We were not recovered in time.
		dictionary outparams = new dictionary();
		outparams.put( "ship", self );
		outparams.put( "reason", 0 );
		space_utils.notifyObject( quest, "targetEscaped", outparams );
		return SCRIPT_CONTINUE;
	}

	dictionary outparams = new dictionary();
	outparams.put( "ship", self );
	outparams.put( "reason", 1 );
	space_utils.notifyObject( quest, "assassinateSuccess", outparams );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnArrivedAtLocation
//
// We may have arrived at a key quest location.
// Forward this message to our quest objects.
//------------------------------------------------

trigger OnArrivedAtLocation( string name )
{
	// Forward the notification to our quest object.
	obj_id quest = getObjIdObjVar( self, "quest" );
	if ( name.equals( "escape" ) )
	{
		// We were not recovered in time.
		dictionary params = new dictionary();
		params.put( "ship", self );
		params.put( "reason", 0 );
		space_utils.notifyObject( quest, "targetEscaped", params );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// missionAbort
//------------------------------------------------

messageHandler missionAbort()
{
	destroyObjectHyperspace( self );

	return SCRIPT_CONTINUE;
}
