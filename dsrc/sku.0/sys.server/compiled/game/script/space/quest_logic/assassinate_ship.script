//------------------------------------------------
// assassinate_ship.script
// Brandon Reinhart
//------------------------------------------------

//------------------------------------------------
// Includes
//------------------------------------------------

include library.space_quest;
include library.space_utils;
include library.utils;
include library.prose;

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// We don't want to hang around too long.
	// Warp us out if we are still alive after 20 minutes.
	messageTo( self, "warpOut", null, 1200.f, false );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// warpOut
//------------------------------------------------

messageHandler warpOut()
{
	// Warp us out if we are around for too long.
	setObjVar( self, "nowin", 1 );

	obj_id quest = getObjIdObjVar( self, "quest" );
	if ( isIdValid( quest ) )
	{
		dictionary outparams = new dictionary();
		outparams.put( "ship", self );
//		messageTo( quest, "warpoutFailure", outparams, 3.f, false );
		space_utils.notifyObject( quest, "warpoutFailure", outparams );
	}

	destroyObjectHyperspace( self );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// objectDestroyed
// Called from the combat system when the ship is destroyed.
//------------------------------------------------

messageHandler objectDestroyed()
{
	if ( hasObjVar( self, "nowin" ) )
		return SCRIPT_CONTINUE;
	if ( !hasObjVar( self, "selfDestruct" ) )
		return SCRIPT_CONTINUE;

	obj_id quest = getObjIdObjVar( self, "quest" );
	dictionary outparams = new dictionary();
	outparams.put( "ship", self );
	space_utils.notifyObject( quest, "handleShipDestroyed", outparams );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// missionAbort
//------------------------------------------------

messageHandler missionAbort()
{
	destroyObjectHyperspace( self );

	return SCRIPT_CONTINUE;
}
