include library.sui;
include java.lang.Math;
include library.space_crafting;
include library.space_utils;
include library.utils;
include library.prose;
include library.space_pilot_command;

// inventory manager for droid stuff
// we check commands being added
// we also make sure you cant remvoe commads


/*
trigger OnAboutToReceiveItem(obj_id objStartContainer, obj_id objPlayer, obj_id objItem)
{
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   ENTERED FUNCTION!");

	int dataModuleRating = 0;
	string droidProgram = "";
	int currentUsedProgramMemory = 0;


	string objectTemplateName = getTemplateName(objItem);
	int index = objectTemplateName.indexOf("object/intangible/data_item/droid_command");
	if(index<0)
		return SCRIPT_CONTINUE; // don't allow the transfer if the thing being given isn't a droid program module

	obj_id controlDevice = getContainedBy(self);
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   I'm contained by obj_id: "+controlDevice+" This should be the control device");
	if ( hasObjVar(controlDevice, "dataModuleRating" ))
		dataModuleRating = getIntObjVar(controlDevice, "dataModuleRating");

	if ( hasObjVar(objItem, "strDroidCommand" ))
		droidProgram = getStringObjVar(objItem, "strDroidCommand");

	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   My dataModuleRating, via objvar, is : "+dataModuleRating);
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   The name of the droid program being transfered is : "+droidProgram);

	obj_id[] objCommands = space_crafting.getDatapadDroidCommands(controlDevice);
	if(objCommands!=null)
	{
		if ( space_pilot_command.hasDuplicateProgram(objCommands, droidProgram) )
		{
			string_id strSpam = new string_id("space/droid_commands", "droid_command_programmed_already");
			sendSystemMessage(objPlayer, strSpam);
			return SCRIPT_OVERRIDE;
		}

		currentUsedProgramMemory = space_pilot_command.getCurrentlyUsedProgramMemory(objCommands);
	}
	else
		debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   getDatapadDroidCommands returned NULL");

	int freeDpadMemory = dataModuleRating - currentUsedProgramMemory;
	int droidProgramSize = space_pilot_command.getDroidProgramSize(droidProgram, objItem);

	if (freeDpadMemory > droidProgramSize )	// if there IS enough room in the dpad for that program...
	{
		string_id strSpam = new string_id("space/droid_commands", "droid_command_programmed");
		sendSystemMessage(objPlayer, strSpam);

		strSpam = new string_id("space/droid_commands", "droid_command_datapad_roomleft");
		prose_package pp = prose.getPackage(strSpam, (freeDpadMemory-droidProgramSize));
		sendSystemMessageProse(objPlayer, pp);

		setObjVar(controlDevice, "usedMemory", (droidProgramSize+currentUsedProgramMemory));
	}
	else if (freeDpadMemory == droidProgramSize )	// if there IS enough room in the dpad for that program...
	{
		string_id strSpam = new string_id("space/droid_commands", "droid_command_programmed");
		sendSystemMessage(objPlayer, strSpam);

		strSpam = new string_id("space/droid_commands", "droid_command_datapad_room_nfull");
		sendSystemMessage(objPlayer, strSpam);

		setObjVar(controlDevice, "usedMemory", dataModuleRating);
	}
	else
	{
		//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   objCommands.length was NOT > 0. In fact, it was: "+objCommands.length);

		string_id strSpam = new string_id("space/droid_commands", "droid_command_not_enough_room");
		sendSystemMessage(objPlayer, strSpam);
		return SCRIPT_OVERRIDE;
	}


	return SCRIPT_CONTINUE;
}
*/

trigger OnAboutToReceiveItem(obj_id objStartContainer, obj_id objPlayer, obj_id objItem)
{
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   ENTERED FUNCTION!");
	if ( !isIdValid (objItem) || !isIdValid (objPlayer) || !isIdValid (objStartContainer))
		return SCRIPT_CONTINUE;

	//int dataModuleRating = 0;
	string droidProgram = "";
	int currentUsedProgramMemory = 0;

	string objectTemplateName = getTemplateName(objItem);
	int index = objectTemplateName.indexOf("object/intangible/data_item/droid_command");
	if(index<0)
		return SCRIPT_CONTINUE; // don't allow the transfer if the thing being given isn't a droid program module

	obj_id controlDevice = getContainedBy(self);
	if ( !isIdValid (controlDevice))
		return SCRIPT_OVERRIDE;
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   I'm contained by obj_id: "+controlDevice+" This should be the control device");

	if ( hasObjVar(objItem, "strDroidCommand" ))
		droidProgram = getStringObjVar(objItem, "strDroidCommand");
	else
		return SCRIPT_OVERRIDE;

	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   My dataModuleRating, via objvar, is : "+dataModuleRating);
	//debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   The name of the droid program being transfered is : "+droidProgram);

	obj_id[] objCommands = space_crafting.getDatapadDroidCommands(controlDevice);
	if(objCommands!=null)
	{
		if ( space_pilot_command.hasDuplicateProgram(objCommands, droidProgram) )
		{
			string_id strSpam = new string_id("space/droid_commands", "droid_command_programmed_already");
			sendSystemMessage(objPlayer, strSpam);
			return SCRIPT_OVERRIDE;
		}

		currentUsedProgramMemory = space_pilot_command.getCurrentlyUsedProgramMemory(objCommands);
	}
	else
		debugServerConsoleMsg( null, "DROID_DATAPAD_HANDLER.OnAboutToReceiveItem  ***   getDatapadDroidCommands returned NULL");

	int droidProgramSize = space_pilot_command.getDroidProgramSize(droidProgram, objItem);

	string_id strSpam = new string_id("space/droid_commands", "droid_command_programmed");
	if ( hasObjVar(controlDevice, "item.objectName" ))
		strSpam = new string_id("space/droid_commands", "droid_command_programmed_flightcomputer");
	sendSystemMessage(objPlayer, strSpam);

	//setObjVar(controlDevice, "usedMemory", (droidProgramSize+currentUsedProgramMemory));

	return SCRIPT_CONTINUE;
}



trigger OnAboutToLoseItem(obj_id objDestination, obj_id objPlayer, obj_id objItem)
{
	if(hasObjVar(objItem, "strDroidCommand"))
	{
		string_id strSpam = new string_id("space/droid_commands", "droid_command_delete");
		sendSystemMessage(objPlayer, strSpam);
		return SCRIPT_OVERRIDE;
	}

	return SCRIPT_CONTINUE;
}
