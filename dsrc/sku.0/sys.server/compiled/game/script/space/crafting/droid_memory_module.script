include library.sui;
include library.space_crafting;
include library.space_utils;
include library.space_combat;
include library.utils;
include library.space_pilot_command;



// this script goes onto the memory module
// it allows a player to "program" a memory chip with their desired commadns.
// these commands are then eaten by the droid

// this copies an array onto the droid.

trigger OnInitialize()
{
	// this HACK fixes a fucked up bug with naming crafted items and persistence. 
	//it's horrible and makes everyone sad.
	
	string_id strSpam = getNameStringId(self);
	string_id strTest = new string_id("space/space_item", "blank_memory_chip_n");	
	if(strSpam!=null)
	{
		if(!(strSpam.equals(strTest)))
		{
			setName(self, "");	
		}
	}
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest (obj_id objPlayer, menu_info menuInfo)
{


	// we check if it's been burnt in or not.
	// if you don't have the basic droid crap, you get nothing

	if(!hasObjVar(self, "strDroidCommand"))
	{
		menuInfo.addRootMenu(menu_info_types.MEMORY_CHIP_PROGRAM, new string_id("space/space_interaction", "memory_chip_program"));
	}
	else
	{
		menuInfo.addRootMenu(menu_info_types.MEMORY_CHIP_ANALYZE, new string_id("space/space_interaction", "memory_chip_analyze"));
		//menuInfo.addRootMenu(menu_info_types.MEMORY_CHIP_TRANSFER, new string_id("space/space_interaction", "memory_chip_transfer"));
	}
	return SCRIPT_CONTINUE;

}

trigger OnObjectMenuSelect(obj_id objPlayer, int item)
{
	obj_id objContainingPlayer = utils.getContainingPlayer(self);
	if(objContainingPlayer!=objPlayer)
	{
		return SCRIPT_CONTINUE;
	}

	if ( item == menu_info_types.MEMORY_CHIP_PROGRAM )
	{
		string[] strDroidCommands = space_combat.getDroidCommands(objPlayer);
		if(strDroidCommands==null)
		{
			string_id strSpam = new string_id("space/space_interaction", "no_droid_commands");
			sendSystemMessage(objPlayer, strSpam);
			return SCRIPT_CONTINUE; //
		}
		string [] strCommandIds= new string[strDroidCommands.length];

		for(int intI = 0; intI< strDroidCommands.length; intI++)
		{
			strCommandIds[intI] = utils.packStringId(new string_id("space/droid_commands", strDroidCommands[intI]+"_commandname"));
		}

		utils.setScriptVar(objPlayer, "strDroidProgramCommands", strDroidCommands);
		string_id strPromptId = new string_id("space/droid_commands", "droid_program_prompt");
		string strPrompt = utils.packStringId(strPromptId);
		sui.listbox(self, objPlayer, strPrompt, strCommandIds, "programMemoryChip");
		return SCRIPT_CONTINUE;
	}
	/*
	else if(item==menu_info_types.MEMORY_CHIP_TRANSFER)
	{
		int programSize = 1;

		obj_id objDatapad = utils.getDatapad(objPlayer);
		string strDroidCommand = getStringObjVar(self, "strDroidCommand");
		if((strDroidCommand==null)||(strDroidCommand==""))
			return SCRIPT_CONTINUE;

		if ( hasObjVar(self, "programSize" ))
			programSize = getIntObjVar(self, "programSize");

		string programDataTemplate = "object/intangible/data_item/droid_command.iff";	//This is a volume zero object template

		switch(programSize) {
			case 35: programDataTemplate = "object/intangible/data_item/droid_command_5.iff";
					break;
			case 25: programDataTemplate = "object/intangible/data_item/droid_command_4.iff";
					break;
			case 20: programDataTemplate = "object/intangible/data_item/droid_command_3.iff";
					break;
			case 10: programDataTemplate = "object/intangible/data_item/droid_command_2.iff";
					break;
			case 5: programDataTemplate = "object/intangible/data_item/droid_command_1.iff";
					break;
		}

		obj_id objNewCommand = createObject(programDataTemplate, objDatapad, "");


		if(!isIdValid(objNewCommand))
			return SCRIPT_CONTINUE;


		setObjVar(objNewCommand, "strDroidCommand", strDroidCommand);
		setName(objNewCommand, new string_id("space/droid_commands", strDroidCommand+"_chipname"));
		setObjVar(objNewCommand,"programSize", programSize);
		destroyObject(self);
		// move the command into the "datapad"

	}*/
	else if(item==menu_info_types.MEMORY_CHIP_ANALYZE)
	{
		// opens up a sui box explaining some crap
		string strDroidCommand = getStringObjVar(self, "strDroidCommand");
		if(strDroidCommand==null)
			return SCRIPT_CONTINUE;

		string_id strSpam = new string_id("space/droid_commands", strDroidCommand+"_description");
		sui.msgbox(objPlayer, strSpam);
	}
	return SCRIPT_CONTINUE;
}


trigger OnGetAttributes (obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	if (hasObjVar(self, "programSize"))
	{
		names[idx] = "droid_command_program_size";
		int programSize = getIntObjVar(self, "programSize");
		attribs[idx] = " " + programSize;
		idx++;
	}

	if (hasObjVar(self, "strDroidCommand"))
	{
		string strDroidCommand = getStringObjVar(self, "strDroidCommand");
		names[idx] = "droid_command_name";
		//attribs[idx] = strDroidCommand;
		attribs[idx] = utils.packStringId(new string_id("space/droid_commands", strDroidCommand));
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

messageHandler programMemoryChip()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	obj_id objPlayer= sui.getPlayerId(params);
	if (!isIdValid(objPlayer))
		return SCRIPT_CONTINUE;

	int btn = sui.getIntButtonPressed(params);
	if ( btn == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	int intIndex= sui.getListboxSelectedRow(params);
	if ( intIndex== -1 )
		return SCRIPT_CONTINUE;

	string[] strDroidProgramCommands=utils.getStringArrayScriptVar(objPlayer, "strDroidProgramCommands");
	if(intIndex>strDroidProgramCommands.length-1)
		return SCRIPT_CONTINUE;

	string strCommand = strDroidProgramCommands[intIndex];
	setObjVar(self, "strDroidCommand", strCommand);

	int programSize = space_pilot_command.getDroidProgramSize(strCommand, self);
	setObjVar(self, "programSize", programSize);

	setName(self, "");	//setting value to empty string before re-assigning correct name.

	if (!setName(self, new string_id("space/droid_commands", strCommand+"_chipname")))
		debugServerConsoleMsg( null, "DROID_MEMORY_MODULE.programMemoryChip *** FAILED TO SETNAME.");

	string_id strSpam = new string_id("space/space_interaction", "memory_chip_burnt");
	sendSystemMessage(objPlayer, strSpam);

	sendDirtyObjectMenuNotification (self);

	return SCRIPT_CONTINUE;
}
