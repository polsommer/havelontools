include library.space_utils;
include library.ship_ai;
include library.space_combat;
include library.utils;


// ======================================================================


trigger OnAttach()
{
	dictionary outparams = new dictionary();
	messageTo( self, "bomberStrikeTimeout", outparams, 1200.0f, false ); //This command is a fail-safe cleanup to make sure the bombers don't stick around too long.
	return SCRIPT_CONTINUE;
}





trigger OnDestroy()
{
	if ( hasObjVar(self, "evacuate" ))
	{
		debugServerConsoleMsg( null, "ONdESTROY - evacuating tie bomber unit just destructed. obj_id was: "+self);
		return SCRIPT_CONTINUE;
	}

	debugServerConsoleMsg( null, "ONdESTROY - tie bomber");



	if ( hasObjVar(self, "commanderPlayer" ))
	{
		dictionary outparams = new dictionary();
		outparams.put( "deadBomberId", self );
		/*	ESCORT FIGHTERS ARE NOW BUILT INTO THE PRIMARY SQUAD, AND ARE NO LONGER SEPERATE
		int currentEscortSquadSize = utils.getIntLocalVar (self, "crrntEscrtSqdSz");
		if ( currentEscortSquadSize > 0 )
			outparams.put( "escortSquadId", utils.getIntLocalVar (self, "escortSquadId"));
		else
			outparams.put( "escortSquadId", -1 );
		*/
		space_utils.notifyObject( getObjIdObjVar(self, "commanderPlayer"), "bomberStrikeUnitDestroyed", outparams );	//tell the player that called the strike that we got exploded
	}

	return SCRIPT_CONTINUE;
}


// ----------------------------------------------------------------------



trigger OnSpaceUnitMoveToComplete()		//This should primarily only trigger when the bombers get to their escape point, after they've decided to bug out
{
	debugServerConsoleMsg( null, "ONsPACEuNITmOVEtOcOMPLETE - tie bomber script");

	int squadId = ship_ai.unitGetSquadId(self);
	obj_id[] squaddyList = null;
	if ( ship_ai.isSquadIdValid(squadId) )
		squaddyList = ship_ai.squadGetUnitList(squadId);
	else
		return SCRIPT_CONTINUE;
	for(int i = 0; i<squaddyList.length; i++)	//hyperspace out the bombers
	{
		/*	-- ESCORT FIGHTERS ARE NOW BUILT INTO THE BOMBER'S SQUAD AND NOT A SEPARATE SQUAD
		if ( utils.hasLocalVar(squaddyList[i], "escortSquadId" ))	//hyperspace out the escort fighters
		{
			int currentEscortSquadSize = utils.getIntLocalVar (squaddyList[i], "crrntEscrtSqdSz");
			if ( currentEscortSquadSize > 0 )
			{
				int escortSquadId = utils.getIntLocalVar (squaddyList[i], "escortSquadId");
				obj_id[] escortSquaddyList = ship_ai.squadGetUnitList(escortSquadId);
				for(int j = 0; j<escortSquaddyList.length; j++)
				{
					space_combat.destroyObjectHyperspace(escortSquaddyList[j]);
				}
			}
		}
		*/
		space_combat.destroyObjectHyperspace(squaddyList[i]);
	}
	return SCRIPT_CONTINUE;
}




messageHandler bomberStrikeTimeout()
{
	if ( !isIdValid(self) )
	{
		debugServerConsoleMsg( null, "+++ bomberStrikeTimeout . obj_id of the ship passed into the bomber strike timeout function doesn't come back as valid. What the hey?!?." );
		return SCRIPT_CONTINUE;
	}

	space_combat.destroyObjectHyperspace(self);

	return SCRIPT_CONTINUE;
}
