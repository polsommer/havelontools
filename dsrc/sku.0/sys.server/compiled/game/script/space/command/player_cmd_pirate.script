include library.space_utils;
include library.ship_ai;
include library.space_combat;
include library.utils;


// ======================================================================

trigger OnAttach()
{
	dictionary outparams = new dictionary();
	messageTo( self, "pirateTimeout", outparams, 1200.0f, false ); //This command is a fail-safe cleanup to make sure the bombers don't stick around too long.
	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	if ( hasObjVar(self, "evacuate" ))
	{
		debugServerConsoleMsg( null, "ONdESTROY - evacuating tie bomber unit just destructed. obj_id was: "+self);
		return SCRIPT_CONTINUE;
	}

	debugServerConsoleMsg( null, "ONdESTROY - space pirate");

	dictionary outparams = new dictionary();
	outparams.put( "deadPirateId", self );

	if ( hasObjVar(self, "commanderPlayer" ))
		space_utils.notifyObject( getObjIdObjVar(self, "commanderPlayer"), "pirateUnitDestroyed", outparams );	//tell the player that called the strike that we got exploded

	return SCRIPT_CONTINUE;
}


// ----------------------------------------------------------------------



trigger OnSpaceUnitMoveToComplete()		//This should primarily only trigger when the bombers get to their escape point, after they've decided to bug out
{
	debugServerConsoleMsg( null, "ONsPACEuNITmOVEtOcOMPLETE - space pirate script");

	int squadId = ship_ai.unitGetSquadId(self);
	obj_id[] squaddyList = null;
	if ( ship_ai.isSquadIdValid(squadId) )
		squaddyList = ship_ai.squadGetUnitList(squadId);
	else
		return SCRIPT_CONTINUE;
	for(int i = 0; i<squaddyList.length; i++)	//hyperspace out the bombers
	{
		space_combat.destroyObjectHyperspace(squaddyList[i]);
	}
	return SCRIPT_CONTINUE;
}


messageHandler pirateTimeout()
{
	if ( !isIdValid(self) )
	{
		debugServerConsoleMsg( null, "+++ pirateTimeout . obj_id of the ship passed into the bomber strike timeout function doesn't come back as valid. What the hey?!?." );
		return SCRIPT_CONTINUE;
	}

	space_combat.destroyObjectHyperspace(self);

	return SCRIPT_CONTINUE;
}
