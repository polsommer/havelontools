include library.space_utils;
include library.planetary_map;
include library.objvar_mangle;
include library.space_quest;
include library.space_create;
include library.ship_ai;
include library.utils;
include library.space_battlefield;
include java.lang.Math;
include library.hue;

// npc spawner

trigger OnInitialize()
{
	LOG("space", "ONINTIAILIZE");
	string strTest = ""+self;

	dictionary dctSpawnInfo = dataTableGetRow("datatables/space_content/npc_spawners.iff", strTest);

	if(dctSpawnInfo==null)
	{
		LOG("space", "NO ENTRY FOR "+self);
		obj_id objTest = createObject("object/tangible/gravestone/gravestone01.iff", getLocation(self));
		setName(objTest, "BAD NPC SPAWNER IS HERE!, NO ENTRY IN NPC SPAWNERS DATATABLE");
		return SCRIPT_CONTINUE;
	}

	string strTemplate = dctSpawnInfo.getString("strTemplate");

	// This was added so that if we have something spawning from a space content datatable (like the shipwrights)
	// you can replace them in the table with 'unused' in order to keep them from spawning, but without spitting
	// the warnings that would normally come from just deleting them.
	if (strTemplate == "unused")
	{
		return SCRIPT_CONTINUE;
	}

	location locTest = getLocation(self);

	obj_id objNPC = null;

	try
	{
		objNPC = createObject(strTemplate, getTransform_o2p(self), locTest.cell);
	}
	catch (Throwable err)
	{
		LOG("space", "BAD TEMPLATE FOR "+self);
		locTest.x = locTest.x+1;
		obj_id objTest = createObject("object/tangible/gravestone/gravestone01.iff", locTest);
		setName(objTest, "BAD NPC SPAWNER IS HERE!, BAD TEMPLATE IN NPC SPAWNERS DATATABLE FOR ENTRY "+self+"TEMPLATE IS "+strTemplate);
		return SCRIPT_CONTINUE;
	}

	for(int intI = 1; intI<5; intI++)
	{
		string strScript= dctSpawnInfo.getString("strScript"+intI);
		if(strScript!="")
		{
			//don't try to attach a script that is already attached
			// Dan, if you want to RETROACTIVELY unify the way scripts are attached,
			// see object/mobile/dressed...blahblahblah and update all those templates, k thx
			if ( !hasScript( objNPC, strScript ) )
			{
				int intReturn = attachScript(objNPC, strScript);
				if(intReturn!=SCRIPT_CONTINUE)
				{
					if(!hasScript(objNPC, strScript))
					{
						setName(objNPC, "BAD SCRIPT IN TABLE FOR "+self+" SCRIPT IS "+strScript);
					}
					return SCRIPT_CONTINUE;
				}
			}
		}
	}

	string sidName = dctSpawnInfo.getString("sidName");
	if(sidName!="")
	{
		setName(objNPC, "");
		setName(objNPC, new string_id( "npc_spawner_n", sidName ));
	}

	setInvulnerable( objNPC, true );
	if(isMob(objNPC))
	{
		setCondition( objNPC, CONDITION_SPACE_INTERESTING );
		setCondition( objNPC, CONDITION_CONVERSABLE );
	}

	string strPrimaryCategory = dctSpawnInfo.getString("strPrimaryCategory");
	if(strPrimaryCategory !="")
	{
		string strSecondaryCategory = dctSpawnInfo.getString("strSecondaryCategory");
		LOG("space", "strLocationName [npc_spawner_n]:"+ sidName);
		string_id strMapNameId = new string_id( "npc_spawner_n", sidName );
		obj_id objContainer = getTopMostContainer(self);
		locTest = getLocation(self);

		if(isIdValid(objContainer))
		{
			locTest = getLocation(objContainer);
		}
		addPlanetaryMapLocation(self, utils.packStringId(strMapNameId), (int)locTest.x, (int)locTest.z, strPrimaryCategory, strSecondaryCategory, MLT_STATIC, planetary_map.NO_FLAG);
	}
	return SCRIPT_CONTINUE;
}
