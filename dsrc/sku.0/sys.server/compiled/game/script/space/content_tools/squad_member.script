include library.utils;
include library.ship_ai;
include library.space_utils;
include library.space_create;



// so we're using a distributed formation system
// this is because the parent can die at any given time
// every member of the formatoin has eveyr other member stored
// as well as % alive, and so on..
// parent is the first entry in the thing


trigger OnInitialize()
{



	return SCRIPT_CONTINUE;
}



trigger OnDestroy()
{
	if(hasObjVar(self, "intCleaningUp"))
	{
		//LOG("doLogging", "cleaning up "+self);
		return SCRIPT_CONTINUE;
	}


	int intStartPopulation = utils.getIntScriptVar(self, "intStartPopulation");
	if(intStartPopulation==0)
	{
		//LOG("doLogging", self+" is in a malformed formation, returning");
		return SCRIPT_CONTINUE;
	}
	float fltRemainingPercentage = 0;
	int intMembers = 0;
	int intSquadId = ship_ai.unitGetSquadId(self);
	obj_id[] objMembers = ship_ai.squadGetUnitList(intSquadId);


	for(int intI = 0; intI< objMembers.length; intI++)
	{
		if(isIdValid(objMembers[intI]))
		{
			//LOG("doLogging", objMembers[intI]+" is still valid!");
			intMembers = intMembers +1;
		}
	}
	intMembers = intMembers - 1;
	//LOG("doLogging", "size is "+intMembers);
	if(intMembers>0)
	{
		fltRemainingPercentage = (float)intMembers / (float)intStartPopulation;
		//LOG("doLogging", "startis "+intStartPopulation);
		//LOG("doLogging", "remaining % is "+fltRemainingPercentage);

	}
	float fltThresholdPercentage = utils.getFloatScriptVar(self, "fltDestroyPercentage");
	//LOG("doLogging", "threshold is "+fltThresholdPercentage);
	if(fltRemainingPercentage<=fltThresholdPercentage)
	{
		// we're done.. we register that we died for respawning.
		//Remove the parent objvar from the rest of the squad so they don't attempt to trigger a respawn.

		for(int intI  = 0; intI< objMembers.length; intI++)
		{
			if(isIdValid(objMembers[intI])&&(objMembers[intI]!=self))
			{
				setObjVar(objMembers[intI], "noNotify", 1);
			}
		}

		if(!hasObjVar(self, "noNotify"))
		{
			//LOG("doLogging", "notifying parent of squad destruction");
			obj_id objParent = getObjIdObjVar(self, "objParent");
			dictionary dctParams = new dictionary();
			space_utils.notifyObject(objParent, "childDestroyed", dctParams);
			setObjVar(self, "noNotify", 1);
		}

	}



	return SCRIPT_CONTINUE;
}





