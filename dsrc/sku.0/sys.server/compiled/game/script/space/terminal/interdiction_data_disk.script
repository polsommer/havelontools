// ======================================================================
//
// terminal.terminal_pob_ship
//
// Copyright 2004 Sony Online Entertainment
//
// ======================================================================

include library.space_transition;
include library.static_item;
include library.utils;

// ======================================================================

const string_id SID_READY_ITEM = new string_id("space/space_terminal", "encode_item");


// ======================================================================

const string[] VALID_REGIONS =
	{"space_tatooine",
	"space_corellia",
	"space_dantooine",
	"space_dathomir",
	"space_endor",
	"space_lok",
	"space_naboo",
	"space_yavin4"};

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	
	int idx = utils.getValidAttributeIndex(names);

	if(hasObjVar(self, "difficulty"))
	{
		names[idx] = "difficulty";
		int difficulty = getIntObjVar(self, "difficulty");
		attribs[idx] = " " + difficulty;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	
	if(idx >= names.length)
		return SCRIPT_CONTINUE;

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!isIdValid(player) || !isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	// Item must be in players inventory
	if(!utils.isNestedWithin(self, player))
	{

		return SCRIPT_CONTINUE;
	}
	mi.addRootMenu(menu_info_types.ITEM_USE, SID_READY_ITEM);
	return SCRIPT_CONTINUE;

}

// ----------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!isIdValid(player) || !isIdValid(self) || item <= 0)
	{
		return SCRIPT_CONTINUE;
	}

	if(item == menu_info_types.ITEM_USE)
	{
		if(!hasObjVar(self, "difficulty") || !utils.isNestedWithin(self, player))
		{
			//Item is missing difficulty or were in space or ites not in our inventory
			return SCRIPT_CONTINUE;
		}

		obj_id term = getTerminal(player);
		if(isIdValid(term) && exists(term))
		{
			encodeTerminal(self, player);
			return SCRIPT_CONTINUE;
		}
		
		sendSystemMessage(player, "You must have an unencoded Interdiction Burst Generator in your inventory to use this item", null);
	}

	return SCRIPT_CONTINUE;
}

obj_id getTerminal(obj_id player)
{
	if(!isIdValid(player))
	{
		return null;
	}
	// We want to scan through the players inventory for a useable terminal
	obj_id inventory = utils.getInventoryContainer(player);
	obj_id[] inventoryContents = getContents(inventory);
	for(int i = 0; i < inventoryContents.length; i++)
	{
		/*if(static_item.isStaticItem(inventoryContents[i]))
		{
			string itemName = getStaticItemName(inventoryContents[i]);
			if(itemName == "item_interdiction_terminal_01_01")
			{
				// We found a terminal thats not already encoded
				if(!hasObjVar(inventoryContents[i], "difficulty"))
				{
					return inventoryContents[i];

				}
			}
		}*/
		string strItemTemplate = getTemplateName(inventoryContents[i]);
		{
			if(strItemTemplate.equals("object/tangible/space/mission_objects/interdiction_terminal.iff"))
			// We found a terminal thats not already encoded
			if(!hasObjVar(inventoryContents[i], "difficulty"))
			{
				return inventoryContents[i];
			}
		}
	}
	return null;
}

void encodeTerminal(obj_id self, obj_id player)
{

	obj_id terminal = getTerminal(player);
	if(!isIdValid(self) || !isIdValid(terminal))
	{
		return;
	}

	// We want to find a zone and add it
	int i = rand(0, VALID_REGIONS.length-1);
	string zone = VALID_REGIONS[i];
	setObjVar(terminal, "region", zone);
	// we want to find a random loc + zone and add it
	float x = rand(-5000.f, 5000.f);
	float y = rand(-5000.f, 5000.f);
	float z = rand(-5000.f, 5000.f);
	location loc = new location (x, y, z, zone);
	setObjVar(terminal, "location", loc);
	
	// We want to add the difficulty to the terminal
	int dif = getIntObjVar(self, "difficulty");
	if(dif > 0 && dif <= 5)
	{
		setObjVar(terminal, "difficulty", dif);
	}
	
	static_item.decrementStaticItem(self);
	
	return;

}
