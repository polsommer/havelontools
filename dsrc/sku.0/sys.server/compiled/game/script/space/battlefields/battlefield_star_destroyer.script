include library.space_utils;
include library.objvar_mangle;
include library.space_quest;
include library.space_battlefield;
include library.space_create;
include library.ship_ai;
include library.utils;
include java.lang.Math;
include library.hue;
//hardcoded escort spawner

trigger OnAttach()
{	


	

	const string[] strPaths = 	{
					"imperialTest1", 
					"imperialTest2", 
					"imperialTest3", 
					"imperialTest4", 
					"imperialTest5"					
					};
	const int[] intPathCounts = 	{
					7,
					7,
					7,
					7,
					7
					}; // how many path nodes in each 
	

	
	string strObjVars = "fltMaxSpawnDistance|2|120.000000|fltMaxSpawnTime|2|600.000000|fltMinSpawnDistance|2|90.000000|fltMinSpawnTime|2|180.000000|intActivationPhase|0|2|intSpawnCount|0|20|strDefaultBehavior|4|specialty|strPatrolPoints_mangled.count|0|7|strPatrolPoints_mangled.segment.0|5|imperial_invasion_1_1:imperial_invasion_1_2:imperial_invasion_1_3:imperial_invasion_1_4:imperial_invasion_1_5:imperial_invasion_1_6:imperial_invasion_1_7:|strSpawnerName|4|imperial_invasion_1|strSpawnerType|4|generic|strSpawns_mangled.count|0|5|strSpawns_mangled.segment.0|5|squad_stardestroyer_1:squad_stardestroyer_2:squad_stardestroyer_3:squad_stardestroyer_4:squad_stardestroyer_5:|$|";
	setPackedObjvars(self, strObjVars);
	string strPilot = "capital_ship_tier5";;
	setObjVar(self, "ship.pilotType", strPilot);
	setObjVar(self, "strMyName", "star_destroyer");
	setObjVar(self, "strTargetName", "rebel_station");
	setObjVar(self, "strPaths", strPaths);
	setObjVar(self, "intPathCounts", intPathCounts);
	int intMinCredits = 10000;
	int intMaxCredits = 20000;
	setObjVar( self, "loot.intCredits", rand(intMinCredits, intMaxCredits) );
	
	int intXP = 10000;
	setObjVar( self, "xp.intXP", intXP );		
	setObjVar(self, "intActivationPhase", 2);	
	setObjVar(self, "intNoCleanup", 1);
	string strFaction = "imperial";
	setObjVar(self, "ship.space_faction", strFaction);
	setShipFaction(self, strFaction);
	obj_id objManager = space_battlefield.getManagerObject();	
	int intSpawnsAllowed = getIntObjVar(objManager, "intImperialShipCount");	
	if(intSpawnsAllowed<10)
	{
		intSpawnsAllowed = 10;
	}
	
	//setObjVar(self, "intSpawnsAllowed", intSpawnsAllowed*10);	
	attachScript(self, "space.battlefields.battlefield_spawner");
	attachScript(self, "space.content_tools.spawner");	
	messageTo(self, "startSpawning", null, 3, false);	
	return SCRIPT_CONTINUE;
}

messageHandler spawnCountReached()
{
	//detachScript(self, "space.content_tools.spawner");
	return SCRIPT_CONTINUE;

}
trigger OnDestroy()
{
	obj_id objManager = space_battlefield.getManagerObject();
	// reset
		// KABOOM!
	LOG("space", "KABOOM STAR DESTROYER");
	if(hasObjVar(self, "intCleaningUp"))
	{
		return SCRIPT_CONTINUE;		
	}	
	else
	{
		
		space_battlefield.battlefieldCompleted(objManager, space_battlefield.STATE_REBEL); // flip kessel to rebel
		if(!utils.hasScriptVar(objManager, "intResetting"))
		{
			utils.setScriptVar(objManager, "intResetting", 1);
			messageTo(objManager, "resetBattlefield", null, space_battlefield.RESET_TIME, false);
			CustomerServiceLog("battlefield", "STAR DESTROYER  destroyed in Battlefield Zone, flipping kessel to rebel");
		}
		else
		{
			CustomerServiceLog("battlefield", "STAR DESTROYER  destroyed in Battlefield Zone, Not flipping because the imperials won first.");
		}
		
	}
	return SCRIPT_CONTINUE;
}


