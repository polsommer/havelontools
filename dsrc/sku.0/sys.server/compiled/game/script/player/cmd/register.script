/***** INCLUDES ********************************************************/

include library.utils;
include library.factions;
include library.planetary_map;

/***** INCLUDES ********************************************************/

/***** CONSTANTS *******************************************************/

const string_id SID_CANNOT_REGISTER_BAD_LOC		 = new string_id("register", "cannot_register_bad_loc");
const string_id SID_CANNOT_REGISTER_NO_SUPPORT	 = new string_id("register", "cannot_register_no_support");
const string_id SID_CANNOT_REGISTER_NOT_NEUTRAL	 = new string_id("register", "cannot_register_not_neutral");
const string_id SID_CANNOT_REGISTER_WRONG_FACTION = new string_id("register", "cannot_register_wrong_faction");
const string_id SID_CANNOT_REGISTER_ALREADY_REG	 = new string_id("register", "cannot_register_already_reg");
const string_id SID_SUCCESS_REGISTER			 = new string_id("register", "success_register");
const string_id SID_CANNOT_REGISTER_LACK_SKILL	 = new string_id("register", "cannot_register_lack_skill");

/***** COMMANDHANDLERS**************************************************/
commandHandler cmdRegisterWithLocation()
{
	obj_id updateTarget = null;

	obj_id topMost = getTopMostContainer(self);
	if ( !isIdValid(topMost) || topMost == self )
	{
		//check for existence of a camp!
		obj_id camp = utils.getObjIdScriptVar(self, "camp.current");
		if ( isIdValid(camp) )
		{
			if ( hasSkill(self, "social_dancer_novice") || hasSkill(self, "social_musician_novice") ||
					hasSkill(self, "science_doctor_novice") )
			{
				updateTarget = camp;
			}
		}
	}
	else
	{
		map_location maploc = getPlanetaryMapLocation(topMost);
		if ( maploc == null )
		{
			sendSystemMessage(self, SID_CANNOT_REGISTER_BAD_LOC);
			return SCRIPT_CONTINUE;
		}

		if ( !maploc.isActive() && !maploc.isInactive() )
		{
			sendSystemMessage(self, SID_CANNOT_REGISTER_NO_SUPPORT);
			return SCRIPT_CONTINUE;
		}

		if ( hasObjVar(topMost, "healing.canhealwound") )
		{
			//its a hospital
			if ( hasSkill(self, "science_doctor_novice") )
				updateTarget = topMost;
		}

		if ( hasObjVar(topMost, "healing.canhealshock") )
		{
			//its a cantina
			if ( hasSkill(self, "class_entertainer_phase1_novice"))
				updateTarget = topMost;
		}
	}

	if ( isIdValid(updateTarget) )
	{
		/*string tFac = factions.getFaction(updateTarget);
		string myFac = factions.getFaction(self);
		//debugSpeakMsg(self,"tfac = " + tFac + " myfac = " + myFac);
		if ( tFac != null && !tFac.equals("") )
		{
			if ( myFac == null  || myFac.equals("") )
			{
				sendSystemMessage(self, SID_CANNOT_REGISTER_NOT_NEUTRAL);
				return SCRIPT_CONTINUE;
			}
			else if ( factions.areFactionsOpposed(tFac, myFac) )
			{
				sendSystemMessage(self, SID_CANNOT_REGISTER_WRONG_FACTION);
				return SCRIPT_CONTINUE;
			}
		} ABANDON ALL HOPE AS YE OLDE BULLSHIT IS ABOVE THIS LINE!
		*/
		resizeable obj_id[] registrants = utils.getResizeableObjIdBatchScriptVar(updateTarget, "registrants");
		if ( registrants != null && registrants.length > 0 )
		{
			if ( utils.getElementPositionInArray(registrants, self) > -1 )
			{
				sendSystemMessage(self, SID_CANNOT_REGISTER_ALREADY_REG);
				return SCRIPT_CONTINUE;
			}
		}

		if ( planetary_map.updateFacilityActive(updateTarget, true) )
		{
			if ( !hasScript(updateTarget, "planet_map.active_registered") )
				attachScript(updateTarget, "planet_map.active_registered");

			registrants = utils.addElement(registrants, self);
			utils.setBatchScriptVar(updateTarget, "registrants", registrants);

			sendSystemMessage(self, SID_SUCCESS_REGISTER);
			utils.setScriptVar(self, "registerWithLocation", updateTarget);
		}
	}
	else
	{
		sendSystemMessage(self, SID_CANNOT_REGISTER_LACK_SKILL);
	}

	return SCRIPT_CONTINUE;
}
