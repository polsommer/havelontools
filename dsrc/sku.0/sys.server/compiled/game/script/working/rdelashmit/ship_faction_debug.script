
// ======================================================================

include library.space_transition;

// ======================================================================

const string[] factionStrings =
{
	"aynat",
	"beta_neutral",
	"blacksun",
	"borvo",
	"civilian",
	"corsec",
	"hutt",
	"imperial",
	"jabba",
	"merchant",
	"nym",
	"pirate",
	"rebel",
	"rebel_suspect",
	"rsf",
	"smuggler",
	"spynet",
	"station",
	"true_neutral",
	"unattackable",
	"valarian"
};

// ======================================================================

trigger OnSpeaking(string text)
{
	if (text.equalsIgnoreCase("targetfactioninfo"))
	{
		obj_id target = getLookAtTarget(self);
		if (!isIdValid(target))
			sendSystemMessageTestingOnly(self, "Target something, then say targetfactioninfo again.");
		else
		{
			sendSystemMessageTestingOnly(self, "Target Faction Info for " + target);
			int faction = shipGetSpaceFaction(target);
			int[] allies = shipGetSpaceFactionAllies(target);
			int[] enemies = shipGetSpaceFactionEnemies(target);
			boolean isAggro = shipGetSpaceFactionIsAggro(target);
			boolean isEnemy = pvpIsEnemy(target, space_transition.getContainingShip(self));

			sendSystemMessageTestingOnly(self, "Faction: " + faction + " (" + getFactionString(faction) + ")");
			if (allies != null)
				for (int i = 0; i < allies.length; ++i)
					sendSystemMessageTestingOnly(self, "AlliedFaction: " + allies[i] + " (" + getFactionString(allies[i]) + ")");
			if (enemies != null)
				for (int i = 0; i < enemies.length; ++i)
					sendSystemMessageTestingOnly(self, "EnemyFaction: " + enemies[i] + " (" + getFactionString(enemies[i]) + ")");
			sendSystemMessageTestingOnly(self, "IsAggro: " + isAggro + " isEnemy: " + isEnemy);
		}
		return SCRIPT_OVERRIDE;
	}
	return SCRIPT_CONTINUE;
}

// ======================================================================

string getFactionString(int faction)
{
	for (int i = 0; i < factionStrings.length; ++i)
		if (getStringCrc(factionStrings[i]) == faction)
			return factionStrings[i];
	return "<< unknown >>";
}

// ======================================================================

