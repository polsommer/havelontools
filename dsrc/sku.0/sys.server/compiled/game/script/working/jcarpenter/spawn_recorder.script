include library.datatable;
include java.util.StringTokenizer;

trigger OnAttach()
{
	if(!hasObjVar(self, "record_table"))
		sendSystemMessageTestingOnly(self, "Attach the objvar 'record_table' to yourself with the name of the table to which you want to record");
	else
	{
		string table = getStringObjVar(self, "record_table");
		sendSystemMessageTestingOnly(self, "Recording to table: " + table);
		sendSystemMessageTestingOnly(self, "If this is not correct, change the value of the objvar 'record_table'");
	}

	sendSystemMessageTestingOnly(self, "Say 'mark <creature name>' to place a creature or npc at your current location and heading");

	return SCRIPT_CONTINUE;
}

trigger OnSpeaking(string text)
{
	if(!toLower(text).startsWith("mark"))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "record_table"))
	{
		sendSystemMessageTestingOnly(self, "[ERROR] No datatable specified for recording");
		return SCRIPT_CONTINUE;
	}

	string table = getStringObjVar(self, "record_table");

	if(!toLower(table).startsWith("datatables") || !toLower(table).endsWith(".tab"))
	{
		sendSystemMessageTestingOnly(self, "[ERROR] Invalid datatable specified for recording");
		return SCRIPT_CONTINUE;
	}

	StringTokenizer st = new StringTokenizer(text);

	string command = st.nextToken();
	string creature = "";

	if(st.hasMoreTokens())
		creature = st.nextToken();

	obj_id obj = self;

	if(command.equalsIgnoreCase("markthis"))
	{
		obj = getLookAtTarget(self);
		creature = getTemplateName(obj);
	}

	location here = getLocation(obj);
	float yaw = getYaw(obj);

	obj_id room = here.cell;
	obj_id top = getTopMostContainer(obj);

	string roomName = getRoomName(top, room);

	sendSystemMessageTestingOnly(self, "Spawning: " + creature + "  Location: " + here + "  Heading: " + yaw);

	dictionary dctRow = new dictionary ();
    dctRow.put ("spawns", creature);
    dctRow.put ("loc_x", here.x);
    dctRow.put ("loc_y", here.y);
    dctRow.put ("loc_z", here.z);
    dctRow.put ("room", roomName);
    dctRow.put ("yaw", yaw);

    datatable.serverDataTableAddRow(table, dctRow);

	return SCRIPT_CONTINUE;
}

string getRoomName(obj_id building, obj_id cell)
{
	string[] allCells = getCellNames(building);
	int numberOfCells = allCells.length;

	for(int i = 0; i < numberOfCells; i++)
	{
		string cellName = allCells[i];
		obj_id thisCell = getCellId(building, cellName);

		if(thisCell == cell)
			return cellName;
	}

	return "no_match";
}