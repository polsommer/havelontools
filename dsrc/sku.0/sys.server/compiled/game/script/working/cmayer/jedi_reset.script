include library.utils;
include library.pclib;
include library.sui;
include java.util.StringTokenizer;

// We can change the name of the script and the command used to reset the jedi here
const string SCRIPT_NAME = "cmayer.jedi_reset";
const string COMMAND	 = "reset_jedi";

const string JEDI_TABLE  = "datatables/jedi/jedi_skill_requirements.iff";


/**********************************************************************************
 ***
 ***  This is the main function for resetting the jedi. If there is a call made to
 ***  a C function that will handle the back-end account stuff, it will need to go
 ***  in here.
 ***
 **********************************************************************************/
void resetJedi(obj_id self, obj_id target, int numSkills) {

	boolean result = true;

	// If we need to add a call to some C code and it returns a boolean result based
	// on the success of the function, we can use that to determine whether or not we
	// need to reset the skill requirements.
	//
	// result = ** add C code call here **;

	if(result) {

		removeOldJediData(target);
		setNewSkillReq(target, numSkills);

		sendSystemMessageTestingOnly(self, "Jedi requirements have successfully been reset");

	} else {

		sendSystemMessageTestingOnly(self, "Jedi requirements were not reset");
	}

	return;
}

/**********************************************************************************
 ***  TRIGGERS
 **********************************************************************************/

//
// We will only allow this script to be attached to accounts with god mode level 50
//
trigger OnAttach()
{
	if(!isGod(self) || (getGodLevel(self) < 50)) 
	{
		int numSkills = 8;
		if (hasObjVar(self, "numJediSkillsToReset"))
		{
			numSkills = getIntObjVar(self, "numJediSkillsToReset");
		}

		resetJedi(self, self, numSkills);
		detachScript(self, SCRIPT_NAME);
	}

	return SCRIPT_CONTINUE;

}


trigger OnInitialize()
{
	if(!isGod(self) || (getGodLevel(self) < 50)) 
	{
		int numSkills = 8;
		if (hasObjVar(self, "numJediSkillsToReset"))
		{
			numSkills = getIntObjVar(self, "numJediSkillsToReset");
		}

		resetJedi(self, self, numSkills);
		detachScript(self, SCRIPT_NAME);
	}

	return SCRIPT_CONTINUE;

}


trigger OnSpeaking(string text) {

	if(toLower(text).startsWith(COMMAND)) {

		StringTokenizer st = new StringTokenizer(text);

		if(st.countTokens() != 2) {

			sendSystemMessageTestingOnly(self, "Error: Syntax is \"" + COMMAND + " <number of skills>\"");

			return SCRIPT_CONTINUE;
		}

		string command = st.nextToken();

		int numSkills = utils.stringToInt(st.nextToken());

		if((numSkills < 1) || (numSkills > 8)) {

			sendSystemMessageTestingOnly(self, "Error: Number of skills must be 1-8");

			return SCRIPT_CONTINUE;
		}

		obj_id target = getLookAtTarget(self);

		if(target == null || !isIdValid(target) || !isPlayer(target)) {

			sendSystemMessageTestingOnly(self, "Error: You must target a valid player");

			return SCRIPT_CONTINUE;
		}

		// This was intended to be a warning before a reset is performed on a player that does not have
		// a force sensitive slot. Unfortunately, it appears that hasJediSlot is always returning false
		// even if FS slot exists. Therefore we will go with the next best warning. If a player has
		// achieved all the skills necessary to get an FS slot, he or she should have the jedi.enabled
		// objvar.
		//
		// if(!hasJediSlot(target)) {

		if(!hasObjVar(target, "jedi.enabled")) {

			string error  = "WARNING: It appears that " + getName(target) + " ";
			error += "has not yet met the requirements to activate a force sensitive ";
			error += "slot.\n\nDo you still wish to continue resetting this player's ";
			error += "Jedi requirements?";

			showWarningSui(self, target, numSkills, error);

			return SCRIPT_CONTINUE;
		}

		resetJedi(self, target, numSkills);
	}

	return SCRIPT_CONTINUE;
}


/**********************************************************************************
 ***  Warning Functions
 **********************************************************************************/

void showWarningSui(obj_id self, obj_id target, int numSkills, string msg) {

	int pid = sui.msgbox(self, self, msg, sui.YES_NO, "RESET JEDI", "handleWarningSui");

	if(pid > -1) {

		utils.setScriptVar(self, "resetJedi_target", target);
		utils.setScriptVar(self, "resetJedi_numSkills", numSkills);
	}

	return;
}

messageHandler handleWarningSui() {

	int bp = sui.getIntButtonPressed(params);

	if(bp == sui.BP_CANCEL)
		return SCRIPT_CONTINUE;

	obj_id target = utils.getObjIdScriptVar(self, "resetJedi_target");
	int numSkills = utils.getIntScriptVar(self, "resetJedi_numSkills");

	if(target == null || !isIdValid(target)) {

		sendSystemMessageTestingOnly(self, "Error: Jedi requirements did not reset");

		return SCRIPT_CONTINUE;
	}

	if(numSkills < 1 || numSkills > 8) {

		sendSystemMessageTestingOnly(self, "Error: Jedi requirements did not reset");

		return SCRIPT_CONTINUE;
	}

	resetJedi(self, target, numSkills);

	return SCRIPT_CONTINUE;
}


/**********************************************************************************
 ***  Custom Function Definitions
 **********************************************************************************/

void removeOldJediData(obj_id target) {

	if(hasObjVar(target, pclib.OBJVAR_JEDI_SKILL_REQUIREMENTS)) {

		removeObjVar(target, pclib.OBJVAR_JEDI_SKILL_REQUIREMENTS);
	}

	if(hasObjVar(target, "jedi.timeStamp")) {

		removeObjVar(target, "jedi.timeStamp");
	}

	if(hasObjVar(target, "jedi.enabled")) {

		removeObjVar(target, "jedi.enabled");
	}

	if(hasObjVar(target, "jediAddedAcknowlege")) {

		removeObjVar(target, "jediAddedAcknowlege");
	}

	return;
}

void setNewSkillReq(obj_id target, int numSkills) {

	int rows = dataTableGetNumRows(JEDI_TABLE);

	if(numSkills < 1)
		numSkills = 1;

	if(numSkills > 8)
		numSkills = 8;

	string[] skills = new string[numSkills];

	int n = 0;

	while(n < numSkills) {

		string skill = dataTableGetString(JEDI_TABLE, rand(0, (rows-1)), 0);

		if(skill != null && !skill.equals("")) {

			boolean skillNotUsed = true;

			for(int i = 0; i < n; i++) {

				if(skills[i] != null && !skills[i].equals("")) {

					if(skills[i].equals(skill))
						skillNotUsed = false;
				}
			}

			if(skillNotUsed) {

				skills[n] = skill;

				n++;
			}
		}
	}

	setObjVar(target, pclib.OBJVAR_JEDI_SKILL_REQUIREMENTS, skills);			// Suppress lint -- We know that the array will always
																				// 				    be at least 1 to 8 elements long

	return;
}