include library.space_utils;
include library.space_combat;
include library.space_transition;
include library.space_crafting;
include library.create;
include library.utils;
include library.sui;

include library.space_create;

const string SPACE_MINING_STF						= "space_mining";

trigger OnSpeaking(string strText)
{
	string[] strCommands = split(strText, ' ' );
	obj_id objInventory = utils.getInventoryContainer(self);

	if(strCommands[0].equalsIgnoreCase("letsGoMining"))
	{

		obj_id weapon1 = createObjectOverloaded("object/tangible/ship/components/weapon/wpn_mining_laser_mk2.iff", objInventory);
		obj_id weapon2 = createObjectOverloaded("object/tangible/ship/components/weapon/wpn_tractor_pulse_gun.iff", objInventory);

		obj_id newship = space_utils.createShipControlDevice(self, "xwing", true);

		if (isIdValid(newship))
		{
			obj_id ship = space_transition.getShipFromShipControlDevice(newship);
			obj_id comp1 = shipUninstallComponent(self, ship , 12, objInventory);
			destroyObject(comp1);
			shipInstallComponent(self, ship, 12, weapon1);
			obj_id comp2 = shipUninstallComponent(self, ship , 13, objInventory);
			destroyObject(comp2);
			shipInstallComponent(self, ship, 13, weapon2);
		}





		return SCRIPT_CONTINUE;
	}

	/*if(strCommands[0].equalsIgnoreCase("myOwnPrivateAsteroid"))
	{

		string strAsteroidTable = "datatables/space_mining/mining_asteroids.iff";

		obj_id ship = getPilotedShip(self);

		location astLocation = getLocation(ship);
		astLocation.x = astLocation.x + 100;
		astLocation.y = astLocation.y + 100;
		astLocation.z = astLocation.z + 100;

		int choice = rand(1, 2);
		string template = dataTableGetString(strAsteroidTable, "ice", choice);
		obj_id objAsteroid = createObject(template, astLocation);

		setObjVar(objAsteroid, "strAsteroidType", "ice");
		setObjVar(objAsteroid, "intMinResourcePool", 1000);
		setObjVar(objAsteroid, "intMaxResourcePool", 1000);
		setObjVar(objAsteroid, "intDangerLevel", 1);
		setObjVar(objAsteroid, "intDangerPct", 3);


		return SCRIPT_CONTINUE;

	}*/


	if(strCommands[0].equalsIgnoreCase("asteroidScan"))
	{
		location selfLocation = getLocation(self);

		obj_id[] objectsInRange = getObjectsInRange(selfLocation, 10000.0f);

		resizeable string[] entries = new string[];
		resizeable location[] locations = new location[];

		for (int i = 0; i < objectsInRange.length; i++)
		{
			if(hasObjVar(objectsInRange[i], "mining_asteroid.numShipsSpawned"))
			{
				sendSystemMessageTestingOnly(self, "Found asteroid within 10000 meters!");
				string strAsteroidType = getStringObjVar(objectsInRange[i], "strAsteroidType");
				location asteroid = getLocation(objectsInRange[i]);
				locations = utils.addElement(locations, asteroid);
				entries = utils.addElement(entries, "Found asteroid of type: " + strAsteroidType + " at location " + asteroid);

			}
		}

		string prompt = "Asteroid Scan Results!  Pick an asteroid and get a waypoint, yo.";
		string title = "Asteroid Scan Results";
		utils.setScriptVar(self, "mining_scan.locations", locations);
		int pid = sui.listbox(self, self, prompt, sui.OK_ONLY, title, entries, "handleGiveWaypoint", false, false);

		if (pid > -1)
		{
			showSUIPage(pid);
		}

		return SCRIPT_CONTINUE;
	}





	return SCRIPT_CONTINUE;
}

messageHandler handleGiveWaypoint()
{
	int intButton = sui.getIntButtonPressed(params);

	if (intButton== sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	int row = sui.getListboxSelectedRow(params);

	location[] locations = utils.getLocationArrayScriptVar(self, "mining_scan.locations");

	location waypointLoc = locations[row];

	obj_id waypoint = createWaypointInDatapad(self, waypointLoc);

	setName(waypoint, "Asteroids R H33r!");

	return SCRIPT_CONTINUE;
}

void launch(obj_id player, obj_id ship, obj_id[] membersApprovedByShipOwner, location warpLocation, location groundLoc)
{
	//sendSystemMessageTestingOnly(player, "(unlocalized) Launching...");
	space_transition.clearOvertStatus(ship);
	resizeable obj_id[] groupMembersToWarp = utils.addElement(null, player);
	resizeable int[] groupMemberStartIndex = utils.addElement(null, 0);
	utils.setScriptVar(player, "strLaunchPointName", "launching");
	resizeable location[] shipStartLocations = space_transition.getShipStartLocations(ship);
	if (shipStartLocations != null && shipStartLocations.length > 0)
	{
		int startIndex = 0;
		location playerLoc = getLocation(player);
		if (isIdValid(playerLoc.cell))
		{
			obj_id group = getGroupObject(player);
			if (isIdValid(group))
			{
				obj_id[] groupMembers = getGroupMemberIds(group);
				for (int i = 0; i < groupMembers.length; ++i)
				{
					if (groupMembers[i] != player
						&& exists(groupMembers[i])
						&& getLocation(groupMembers[i]).cell == playerLoc.cell
						&& groupMemberApproved(membersApprovedByShipOwner, groupMembers[i]))
					{

						startIndex = getNextStartIndex(shipStartLocations, startIndex);
						if (startIndex <= shipStartLocations.length)
						{
							groupMembersToWarp = utils.addElement(groupMembersToWarp, groupMembers[i]);
							groupMemberStartIndex = utils.addElement(groupMemberStartIndex, startIndex);
						}

						else
						{
							string_id strSpam = new string_id("space/space_interaction", "no_space_expansion");
							sendSystemMessage(groupMembers[i], strSpam);
						}
					}
				}
			}
		}
	}

	for (int i = 0; i < groupMembersToWarp.length; ++i)
	{
		space_transition.setLaunchInfo(groupMembersToWarp[i], ship, groupMemberStartIndex[i], groundLoc);
		warpPlayer(
			groupMembersToWarp[i],
			warpLocation.area,
			warpLocation.x, warpLocation.y, warpLocation.z,
			null,
			warpLocation.x, warpLocation.y, warpLocation.z);
	}
	//sendSystemMessageTestingOnly(player, "(unlocalized) Finishing launch sequence...");
}

int getNextStartIndex(resizeable location[] shipStartLocations, int lastStartIndex)
{
	int startIndex = lastStartIndex+1;

	// If we have more players than start locations, see if we have any start
	// locations in cells and reuse those.  We assume that all start locations
	// not in cells come at the beginning of the list.

	if (startIndex > shipStartLocations.length)
	{
		for (startIndex = 1; startIndex <= shipStartLocations.length; ++startIndex)
			if (shipStartLocations[startIndex-1].cell != null)
				break;
	}

	return startIndex;
}

boolean groupMemberApproved(obj_id[] membersApprovedByShipOwner, obj_id memberToTest)
{
	for (int i = 0; i < membersApprovedByShipOwner.length; ++i)
	{
		if (membersApprovedByShipOwner[i] == memberToTest)
		{
			return true;
		}
	}
	return false;
}