/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        ai_corpse.script
 * Description:  ai corpse script: to be attached to killed creatures
 * @author       $Author:$
 * @version      $Revision:$
 */

/***** INCLUDES ********************************************************/

include library.pet_lib;
include library.beast_lib;
include library.utils;
include library.corpse;
include library.permissions;
include library.money;
include library.prose;
include library.group;
include library.ai_lib;
include library.loot;
include library.smuggler;

/***** INHERITS ********************************************************/

/***** CONSTANTS *******************************************************/

const string_id SID_NO_ITEMS = new string_id( "loot_n", "no_items" );
const string_id SID_NOT_IN_COMBAT = new string_id( "loot_n", "not_in_combat" );

/***** TRIGGER *********************************************************/
trigger OnAttach()
{
	setCreatureStatic(self, true);
	
	if(beast_lib.isBeast(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id inventory = utils.getInventoryContainer(self);
	if ( !hasScript(inventory, corpse.SCRIPT_AI_CORPSE_INVENTORY) )
	{
		attachScript(inventory, corpse.SCRIPT_AI_CORPSE_INVENTORY);
	}
	utils.setScriptVar( self, "timeLootable", getGameTime() + 1 );
 	messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, corpse.AI_CORPSE_EXPIRATION_TIME, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(beast_lib.isBeast(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	boolean canOpen = corpse.hasLootPermissions(self, player);

	int mnu = -1;
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.LOOT);
	
	if ( mid == null )
	{
		mnu = mi.addRootMenu (menu_info_types.LOOT, new string_id("",""));
	}
	else
	{
		mid.setServerNotify(true);
		mnu = mid.getId();
	}

	if ( mnu > 0 )
	{
		if ( canOpen )
		{
			if ( canHarvest( self, player ) )
			{
				int[] hasResource = getIntArrayObjVar(self, corpse.VAR_HAS_RESOURCE);
				if ( hasResource != null )
				{
					int hm = mi.addRootMenu( menu_info_types.SERVER_HARVEST_CORPSE, corpse.SID_HARVEST_CORPSE );
					if ( hasResource[corpse.CCR_MEAT] > 0 )
						mi.addSubMenu( hm, menu_info_types.SERVER_MENU5, corpse.SID_HARVEST_MEAT );

					if ( hasResource[corpse.CCR_HIDE] > 0 )
						mi.addSubMenu( hm, menu_info_types.SERVER_MENU6, corpse.SID_HARVEST_HIDE );

					if ( hasResource[corpse.CCR_BONE] > 0 )
						mi.addSubMenu( hm, menu_info_types.SERVER_MENU7, corpse.SID_HARVEST_BONE );
				}
			}
		}
	}


	string strLootTable = getStringObjVar(self, "loot.lootTable");
	// Contraband is not available on non-npcs or previously searched corpses.
	if ( strLootTable == null || strLootTable.length() < 1 )
	{
		return SCRIPT_CONTINUE;
	}
	
	if((!strLootTable.startsWith("npc") && !strLootTable.startsWith("droid")) || utils.hasScriptVar(self, "contrabandChecked"))
	{
		return SCRIPT_CONTINUE;
	}
	
	string playerClass = getSkillTemplate(player);

	// Level 10 smugglers can search corpses for contraband.
	if(isIdValid(player) && canOpen && playerClass.startsWith("smuggler") && getLevel(player) > 9)
	{
		mnu = mi.addRootMenu(menu_info_types.SERVER_MENU1, new string_id("smuggler/items", "mnu_find_illicit_goods"));
	}


	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( getState( player, STATE_COMBAT ) == 1 )
	{
		sendSystemMessage( player, SID_NOT_IN_COMBAT );
		return SCRIPT_OVERRIDE;
	}
	
	if ( utils.getDistance2D( self, player) > 10 )
		return SCRIPT_OVERRIDE;
	
	if(beast_lib.isBeast(self))
	{
		return SCRIPT_CONTINUE;
	}

	int timeLootable = utils.getIntScriptVar( self, "timeLootable" );
	int currentTime = getGameTime();
	if ( timeLootable >= currentTime )
		return SCRIPT_OVERRIDE;
		
			
	//debugSpeakMsg(player, "OnObjectMenuSelect: selected item = " + item);
	boolean canOpen = corpse.hasLootPermissions(self, player);

	if ( !isMob(self) )
	{
		return SCRIPT_OVERRIDE;
	}

	if ( !isIncapacitated(self) )
	{
		return SCRIPT_OVERRIDE;
	}

	if ( isIncapacitated(player))
	{
		return SCRIPT_OVERRIDE;
	}

	if ( pet_lib.isPet (self))
	{
		return SCRIPT_OVERRIDE;
	}

	if ( !hasObjVar(self, "readyToLoot") )
	{
		return SCRIPT_OVERRIDE;
	}


	// Search a corpse for contraband.
	if ( item == menu_info_types.SERVER_MENU1)
	{
		string playerClass = getSkillTemplate(player);

		// Level 10 smugglers can search corpses for contraband.
		if(isIdValid(player) && canOpen && playerClass.startsWith("smuggler") && getLevel(player) > 9)
		{
			smuggler.inspectCorpseForContraband(player, self);
		}
	}

	// Corpse looting
	obj_id inv = utils.getInventoryContainer(self);
	obj_id[] items = getContents(inv);
	boolean emptyCorpse = ( items == null || items.length < 1 );

	if ( item == menu_info_types.LOOT)
	{
		if ( canOpen )
		{
			if ( isIdValid(inv) )
			{
				if ( !isIdValid(player) || !isPlayer(player) || getContainerType(self) == 0 )
				{
					return SCRIPT_OVERRIDE;
				}

				if (pet_lib.isPet(self))
				{
					return SCRIPT_OVERRIDE;
				}

				if (group.isGrouped (player))
				{
					obj_id team = getGroupObject(player);
					int lootRule = getGroupLootRule (team);

					if (lootRule == group.MASTER_LOOTER) // master looter
					{
						// somehow were transfering when not the master looter
						if (!loot.doGroupLootAllCheck (player, self))
						{
							return SCRIPT_OVERRIDE;
						}
					}

					else if (lootRule == group.LOTTERY) // Lottery, we don't let you open individual objects
					{
						if (hasObjVar (self, "allowedToOpenFromFailedTransfer_" + player ))
						{
							// we previously won this item.
							if (!emptyCorpse)
								queueCommand(player, ##"openContainer", inv, "", COMMAND_PRIORITY_DEFAULT);
							else
							{
								sendSystemMessage( player, SID_NO_ITEMS );
								if (!canHarvest(self,player) && !utils.hasScriptVar(self,"quickDestroy") )
								{
									utils.setScriptVar(self,"quickDestroy", true);
									messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, 2.0f, false);
								}
							}
							return SCRIPT_CONTINUE;
						}

						if (!loot.doGroupLootAllCheck (player, self))
						{
							return SCRIPT_OVERRIDE;
						}
					}
				}

				if (!emptyCorpse)
					queueCommand(player, ##"openContainer", inv, "", COMMAND_PRIORITY_DEFAULT);
				else
				{
					sendSystemMessage( player, SID_NO_ITEMS );
					if (!canHarvest(self,player) && !utils.hasScriptVar(self,"quickDestroy") )
					{
						utils.setScriptVar(self,"quickDestroy", true);
						messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, 2.0f, false);
					}
				}
			}

			return SCRIPT_CONTINUE;
		}
	}	

	else // HA HA 
	{
		if ( canOpen )
		{
			if ( canHarvest( self, player ) )
 			{
				if ( item == menu_info_types.SERVER_HARVEST_CORPSE )
				{
					queueCommand( player, ##"harvestCorpse", self, "", COMMAND_PRIORITY_DEFAULT );
				}
				else if ( item == menu_info_types.SERVER_MENU5 )
				{
					queueCommand( player, ##"harvestCorpse", self, "meat", COMMAND_PRIORITY_DEFAULT );
				}
				else if ( item == menu_info_types.SERVER_MENU6 )
				{
					queueCommand( player, ##"harvestCorpse", self, "hide", COMMAND_PRIORITY_DEFAULT );
				}
				else if ( item == menu_info_types.SERVER_MENU7 )
				{
					queueCommand( player, ##"harvestCorpse", self, "bone", COMMAND_PRIORITY_DEFAULT );
				}
				
				sendDirtyObjectMenuNotification(self);
			}
		}
	}

	

	if ( !canOpen )
		sendSystemMessage( player, permissions.SID_NO_CORPSE_PERMISSION );

	return SCRIPT_CONTINUE;
}

// Player harvesting removed, resources are now loot on the creature.

messageHandler harvestCorpse()
{
	// Valid parameters.
	if ( params == null )
		return SCRIPT_CONTINUE;
	obj_id player = params.getObjId( "player" );
	if ( !isIdValid( player ) )
		return SCRIPT_CONTINUE;
	string args = params.getString( "args" );

	// Have the corpse harvest itself.
	corpse.harvestCreatureCorpse( player, self, args );

	return SCRIPT_CONTINUE;
}


/***** MESSAGEHANDLERS **************************************************/
/***** LOOT HANDLERS **************************************************/

/******************************************
//BYPASSED BY LOOT SCRIPTLIB::addLoot() function
messageHandler handleRequestLootAdd()
{
	if ( params == null )
	{
		return SCRIPT_CONTINUE;
	}

	//debugSpeakMsg(self, "received handleRequestLootAdd message");

	int amt = params.getInt(money.DICT_AMOUNT);
	if ( amt < 1 )
	{
		return SCRIPT_CONTINUE;
	}

	money.addCreatureLoot(self, amt);
	return SCRIPT_CONTINUE;
}
********************************************/

messageHandler handleLootAddPass()
{
	int bankBalance = getBankBalance(self);

	withdrawCashFromBank(self, bankBalance, money.HANDLER_LOOT_WITHDRAW_PASS, money.HANDLER_LOOT_WITHDRAW_FAIL, params);
	return SCRIPT_CONTINUE;
}

messageHandler handleLootAddFail()
{
	//debugSpeakMsg(self, "unable to TRANSFER credits loot from named account!");
	return SCRIPT_CONTINUE;
}

messageHandler handleLootWithdrawPass()
{
	if ( params != null )
	{
		int amt = params.getInt(money.DICT_AMOUNT);
		//debugSpeakMsg(self, "I should have " + amt + " credits in my cash account!");
	}
	else
	{
		//debugSpeakMsg(self, "handleLootWithdrawPass: should have credits but params was null!");
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleLootWithdrawFail()
{
	//debugSpeakMsg(self, "unable to WITHDRAW credits loot from bank account!");
	return SCRIPT_CONTINUE;
}

/***** PERMISSIONS HANDLERS **************************************************/

//messageHandler handleCorpsePermInit()
//{
//	if ( params != null )
//	{
//		obj_id lootWinner = params.getObjId(corpse.DICT_LOOTERS);
//		obj_id[] looters = null;
//
//		if ( group.isGroupObject(lootWinner) )
//		{
//			looters = getGroupMemberIds(lootWinner);
//		}
//		else
//		{
//			looters = new obj_id[1];
//			looters[0] = lootWinner;
//		}
//
//		if ( (looters == null) || (looters.length == 0) )
//		{
//			return SCRIPT_CONTINUE;
//		}
//
//		for ( int i = 0; i < looters.length; i++ )
//		{
//			permissions.addUserToPermissionsGroup(self, looters[i], corpse.GROUP_CONSENTED);
//		}
//	}
//	return SCRIPT_CONTINUE;
//}

/***** CLEANUP HANDLERS **************************************************/
messageHandler handleCorpseExpire()
{
	obj_id inv = utils.getInventoryContainer(self);
	if ( isIdValid(inv) )
	{
		obj_id[] contents = getContents(inv);
		if ( (contents != null) && (contents.length != 0) )
		{
			int time = getGameTime();
			int lootTime = utils.getIntScriptVar(self, "lootTimestamp");
			//LOG("corpse", "TIME: " + (time - lootTime));
			if (time - lootTime < 60) // Prevent corpses from expiring for 60s from the last loot
			{
				messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, 10, false);
				return SCRIPT_CONTINUE;
			}
		}
	}
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleCorpseEmpty()
{
	obj_id inv = utils.getInventoryContainer(self);
	if ( isIdValid(inv) )
	{
		obj_id[] contents = getContents(inv);
		if ( (contents == null) || (contents.length == 0) )
		{
			int cash = getCashBalance(self);
			if ( cash == 0 )
			{
				if ( !hasObjVar(self, corpse.VAR_HAS_RESOURCE) )
				{
					messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, 0, false);
					return SCRIPT_CONTINUE;
				}
				else
				{
					messageTo(self, corpse.HANDLER_CORPSE_EXPIRE, null, corpse.AI_CORPSE_EMPTY_TIME, false);
					return SCRIPT_CONTINUE;
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleAttemptCorpseCleanup()
{
	messageTo(self, "handleCorpseEmpty", null, 0, false);
	return SCRIPT_CONTINUE;
}


/***** FUNCTIONS ********************************************************/
trigger OnLootLotterySelected (obj_id player, obj_id[] selection_ids)
{
	obj_id selfInv = utils.getInventoryContainer (self);

	int numWindowsOpen = getIntObjVar(self, "numWindowsOpen");
	numWindowsOpen = numWindowsOpen - 1;
	setObjVar (self, "numWindowsOpen", numWindowsOpen);

	for (int i = 0; i < selection_ids.length; ++i)
	{
		obj_id thisObject = selection_ids[i];

		if (!hasObjVar (thisObject, "numLotteryPlayers"))
		{
			setObjVar (thisObject, "numLotteryPlayers", 1);
			setObjVar (thisObject, "lotteryPlayer1", player);
		}
		else
		{
			int numLotteryPlayers = getIntObjVar (thisObject, "numLotteryPlayers");
			numLotteryPlayers = numLotteryPlayers + 1;
			setObjVar (thisObject, "lotteryPlayer" + numLotteryPlayers, player);
			setObjVar (thisObject, "numLotteryPlayers", numLotteryPlayers);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler fireLotteryPulse()
{
	obj_id player = params.getObjId ("player");
	obj_id corpseInv = params.getObjId ("corpseInv");
	obj_id corpseId = getContainedBy(corpseInv);
	int numTimesFired = params.getInt ("fired");
	int numWindowsOpen = getIntObjVar (corpseId, "numWindowsOpen");
	numTimesFired = numTimesFired + 1;

	// The inventory of the first person sending a pulse will be the default money recipient in the case that things are full of fail.
	// Lotto money is always split between the group anyway so who this person is ultimately doesn't matter.
	if(!utils.hasScriptVar(self, "default_money_recipient_inventory"))
	{
		utils.setScriptVar(self, "default_money_recipient_inventory", utils.getInventoryContainer(player));
	}

	// This is the lottery timer.  You get a free 2 seconds because of the initial message, and then
	// every pulse is another 2 seconds.  So, if it says numTimesFired > 14, that's 30 seconds.
	// if you want it to be a minute set num times fired to 29, etc.
	// the client is set to be 30 seconds to allow for lag.
	if (numTimesFired > 18 || numWindowsOpen <= 0)
	{
		boolean allTransfersComplete = true;

		obj_id [] corpseContents = getContents (corpseInv);
		for (int i = 0; i < corpseContents.length; ++i)
		{
			obj_id item = corpseContents[i];
			//LOG ("LOTTERY", "item is " + item);			
			int numLotteryPlayers = getIntObjVar (item, "numLotteryPlayers");
			//LOG("LOTTERY", "numLotteryPLayers is " + numLotteryPlayers);
			int lotteryNumber = rand (1, numLotteryPlayers);
			obj_id lottoWinner = getObjIdObjVar (item, "lotteryPlayer" + lotteryNumber);
			
			//If the lotto times out but not everyone has responded (particularly LD cases), let the winner loot.
			if (numWindowsOpen > 0)
				setObjVar (item, "pickupable", lottoWinner);			
		
			//LOG("LOTTERY", "lottery Winner is " + lottoWinner);
			//LOG("LOTTERY", "I won " + getName (item) + " which is obj_id " + item);
			
			obj_id winventory = utils.getInventoryContainer(lottoWinner);

			// Stop autostacking so the item can transfer correctly
			utils.setScriptVar(lottoWinner, "autostack.ignoreitems", 1);

			//cash is handled specially so putIn call works even though
			//it returns false, so just do this for cash and continue on
			if (loot.isCashLootItem(item)) 
			{
			  //LOG("LOTTERY","Lottery won item is cash");

				//If winventory is null then use our default inventory so the money still gets handed out.
				//This will happen if all players choose a "Selection" without choosing "All" or no one clicks on credits.
				if(isIdNull(winventory))
					winventory = utils.getObjIdScriptVar(self, "default_money_recipient_inventory");

				  putIn(item, winventory);
				  continue;
			}

			if (!putIn(item, winventory))
			{

				//LOG("LOTTERY","Lottery put in inventory failed!!!!");
				if (!loot.isCashLootItem(item))
				{
					//LOG("LOTTERY","Lottery put in inventory failed, not a cash loot item");		
					string transferProblem = "full_inventory_free_for_all";

					boolean inventoryHasRoom = (getVolumeFree(winventory) > 0);

					if (inventoryHasRoom)
					{
						//LOG("LOTTERY","Lottery put in inventory failed, has inventory space but failed anyway");
						transferProblem = "unable_to_transfer";
						setObjVar (corpseId, "allowedToOpenFromFailedTransfer_" + lottoWinner, 1);
						setObjVar (item, "pickupable", lottoWinner);
					}
					else
					{
						//LOG("LOTTERY","Lottery put in inventory failed, possibly a server boundary problem");
						// failure probably due to trying to transfer
						// over a server boundary.
						loot.setAutoLootComplete(lottoWinner, corpseId, item);
					}

					dictionary proseParameters = new dictionary();
					proseParameters.put ("stf", group.GROUP_STF);
					proseParameters.put ("message", transferProblem);
					proseParameters.put ("TO", item);
					proseParameters.put ("TT", lottoWinner);

					obj_id gid = getGroupObject (lottoWinner);
					obj_id [] members = utils.getLocalGroupMemberIds(gid);

					for (int x = 0; x < members.length; ++x)
					{
						messageTo(members[x], "sendSystemMessageProseAuthoritative", proseParameters, 1, true);
					}

					allTransfersComplete = false;
				} 
	
			}
			else
			{
				//LOG("LOTTERY","Lottery put in inventory worked, telling everyone");
				loot.sendGroupLootSystemMessage (item, lottoWinner, "loot_n", "group_looted");

				//send message to item to try and stack it
				messageTo(item, "msgStackItem", null, 1, false);
			}

			// Turn autostacking back on
			utils.removeScriptVar(lottoWinner, "autostack.ignoreitems");
		}

		if (allTransfersComplete)
		{
			//LOG("LOTTERY","all transfers complete, handle empty corpse");
			messageTo(corpseId, "handleCorpseEmpty", null, 1f, isObjectPersisted(corpseId));
		}
		return SCRIPT_CONTINUE;
	}
	dictionary lottery = new dictionary();

	lottery.put ("fired", numTimesFired);
	lottery.put ("player", player);
	lottery.put ("corpseInv", corpseInv);

	obj_id team = getGroupObject (player);
	obj_id [] objMembersWhoExist = utils.getLocalGroupMemberIds(team);
	messageTo(self, "fireLotteryPulse", lottery, 2, true);
	return SCRIPT_CONTINUE;
}

boolean canHarvest( obj_id self, obj_id player )
{
	return ( hasObjVar(self, corpse.VAR_HAS_RESOURCE) && !utils.hasScriptVar(self, "harvestedBy." + player) );
}
	
	
