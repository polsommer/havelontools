include library.ai_lib;
include library.create;
include library.locations;
include library.spawning;
include library.utils;

const boolean SPAWNER_DISABLED = true;

trigger OnInitialize()
{
	if ( !SPAWNER_DISABLED )
	{
		spawnCreatures(self);
		LOG("NewbieSpawn", "Spawning Init: " + self);
	}
	return SCRIPT_CONTINUE;
}


void spawnCreatures(obj_id self)
{
	LOG("NewbieSpawn", "Spawning Anew: " + self);
	//deltadictionary spawn = self.getScriptVars();
	//string whatToSpawn = spawn.getString("creatureToSpawn");
	string whatToSpawn = utils.getStringScriptVar(self, "creatureToSpawn");
	if (whatToSpawn == null)
	{
		whatToSpawn = pickCreature();
		//spawn.put("creatureToSpawn", whatToSpawn);
		utils.setScriptVar(self, "creatureToSpawn", whatToSpawn);
	}

	int maxPop = 3;
	if ( hasObjVar(self, "pop") )
	{
		maxPop = getIntObjVar (self, "pop");
	}

	//int count = spawn.getInt("count");
	int count = utils.getIntScriptVar(self, "count");
	while (count < maxPop)
	{
		// debugSpeakMsg (self, "spawning #" + count);
		location goodLoc = pickLocation();
		if(goodLoc == null)
			goodLoc = getLocation(self);
		obj_id spawned = create.object (whatToSpawn, goodLoc);
		attachScript (spawned, "creature_spawner.death_msg");
		setObjVar (spawned, "creater", self);

		if (!utils.hasScriptVar (self, "myCreations"))
		{
			resizeable obj_id[] myCreations = new obj_id[0];
			utils.addElement (myCreations, spawned);
			utils.setScriptVar (self, "myCreations", myCreations);
		}
		else
		{
			resizeable obj_id[] theList = utils.getResizeableObjIdArrayScriptVar (self, "myCreations");
			if (theList.length >= maxPop)
			{
				CustomerServiceLog ("SPAWNER_OVERLOAD", "Tried to spawn something even though the list was full.");
				return;
			}
			else
			{
				theList.add (spawned);
				utils.setScriptVar (self, "myCreations", theList);
			}
		}

		// Allow some NPCs to be placed in a city and use city waypoints.
		if ( hasObjVar(self, "useCityWanderScript") )
		{
			attachScript (spawned, "city.city_wander");
		}
		else
		{
			ai_lib.setDefaultCalmBehavior(spawned, ai_lib.BEHAVIOR_LOITER);
		}

		count++;
		utils.setScriptVar (self, "count", count);
	}
	return;
}


string pickCreature()
{
	int choice = rand (1,5);
	string creature = "corsec_rogue";
	switch (choice)
	{
		case 1:
			creature = "ragtag_lunatic";
			break;
		case 2:
			creature = "meatlump_stooge";
			break;
		case 3:
			creature = "meatlump_clod";
			break;
		case 4:
			creature = "corsec_rogue";
			break;
		case 5:
			creature = "swooper_leader";
			break;
		default:
			creature = "swooper_leader";
			break;
	}
	return creature;
}

location pickLocation ()
{
	location here = getLocation (getSelf());
	here.x = here.x + rand (-5,5);
	here.z = here.z + rand (-5,5);
	location goodLoc = locations.getGoodLocationAroundLocation (here, 1f, 1f, 1.5f, 1.5f);
	return goodLoc;
}

messageHandler creatureDied()
{
	if(params == null || params.isEmpty())
	{
		LOG ("sissynoid", "Spawner " + self + " on Rori. Rori_npc_medium script had Invalid Params from the deadGuy.");
		CustomerServiceLog ("SPAWNER_OVERLOAD", "Spawner " + self + " on Rori. Rori_npc_medium script had Invalid Params from the deadGuy.");
		return SCRIPT_CONTINUE;
	}
	
	obj_id deadNpc = params.getObjId ("deadGuy");

	spawning.planetSpawnersCreatureDied(self, deadNpc);
	
	spawnCreatures(self);

	return SCRIPT_CONTINUE;
}