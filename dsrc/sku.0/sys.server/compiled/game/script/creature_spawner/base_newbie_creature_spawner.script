include library.locations;
include library.create;
include library.ai_lib;
include library.utils;

void spawnCreatures(obj_id self)
{
	deltadictionary spawn = self.getScriptVars();

	int maxPop = getMaxPop();
	int count = utils.getIntScriptVar(self, "count");

	string whatToSpawn;

	if (count < 0)
	{
		count = 0;
		CustomerServiceLog ("SPAWNER_OVERLOAD", "Count went below 0 on " + self + " in base_newbie_creature_spawner script.");
	}

	for(;count < maxPop; ++count)
	{
		location goodLoc = pickLocation();
		if (goodLoc == null)
		{
			goodLoc = getLocation(self);
			//LOG("Newbie_Spawn", "WARNING: locations.getGoodLocationAroundLocation failed.");
			//continue;
		}
		whatToSpawn = pickCreature();
		
		count++;
		utils.setScriptVar(self, "count", count);
		
		obj_id spawned = create.object (whatToSpawn, goodLoc);
		attachScript (spawned, "creature_spawner.death_msg");
		setObjVar (spawned, "creater", self);
		ai_lib.setDefaultCalmBehavior(spawned, ai_lib.BEHAVIOR_LOITER);
	}
	return;
}


string pickCreature()
{
	return "crazed_durni";
}

int getMaxPop()
{
	return 1;
}

location pickLocation ()
{
	location here = getLocation (getSelf());
	here.x = here.x + rand (-5,5);
	here.z = here.z + rand (-5,5);
	location goodLoc = locations.getGoodLocationAroundLocation (here, 10f, 10f, 10f, 10f);
	return goodLoc;
}

void doDeathRespawn(obj_id self)
{
	int count = utils.getIntScriptVar(self, "count");
	count = count - 1;
	if (count < 0)
	{
		count = 0;
		CustomerServiceLog ("SPAWNER_OVERLOAD", "Count went below 0 on " + self + " in base_newbie_creature_spawner script.");
	}
	utils.setScriptVar(self, "count", count);

	spawnCreatures(self);
	return;
}
