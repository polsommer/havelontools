include library.chat;
include library.utils;
include library.ai_lib;


const string REBEL_STF			= "theme_park/alderaan/act2/rebel_missions";
const string REBEL_SHARED_STF	= "theme_park/alderaan/act2/shared_rebel_missions";

const string ENCODED_DEAD_EYE_DISK	= "object/tangible/encoded_disk/dead_eye_disk.iff";

const string_id DATA_DISK_RECEIVED	= new string_id(REBEL_SHARED_STF, "m1_data_disk_received");
const string_id DATA_DISK_DENIED	= new string_id(REBEL_SHARED_STF, "m1_data_disk_denied");


trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	setCondition(self, CONDITION_CONVERSABLE);

	createTriggerVolume("someoneApproaching", 15, true);

	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	if (hasObjVar(speaker, "coa2.rebel.missionNpcId"))
	{
		obj_id npc = getObjIdObjVar(speaker, "coa2.rebel.missionNpcId");

		if (npc == self)
		{
			if (!utils.playerHasItemByTemplate(speaker, ENCODED_DEAD_EYE_DISK))
				giveDataDisk(speaker);
			
			string_id message = new string_id (REBEL_STF, "m1_sympathizer_complete");
			chat.chat (self, message);

			return SCRIPT_CONTINUE;
		}
	}

	string_id message = new string_id (REBEL_STF, "m1_sympathizer_invalid");
	chat.chat (self, message);
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	//debugSpeakMsg (breacher, "TriggerVolume ("+volumeName+") on "+self+" breached");
	
	if (hasObjVar(breacher, "gm"))
	{
		return SCRIPT_CONTINUE;
	}

	if (!isPlayer(breacher))
	{
		return SCRIPT_CONTINUE;
	}

	if (breacher == self || ai_lib.isAiDead(breacher) || ai_lib.isAiDead(self))
	{
		return SCRIPT_CONTINUE;
	}

	if (volumeName.equals("someoneApproaching"))
	{
		if (hasObjVar(breacher, "coa2.rebel.missionNpcId"))
		{
			obj_id npc = getObjIdObjVar(breacher, "coa2.rebel.missionNpcId");
			
			if (npc == self)
			{
				chat.setChatMood(self, chat.MOOD_RELIEVED);
				
				string_id message = new string_id (REBEL_STF, "m1_sympathizer_greeting");
				chat.chat (self, message);
				
				giveDataDisk(breacher);
				
				messageTo(breacher, "createReturnMission", null, 1, false);
				
				removeTriggerVolume("someoneApproaching");
			}
		}
	}
	
	return SCRIPT_CONTINUE;
}

void giveDataDisk(obj_id player)
{
	obj_id inventory = getObjectInSlot(player, "inventory");				
	obj_id disk = createObject("object/tangible/encoded_disk/dead_eye_disk.iff", inventory, "");

	if (!isIdValid(disk))
	{
		sendSystemMessage(player, DATA_DISK_DENIED);
	}				
	else
	{
		sendSystemMessage(player, DATA_DISK_RECEIVED);
		removeObjVar(player, "coa2.rebel.missionNpcId");
	}
}