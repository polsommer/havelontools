include ai.ai_combat;
include library.utils;
include library.locations;


const string GU_REPAIR_KIT	= "object/tangible/theme_park/alderaan/act3/grav_unit_repair_kit.iff";

const string IMPERIAL_SHARED_STF	= "theme_park/alderaan/act3/shared_imperial_missions";
const string_id REPAIR_KIT_RECEIVED	= new string_id(IMPERIAL_SHARED_STF, "m2_repair_kit_received");
const string_id REPAIR_KIT_DENIED	= new string_id(IMPERIAL_SHARED_STF, "m2_repair_kit_denied");

messageHandler handleStartCaravanMission()
{
	obj_id player = params.getObjId("player");
	obj_id npc = params.getObjId("npc");
	int missionNum = params.getInt("value");

	// Give repair kit
	if (!utils.playerHasItemByTemplate(player, GU_REPAIR_KIT))
		giveRepairKit(player);

	// Initialize next mission step
	location deliveryLoc = getDeliveryLoc(player, 1000, 1500);
	string npcName = "coa3_caravan_leader";
	
	// Store data on player and attach player script
	if (hasObjVar(player, "coa3.imperial"))
	{
		setObjVar(player, "coa3.imperial.missionNum", missionNum);
		setObjVar(player, "coa3.imperial.missionNpc", npcName);
		setObjVar(player, "coa3.imperial.missionLoc", deliveryLoc);
	}
	else
	{
		setObjVar(player, "coa3.rebel.missionNum", missionNum);
		setObjVar(player, "coa3.rebel.missionNpc", npcName);
		setObjVar(player, "coa3.rebel.missionLoc", deliveryLoc);
	}

	messageTo(player, "handleRestartMission", params, 0, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler handleAbortCaravanMission()
{
	obj_id player = params.getObjId("player");

	messageTo(player, "handleAbortMission", params, 0, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler handleAttackPlayer()
{
	obj_id player = params.getObjId("player");

	startCombat (self, player);
	
	return SCRIPT_CONTINUE;
}

location getDeliveryLoc(obj_id player, int minDistance, int maxDistance)
{
	location center = getLocation(player);
	
	// Get a good location for the target
	location deliveryLoc = null;
	int x = 0;
	while (x < 10)
	{
		LOG ("CoA3_Imperial", "Imperial Delivery Location:  Attepmt #" + (x+1));

		location loc = utils.getRandomLocationInRing(center, minDistance, maxDistance);
		deliveryLoc = locations.getGoodLocationAroundLocation(loc, 30f, 30f, 200f, 200f);
		
		if (deliveryLoc!= null) break;
		
		x += 1;
	}
	
	deliveryLoc.y = getHeightAtLocation(deliveryLoc.x, deliveryLoc.z);

	return deliveryLoc;
}

void giveRepairKit(obj_id player)
{
	obj_id inventory = getObjectInSlot(player, "inventory");				
	obj_id kit = createObject(GU_REPAIR_KIT, inventory, "");

	if (!isIdValid(kit))
	{
		sendSystemMessage(player, REPAIR_KIT_DENIED);
	}				
	else
	{
		sendSystemMessage(player, REPAIR_KIT_RECEIVED);
	}
}