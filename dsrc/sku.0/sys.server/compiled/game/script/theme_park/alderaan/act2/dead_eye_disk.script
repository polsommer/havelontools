/**
 * Copyright (c) ©2000-2003 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        message_assembled.script
 * Description:  message_assembled base logic
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.sui;
include library.utils;

//------------------------------------------------
// Constants
//------------------------------------------------

const string 	REBEL_STF			= "theme_park/alderaan/act2/rebel_missions";
const string	REBEL_SHARED_STF	= "theme_park/alderaan/act2/shared_rebel_missions";

const string_id DISK_NAME_DECODED	= new string_id(REBEL_SHARED_STF, "disk_name_decoded");
const string_id DISK_NAME_ENCODED	= new string_id(REBEL_SHARED_STF, "disk_name_encoded");

const string_id DECODED_DATA_DISK	= new string_id(REBEL_SHARED_STF, "decoded_data_disk");
const string_id DECODE_FAILED		= new string_id(REBEL_SHARED_STF, "decode_failed");

const string_id SID_USE				= new string_id(REBEL_SHARED_STF, "use");
const string_id SID_DECODE			= new string_id(REBEL_SHARED_STF, "decode");
const string    SID_CLOSE			= "@"+REBEL_SHARED_STF+":close";


//------------------------------------------------
// Methods
//------------------------------------------------

trigger OnInitialize()
{
	if (hasObjVar(self, "diskDecoded"))
		setName(self, DISK_NAME_DECODED);
	else
		setName(self, DISK_NAME_ENCODED);
	
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	// Add option to read the message.
	mi.addRootMenu( menu_info_types.SERVER_MENU1, SID_USE );

	if (!hasObjVar(self, "diskDecoded"))
		mi.addRootMenu( menu_info_types.SERVER_MENU2, SID_DECODE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	// Display info dialog.
	if ( item == menu_info_types.SERVER_MENU1 )
		displayDialog( self, player );

	if ( item == menu_info_types.SERVER_MENU2 )
		decodeDisk( self, player );

	return SCRIPT_OVERRIDE;
}

//------------------------------------------------
// displayDialog
//------------------------------------------------

void displayDialog( obj_id self, obj_id player )
{
	string title = null;
	string text = null;
	
	if (hasObjVar(self, "diskDecoded"))
	{
		string_id titleID = new string_id(REBEL_STF, "disk_decoded_title");
		title = localize(titleID);
		string_id textID = new string_id(REBEL_STF, "disk_decoded_text");
		text = localize(textID);
	}
	else
	{
		string_id titleID = new string_id(REBEL_STF, "disk_encoded_title");
		title = localize(titleID);
		string_id textID = new string_id(REBEL_STF, "disk_encoded_text");
		text = localize(textID);
	}

	// Display the dialog.
	createDialog( self, player, text, title );
}

//------------------------------------------------
// createDialog
//------------------------------------------------

int createDialog( obj_id self, obj_id player, string text, string title )
{
	if ( player == null )
		return -1;

	// Create the dialog page.
	int pid = sui.createSUIPage( sui.SUI_MSGBOX, self, player, "handleDialogInput" );

	// Add elements text.
	sui.setSUIProperty( pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, text );
	sui.setSUIProperty (pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title );

	// Add buttons.
	sui.msgboxButtonSetup( pid, sui.OK_ONLY );
	sui.setSUIProperty( pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, SID_CLOSE );

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}

void decodeDisk(obj_id self, obj_id player)
{
	if (utils.playerHasItemByTemplate(player, "object/tangible/encoded_disk/dead_eye_decoder.iff"))
	{
		setObjVar(self, "diskDecoded", 1);
		setObjVar(player, "coa2.progress", 3);
		
		sendSystemMessage(player, DECODED_DATA_DISK);
		
		setName(self, DISK_NAME_DECODED);			
	}
	else
	{
		sendSystemMessage(player, DECODE_FAILED);
	}
}