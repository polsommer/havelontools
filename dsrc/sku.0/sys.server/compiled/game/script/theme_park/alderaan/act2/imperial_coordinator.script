include library.utils;
include library.ai_lib;
include library.locations;

const string COMMANDER_TABLE	= "datatables/convo/alderaan/act2/commander_locs.iff";

trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	setCondition(self, CONDITION_CONVERSABLE);

	return SCRIPT_CONTINUE;
}

messageHandler messageStartMission()
{
	obj_id player = params.getObjId("player");
	obj_id npc = params.getObjId("npc");
	int missionNum = params.getInt("value");

	location deliveryLoc;
	string npcName;
	
	switch (missionNum)
	{
		case 1:
			deliveryLoc = getDeliveryLoc(player, 1000, 1500);
			npcName = "coa2_imperial_informant";
			break;
		
		case 3:
			deliveryLoc = getDeliveryLoc(player, 1250, 2000);
			npcName = "coa2_imperial_slicer";
			break;
		
		case 4:
			if (!hasObjVar(player, "coa2.imperial.missionPlanet"))
			{
				deliveryLoc = getCommanderLoc(player);
			}
			else
			{
				deliveryLoc = getLocationObjVar(player, "coa2.imperial.missionLoc");
			}
			npcName = "";
			break;
		
		default:
			LOG("CoA2_Imperial", "WARNING!!!  Imperial_Coordinator - Recieved messageStartMission for unknown mission number. ("+missionNum+")");
			return SCRIPT_OVERRIDE;
	}
	
	// Store location of source npc
	location returnLoc = new location();
	obj_id building = getTopMostContainer (npc);
	if (building == npc)
		returnLoc = getLocation(npc);
	else
		returnLoc = getLocation (building);

	// Store data on player and attach player script
	setObjVar(player, "coa2.imperial.missionNum", missionNum);
	setObjVar(player, "coa2.imperial.missionNpc", npcName);
	setObjVar(player, "coa2.imperial.missionLoc", deliveryLoc);
	setObjVar(player, "coa2.imperial.returnLoc", returnLoc);

	if (hasScript(player, "theme_park.alderaan.act2.imperial_mission"))
		messageTo(player, "handleRestartMission", params, 0, false);
	else
		attachScript(player, "theme_park.alderaan.act2.imperial_mission");
	
	return SCRIPT_CONTINUE;
}

messageHandler messageAbortMission()
{
	obj_id player = params.getObjId("player");
	obj_id npc = params.getObjId("npc");
	int missionNum = params.getInt("value");
	
	switch (missionNum)
	{
		case 1:
		case 3:
		case 4:
			messageTo(player, "handleAbortMission", params, 0, false);
			break;
		
		default:
			LOG("CoA2_Imperial", "WARNING!!!  Imperial_Coordinator - Recieved messageAbortMission for unknown mission number. ("+missionNum+")");
	}
	
	return SCRIPT_CONTINUE;
}

location getDeliveryLoc(obj_id player, int minDistance, int maxDistance)
{
	// find out what city the player is in
	region city = locations.getCityRegion(getLocation(player));
	location cityCenter = locations.getRegionCenter(city);
	
	// Get a good location for the target
	location deliveryLoc = null;
	int x = 0;
	while (x < 10)
	{
		LOG ("CoA2_Imperial", "Imperial Delivery Location:  Attepmt #" + (x+1));

		location loc = utils.getRandomLocationInRing(cityCenter, minDistance, maxDistance);
		deliveryLoc = locations.getGoodLocationAroundLocation(loc, 30f, 30f, 200f, 200f);
		
		if (deliveryLoc!= null) break;
		
		x += 1;
	}
	
	return deliveryLoc;
}

location getCommanderLoc(obj_id player)
{
	string[] commanderFaction = dataTableGetStringColumn(COMMANDER_TABLE, 0);
	
	int rndCommander = rand(0, commanderFaction.length - 1);
	
	while (!commanderFaction[rndCommander].equals("imperial"))
	{
		rndCommander = rand(0, commanderFaction.length - 1);
	}
	
	int x = dataTableGetInt(COMMANDER_TABLE, rndCommander, "x");
	int y = dataTableGetInt(COMMANDER_TABLE, rndCommander, "y");
	int z = dataTableGetInt(COMMANDER_TABLE, rndCommander, "z");
	string planet = dataTableGetString(COMMANDER_TABLE, rndCommander, "planet");
	location commanderLoc = new location(x, y, z, planet);
	
	setObjVar(player, "coa2.imperial.missionPlanet", planet);
	
	return commanderLoc;
}