include library.utils;
include library.ai_lib;
include library.chat;
include ai.ai_combat;


const string IMPERIAL_STF			= "theme_park/alderaan/act2/imperial_missions";

trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	setCondition( self, CONDITION_CONVERSABLE );
	chat.setChatMood( self, chat.MOOD_HAUGHTY );

	createTriggerVolume("someoneApproaching", 15, true);

	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;
	
	string_id openDialog;
	resizeable string_id[] dialogResponse = new string_id[0];

	boolean missionPlayer = (getObjIdObjVar(speaker, "coa2.imperial.missionNpcId") == self);

	if (missionPlayer)
	{
		openDialog = new string_id(IMPERIAL_STF, "m1_informant");

		string_id response = new string_id(IMPERIAL_STF, "m1_informant_report");
		dialogResponse = utils.addElement(dialogResponse, response);

		response = new string_id(IMPERIAL_STF, "m1_informant_reprimand");
		dialogResponse = utils.addElement(dialogResponse, response);
	}
	else
	{
		openDialog = new string_id(IMPERIAL_STF, "m1_informant_invalid");
	}
	
	if (dialogResponse.length == 0)
	{
		chat.chat(self, openDialog);
		return SCRIPT_OVERRIDE;
	}
	
	npcStartConversation (speaker, self, "imperialInformant", openDialog, dialogResponse);

	return SCRIPT_CONTINUE;
}

trigger OnNpcConversationResponse (string convo, obj_id player, string_id response)
{
	if (!convo.equals("imperialInformant"))
		return SCRIPT_CONTINUE;
	
	if (response.getAsciiId().equals("m1_informant_report"))
	{
		string_id message = new string_id(IMPERIAL_STF, "m1_informant_report_response");
		npcSpeak(player, message);
		
		setObjVar(player, "coa2.progress", -3);
		messageTo(player, "createReturnMission", null, 1, false);
		
		npcEndConversation(player);
	}
	else if (response.getAsciiId().equals("m1_informant_reprimand"))
	{
		string_id message = new string_id(IMPERIAL_STF, "m1_informant_reprimand_response");
		npcSpeak(player, message);
		
		npcRemoveConversationResponse(player, response);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	//debugSpeakMsg (breacher, "TriggerVolume ("+volumeName+") on "+self+" breached");
	
	if (hasObjVar(breacher, "gm"))
	{
		return SCRIPT_CONTINUE;
	}

	if (!isPlayer(breacher))
	{
		return SCRIPT_CONTINUE;
	}

	if (breacher == self || ai_lib.isAiDead(breacher) || ai_lib.isAiDead(self))
	{
		return SCRIPT_CONTINUE;
	}

	if (volumeName.equals("someoneApproaching"))
	{
		string_id message = new string_id (IMPERIAL_STF, "m1_informant_taunt");
		chat.chat (self, message);
	}
	
	return SCRIPT_CONTINUE;
}

