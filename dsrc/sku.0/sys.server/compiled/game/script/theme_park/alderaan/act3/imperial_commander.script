include library.utils;
include library.ai_lib;
include library.locations;
include library.chat;

trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	setCondition(self, CONDITION_CONVERSABLE);

	setName(self, "Colonel Veers");

	return SCRIPT_CONTINUE;
}

messageHandler messageStartMission()
{
	obj_id player = params.getObjId("player");
	obj_id npc = params.getObjId("npc");
	int missionNum = params.getInt("value");

	location deliveryLoc;
	string npcName;
	
	switch (missionNum)
	{
		case 5:
			deliveryLoc = getDeliveryLoc(player, 1500, 2500);
			npcName = "object/building/theme_park/alderaan/act3/imperial_research_destroy.iff";
			break;
		
		default:
			LOG("CoA3_Imperial", "WARNING!!!  Imperial_Commander - Recieved messageStartMission for unknown mission number. ("+missionNum+")");
			return SCRIPT_OVERRIDE;
	}
	
	// Store location of source npc
	location returnLoc = new location();
	obj_id building = getTopMostContainer (npc);
	if (building == npc)
		returnLoc = getLocation(npc);
	else
		returnLoc = getLocation (building);

	// Store data on player and attach player script
	setObjVar(player, "coa3.imperial.missionNum", missionNum);
	setObjVar(player, "coa3.imperial.missionNpc", npcName);
	setObjVar(player, "coa3.imperial.missionLoc", deliveryLoc);
	setObjVar(player, "coa3.imperial.returnLoc", returnLoc);

	if (hasScript(player, "theme_park.alderaan.act3.imperial_mission"))
		messageTo(player, "handleRestartMission", params, 0, false);
	else
		attachScript(player, "theme_park.alderaan.act3.imperial_mission");
	
	return SCRIPT_CONTINUE;
}

messageHandler messageAbortMission()
{
	obj_id player = params.getObjId("player");
	obj_id npc = params.getObjId("npc");
	int missionNum = params.getInt("value");
	
	switch (missionNum)
	{
		case 5:
			messageTo(player, "handleAbortMission", params, 0, false);
			break;
		
		default:
			LOG("CoA3_Imperial", "WARNING!!!  Imperial_Commander - Recieved messageAbortMission for unknown mission number. ("+missionNum+")");
	}
	
	return SCRIPT_CONTINUE;
}

location getDeliveryLoc(obj_id player, int minDistance, int maxDistance)
{
	// find out what city the player is in
	region city = null;
	location cityCenter = null;
	location deliveryLoc = null;
	
	city = locations.getCityRegion(getLocation(player));
	if (city != null)
		cityCenter = locations.getRegionCenter(city);
	if (cityCenter == null)
		cityCenter = getLocation(player);
	
	// Get a good location for the target
	int x = 0;
	while (x < 10)
	{
		LOG ("CoA3_Imperial", "Imperial Delivery Location:  Attepmt #" + (x+1));

		location loc = utils.getRandomLocationInRing(cityCenter, minDistance, maxDistance);
		deliveryLoc = locations.getGoodLocationAroundLocation(loc, 30f, 30f, 200f, 200f);
		
		if (deliveryLoc!= null) 
		{
			deliveryLoc.y = getElevation(deliveryLoc);
			break;
		}
		
		x += 1;
	}
	
	deliveryLoc.y = getHeightAtLocation(deliveryLoc.x, deliveryLoc.z);

	return deliveryLoc;
}

