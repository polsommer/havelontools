include library.ai_lib;
include library.create;
include library.utils;
include library.chat;
include ai.ai_combat;


trigger OnIncapacitated(obj_id attacker)
{
	obj_id facility = getObjIdObjVar(self, "coa3.rebel.facility");

	//debugSpeakMsg(self, "Guard Incapacitated");

	if (isIdValid(facility))
	{
		dictionary params = new dictionary();
		params.put("attacker", attacker);
		messageTo(facility, "attackerKilled", params, 0, false);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	messageTo(self, "startAttack", null, 5, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler startAttack()
{
	// Move to front of the facility
	obj_id facility = getObjIdObjVar(self, "coa3.rebel.facility");
	location loc = getLocation(facility);
	loc.x += -10.0f;

	ai_lib.aiPathTo(self, loc);
	setMovementRun(self);
	
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	stop(self);
	attackNewTarget(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler postCombatPathHome()
{
	attackNewTarget(self);
	
	return SCRIPT_OVERRIDE;
	
}

void attackNewTarget(obj_id self)
{
	obj_id facility = getObjIdObjVar(self, "coa3.rebel.facility");
	obj_id player = getObjIdObjVar(facility, "coa3.rebel.playerId");
	
	if (isIdValid(facility) && exists(facility))
	{
		int numGuards = getIntObjVar(facility, "coa3.rebel.numGuards");
		resizeable obj_id[] objectList = getResizeableObjIdArrayObjVar(facility, "coa3.rebel.obj_list");
		
		if (numGuards > 0)
		{
			obj_id target = null;
			
			int x = 0;
			while (target == null)
			{
				obj_id newTarget = objectList[rand(0, objectList.length - 1)];

				if (isIdValid(newTarget) && exists(newTarget) && ai_lib.isNpc(newTarget))
					target = newTarget;
				
				if (x++ >= 50)
					break;
			}
			
			if (target != null)
			{
				// Attack target 
				startCombat (self, target);
				return;
			}
		}
		
		if (isIdValid(player) && exists(player))
		{
			// Attack player
			startCombat (self, player);
			return;
		}
	}	
}

