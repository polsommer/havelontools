include library.ai_lib;
include library.create;
include library.utils;
include library.chat;


const string[] TEMPLATE_LIST	= { "coa2_imperial_slicer_gang",
									"coa2_imperial_slicer_gang",
									"coa2_imperial_slicer_gang",
									"coa2_imperial_slicer_gang"
									};

const float[][] LOCATION_LIST	= { { -5.0f, 0.0f, 10.0f,   0.0f },
									{ -5.0f, 0.0f, -5.0f,   0.0f },
									{ 10.0f, 0.0f, -5.0f,   0.0f },
									{ -8.0f, 0.0f, -2.0f,   0.0f }
									};


trigger OnAttach()
{
	//ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	//setCondition(self, CONDITION_CONVERSABLE);

	string name = getName(self);
	setName( self, name+" (a slicer)" );

	dictionary params = new dictionary();
	params.put("index", 0);

	messageTo(self, "spawnNextObject", params, 2, false);

	return SCRIPT_CONTINUE;
}

messageHandler spawnNextObject()
{
	int objectNum = params.getInt("index");

	// Spawn object
	location loc = getLocation(self);
	loc.x += LOCATION_LIST[objectNum][0];
	loc.y += LOCATION_LIST[objectNum][1];
	loc.z += LOCATION_LIST[objectNum][2];
	obj_id newObject = create.object(TEMPLATE_LIST[objectNum], loc);

	if (isIdValid(newObject))
	{
		setYaw(newObject, LOCATION_LIST[objectNum][3]);

		setObjVar(newObject, "coa2.imperial.slicer", self);

		resizeable obj_id[] objectList = getResizeableObjIdArrayObjVar(self, "coa2.imperial.obj_list");
		if (objectList == null)
		{
			objectList = new Vector();
		}
		utils.addElement(objectList, newObject);
		if(objectList.length > 0) {

			setObjVar(self, "coa2.imperial.obj_list", objectList);
		}
	}

	objectNum++;

	if (objectNum < TEMPLATE_LIST.length)
	{
		params.put("index", objectNum);
		messageTo(self, "spawnNextObject", params, 2, false);
	}
	else
	{
		initCamp();
	}

	return SCRIPT_CONTINUE;
}

void initCamp()
{
	obj_id self = getSelf();
	setObjVar(self, "coa2.imperial.numThugs", 4);
}

trigger OnIncapacitated(obj_id attacker)
{
	obj_id player = getObjIdObjVar(self, "coa2.imperial.playerId");

	if (isIdValid(player))
	{
		setObjVar(player, "coa2.progress", -6);
		messageTo(player, "createReturnMission", null, 1, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler thugKilled()
{
	int numThugs = getIntObjVar(self, "coa2.imperial.numThugs");

	numThugs--;

	setObjVar(self, "coa2.imperial.numThugs", numThugs);
	//debugSpeakMsg(self, "Thugs remaining = " + numThugs);

	//if (numThugs == 0)
	//{
	//	obj_id player = getObjIdObjVar(self, "coa2.imperial.playerId");

	//	if (isIdValid(player))
	//	{
	//		setObjVar(player, "coa2.progress", -6);
	//		messageTo(player, "createReturnMission", null, 1, false);
	//	}

	//	messageTo(self, "cleanup", null, 15*60, false);
	//}

	return SCRIPT_CONTINUE;
}

messageHandler cleanup()
{
	resizeable obj_id[] objectList = getResizeableObjIdArrayObjVar(self, "coa2.imperial.obj_list");

	for (int i = 0; i < objectList.length; i++)
	{
		if (isIdValid(objectList[i]))
		{
			destroyObject(objectList[i]);
		}
	}

	destroyObject(self);

	return SCRIPT_CONTINUE;
}