//This script is used in conjunction with quest.task.ground.retrieve_item.

//This script is attached to the object from which you wish to retrieve items.  It adds a radial menu item that sends a messageto
//to the player that quest.task.ground.retrieve_item will pick up and handle appropriately.

// ---------------------------------------------------------------------

include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

trigger OnAttach()
{
	messageTo(self, "getQuestPlayerName", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler getQuestPlayerName()
{
	obj_id questPlayer = utils.getContainingPlayer(self);
	if( isIdValid(questPlayer) )
	{
		setObjVar(self, "questPlayer", questPlayer);
	}
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			String menuText = groundquests.getRetrieveMenuText(player, self);
			string_id menuStringId = utils.unpackString(menuText);
			int menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, menuStringId);
			menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
			menuInfoData.setServerNotify(true);
		}	
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			if(item == menu_info_types.ITEM_USE)
			{
				if ( !hasObjVar(self, "quest.cameraSubject") )
				{
					sendSystemMessage(player, new string_id("theme_park/corellia/quest", "camera_not_setup"));
					return SCRIPT_CONTINUE;
				}
				
				string cameraSubject = getStringObjVar(self, "quest.cameraSubject");
				
				// First check the player's intended target for the correct camera subject.
				obj_id intendedTarget = getIntendedTarget(player);
				if ( isIdValid(intendedTarget) )
				{
					if ( isMob(intendedTarget) )
					{
						if (isIncapacitated(intendedTarget) && !hasObjVar(self, "quest.allowDeadSubject") )
						{
							sendSystemMessage(player, new string_id("theme_park/corellia/quest", "camera_target_is_dead"));
							return SCRIPT_CONTINUE;
						}
						else
						{
							string intendedCreatureName = getCreatureName(intendedTarget);
							if ( cameraSubject.equals(intendedCreatureName) )
							{
								setObjVar(self,"questItemUsed", true);

								dictionary params = new dictionary();
								params.put("source", self);
								messageTo(player, "questRetrieveItemObjectFound", params, 0, false);

								if ( !hasObjVar(self, "doNotDestroyMe") )
								{
									messageTo(self, "destroyMe", null, 1, false);
								}
								
								return SCRIPT_CONTINUE;
							}
						}
					}
				}
				
				// If the intended target is incorrect, try the look-at target.
				obj_id lookatTarget = getLookAtTarget(player);
				if ( isIdValid(lookatTarget) )
				{
					if ( isMob(lookatTarget) )
					{
						if (isIncapacitated(lookatTarget) && !hasObjVar(self, "quest.allowDeadSubject") )
						{
							sendSystemMessage(player, new string_id("theme_park/corellia/quest", "camera_target_is_dead"));
							return SCRIPT_CONTINUE;
						}
						else
						{
							string lookatCreatureName = getCreatureName(lookatTarget);
							if ( cameraSubject.equals(lookatCreatureName) )
							{
								setObjVar(self,"questItemUsed", true);

								dictionary params = new dictionary();
								params.put("source", self);
								messageTo(player, "questRetrieveItemObjectFound", params, 0, false);

								if ( !hasObjVar(self, "doNotDestroyMe") )
								{
									messageTo(self, "destroyMe", null, 1, false);
								}
								
								return SCRIPT_CONTINUE;
							}
						}
					}
				}
				
				// determine which error message to give
				if ( !isIdValid(intendedTarget) && !isIdValid(lookatTarget) )
				{
					sendSystemMessage(player, new string_id("theme_park/corellia/quest", "camera_no_target"));
					return SCRIPT_CONTINUE;
				}
				
				sendSystemMessage(player, new string_id("theme_park/corellia/quest", "camera_wrong_target"));
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler destroyMe()
{
	if ( !hasObjVar(self, "doNotDestroyMe") )
	{
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}


// ---------------------------------------------------------------------

trigger OnDestroy()
{
	if ( !hasObjVar(self, "questItemUsed") )
	{
		if ( hasObjVar(self, "questPlayer") )
		{
			obj_id player = getObjIdObjVar(self, "questPlayer");
			if ( isIdValid(player) )
			{
				if(groundquests.playerNeedsToRetrieveThisItem(player, self))
				{
					string template = getTemplateName(self);
					obj_id newItem = createObjectInInventoryAllowOverload(template, player);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
