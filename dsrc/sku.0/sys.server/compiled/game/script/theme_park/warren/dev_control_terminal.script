include library.utils;
include library.sui;

const string SYSTEM_MESSAGES	= "theme_park/warren/warren_system_messages";

const string PASSKEYCODE		= "object/intangible/data_item/warren_encryption_key.iff";

trigger OnInitialize()
{
	setName( self, "" );
	setName( self, new string_id( SYSTEM_MESSAGES, "dev_control_name" ) );
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{

	if ( hasEncryptionKey( player ) )
		return SCRIPT_CONTINUE;//you've already got one

	mi.addRootMenu (menu_info_types.ITEM_USE, new string_id(SYSTEM_MESSAGES,"mnu_download"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item != menu_info_types.ITEM_USE )
		return SCRIPT_CONTINUE;

	if ( hasEncryptionKey( player ) )
		return SCRIPT_CONTINUE;//you've already got one

	sui.msgbox(player, new string_id ( SYSTEM_MESSAGES, "download_complete" ));

	obj_id playerInv = utils.getPlayerDatapad(player);

	if ( isIdValid( playerInv ) )
	{
		obj_id passKey = createObject( PASSKEYCODE, playerInv, "");
		if ( isIdValid( passKey ) )
		{
			//debugSpeakMsg( self, "I made a thing for you" );
			setObjVar( passKey, "warren.airlockkey", true );
		}
	}

	return SCRIPT_CONTINUE;
}

boolean hasEncryptionKey( obj_id player )
{
	obj_id playerInv = utils.getPlayerDatapad(player);

	if ( playerInv == null )
		return false;

	obj_id[] contents = getContents( playerInv );
	if ( contents == null )
		return false;

	for ( int i = 0; i < contents.length; i++ )
	{
		if ( hasObjVar( contents[i], "warren.airlockkey" ) )
			return true;
	}

	return false;
}

