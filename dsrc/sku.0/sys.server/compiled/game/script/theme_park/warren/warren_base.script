include library.utils;
include library.create;

const string ESCAPEE				= "warren.escapee";
const string ESCAPEE_CREATURENAME 	= "commoner";
const string ESCAPEE_SCRIPT 		= "theme_park.warren.escapee";

const string ESCAPED_WORKER_CREATURENAME	= "commoner";
const string ESCAPED_WORKER_SCRIPT 			= "theme_park.warren.escaped_worker";

const string DYING_LOYALIST_CREATURENAME 	= "commoner";
const string DYING_LOYALIST_SCRIPT			= "theme_park.warren.dying_loyalist";

const string PANICKED_RESEARCHER_CREATURENAME	= "commoner";
const string PANICKED_RESEARCHER_SCRIPT			= "theme_park.warren.panicked_researcher";

const string CELL_GUARD_CREATURENAME = "brigand_leader";
const string CELL_GUARD_SCRIPT		 = "theme_park.warren.cell_guard";

const string KNAG_CREATURENAME 		= "brigand_leader";
const string KNAG_SCRIPT			= "theme_park.warren.doctor_knag";

const string MIRLA_CREATURENAME 	= "commoner";
const string MIRLA_SCRIPT			= "theme_park.warren.mirla";

const int WARREN_VERSION = 3;

const string SYSTEM_MESSAGES	= "theme_park/warren/warren_system_messages";

trigger OnInitialize()
{
	messageTo( self, "handleDelayedSetup", null, 10, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleDelayedSetup()
{
	intializeWarren( self, null );
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if ( isGod( speaker ) && text.equals("reset") )
	{
		debugSpeakMsg( speaker, "resetting the warren!" );
		intializeWarren( self, speaker );
	}
	return SCRIPT_CONTINUE;
}


void spawnTurret( obj_id bldg )
{
	if ( hasObjVar( bldg, "warren.turret" ))
	{
		obj_id oldTurret = getObjIdObjVar( bldg, "warren.turret" );
		if ( oldTurret.isLoaded() )
			destroyObject( oldTurret );
	}

	location spawnLoc = getLocation( bldg );
	spawnLoc.x = 22.46f;
	spawnLoc.y = -20.0f;
	spawnLoc.z = -70.97f;
	spawnLoc.cell = getCellId( bldg, "smallroom24" );
	obj_id turret = createObject("object/installation/turret/turret_tower_sm.iff", spawnLoc);

	setObjVar( bldg, "warren.turret", turret );

	setYaw( turret, -92 );

	//detach all old scripts:
	string[] scriptList = getScriptList(bldg);
	for ( int i = 0; i < scriptList.length; i++ )
		detachScript( turret, scriptList[i] );

	//give it the new hotness:
	attachScript( turret, "theme_park.warren.warren_turret" );

}

void intializeWarren( obj_id bldg, obj_id god )
{
	if ( hasObjVar( bldg, ESCAPEE ) )
	{
		obj_id oldEscapee = getObjIdObjVar( bldg, ESCAPEE );
		if ( isIdValid( oldEscapee ) && oldEscapee.isLoaded() )
			return;//there's still an escapee out there, somewhere
	}

	spawnTurret( bldg );
	spawnEscapee( bldg );
	spawnEscapedWorker( bldg );
	spawnCloneRelicsBox( bldg );
	spawnDyingLoyalist( bldg );
	spawnPanickedResearcher( bldg );
	spawnKnag( bldg );
	spawnDebris( bldg );
	resetTurretCodeSequence( bldg );
	lockReactorCoreRoom( bldg );
	lockCell( bldg );
	spawnCellGuard(bldg);
	spawnMirla( bldg );
	attachCommandWarning( bldg );
}

void resetTurretCodeSequence( obj_id bldg )
{
	string turretCodeSequence = toUpper( generateRandomName("object/creature/player/rodian_male.iff") );
	setObjVar( bldg, "warren.turretCodeSequence", turretCodeSequence );
	string cellPassword = toUpper( generateRandomName("object/creature/player/rodian_male.iff") );
	setObjVar( bldg, "warren.cellPassword", cellPassword );
}

void spawnEscapee( obj_id bldg )
{
	location outLoc = getBuildingEjectLocation(bldg);
	outLoc.x += 80.0f;
	outLoc.z += 80.0f;
	obj_id escapee = create.object( ESCAPEE_CREATURENAME, outLoc );
	if ( !isIdValid( escapee ) )
		return;//this is well and truly fucked.

	setObjVar( bldg, ESCAPEE, escapee );
	setObjVar( escapee, "warren.bldg", bldg );
	attachScript( escapee, ESCAPEE_SCRIPT );
}

void spawnCellGuard( obj_id bldg )
{
	location spawnLoc = getLocation( bldg);
	spawnLoc.x = 29.35f;
	spawnLoc.y = -50.0f;
	spawnLoc.z = -149.01f;
	spawnLoc.cell = getCellId( bldg, "smallroom46" );
	obj_id escapee = create.createNpc( CELL_GUARD_CREATURENAME, "warren_jerrd_sonclim.iff", spawnLoc );
	if ( !isIdValid( escapee ) )
		return;//this is well and truly fucked.
	setYaw( escapee, -90.0f );

	setObjVar( escapee, "warren.bldg", bldg );
	attachScript( escapee, CELL_GUARD_SCRIPT );
}

messageHandler handleCellGuardDied()
{
	spawnCellGuard( self );
	return SCRIPT_CONTINUE;
}

void spawnKnag( obj_id bldg )
{
	location spawnLoc = getLocation( bldg);
	spawnLoc.x = 77.47f;
	spawnLoc.y = -68.0f;
	spawnLoc.z = 38.95f;
	spawnLoc.cell = getCellId( bldg, "smallroom66" );
	obj_id escapee = create.createNpc( KNAG_CREATURENAME, "warren_knag_garhun.iff", spawnLoc );
	if ( !isIdValid( escapee ) )
		return;//this is well and truly fucked.

	setObjVar( escapee, "warren.bldg", bldg );
	attachScript( escapee, KNAG_SCRIPT );
}

messageHandler handleKnagDied()
{
	spawnKnag( self );
	return SCRIPT_CONTINUE;
}

void spawnMirla( obj_id bldg )
{
	location spawnLoc = getLocation( bldg);
	spawnLoc.x = -58.56f;
	spawnLoc.y = -76f;
	spawnLoc.z = -35.24f;
	spawnLoc.cell = getCellId( bldg, "smallroom54" );
	obj_id escapee = create.createNpc( MIRLA_CREATURENAME, "warren_mirla.iff", spawnLoc );
	if ( !isIdValid( escapee ) )
		return;//this is well and truly fucked.

	setObjVar( escapee, "warren.bldg", bldg );
	attachScript( escapee, MIRLA_SCRIPT );
}

messageHandler handleMirlaDied()
{
	spawnMirla( self );
	return SCRIPT_CONTINUE;
}


void spawnEscapedWorker( obj_id bldg )
{
	location spawnLoc = getLocation( bldg );
	spawnLoc.x = -7.47f;
	spawnLoc.y = -20.0f;
	spawnLoc.z = -61.61f;
	spawnLoc.cell = getCellId( bldg, "smallroom9" );
	obj_id escapee = create.createNpc( ESCAPED_WORKER_CREATURENAME, "warren_phy_hudgen.iff", spawnLoc );
	if ( !isIdValid( escapee ) )
		return;//GAH!

	setObjVar( escapee, "warren.bldg", bldg );
	attachScript( escapee, ESCAPED_WORKER_SCRIPT );
}

void spawnCloneRelicsBox(obj_id self)
{
	obj_id terminalRoom = getCellId (self, "entryhall");
	location computerloc = new location (-31.5f, -20.0f, -11.6f, "dantooine", terminalRoom);
	int yaw = 90;
	
	obj_id computer = create.object ("object/tangible/quest/clone_relics_computer_terminal.iff", computerloc);
	setYaw(computer, yaw);
		
	return;
}

void spawnDyingLoyalist( obj_id bldg )
{
	location spawnLoc = getLocation( bldg );
	spawnLoc.x = -57.54f;
	spawnLoc.y = -28.0f;
	spawnLoc.z = -91.04f;
	spawnLoc.cell = getCellId( bldg, "smallroom29" );
	obj_id loyalist = create.createNpc( DYING_LOYALIST_CREATURENAME, "warren_dying_loyalist.iff", spawnLoc );
	if ( !isIdValid( loyalist ) )
		return;//GAH!

	setObjVar( loyalist, "warren.bldg", bldg );
	attachScript( loyalist, DYING_LOYALIST_SCRIPT );
}

void spawnPanickedResearcher( obj_id bldg )
{
	location spawnLoc = getLocation( bldg );
	spawnLoc.x = 29.68f;
	spawnLoc.y = -54.0f;
	spawnLoc.z = -116.8f;
	spawnLoc.cell = getCellId( bldg, "bigroom43" );
	obj_id loyalist = create.createNpc( PANICKED_RESEARCHER_CREATURENAME, "warren_research_scientist.iff", spawnLoc );
	if ( !isIdValid( loyalist ) )
		return;//GAH!

	setObjVar( loyalist, "warren.bldg", bldg );
	attachScript( loyalist, PANICKED_RESEARCHER_SCRIPT );
}

messageHandler handleLoyalistDied()
{
	spawnDyingLoyalist( self );
	return SCRIPT_CONTINUE;
}

messageHandler handleEscapeeDied()
{
	spawnEscapee( self );
	return SCRIPT_CONTINUE;
}

messageHandler handleEscapedWorkerDied()
{
	spawnEscapedWorker( self );
	return SCRIPT_CONTINUE;
}

messageHandler handleResearcherDied()
{
	spawnPanickedResearcher( self );
	return SCRIPT_CONTINUE;
}

void spawnDebris( obj_id bldg )
{
	if ( hasObjVar(bldg,"warren.debrisObject" ))
	{
		obj_id oldDebris = getObjIdObjVar(bldg,"warren.debrisObject");
		if ( isIdValid( oldDebris ) )
		{
			if ( hasScript( oldDebris, "object.destroy_message" ))
				detachScript( oldDebris, "object.destroy_message" );

			destroyObject( oldDebris );
		}
	}

	location spawnLoc = getLocation( bldg );
	spawnLoc.x = -54.55f;
	spawnLoc.y = -68.0f;
	spawnLoc.z = .63f;
	spawnLoc.cell = getCellId( bldg, "smallroom52" );

	//clean-up old mess:
	obj_id oldDebrises[] = getContents( spawnLoc.cell );
	if ( oldDebrises != null )
	{
		for ( int i = 0; i < oldDebrises.length; i++ )
		{
			//cancel the destroy message:
			if ( hasScript( oldDebrises[i], "object.destroy_message" ))
				detachScript( oldDebrises[i], "object.destroy_message" );

			destroyObject( oldDebrises[i] );
		}
	}

	obj_id debris = create.object( "object/tangible/newbie_tutorial/debris.iff", spawnLoc );
	create.addDestroyMessage( debris, "handleRespawnDebris", 1800, bldg );
	setObjVar(bldg,"warren.debrisObject", debris);
}

messageHandler handleRespawnDebris()
{
	removeObjVar( self, "warren.debrisObject");
	spawnDebris( self );

	return SCRIPT_CONTINUE;
}

trigger OnLostItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	if ( !isPlayer(item) )
		return SCRIPT_CONTINUE;

	if (isIdValid(destContainer) )
		return SCRIPT_CONTINUE;

	//debugSpeakMsg( item, "revoking permission" );

	//permissionsRemoveAllowed( entryCell, getChatName(item));
	if (!containsPlayer(self))
	{
		//debugSpeakMsg( item, "removing all permissions" );
		removeAllAllowed( self );
	}

 	return SCRIPT_CONTINUE;
}

trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	//if ( isIdValid(srcContainer) )
	//	return SCRIPT_CONTINUE;//moving around inside the bldg!

	if ( !isPlayer( item ) )
		return SCRIPT_CONTINUE;

	if ( isGod(item) )
	{
		//debugSpeakMsg( item, "i am god" );
		return SCRIPT_CONTINUE;
	}

	if ( isAllowed(self, item ) )
	{
		//debugSpeakMsg( item, "I have permission to enter this cell" );
		return SCRIPT_CONTINUE;
	}

	obj_id pInv = utils.getInventoryContainer( item );
	obj_id[] contents = getContents( pInv );
	if ( contents == null )
	{
		//debugSpeakMsg( item, "you got nothing" );
		return SCRIPT_OVERRIDE;
	}

	for ( int i = 0; i < contents.length; i++ )
	{
		if ( hasObjVar( contents[i], "warren.keycode" ) )
		{
			//debugSpeakMsg( item, "unlocking!" );
			destroyObject( contents[i] );
			//permissionsAddAllowed(self, getChatName(item));
			//permitAllGroupMembers(self,item);
			addAllowed(self, item);
			return SCRIPT_CONTINUE;
		}
	}

	sendSystemMessage( item, new string_id( SYSTEM_MESSAGES, "access_denied" ));
 	return SCRIPT_OVERRIDE;
}

boolean containsPlayer(obj_id bldg)
{
	obj_id[] contents = getContents(bldg);
	if (contents != null)
		for (int i = 0; i < contents.length; ++i)
			if (isPlayer(contents[i]) || containsPlayer(contents[i]))
				return true;

	return false;
}

void addAllowed( obj_id bldg, obj_id player )
{

	if ( player.isLoaded() && isPlayer( player ) )
		sendSystemMessage( player, new string_id( SYSTEM_MESSAGES, "access_granted" ));

	//flag you for access:
	utils.setScriptVar( player, "warren.isAllowed", true );

	string listName = "allowedList";
	obj_id group = getGroupObject(player);

	if (hasObjVar(bldg, listName))
	{
		obj_id[] allowedList = getObjIdArrayObjVar(bldg, listName);
		if ( isIdValid( group ) )
		{
			//if your group is not already in the list, add it:
			allowedList = getObjIdArrayObjVar(bldg, listName);
			if (!utils.isObjIdInArray(allowedList, group))
			{
				obj_id[] newAllowedList = new obj_id[allowedList.length+1];
				System.arraycopy(allowedList, 0, newAllowedList, 0, allowedList.length);
				newAllowedList[allowedList.length] = group;
				if(newAllowedList.length > 0) {			// Zero length array check

					setObjVar(bldg, listName, newAllowedList);
				}
			}
		}
		return;
	}
	else if ( isIdValid( group) )
	{
		//add you and your group to the list:
		obj_id[] allowedList = new obj_id[1];
		allowedList[0] = group;
		setObjVar(bldg, listName, allowedList);			// Suppress linting - We know that this array will
	}													// always be at least one element long
}

void removeAllAllowed( obj_id bldg )
{
	removeObjVar( bldg, "allowedList" );
	resetTurretCodeSequence( bldg );
}

boolean isAllowed( obj_id bldg, obj_id player )
{
	boolean playerIsAllowed = false;
	if ( utils.hasScriptVar( player, "warren.isAllowed" ) )
		playerIsAllowed = true;

	string listName = "allowedList";
	if (!hasObjVar(bldg, listName))
		return playerIsAllowed;//no groups on the list, so just return your permit

	obj_id[] allowedList = getObjIdArrayObjVar(bldg, listName);

	obj_id group = getGroupObject(player);
	if ( !isIdValid( group ) )
		return playerIsAllowed;//you have no group, so whether you are allowed
							   // in or not is purely based on your personal
							   // permission

	if ( utils.isObjIdInArray(allowedList, group) )
	{
		if ( !playerIsAllowed )
		{
			//you're not allowed in, but your group is, so we'll add you to
			// the list:
			addAllowed( bldg, player );
		}
		return true;
	}
	else
	{
		if ( playerIsAllowed )
		{
			//you're allowed in, but your group is NOT, so we'll add you
			// your group to the list:
			addAllowed( bldg, player );//yes, send it the player obj_id not the group
			return true;
		}
	}

	return false;//looks like neither you nor your group are allowed inside
}

void lockReactorCoreRoom( obj_id bldg )
{
	obj_id cell = getCellId( bldg, "smallroom44" );
	if ( !isIdValid( cell ) )
		return;

	if ( !hasScript( cell, "theme_park.warren.reactor_core" ))
		attachScript( cell, "theme_park.warren.reactor_core" );

	return;
}

void lockCell( obj_id bldg )
{
	obj_id cell = getCellId( bldg, "smallroom47" );
	if ( !isIdValid( cell ) )
		return;

	if ( !hasScript( cell, "theme_park.warren.inquisitor_cell" ))
		attachScript( cell, "theme_park.warren.inquisitor_cell" );

	return;
}

void attachCommandWarning( obj_id bldg )
{
	obj_id cell = getCellId( bldg, "smallroom78" );
	if ( !isIdValid( cell ) )
		return;

	if ( !hasScript( cell, "theme_park.warren.command_warning" ))
		attachScript( cell, "theme_park.warren.command_warning" );

	return;
}

messageHandler handlePlayerLogin()
{
	obj_id player = params.getObjId( "player" );
	if ( !isIdValid( player ) )
		return SCRIPT_CONTINUE;

	if (!isAllowed(self, player ) )
		addAllowed( self, player );

	return SCRIPT_CONTINUE;
}

