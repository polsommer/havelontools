include library.utils;

const string LETTER_TEMPLATE	= "object/tangible/mission/quest_item/warren_inquisitor_letter.iff";
const string SYSTEM_MESSAGES	= "theme_park/warren/warren_system_messages";

trigger OnInitialize()
{
	utils.setScriptVar( self, "messageSent", true );
	messageTo( self, "respawnLetter", null, 1, false );
	return SCRIPT_CONTINUE;
}

void spawnLetter( obj_id container )
{
	obj_id[] contents = getContents( container );
	if ( contents != null )
	{
		for ( int i = 0; i < contents.length; i++)
		{
			if ( hasObjVar( contents[i], "warren.inquisitor_letter" ) )
				//remove all the extra inquisitor_letter.
				for(int j = i+1; j < contents.length; ++j)
				{
					destroyObject(contents[j]);
				}
				return; //we have our reactorControlRod
		}
	}
	obj_id letter = createObject( LETTER_TEMPLATE, container, "" );
	attachScript( letter, "theme_park.warren.inquisitor_letter" );
	setObjVar( letter, "warren.inquisitor_letter", true );

	setName( letter, "" );
	setName( letter, new string_id( SYSTEM_MESSAGES, "inq_letter_name" ) );

}

messageHandler respawnLetter()
{
	utils.removeScriptVar( self, "messageSent" );
	spawnLetter( self );
	return SCRIPT_CONTINUE;
}

trigger OnClosedContainer(obj_id player)
{
	if ( utils.hasScriptVar( self, "messageSent" ) )
		return SCRIPT_CONTINUE;//already sent a message to respawn this

	obj_id[] contents = getContents( self );
	if ( contents != null )
	{
		for ( int i = 0; i < contents.length; i++)
		{
			if ( hasObjVar( contents[i], "warren.inquisitor_letter" ) )
				return SCRIPT_CONTINUE;//still has a letter in it
		}
	}

	messageTo( self, "respawnLetter", null, 3600, false );//respawns every hour
	utils.setScriptVar( self, "messageSent", true );
	return SCRIPT_CONTINUE;
}

