include library.utils;
include library.features;

inherits theme_park.newbie_tutorial.tutorial_base;

trigger OnAttach()
{
	//debugServerConsoleMsg( self, "jtl_newbie script attached!" );
	setObjVar(self, "jtlNewbie", 1 );//inform combat_ship_player that this has been attached.
	newbieTutorialRequest( self, "clientReady" );
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	//if this is 4 then the emails have been sent, otherwise we need to send them in clientReady
	if ( getIntObjVar(self, "jtlNewbie" ) != 4  )
		newbieTutorialRequest( self, "clientReady" );

	return SCRIPT_CONTINUE;
}


trigger OnNewbieTutorialResponse( string action )
{
	if ( action != "clientReady" )
		return SCRIPT_CONTINUE;

	//if you are in the tutorial, then this should detach, we're never sending you JtL emails.
	if ( isInTutorial( self ) )
	{
		//if ALL new players do NOT have JtL, then don't do this stuff:
		// for now, assume that they do:
		setObjVar(self, "jtlNewbie", 4 );//we're done!
		detachScript( self, "theme_park.newbie_tutorial.jtl_newbie" );
		return SCRIPT_CONTINUE;
	}

	int jtlNewbiePhase = getIntObjVar(self, "jtlNewbie" );
	if ( jtlNewbiePhase == 4 )
	{
		return SCRIPT_CONTINUE;//mails already sent, they'll handle detachment of this
	}
	else
	{
		sendJtLemails( self );
		setObjVar(self, "jtlNewbie", 4 );//we're done!
	}
	return SCRIPT_CONTINUE;
}

void sendJtLemails( obj_id self )
{
	// SEND N00b MAILS!
	dictionary dctParams = new dictionary();

	dctParams.put("intMail", 1);
	messageTo(self, "sendNewbieMails", dctParams, rand(30, 45), true);

	dctParams.put("intMail", 2);
	messageTo(self, "sendNewbieMails", dctParams, rand(90, 120), true);

	dctParams.put("intMail", 3);
	messageTo(self, "sendNewbieMails", dctParams, rand(180, 220), true);

	messageTo( self, "handleDetachJtlNewbie", null, 225, false );
}

messageHandler sendNewbieMails()
{
	int intMail = params.getInt("intMail");
	LOG("space", "received mail "+intMail+" for "+self);
	string_id strSubject = new string_id("space/space_interaction", "email_subject_"+intMail);
	string_id strBody = new string_id("space/space_interaction", "email_body_"+intMail);
	string_id strSender = new string_id("space/space_interaction", "email_sender_"+intMail);
	string strSenderName = utils.packStringId(strSender);
	LOG("space", "Received sendNewbieMail for "+self+" sending email "+intMail+" name is "+strSenderName);

	string body_oob    = chatMakePersistentMessageOutOfBandBody(null, strBody);
	string subject_str = "@" + strSubject.toString();
	string waypName = "none";

	switch ( intMail )
	{
		case 1 :
			//From the Empire!
			waypName = utils.packStringId( new string_id("npc_spawner_n", "cmdr_landau" ));
			body_oob = chatAppendPersistentMessageWaypointData (body_oob, "naboo", -5516.0f, 4403.0f, null, waypName );
			break;
		case 2 :
			//from the Pilot's Guild
			waypName = utils.packStringId( new string_id("npc_spawner_n", "gil_burtin" ));
			body_oob = chatAppendPersistentMessageWaypointData (body_oob, "tatooine", -1174.0f, -3647.0f, null, waypName );
			break;
		case 3 :
			//from the Rebel Alliance
			waypName = utils.packStringId( new string_id("npc_spawner_n", "j_pai_brek" ));
			body_oob = chatAppendPersistentMessageWaypointData (body_oob, "corellia", -5072.0f, -2343.0f, null, waypName );
			break;
	}
	chatSendPersistentMessage( strSenderName, getChatName(self), subject_str, null, body_oob );
	return SCRIPT_CONTINUE;
}

boolean isInTutorial( obj_id self )
{
	boolean tutorialTest = false;

	location loc = getLocation( self );
	string area = loc.area;
	if ( area.equals("tutorial") || area.startsWith( "space_" ) || area.startsWith("space_ord_mantell") || hasObjVar( self, "npe.station_instance_id" ) )
	{
		tutorialTest = true;
	}
	return ( tutorialTest );
}

messageHandler handleDetachJtlNewbie()
{
	//debugServerConsoleMsg( self, "detach-a-magic!" );
	setObjVar(self, "jtlNewbie", 4 );//we're done!
	detachScript( self, "theme_park.newbie_tutorial.jtl_newbie" );
	return SCRIPT_CONTINUE;
}

