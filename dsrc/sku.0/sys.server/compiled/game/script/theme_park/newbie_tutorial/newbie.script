include library.xp;
include library.loot;
include library.chat;
include library.ai_lib;
include library.utils;
include library.money;
include library.colors;
include library.features;
include library.groundquests;

inherits theme_park.newbie_tutorial.tutorial_base;

const String questNewbieHall01 = "c_newbie_hall_01";

trigger OnAttach()
{
	if ( features.isSpaceEdition(self))
		setObjVar(self, "jtlNewbie", 4 );//we're done!

	obj_id bldg = getTopMostContainer( self );
	setObjVar( bldg, NEWBIE_PLAYER, self );

	newbieTutorialRequest( self, "clientReady" );
	newbieTutorialRequest( self, "openStatMigration" );
	deleteInventory( self );
	fillbank( self );
	grantNewbieStartingMoney( self );
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( features.isSpaceEdition(self))
		setObjVar(self, "jtlNewbie", 4 );//we're done!

	location loc = getLocation( self );
	string area = loc.area;
	if ( area.equals("tutorial") )
	{
		obj_id bldg = getTopMostContainer( self );
		if ( bldg != null )
		{
			setObjVar( bldg, NEWBIE_PLAYER, self );
		}

		//if they are logged in and flagged Trained but don't have the skill,
		// then give it to them:
		if ( hasObjVar( self, "newbie.trained") )
		{
			string skillName = getStringObjVar( self, "newbie.hasSkill" );
			if ( skillName != null )
			{
				if (!hasSkill( self, skillName))
					grantSkill(self, skillName);
			}
		}
		return SCRIPT_CONTINUE;
	}//endif you are in the tutorial.

	return SCRIPT_CONTINUE;
}

void beginTutorial( obj_id self )
{
	obj_id bldg = getTopMostContainer( self );

	if (!groundquests.isQuestActiveOrComplete(self, questNewbieHall01))
	{
		groundquests.grantQuest(self, questNewbieHall01, false);
	}

	messageTo( self, "handleWelcome", null, 5, false );

}

trigger OnDetach()
{
	if ( hasObjVar( self, "newbie.hasReleaseDocuments") )
	{
		obj_id wayp = getObjIdObjVar( self, "newbie.hasReleaseDocuments");
		destroyWaypointInDatapad(wayp, self);
	}

	sendStartingMessage( self );

	string skillName = getStringObjVar( self, "newbie.hasSkill" );
	if ( skillName != null )
	{
		if (!hasSkill( self, skillName))
			grantSkill(self, skillName);
	}
	removeObjVar( self, "newbie" );

	transferBankToInventory(self);


	//take away all the meats and crap the player has picked-up
	// and then give him some food:
	obj_id playerInv = utils.getInventoryContainer(self);
	obj_id[] contents = getContents(playerInv);
	for ( int i = 0; i < contents.length; i++ )
	{
		if ( hasObjVar( contents[i], "newbie.item" ))
		{
			if ( hasScript( contents[i], BOX_ITEM_SCRIPT ))
				detachScript( contents[i], BOX_ITEM_SCRIPT );
			destroyObject( contents[i] );//take away all the free meats
		}
	}

	//destroy any weapons the dude gave you:
	contents = getContents(self);
	for ( int i = 0; i < contents.length; i++ )
	{
		if ( hasObjVar( contents[i], "newbie.item" ))
			destroyObject( contents[i] );
	}

	//quitBank(self);//no longer a member of the newbie bank
	removeObjVar( self, "banking_bankid" );

	for ( int i = 0; i < BOX_CONTENTS.length; i++ )
	{
		createObject( BOX_CONTENTS[i], playerInv, "");
	}
	removeObjVar( self, loot.VAR_DENY_LOOT );

	// Go through the player's existing equipment and setup decay, before we add new equipment.
	obj_id pInv = utils.getInventoryContainer( self );
	contents = getContents( pInv );
	if ( contents != null )
	{
		for ( int i=0; i<contents.length; i++ )
		{
			
		}
	}
	contents = getContents( self );
	if ( contents != null )
	{
		for ( int i=0; i<contents.length; i++ )
		{
			
		}
	}

	removeObjVar( self, "newbie" );
	removeObjVar( self, "skipTutorial" );
	removeObjVar( self, "banking_bankid" );

	setObjVar (self, "comingFromTutorial", 1);

	grantAllNoviceSkills(self);
	return SCRIPT_CONTINUE;
}

trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	dictionary params = new dictionary();
	params.put( "player", self );
	obj_id bldg = getTopMostContainer( self );

	obj_id player = getObjIdObjVar( bldg, NEWBIE_PLAYER );
	if ( player == null )
	{
		setObjVar( bldg, NEWBIE_PLAYER, self );
		player = self;
	}

	if ( isInRoom( self, "r1" ) )
	{
		return SCRIPT_CONTINUE;
	}

	//you moved into room 2:
	if ( isInRoom( self, "r2" ) )
	{
		//sysMessage( self, "part_2" );
		flagRoomComplete( self, "r1" );
		obj_id greeter = getObjIdObjVar( bldg, GREETER );
		faceToBehavior( greeter, self );
		messageTo( greeter, "initiateConvo", null, 2, false );
		return SCRIPT_CONTINUE;
	}

	//you moved into room 3:
	if ( isInRoom( self, "r3" ) )
	{
		//sysMessage( self, "part_3" );
		flagRoomComplete( self, "r2" );
		//turn on all the AI elements except for radar
		initiateCommerceRoom( self );
		return SCRIPT_CONTINUE;
	}

	//room4
	if ( isInRoom( self, "r4" ) )
	{
		//sysMessage( self, "part_4" );
		flagRoomComplete( self, "r3" );
		initiateCloneRoom( self );
		return SCRIPT_CONTINUE;
	}

	//room 5
	if ( isInRoom( self, "r5" ) )
	{
		flagRoomComplete( self, "r4" );
		initiatePromptToClone( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r6") )
	{
		flagRoomComplete( self, "r5" );
		doRoomSixPrompt( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r7") )
	{
		//sysMessage( self, "part_5" );
		initiatePromptForCombat( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r8" ))
	{
		//sysMessage( self, "part_6" );
		if ( hasObjVar( self, "newbie.hasWeapon") )
			flagRoomComplete( self, "r7" );


		//lock room nine if you haven't killed the pirate:
		if ( !hasObjVar( self, "newbie.killedPirate" ) )
		{
			initiatePirateAttack( self, bldg );
		}
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r9" ) )
	{
		messageTo (self, "moveOnToNextRoom", null, 1, false );
		initiateTrainerExplanation( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r10" ) )
	{
		//sysMessage( self, "part_8" );
		flagRoomComplete( self, "r9" );
		initiateMissionExplanation( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r11" ) )
	{
		//sysMessage( self, "part_9" );
		flagRoomComplete( self, "r10" );
		initiateTravelExplanation( self );
		return SCRIPT_CONTINUE;
	}

	if ( isInRoom( self, "r14") )
	{
		handlePromptToNextRoom(self);
		flagRoomComplete( self, "r14" );
	}

 	return SCRIPT_CONTINUE;
}

trigger OnNewbieTutorialResponse( string action )
{
	if ( action == "clientReady" )
	{
		location loc = getLocation( self );
		string area = loc.area;
		if ( area.equals("tutorial") )
			beginTutorial( self );
		else
			utils.setScriptVar( self, "newbie.hasExitedTutorial", true );

	}
	else if ( action == "zoomCamera" )
	{
		if ( utils.hasScriptVar( self, "newbie.waitingForCameraZoom" ) )
		{
			utils.removeScriptVar( self, "newbie.waitingForCameraZoom" );
			messageTo( self, "handleChatWindow", null, 10.0f, false );
		}
	}
	else if ( action == "openCharacterSheet" )
	{
		utils.removeScriptVar( self, "newbie.waitingForcharacterSheet" );
		messageTo( self, "handleStatusScreenInfo", null, 1, false );
	}
	else if ( action == "closeCharacterSheet" )
	{
		utils.removeScriptVar( self, "newbie.waitingForcharacterSheetClose" );
	}
	else if ( action == "openInventory" )
	{
		if (utils.hasScriptVar( self, "newbie.waitingForInventoryOpen"))
		{
			if ( isInRoom( self, "r2" ))
			{
				utils.removeScriptVar( self, "newbie.waitingForInventoryOpen");
				messageTo( self, "handleToolbarPrompt", null, 6, false );
				newbieTutorialRequest( self, "closeInventory" );
			}
			utils.removeScriptVar( self, "newbie.waitingForInventoryOpen");
		}
	}
	else if ( action == "closeInventory" )
	{
		utils.setScriptVar( self, "newbie.skipCloseInventory", true );
		if (utils.hasScriptVar( self, "newbie.waitingForInventoryClose"))
			messageTo( self, "handlePromptToCommerceRoom", null, 5, false );
		utils.removeScriptVar( self, "newbie.waitingForInventoryClose");
	}
	else if ( action == "changeMouseMode" )
	{
		//if ( isInRoom( self, "r1" ))
			//sysMessage( self, "explain_alt_key" );
	}
	else if ( action == "openStatMigration" )
	{
		//sysMessage( self, "stat_open" );
	}
	else if ( action == "closeHolocron" )
	{
		messageTo( self, "handleMoveToItemRoomPrompt", null, 1, false );
	}

	return SCRIPT_CONTINUE;
}


/** ROOM ONE ***********************************************/
messageHandler handleWelcome()
{
	obj_id bldg = getTopMostContainer( self );
	setObjVar( bldg, "newbie.player", self );
	//sysMessage( self, "welcome" );
	messageTo( self, "handleMoveKeys", null, 10, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleMoveKeys()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage(self, "movement_keyboard" );
	messageTo( self, "handleMoveMouse", null, 7, false );

	return SCRIPT_CONTINUE;
}

messageHandler handleMoveMouse()
{

	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage(self, "movement_mouse" );
	messageTo (self, "moveOnToNextRoom", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleMouseWheel()
{

	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "mousewheel" );//use your mousewheel
	utils.setScriptVar( self, "newbie.waitingForCameraZoom", true );

	messageTo( self, "handleNoMouseWheelOrKeypad", null, MEDIUM_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleNoMouseWheelOrKeypad()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.waitingForCameraZoom" ))
	{
		utils.removeScriptVar( self, "newbie.waitingForCameraZoom" );
		messageTo( self, "handleChatWindow", null, LONG_DELAY, false );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handlePromptForCameraZoom()
{
	if ( !isInRoom( self, "r1" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.waitingForCameraZoom" ))
	{
		//sysMessage( self, "mousewheel_repeat");
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleChatWindow()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.alreadyChatted" ) )
		return SCRIPT_CONTINUE;
	else
		utils.setScriptVar( self, "newbie.alreadyChatted", true );

	//sysMessage( self, "chatwindow" );
	utils.setScriptVar( self, "newbie.promptedToChat", true );

	return SCRIPT_CONTINUE;
}

messageHandler handleRepeatChatPrompt()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//they've already chatted:
	if ( !utils.hasScriptVar( self, "newbie.promptedToChat" ) )
		return SCRIPT_CONTINUE;

	//they still haven't chatted:
	//sysMessage( self, "repeatchatprompt" );
	utils.setScriptVar( self, "newbie.promptedToChat", true );

	return SCRIPT_CONTINUE;
}

trigger OnSpeaking( string text )
{

	if ( utils.hasScriptVar( self, "newbie.promptedToChat" ))
	{
		utils.removeScriptVar( self, "newbie.promptedToChat" );
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleOpencharacterSheetWindow()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "open_status_prompt" );
	newbieTutorialRequest( self, "openCharacterSheet" );
	utils.setScriptVar( self, "newbie.waitingForcharacterSheet", true );
	messageTo( self, "handleRepeatOpencharacterSheet", null, VERY_LONG_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleRepeatOpencharacterSheet()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.waitingForcharacterSheet" ) )
	{
		//sysMessage( self, "repeat_status_prompt" );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleRepeatClosecharacterSheet()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.waitingForcharacterSheetClose" ) )
	{
		//sysMessage( self, "repeat_closestatus_prompt" );
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleStatusScreenInfo()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "close_status_prompt" );
	newbieTutorialRequest( self, "closeCharacterSheet" );
	utils.setScriptVar( self, "newbie.waitingForcharacterSheetClose", true );
	messageTo( self, "handleRepeatClosecharacterSheet", null, VERY_LONG_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleMoveToItemRoomPrompt()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	utils.removeScriptVar( self, "newbie.promptedToChat" );//no longer waiting for chat prompt

 	//sysMessage( self, "move_to_item_room" );

	obj_id greeter = getObjIdObjVar( getTopMostContainer( self ), ROOM1_GREETER );
	if ( greeter != null )
		messageTo( greeter, "handleNewArrival", null, 1, false );

	return SCRIPT_CONTINUE;
}

messageHandler handleRepeatItemRoomPrompt()
{
	if ( !isInRoom( self, "r1" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "repeat_item_room_prompt" );
	return SCRIPT_CONTINUE;
}

/** ROOM TWO ***********************************************/
messageHandler handleExplainFreemouse()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.handleExplainFreemouse" ))
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		utils.setScriptVar( self, "newbie.handleExplainFreemouse", true );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleExplainInventory()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.handleExplainInventory" ))
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		utils.setScriptVar( self, "newbie.handleExplainInventory", true );
	}

	messageTo( self, "handleOpenInventory", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleOpenInventory()
{
	if ( !utils.hasScriptVar( self, "newbie.waitingForInventoryOpen" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleToolbarPrompt()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.handleToolbarPromp" ))
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		utils.setScriptVar( self, "newbie.handleToolbarPromp", true );
	}

	//sysMessage( self, "show_toolbar" );
	messageTo( self, "handleReadyItemPrompt", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleReadyItemPrompt()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.handleReadyItemPrompt" ))
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		utils.setScriptVar( self, "newbie.handleReadyItemPrompt", true );
	}

	messageTo( self, "handleUseToolbarPrompt", null, 1, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleUseToolbarPrompt()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.hasScriptVar( self, "newbie.handleUseToolbarPrompt" ))
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		utils.setScriptVar( self, "newbie.handleUseToolbarPrompt", true );
	}

	if ( !utils.hasScriptVar( self, "newbie.skipCloseInventory"))
	{
		utils.setScriptVar( self, "newbie.waitingForInventoryClose", true);
		messageTo( self, "handlePromptToCloseInventory", null, LONG_DELAY, false );
	}
	else
	{
		messageTo( self, "handlePromptToCommerceRoom", null, 1, false );
	}

	return SCRIPT_CONTINUE;
}

messageHandler handlePromptToCloseInventory()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	if (!utils.hasScriptVar( self, "newbie.waitingForInventoryClose"))
	{
		return SCRIPT_CONTINUE;
	}

	if (!utils.hasScriptVar( self, "newbie.skipCloseInventory"))
	{
		//sysMessage( self, "close_inventory" );
		messageTo( self, "handleInventoryAlreadyClosed", null, VERY_LONG_DELAY, false );
	}
	else
	{
		messageTo( self, "handleInventoryAlreadyClosed", null, 1, false );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleInventoryAlreadyClosed()
{
	if (utils.hasScriptVar( self, "newbie.waitingForInventoryClose"))
	{
		utils.removeScriptVar( self, "newbie.waitingForInventoryClose" );
	}

	messageTo( self, "handlePromptToCommerceRoom", null, 1, false );

	return SCRIPT_CONTINUE;
}

messageHandler handlePromptToCommerceRoom()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}
	if ( utils.hasScriptVar( self, "newbie.promptedToRoom") )
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		utils.setScriptVar( self, "newbie.promptedToRoom", true);
	}
	//sysMessage( self, "visit_commerce_room" );
	messageTo( self, "handleRepeatPromptToCommerceRoom", null, VERY_LONG_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleRepeatPromptToCommerceRoom()
{
	if ( !isInRoom( self, "r2" ))
	{
		return SCRIPT_CONTINUE;
	}

	//sysMessage( self, "repeat_visit_commerce" );
	return SCRIPT_CONTINUE;
}

/** ROOM THREE ***********************************************/
void initiateCommerceRoom( obj_id player )
{
	obj_id bldg = getBuilding( player );
	obj_id bank = getObjIdObjVar( bldg, BANK );
	flyText( bank, "bank_flytext", 1.5f, colors.YELLOW );

	if ( !utils.hasScriptVar(player,"newbie.bankAndBazaarSpamStarted" ))
	{
		messageTo( player, "handleBankAndBazaarFlyText", null, 5, false );
		utils.setScriptVar(player,"newbie.bankAndBazaarSpamStarted", true );
	}

	obj_id banker = getObjIdObjVar( bldg, BANKER );
	faceToBehavior( banker, player );
	messageTo( banker, "handleInitiateConvo", null, 2, false );


	//sysMessage( player, "tut_28" );

	makeStaticWaypoint( banker );
}

messageHandler handleBankAndBazaarFlyText()
{
	if ( isInRoom( self, "r3" ))
	{
		obj_id bldg = getBuilding( self );
		if ( !utils.hasScriptVar( self, "newbie.usedBank" ))
		{
			obj_id bank = getObjIdObjVar( bldg, BANK );
			flyText( bank, "bank_flytext", 1.5f, colors.YELLOW );
		}
		messageTo( self, "handleBankAndBazaarFlyText", null, 10, false );
	}
	return SCRIPT_CONTINUE;
}

/* -----------------12/3/2002 10:08PM----------------
 * BankInfoSpam and BazaarInfoSpam are a series of system messages initiated
 * when the user accesses the appropriate terminal.  If the spam from one
 * terminal hasn't completed yet, then the Pending objvar is set.
 *
 * When the spam is completed, then if the Pending objvar for the other
 * terminal is present, then that spam begins automatically.
 * --------------------------------------------------*/
messageHandler handleBankInfoSpam()
{
	utils.setScriptVar( self, "newbie.usedBank", true );
	if ( !isInRoom( self, "r3" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.bankSpamDone" ))
		return SCRIPT_CONTINUE;

	int bankSpamNum = utils.getIntScriptVar( self, "newbie.bankSpam" );
	bankSpamNum++;

	if ( bankSpamNum == 1 )
	{
		//sysMessage( self, "tut_32" );
		utils.setScriptVar( self, "newbie.bankSpam", bankSpamNum );
		messageTo( self, "handleBankInfoSpam", null, 25, false );

	}
	else if ( bankSpamNum == 2 )
	{
		//sysMessage( self, "tut_33" );
		utils.setScriptVar( self, "newbie.bankSpamDone", true );
		utils.removeScriptVar( self, "newbie.bankSpam" );
		messageTo (self, "moveOnToNextRoom", null, 5, false );
	}
	return SCRIPT_CONTINUE;
}

//deprecated, we never call this:
messageHandler handleBazaarInfoSpam()
{
	utils.setScriptVar( self, "newbie.usedBazaar", true );

	if ( !isInRoom( self, "r3" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.bazaarSpamDone" ))
		return SCRIPT_CONTINUE;

	//if the bank spam is running, then flag this spam as pending:
	if ( utils.hasScriptVar( self, "newbie.bankSpam" ))
	{
		utils.setScriptVar( self, "newbie.bazaarSpamPending", true );
		return SCRIPT_CONTINUE;
	}

	int bazaarSpamNum = utils.getIntScriptVar( self, "newbie.bazaarSpam" );
	bazaarSpamNum++;
	//sysMessage( self, "bazaar_info_"+bazaarSpamNum );
	switch ( bazaarSpamNum )
	{
		case 1 :
			break;
		case 2 :
			break;
		case 3 :
			utils.setScriptVar( self, "newbie.bazaarSpamDone", true );
			utils.removeScriptVar( self, "newbie.bazaarSpam" );

			//if the bank spam is pending, then start it now:
			if ( utils.hasScriptVar( self, "newbie.bankSpamPending" ))
				messageTo( self, "handleBankInfoSpam", null, MEDIUM_DELAY, false );

			return SCRIPT_CONTINUE;
	}

	utils.setScriptVar( self, "newbie.bazaarSpam", bazaarSpamNum );
	messageTo( self, "handleBazaarInfoSpam", null, SHORT_DELAY, false );

	return SCRIPT_CONTINUE;
}

/** ROOM FOUR *************************************************/
void initiateCloneRoom( obj_id player )
{
	obj_id cloneNpc = getObjIdObjVar( getBuilding( player ), CLONE_NPC );
	messageTo( cloneNpc, "handleInitiateConvo", null, SHORT_DELAY, false );
	//sysMessage( player, "tut_36" );
}

/** ROOM FIVE *************************************************/
void initiatePromptToClone( obj_id player )
{
	messageTo( player, "handleCloneAndInsureFlyText", null, 1, false );
	obj_id cloneNpc = getObjIdObjVar( getBuilding( player ), CLONE_NPC );
	messageTo( cloneNpc, "handleInitiateClonePrompt", null, 2, false );
	//sysMessage( player, "tut_37" );

	obj_id terminal = getObjIdObjVar( getTopMostContainer(player), CLONE_TERMINAL );
	makeStaticWaypoint( terminal );

}

messageHandler handleCloneAndInsureFlyText()
{
	if ( isInRoom( self, "r5" ))
	{
		obj_id bldg = getBuilding( self );
		if ( !utils.hasScriptVar( self, "newbie.usedCloneTerm" ))
		{
			obj_id bazaar = getObjIdObjVar( bldg, CLONE_TERMINAL );
			flyText( bazaar, "clone_here", 1.5f, colors.YELLOW );
		}
		if ( !utils.hasScriptVar( self, "newbie.usedInsureTerm" ))
		{
			obj_id bank = getObjIdObjVar( bldg, INSURANCE );
			flyText( bank, "insure_here", 1.5f, colors.YELLOW );
		}
		messageTo( self, "handleCloneAndInsureFlyText", null, 10, false );
	}
	return SCRIPT_CONTINUE;
}



messageHandler handlePromptToInsure()
{
	if ( utils.hasScriptVar( self, "newbie.insuredStuff" ))
	{
		return SCRIPT_CONTINUE;
	}

	//sysMessage( self, "tut_38" );
	return SCRIPT_CONTINUE;
}

//The player has accessed the clone terminal:
messageHandler handleCloneInfoSpam()
{
	removeStaticWaypoint(self);
	obj_id terminal = getObjIdObjVar( getTopMostContainer(self), INSURANCE );
	makeStaticWaypoint( terminal );

	//sysMessage( self, "declare_cloned" );
	messageTo( self, "handlePromptToInsure", null, SHORT_DELAY, false );
	return SCRIPT_CONTINUE;
}

//the player has accessed the insurance terminal:
messageHandler handleInsuranceInfoSpam()
{
	removeStaticWaypoint(self);
	setObjVar( self, "newbie.insuredStuff", true );

	//sysMessage( self, "declare_insured" );
	messageTo (self, "moveOnToNextRoom", null, 5, false );
	return SCRIPT_CONTINUE;
}

/** ROOM SIX - empty hallway*********************************************/
void doRoomSixPrompt(obj_id player)
{

	if ( utils.hasScriptVar( player, "newbie.panicInitiated"))
	{
		return;
	}
	else
	{
		utils.setScriptVar( player, "newbie.panicInitiated", true );
	}

	obj_id bldg = getTopMostContainer( player );
	obj_id panicGuy = getObjIdObjVar( bldg, PANIC_GUY );

	if ( !isIdValid( panicGuy ))
	{
		return;
	}

	playClientEffectObj(player, "clienteffect/combat_explosion_lair_large.cef", panicGuy, "");
	messageTo( panicGuy, "initiatePanic", null, 2, false );
	messageTo( player, "handleRadar", null, 5, false );
}

messageHandler handleSeeWhatIsGoingOn()
{
	return SCRIPT_CONTINUE;
}

/** ROOM SEVEN - ********************************************************/

void initiatePromptForCombat( obj_id player )
{
	if (!isInRoom( player, "r7" ) )
		return;

	obj_id bldg = getTopMostContainer( player );
	obj_id combatExplainer = getObjIdObjVar( bldg, COMBAT_EXPLAINER );
	makeStaticWaypoint(combatExplainer);

	messageTo( combatExplainer, "handlePlayerArrival", null, 3, false );
}

messageHandler handleExplainCombatToolbar()
{
	return SCRIPT_CONTINUE;
}

void handlePromptToNextRoom(obj_id self)
{
	if ( !hasObjVar( self, "newbie.killedPirate" ) )
	{
		//sysMessage( self, "tut_45" );

		obj_id pirate = getObjIdObjVar( getTopMostContainer(self), PIRATE );
		makeStaticWaypoint(pirate);
		messageTo( self, "handleExplainCombatToolbar", null, SHORT_DELAY, false );
	}
}

messageHandler handleRadar()
{
	if (!isInRoom( self, "r8" ))
	{
		//sysMessage( self, "radar" );
		messageTo( self, "handleRadarMore", null, SHORT_DELAY, false );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleRadarMore()
{
	if ( isInRoom( self, "r8" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "radar_more" );
	messageTo( self, "handleZoomMap", null, MEDIUM_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleZoomMap()
{
	if ( isInRoom( self, "r8" ))
	{
		return SCRIPT_CONTINUE;
	}

	//sysMessage( self, "tut_43" );
	return SCRIPT_CONTINUE;
}

/** ROOM EIGHT **********************************************************/

void initiatePirateAttack( obj_id player, obj_id bldg )
{
	obj_id pirate = getObjIdObjVar( bldg, PIRATE );
	if (!exists( pirate) )
	{
		return;
	}

	if ( ai_lib.isAiDead( pirate ))
	{
		return;
	}

	dictionary parms = new dictionary();
	parms.put( "player", player );

	messageTo( pirate, "handlePlayerInRoom", parms, 2, false );
	messageTo( player, "handleAttackingDescription", null, LONG_DELAY, false );
}

messageHandler handleAttackingDescription()
{
	return SCRIPT_CONTINUE;
}

messageHandler handleCongrats()
{
	//sysMessage( self, "loot_pirate" );
	return SCRIPT_CONTINUE;
}

/** ROOM NINE ***********************************************************/
void initiateTrainerExplanation( obj_id player )
{
	obj_id bldg = getTopMostContainer( player );
	obj_id officer = getObjIdObjVar( bldg, OFFICER );
	if ( officer == null )
		return;

	makeStaticWaypoint( officer );

	faceToBehavior( officer, player );
	messageTo( officer, "initiateConvo", null, 2, false );


	for ( int i = 0; i < CELEB_GUY_X.length; i++ )
	{
		obj_id celeb = getObjIdObjVar( bldg, CELEB_GUY + i );
		if ( isIdValid( celeb ))
			messageTo( celeb, "handlePlayerEnteredRoom", null, rand(2,4), false );
	}
}

messageHandler handleShowCharSheet()
{

	//sysMessage( self, "tut_51" );
	messageTo( self, "handlePromptToMissionRoom", null, VERY_LONG_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handlePromptToMissionRoom()
{
	return SCRIPT_CONTINUE;
}

messageHandler handleTrainerDoneTalking()
{
	utils.removeScriptVar( self, "newbie.trainerIsTalking" );
	return SCRIPT_CONTINUE;
}


/** ROOM TEN ***********************************************************/
void initiateMissionExplanation( obj_id player )
{
	if ( !isInRoom(player, "r10" ))
		return;

	messageTo( player, "handleMissionExplaination", null, 1, false );
}

messageHandler handleMissionExplaination()
{
	if ( !isInRoom(self, "r10" ))
		return SCRIPT_CONTINUE;


	if (!utils.hasScriptVar( self, "newbie.trainerIsTalking" ))
	{
		//sysMessage( self, "tut_53" );
		messageTo( self, "handleExplainNpcMissions", null, 9, false );
	}
	else
	{
		messageTo( self, "handleMissionExplaination", null, 5, false );
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleExplainNpcMissions()
{
	if ( !isInRoom(self, "r10" ))
		return SCRIPT_CONTINUE;

	if ( !utils.hasScriptVar( self, "newbie.doneTalking"))
	{
		//sysMessage( self, "tut_54" );

		obj_id bldg = getTopMostContainer(self);
		obj_id missionNpc = getObjIdObjVar( bldg, MISSION_NPC );
		makeStaticWaypoint( missionNpc );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleGetTravelWaypoint()
{

	if ( hasObjVar( self, "newbie.hasReleaseDocuments" ))
		return SCRIPT_CONTINUE;

	obj_id travelNpc = getObjIdObjVar( getTopMostContainer( self ), TRAVEL_NPC );
	if ( travelNpc != null )
	{
		//sysMessage( self, "tut_56" );
		obj_id wayp = createWaypointInDatapad( self, travelNpc );
		if (isIdValid(wayp))
		{
			// THIS IS NOT LOCATLIZED:  IT WILL NEED TO BE CHANGED WHEN SETWAYPOINTNAME CAN TAKE A STRING_ID:
			setWaypointName( wayp, getString( new string_id ( NEWBIE_STRING_FILE, "release_docs" )));
			setWaypointActive( wayp, true );
			setWaypointVisible( wayp, true );
			setObjVar( self, "newbie.hasReleaseDocuments", wayp );
		}
		makeStaticWaypoint( travelNpc );
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleExplainWaypoint()
{
	//sysMessage( self, "tut_55_waypoints" );
	return SCRIPT_CONTINUE;
}

/** ROOM ELEVEN ***********************************************************/
void initiateTravelExplanation( obj_id player )
{
	//sysMessage( player, "tut_57" );
	obj_id travelNpc = getObjIdObjVar( getTopMostContainer( player ), TRAVEL_NPC );
	if ( travelNpc != null )
		messageTo( travelNpc, "handleInitiateDialog", null, 0, false );
}

messageHandler handleStartOath()
{
	utils.setScriptVar( self, "newbie.takingOath", true );
	//sysMessage( self, "oath_explain" );
	messageTo( self, "handlePromptForPromise", null, SHORT_DELAY, false );
	return SCRIPT_CONTINUE;
}

messageHandler handlePromptForPromise()
{
	if ( utils.hasScriptVar( self, "newbie.oathCompleted" ))
		return SCRIPT_CONTINUE;

	utils.setScriptVar( self, "newbie.takingOath", true );

	//sysMessage( self, "make_promise" );
	if ( !utils.hasScriptVar( self, "newbie.repromptSent" ))
	{
		messageTo( self, "handleRePromptForPromise", null, LONG_DELAY, false );
		utils.setScriptVar( self, "newbie.repromptSent", true );
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleRePromptForPromise()
{
	if ( !isInRoom(self, "r11" ))
		return SCRIPT_CONTINUE;

	if ( utils.hasScriptVar( self, "newbie.oathCompleted" ))
		return SCRIPT_CONTINUE;

	//sysMessage( self, "swear_reminder" );
	messageTo( self, "handleRePromptForPromise", null, LONG_DELAY, false );
	return SCRIPT_CONTINUE;
}

/** GRANT NEWBIE STARTING MONEY *****************************************/
messageHandler xferFailed()
{
    grantNewbieStartingMoney( self );
    return SCRIPT_CONTINUE;
}

messageHandler timeToWithdraw()
{
    if ( (params == null) || (params.isEmpty()) )
    {
        messageTo(self, "xferFailed", null, 0, false);
        return SCRIPT_CONTINUE;
    }

	int amt = params.getInt(money.DICT_AMOUNT);
    withdrawCashFromBank(self, amt, "cashReceived", "xferFailed", params);
    return SCRIPT_CONTINUE;
}

messageHandler cashReceived()
{

    //account to cash transfer successful...
    //need to do something extra? do it here
    return SCRIPT_CONTINUE;
}

/** END OF THE SHOW *****************************************************/
messageHandler handleEndTutorial()
{
	if ( utils.hasScriptVar( self, "newbie.hasExitedTutorial" ))
	{
		//sysMessage( self, "keymap" );
		detachScript( self, "theme_park.newbie_tutorial.newbie" );
	}
	else
	{
		messageTo( self, "handleEndTutorial", null, 10, false );
	}
	return SCRIPT_CONTINUE;
}

commandHandler newbieRequestStartingLocations ()
{
	newbieTutorialSendStartingLocationsToPlayer (self, null);
	return SCRIPT_CONTINUE;
}

commandHandler newbieSelectStartingLocation ()
{
	sendToStartLocation( self, params );
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	location loc = getLocation( self );
	string area = loc.area;
	if (!area.equals("tutorial") )
	{
		detachScript( self, "theme_park.newbie_tutorial.newbie" );
	}
	return SCRIPT_CONTINUE;
}

messageHandler moveOnToNextRoom()
{
	//sysMessage(self, "next_room");
	return SCRIPT_CONTINUE;
}
