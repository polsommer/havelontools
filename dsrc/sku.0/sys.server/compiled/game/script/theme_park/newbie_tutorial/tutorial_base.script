include library.chat;
include library.colors;
include library.ai_lib;
include library.factions;
include library.create;
include library.money;
include library.utils;
include library.pclib;
include library.features;
include library.trainerlocs;
include library.weapons;
include library.skill;

const string NEWBIE_STRING_FILE 		= "newbie_tutorial/system_messages";
const string NEWBIE_CONVO 				= "newbie_tutorial/newbie_convo";
const string NEWBIE_SCRIPT 				= "theme_park.newbie_tutorial.newbie";
const string NEWBIE_SCRIPT_SKIPPED		= "theme_park.newbie_tutorial.newbie_skipped";
const string NEWBIE_SCRIPT_EMAIL		= "theme_park.newbie_tutorial.newbie_mail";
const string CONVO 						= "greeter_convo";
const int 	 NEWBIE_STARTING_MONEY		= 250;

const string STARTING_EQUIPMENT_FILE	= "datatables/equipment/newbie_equipment.iff";

const string NEWBIE_WEAPON				= "object/weapon/ranged/pistol/pistol_cdef.iff";
const string PIRATE_WEAPON				= "object/weapon/ranged/pistol/pistol_d18.iff";

const string[] COLLECTOR_EDITION_ITEMS	=
	{ 	"object/tangible/wearables/goggles/goggles_s01.iff",
		"object/tangible/wearables/goggles/goggles_s02.iff",
		"object/tangible/wearables/goggles/goggles_s03.iff" };

const string[] JP_COLLECTOR_EDITION_ITEMS	=
	{ 	"object/tangible/wearables/goggles/goggles_s04.iff",
		"object/tangible/wearables/goggles/goggles_s05.iff",
		"object/tangible/wearables/goggles/goggles_s06.iff" };

const string NEWBIE_PLAYER				= "newbie.player";

const int SHORT_DELAY = 10;
const int MEDIUM_DELAY = 15;
const int LONG_DELAY = 20;
const int VERY_LONG_DELAY = 45;

const string	TROOPER1				= "newbie.trooper1";
const float 	TROOPER1_LOCATION_X 	= -9.18f;
const float 	TROOPER1_LOCATION_Y 	= 0.02f;
const float 	TROOPER1_LOCATION_Z 	= 3.61f;
const string 	TROOPER1_LOCATION_CELL 	= "r1";
const string 	TROOPER_TYPE 			= "stormtrooper";
const string	TROOPER1_SCRIPT 		= "theme_park.newbie_tutorial.trooper1";

const string	TROOPER2				= "newbie.trooper2";
const float 	TROOPER2_LOCATION_X 	= -1.89f;
const float 	TROOPER2_LOCATION_Y 	= 0.00f;
const float 	TROOPER2_LOCATION_Z 	= -16.47f;
const string 	TROOPER2_LOCATION_CELL 	= "r1";
const string	TROOPER2_SCRIPT 		= "theme_park.newbie_tutorial.trooper2";


const string	TROOPER3				= "newbie.trooper3";
const float 	TROOPER3_LOCATION_X 	= 19.26f;
const float 	TROOPER3_LOCATION_Y 	= -4.2f;
const float 	TROOPER3_LOCATION_Z 	= -160.32f;
const string 	TROOPER3_LOCATION_CELL 	= "r11";
const string	TROOPER3_SCRIPT 		= "theme_park.newbie_tutorial.trooper3";

const string	TROOPER4				= "newbie.trooper4";
const float 	TROOPER4_LOCATION_X 	= 31.96f;
const float 	TROOPER4_LOCATION_Y 	= -4.2f;
const float 	TROOPER4_LOCATION_Z 	= -163.19f;
const string 	TROOPER4_LOCATION_CELL 	= "r11";
const string	TROOPER4_SCRIPT 		= "theme_park.newbie_tutorial.trooper4";

const string	GREETER					= "newbie.greeter";
const float 	GREETER_LOCATION_X 		= 34.94f;
const float 	GREETER_LOCATION_Y 		= 0.00f;
const float 	GREETER_LOCATION_Z 		= -31.75f;
const string 	GREETER_LOCATION_CELL 	= "r2";
const string 	GREETER_TYPE 			= "imperial_warrant_officer_i";
const string	GREETER_SCRIPT 			= "theme_park.newbie_tutorial.greeter";

const string	ROOM1_GREETER				= "newbie.room1greeter";
const float 	ROOM1_GREETER_LOC_X 		= -9.49f;
const float 	ROOM1_GREETER_LOC_Y 		= -3.87f;
const float 	ROOM1_GREETER_LOC_Z 		= -3.87f;
const string 	ROOM1_GREETER_LOC_CELL	 	= "r1";
const string 	ROOM1_GREETER_TYPE 			= "imperial_private";
const string	ROOM1_GREETER_SCRIPT 		= "theme_park.newbie_tutorial.greeter_one";

const float 	ROOM1_GREETER_MID_X 		= .91f;
const float 	ROOM1_GREETER_MID_Y 		= 0.00f;
const float 	ROOM1_GREETER_MID_Z 		= -31.76f;
const string 	ROOM1_GREETER_MID_CELL	 	= "r2";

const float 	ROOM1_GREETER_DEST_X 		= 31.23f;
const float 	ROOM1_GREETER_DEST_Y 		= -0.00f;
const float 	ROOM1_GREETER_DEST_Z 		= -29.48f;
const string 	ROOM1_GREETER_DEST_CELL	 	= "r2";

const string	COMMONER1				= "newbie.commoner1";
const float 	COMMONER1_LOCATION_X 	= 19.72f;
const float 	COMMONER1_LOCATION_Y 	= 0.00f;
const float 	COMMONER1_LOCATION_Z 	= -23.05f;
const string 	COMMONER_LOCATION_CELL 	= "r2";
const string 	COMMONER_TYPE 			= "commoner";
const string	COMMONER1_SCRIPT 		= "theme_park.newbie_tutorial.commoner1";

const string	COMMONER2				= "newbie.commoner2";
const float 	COMMONER2_LOCATION_X 	= 18.48f;
const float 	COMMONER2_LOCATION_Y 	= 0.00f;
const float 	COMMONER2_LOCATION_Z 	= -24.08f;
const string	COMMONER2_SCRIPT 		= "theme_park.newbie_tutorial.commoner2";

//spawned and managed by trooper #4
const string	REFUGEE					= "newbie.refugee";
const float 	REFUGEE_LOCATION_X 		= 38.81f;
const float 	REFUGEE_LOCATION_Y 		= -4.2f;
const float 	REFUGEE_LOCATION_Z 		= -166.12f;

const string	CRATE					= "newbie.room2crate";
const float 	CRATE_LOCATION_X 		= 34.80f;
const float 	CRATE_LOCATION_Y 		= 0.00f;
const float 	CRATE_LOCATION_Z 		= -33.10f;
const string 	CRATE_LOCATION_CELL 	= "r2";
const string 	CRATE_TEMPLATE 			= "object/tangible/container/drum/tatt_drum_1.iff";
const string	CRATE_SCRIPT 			= "theme_park.newbie_tutorial.box_of_stuff";
const string[] BOX_CONTENTS 			= { "object/tangible/skill_buff/skill_buff_pistol_accuracy.iff", "object/tangible/food/foraged/foraged_fruit_s1.iff" };
const string BOX_ITEM_SCRIPT 			=	"theme_park.newbie_tutorial.box_item";

const string	BAZAAR					= "newbie.bazaar";
const float		BAZAAR_LOCATION_X		= 54.95f;
const float		BAZAAR_LOCATION_Y		= -0.50f;
const float		BAZAAR_LOCATION_Z		= -0.68f;
const string 	BAZAAR_LOCATION_CELL	= "r3";
const float		BAZAAR_YAW				= -124.0f;
const string	BAZAAR_TEMPLATE			= "object/tangible/terminal/terminal_newbie_clothing.iff";
const string	BAZAAR_SCRIPT			= "theme_park.newbie_tutorial.bazaar";

const string	BANK					= "newbie.bank";
const float		BANK_LOCATION_X			= 50.83f;
const float		BANK_LOCATION_Y			= -0.5f;
const float		BANK_LOCATION_Z			= -3.63f;
const string 	BANK_LOCATION_CELL		= "r3";
const float		BANK_YAW				= -91.0f;
const string	BANK_TEMPLATE			= "object/tangible/terminal/terminal_bank.iff";
const string	BANK_SCRIPT				= "theme_park.newbie_tutorial.bank";

const string	BANKER 					= "newbie.banker";
const float 	BANKER_LOCATION_X 		= 48.27f;
const float 	BANKER_LOCATION_Y 		= -0.50f;
const float 	BANKER_LOCATION_Z 		= 1.12f;
const string 	BANKER_LOCATION_CELL 	= "r3";
const string 	BANKER_TYPE 			= "imperial_warrant_officer_ii";
const string	BANKER_SCRIPT 			= "theme_park.newbie_tutorial.banker";

const string	BANK2					= "newbie.bank2";
const float		BANK2_LOCATION_X		= 41.6f;
const float		BANK2_LOCATION_Y		= -0.0f;
const float		BANK2_LOCATION_Z		= 7.37f;
const string 	BANK2_LOCATION_CELL		= "r3";
const float		BANK2_YAW				= 179.0f;
const string	BANK2_SCRIPT			= "theme_park.newbie_tutorial.bank2";

const string	BANK3					= "newbie.bank3";
const float		BANK3_LOCATION_X		= 46.18f;
const float		BANK3_LOCATION_Y		= -0.0f;
const float		BANK3_LOCATION_Z		= 6.35f;
const string 	BANK3_LOCATION_CELL		= "r3";
const float		BANK3_YAW				= -179.0f;

const string	BANK_USER1				= "newbie.bankUser1";
const float 	BANK_USER1_LOCATION_X 	= 41.65f;
const float 	BANK_USER1_LOCATION_Y 	= 0.00f;
const float 	BANK_USER1_LOCATION_Z 	= 6.35f;
const string	BANK_USER1_SCRIPT 		= "theme_park.newbie_tutorial.bankuser";

const string	BANK_USER2				= "newbie.bankUser2";
const float 	BANK_USER2_LOCATION_X 	= 46.07f;
const float 	BANK_USER2_LOCATION_Y 	= 0.00f;
const float 	BANK_USER2_LOCATION_Z 	= 6.55f;
const string	BANK_USER2_SCRIPT 		= "theme_park.newbie_tutorial.bankuser";



const string	CLONE_NPC				= "newbie.cloneNpc";
const float 	CLONE_NPC_LOCATION_X 	= 24.55f;
const float 	CLONE_NPC_LOCATION_Y 	= -7.00f;
const float 	CLONE_NPC_LOCATION_Z 	= -55.82f;
const string 	CLONE_NPC_LOCATION_CELL = "r4";
const string 	CLONE_NPC_TYPE 			= "protocol_droid_3po_silver";
const string	CLONE_NPC_SCRIPT 		= "theme_park.newbie_tutorial.clone_npc";

const string 	CLONE_TERMINAL				 	= "newbie.cloneTerminal";
const float		CLONE_TERMINAL_LOCATION_X	 	= 2.91f;
const float		CLONE_TERMINAL_LOCATION_Y	 	= -7.00f;
const float		CLONE_TERMINAL_LOCATION_Z	 	= -56.54f;
const string	CLONE_TERMINAL_LOCATION_CELL 	= "r5";
const float 	CLONE_TERMINAL_YAW				= 89.0f;
const string	CLONE_TERMINAL_TEMPLATE			= "object/tangible/terminal/terminal_cloning.iff";
const string 	CLONE_TERMINAL_SCRIPT			= "theme_park.newbie_tutorial.clone_terminal";

//the location at which the clone droid walks to when explaining terminals:
const float		CLONE_PROMPT_LOCATION_X			= 0.81f;
const float		CLONE_PROMPT_LOCATION_Y			= -7.00f;
const float		CLONE_PROMPT_LOCATION_Z			= -59.73f;
const string 	CLONE_PROMPT_LOCATION_CELL		= "r5";

const string 	INSURANCE				 	= "newbie.insurance";
const float		INSURANCE_LOCATION_X	 	= -0.47f;
const float		INSURANCE_LOCATION_Y	 	= -7.00f;
const float		INSURANCE_LOCATION_Z	 	= -66.48f;
const string	INSURANCE_LOCATION_CELL		= "r5";
const float 	INSURANCE_YAW				= 2.00f;
const string	INSURANCE_TEMPLATE			= "object/tangible/terminal/terminal_insurance.iff";
const string 	INSURANCE_SCRIPT			= "theme_park.newbie_tutorial.insurance";

const string	MOUSE_DROID					= "newbie.mouseDroid";
const string	MOUSE_DROID_TYPE			= "mouse_droid";
const float		MOUSE_DROID_LOC_X			= 76.78f;
const float		MOUSE_DROID_LOC_Y			= -4.00f;
const float		MOUSE_DROID_LOC_Z			= -102.02f;
const string	MOUSE_DROID_LOC_CELL		= "r14";
const float		MOUSE_DROID_DEST_X			= 47.13f;
const float		MOUSE_DROID_DEST_Y			= -7.00f;
const float		MOUSE_DROID_DEST_Z			= -51.5f;
const string	MOUSE_DROID_DEST_CELL		= "r4";
const string	MOUSE_DROID_SCRIPT			= "theme_park.newbie_tutorial.mouse";


const string	MOUSE_DROID2	   			= "newbie.mouseDroid2";
const float		MOUSE_DROID2_LOC_X			= 46.55f;
const float		MOUSE_DROID2_LOC_Y			= -0.00f;
const float		MOUSE_DROID2_LOC_Z			= -31.42f;
const string	MOUSE_DROID2_LOC_CELL		= "r3";
const float		MOUSE_DROID2_DEST_X			= 0.17f;
const float		MOUSE_DROID2_DEST_Y			= -0.01f;
const float		MOUSE_DROID2_DEST_Z			= -6.61f;
const string	MOUSE_DROID2_DEST_CELL		= "r1";
const string	MOUSE_DROID2_SCRIPT			= "theme_park.newbie_tutorial.mouse2";

const string	COMBAT_EXPLAINER			= "newbie.combatExplainer";
const string	COMBAT_EXPLAINER_TYPE		= "imperial_master_sergeant";
const float		COMBAT_EXPLAINER_X			= 43.74f;
const float		COMBAT_EXPLAINER_Y			= -7.00f;
const float		COMBAT_EXPLAINER_Z			= -75.20f;
const string	COMBAT_EXPLAINER_CELL		= "r7";
const string 	COMBAT_EXPLAINER_SCRIPT		= "theme_park.newbie_tutorial.combat_explainer";
const float		COMBAT_EXPLAINER_YAW		= -88.0f;

const string	PIRATE						= "newbie.pirate";
const string	PIRATE_TYPE					= "bandit";
const string 	PIRATE_TEMPLATE				= "dressed_criminal_thug_aqualish_male_01.iff";
const float		PIRATE_LOCATION_X			= 38.9f;
const float		PIRATE_LOCATION_Y			= -5.94f;
const float		PIRATE_LOCATION_Z			= -113.59f;
const string	PIRATE_LOCATION_CELL		= "r8";
const string	PIRATE_SCRIPT				= "theme_park.newbie_tutorial.pirate";

const string	TRAINER						= "newbie.trainer";
const float		TRAINER_LOCATION_X			= 3.69f;
const float		TRAINER_LOCATION_Y			= -4.20f;
const float		TRAINER_LOCATION_Z			= -127.69f;
const string	TRAINER_LOCATION_CELL		= "r9";
const string	TRAINER_SCRIPT				= "theme_park.newbie_tutorial.trainer";

const string	OFFICER						= "newbie.officer";
const string	OFFICER_TYPE				= "imperial_lance_corporal";
const float		OFFICER_LOCATION_X			= 0.66f;
const float		OFFICER_LOCATION_Y			= -4.20f;
const float		OFFICER_LOCATION_Z			= -113.31f;
const string	OFFICER_LOCATION_CELL		= "r9";
const string	OFFICER_SCRIPT				= "theme_park.newbie_tutorial.officer";

const string	PILOT						= "newbie.pilot";
const string	PILOT_TYPE					= "imperial_lance_corporal";
const string    PILOT_TEMPLATE				= "dressed_tie_fighter_m.iff";
const float		PILOT_LOCATION_X			= 25.3f;
const float		PILOT_LOCATION_Y			= -4.20f;
const float		PILOT_LOCATION_Z			= -160.4f;
const string	PILOT_LOCATION_CELL			= "r11";
const float		PILOT_YAW					= 55.0f;
const string	PILOT_SCRIPT				= "conversation.tutorial_imperial_broker";


const string	MISSION						= "newbie.mission_terminal";
const string	MISSION_TEMPLATE			= "object/tangible/terminal/terminal_mission_newbie.iff";
const float		MISSION_LOCATION_X			= 19.61f;
const float		MISSION_LOCATION_Y			= -4.20f;
const float		MISSION_LOCATION_Z			= -137.97f;
const string	MISSION_LOCATION_CELL		= "r10";
const float		MISSION_YAW					= -144.0f;
const string	MISSION_SCRIPT				= "theme_park.newbie_tutorial.mission_terminal";

const string	MISSION_NPC					= "newbie.mission_npc";
const string	MISSION_NPC_TYPE			= "imperial_corporal";
const float		MISSION_NPC_LOC_X			= 19.51f;
const float		MISSION_NPC_LOC_Y			= -4.20f;
const float		MISSION_NPC_LOC_Z			= -145.35f;
const string	MISSION_NPC_LOC_CELL		= "r10";
const string	MISSION_NPC_SCRIPT			= "theme_park.newbie_tutorial.mission_npc";

const string	TRAVEL_TERMINAL				= "newbie.travelTerminal";
const string	TRAVEL_TERMINAL_TEMPLATE	= "object/tangible/terminal/terminal_travel.iff";
const float		TRAVEL_TERMINAL_LOC_X 		= 27.55f;
const float		TRAVEL_TERMINAL_LOC_Y 		= -3.50f;
const float		TRAVEL_TERMINAL_LOC_Z  		= -167.79f;
const string	TRAVEL_TERMINAL_LOC_CELL	= "r11";
const string	TRAVEL_TERMINAL_SCRIPT		= "theme_park.newbie_tutorial.travel_terminal";

const string	TRAVEL_NPC 					= "newbie.travelNpc";
const string	TRAVEL_NPC_TYPE 			= "imperial_sergeant";
const float		TRAVEL_NPC_LOC_X 			= 25.37f;
const float		TRAVEL_NPC_LOC_Y 			= -4.20f;
const float		TRAVEL_NPC_LOC_Z  			= -158.33f;
const string	TRAVEL_NPC_LOC_CELL			= "r11";
const string	TRAVEL_NPC_SCRIPT			= "theme_park.newbie_tutorial.travel_npc";

const string	INS_USER 					= "newbie.insuranceUser";
const string	INS_USER_TYPE 				= "commoner";
const float		INS_USER_LOC_X 				= -0.73f;
const float		INS_USER_LOC_Y 				= -7.00f;
const float		INS_USER_LOC_Z  			= -64.85f;
const float		INS_USER_YAW	  			= 177.0f;
const string	INS_USER_LOC_CELL			= "r5";
const string	INS_USER_SCRIPT				= "theme_park.newbie_tutorial.insurance_user";

const string	PANIC_GUY					= "newbie.panicMan";
const string	PANIC_GUY_TYPE 				= "commoner";
const float		PANIC_GUY_X 				= 18.25f;
const float		PANIC_GUY_Y 				= -4.00f;
const float		PANIC_GUY_Z  				= -76.88f;
const string	PANIC_GUY_CELL				= "r6";
const string	PANIC_GUY_SCRIPT			= "theme_park.newbie_tutorial.panic_guy";

const string	DEBRIS						= "newbie.debris";
const string	DEBRIS_TEMPLATE				= "object/tangible/newbie_tutorial/debris.iff";
const string	DEBRIS_CELL					= "r14";
const float		DEBRIS_X					= 77.1f;
const float		DEBRIS_Y					= -4.0f;
const float		DEBRIS_Z					= -108.9f;
const float		DEBRIS_YAW					= 180.0f;

const string	STATIC_WAYPOINT				= "newbie.staticWaypoint";
const string	STATIC_WAYPOINT_TEMPLATE	= "object/static/structure/general/tutorial_waypoint.iff";

const string_id IMPERIAL_NAME				= new string_id( NEWBIE_STRING_FILE, "imp_name" );
const string_id QUARTERMASTER_NAME			= new string_id( NEWBIE_STRING_FILE, "quarter_name" );
const string_id STARTLOC_NAME				= new string_id( NEWBIE_STRING_FILE, "start_loc" );
const string_id DROID_NAME					= new string_id( NEWBIE_STRING_FILE, "droid_name" );

const string	NERVOUS_GUY					= "newbie.nervousGuys";
const string	NERVOUS_GUY_TYPE 			= "commoner";
const float[]	NERVOUS_GUY_X 				= { 43.13f, 	37.51f, 	39.01f };
const float[]	NERVOUS_GUY_Y 				= { -7.0f, 		-7.0f, 		-7f };
const float[]	NERVOUS_GUY_Z  				= { -70.37f, 	-70.02f, 	-79.65f };
const float[]	NERVOUS_GUY_YAW				= { -163f, 		108f, 		15f };
const string	NERVOUS_GUY_CELL		 	= "r7";
const string	NERVOUS_GUY_SCRIPT			= "theme_park.newbie_tutorial.nervous_guy";

const string	CELEB_GUY					= "newbie.celebGuys";
const string	CELEB_GUY_TYPE 				= "commoner";
const float[]	CELEB_GUY_X 				= { 7.6f, 		1.76f };
const float[]	CELEB_GUY_Y 				= { -4.2f, 		-4.2f };
const float[]	CELEB_GUY_Z  				= { -105.5f, 	-108.22f };
const float[]	CELEB_GUY_YAW				= { -173f, 		134f };
const string	CELEB_GUY_CELL		 		= "r9";
const string	CELEB_GUY_SCRIPT			= "theme_park.newbie_tutorial.celeb_guy";

const string	TRAPPED_GUY					= "newbie.trappedGuy";
const string	TRAPPED_GUY_TYPE 			= "commoner";
const float		TRAPPED_GUY_X 				= 17.75f;
const float		TRAPPED_GUY_Y 				= -4.2f;
const float		TRAPPED_GUY_Z  				= -144.64f;
const float		TRAPPED_GUY_YAW				= 110f;
const string	TRAPPED_GUY_CELL		 	= "r10";
const string	TRAPPED_GUY_SCRIPT			= "theme_park.newbie_tutorial.trapped_guy";


const string NEW_PLAYER_QUESTS_SCRIPT		= "theme_park.new_player.new_player";


void sysMessageToPlayer( obj_id box, string text )
{
	//obj_id player = getPlayer( box );
	//sendSystemMessage (player, new string_id ( NEWBIE_STRING_FILE, text ) );
}

obj_id getPlayer( obj_id box )
{
	if ( hasObjVar( box, "newbie.player") )
		return getObjIdObjVar( box, "newbie.player" );
	else
	{
		obj_id player = getObjIdObjVar( getTopMostContainer( box ), "newbie.player" );
		setObjVar( box, "newbie.player", player );
		return player;
	}
}

void sysMessage( obj_id player, string text )
{
	//sendSystemMessage (player, new string_id ( NEWBIE_STRING_FILE, text ) );
}

void flyText( obj_id item, string text, float size, color flyTextColor )
{
	showFlyText(item, new string_id( NEWBIE_STRING_FILE, text ), size, flyTextColor);
}

obj_id getBuilding( obj_id item )
{
	return getTopMostContainer( item );
}

boolean isInRoom( obj_id player, string roomName )
{
	if ( detachNewbieTutorialScript( player ) )
		return false;

	obj_id currentRoom = getContainedBy( player );
	obj_id bldg = getTopMostContainer( player );

	//if the player is outside, nuke this script:
	if (!isIdValid(currentRoom))
	{
		detachScript( player, NEWBIE_SCRIPT );
		return false;
	}

	obj_id roomId = getCellId( bldg, roomName );
	if ( isIdValid(roomId) && roomId == currentRoom )
	{
		if ( roomName.equals("r4") )
			transferBankToInventory(player);//anything you put in the bank is now being moved to your inv.
		if ( !hasCompletedRoom( player, roomName ) )
			return true;
	}
	return false;
}

void flagRoomComplete( obj_id player, string roomName )
{
	utils.setScriptVar( player, "newbie.roomComplete." + roomName, true );
}

boolean hasCompletedRoom( obj_id player, string roomName )
{
	return ( utils.hasScriptVar( player, "newbie.roomComplete." + roomName ) );
}

boolean detachNewbieTutorialScript( obj_id player )
{
	if ( hasObjVar( player, "newbie.detachScript" ))
	{
		detachScript( player, NEWBIE_SCRIPT );
		return true;
	}

	return false;
}

string getProfessionName( obj_id player )
{
	if ( utils.hasScriptVar( player, "newbie.profession" ))
		return utils.getStringScriptVar( player, "newbie.profession");

	if ( !hasObjVar( player, "newbie.hasSkill" ))
	{
		string[] skillList = getSkillListingForPlayer( player );
		if ( skillList == null )
		{
			LOG( "newbie", "WARNING: SKILL LIST IS NULL" );
			return "trainer_pistol";
		}

		if ( skillList.length < 1  )
		{
			LOG( "newbie", "WARNING: SKILL LIST IS 0-LENGTH" );
			return "trainer_pistol";
		}

		int startingSkillIndex = skillList.length - 1;//if the player hase demo_combat, their
													  // second skill is the one they picked
													  // at char-creation
		string skillName = null;
		for ( int i = 0; i < skillList.length; i++ )
		{
			if ( skillList[i].endsWith("_novice") )
			{
				skillName = skillList[i];
			}
		}

		if ( skillName == null || skillName.equals("") )
		{
			skillName = "combat_marksman_novice";
		}
		setObjVar( player, "newbie.hasSkill", skillName );
	}
	string skillName = getStringObjVar( player, "newbie.hasSkill" );

	string profession = getSkillProfession( skillName );
	if ( profession == null )
	{
		LOG( "newbie", "WARNING: NO PROFESSION FOR SKILL " + skillName );
		return "trainer_pistol";
	}

	utils.setScriptVar( player, "newbie.profession", profession );

	return profession;
}

string getTrainerType( obj_id player )
{
	string profession = getProfessionName( player );
	if ( profession == null )
		return "trainer_pistol";

	/** No need to revoke the starting skill any more:
	string[] skillList = getSkillListingForPlayer( player );
	if ( skillList != null && skillList.length > 0 )
	{
		if ( !hasObjVar( player, "newbie.trained") )
		{
			for ( int i = 0; i < skillList.length; i++ )
			{
				if ( !skillList[i].startsWith("species_") )
				{
					revokeSkill( player, skillList[i] );
				}
			}
		}
	}
	*/

	if ( profession == "social_entertainer" )
		return "trainer_entertainer";
	if ( profession == "outdoors_scout" )
		return "trainer_scout";
	if ( profession == "science_medic" )
		return "trainer_medic";
	if ( profession == "crafting_artisan" )
		return "trainer_artisan";
	if ( profession == "combat_brawler" )
		return "trainer_brawler";
	if ( profession == "combat_marksman" )
		return "trainer_marksman";
	if ( profession == "combat_rifleman" )
		return "trainer_rifleman";
	if ( profession == "combat_pistol" )
		return "trainer_pistol";
	if ( profession == "combat_carbine" )
		return "trainer_carbine";
	if ( profession == "combat_unarmed" )
		return "trainer_unarmed";
	if ( profession == "combat_1hsword" )
		return "trainer_1hsword";
	if ( profession == "combat_2hsword" )
		return "trainer_2hsword";
	if ( profession == "combat_polearm" )
		return "trainer_polearm";
	if ( profession == "social_dancer" )
		return "trainer_dancer";
	if ( profession == "social_musician" )
		return "trainer_musician";
	if ( profession == "science_doctor" )
		return "trainer_doctor";
	if ( profession == "outdoors_ranger" )
		return "trainer_ranger";
	if ( profession == "outdoors_creaturehandler" )
		return "trainer_creaturehandler";
	if ( profession == "outdoors_farmer" )
		return "trainer_farmer";
	if ( profession == "outdoors_miner" )
		return "trainer_miner";
	if ( profession == "crafting_armorsmith" )
		return "trainer_armorsmith";
	if ( profession == "crafting_weaponsmith" )
		return "trainer_weaponsmith";
	if ( profession == "crafting_chef" )
		return "trainer_chef";
	if ( profession == "crafting_tailor" )
		return "trainer_tailor";
	if ( profession == "crafting_architect" )
		return "trainer_architect";
	if ( profession == "crafting_droidengineer" )
		return "trainer_droidengineer";
	if ( profession == "crafting_industrialist" )
		return "trainer_industrialist";
	if ( profession == "combat_bountyhunter" )
		return "trainer_bountyhunter";
	if ( profession == "combat_commando" )
		return "trainer_commando";
	if ( profession == "combat_smuggler" )
		return "trainer_smuggler";
	if ( profession == "science_combatmedic" )
		return "trainer_combatmedic";
	if ( profession == "social_imagedesigner" )
		return "trainer_imagedesigner";
	if ( profession == "outdoors_squadleader" )
		return "trainer_squadleader";


	LOG( "newbie", "WARNING: UNABLE TO DETERMINE PLAYER STARTING PROFESSION" );
	return "trainer_pistol";
}

/** This is called from SpawnTrainer, once we know the player's
 * starting profession:
 */
//THIS NOW CREATES THE STARTING EQUIP IN THE NEW PLAYER'S INVENTORY
void fillbank( obj_id player )
{
	if ( hasObjVar( player, "newbie.youGotBank" ))
		return;
	else
		setObjVar( player, "newbie.youGotBank", true );

	//string profession = getProfessionName( player );
	//hard coding the string to give out all gear
	string profession = "all_professions";
	obj_id bank = utils.getInventoryContainer(player);//LETS PUT IT IN THE INVENTORY INSTEAD
	if ( !isIdValid( bank ) )
	{
		LOG( "newbie", "BAD: cannot locate new player's bank" );
		return;
	}
	if ( !dataTableHasColumn( STARTING_EQUIPMENT_FILE, profession ) )
	{
		LOG( "newbie", "BAD: cannot locate starting equip for profession: " + profession );
		return;
	}

	string[] items = dataTableGetStringColumnNoDefaults( STARTING_EQUIPMENT_FILE, profession );
	if ( items == null )
	{
		LOG( "newbie", "no items" );
	}
	else if ( items.length < 1 )
	{
		LOG( "newbie", "no items" );
	}

	for ( int i = 0; i < items.length; i++ )
	{
		LOG( "newbie", "NEWBIE STARTING EQUIP MAKING: " + items[i] );
		obj_id newItem = null;
		if(items[i].startsWith("object/weapon/"))
		{
			newItem = weapons.createWeapon(items[i], bank, 0.75f);
		}
		else if(items[i].startsWith("object/tangible/medicine"))
		{
			newItem = createObject("object/tangible/medicine/instant_stimpack/stimpack_noob.iff", bank, "");
			if(isIdValid(newItem))
			{
				setCount(newItem, 5);
				setObjVar(newItem, "healing.power", 250);
			}
		}
		else
		{
			newItem = createObject( items[i], bank, "" );
		}

		if ( !isIdValid( newItem) )
		{
 			LOG( "newbie", "BAD: could not create newbie equipment item " + items[i] );
		}
		else
		{
			pclib.autoInsureItem(newItem);
		}
 	}
}

void transferBankToInventory(obj_id player)
{
	obj_id bank = utils.getPlayerBank( player );
	obj_id playerInv = utils.getInventoryContainer(player);

	//take away all the meats and crap the player has picked-up
	// to make room for bank items:
	obj_id[] invContents = getContents(playerInv);
	if(invContents != null && invContents.length > 0) {

		for ( int i = 0; i < invContents.length; i++ )
		{
			if ( hasObjVar( invContents[i], "newbie.item" ))
			{
				if ( hasScript( invContents[i], BOX_ITEM_SCRIPT ))
					detachScript( invContents[i], BOX_ITEM_SCRIPT );
				destroyObject( invContents[i] );//take away all the free meats
			}
		}
	}

	//now move anything in the bank to the player's inventory, or destroy it:
	obj_id[] contents = getContents(bank);
	if(contents != null && contents.length > 0) {

		for ( int i = 0; i < contents.length; i++ )
		{
			if ( !hasObjVar( contents[i], "newbie.item" ))
			{
				putIn(contents[i], playerInv );
			}
			else
			{
				if ( hasScript( contents[i], BOX_ITEM_SCRIPT ))
					detachScript( contents[i], BOX_ITEM_SCRIPT );
				destroyObject( contents[i] );
			}
		}
	}
}

boolean containsPlayer(obj_id bldg)
{
	obj_id[] contents = getContents(bldg);
	if (contents != null)
		for (int i = 0; i < contents.length; ++i)
			if (isPlayer(contents[i]) || containsPlayer(contents[i]))
				return true;

	return false;
}

void grantNewbieStartingMoney( obj_id player )
{
	int amt = NEWBIE_STARTING_MONEY;

	// check for a server config setting to override starting money amount
	string configStartingMoneyString = getConfigSetting("New_Player",  "NewbieStartingMoney");
	int configStartingMoneyAmt = utils.stringToInt(configStartingMoneyString);
	if ( configStartingMoneyAmt > 0 )
	{
		amt = configStartingMoneyAmt;
	}

	if ( money.hasFunds(player, money.MT_TOTAL, amt))
		return;

	dictionary d = new dictionary();
	d.put(money.DICT_AMOUNT, amt);

	transferBankCreditsFromNamedAccount(money.ACCT_NEWBIE_TUTORIAL, player, amt, "timeToWithdraw", "xferFailed", d);
	utils.moneyInMetric(player, money.ACCT_NEWBIE_TUTORIAL, amt);
}

void sendStartingMessage( obj_id player )
{
	if ( utils.hasScriptVar( player, "newbie.mailSent") )
		return;
	else
		utils.setScriptVar( player, "newbie.mailSent", true );

	attachScript( player, NEWBIE_SCRIPT_EMAIL );

	messageTo( player, "handleSendStartingMail", null, 10, true );
}

void sendStartingMessageToPlayer( obj_id player )
{

	string_id subject = null;
	string_id body = null;
	if (isJedi(player))
	{
		subject = new string_id( "jedi_spam", "welcome_subject" );
		body = new string_id( "jedi_spam", "welcome_body" );
	}
	else
	{
		subject = new string_id( "newbie_tutorial/newbie_mail", "welcome_subject" );
		body = new string_id( "newbie_tutorial/newbie_mail", "welcome_body" );
	}

	utils.sendMail(subject, body, player, "system");

	//collector's edition:

	obj_id playerInv = utils.getInventoryContainer(player);

	if ( features.isCollectorEdition( player ) )
	{
		subject = new string_id( "newbie_tutorial/newbie_mail", "collector_subject" );
		body = new string_id( "newbie_tutorial/newbie_mail", "collector_body" );
		utils.sendMail(subject, body, player, "system");
		for ( int i = 0; i < COLLECTOR_EDITION_ITEMS.length; i++ )
		{
			obj_id newItem = createObject( COLLECTOR_EDITION_ITEMS[i], playerInv, "" );
			if ( !isIdValid( newItem ) )
			{
				LOG( "newbie", "WARNING: PLAYER " + player + " did not receive his collector's edition item: " + COLLECTOR_EDITION_ITEMS[i] );
			}
			else
			{
				setObjVar( newItem, "notrade", true );
			}
		}
	}
	else if ( features.isJPCollectorEdition( player ) )
	{
		subject = new string_id( "newbie_tutorial/newbie_mail", "collector_subject" );
		body = new string_id( "newbie_tutorial/newbie_mail", "collector_body" );
		utils.sendMail(subject, body, player, "system");
		for ( int i = 0; i < JP_COLLECTOR_EDITION_ITEMS.length; i++ )
		{
			obj_id newItem = createObject( JP_COLLECTOR_EDITION_ITEMS[i], playerInv, "" );
			if ( !isIdValid( newItem ) )
			{
				LOG( "newbie", "WARNING: PLAYER " + player + " did not receive his collector's edition item: " + COLLECTOR_EDITION_ITEMS[i] );
			}
			else
			{
				setObjVar( newItem, "notrade", true );
			}
		}
	}
}

void deleteInventory( obj_id player )
{
	if ( !hasObjVar( player, "newbie.itemsHosed" ))
	{

		obj_id playerInv = getObjectInSlot( player, "inventory" );
		if ( playerInv == null )
			return;

		setObjVar( player, "newbie.itemsHosed", true );
		obj_id[] contents = getContents(playerInv);
		for ( int i = 0; i < contents.length; i++ )
			destroyObject( contents[i] );
	}
}

void makeStaticWaypoint( obj_id object )
{
	if ( !isIdValid( object ) )
		return;

	removeStaticWaypoint( object );
	obj_id bldg = getTopMostContainer( object );
	obj_id newWaypoint = createObject( STATIC_WAYPOINT_TEMPLATE, getLocation( object ));
	setObjVar( bldg, STATIC_WAYPOINT, newWaypoint );
}

void removeStaticWaypoint( obj_id object )
{
	if ( !isIdValid( object ) )
		return;

	obj_id bldg = getTopMostContainer( object );
	if ( hasObjVar( bldg, STATIC_WAYPOINT ))
	{
		obj_id oldWaypoint = getObjIdObjVar( bldg, STATIC_WAYPOINT );
		destroyObject( oldWaypoint );
	}
}

void givePlayerSpaceTrainerWaypoints( obj_id player )
{
	if (!hasObjVar(player, "chosenStartTrack") )
		return;

	string playerArea = getLocation(player).area;
	string chosenStartTrack = getStringObjVar( player, "chosenStartTrack");
	if ( playerArea != null && playerArea.equals("talus") )
		playerArea = "corellia";//the imp trainer on Talus is part of the Corellia track!

	obj_id trainerWayp = trainerlocs.getTrainerLocationWaypoint( player, chosenStartTrack, playerArea );
	removeObjVar( player, "chosenStartTrack" );

	//do that FIND shit:
	location destination = getWaypointLocation( trainerWayp );
	location origin = getLocation( player );
	destroyClientPath( player );
	createClientPath(player, origin, destination);
	utils.setScriptVar( player, "jtlNewbieStartLoc", origin );
	utils.setScriptVar( player, "jtlNewbieTrainerLoc", destination );
}

void sendToStartLocation( obj_id self, string name )
{
	boolean available = true; // At some point, we could track the locations given to the player and check against them, but it's probably not worth it
	newbieTutorialSendStartingLocationSelectionResult (self, name, available);
	if ( !available )
		return;

	float radius = dataTableGetFloat( "datatables/creation/starting_locations.iff", name, "radius" );
	float heading = dataTableGetFloat( "datatables/creation/starting_locations.iff", name, "heading" );
	location loc = getStartingLocationInfo (name);

	if (loc != null)
	{
		if ( radius!=0.0f )
		{
			loc.x+=rand(-radius,radius);
			loc.z+=rand(-radius,radius);
		}
		if ( heading != 0.0f )
			setYaw( self, heading );

		if (loc.cell != null && loc.cell != obj_id.NULL_ID)
			warpPlayer (self, loc.area, 0.0f, 0.0f, 0.0f, loc.cell, loc.x, loc.y, loc.z);
		else
			warpPlayer (self, loc.area, loc.x, loc.y, loc.z, null, 0.0f, 0.0f, 0.0f);

	}

}

void sendThoseStartLocs( obj_id player )
{
	string limitStartingLocations = getConfigSetting("New_Player", "LimitStartingLocations");
	if ( limitStartingLocations != null && limitStartingLocations.equals("true") )
	{
		// Starting new characters in Mos Eisley on Tatooine
		string planet = "tatooine";
		float locX = 3528.0f + rand(-2.5f, 2.5f);
		float locY = 5.0f;
		float locZ = -4804.0f + rand(-2.5f, 2.5f);

		setYaw(player, 180.0f);

		newbieTutorialRequest(player, "clientReady");
		warpPlayer(player, planet, locX, locY, locZ, null, 0.0f, 0.0f, 0.0f);
		return;
	}

	string[] startLocs = getStartingLocations();
	newbieTutorialSendStartingLocationsToPlayer (player, startLocs);
}

void grantAllNoviceSkills(obj_id player)
{

	skill.grantSkillToPlayer(player, "combat_marksman_novice");
	skill.grantSkillToPlayer(player, "combat_brawler_novice");
	skill.grantSkillToPlayer(player, "science_medic_novice");
	skill.grantSkillToPlayer(player, "outdoors_scout_novice");
	skill.grantSkillToPlayer(player, "crafting_artisan_novice");
	skill.grantSkillToPlayer(player, "social_entertainer_novice");

}
