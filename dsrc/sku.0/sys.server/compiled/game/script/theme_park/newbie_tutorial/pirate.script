include ai.ai_combat;
include library.loot;
include library.chat;
include library.ai_lib;

inherits theme_park.newbie_tutorial.tutorial_base;

trigger OnAttach()
{
	setCondition( self, CONDITION_AGGRESSIVE );
	setObjVar( self, "ai.recentlyBarked", true );
	chat.setAngryMood( self );
	createTriggerVolume( "playerEntered", 13.0f, true );
	setLevel(self, 1);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated( obj_id attacker )
{
	//make room nine public

	obj_id player = getPlayer( self );

	permissionsMakePublic( getCellId( getTopMostContainer(self), "r9"));
	setObjVar( player, "newbie.killedPirate", true );
	if ( hasObjVar( self, "newbie.messageSent" ) )
		return SCRIPT_CONTINUE;

	setObjVar( self, "newbie.messageSent", true );
	messageTo( player, "handleCongrats", null, 2, false );
	ai_lib.aiSetPosture( self, POSTURE_INCAPACITATED );
	messageTo (player, "moveOnToNextRoom", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handlePlayerInRoom()
{
	if ( hasObjVar( self, "newbie.didThis" ))
		return SCRIPT_CONTINUE;

	setObjVar( self, "newbie.didThis", true );

	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;

	obj_id pirateInv = getObjectInSlot( self, "inventory" );
	if ( pirateInv != null )
		createObject( PIRATE_WEAPON, pirateInv, "" );

	obj_id player = params.getObjId( "player" );
	if ( !isIdValid( player ) )
		return SCRIPT_CONTINUE;

	if ( hasObjVar( player, "newbie.killedPirate" ))
	{
	 	setObjVar( self, loot.VAR_DENY_LOOT, true );//you get nothing for killing him again!
	}

	faceToBehavior( self, player );
	if ( !ai_lib.isInCombat( self ) )
	{
		chat.setAngryMood( self );
		chat.chat( self, new string_id ( NEWBIE_CONVO, "pirate_taunt1" ));
	}
	messageTo( self, "handleTauntTwo", null, 3, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleTauntTwo()
{
	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;

	if ( !ai_lib.isInCombat( self ) )
	{
	   	chat.setAngryMood( self );
		chat.chat( self, new string_id ( NEWBIE_CONVO, "pirate_taunt2" ));
	}
	//messageTo( self, "handlePirateAttack", null, 2, false );
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;

	if (hasObjVar( self, "newbie.isAttacking" ))
		return SCRIPT_CONTINUE;

	obj_id player = getPlayer( self );
	if ( player != breacher )
		return SCRIPT_CONTINUE;

	if (!isInRoom( player, "r8" ) )
		return SCRIPT_CONTINUE;

	if ( volumeName.equals("playerEntered") )
	{
		if ( !ai_lib.isInCombat( self ) )
		{
			chat.setAngryMood( self );
			chat.chat( self, new string_id ( NEWBIE_CONVO, "pirate_attack" ));
			startCombat( self, player );
			setObjVar( self, "newbie.isAttacking", true );
		}
	}
	messageTo( self, "handleTauntThree", null, 10, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleTauntThree()
{
	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;

	if ( hasObjVar( self, "newbie.beenHereToo" ) )
		return SCRIPT_CONTINUE;
	else
		setObjVar( self, "newbie.beenHereToo", true );

	obj_id player = getPlayer( self );
	chat.setAngryMood( self );
	chat.chat( self, new string_id ( NEWBIE_CONVO, "pirate_taunt3" ));
	messageTo( self, "handleTauntFour", null, 3, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleTauntFour()
{
	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;

	obj_id player = getPlayer( self );
	chat.setAngryMood( self );
	chat.chat( self, new string_id ( NEWBIE_CONVO, "pirate_taunt4" ));
	messageTo( self, "handleExplosion", null, 2, false );

	return SCRIPT_CONTINUE;
}

messageHandler handleExplosion()
{
	if ( ai_lib.isAiDead( self ) )
		return SCRIPT_CONTINUE;
	location death = getLocation(self);
	obj_id player = getPlayer( self );
	playClientEffectObj(player, "clienteffect/combat_explosion_lair_large.cef", self, "");
	ai_lib.incapacitateMob(self);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	obj_id player = getPlayer( self );
	if (!isIdValid(player) )
		return SCRIPT_CONTINUE;

	if (!isInRoom( player, "r8" ) )
		return SCRIPT_CONTINUE;

	messageTo( self, "handleTauntThree", null, 30, false );
	removeStaticWaypoint( self );
	return SCRIPT_CONTINUE;
}

