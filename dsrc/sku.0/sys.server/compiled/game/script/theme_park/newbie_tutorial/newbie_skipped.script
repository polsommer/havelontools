include library.xp;
include library.loot;
include library.utils;
include library.money;
include library.features;

inherits theme_park.newbie_tutorial.tutorial_base;

trigger OnAttach()
{
	if ( features.isSpaceEdition(self))
		setObjVar(self, "jtlNewbie", 4 );//we're done!

	deleteInventory( self );
	fillbank( self );
	grantNewbieStartingMoney( self );
	setObjVar( self, "newbie.oathCompleted", true );

	string skillName = getStringObjVar( self, "newbie.hasSkill" );
	if ( skillName != null )
	{
		if (!hasSkill( self, skillName))
			grantSkill(self, skillName);
	}
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	sendStartingMessage( self );

	newbieTutorialEnableHudElement( self, "all", true, 0.0f );

	//take away all the meats and crap the player has picked-up
	// and then give him some food:
	obj_id playerInv = utils.getInventoryContainer(self);
	obj_id[] contents = getContents(playerInv);
	for ( int i = 0; i < contents.length; i++ )
	{
		if ( hasObjVar( contents[i], "newbie.item" ))
		{
			if ( hasScript( contents[i], BOX_ITEM_SCRIPT ))
				detachScript( contents[i], BOX_ITEM_SCRIPT );
			destroyObject( contents[i] );//take away all the free meats
		}
	}

	transferBankToInventory(self);

	for ( int i = 0; i < BOX_CONTENTS.length; i++ )
	{
		createObject( BOX_CONTENTS[i], playerInv, "");
	}

	// Go through the player's existing equipment and setup decay, before we add new equipment.
	obj_id pInv = utils.getInventoryContainer( self );
	contents = getContents( pInv );
	if ( contents != null )
	{
		for ( int i=0; i<contents.length; i++ )
		{
			
		}
	}
	contents = getContents( self );
	if ( contents != null )
	{
		for ( int i=0; i<contents.length; i++ )
		{
			
		}
	}

	removeObjVar( self, "newbie" );
	removeObjVar( self, "skipTutorial" );
	removeObjVar( self, "banking_bankid" );
	//grants all novice skills to new players
	grantAllNoviceSkills(self);
	return SCRIPT_CONTINUE;
}

/** GRANT NEWBIE STARTING MONEY *****************************************/
messageHandler xferFailed()
{
    grantNewbieStartingMoney( self );
    return SCRIPT_CONTINUE;
}

messageHandler timeToWithdraw()
{
    if ( (params == null) || (params.isEmpty()) )
    {
        messageTo(self, "xferFailed", null, 0, false);
        return SCRIPT_CONTINUE;
    }

	int amt = params.getInt(money.DICT_AMOUNT);
    withdrawCashFromBank(self, amt, "cashReceived", "xferFailed", params);
    return SCRIPT_CONTINUE;
}

messageHandler cashReceived()
{

    //account to cash transfer successful...
    //need to do something extra? do it here
    return SCRIPT_CONTINUE;
}
/** END OF THE SHOW *****************************************************/

commandHandler newbieRequestStartingLocations ()
{
	newbieTutorialSendStartingLocationsToPlayer (self, null);
	return SCRIPT_CONTINUE;
}

commandHandler newbieSelectStartingLocation ()
{
	sendToStartLocation( self, params );
	return SCRIPT_CONTINUE;
}

messageHandler handleEndTutorial()
{
	newbieTutorialEnableHudElement( self, "all", true, 0.0f );
	detachScript( self, "theme_park.newbie_tutorial.newbie_skipped" );
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	location loc = getLocation( self );
	string area = loc.area;
	if (!area.equals("tutorial") )
	{
		newbieTutorialEnableHudElement( self, "all", true, 0.0f );
		detachScript( self, "theme_park.newbie_tutorial.newbie_skipped" );
	}
	return SCRIPT_CONTINUE;
}
