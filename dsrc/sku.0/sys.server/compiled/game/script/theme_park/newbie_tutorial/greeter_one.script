include library.ai_lib;
include library.chat;
include library.utils;
include library.colors;

inherits theme_park.newbie_tutorial.tutorial_base;

trigger OnAttach()
{
	setHomeLocation( self, getLocation( self ));

	obj_id player = getPlayer( self );
	faceTo( self, player );

	return SCRIPT_CONTINUE;
}

messageHandler handleNewArrival()
{
	if ( utils.hasScriptVar( self, "newbie.greeting" ))
		return SCRIPT_CONTINUE;

	utils.setScriptVar( self, "newbie.greeting", true );

	obj_id player = getPlayer( self );
	if ( player == null )
	{
		if ( hasObjVar( self, "newbie.triedOnce" ))
			return SCRIPT_CONTINUE;

		setObjVar( self, "newbie.triedOnce", true );
		messageTo( self, "handleNewArrival", null, 10, false );
		return SCRIPT_CONTINUE;
	}
	faceToBehavior( self, player );
	ai_lib.aiFollow( self, player );
	messageTo( self, "handleOne", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleOne()
{
	faceToBehavior( self, getPlayer(self) );
	chat.chat( self, new string_id ( NEWBIE_CONVO, "greeter1_bark1" ));
	messageTo( self, "handleTwo", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleTwo()
{
	faceToBehavior( self, getPlayer(self) );
	chat.chat( self, new string_id ( NEWBIE_CONVO, "greeter1_bark2" ));
	messageTo( self, "handleThree", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handleThree()
{
	faceToBehavior( self, getPlayer(self) );
	chat.chat( self, new string_id ( NEWBIE_CONVO, "greeter1_bark3" ));
	messageTo( self, "handlePathToNextRoom", null, 5, false );
	return SCRIPT_CONTINUE;
}

messageHandler handlePathToNextRoom()
{
	location destLoc = new location ( getLocation( self) );
	destLoc.x = ROOM1_GREETER_DEST_X;
	destLoc.y = ROOM1_GREETER_DEST_Y;
	destLoc.z = ROOM1_GREETER_DEST_Z;
	obj_id bldg = getTopMostContainer( self );
	destLoc.cell = getCellId(bldg, ROOM1_GREETER_DEST_CELL);

	//stop following without resuming default behavior:
	stop( self );
	removeObjVar( self, "ai.persistantFollowing" );

	pathTo( self, destLoc );
	setObjVar( self, "newbie.movingToRoom2", true );
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	if ( hasObjVar( self, "newbie.movingToRoom2" ))
	{
		//have arrived in room 2, so go home:
		removeObjVar( self, "newbie.movingToRoom2" );
		doAnimationAction( self, "point_right" );
		messageTo( self, "handlePathHome", null, 5, false );
		return SCRIPT_CONTINUE;
	}

/*	//must have arrived home, so go to room 2:
	location destLoc = new location ( getLocation( self) );
	destLoc.x = ROOM1_GREETER_DEST_X;
	destLoc.y = ROOM1_GREETER_DEST_Y;
	destLoc.z = ROOM1_GREETER_DEST_Z;
	obj_id bldg = getTopMostContainer( self );
	destLoc.cell = getCellId(bldg, ROOM1_GREETER_DEST_CELL);
	setObjVar( self, "newbie.pathingToRoom1", true );
	pathTo( self, destLoc );
 */
	return SCRIPT_CONTINUE;
}

messageHandler handlePathHome()
{
	location destLoc = getLocation( self );
	destLoc.x = ROOM1_GREETER_LOC_X;
	destLoc.y = ROOM1_GREETER_LOC_Y;
	destLoc.z = ROOM1_GREETER_LOC_Z;
	obj_id bldg = getTopMostContainer( self );
	destLoc.cell = getCellId(bldg, ROOM1_GREETER_LOC_CELL);

	setObjVar( self, "newbie.movingToMidPoint", true );

	pathTo( self, destLoc );
	return SCRIPT_CONTINUE;
}

