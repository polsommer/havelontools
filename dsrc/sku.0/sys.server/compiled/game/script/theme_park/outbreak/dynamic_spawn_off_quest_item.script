include library.attrib;
include library.create;
include library.groundquests;
include library.locations;
include library.utils;
const string CREATURE_TABLE 			= "datatables/mob/creatures.iff";

messageHandler handleQuestFlavorObject()
{
	CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Initialized!");	
	//VERIFY PARAMS
	if((params == null) || (params.isEmpty()))
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Params invalid.");
		return SCRIPT_CONTINUE;
	}
	if(!params.containsKey("player"))
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() player param not found.");
		return SCRIPT_CONTINUE;
	}
	obj_id player = params.getObjId("player");
	if(!isValidId(player) || !exists(player))
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() player OID invalid.");
		return SCRIPT_CONTINUE;
	}
	//VERIFY VARS ON OBJECT
	if(!hasObjVar(self, "creatureName"))
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() No creature name var on object: "+self);
		return SCRIPT_CONTINUE;	
	}
	
	string creatureName = getStringObjVar(self,"creatureName");
	if(creatureName == null || creatureName.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Creature var INVALID on object: "+self);
		return SCRIPT_CONTINUE;	
	}

	if(!hasObjVar(self, "spawnCount"))
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() No creature spawn count var on object: "+self);
		return SCRIPT_CONTINUE;	
	}

	int spawnCount = getIntObjVar(self,"spawnCount");
	if(spawnCount <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Creature spawn count var INVALID on object: "+self);
		return SCRIPT_CONTINUE;	
	}
	
	int combatLevel = getLevel(player);
	if(combatLevel < 0 || combatLevel > 90)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Player "+player+" has a level that is invalid. Player level is: "+combatLevel+". Aborting the camp defense.");
		return SCRIPT_CONTINUE;	
	}

	for(int i = 0; i < spawnCount; i++)
	{

		//CREATE THE MOB
		obj_id mob = create.object(creatureName, getLocation(self));
		if(!isValidId(mob) || !exists(mob))
		{
			CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Mob: "+mob+" could not be created!");
			return SCRIPT_CONTINUE;
		}

		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Mob level is set to match player level");		

		//If you are initializing a creature, you NEED this objvar
		setObjVar(mob, create.INITIALIZE_CREATURE_DO_NOT_SCALE_OBJVAR, 1);	

		dictionary creatureDict = utils.dataTableGetRow(CREATURE_TABLE, creatureName);
		if(creatureDict != null)
		{
			create.initializeCreature (mob, creatureName, creatureDict, combatLevel);
		}
		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() Mob level is set to match player level.");

		setInvulnerable(mob, false);
		clearCondition(mob, CONDITION_CONVERSABLE);
		setMovementRun(mob);
		setBaseRunSpeed(mob, (getBaseRunSpeed(self)-8));			
		setAttributeAttained(mob, attrib.OUTBREAK_AFFLICTED);
		setObjVar(mob, "owner", player);

		attachScript(mob, "theme_park.outbreak.dynamic_enemy");
		startCombat(mob, player);

		CustomerServiceLog("outbreak_themepark", "dynamic_spawn_off_quest_item.handleQuestFlavorObject() the NPC is attacking player: "+player);
	}
	return SCRIPT_CONTINUE;
}
