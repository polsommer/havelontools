//------------------------------------------------
// Includes
//------------------------------------------------
include library.ai_lib;
include library.utils;
const int MAXDISTANCE = 60;

trigger OnAttach()
{
	CustomerServiceLog("outbreak_themepark", "dynamic_enemy.OnAttach() initialized.");
	messageTo(self, "startVerificationLoop", null, 0, false );
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	CustomerServiceLog("outbreak_themepark", "dynamic_enemy.OnDeath() Undead NPC "+self+" has died at the hands of "+killer);
 	return SCRIPT_CONTINUE;
}

trigger OnIncapacitateTarget(obj_id victim)
{
	if(ai_lib.isDead(self))
		return SCRIPT_CONTINUE;
		
	CustomerServiceLog("outbreak_themepark", "dynamic_enemy.OnIncapacitateTarget() Mob "+self+" Incapacitated a target: "+victim);
	messageTo(self, "destroySelf", null, 1, false );

 	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if(ai_lib.isDead(self))
		return SCRIPT_CONTINUE;

	messageTo(self, "destroySelf", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler startVerificationLoop()
{
	CustomerServiceLog("outbreak_themepark", "dynamic_enemy.startVerificationLoop() Handler initialized");

	location currentLoc = getLocation(self);
	if(currentLoc == null)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_enemy.startVerificationLoop() current boss mob ("+self+") location NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	location creationLoc = aiGetHomeLocation(self);
	if(creationLoc == null)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_enemy.startVerificationLoop() creation location for boss mob ("+self+") was NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	float distanceCheck = utils.getDistance2D(currentLoc, creationLoc);
	
	if(distanceCheck > MAXDISTANCE)
	{
		CustomerServiceLog("outbreak_themepark", "dynamic_enemy.startVerificationLoop() boss mob ("+self+") has moved too far from creation location. Moving back to creation location.");	
		messageTo(self, "destroySelf", null, 1, false);

	}
	else
	{
		messageTo(self, "startVerificationLoop", null, 3, false);
	}
	return SCRIPT_CONTINUE;
}


messageHandler destroySelf()
{
	if(ai_lib.isInCombat(self))
		return SCRIPT_CONTINUE;
		
	destroyObject(self);
	return SCRIPT_CONTINUE;	
}