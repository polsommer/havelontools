include library.ai_lib;
include library.groundquests;

const string MENU_STRING_FILE			= "theme_park/outbreak/outbreak";
const string MENU_OBJ_VAR			= "menu_string";
const string QUEST_OBJ_VAR			= "questName";
const string SPAWNER_OBJ_VAR			= "mySpawner";

const string_id SID_YOU_FIND_NOTHING		= new string_id(MENU_STRING_FILE, "you_find_nothing");
const string_id SID_THIS_NOT_FOR_YOU		= new string_id(MENU_STRING_FILE, "this_isnt_for_you");

trigger OnAttach()
{
	if(!isMob(self))
		return SCRIPT_CONTINUE;
	
	messageTo(self, "knockDown", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if(!isMob(self))
		return SCRIPT_CONTINUE;

	messageTo(self, "knockDown", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, MENU_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No MENU_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, QUEST_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No QUEST_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, SPAWNER_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No SPAWNER_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	string menuObjVar = getStringObjVar(self, MENU_OBJ_VAR);
	if(menuObjVar == null || menuObjVar.length() <= 0)
		return SCRIPT_CONTINUE;

	menu_info_data data = mi.getMenuItemByType (menu_info_types.SERVER_MENU2);
	mi.addRootMenu(menu_info_types.SERVER_MENU2, new string_id(MENU_STRING_FILE, menuObjVar));

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, MENU_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No MENU_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, QUEST_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No QUEST_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, SPAWNER_OBJ_VAR))
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() No SPAWNER_OBJ_VAR for : "+self);
		return SCRIPT_CONTINUE;
	}
	if(item != menu_info_types.SERVER_MENU2)
		return SCRIPT_CONTINUE;

	string questName = getStringObjVar(self,QUEST_OBJ_VAR);
	if(questName == null || questName.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() QUEST_OBJ_VAR invalid for : "+self);
		return SCRIPT_CONTINUE;
	}
	
	if(groundquests.isQuestActiveOrComplete(player, questName))
	{
		sendSystemMessage(player, SID_THIS_NOT_FOR_YOU);
		CustomerServiceLog("outbreak_themepark", "hidden_content_object.OnObjectMenuRequest() Player: "+player+" already has quest for object: "+self);
		return SCRIPT_CONTINUE;
	}
	
	groundquests.grantQuest(player, questName);
	messageTo(self, "destroySelf", null, 0, false);

	return SCRIPT_CONTINUE;
}

messageHandler knockDown()
{
	ai_lib.aiSetPosture(self, POSTURE_KNOCKED_DOWN);
	return SCRIPT_CONTINUE;	
}

messageHandler destroySelf()
{
	//clean mySpawner here
	if(hasObjVar(self, "mySpawner"))
	{
		obj_id mySpawner = getObjIdObjVar(self, "mySpawner");
		if(isValidId(mySpawner) && exists(mySpawner))
		{
			destroyObject(mySpawner);		
		}
	}

	destroyObject(self);
	//CUSTOMER SERVICE LOG
	return SCRIPT_CONTINUE;
}
