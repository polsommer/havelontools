include library.groundquests;
include library.stealth;
include library.utils;

const boolean LOGGING_ON			= true; 
const string SCRIPT_LOG				= "outbreak_trigger";

const string TRIGGER_NAME_PREFIX 		= "scientist_spawning_trigger_";
const string CLIENT_EFFECT			= "appearance/pt_smoke_puff.prt";
const string SCIENTIST_SPAWN_OBJVAR 		= "scientist_spawn_point";

const string QUEST_IMPERIAL			= "outbreak_quest_facility_05_imperial";
const string QUEST_REBEL			= "outbreak_quest_facility_05_rebel";
const string QUEST_NEUTRAL			= "outbreak_quest_facility_05_neutral";
const string RESCUE_TASK_01			= "mentorComm";
const string RESCUE_TASK_02			= "coverSurvivors";
const string RESCUE_TASK_03			= "moveToTask";

const float TRIGGER_RADIUS 			= 3f;
const float SPAWNER_RADIUS			= 6f;
const int TOTAL_SPAWNERS			= 5;

trigger OnHearSpeech(obj_id speaker, string text)
{
	blog("Spawner: heard speach");

	if(!isGod(speaker))
	{
		blog("Spawner: player not in godmode");
		return SCRIPT_CONTINUE;
	}
	if(!text.equals("spawn_scientists"))
	{
		blog("Spawner: not the command spawner needs");
		return SCRIPT_CONTINUE;
	}
	blog("Spawner: command received!!");	
	if(!sendMessageToSpawnActors(self, speaker))
	{
		blog("Spawner: command FAILED!!");		
	}
	
	blog("Spawner: command success");	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	//on init add trig volume
	createTriggerVolume(TRIGGER_NAME_PREFIX + self, TRIGGER_RADIUS, true);
	//no attribs because we only want players
	return SCRIPT_CONTINUE;
}

//Since the player is warped into the trigger volume there is no way to know
//when the volume is breached. We are using on exit
trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{
	blog("OnTriggerVolumeEntered INIT: "+whoTriggeredMe);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id whoTriggeredMe)
{
	blog("Exited trigger volume: "+whoTriggeredMe);

	if(!isPlayer(whoTriggeredMe))
		return SCRIPT_CONTINUE;
	
	blog("Spawner: "+getIntObjVar(self, "spawner"));

	if(!hasObjVar(self, "scientist_spawner"))
		return SCRIPT_CONTINUE;

	if(!groundquests.isQuestActive(whoTriggeredMe, QUEST_IMPERIAL)
	&& !groundquests.isQuestActive(whoTriggeredMe, QUEST_REBEL)
	&& !groundquests.isQuestActive(whoTriggeredMe, QUEST_NEUTRAL))
	{
		CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() Ground Quest not found for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
		return SCRIPT_CONTINUE;
	}

	if(!groundquests.isTaskActive(whoTriggeredMe, QUEST_IMPERIAL, RESCUE_TASK_01)
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_REBEL, RESCUE_TASK_01) 
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_NEUTRAL, RESCUE_TASK_01)
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_IMPERIAL, RESCUE_TASK_02)
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_REBEL, RESCUE_TASK_02) 
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_NEUTRAL, RESCUE_TASK_02)
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_IMPERIAL, RESCUE_TASK_03)
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_REBEL, RESCUE_TASK_03) 
	&& !groundquests.isTaskActive(whoTriggeredMe, QUEST_NEUTRAL, RESCUE_TASK_03))	
	{
		CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() Ground Quest, with task, not found for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
		return SCRIPT_CONTINUE;
	}

	if(utils.hasScriptVar(whoTriggeredMe, "survivorsRescued"))
	{
		CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() Already spawned scientists for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
		return SCRIPT_CONTINUE;
	}
	
	CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() Ground Quest and task was found for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
	
	if(!sendMessageToSpawnActors(self, whoTriggeredMe))
	{
		CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() the function: sendMessageToSpawnActors() reports that the actors had a problem spawning for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
		
	}
	return SCRIPT_CONTINUE;
}

boolean sendMessageToSpawnActors(obj_id self, obj_id whoTriggeredMe)
{
	if(!isValidId(self) || !exists(self))
		return false;
	if(!isValidId(whoTriggeredMe) || !exists(whoTriggeredMe))
		return false;
		
	obj_id[] survivorSpawnLocs = getAllObjectsWithObjVar(getLocation(self), SPAWNER_RADIUS, SCIENTIST_SPAWN_OBJVAR);
	if(survivorSpawnLocs == null || survivorSpawnLocs.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "rescue_trigger_volume.sendMessageToSpawnActors() Ground Quest found for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
		return false;
	}
	
	if(survivorSpawnLocs.length != TOTAL_SPAWNERS)
	{
		if(survivorSpawnLocs.length < TOTAL_SPAWNERS)
		{
			CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.sendMessageToSpawnActors() The trigger object retrieved too many spawners for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
			return false;
		}
		else
		{
			CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.sendMessageToSpawnActors() The trigger object failed to get all spawners for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ")" );
			return false;
		}
	}

	dictionary parms = new dictionary();
	parms.put("owner", whoTriggeredMe);
	
	for(int i = 0;i < survivorSpawnLocs.length; i++)
	{
		messageTo(survivorSpawnLocs[i], "spawnRescuedActor", parms, 1, false);
	}
	utils.setScriptVar(whoTriggeredMe, "survivorsRescued", true);
	CustomerServiceLog("outbreak_themepark", "dungeon_scientist_trigger_volume.OnTriggerVolumeExited() Nodes were messaged to spawn actors for Player: "+getPlayerName(whoTriggeredMe)+" ("+whoTriggeredMe+ ").");
	return true;
}

boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(SCRIPT_LOG,msg);
	return true;
}
