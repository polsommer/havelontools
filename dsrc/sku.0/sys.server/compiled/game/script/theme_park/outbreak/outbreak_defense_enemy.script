//------------------------------------------------
// Includes
//------------------------------------------------

include library.utils;
include library.groundquests;
const string GUARD_OCCUPIED			= "occupied";

trigger OnAttach()
{
 	messageTo(self, "checkValidityOfOwner", null, 5, false);

	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnMovePathComplete() initialized.");
	if(!hasObjVar(self, "owner"))
		return SCRIPT_CONTINUE;
	
	obj_id owner = getObjIdObjVar(self, "owner");
	if(!isValidId(owner) || !exists(owner))
		return SCRIPT_CONTINUE;
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnMovePathComplete() Starting Combat with Owner.");

	startCombat(self, owner);
	
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnDeath() Undead NPC has died. Crediting Player.");

	if(!hasObjVar(self, "questName"))
	 	return SCRIPT_CONTINUE;
	if(!hasObjVar(self, "survivalTaskName"))
	 	return SCRIPT_CONTINUE;
	if(!hasObjVar(self, "cleanUpTaskName"))
	 	return SCRIPT_CONTINUE;

	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnDeath() Undead NPC Validation completed.");
	
 	obj_id player = getObjIdObjVar(self, "owner");
 	if(isValidId(player) && exists(player))
 	{
 		CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnDeath() Undead NPC is owned by player: "+player);
	
		string questName = getStringObjVar(self, "questName");
		if(questName == null || questName.length() <= 0)
	 		return SCRIPT_CONTINUE;
	 	string survivalTaskName = getStringObjVar(self, "survivalTaskName");
		if(survivalTaskName == null || survivalTaskName.length() <= 0)
	 		return SCRIPT_CONTINUE;
	 	string cleanUpTaskName = getStringObjVar(self, "cleanUpTaskName");
		if(cleanUpTaskName == null || cleanUpTaskName.length() <= 0)
	 		return SCRIPT_CONTINUE;
	
	 	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnDeath() Undead NPC is is sending message to player: "+player);

		dictionary webster = new dictionary();
		webster.put("questName", questName);
		webster.put("survivalTaskName", survivalTaskName);
		webster.put("cleanUpTaskName", cleanUpTaskName);		
 		messageTo(player, "recalculateCampDefenseUndeadArray", webster, 0, false );
 	} 	
 	return SCRIPT_CONTINUE;
}

trigger OnIncapacitateTarget(obj_id victim)
{
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() Player has died. Checking if quest needs updating.");
	if(!hasObjVar(self, "questName"))
	 	return SCRIPT_CONTINUE;
	if(!hasObjVar(self, "survivalTaskName"))
	 	return SCRIPT_CONTINUE;
	if(!hasObjVar(self, "cleanUpTaskName"))
	 	return SCRIPT_CONTINUE;
	if(!hasObjVar(self, "owner"))
	 	return SCRIPT_CONTINUE;
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() Undead NPC Validation completed.");

 	obj_id player = getObjIdObjVar(self, "owner");
 	if(!isValidId(player) || !exists(player))
	 	return SCRIPT_CONTINUE;		

	if(victim != player)
		return SCRIPT_CONTINUE;		

	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() Failing player's quest.");
	groundquests.sendSignal(player, "campDefenseFailed");
	
	if(utils.hasScriptVar(player, GUARD_OCCUPIED))
	{
		CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() Attempting to set the guard post to available.");

		obj_id guardPost = utils.getObjIdScriptVar(self,GUARD_OCCUPIED);
		if(!isValidId(guardPost) || !exists(guardPost))
		{
			CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() could not find guard post objvar on player!!!");
			return SCRIPT_CONTINUE;		
		}
		utils.removeScriptVar(guardPost, GUARD_OCCUPIED);
		CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.OnIncapacitateTarget() Set guard post: "+guardPost+" to available.");
	}
	
 	return SCRIPT_CONTINUE;
}

messageHandler checkValidityOfOwner()
{
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.checkValidityOfOwner() Initalized Message Handler.");

	if(!hasObjVar(self, "questName"))
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, "survivalTaskName"))
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, "cleanUpTaskName"))
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	if(!hasObjVar(self, "owner"))
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.checkValidityOfOwner() Undead NPC Validation completed.");

 	obj_id player = getObjIdObjVar(self, "owner");
 	if(!isValidId(player) || !exists(player))
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}	 	
	string questName = getStringObjVar(self, "questName");
	if(questName == null || questName.length() <= 0)
	{
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	if(!groundquests.isQuestActive(player, questName)) 
	{
		removeGuardPostFlag(player);
	 	messageTo(self, "cleanUpEnemy", null, 0, false);	
	 	return SCRIPT_CONTINUE;
	}
	messageTo(self, "checkValidityOfOwner", null, 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler cleanUpEnemy()
{
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.cleanUpEnemy() Initalized Message Handler.");

	destroyObject(self);
	return SCRIPT_CONTINUE;
}

boolean removeGuardPostFlag(obj_id player)
{
	if(!isValidId(player) || !exists(player))
	{
		return false;
	}
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.removeGuardPostFlag() Player "+player+" is attempting to remove the guard post occupied flagging.");

	//Removed Occupied Flag from the guard post
	if(utils.hasScriptVar(player, GUARD_OCCUPIED))
	{
		obj_id guardPost = utils.getObjIdScriptVar(player, GUARD_OCCUPIED);
		if(isValidId(guardPost) && exists(guardPost))
		{
			utils.removeScriptVar(guardPost, GUARD_OCCUPIED);
			return true;
		}
	}
	CustomerServiceLog("outbreak_themepark", "outbreak_defense_enemy.removeGuardPostFlag() Player "+player+" did not have the guard post oid or the oid was invalid.");
	return false;
}
