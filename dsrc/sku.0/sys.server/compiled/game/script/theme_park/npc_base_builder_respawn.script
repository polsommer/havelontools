include library.trial;
include library.utils;
include library.ai_lib;

trigger OnDestroy()
{
	if (ai_lib.isMob(self))
		return SCRIPT_CONTINUE;
		
	handleRespawn(self);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	handleRespawn(self);
	return SCRIPT_CONTINUE;
}

void handleRespawn(obj_id self)
{
	obj_id parent = trial.getParent(self);
	int spawnNumber = getIntObjVar(self,"base_builder.spawn_position");
	string sRespawn = getStringObjVar(self, "respawn");
	int iRespawn = 0;
	string[] timeHack = split(sRespawn, ':');
	if (timeHack.length > 1)
	{
		int min = utils.stringToInt(timeHack[0]);
		int max = utils.stringToInt(timeHack[1]);
		iRespawn = rand(min,max);
	}
	else
		iRespawn = utils.stringToInt(sRespawn);
		
	
	dictionary respawnData = trial.getSessionDict(parent);
	respawnData.put("spawnNumber", spawnNumber);
	
	messageTo(parent, "handleEntityRespawn", respawnData, iRespawn, false);	
}