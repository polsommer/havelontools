include library.locations;
include library.chat;
include library.quests;
include library.create;
include ai.ai_combat;

const string CONVO = "theme_park_bestine/curator";

trigger OnAttach ()
{
	location questLoc = getLocationObjVar (self, "bestine.curator.fetchLoc");
	quests.addQuestLocationTarget ( self, null, "quest", questLoc, 15);
	addLocationTarget ("spawnGuy", questLoc, 100);
	return SCRIPT_CONTINUE;
}	

trigger OnArrivedAtLocation( string name )
{
	int questNum = getIntObjVar (self, "bestine.curator_quest");
	string datatable = "datatables/theme_park/bestine_curator.iff";
	string enemy = dataTableGetString (datatable, 0, questNum-1);
	if (enemy == null)
	{
		enemy = "thug";
	}		
	string enemyName = dataTableGetString (datatable, 1, questNum-1);
	if (enemyName == null)
	{
		enemyName = "Bob";
	}
	
	if (name == "quest")
	{
		obj_id fight = getObjIdObjVar (self, "bestine.curator.npc");
		string_id message = new string_id (CONVO, "enemy_" + questNum);
		chat.chat (fight, message);
		startCombat (fight, self);
		quests.clearQuestLocationTarget (self, null, name);
	}
	if (name == "spawnGuy")
	{
		removeLocationTarget(name);
		location spawn = getLocationObjVar (self, "bestine.curator.fetchLoc");
		if (spawn == null)
		{
			spawn = getLocation (self);
			spawn.x = spawn.x + 10;
		}			
		obj_id npc = create.object (enemy, spawn);
		setName (npc, enemyName);
		attachScript (npc, "theme_park.tatooine.bestine.curator_fetch_enemy");
		setObjVar (npc, "player", self);
		setObjVar (self, "bestine.curator.npc", npc);
	}
	if (name == "questGiver")
	{
		quests.clearQuestLocationTarget (self, null, name);
	}		
	return SCRIPT_CONTINUE;
}

messageHandler finishQuest()
{
	location questGiver = getLocationObjVar (self, "bestine.curator.guardLoc");
	quests.addQuestLocationTarget ( self, null, "questGiver", questGiver, 10);
	return SCRIPT_CONTINUE;
}	