include library.utils;
include library.locations;
include library.quests;
include library.create;
include ai.ai_combat;

trigger OnAttach ()
{

	string datatable = getStringObjVar (self, "quest_table");
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");
	int totalQuestNum = getIntObjVar (self, gatingString);

	string target = dataTableGetString (datatable, questNum, "npc_name" );
	if (target == null || target == "")
	{
		target = dataTableGetString (datatable, questNum, "npc_type");
		if ( target == null || target == "")
		{
			target = "Quest Waypoint";
		}
	}
	string file = "theme_park_jabba/quest_details";
	string entry = questID + "_" + totalQuestNum;
	location questLoc = getLocationObjVar (self, questID + ".questLoc");
	obj_id waypoint = quests.addThemeParkWaypoint( self, questID, "quest", questLoc, 20, target, file, entry );
	if (questID != null && questID != "")
	{
		setObjVar (self, questID + ".waypoint", waypoint);
		addLocationTarget ("spawnThemeParkGuy", questLoc, 100);
	}
	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation( string name )
{
	string datatable = getStringObjVar (self, "quest_table");
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (self, gatingString);
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (name == "quest")
	{
		obj_id vip = getObjIdObjVar (self, questID + ".vip");
		messageTo (vip, "saySomething", null, 0, true);
	}

	if (name == "spawnThemeParkGuy")
	{
		if (type == "go")
		{
			messageTo (self, "finishStaticQuest", null, 2, true);
			return SCRIPT_OVERRIDE;
		}
		location spawn = getLocationObjVar (self, questID + ".questLoc");
		string npcToSpawn = dataTableGetString (datatable, questNum, "npc_type");
		if (npcToSpawn == null)
		{
			string_id badNpc = new string_id ("theme_park/messages", "bad_npc_message");
			string nospawn = getString (badNpc);
			sendSystemMessage (self, nospawn, null);
			if (questID != null && questID != "")
			{
				setObjVar (self, questID + ".noloc", 1);
			}
			return SCRIPT_OVERRIDE;
		}
		string npcName = dataTableGetString (datatable, questNum, "npc_name");
		string npcScript = dataTableGetString (datatable, questNum, "npc_script");
		obj_id npc = create.object (npcToSpawn, spawn);
		if (questID != null && questID != "")
		{
			setObjVar (npc, "player", self);
			setObjVar (self, questID + ".vip", npc);
			setObjVar (npc, "quest_table", datatable);
			setObjVar (npc, "questNum", questNum);
			setObjVar (self, questID + ".arrived", 1);
			attachScript (npc, npcScript);
		}
		if (npcName != null && npcName != "")
		{
			setName (npc, npcName);
		}
		spawnExtras(self, spawn, questID);
	}

	if (name == "home")
	{
		obj_id waypoint = getObjIdObjVar (self, questID + ".waypointhome");
		if (waypoint != null)
		{
			destroyWaypointInDatapad(waypoint, self);
		}

		quests.clearQuestLocationTarget (self, null, name);
	}
	return SCRIPT_CONTINUE;
}

messageHandler finishJabbaQuest()
{
	string datatable = getStringObjVar (self, "quest_table");
	string file = "theme_park_jabba/quest_details";
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	string entry = questID + "_return";
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (self, gatingString);
	int questNum = getIntObjVar (self, questID + ".questNum");

	obj_id waypoint = getObjIdObjVar (self, questID + ".waypoint");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, self);
	}
	location home = getLocationObjVar (self, questID + ".home");
	if (!hasObjVar (self, questID + ".failed"))
	{

		string_id complete = new string_id ("theme_park/messages", "jabba_completion_message");
		string completion = getString (complete);
		sendSystemMessage (self, completion, null);
	}

	if (questID != null && questID != "")
	{
		if (!hasObjVar (self, questID + ".done"))
		{
			setObjVar (self, questID + ".done", 1);
			obj_id waypointhome = quests.addThemeParkWaypoint( self, questID, "quest", home, 15, "Finish Quest", file, entry );
			setObjVar (self, questID + ".waypointhome", waypointhome);
		}
	}
	return SCRIPT_CONTINUE;
}

void spawnExtras(obj_id self, location spawn, string questID)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	location here = getLocationObjVar (self, questID + ".questLoc");

	string spawn1 = dataTableGetString (datatable, questNum, "extra_npc");
	string spawn2 = dataTableGetString (datatable, questNum, "extra_npc2");
	string spawn3 = dataTableGetString (datatable, questNum, "extra_npc3");
	string spawn4 = dataTableGetString (datatable, questNum, "extra_npc4");

	if (here == null)
	{
		here = getLocation(self);
	}

	if (spawn1 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra = create.object (spawn1, here);
		if(extra != null && isIdValid(extra)) {

			string disposition = dataTableGetString (datatable, questNum, "extra_npc_disposition");
			if (disposition == "aggro")
			{
				dictionary enemies = new dictionary();
				enemies.put ("npc", extra);
				enemies.put ("player", self);
				messageTo (self, "makeEnemyAttack", enemies, 3, true);
			}
		}
	}

	if (spawn2 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra2 = create.object (spawn2, here);
		if(extra2 != null && isIdValid(extra2)) {

			string disposition2 = dataTableGetString (datatable, questNum, "extra_npc2_disposition");
			if (disposition2 == "aggro")
			{
				startCombat(extra2, self);
			}
		}
	}

	if (spawn3 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra3 = create.object (spawn3, here);
		if(extra3 != null && isIdValid(extra3)) {

			string disposition3 = dataTableGetString (datatable, questNum, "extra_npc3_disposition");
			if (disposition3 == "aggro")
			{
				startCombat(extra3, self);
			}
		}
	}

	if (spawn4 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra4 = create.object (spawn4, here);
		if(extra4 != null && isIdValid(extra4)) {

			string disposition4 = dataTableGetString (datatable, questNum, "extra_npc4_disposition");
			if (disposition4 == "aggro")
			{
				startCombat(extra4, self);
			}
		}
	}
	return;
}

messageHandler removeJabbaQuestInfo()
{
	string questID = params.getString ("questID");
	if (questID == null)
	{
		questID = "none";
	}
	int questNum = getIntObjVar (self, questID + ".questNum");
	string datatable = getStringObjVar (self, "quest_table");
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	string selfScript = dataTableGetString (datatable, questNum, "player_script");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	obj_id waypoint = getObjIdObjVar (self, questID + ".waypoint");

	if (waypoint != null)
	{
		destroyObject (waypoint);
	}

	if (hasObjVar (self, questID + ".vip"))
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		if (type == "rescue" || type == "arrest" || type == "escort")
		{
			obj_id vip = getObjIdObjVar (self, questID + ".vip");
			messageTo (vip, "stopFollowing", null, 1, true);
		}

		removeObjVar (self, questID);
		removeObjVar (self, "quest_table");
		removeObjVar (self, "questNum");
		removeObjVar (self, "boss");

		if (hasScript (self, selfScript))
		{
			detachScript (self, selfScript);
		}
		return SCRIPT_CONTINUE;
	}
}

messageHandler makeEnemyAttack()
{
	obj_id npc = params.getObjId ("npc");
	obj_id player = params.getObjId ("player");
	startCombat(npc, player);
	return SCRIPT_CONTINUE;
}

trigger OnWaypointGetAttributes (obj_id waypoint, obj_id player, string[] names, string[] attribs)
{
	string questId = getStringObjVar (player, "questID");
	string file = getStringObjVar (player, questId + ".file");
	string entry = getStringObjVar (player, questId + ".entry");

	obj_id wp = getObjIdObjVar (player, questId + ".waypoint");
	obj_id wph = getObjIdObjVar (player, questId + ".waypointhome");

	if (waypoint != wp && waypoint != wph)
	{
		return SCRIPT_OVERRIDE;
	}

	string_id detail = new string_id (file, entry);
	string questDetails = "@"+detail.toString();
	int idx = 0;
	while (idx >= 0)
	{
		string currentName = names[idx];
		if (names[idx] == null)
		{
			names[idx] = "quest_details";
			attribs[idx] = questDetails;
			idx = -1;
		}
		else
		{
			idx = idx + 1;
		}
	}


	return SCRIPT_CONTINUE;
}

trigger OnWaypointDestroyed(obj_id waypoint)
{
	string questID = getStringObjVar (self, "questID");

	if (questID == null)
	{
		return SCRIPT_OVERRIDE;
	}
	else
	{
		int stringCheck = questID.indexOf("jabbas_palace");

		if (stringCheck > -1)
		{
			dictionary questBook = new dictionary();
			questBook.put( "questID", questID);
			messageTo (self, "removeJabbaQuestInfo", questBook, 2, true);
			return SCRIPT_CONTINUE;
		}
		else
		{
			return SCRIPT_OVERRIDE;
		}
	}
}