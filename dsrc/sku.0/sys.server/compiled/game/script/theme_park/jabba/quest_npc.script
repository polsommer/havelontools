include library.quests;
include library.ai_lib;
include library.chat;
include library.utils;
include ai.ai_combat;
include library.money;
include library.create;

trigger OnAttach()
{
	messageTo (self, "setupSelf", null, 4, true);
	return SCRIPT_CONTINUE;
}	

trigger OnStartNpcConversation (obj_id speaker)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");	
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	
	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	if (hasObjVar (speaker, questID + ".vip"))
	{
		
		obj_id courier = getObjIdObjVar (speaker, questID + ".vip");
		if (courier == self)
		{
			obj_id playerInv = utils.getInventoryContainer(speaker);
			if (type == "escort" || type == "arrest")
			{
				string reward = "npc_takeme_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				dictionary parms = new dictionary();
				parms.put ("player", speaker);
				messageTo (self, "followPlayer", parms, 2, true);
				messageTo (speaker, "finishJabbaQuest", null, 2, true);
				return SCRIPT_OVERRIDE;				
			}
			else if (type == "smuggle" || type == "deliver" )
			{
				if (checkForItem(playerInv, speaker, questNum) == true)
				{
					string reward = "npc_smuggle_" + questNum;
					string_id message = new string_id (CONVO, reward);
					chat.chat (self, message);
					dictionary parms = new dictionary();
					parms.put ("player", speaker);
					messageTo (speaker, "finishJabbaQuest", null, 1, true);
					return SCRIPT_OVERRIDE;				
				}	
				else 
				{
					
					string_id work = new string_id(CONVO, "gotowork");
					chat.chat (self, work);
					return SCRIPT_CONTINUE;	
				}
			}				
			else if (type == "retrieve")
			{
				string reward = "npc_smuggle_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				messageTo (speaker, "finishJabbaQuest", null, 0, true);
				string retrieveObject = dataTableGetString (datatable, questNum, "retrieve_object");
				if (retrieveObject == null)
				{
					retrieveObject = "none";
				}
				if (retrieveObject != "none")
				{
					createObject (retrieveObject, playerInv, "");
				}					
				return SCRIPT_OVERRIDE;				
			
			}
			return SCRIPT_CONTINUE;
		}			
		else
		{
			string_id work = new string_id(CONVO, "otherescort");
			chat.chat (self, work);
			return SCRIPT_CONTINUE;
		}				
	}		
	else
	{
		string_id blah = new string_id (CONVO, "dontknowyou");
		chat.chat (self, blah);
		return SCRIPT_CONTINUE;
	}			
}

trigger OnIncapacitated (obj_id killer)
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	
	if (type == "destroy")
	{
		messageTo (player, "finishJabbaQuest", null, 0, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");	
		if (reward == null)
		{
			reward = "none";
		}
		if (reward != "none")
		{
			obj_id playerInv = utils.getInventoryContainer(player);
			createObject (reward, playerInv, "");
		}
		else 
		{
			string_id badItem = new string_id ("theme_park/messages", "no_item_message");
			string nospawn = getString (badItem);
			sendSystemMessage (self, nospawn, null);
		}
		messageTo (player, "finishJabbaQuest", null, 0, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "escort" || type == "arrest")
	{
		if (questID != null && questID != "")
		{
			int playerQuest = getIntObjVar (player, "theme_park_jabba");
			if (questNum == playerQuest)
			{
				obj_id escortee = getObjIdObjVar (player, questID + ".vip");
				if (escortee == self)
				{
					setObjVar(player, questID + ".failed", 1);
					string_id failed = new string_id ("theme_park/messages", "generic_fail_message");
					string failure = getString (failed);
					sendSystemMessage (self, failure, null);
				}					
			}
		}			
	}
	return SCRIPT_CONTINUE;
}	

messageHandler followPlayer()
{
	obj_id player = params.getObjId ("player");
	setMaster(self, player);
	ai_lib.aiFollow(self, player);
	return SCRIPT_CONTINUE;
}

messageHandler stopFollowing()
{
	string datatable = getStringObjVar (self, "quest_table");
	//datatable = "datatables/theme_park/" + datatable + ".iff";
	int questNum = getIntObjVar (self, "questNum");	
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");	
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	
	debugSpeakMsg (self, "Thanks for bringing me back.");
	obj_id player = params.getObjId ("player");
	ai_lib.aiStopFollowing (self);
	detachScript (player, playerScript);
	messageTo (self, "cleanUp", null, 60, true);
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
	}		
	return SCRIPT_CONTINUE;
}	


messageHandler setupSelf ()
{
	setWantSawAttackTriggers( self, false );
	string datatable = getStringObjVar (self, "quest_table");
	if (datatable == null)
	{
		setObjVar (self, "NO SCRIPT", 1);
		return SCRIPT_OVERRIDE;
	}		
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	
	if (type == "rescue" || type == "smuggle" || type == "deliver" || type == "escort" || type == "arrest" || type == "retrieve")
	{
		attachScript (self, "npc.converse.npc_converse_menu");
	}		
	return SCRIPT_CONTINUE;
}	

messageHandler saySomething()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");		
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");	
		
	string something = "npc_breech_" + questNum;
	string_id message = new string_id (CONVO, something);
	if (message != null)
	{
		if (ai_lib.isNpc(self))
		{
			string messageCheck = getString (message);
			if (messageCheck != null)
			{
				if (messageCheck != "")
				{
					chat.chat (self, message);	
				}					
			}				
		}			
	}		
	
	if (type == "destroy" || type == "fetch")
	{
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}	

messageHandler giveReward()
{
	obj_id player = params.getObjId ("player");
	string datatable = getStringObjVar (player, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string reward = dataTableGetString (datatable, questNum, "reward");
	if (reward == null)
	{
		reward = "none";
	}		
	
	if (reward == "credits")
	{
		money.bankTo(money.ACCT_JABBA, player, 100);		
	}
	else
	{
		if (reward != "none")
		{
			obj_id playerInv = utils.getInventoryContainer(player);
			createObject (reward, playerInv, "");
		}
	}		
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
		messageTo (player, "finishJabbaQuest", null, 0, true);
	}		
	detachScript (player, playerScript);
	return SCRIPT_CONTINUE;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable, questNum, "deliver_object");
	boolean hadIt = false;
	obj_id[] contents = getContents(inv);
	for ( int i = 0; i < contents.length; i++ )
	{
		string itemInInventory = getTemplateName (contents[i]);
		if (itemInInventory == giveMe)
		{
			destroyObject (contents[i]);
			hadIt = true;
		}			
	}
	return hadIt;
}	

messageHandler cleanUp()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}	

trigger OnRemovingFromWorld()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	
	if (!hasObjVar (player, questID + ".done"))
	{
		if (questID != null && questID != "")
		{
			int playerQuest = getIntObjVar (player, "theme_park_jabba");
			if (playerQuest == questNum)
			{
				setObjVar(player, questID + ".failed", 1);
				string_id failed = new string_id ("theme_park/messages", "generic_fail_message");
				string failure = getString (failed);
				sendSystemMessage (self, failure, null);
			}				
		}			
	}		
	
	return SCRIPT_CONTINUE;
}

	