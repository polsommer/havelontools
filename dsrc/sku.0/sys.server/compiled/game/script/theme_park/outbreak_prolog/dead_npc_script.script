include library.ai_lib;
include library.attrib;
include library.create;
include library.factions;
include library.groundquests;
include library.holiday;
include library.utils;

const string MENU_STRING_FILE			= "theme_park/outbreak/outbreak";
const string MENU_OBJ_VAR			= "menu_string";
const string NO_MENU_OBJ_VAR			= "none";
const string KEY_QUEST_INT_OBJVAR		= "quest";
const string SIGNAL_INT_OBJVAR			= "signal";
const string IMPERIAL_KEY_QUEST			= "outbreak_quest_administrative_building_imperial_0";
const string REBEL_KEY_QUEST			= "outbreak_quest_administrative_building_rebel_0";
const string NEUTRAL_KEY_QUEST			= "outbreak_quest_administrative_building_neutral_0";
const string NEUTRAL_SEARCH_QUEST		= "outbreak_quest_facility_02_neutral";
const string IMPERIAL_SEARCH_QUEST		= "outbreak_quest_facility_02_imperial";
const string REBEL_SEARCH_QUEST			= "outbreak_quest_facility_02_rebel";
const string FOUND_KEY_SIGNAL			= "hasFoundKey";
const string OUTBREAK_KEY_SEARCH		= "search_body_outbreak_key";
const string OUTBREAK_VIRUS_SEARCH		= "scientist_body_searched";

const string_id SID_YOU_FIND_NOTHING		= new string_id(MENU_STRING_FILE, "you_find_nothing");
const string_id SID_THIS_NOT_FOR_YOU		= new string_id(MENU_STRING_FILE, "this_isnt_for_you");
const string CREATURE_TABLE 			= "datatables/mob/creatures.iff";

trigger OnAttach()
{
	messageTo(self, "knockDown", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	messageTo(self, "knockDown", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, MENU_OBJ_VAR))
		return SCRIPT_CONTINUE;

	string menuObjVar = getStringObjVar(self, MENU_OBJ_VAR);
	if(menuObjVar == null || menuObjVar.length() <= 0)
		return SCRIPT_CONTINUE;

	//this is the objvar flag for no menu at all
	if(menuObjVar.equals(NO_MENU_OBJ_VAR))
		return SCRIPT_CONTINUE;

	menu_info_data data = mi.getMenuItemByType (menu_info_types.SERVER_MENU2);
	mi.addRootMenu(menu_info_types.SERVER_MENU2, new string_id(MENU_STRING_FILE, menuObjVar));

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, MENU_OBJ_VAR))
		return SCRIPT_CONTINUE;

	if(item != menu_info_types.SERVER_MENU2)
		return SCRIPT_CONTINUE;

	string menuObjVar = getStringObjVar(self, MENU_OBJ_VAR);
	if(menuObjVar == null || menuObjVar.length() <= 0)
		return SCRIPT_CONTINUE;
		
	CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() menuObjVar: "+menuObjVar);
		
	if(menuObjVar.equals("content_biologist_01"))
	{
		if(!groundquests.isTaskActive(player, "quest_03_investigate_biolab", "getDataDisk"))
		{
			sendSystemMessage(player, SID_THIS_NOT_FOR_YOU);		
			return SCRIPT_CONTINUE;
		}
		
		groundquests.sendSignal(player, "playerFoundDataDisk"); 
		return SCRIPT_CONTINUE;		
	}
	else if(menuObjVar.equals(OUTBREAK_KEY_SEARCH))
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Key menu selected by Player: "+player);
	
		int questNumber = getIntObjVar(self, KEY_QUEST_INT_OBJVAR);		
		if(questNumber < 1)
		{
			//DESIGNER ERROR
			CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Quest Integer not found. Designer error for player: "+player);			
			sendSystemMessage(player, SID_YOU_FIND_NOTHING);
			return SCRIPT_CONTINUE;		
		}
		else if(!groundquests.isQuestActive(player, IMPERIAL_KEY_QUEST+questNumber) 
		&& !groundquests.isQuestActive(player, REBEL_KEY_QUEST+questNumber)
		&& !groundquests.isQuestActive(player, NEUTRAL_KEY_QUEST+questNumber))
		{
			//PLAYER DOESNT HAVE QUEST
			CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Quest Integer found: "+questNumber+ ". Player: "+player+" didn't have proper quest.");			
			sendSystemMessage(player, SID_YOU_FIND_NOTHING);
			return SCRIPT_CONTINUE;			
		}

		//PLAYER HAS QUEST
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Quest Integer found: "+questNumber+ ". Player: "+player+" has quest and the quest is being updated with signal to player.");			
		groundquests.sendSignal(player, FOUND_KEY_SIGNAL);
		spawnEnemy(self, player, getLocation(self));
		return SCRIPT_CONTINUE;			

	}
	else if(menuObjVar.equals(OUTBREAK_VIRUS_SEARCH))
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() virus menu selected by Player: "+player);
	
		int signalNumber = getIntObjVar(self, SIGNAL_INT_OBJVAR);		
		if(signalNumber < 1)
		{
			//DESIGNER ERROR
			CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Signal Integer not found. Designer error for player: "+player);			
			sendSystemMessage(player, SID_YOU_FIND_NOTHING);
			return SCRIPT_CONTINUE;		
		}
		else if(!groundquests.isTaskActive(player, NEUTRAL_SEARCH_QUEST, "waitForTasks") 
		&& !groundquests.isTaskActive(player, IMPERIAL_SEARCH_QUEST, "waitForTasks")
		&& !groundquests.isTaskActive(player, REBEL_SEARCH_QUEST, "waitForTasks"))
		{
			//PLAYER DOESNT HAVE QUEST
			CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Quest not found for Player: "+player);			
			sendSystemMessage(player, SID_YOU_FIND_NOTHING);
			return SCRIPT_CONTINUE;			
		}

		//PLAYER HAS QUEST
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.OnObjectMenuSelect() Quest task found for Player: "+player);			
		groundquests.sendSignal(player, OUTBREAK_VIRUS_SEARCH+"_"+signalNumber); 
		return SCRIPT_CONTINUE;			

	}
	sendSystemMessage(player, SID_YOU_FIND_NOTHING);
	
	return SCRIPT_CONTINUE;
}

messageHandler knockDown()
{
	ai_lib.aiSetPosture(self, POSTURE_KNOCKED_DOWN);
	return SCRIPT_CONTINUE;	
}

boolean spawnEnemy(obj_id self, obj_id player, location spawnLoc)
{
	CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy() Initialized!");	
	if(!isValidId(self) || !exists(self))
		return false;
	if(!isValidId(player) || !exists(player))
		return false;
	if(spawnLoc == null)
		return false;
	
	//VERIFY VARS ON OBJECT
	if(!hasObjVar(self, "creature_type"))
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy() No creature name var on object: "+self);
		return false;	
	}
	
	string creatureName = getStringObjVar(self,"creature_type");
	if(creatureName == null || creatureName.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy() Creature var INVALID on object: "+self);
		return false;	
	}

	int spawnCount = 1;
	if(hasObjVar(self, "spawnCount"))
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy() creature spawn count var is overwriting default value of 1");
		spawnCount = getIntObjVar(self,"spawnCount");		
		return false;	
	}
	
	int combatLevel = getLevel(player);
	if(combatLevel < 0 || combatLevel > 90)
	{
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy()  Player "+player+" has a level that is invalid. Player level is: "+combatLevel+". Aborting the camp defense.");
		return false;	
	}

	for(int i = 0; i < spawnCount; i++)
	{

		//CREATE THE MOB
		obj_id mob = create.object(creatureName + "_undead", spawnLoc);
		if(!isValidId(mob) || !exists(mob))
		{
			CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy()  Mob: "+mob+" could not be created!");
			return false;
		}

		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy()  Mob level is set to match player level");		

		//If you are initializing a creature, you NEED this objvar
		setObjVar(mob, create.INITIALIZE_CREATURE_DO_NOT_SCALE_OBJVAR, 1);	

		dictionary creatureDict = utils.dataTableGetRow(CREATURE_TABLE, creatureName);
		if(creatureDict != null)
		{
			create.initializeCreature (mob, creatureName, creatureDict, combatLevel);
		}
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy()  Mob level is set to match player level.");

		setInvulnerable(mob, false);
		clearCondition(mob, CONDITION_CONVERSABLE);
		setMovementRun(mob);
		setBaseRunSpeed(mob, (getBaseRunSpeed(self)-8));			
		setAttributeAttained(mob, attrib.OUTBREAK_AFFLICTED);
		setObjVar(mob, "owner", player);

		attachScript(mob, "theme_park.outbreak.dynamic_enemy");
		startCombat(mob, player);
		CustomerServiceLog("outbreak_themepark", "dead_npc_script.spawnEnemy()  the NPC is attacking player: "+player);
	}
	
	return true;
}
