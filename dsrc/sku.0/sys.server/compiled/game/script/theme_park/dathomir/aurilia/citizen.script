include library.ai_lib;
include library.badge;
include library.chat;
include library.prose;
include library.utils;

const string SOCIAL_VOLUME = "npc_socialization";
const float SOCIAL_RANGE = 8f;

const int NUM_UTTERANCE_OPTIONS = 15;

trigger OnAttach()
{
	messageTo(self, "initializeSocialVolume", null, 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler initializeSocialVolume()
{
	if ( isInvulnerable(self) )
	{
		if ( hasScript(self, "ai.ai") )
			detachScript(self, "ai.ai");

		if ( hasScript(self, "ai.creature_combat") )
			detachScript(self, "ai.creature_combat");

		if ( hasScript(self, "systems.combat.combat_actions") )
			detachScript(self, "systems.combat.combat_actions");
	}

	createTriggerVolume(SOCIAL_VOLUME, SOCIAL_RANGE, true);

	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( !isMob(breacher) || breacher == self )
	{
		return SCRIPT_CONTINUE;
	}


	if ( volumeName == SOCIAL_VOLUME )
	{
		if ( isPlayer(breacher) )
		{
			npcUtterance(self, breacher);
		}
	}

	return SCRIPT_CONTINUE;
}

void npcUtterance(obj_id npc, obj_id player)
{	
	if ( ai_lib.isInCombat(npc) )
	{
		return;
	}
	
	if ( isGod(player) )
	{
		return;
	}
	
	if ( utils.hasScriptVar( npc, "recentAuriliaUtterance") )
	{
		if ( getGameTime() < utils.getIntScriptVar( npc, "recentAuriliaUtterance"))
		{
			return;
		}
	}
	
	if ( utils.hasScriptVar( player, "recentlyUtteredTo") )
	{
		if ( getGameTime() < utils.getIntScriptVar( npc, "recentlyUtteredTo"))
		{
			return;
		}
	}

	utils.setScriptVar(npc, "recentAuriliaUtterance", getGameTime()+rand(29,42));
	utils.setScriptVar(player, "recentlyUtteredTo", getGameTime()+rand(19,33));

	int chance = rand(0,10);
	if ( hasObjVar(npc, "alwaysUtter") )
		chance = 10;
	
	if ( chance < 9 )
		return;
	
	string[] utteranceTypes = { "normal", "normal", "normal" };
	
	// Are they an elder jedi?
	if ( badge.hasBadge (player, "bdg_jedi_elder") )
	{
		if ( rand(1,2) == 1 )
		{
			utteranceTypes[1] = "elder_jedi";
		}
	}
	
	// Have they completed a heroic instance?
	string heroicUtterance = chooseHeroicString(player);
	if ( heroicUtterance != null && heroicUtterance.length() > 0 )
	{
		utteranceTypes[2] = heroicUtterance;
	}
	
	// pick a random utterance from the array of choices we've built
	int pickAnUtterance = rand(0, (utteranceTypes.length-1));
	int index = rand(1,NUM_UTTERANCE_OPTIONS);
	string utterance = utteranceTypes[pickAnUtterance]+"_"+index;

	string_id message = new string_id ("utterance/aurilia", utterance);
	prose_package pp = prose.getPackage(message, player, player);
	prose.setTO(pp, getName(player));
	prose.setTT(pp, getGenderString(player));
	
	chat.chat(npc, player, pp);
	
	// Village Militia will salute if not patrolling for non-normal utterances
	string npcType = getCreatureName(npc);
	string animationType = "salute" + rand(1,2);
	
	if ( !utterance.startsWith("normal") && npcType.equals("fs_villager_militia") && !utils.hasScriptVar(npc, "patrolPoints") )
	{
		doAnimationAction (npc, animationType);
	}
	return;
}

string chooseHeroicString(obj_id player)
{
	string heroicChoice = "";
	resizeable string[] heroicChoices = new string[];
	
	if ( getCollectionSlotValue(player, "heroic_axkva_min_01") > 0 )
	{
		heroicChoices = utils.addElement(heroicChoices, "heroic_axkva");
	}
	
	if ( getCollectionSlotValue(player, "heroic_tusken_king_01") > 0 )
	{
		heroicChoices = utils.addElement(heroicChoices, "heroic_tusken");
	}
		
	if ( getCollectionSlotValue(player, "heroic_ig88_01") > 0 )
	{
		heroicChoices = utils.addElement(heroicChoices, "heroic_ig88");
	}
		
	if ( heroicChoices != null && heroicChoices.length > 0 )
	{
		int pickOne = rand(0, (heroicChoices.length-1));
		heroicChoice = heroicChoices[pickOne];
	}
	
	return heroicChoice;
}

string getGenderString(obj_id player)
{
	string genderString = "it";
	int gender = getGender(player);
	switch ( gender )
	{
		case GENDER_FEMALE:
			genderString = "she";
			break;
		case GENDER_MALE:
		default:
			genderString = "he";
			break;
	}
	return genderString;
}

/*
void initiateNpcConverse(obj_id self, obj_id listener)
{
	obj_id talker = self;
	
	if ( !hasScript(listener, "theme_park.dathomir.aurilia.citizen") )
	{
		return;
	}
	
	if (getAnimationMood(talker).equals("npc_sitting_chair") || getAnimationMood(listener).equals("npc_sitting_chair") )
	{
		return;
	}
	
	if ( hasObjVar( talker, "ai.speaking") || hasObjVar( listener, "ai.speaking" ))
		return;
		
	int chance = rand(0,100);
	if ( hasObjVar(talker, "alwaysConverse") )
		chance = 100;
	
	if ( chance < 0 )
	{
		return;
	}
	
	chat.chat(self, "I ("+talker+") am initializing utterance with listener "+listener+"!!");
	
	if ( !hasObjVar( talker, "ai.speaking") )
		setObjVar( talker, "ai.speaking", listener );
	
	if ( !hasObjVar( listener, "ai.speaking") )
		setObjVar( listener, "ai.speaking", talker );

	if ( utils.hasScriptVar(listener, "patrolPoints") )
	{
		suspendMovement(listener);
	}
	
	if ( utils.hasScriptVar(talker, "patrolPoints") )
	{
		suspendMovement(talker);
	}

	faceTo( listener, talker );
	
	utils.setScriptVar( talker, "ai.initializedConversation", listener );
	location pathToLoc = new location( getLocation( listener ) );
	location myLoc = getLocation( talker );
	if ( pathToLoc.x < myLoc.x )
		pathToLoc.x += 1.5f;
	else
		pathToLoc.x -= 1.5f;

	if ( pathToLoc.z < myLoc.z )
		pathToLoc.z += 1.5f;
	else
		pathToLoc.z -= 1.5f;
	pathTo( talker, pathToLoc );
}

trigger OnMovePathComplete()
{
	if ( !utils.hasScriptVar( self, "ai.initializedConversation"))
		return SCRIPT_CONTINUE;

	obj_id listener = utils.getObjIdScriptVar( self, "ai.initializedConversation");
	if ( exists(listener) )
	{
		faceTo(self, listener);
		faceTo(listener, self );

		ai_lib.greet(self, listener);

		ai_lib.doAction(self, "conversation_"+getGender(self));
		ai_lib.doAction(listener, "conversation_"+getGender(listener));
	}
	messageTo( self, "handleEndSocializing", null, CONVO_LENGTH, isObjectPersisted( self ) );
	return SCRIPT_CONTINUE;
}

messageHandler handleEndSocializing()
{
	if ( !utils.hasScriptVar( self, "ai.initializedConversation"))
		return SCRIPT_CONTINUE;

	obj_id listener = utils.getObjIdScriptVar( self, "ai.initializedConversation");
	endSocializing( self, listener );
	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{
	if ( !utils.hasScriptVar( self, "ai.initializedConversation"))
		return SCRIPT_CONTINUE;

	obj_id listener = utils.getObjIdScriptVar( self, "ai.initializedConversation");
	endSocializing( self, listener );
	return SCRIPT_CONTINUE;
}

void endSocializing(obj_id talker, obj_id listener)
{
	ai_lib.dismiss(talker, listener);
	ai_lib.doAction(listener, "wave"+rand(1,2));
	
	messageTo(talker, "resumeAuriliaCitizenMovement", null, 1, false);
	messageTo(listener, "resumeAuriliaCitizenMovement", null, 1, false);

	utils.removeScriptVar(talker, "ai.initializedConversation");
	removeObjVar(talker, "ai.speaking");
	removeObjVar(listener, "ai.speaking");
}

messageHandler resumeAuriliaCitizenMovement()
{
	if ( hasSuspendedMovement(self) )
	{
		resumeMovement(self);
	}
	else
	{
		int behavior = getIntObjVar(self, "ai.defaultCalmBehavior");
		ai_lib.setDefaultCalmBehavior(self, behavior);
	}
	return SCRIPT_CONTINUE;
}
*/
