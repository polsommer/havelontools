//This script is used in conjunction with quest.task.ground.retrieve_item.

//This script is attached to the object from which you wish to retrieve items.  It adds a radial menu item that sends a messageto
//to the player that quest.task.ground.retrieve_item will pick up and handle appropriately.

// ---------------------------------------------------------------------

include library.groundquests;
include library.sui;
include library.stealth;
include library.utils;


const string FIGURINE_QUEST_NAME = "rohak_token_box";

// ---------------------------------------------------------------------

trigger OnAttach()
{
	if ( isMob(self)  )
	{
		setCondition (self, CONDITION_CONVERSABLE);
	}
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( isMob(self)  )
	{
		setCondition (self, CONDITION_CONVERSABLE);
	}
	return SCRIPT_CONTINUE;
}



trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;
		
	int menu = 0;
	if ( isMob(self) )
	{
		menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, null);
	}
	else
	{
		menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, new string_id("ui_radial", "item_use"));
	}

	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if ( !hasObjVar(self, "figurineTask") )
		{
			return SCRIPT_CONTINUE;
		}
		
		string figurineTask = getStringObjVar(self, "figurineTask");
		
		if(groundquests.isTaskActive(player, FIGURINE_QUEST_NAME, figurineTask))
		{
			String menuText = groundquests.getRetrieveMenuText(player, self);
			string_id menuStringId = utils.unpackString(menuText);

			if ( isMob(self)  )
			{
				menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, menuStringId);
			}
			else
			{
				menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, menuStringId);
			}
		}
	}

	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);

	if ( menuInfoData != null )
	{
 		menuInfoData.setServerNotify(true);
 	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if( item == menu_info_types.ITEM_USE || item == menu_info_types.CONVERSE_START )
	{
		if(hasScript(player, "quest.task.ground.retrieve_item"))
		{
			string figurineTask = getStringObjVar(self, "figurineTask");

			if( groundquests.isTaskActive(player, FIGURINE_QUEST_NAME, figurineTask) )
			{
				sendRetrieveObjectFoundMessage(self, player);
				return SCRIPT_CONTINUE;
			}
			else
			{
				if( groundquests.hasCompletedTask(player, FIGURINE_QUEST_NAME, figurineTask) )
				{
					doAnimationAction (self, "thank");
					sendSystemMessage(player, new string_id("nexus", "figurine_already_used"));
					return SCRIPT_CONTINUE;
				}
			}
		}
	}
	
	doAnimationAction (self, "pose_proudly");
	string_id msg = new string_id("nexus", "figurine_dont_need");

	sendSystemMessage(player, msg);
	return SCRIPT_CONTINUE;
}

void sendRetrieveObjectFoundMessage(obj_id self, obj_id player)
{
	dictionary webster = new dictionary();
	webster.put("source", self);
	messageTo(player, "questRetrieveItemObjectFound", webster, 0, false);
	
	doAnimationAction (player, "bow");
	doAnimationAction (self, "celebrate");
	sendSystemMessage(player, new string_id("nexus", "figurine_used"));

	if(hasObjVar(self, "questRetrieveSignal"))
	{
		string questRetrieveSignal = getStringObjVar(self, "questRetrieveSignal");

		if(questRetrieveSignal != null && questRetrieveSignal.length() > 0)
		{
			groundquests.sendSignal(player, questRetrieveSignal);
		}
	}
	
	if ( hasObjVar(self, "questFlavorObject") )
	{
		messageTo(self, "handleQuestFlavorObject", null, 0, false);
	}
	
	return;
}

trigger OnDestroy()
{
	if( utils.hasScriptVar(self, "spawner") )
	{
		obj_id spawner = utils.getObjIdScriptVar(self, "spawner");
		if ( isIdValid(spawner) )
		{
			messageTo(spawner, "figurineDestroyed", null, 1, false);
		}
	}
	return SCRIPT_CONTINUE;
}
