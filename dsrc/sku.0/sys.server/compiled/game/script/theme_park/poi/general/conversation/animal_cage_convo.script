include library.utils;
include library.chat;

const string CONVO = "npc_reaction/animal_cage";
const string STF_FILE = "npc_reaction/animal_cage";

trigger OnAttach ()
{
	attachScript (self, "npc.converse.npc_converse_menu");
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	attachScript (self, "npc.converse.npc_converse_menu");
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	if ( hasObjVar(speaker, "squillKilled"))
	{
		removeObjVar (speaker, "squillKilled");
		removeObjVar (speaker, "squill");
		chat.chat (self, new string_id(STF_FILE, "animal_cage"));
		obj_id inv = utils.getInventoryContainer(speaker);
		obj_id med = createObject ("object/tangible/medicine/medpack_damage.iff", inv, "");
		return SCRIPT_CONTINUE;
	}
	if ( hasObjVar(self, "scientist"))
	{
		string_id greeting = new string_id (CONVO, "scientist_1");
		string_id response[] = new string_id [2];
		response[0] = new string_id (CONVO, "player_1");
		response[1] = new string_id (CONVO, "player_2");
		npcStartConversation (speaker, self, CONVO, greeting, response);
		return SCRIPT_CONTINUE;
	}
	else
	{
		string_id greeting = new string_id (CONVO, "npc_1");
		string_id response[] = new string_id [1];
		response[0] = new string_id (CONVO, "player_3");
		npcStartConversation (speaker, self, CONVO, greeting, response);
		return SCRIPT_CONTINUE;

	}
}


trigger OnNpcConversationResponse (string convoName, obj_id player, string_id response)
{
	if ( convoName != CONVO )
	{
		return SCRIPT_CONTINUE;
	}

 	if (( response.getAsciiId().equals("player_1")))       //
  	{
    	string_id message = new string_id (CONVO, "squill"); //I had a dangerous animal...
		npcSpeak(player, message);
		string_id responses[] = new string_id [2];
		responses[0] = new string_id (CONVO, "player_3");
		responses[1] = new string_id (CONVO, "player_4");
		npcSetConversationResponses (player, responses);
		return SCRIPT_CONTINUE;
  	}

	if (( response.getAsciiId().equals("player_2")))       //
  	{
    	string_id message = new string_id (CONVO, "scientist_2");
		npcSpeak(player, message);
		npcEndConversation(player);
		return SCRIPT_CONTINUE;
  	}

	if (( response.getAsciiId().equals("player_3")))       //
  	{
    	string_id message = new string_id (CONVO, "scientist_3");
		npcSpeak(player, message);
		string_id responses[] = new string_id [2];
		responses[0] = new string_id (CONVO, "player_2");
		responses[1] = new string_id (CONVO, "player_4");
		npcSetConversationResponses (player, responses);
		return SCRIPT_CONTINUE;
  	}

  	if (( response.getAsciiId().equals("player_4")))       //
	  	{
	    	string_id message = new string_id (CONVO, "scientist_4");
			npcSpeak(player, message);
			string_id responses[] = new string_id [2];
			responses[0] = new string_id (CONVO, "player_2");
			responses[1] = new string_id (CONVO, "player_5");
			npcSetConversationResponses (player, responses);
			return SCRIPT_CONTINUE;
  	}
  	if (( response.getAsciiId().equals("player_5")))       //
	  	{
	    	string_id message = new string_id (CONVO, "scientist_6");
			npcSpeak(player, message);
			npcEndConversation(player);
			attachScript (player, "theme_park.poi.general.special.spawn_squill");
			return SCRIPT_CONTINUE;
  	}

	return SCRIPT_CONTINUE;
}



