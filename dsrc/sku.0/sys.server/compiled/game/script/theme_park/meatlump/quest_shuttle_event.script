include library.ai_lib;
include library.create;
include library.groundquests;

const boolean LOGGING_ON		= false; 
const string SMUGGLER_MOB 		= "mtp_hideout_quest_smuggler";
const string MEATLUMP_LOG		= "meatlump_weapons_delivery";
const string OWNER_OBJVAR		= "meatlump.owner";
const string SMUGGLER_OBJVAR		= "meatlump.smuggler";
const string SHUTTLE_OBJVAR		= "meatlump.shuttle";

const string QUEST_TASK			= "speakSmuggler";
const string QUEST_NAME			= "quest/mtp_hideout_retrieve_delivery";

messageHandler startLandingSequence()
{
	blog("startLandingSequence init ");

	obj_id owner = getObjIdObjVar(self, OWNER_OBJVAR);
	if(!isValidId(owner) || !exists(owner))
		return SCRIPT_CONTINUE;
	
	queueCommand(self, ##"prone", self, "", COMMAND_PRIORITY_FRONT);
	setPosture(self, POSTURE_PRONE);


	messageTo(self, "landed", null, 6.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler landed()
{
	blog("landed init");

	obj_id owner = getObjIdObjVar(self, OWNER_OBJVAR);
	if(!isValidId(owner) || !exists(owner))
		return SCRIPT_CONTINUE;
	
	messageTo(self, "spawnSmuggler", null, 25.0f, false);
	messageTo(self, "startTakeOffSequence", null, 160.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler startTakeOffSequence()
{
	blog("startTakeOffSequence init");

	obj_id owner = getObjIdObjVar(self, OWNER_OBJVAR);
	if(!isValidId(owner) || !exists(owner))
		return SCRIPT_CONTINUE;

	obj_id smuggler = getObjIdObjVar(self, SMUGGLER_OBJVAR);
	if(isValidId(smuggler) && exists(smuggler))
	{	
		npcEndConversation(owner);
		blog("startTakeOffSequence FOUND SMUGGLER. DESTROYING SMUGGLER");
		destroyObject(smuggler);
	}

	blog("startTakeOffSequence Sending signal if player has task");

	//If the player has the task, go ahead and give it to them to avoid a gate	
	if(groundquests.isTaskActive(owner, QUEST_NAME, QUEST_TASK))
		groundquests.sendSignal(owner, "smugglerSpoken");
			
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	setPosture(self, POSTURE_UPRIGHT);

	messageTo(self, "cleanUp", null, 20.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	blog("cleanUp init");

	destroyObject(self);

	return SCRIPT_CONTINUE;
}

messageHandler spawnSmuggler()
{
	blog("spawnSmuggler init");

	obj_id owner = getObjIdObjVar(self, OWNER_OBJVAR);
	if(!isValidId(owner) || !exists(owner))
		return SCRIPT_CONTINUE;

	location loc = getLocation(self);
	float treasureXdelta = -9f;
	float treasureZdelta = 6f;

	location landingLoc = loc;
	landingLoc.x += treasureXdelta;
	landingLoc.z += treasureZdelta;	

	landingLoc.y = getHeightAtLocation(landingLoc.x, landingLoc.z);

	obj_id smuggler = create.object(SMUGGLER_MOB, landingLoc, false);
	if(!isValidId(smuggler) || !exists(smuggler))
	{
		blog("spawnSmuggler failed to spawn smuggler");
		return SCRIPT_CONTINUE;
	}
	ai_lib.setDefaultCalmBehavior(smuggler, ai_lib.BEHAVIOR_SENTINEL);
	setObjVar(smuggler, OWNER_OBJVAR, owner);
	setObjVar(smuggler, SHUTTLE_OBJVAR, self);
	setObjVar(self, SMUGGLER_OBJVAR, smuggler);
	blog("spawnSmuggler smuggler spawned");
	
	return SCRIPT_CONTINUE;
}

boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(MEATLUMP_LOG,msg);
	return true;
}
