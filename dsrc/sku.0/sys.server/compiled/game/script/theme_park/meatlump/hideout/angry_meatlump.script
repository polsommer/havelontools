include library.ai_lib;
include library.anims;
include library.buff;
include library.chat;
include library.groundquests;
include library.prose;
include library.utils;

const string ANGRY_MEATLUMP_DATATABLE	= "datatables/theme_park/meatlump/angry_meatlump.iff";
const string EMOTES_COLUMN				= "requiredEmote";
const string HINTS_COLUMN				= "hintString";
const string STF						= "theme_park/corellia/quest";

const string REQUIRED_EMOTE_OBJVAR		= "angryMeatlump.requiredEmote";
const string HIDEOUT_ID_OBJVAR			= "angryMeatlump.hideout";

const string[] NEGATIVE_EMOTES			= { "dismiss", "mock", "refuse_offer_affection", "rude", "shoo" };
											

// ----------------------------------------------------------------------------------

trigger OnAttach()
{
	setAngryMealumpRequiredEmote(self);
	return SCRIPT_CONTINUE;
}

trigger OnSawEmote(obj_id emoteSayer, string emoteSeen)
{
	if ( !isPlayer(emoteSayer) || ai_lib.isInCombat(emoteSayer) || isIncapacitated(emoteSayer) || isDead(emoteSayer) )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( !groundquests.isQuestActive(emoteSayer, "mtp_angry_meatlumps") )
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id emoteTarget = getIntendedTarget(emoteSayer);
	if( !isIdValid(emoteTarget) )
	{
		return SCRIPT_CONTINUE;
	}

	if ( emoteTarget == self )
	{
		//debugSpeakMsg(self, "I was emoted to!");
		
		if ( !hasObjVar(self, REQUIRED_EMOTE_OBJVAR) )
		{
			setAngryMealumpRequiredEmote(self);
		}
		
		string requiredEmote = getStringObjVar(self, REQUIRED_EMOTE_OBJVAR);
		faceTo(self, emoteSayer);
		if ( emoteSeen.equals(requiredEmote) )
		{
			doAnimationAction(self, "celebrate");
			becomeHappyMeatlump(self, emoteSayer);
		}
		else
		{
			doAnimationAction(self, NEGATIVE_EMOTES[rand(0,NEGATIVE_EMOTES.length-1)]);
			
			if ( !utils.hasScriptVar(emoteSayer, "angryMeatlumpHint_"+self) )
			{
				int row = dataTableSearchColumnForString(requiredEmote, EMOTES_COLUMN, ANGRY_MEATLUMP_DATATABLE);
				if ( row > -1 )
				{
					string hintString = dataTableGetString(ANGRY_MEATLUMP_DATATABLE, row, HINTS_COLUMN);
					if ( hintString != null && hintString.length() > 0 )
					{
						string_id hintMsg = new string_id (STF, hintString);
						prose_package pp = prose.getPackage(hintMsg, emoteSayer, emoteSayer);
						string pronounTO = getGender(self) == GENDER_MALE ? "he" : "she";
						string pronounTT = getGender(self) == GENDER_MALE ? "his" : "her";
						prose.setTO(pp, pronounTO);
						prose.setTT(pp, pronounTT);
						chat.chat(emoteSayer, emoteSayer, chat.CHAT_EMOTE, null, pp);
						
						utils.setScriptVar(emoteSayer, "angryMeatlumpHint_"+self, true);
					}
				}
			}
			else
			{
				utils.removeScriptVar(emoteSayer, "angryMeatlumpHint_"+self);
			}
		}
	}
	
	return SCRIPT_CONTINUE;
}

void setAngryMealumpRequiredEmote(obj_id self)
{
	string[] listOfEmotes = dataTableGetStringColumn(ANGRY_MEATLUMP_DATATABLE, EMOTES_COLUMN);
	string requiredEmote = listOfEmotes[rand(0,listOfEmotes.length-1)];
	setObjVar(self, REQUIRED_EMOTE_OBJVAR, requiredEmote);
	return;
}

void becomeHappyMeatlump(obj_id self, obj_id player)
{
	dictionary webster = new dictionary();
	string creatureName = "mtp_angry_meatlump";
	string socialGroup = "angry_meatlump";
	webster.put("creatureName", creatureName);
	webster.put("location", getLocation(player));
	webster.put("socialGroup", socialGroup);
	messageTo(player, "receiveCreditForKill", webster, 0.0f, false);
	
	obj_id hideout = getObjIdObjVar(self, HIDEOUT_ID_OBJVAR);
	if ( isIdValid(hideout) )
	{
		webster.put("happyMeatlump", self);
		messageTo(hideout, "makeNewAngryMeatlump", webster, 5, false);
	}
	
	buff.applyBuff(self, "mtp_meatlump_happy");
	return;
}

trigger OnIncapacitated(obj_id objAttacker)
{
	obj_id hideout = getObjIdObjVar(self, HIDEOUT_ID_OBJVAR);
	if ( isIdValid(hideout) )
	{
		dictionary webster = new dictionary();
		webster.put("happyMeatlump", self);
		messageTo(hideout, "makeNewAngryMeatlump", webster, 1, false);
	}
	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	obj_id hideout = getObjIdObjVar(self, HIDEOUT_ID_OBJVAR);
	if ( isIdValid(hideout) )
	{
		dictionary webster = new dictionary();
		webster.put("happyMeatlump", self);
		messageTo(hideout, "makeNewAngryMeatlump", webster, 1, false);
	}
	return SCRIPT_CONTINUE;
}
