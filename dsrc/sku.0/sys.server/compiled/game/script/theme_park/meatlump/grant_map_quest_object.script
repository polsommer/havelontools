
include library.groundquests;
include library.sui;


const string_id	RADIAL_INSPECT  		= new string_id ("quest/ground/util/quest_giver_object", "radial_inspect");
const string_id OFFER_QUEST_MSG			= new string_id	("quest/ground/util/quest_giver_object", "offer_quest");
const string_id SUI_TITLE			= new string_id ("quest/ground/util/quest_giver_object", "sui_title");
const string_id MUST_DISMOUNT			= new string_id ("quest/ground/util/quest_giver_object", "must_dismount");
const string_id NOT_WHILE_INCAPPED		= new string_id ("quest/ground/util/quest_giver_object", "not_while_incapped");
const string_id YOU_ALREADY_HAVE_QUEST		= new string_id ("quest/ground/util/quest_giver_object", "you_already_have_quest");
const string_id SID_NOT_WHILE_IN_COMBAT		= new string_id("base_player", "not_while_in_combat");

const string PID_NAME 				= "map_quest_pid";
const string OBJECT_OBJVAR			= "quest_string";

//checks to make sure the template of the object is in the datatable and checks the validity of the quest before changing USE to Inspect
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{	
	int menuOption = mi.addRootMenu (menu_info_types.ITEM_USE, RADIAL_INSPECT);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;
	else if(!hasObjVar(self, OBJECT_OBJVAR))
		return SCRIPT_CONTINUE;

	if(item == menu_info_types.ITEM_USE)
	{
		if(getState(player, STATE_COMBAT) > 0)
		{
			sendSystemMessage(player, SID_NOT_WHILE_IN_COMBAT);
			return SCRIPT_CONTINUE;
		}
		else if(getState(player, STATE_RIDING_MOUNT) == 1)
		{
			sendSystemMessage(player, MUST_DISMOUNT);
			return SCRIPT_CONTINUE;
		}
		else if(isDead(player) || isIncapacitated(player))
		{
			sendSystemMessage(player, NOT_WHILE_INCAPPED);
			return SCRIPT_CONTINUE;
		}
		
		//validate the quest string.
		string questString = getStringObjVar(self, OBJECT_OBJVAR);
		if(questString == null || questString.equals(""))
			return SCRIPT_CONTINUE;

		if(groundquests.isQuestActiveOrComplete(player, questString))
		{
			//you have already looked at this object
			sendSystemMessage(player, YOU_ALREADY_HAVE_QUEST);
			return SCRIPT_CONTINUE;
		}
		
		int pid = sui.msgbox(self, player, "@" + OFFER_QUEST_MSG, sui.YES_NO, "@" + SUI_TITLE, "handlerGetQuest");
		sui.setPid(player, pid, PID_NAME);
	}
	return SCRIPT_CONTINUE;
}

/************************************************************/

messageHandler handlerGetQuest() 
{
	int btn = sui.getIntButtonPressed(params);
	
	obj_id player = sui.getPlayerId(params);
	if(btn == sui.BP_CANCEL)
	{
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}
	if(!sui.hasPid(player, PID_NAME))
	{
		return SCRIPT_CONTINUE;
	}
	if(btn == sui.BP_OK)
	{
		//validate the quest string.
		string questString = getStringObjVar(self, OBJECT_OBJVAR);
		if(questString == null || questString.equals(""))
			return SCRIPT_CONTINUE;
		
		//make sure to check again to make sure the player doesn't have quest
		if(groundquests.hasCompletedQuest(player, questString) || groundquests.isQuestActive(player, questString))
		{
			//you have already looked at this object
			sendSystemMessage(player, YOU_ALREADY_HAVE_QUEST);
			return SCRIPT_CONTINUE;
		}
		
		groundquests.grantQuest(player, questString);		
		sui.removePid(player, PID_NAME);
	}
	return SCRIPT_CONTINUE;
}