//------------------------------------------------
// Includes
//------------------------------------------------
include library.chat;
include library.create;
include library.trial;
include library.utils;

//------------------------------------------------
// CONSTANTS
//------------------------------------------------

const string OWNER_SCRIPTVAR			= "waveEventPlayer";

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// Set a destroy callback to 10 minutes.
	messageTo(self, "cleanUpGuard", null, 210, true);

	// Attack!
	messageTo(self, "attackPlayer", null, 1, false);

	// Remove default convo.
	detachScript(self, "npc.converse.npc_convo");
	detachScript(self, "npc.converse.npc_converse_menu");

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitateTarget(obj_id victim)
{
	obj_id player = utils.getObjIdScriptVar(self, OWNER_SCRIPTVAR);
	if(!isValidId(player) || !exists(player))
	{
		messageTo(self, "cleanUpGuard", null, 0, true);
		return SCRIPT_CONTINUE;
	}

 	messageTo(self, "cleanUpGuard", null, 2, true);
 	return SCRIPT_CONTINUE;
}


//------------------------------------------------
// cleanUpGuard
//------------------------------------------------

messageHandler cleanUpGuard()
{
	// Clean us up.
	obj_id parent = trial.getParent(self);
	dictionary webster = trial.getSessionDict(parent);
	messageTo(parent, "defaultEventReset", webster, 0, false);
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// MESSAGE HANDLERS
//------------------------------------------------

messageHandler attackPlayer()
{
	// Get player ref.
	obj_id player = utils.getObjIdScriptVar(self, OWNER_SCRIPTVAR);
	if(!isValidId(player) || !exists(player))
		return SCRIPT_CONTINUE;
		
	startCombat(self, player);
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// barkAttack
//------------------------------------------------
/*
messageHandler barkAttack()
{
	chat.chat(self, chat.CHAT_SHOUT, chat.MOOD_ANGRY, new string_id("meatlump/meatlump", "bark_ragtag"));
	return SCRIPT_CONTINUE;
}
*/