include library.ai_lib;
include library.anims;
include library.buff;
include library.chat;
include library.groundquests;
include library.prose;
include library.static_item;
include library.utils;

const string MEATLUMP_KING_DATATABLE	= "datatables/theme_park/meatlump/meatlump_king.iff";
const string OFFERING_COLUMN			= "offering";
const string REACTION_TYPE_COLUMN		= "reactionType";
const string REACTION_COLUMN			= "reaction";

// reaction types
const int EMOTE			= 0;
const int CHAT			= 1;
const int GIVE			= 2;
const int SPECIAL		= 3;


trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnSawEmote(obj_id emoteSayer, string emoteSeen)
{
	if ( !isPlayer(emoteSayer) || ai_lib.isInCombat(emoteSayer) || isIncapacitated(emoteSayer) || isDead(emoteSayer) )
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id emoteTarget = getIntendedTarget(emoteSayer);
	if( !isIdValid(emoteTarget) )
	{
		return SCRIPT_CONTINUE;
	}

	if ( emoteTarget == self )
	{
		int row = dataTableSearchColumnForString(emoteSeen, OFFERING_COLUMN, MEATLUMP_KING_DATATABLE);
		if ( row > -1 )
		{
			determineKingReaction(self, emoteSayer, row);
		}
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnGiveItem (obj_id item, obj_id giver)
{
	if ( !isPlayer(giver) || ai_lib.isInCombat(giver) || isIncapacitated(giver) || isDead(giver) )
	{
		return SCRIPT_CONTINUE;
	}
	
	string itemName = getTemplateName (item);
	if(static_item.isStaticItem(item))
	{
		itemName = getStaticItemName(item);
	}
	
	int row = dataTableSearchColumnForString(itemName, OFFERING_COLUMN, MEATLUMP_KING_DATATABLE);
	if ( row > -1)
	{
		determineKingReaction(self, giver, row);
		decrementCount(item);
	}
	
	return SCRIPT_CONTINUE;
}

void determineKingReaction(obj_id self, obj_id player, int row)
{
	int reactionType = dataTableGetInt(MEATLUMP_KING_DATATABLE, row, REACTION_TYPE_COLUMN);
	string reaction = dataTableGetString(MEATLUMP_KING_DATATABLE, row, REACTION_COLUMN);

	processKingReaction(self, player, reactionType, reaction);

	boolean moreReactions = true;
	int index = 2;
	while ( moreReactions )
	{
		int nextReactionType = dataTableGetInt(MEATLUMP_KING_DATATABLE, row, REACTION_TYPE_COLUMN+"_"+index);
		string nextReaction = dataTableGetString(MEATLUMP_KING_DATATABLE, row, REACTION_COLUMN+"_"+index);
		if ( nextReaction == null || nextReaction.length() < 1 )
		{
			moreReactions = false;
		}
		else
		{
			processKingReaction(self, player, nextReactionType, nextReaction);
			index = index + 1;
		}
	}
	return;
}

void processKingReaction(obj_id self, obj_id player, int reactionType, string reaction)
{
	faceTo(self, player);
	switch ( reactionType )
	{
		case EMOTE:
			doAnimationAction(self, reaction);
			break;
		case CHAT:
			//chat. publicChat(self, player, new string_id("theme_park/corellia/quest", reaction));
			
			prose_package pp = prose.getPackage(new string_id("theme_park/corellia/quest", reaction), player, player);
			//string pronounTO = getGender(player) == GENDER_MALE ? "he" : "she";
			string pronounTT = getGender(player) == GENDER_MALE ? "boy" : "girl";
			//prose.setTO(pp, pronounTO);
			prose.setTT(pp, pronounTT);
			chat.chat(self, player, chat.CHAT_SAY, null, pp);
			break;
		case GIVE:
			string[] items = split(reaction, ':');
			string itemToGive = items[rand(0,items.length-1)];
			if ( itemToGive != null && itemToGive.length() > 0 )
			{
				obj_id inv = getObjectInSlot(player, "inventory");
				if ( isIdValid(inv) )
				{
					obj_id givenItem = static_item.createNewItemFunction(itemToGive, inv);
					groundquests.sendPlacedInInventorySystemMessage(player, givenItem, reaction);
				}
			}
			break;
		case SPECIAL:
			
			break;
	}
	
	return;
}
