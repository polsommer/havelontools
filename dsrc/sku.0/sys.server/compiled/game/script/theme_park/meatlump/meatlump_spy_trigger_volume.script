include library.create;
include library.groundquests;
include library.stealth;
include library.utils;

const boolean LOGGING_ON			= false; 

const string TRIGGER_NAME_PREFIX 		= "meatlump_spy_trigger_";
const string TRIGGER 				= "meatlump_spy_trigger";
const string ENEMY_MOB				= "mtp_hideout_infiltrator";
const string MEATLUMP_ENEMY_SCRIPT		= "creature.dynamic_enemy";
const string PHRASE_STRING_FILE			= "phrase_string_file";
const string SPAM_STRING_FILE			= "spam";
const string MEATLUMP_LOG			= "meatlump_trigger";
const string CLIENT_EFFECT			= "appearance/pt_smoke_puff.prt";
const string QUEST_STRING			= "quest/mtp_find_infiltrator_";
const string QUEST_TASK_NAME			= "findInfiltrator";
const string QUEST_SIGNAL			= "findTheInfiltrator";
const float TRIGGER_RADIUS 			= 2f;

trigger OnInitialize()
{
	//on init add trig volume
	createTriggerVolume(TRIGGER_NAME_PREFIX + self, TRIGGER_RADIUS, true);
	//no attribs because we only want players
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{
	blog("OnTriggerVolumeEntered INIT: "+whoTriggeredMe);

	if(!isPlayer(whoTriggeredMe))
		return SCRIPT_CONTINUE;
	
	blog("Spawner: "+getIntObjVar(self, "spawner"));

	if(!hasObjVar(self, "spawner"))
		return SCRIPT_CONTINUE;
	
	//the spawner number tells the egg when the player is eligible to spawn an enemy.
	//We see if the player has the quest and the task active. If both of these are
	//true we spawn the enemy NPC and send a signal to the quest.
	int spawner = getIntObjVar(self, "spawner");
	if(!groundquests.isQuestActive(whoTriggeredMe, QUEST_STRING+spawner))
		return SCRIPT_CONTINUE;

	blog("Ground Quest Found!");

	if(!groundquests.isTaskActive(whoTriggeredMe, QUEST_STRING+spawner, QUEST_TASK_NAME))
		return SCRIPT_CONTINUE;
	blog("Ground Task Found!");

	//if player invis, make visible
	string invis = stealth.getInvisBuff(whoTriggeredMe);
	if(invis != null)
		stealth.checkForAndMakeVisibleNoRecourse(self);

	blog("Sending Signal!");
	//send the signal and spawn the NPC.
	groundquests.sendSignal(whoTriggeredMe, QUEST_SIGNAL);

	blog("Signal Sent!");
	//the mob level will be the same as the player
	int mobLevel = getLevel(whoTriggeredMe);
	//the location the mob is spawned will be center of volume
	//make location a bit more random?
	location curLoc = getLocation(self);
	//spawn the meatlump mob
	
	blog("Creating Mob");
	obj_id mob = create.object(ENEMY_MOB, curLoc, mobLevel);
	if(!isValidId(mob) || !exists(mob))
		return SCRIPT_CONTINUE;
	
	//set vars on mob for use by the mob
	setObjVar(mob, "player", whoTriggeredMe);
	//fail proof, the mob should always attack player triggering
	addHate(mob, whoTriggeredMe, 1);
	//save the string file to the mob as a var so the mob 
	//can say stuff
	setObjVar(mob, PHRASE_STRING_FILE, SPAM_STRING_FILE);
	//establish phrases and save the phrases to the mob
	setObjVar(mob, "attack_phrase", "infiltrator_attack_oops");	
	setObjVar(mob, "defeat_phrase", "infiltrator_defeat_tell");	
	//attach the dynamic enemy script to the mob
	playClientEffectObj(mob, CLIENT_EFFECT, mob, "");
	setObjVar(mob, "clientEffect", CLIENT_EFFECT);
	attachScript(mob, MEATLUMP_ENEMY_SCRIPT);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id whoTriggeredMe)
{
	blog("Exited trigger volume: "+whoTriggeredMe);
	return SCRIPT_CONTINUE;
}

boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(MEATLUMP_LOG,msg);
	return true;
}
