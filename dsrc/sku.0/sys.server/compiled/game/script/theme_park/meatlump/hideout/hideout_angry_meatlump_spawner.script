include library.ai_lib;
include library.buff;
include library.structure;
include library.trial;
include library.utils;

const string ELIGIBLE_OBJVAR				= "angryMeatlumpsEligible";
const string ANGRY_MEATLUMPS_LIST_SCRIPTVAR	= "angryMeatlumpsList";
const string HIDEOUT_ID_OBJVAR				= "angryMeatlump.hideout";


const int MAX_NUM_ANGRY_MEATLUMPS 		= 19;

trigger OnAttach ()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize ()
{
	messageTo(self, "handleInitializeAngryMeatlumps", null, 60, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleInitializeAngryMeatlumps()
{
	resizeable obj_id[] angryMeatlumps = new obj_id[0];
	resizeable obj_id[] eligibleMeatlumps = findEligibleMeatlumps(self);
	
	if ( eligibleMeatlumps != null && eligibleMeatlumps.length > 0 )
	{
		while ( angryMeatlumps.length < MAX_NUM_ANGRY_MEATLUMPS && eligibleMeatlumps.length > 0 )
		{
			int index = rand(0, eligibleMeatlumps.length-1);
			obj_id chosenMeatlump = eligibleMeatlumps[index];
			if ( isIdValid(chosenMeatlump) )
			{
				buff.applyBuff(chosenMeatlump, "mtp_meatlump_angry");
				setObjVar(chosenMeatlump, HIDEOUT_ID_OBJVAR, self);

				utils.addElement(angryMeatlumps, chosenMeatlump);
				utils.removeElement(eligibleMeatlumps, chosenMeatlump);
			}
		}
	}
	
	if ( angryMeatlumps != null && angryMeatlumps.length > 0 )
	{
		utils.setScriptVar(self, ANGRY_MEATLUMPS_LIST_SCRIPTVAR, angryMeatlumps);
	}
	
	if ( angryMeatlumps.length < MAX_NUM_ANGRY_MEATLUMPS )
	{
		messageTo(self, "makeNewAngryMeatlump", null, 19, false);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler makeNewAngryMeatlump()
{
	resizeable obj_id[] angryMeatlumps = new obj_id[0];
	if ( utils.hasScriptVar(self, ANGRY_MEATLUMPS_LIST_SCRIPTVAR) )
	{
		angryMeatlumps = utils.getResizeableObjIdArrayScriptVar(self, ANGRY_MEATLUMPS_LIST_SCRIPTVAR);
	}
		
	if ( params != null || !params.isEmpty() )
	{
		if ( params.containsKey("happyMeatlump") )
		{
			obj_id happyMeatlump = params.getObjId("happyMeatlump");
			if ( isIdValid(happyMeatlump) && utils.isElementInArray(angryMeatlumps, happyMeatlump) )
			{
				utils.removeElement(angryMeatlumps, happyMeatlump);
			}
		}
	}
	
	if ( angryMeatlumps.length >= MAX_NUM_ANGRY_MEATLUMPS )
	{
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] eligibleMeatlumps = findEligibleMeatlumps(self);
	if ( eligibleMeatlumps != null && eligibleMeatlumps.length > 0 )
	{
		int index = rand(0, eligibleMeatlumps.length-1);
		obj_id chosenMeatlump = eligibleMeatlumps[index];
		if ( isIdValid(chosenMeatlump) )
		{
			buff.applyBuff(chosenMeatlump, "mtp_meatlump_angry");
			setObjVar(chosenMeatlump, HIDEOUT_ID_OBJVAR, self);

			utils.addElement(angryMeatlumps, chosenMeatlump);
		}
	}
	
	if ( angryMeatlumps != null && angryMeatlumps.length > 0 )
	{
		utils.setScriptVar(self, ANGRY_MEATLUMPS_LIST_SCRIPTVAR, angryMeatlumps);
	}
	
	if ( angryMeatlumps.length < MAX_NUM_ANGRY_MEATLUMPS )
	{
		messageTo(self, "makeNewAngryMeatlump", null, 29, false);
	}
	
	return SCRIPT_CONTINUE;
}

resizeable obj_id[] findEligibleMeatlumps(obj_id hideout)
{
	resizeable obj_id[] eligibleMeatlumps = new obj_id[0];
	
	obj_id[] cellList = getContents(hideout);
	if ( cellList != null && cellList.length > 0 )
	{
		for ( int i = 0; i < cellList.length; i++ )
		{
			obj_id cell = cellList[i];
			if ( getTemplateName(cell).equals(structure.TEMPLATE_CELL) )
			{
				obj_id[] cellContents = getContents(cell);
				if ( cellContents != null && cellContents.length > 0 )
				{
					for ( int j = 0; j < cellContents.length; j++ )
					{
						obj_id thing = cellContents[j];
						if ( isMob(thing) && !isPlayer(thing) )
						{
							if ( hasObjVar(thing, ELIGIBLE_OBJVAR) && !buff.hasBuff(thing, "mtp_meatlump_angry") && !buff.hasBuff(thing, "mtp_meatlump_happy") )
							{  
								utils.addElement(eligibleMeatlumps, thing);
							}
						}
					}
				}
			}
		}
	}
	
	if ( eligibleMeatlumps != null && eligibleMeatlumps.length > 0 )
	{
		return eligibleMeatlumps;
	}
	
	return null;
}

