//------------------------------------------------
// Includes
//------------------------------------------------

include library.chat;
include library.create;
include library.group;
include library.utils;

//------------------------------------------------
// CONSTANTS
//------------------------------------------------

const string OWNER_OBJVAR			= "meatlump.owner";
const string COMLINK_OBJVAR			= "meatlump.comlink";

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// Set a destroy callback to 10 minutes.
	messageTo(self, "cleanUpGuard", null, 1000, true);

	// Attack!
	messageTo(self, "attackPlayer", null, 1, false);

	// Remove default convo.
	detachScript(self, "npc.converse.npc_convo");
	detachScript(self, "npc.converse.npc_converse_menu");

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// cleanUpGuard
//------------------------------------------------

messageHandler cleanUpGuard()
{
	// Clean us up.
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// MESSAGE HANDLERS
//------------------------------------------------

messageHandler attackPlayer()
{
	// Get player ref.
	obj_id player = getObjIdObjVar(self, OWNER_OBJVAR);
	if(!isValidId(player) || !exists(player))
		return SCRIPT_CONTINUE;
		
	//see if player is in group
	if (!group.isGrouped(player))
	{
		startCombat(self, player);
		return SCRIPT_CONTINUE;
	}
	else
	{
		// Find someone other than the map owner to attack.
		obj_id groupObj = getGroupObject(player);
		if(!isValidId(groupObj) || !exists(groupObj))
			return SCRIPT_CONTINUE;
		
		obj_id[] members = getGroupMemberIds(groupObj);
		if ((members == null) || (members.length == 0))
			return SCRIPT_CONTINUE;	
			
		// Attack a random member of the group if close enough, otherwise player.
		boolean success = getRandomGroupMember(self, player, members);
		// If the above fails and the group is mid to large, try again
		if(!success && members.length >= 4)
		{
			boolean secondTry = getRandomGroupMember(self, player, members);
			if(!secondTry)
			{
				startCombat(self, player);
				CustomerServiceLog("meatlumpEvent", "ERROR: Mob: " + self + " " + getName(self)
					+ " is attacking: " + player + " " + getName(player)
					+ " by default. This means the function failed to have the mob attach a group member"
					+ " [ attackPlayer() ]");
			}
		}
		else
		{
			startCombat(self, player);
			
			CustomerServiceLog("meatlumpEvent", "Mob: " + self + " " + getName(self)
				+ " is attacking: " + player + " " + getName(player)
				+ ". [ attackPlayer() ]");
		}
	}			
	
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// FUNCTIONS
//------------------------------------------------

boolean getRandomGroupMember(obj_id self, obj_id player, obj_id[] members)
{
	if(!isValidId(player) || !exists(player))
		return false;

	if ((members == null) || (members.length == 0))
		return false;
		
	int j = rand(0, members.length-1);
	if (getDistance(getLocation(self), getLocation(members[j])) < 100 )
	{
		startCombat(self, members[j]);

		CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
			+ " is attacking: " + members[j] + " " + getName(members[j])
			+ " located: "+ getLocation(members[j]) 
			+". [ getRandomGroupMember() ]");
		
		//debugSpeakMsg(self, "I am attacking: "+members[j]);
		return true;
	}
	return false;
}

//------------------------------------------------
// barkAttack
//------------------------------------------------

messageHandler barkAttack()
{
	chat.chat(self, chat.CHAT_SHOUT, chat.MOOD_ANGRY, new string_id("meatlump/meatlump", "bark_ragtag"));
	return SCRIPT_CONTINUE;
}
