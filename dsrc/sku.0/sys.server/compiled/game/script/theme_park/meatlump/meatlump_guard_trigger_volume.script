include library.attrib;
include library.create;
include library.group;
include library.stealth;
include library.utils;

const boolean LOGGING_ON			= false; 

const string MEATLUMP_TRIGGER_NAME_PREFIX 	= "meatlump_guardian_trigger_";
const string MEATLUMP_TRIGGER 			= "meatlump_trigger";
const string MEATLUMP_MOB			= "meatlump_outpost_guard_spawned";
const string MEATLUMP_ENEMY_SCRIPT		= "creature.dynamic_enemy";
const string PHRASE_STRING_FILE			= "phrase_string_file";
const string SPAM_STRING_FILE			= "spam";
const string MEATLUMP_LOG			= "meatlump_trigger";
const float MEATLUMP_TRIGGER_RADIUS 		= 8f;

trigger OnInitialize()
{
	//on init add trig volume
	createTriggerVolume(MEATLUMP_TRIGGER_NAME_PREFIX + self, MEATLUMP_TRIGGER_RADIUS, true);
	//no attribs because we only want players
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{
	if(!isPlayer(whoTriggeredMe))
		return SCRIPT_CONTINUE;
	
	blog("Entered trigger volume: "+whoTriggeredMe);
	//if the player already triggered, don't trigger again.
	if(utils.hasScriptVar(whoTriggeredMe, MEATLUMP_TRIGGER) && utils.getStringScriptVar(whoTriggeredMe, MEATLUMP_TRIGGER).equals(MEATLUMP_TRIGGER_NAME_PREFIX+self))
	{
		blog("Already triggered volume: "+whoTriggeredMe);
		return SCRIPT_CONTINUE;
	}
	//if this is the first time player has triggered since login, set var
	utils.setScriptVar(whoTriggeredMe, MEATLUMP_TRIGGER, MEATLUMP_TRIGGER_NAME_PREFIX+self);
	
	//if player invis, make visible
	string invis = stealth.getInvisBuff(whoTriggeredMe);
	if(invis != null)
		stealth.checkForAndMakeVisibleNoRecourse(self);

	//the mob level will be the same as the player
	int mobLevel = getLevel(whoTriggeredMe);
	//the location the mob is spawned will be center of volume
	//make location a bit more random?
	location curLoc = getLocation(self);
	//spawn the meatlump mob
	obj_id mob = create.object(MEATLUMP_MOB, curLoc, mobLevel);
	
	//set vars on mob for use by the mob
	setObjVar(mob, "player", whoTriggeredMe);
	//fail proof, the mob should always attack player triggering
	addHate(mob, whoTriggeredMe, 1);
	//save the string file to the mob as a var so the mob 
	//can say stuff
	setObjVar(mob, PHRASE_STRING_FILE, SPAM_STRING_FILE);
	//establish random phrases and save the phrases to the mob
	getRandomPhrases(mob);	
	//attach the dynamic enemy script to the mob
	attachScript(mob, MEATLUMP_ENEMY_SCRIPT);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id whoTriggeredMe)
{
	blog("Exited trigger volume: "+whoTriggeredMe);
	return SCRIPT_CONTINUE;
}

boolean getRandomPhrases(obj_id mob)
{
	if(!isValidId(mob) || !exists(mob))
		return false;

	//make random rolls
	int attackPhraseInt = rand(1,10);
	int defeatPhraseInt = rand(1,10);

	//default phrases in case of epic fail
	string attackPhrase = "enemy_attack_you_thief";
	string defeatPhrase = "enemy_defeat_tell_everyone";
	
	//use random to establish variation in phrases
	switch(attackPhraseInt)
	{
	 	case 1:
			attackPhrase = "enemy_attack_rest";
			break;
		case 2:
			attackPhrase = "enemy_attack_oh_look";
			break;
		case 3:
			attackPhrase = "enemy_attack_surprise";
			break;
		case 4:
			attackPhrase = "enemy_attack_now_got";
			break;
		case 5:
			attackPhrase = "enemy_attack_what_did";
			break;
		case 6:
			attackPhrase = "enemy_attack_sneaky";
			break;
		case 7:
			attackPhrase = "enemy_attack_youre_not";
			break;
		case 8:
			attackPhrase = "enemy_attack_lotta_nerve";
			break;
		case 9:
			attackPhrase = "enemy_attack_stop";
			break;
		case 10:
			attackPhrase = "enemy_attack_you_thief";
			break;			
	 	default :
			// This is an error
			break;
	}

	//use random to establish variation in phrases	
	switch(defeatPhraseInt)
	{
	 	case 1:
			defeatPhrase = "enemy_defeat_oops";
			break;
		case 2:
			defeatPhrase = "enemy_defeat_challenging";
			break;
		case 3:
			defeatPhrase = "enemy_defeat_boo_hoo";
			break;
		case 4:
			defeatPhrase = "enemy_defeat_take_that";
			break;
		case 5:
			defeatPhrase = "enemy_defeat_entertainer";
			break;
		case 6:
			defeatPhrase = "enemy_defeat_trader";
			break;
		case 7:
			defeatPhrase = "enemy_defeat_sweat";
			break;
		case 8:
			defeatPhrase = "enemy_defeat_training";
			break;
		case 9:
			defeatPhrase = "enemy_defeat_lunch";
			break;
		case 10:
			defeatPhrase = "enemy_defeat_tell_everyone";
			break;			
	 	default :
			// This is an error
			break;
	}
	//save vars to mob
	setObjVar(mob, "attack_phrase", attackPhrase);	
	setObjVar(mob, "defeat_phrase", defeatPhrase);
	return true;
}

boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(MEATLUMP_LOG,msg);
	return true;
}
