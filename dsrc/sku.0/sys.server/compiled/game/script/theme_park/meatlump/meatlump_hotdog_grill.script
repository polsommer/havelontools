/*
Gives players meatlump foods that are needed to get quest info from Meatlumps.
Authors: James Michener
*/

//libraries
include library.buff;
include library.static_item;
include library.sui;
include library.utils;

//constants
const string_id SID_GET_FOOD_ITEM			= new string_id("collection", "get_food_item");
const string_id SID_MTP_ALREADY_ATE			= new string_id("collection", "already_ate");
const string_id NOT_WHILE_INCAPPED			= new string_id ("quest/ground/util/quest_giver_object", "not_while_incapped");
const string_id SID_NOT_WHILE_IN_COMBAT			= new string_id("base_player", "not_while_in_combat");
const string_id MUST_DISMOUNT				= new string_id ("collection", "must_dismount");

//triggers
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	mi.addRootMenu(menu_info_types.ITEM_USE, SID_GET_FOOD_ITEM);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	string itemToGrant = "";
	//validation of player
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;
		
	//player already got food recently (can only get once ever 15 minutes)
	if(buff.hasBuff(player, "mtp_already_ate"))
	{
		sendSystemMessage(player, SID_MTP_ALREADY_ATE);
		return SCRIPT_CONTINUE;
	}
	sendDirtyObjectMenuNotification(self);
		
	// checks for combat
	if(getState(player, STATE_COMBAT) > 0)
	{
		sendSystemMessage(player, SID_NOT_WHILE_IN_COMBAT);
		return SCRIPT_CONTINUE;
	}
	if(getState(player, STATE_RIDING_MOUNT) == 1)
	{
		sendSystemMessage(player, MUST_DISMOUNT);
		return SCRIPT_CONTINUE;
	}
	if(isDead(player) || isIncapacitated(player))
	{
		sendSystemMessage(player, NOT_WHILE_INCAPPED);
		return SCRIPT_CONTINUE;
	}
	
	//rare schematic - unlimited use - Meatlump Lump Luck Buff Food.
	int myRoll = rand(1, 500);
	
	if(myRoll == 1)
	{
		itemToGrant = "item_mtp_meatlump_lump_schematic_02_01";
		grantMeatlumpItem(player, itemToGrant);
	}
	else	//normal lump: has +1 luck buff :-/
	{
		itemToGrant = "item_mtp_meatlump_lump_02_01";
		grantMeatlumpItem(player, itemToGrant);
	}
	return SCRIPT_CONTINUE;
}

boolean grantMeatlumpItem(obj_id player, string itemToGrant)
{
	if(!isIdValid(player) || !exists(player))
	{
		return false;
	}
	if(itemToGrant == null || itemToGrant.equals(""))
	{
		return false;
	}
		
	//create the item in the player's inventory
	obj_id pInv = utils.getInventoryContainer(player); 
	obj_id itemId = static_item.createNewItemFunction(itemToGrant, pInv);
	if(!exists(itemId) || !isIdValid(itemId))
	{
		//TODO - CS Log
	}
	//set the invisible buff - player got one.
	buff.applyBuff(player, "mtp_already_ate");
	
	return true;
}