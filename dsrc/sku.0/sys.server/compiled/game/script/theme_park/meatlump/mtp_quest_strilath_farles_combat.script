include library.ai_lib;
include library.buff;
include library.utils;

trigger OnAttach()
{
	messageTo(self, "handleFarlesFaceTo", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleFarlesFaceTo()
{
	obj_id player = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if ( isIdValid(player))
	{
		faceTo(self, player);
	}
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{
	float damageThreshold = 0.1f;

	int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
	int currentHealth = getAttrib(self, HEALTH);

	if ( currentHealth <= (maxHealth * damageThreshold) )
	{
		setAttrib(self, HEALTH, maxHealth);
		setInvulnerable(self, true);
		
		detachScript(self, "ai.creature_combat");
		attachScript(self, "conversation.mtp_hideout_access_strilath_farles_01");
				
		messageTo(self, "makeNpcStopCombat", null, 1, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler makeNpcStopCombat()
{
	utils.removeScriptVar( self, "ai.combat.isInCombat");
	setCombatTarget(self, null);
	stopCombat(self);
	clearHateList(self);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	buff.removeAllBuffs(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler makeNpcDisappear()
{
	location here = getLocation(self);
	playClientEffectLoc(getPlayerCreaturesInRange(here, 100.0f), "appearance/pt_smoke_puff_noloop.prt", here, 0.0f);
	messageTo(self, "handleDestroySelf", null, 0.25f, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleDestroySelf()
{
	stopCombat(self);
	clearHateList(self);
	
	obj_id[] players = getPlayerCreaturesInRange(getLocation(self), 20f);
	if ( players != null && players.length > 0 )
	{
		for ( int i = 0; i < players.length; i++ )
		{
			npcEndConversation(players[i]);
		}
	}
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

