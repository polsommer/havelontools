include library.ai_lib;
include library.combat;
include library.utils;
include library.create;

// No longer used.

/*
const int MAX_SPAWN_TRIES = 5;


trigger OnAttach ()
{
	//debugSpeakMsg (self, "STARTED SPAWNING");
	messageTo ( self, "beginSpawn", null, 1, false );
	return SCRIPT_CONTINUE;
}

trigger OnInitialize ()
{
	//debugSpeakMsg (self, "STARTED SPAWNING");
	messageTo ( self, "beginSpawn", null, 1, false );
	return SCRIPT_CONTINUE;
}

messageHandler beginSpawn ()
{
	string datatable = getStringObjVar (self, "spawn_table");

	if ( datatable == null )
	{
		LOG ("Spawn", "I have no string table. I am " + self);
		return SCRIPT_OVERRIDE;
	}

	int numberOfCreaturesToSpawn = dataTableGetNumRows (datatable);
//	LOG("SCRIPT_SPAWNER_DEFAULT_beginSpawn", "Number of Creatures to Spawn is: " + numberOfCreaturesToSpawn);
	if ( numberOfCreaturesToSpawn <= 0 )
		return SCRIPT_CONTINUE;

	int spawnedCount = utils.getIntScriptVar(self, "spawnCount");
	obj_id[] spawned = utils.getObjIdArrayScriptVar (self, "spawnList");
	if ( spawned == null || spawned.length == 0 )
	{
		spawned = new obj_id[numberOfCreaturesToSpawn];
	}

	boolean failed = false;
	for (int i = 0; i < spawned.length; ++i)
	{
//		LOG("SCRIPT_SPAWNER_BEGINSPAWN", "Spawned[i] = " + spawned[i]);
		if ( spawned[i] == obj_id.NULL_ID || spawned[i] == null)
		{
			spawned[i] = spawnActor(datatable, i);
			if (spawned[i] == obj_id.NULL_ID)
			{
				failed = true;
			//	CustomerServiceLog("Spawn", "Could not spawn object " + dataTableGetString (datatable, i, "spawns") +
			//		" from datatable" + datatable + ", spawn egg = " + self);
			}
		}
	}

	if ( failed )
	{
//		LOG("SCRIPT_SPAWNER_DEFAULT_beginSpawn", "Cycle failed, resending call to spawn");
		spawnedCount++;
		if (spawnedCount <= MAX_SPAWN_TRIES)
			messageTo ( self, "beginSpawn", null, 1, false );
	}
	utils.setScriptVar (self, "spawnList", spawned);
	utils.setScriptVar (self, "spawnCount", spawnedCount);

	return SCRIPT_CONTINUE;
}

messageHandler tellingMomIDied() {

	int actorNum = params.getInt("spawnNumber");
	obj_id corpseObjId = params.getObjId("spawnMob");
	string datatable = getStringObjVar (self, "spawn_table");
	obj_id[] spawned = utils.getObjIdArrayScriptVar (self, "spawnList");

//	LOG("SCRIPT_SPAWNER_TELLINGMOMIDIED", "Validate public corpse is equal to ID passed from respawn script: " + corpse + " =? " + corpseObjId);

	if (datatable == null)
	{

		return SCRIPT_CONTINUE;
	}

	if (spawned[actorNum] == corpseObjId)
	{
		obj_id newActor = spawnActor(datatable, actorNum);
		if (isIdValid(newActor))
		{
			spawned[actorNum] = newActor;
			utils.setScriptVar(self, "spawnList", spawned);
		}
		else
		{
			messageTo(self, "tellingMomIDied", params, 3, false);
		}
	}

	return SCRIPT_CONTINUE;
}

obj_id spawnActor(string datatable, int x)
{

	obj_id self = getSelf();

	string spawn = dataTableGetString (datatable, x, "spawns");

	float xCoord = dataTableGetFloat (datatable, x, "loc_x");
	float yCoord = dataTableGetFloat (datatable, x, "loc_y");
	float zCoord = dataTableGetFloat (datatable, x, "loc_z");
	location myself = getLocation (self);
	string planet = myself.area;

	string spawnRoom = dataTableGetString (datatable, x, "room");
	obj_id room = getCellId (self, spawnRoom);

	if (!isIdValid (room) && (spawnRoom != "world"))
	{
		CustomerServiceLog("bad_spawner_data", "spawner " + self + ", datatable " + datatable + ", row " + x + ", mob " + spawn + ", room " + spawnRoom + " doesn't exist");
		return obj_id.NULL_ID;
	}

	location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

	obj_id spawnedCreature = null;
	spawnedCreature = create.object (spawn, spawnPoint);
	if (!isIdValid(spawnedCreature))
		return obj_id.NULL_ID;


	string scriptOne = dataTableGetString (datatable, x, "scriptOne");
	string scriptTwo = dataTableGetString (datatable, x, "scriptTwo");
	string scriptThree = dataTableGetString (datatable, x, "scriptThree");

	if (scriptOne != null && scriptOne != "")
	{
		attachScript (spawnedCreature, scriptOne);
	}


	if (scriptTwo != null && scriptTwo != "")
	{
		attachScript (spawnedCreature, scriptTwo);
	}

	if (scriptThree != null && scriptThree != "")
	{
		attachScript (spawnedCreature, scriptThree);
	}

	string creatureName = dataTableGetString (datatable, x, "name");

	if (creatureName != null && creatureName != "")
	{
		setName (spawnedCreature, creatureName);
	}

	string mood = dataTableGetString (datatable, x, "mood");
	float yaw = dataTableGetFloat (datatable, x, "yaw");

	setYaw (spawnedCreature, yaw);
	ai_lib.setDefaultCalmMood (spawnedCreature, mood);

	setObjVar (spawnedCreature, "spawn_number", x);
	setObjVar (spawnedCreature, "mom", self);

	int respawnTime = dataTableGetInt (datatable, x, "respawn_time");
	if(respawnTime < 1) {

		respawnTime = 300;
	}
	setObjVar (spawnedCreature, "respawn_time", respawnTime);

	string spawnObjVar = dataTableGetString (datatable, x, "spawn_objvar");
	string objvarValue = dataTableGetString (datatable, x, "spawn_objvar_value");
	string spawnObjVar2 = dataTableGetString (datatable, x, "spawn_objvar2");
	string objvarValue2 = dataTableGetString (datatable, x, "spawn_objvar_value2");

	if (spawnObjVar != null && spawnObjVar != "")
	{
		if (objvarValue != null && objvarValue != "")
		{
			setObjVar (spawnedCreature, spawnObjVar, objvarValue);
		}
	}

	if (spawnObjVar2 != null && spawnObjVar2 != "")
	{
		if (objvarValue2 != null && objvarValue2 != "")
		{
			setObjVar (spawnedCreature, spawnObjVar2, objvarValue2);
		}
	}

	return spawnedCreature;
}
*/
