include library.ai_lib;
include library.chat;
include library.group;
include library.groundquests;
include library.hue;
include library.trial;
include library.utils;

const int RADIUS				= 100;
const int MIN_DIST				= 25;

const string DISTANCE_CHECK			= "distance_check";

trigger OnAttach()
{
	messageTo(self, "moveCreatureToWaypoint", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeIncapacitated(obj_id killer)
{
	CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob "+self+" incapacitated by: "+killer);

	if(!hasObjVar(self, "theme_park_boss"))
	{
		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(self, "theme_park_boss_slot"))
	{
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob has boss slot and quest name data");
	
	string bossQuest = getStringObjVar(self, "theme_park_boss");
	if(bossQuest == null || bossQuest.length() <= 0)
	{
		return SCRIPT_CONTINUE;
	}

	string bossQuestSlot = getStringObjVar(self, "theme_park_boss_slot");
	if(bossQuestSlot == null || bossQuestSlot.length() <= 0)
	{
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob slot and quest name data validated");
	
	//get the list of attackers, this is anyone who did damage
	obj_id[] attackerList = utils.getObjIdBatchScriptVar(self, "creditForKills.attackerList.attackers");
	//validate the list

	if(attackerList != null && attackerList.length > 0)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob attackerList = "+attackerList.length);

		for(int i = 0; i < attackerList.length; i++)
		{
			if(!isIdValid(attackerList[i]))
			{
				continue;
			}

			if(group.isGroupObject(attackerList[i]))
			{
				obj_id[] members = getGroupMemberIds(attackerList[i]);

				for(int j = 0, k = members.length; j < k; j++)
				{
					if(isIdValid(members[j]))
					{
						if(!groundquests.isQuestActive(attackerList[i], bossQuest))
						{
							CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob attacker: "+attackerList[i]+" did not have boss quest: "+bossQuest);
							continue;
						}

						if(hasCompletedCollectionSlot(attackerList[i], bossQuestSlot))
						{
							CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob attacker: "+attackerList[i]+" has already attained: "+bossQuestSlot);
							continue;
						}
						
						if(!hasCompletedCollectionSlotPrereq(attackerList[i], bossQuestSlot))
						{
							CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnAboutToBeIncapacitated() Boss Mob attacker: "+attackerList[i]+" hasn't fulfilled the prerequisite for boss slot/: "+bossQuestSlot);						
							continue;
						}
						modifyCollectionSlotValue(attackerList[i], bossQuestSlot, 1);			
					}
				}
			}
			else
			{
				if(!groundquests.isQuestActive(attackerList[i], bossQuest))
				{
					continue;
				}

				if(hasCompletedCollectionSlot(attackerList[i], bossQuestSlot))
				{
					continue;
				}
			
				if(!hasCompletedCollectionSlotPrereq(attackerList[i], bossQuestSlot))
				{
					continue;
				}

				modifyCollectionSlotValue(attackerList[i], bossQuestSlot, 1);			
			}
		}
	}

	return SCRIPT_CONTINUE;

}

/*
trigger OnIncapacitated(obj_id killer)
{
	CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitated() Boss Mob "+self+" incapacitated by: "+killer);
	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitated() Mob did not find the player owner.");
		return SCRIPT_CONTINUE;
	}

	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitated() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}

	obj_id[] groupMembersInRange = groundquests.getGroupMembersInRange(parent, playerEnemy);
	if(groupMembersInRange == null || groupMembersInRange.length <= 0)
	{
		CustomerServiceLog("nyms_themepark", "rancor_boss_fight_controller.OnIncapacitated() groupMembersInRange was NULL. for player: "+playerEnemy);	
		return SCRIPT_CONTINUE;
	}

	for(int i = 0; i < groupMembersInRange.length; i++)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitated() A player, "+groupMembersInRange[i]+", was found in player group of playerEnemy: "+playerEnemy);
		
		if(!isIdValid(groupMembersInRange[i]) && !exists(groupMembersInRange[i]) || isIncapacitated(groupMembersInRange[i]) || !isDead(groupMembersInRange[i]))
		{
			CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitated() A player, "+groupMembersInRange[i]+", in the group of "+playerEnemy+" was dead, incapacitated or in some way not found.");
			continue;
		}
	}	

 	return SCRIPT_CONTINUE;
}*/

trigger OnEnteredCombat()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	//Shuttle guys ignore this
	if(hasObjVar(self, "shuttle"))
	{
		return SCRIPT_CONTINUE;
	}
	
	int maxDist = getIntObjVar(self, DISTANCE_CHECK);
	if(maxDist <= 0)
	{
		maxDist = MIN_DIST;
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnEnteredCombat() maximum distance from creation location for boss mob ("+self+") was invalid or NULL.");	
	}
	
	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnEnteredCombat() Mob found player but player was not part of owners group.");
		return SCRIPT_CONTINUE;
	}

	obj_id[] players = getPlayerCreaturesInRange(self, maxDist);
	if(players != null && players.length > 0)
	{
		for(int i = 0; i < players.length; i++)
		{
			if(!isIdValid(players[i]) && !exists(players[i]) || isIncapacitated(players[i]) || !isDead(players[i]))
				continue;
			
			/*
			if(!group.inSameGroup(players[i], playerEnemy))
				continue;
			*/	
			addHate(self, players[i], 1000.0f);
			startCombat(self, players[i]);
		}
	}
	
	messageTo(self, "handleBossDistanceCheck", null, 3, false);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitateTarget(obj_id victim)
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	if(ai_lib.isDead(self))
	{
		return SCRIPT_CONTINUE;
	}

	//Shuttle guys ignore this
	if(hasObjVar(self, "shuttle"))
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitateTarget() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}
	
	if(getRandomCombatTarget(self, parent))
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.OnIncapacitateTarget() Boss Mob has found someone in the player's group.");
		return SCRIPT_CONTINUE;
	}

	dictionary webster = trial.getSessionDict(parent);
	messageTo(parent, "defaultEventReset", webster, 2, false);
 	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	if(ai_lib.isDead(self))
	{
		return SCRIPT_CONTINUE;
	}

	//Shuttle guys ignore this
	if(hasObjVar(self, "shuttle"))
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnExitedCombat() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}

	if(getRandomCombatTarget(self, parent))
		return SCRIPT_CONTINUE;
	dictionary webster = trial.getSessionDict(parent);
	messageTo(parent, "defaultEventReset", webster, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleBossDistanceCheck()
{
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;	

	location currentLoc = getLocation(self);
	if(currentLoc == null)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.handleBossDistanceCheck() current boss mob ("+self+") location NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	location creationLoc = aiGetHomeLocation(self);
	if(creationLoc == null)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.handleBossDistanceCheck() creation location for boss mob ("+self+") was NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	float distanceCheck = utils.getDistance2D(currentLoc, creationLoc);
	int maxDist = getIntObjVar(self, DISTANCE_CHECK);
	if(maxDist <= 0)
	{
		maxDist = MIN_DIST;
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.handleBossDistanceCheck() maximum distance from creation location for boss mob ("+self+") was invalid or NULL.");	
	}

	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("quest", "dynamic_mob_opponent.handleBossDistanceCheck() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}
	
	if(distanceCheck > maxDist)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.handleBossDistanceCheck() boss mob ("+self+") has moved too far from creation location. Moving back to creation location.");	
		dictionary webster = trial.getSessionDict(parent);
		messageTo(parent, "defaultEventReset", webster, 2, false);

	}
	else
	{
		messageTo(self, "handleBossDistanceCheck", null, 3, false);
	}
	return SCRIPT_CONTINUE;
}

boolean getRandomCombatTarget(obj_id self, obj_id parent)
{
	if(!isIdValid(self) || !exists(self))
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget() FAILED to find self.");
		return false;
	}

	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget() FAILED to find parent object.");
		return false;
	}

	int maxDist = getIntObjVar(self, DISTANCE_CHECK);

	if(maxDist <= 0)
	{
		maxDist = MIN_DIST;
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget() maximum distance from creation location for boss mob ("+self+") was invalid or NULL.");	
	}

	obj_id[] targets = trial.getValidTargetsInRadiusIgnoreLOS(self, maxDist);
	if(targets == null || targets.length == 0)
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget() no targets for boss ("+self+") is: "+maxDist);	
		dictionary webster = trial.getSessionDict(parent);
		messageTo(parent, "defaultEventReset", webster, 2, false);
		return false;
	}
	/*
	//make sure they are in the group that is participating

	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget() Mob found player but player was not part of owners group.");
		return false;
	}
	*/
	
	for(int i = 0; i < targets.length; i++)
	{
		if(!isIdValid(targets[i]))
			continue;

		/*
		if(!group.inSameGroup(targets[i], playerEnemy))
		{
			CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget(): Player "+ targets[i] + " was found as an invalid target.");
			continue;
		}
		*/
		startCombat(self, targets[i]);
		CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget(): Player "+ targets[i] + " was found as a valid target. Boss Mob: "+self+" attacking player.");
		return true;
	}
	CustomerServiceLog("nyms_themepark", "boss_nyms_themepark.getRandomCombatTarget(): Boss Mob: "+self+" failed to find a player to attack.");
	dictionary webster = trial.getSessionDict(parent);
	messageTo(parent, "defaultEventReset", webster, 2, false);
	return false;

}

messageHandler moveCreatureToWaypoint()
{
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;
	
	//If this is not an arena fighter, disregard
	if(!hasObjVar(self, "arena") && !hasObjVar(self, "shuttle"))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(hasObjVar(self, "arena"))
	{
		location startPos = new location(472.5f, 34.4f, 4815.6f, "lok", null);

		setLocation(self, startPos);
		aiSetHomeLocation(self, startPos);
		setYaw(self, 160.0f);
	}
	if(hasObjVar(self, "shuttle"))
	{	
		location locCenter = new location(473.0f, 12.0f, 4868.0f, "lok", null);
		location locDestination = utils.getRandomLocationInRing(locCenter, 4.0f, 6.0f);
		setLocation(self, locDestination);
		aiSetHomeLocation(self, locDestination);		
	}
	return SCRIPT_CONTINUE;
}
