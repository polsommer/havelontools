include library.ai_lib;
include library.anims;
include library.buff;
include library.chat;
include library.create;
include library.factions;
include library.groundquests;
include library.group;
include library.prose;
include library.trial;
include library.utils;

const boolean LOGGING_ON			= true; 
const string SCRIPT_LOG				= "outbreak_trigger";

const string FAIL_SIGNAL			= "fail_signal";
const string DISTANCE_CHECK			= "distance_check";
const string WAVE_GROUP_ID			= "waveEventGroupId";
const int RADIUS				= 100;
const int MIN_DIST				= 50;

trigger OnAttach()
{
LOG("nym_themepark_log", "nym_ambush_ai: OnAttach: attaching script");

	messageTo(self, "handleIntelligenceLoop", null, 3, false);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if(!hasObjVar(self,"invln"))
		return SCRIPT_CONTINUE;	
		
	setAttrib(self, HEALTH, getMaxAttrib( self, HEALTH ));
	return SCRIPT_CONTINUE;
}

trigger OnObjectDamaged(obj_id attacker, obj_id weapon, int damage)
{
	if(!hasObjVar(self,"invln"))
		return SCRIPT_CONTINUE;	

	setHitpoints(self, getMaxHitpoints(self));
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{

 	return SCRIPT_CONTINUE;
}


trigger OnIncapacitateTarget(obj_id victim)
{

 	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{

	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{

	return SCRIPT_CONTINUE;
}

messageHandler handleIntelligenceLoop()
{
LOG("nym_themepark_log", "nym_ambush_ai: handleIntelligenceLoop: loop start");
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;	

	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		return SCRIPT_CONTINUE;
	}
		
/*
	location currentLoc = getLocation(self);
	if(currentLoc == null)
	{
		CustomerServiceLog("nym_themepark_log", "boss_fight_functionality.handleBossDistanceCheck() current boss mob ("+self+") location NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	location creationLoc = aiGetHomeLocation(self);
	if(creationLoc == null)
	{
		CustomerServiceLog("nym_themepark_log", "boss_fight_functionality.handleBossDistanceCheck() creation location for boss mob ("+self+") was NULL.");	
		return SCRIPT_CONTINUE;
	}
	
	float distanceCheck = utils.getDistance2D(currentLoc, creationLoc);
	int maxDist = getIntObjVar(self, DISTANCE_CHECK);
	if(maxDist <= 0)
	{
		maxDist = MIN_DIST;
		CustomerServiceLog("nym_themepark_log", "boss_fight_functionality.handleBossDistanceCheck() maximum distance from creation location for boss mob ("+self+") was invalid or NULL.");	
	}
	
	if(distanceCheck > maxDist)
	{
		CustomerServiceLog("nym_themepark_log", "boss_fight_functionality.handleBossDistanceCheck() boss mob ("+self+") has moved too far from creation location. Moving back to creation location.");	
		dictionary webster = trial.getSessionDict(parent);
		messageTo(parent, "defaultEventReset", webster, 2, false);

	}
	else
	{
		messageTo(self, "handleBossDistanceCheck", null, 3, false);
	}
*/
LOG("nym_themepark_log", "nym_ambush_ai: handleIntelligenceLoop: getting enemy");


	getRandomCombatTarget(self, parent);
	messageTo(self, "handleIntelligenceLoop", null, 3, false);
	
	return SCRIPT_CONTINUE;
}

boolean getRandomCombatTarget(obj_id self, obj_id parent)
{
	//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: init");

	if(ai_lib.isInCombat(self))
	{
		return false;
	}
	
	if(!isIdValid(self) || !exists(self))
	{
		return false;
	}

	if(!isIdValid(parent) || !exists(parent))
	{
		return false;
	}
	//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: getting targets in radius");

	obj_id[] targets = getNPCsInRange(getLocation(self), 60);
	if(targets == null || targets.length == 0)
	{
		return false;
	}

	//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: targets found: "+targets.length);
	
	string myFaction = factions.getFaction(self);
	//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: my faction found: "+myFaction);
	
	for(int i = 0; i < targets.length; i++)
	{
		if(!isIdValid(targets[i]))
			continue;

		if(targets[i] == self)
			continue;

		if(isInvulnerable(targets[i]))
			continue;
			
		if(hasScript(targets[i], "theme_park.nym.nym_ambush_ai"))
		{
			//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: Found an associate");			
			continue;
		}
		
		if(ai_lib.isDead(targets[i]))		
		{
			//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: Found a dead one");			
			continue;
		}
		
		//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: target valid: "+targets[i]);
		string targetFaction = factions.getFaction(targets[i]);
		//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: target faction: "+targetFaction +" My faction is: "+myFaction);
		
		if(targetFaction == null || targetFaction.length() <= 0)
		{
			//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: faction null, exiting");		
			continue;
		}
		//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: target faction is not null: "+targets[i]);

		//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: facNum1: "+facNum1+" facNum2: "+facNum2);
			
		if(factions.areCreaturesAllied(self, targets[i]))
		{
			//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: same faction, exiting");
			continue;
		}
		//LOG("nym_themepark_log", "nym_ambush_ai: getRandomCombatTarget: starting combat with: "+targets[i]);
		startCombat(self, targets[i]);
		return true;
	}
	return false;

}

messageHandler destroySelf()
{
	destroyObject(self);
	messageTo(self, "destroySelf", null, 10, false);	
	return SCRIPT_CONTINUE;	
}

/*
boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(SCRIPT_LOG,msg);
	return true;
}
*/
