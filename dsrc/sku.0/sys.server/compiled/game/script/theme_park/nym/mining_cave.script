include ai.ai;
include ai.ai_combat;
include library.ai_lib;
include library.create;
include library.spawning;
include library.utils;

const string NYM_OBJECT_DATATABLE	= "datatables/spawning/theme_park/nym_mining_cave_objects.iff";
const string SPAWNER_DATATABLE		= "datatables/spawning/theme_park/nym_imperial_mine.iff";

trigger OnInitialize()
{
	messageTo(self, "spawnQuestObjects", null, 3, false);
	messageTo(self, "handleSpawns", null, 3, false);
	messageTo(self, "handleEliteSpawns", null, 3, false);


	return SCRIPT_CONTINUE;
}

messageHandler spawnQuestObjects()
{
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;

	//New datatable object spawn functionality
	if(!utils.hasScriptVar(self, "planet"))
	{
		location myself = getLocation(self);
		string planet = myself.area;
		if(planet == null || planet.length() <= 0)
		{
			CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name from location.");
			return SCRIPT_OVERRIDE;
		}
		utils.setScriptVar(self, "planet", planet);

	}
	
	string planet = utils.getStringScriptVar(self, "planet");
	if(planet == null || planet.length() <= 0)
	{
		CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name script var.");
		return SCRIPT_OVERRIDE;
	}


	spawning.spawnObjectsInDungeonFromTable(self, planet, NYM_OBJECT_DATATABLE);


	return SCRIPT_CONTINUE;
}

messageHandler handleSpawns()
{
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;

	//New datatable object spawn functionality
	if(!utils.hasScriptVar(self, "planet"))
	{
		location myself = getLocation(self);
		string planet = myself.area;
		if(planet == null || planet.length() <= 0)
		{
			CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name from location.");
			return SCRIPT_CONTINUE;
		}
		utils.setScriptVar(self, "planet", planet);

	}
	
	string planet = utils.getStringScriptVar(self, "planet");
	if(planet == null || planet.length() <= 0)
	{
		CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name script var.");
		return SCRIPT_CONTINUE;
	}

	int numberOfCreaturesToSpawn = dataTableGetNumRows(SPAWNER_DATATABLE);
	if(numberOfCreaturesToSpawn <= 0)
	{
		return SCRIPT_CONTINUE;
	}

	for(int i = 0; i < numberOfCreaturesToSpawn; i++)
	{
		doSpawn(i, planet, self);
	}
	return SCRIPT_CONTINUE;
}

messageHandler tellingMomIDied()
{
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;

	if(!utils.hasScriptVar(self, "planet"))
	{
		location myself = getLocation(self);
		string planet = myself.area;
		if(planet == null || planet.length() <= 0)
		{
			CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name from location.");
			return SCRIPT_CONTINUE;
		}
		utils.setScriptVar(self, "planet", planet);

	}
	
	string planet = utils.getStringScriptVar(self, "planet");
	if(planet == null || planet.length() <= 0)
	{
		CustomerServiceLog("bad_spawner_data", "Nym Sulfur Pirate Cave spawner " + self + ", Could not retrieve planet name script var.");
		return SCRIPT_CONTINUE;
	}
	
	int spawn_num = params.getInt("spawnNumber");
	if(spawn_num < 0)
		return SCRIPT_CONTINUE;
	
	obj_id spawn_mob = params.getObjId("spawnMob");

	// only spawn a replacement if the mob who died is the one we actually spawned
	if (utils.hasScriptVar (self, "spawned" + spawn_num) && (spawn_mob == utils.getObjIdScriptVar (self, "spawned" + spawn_num)))
	{
		doSpawn(spawn_num, planet, self);
	}

	return SCRIPT_CONTINUE;
}

boolean doSpawn(int spawn_num, string planet, obj_id self)
{
	if(spawn_num < 0)
		return false;

	if(planet == null || planet.length() <= 0)
		return false;

	if(!isValidId(self) || !exists(self))
		return false;
	
	dictionary objToSpawn = dataTableGetRow(SPAWNER_DATATABLE, spawn_num);
	if(objToSpawn == null)
		return false;

	string object = objToSpawn.getString("spawns");
	if(object == null || object.length() <= 0)
		return false;

	float xCoord = objToSpawn.getFloat("loc_x");
	float yCoord = objToSpawn.getFloat("loc_y");
	float zCoord = objToSpawn.getFloat("loc_z");
	float yaw = objToSpawn.getFloat("yaw");

	string spawnRoom = objToSpawn.getString("room");
	if(spawnRoom == null || spawnRoom.length() <= 0)
	{
		CustomerServiceLog("bad_spawner_data", "mining_cave - doSpawn The creature "+object+" could not be spawned in room: "+spawnRoom+" in dungeon: "+self);	
		return false;
	}

	obj_id room = getCellId(self, spawnRoom);
	if(!isValidId(room))
	{
		CustomerServiceLog("bad_spawner_data", "mining_cave - doSpawn The creature "+object+" could not be spawned in room: "+spawnRoom+" because the OID for that room was invalid. Dungeon: "+self);	
		return false;
	}	

	location objectLocation = new location (xCoord, yCoord, zCoord, planet, room);

	obj_id objectCreated = create.object (object, objectLocation);
	if(!isValidId(objectCreated))
	{
		CustomerServiceLog("bad_spawner_data", "mining_cave - doSpawn The creature "+object+" could not be spawned in room: "+spawnRoom+" because the creature was invalid or location wrong. Dungeon: "+self);	
		return false;
	}	

	string script = objToSpawn.getString("script");
	if(script != null && script.length() > 0)
	{
		//SPLIT for multiple
		string[] scripts = split(script, ',');
		for(int j = 0; j < scripts.length; j++)
		{
			if (!hasScript(objectCreated, scripts[j]))
			{
				attachScript(objectCreated, scripts[j]);
			}
		}
	}

	string objVars = objToSpawn.getString("objvar");
	if(objVars != null && objVars.length() > 0)
	{
		utils.setObjVarsListUsingSemiColon(objectCreated, objVars);
	}

	string objName = objToSpawn.getString("name");
	if(objName != null && objName.length() > 0)
	{
		setName(objectCreated, objName);
	}

	//Handles Miner death
	setObjVar(objectCreated, "spawn_number", spawn_num);
	setObjVar(objectCreated, "mom", self );
	utils.setScriptVar (self, "spawned" + spawn_num, objectCreated);	

	return true;
}

