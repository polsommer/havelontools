include library.trial;
include library.utils;

const float TARGET_SWITCH		= 6.0f;
const float STORM_PULSE			= 1.0f;
const float LIFESPAN			= 18.0f;

trigger OnAttach()
{
	setInvulnerable(self, true);
	//setCreatureCoverVisibility(self, false);

	messageTo(self, "acquireTarget", null, 1.0f, false);
	messageTo(self, "forceStormPulse", null, 2.0f, false);
	messageTo(self, "endLifeCycle", null, LIFESPAN, false);
	return SCRIPT_CONTINUE;
}

messageHandler acquireTarget()
{
	obj_id[] hateList = utils.getObjIdArrayScriptVar(self, trial.KIMARU_HATE_LIST);
	obj_id target = hateList[rand(0, hateList.length -1)];
	
	//pathTo(self, getLocation(target));
	follow(self, target, 0.0f, 0.1f);
	messageTo(self, "acquireTarget", null, TARGET_SWITCH, false);
	return SCRIPT_CONTINUE;
}

messageHandler forceStormPulse()
{
	location leadLoc = utils.findLocInFrontOfTarget(self, 1.0f);
	
//	playClientEffectLoc(getMaster(self), "appearance/pt_poi_pillar_electricity.prt", leadLoc, 0.75f);
	
	obj_id[] targets = trial.getValidTargetsInRadius(self, 5.0f);
	
	if (targets != null && targets.length > 0)
	{
		location loc = getLocation(self);
		string locationData = ""+loc.x+" "+loc.y+" "+loc.z+" "+loc.cell+" "+loc.x+" "+loc.y+" "+loc.z;
		queueCommand(getMaster(self), ##"kimaru_storm_pulse", targets[0], locationData, COMMAND_PRIORITY_DEFAULT);
	}
		
	messageTo(self, "forceStormPulse", null, STORM_PULSE, false);
	return SCRIPT_CONTINUE;
}

messageHandler endLifeCycle()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}