include library.trial;
include library.utils;

const int STATE_NONE			= 0;
const int STATE_ACTIVE			= 1;
const int STATE_DONE			= 2;

trigger OnObjectMenuRequest(obj_id player, menu_info item)
{
	int state = getEventState(self);
	

	switch(state)
	{
		case STATE_NONE:
			item.addRootMenu(menu_info_types.ITEM_USE, new string_id("instance", "hangar_state_none"));
			break;
			
		case STATE_ACTIVE:
			item.addRootMenu(menu_info_types.ITEM_USE, new string_id("instance", "hangar_state_active"));
			break;
			
		case STATE_DONE:
			item.addRootMenu(menu_info_types.ITEM_USE, new string_id("instance", "hangar_state_complete"));
			break;			
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{

	if (item != menu_info_types.ITEM_USE)
	{
		return SCRIPT_CONTINUE;
	}

	int state = getEventState(self);
	trial.bumpSession(self, "key");
	sendDirtyObjectMenuNotification (self);	
	switch(state)
	{
		//Start the event, do a bit of monkey work to avoid multiple signals.
		case STATE_NONE:
			messageTo(self, "kickoff_event", trial.getSessionDict(self, "key"), 1.0f, false);
			break;
		
		//Event in progress, do nothing.
		case STATE_ACTIVE:
			break;
			
		//Event in progress, do nothing.
		case STATE_DONE:
			break;			
	}

	return SCRIPT_CONTINUE;
}


int getEventState(obj_id self)
{
	return getIntObjVar(self, "event_state");
}

boolean isInactive(obj_id self)
{
	return getEventState(self) == STATE_NONE;
}

boolean isActive(obj_id self)
{
	return getEventState(self) == STATE_ACTIVE;
}

boolean isComplete(obj_id self)
{
	return getEventState(self) == STATE_DONE;
}

messageHandler kickoff_event()
{
	if (!trial.verifySession(self, params, "key"))
	{
		return SCRIPT_CONTINUE;
	}
	
	dictionary dict = trial.getSessionDict(trial.getTop(self));
	dict.put("triggerType", "triggerId");
	dict.put("triggerName", "spawn_krix");
	
	messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);
	return SCRIPT_CONTINUE;
}