include library.ai_lib;
include library.buff;
include library.combat;
include library.factions;
include library.prose;
include library.trial;
include library.utils;

const string HOTH_TURRET_DAMAGE_BUFF 		= "hoth_turret_damage_bonus";
const string PHASE_3_TURRET 			= "p3_turret";

trigger OnAttach()
{
	//Decrease Hitpoints in Phase 3 to make them more managable.
	//we can remove the damage buff if it's too hard for IMPs.
	if(hasObjVar(self, PHASE_3_TURRET))
	{
		buff.applyBuff(self, HOTH_TURRET_DAMAGE_BUFF);
		trial.setHp(self, rand(80000, 100000));
		return SCRIPT_CONTINUE;
	}
	buff.applyBuff(self, HOTH_TURRET_DAMAGE_BUFF);
	trial.setHp(self, rand(100000, 150000));
	return SCRIPT_CONTINUE;
}

messageHandler InstanceFaction()
{
	return SCRIPT_CONTINUE;
}

//when hoth turrets are bored, they choose a random ATAT and shoot at it.
messageHandler boredHothTurrets()
{
	//there are no AT-ATs in Phase 3
	if(hasObjVar(self, PHASE_3_TURRET))
	{
		return SCRIPT_CONTINUE;
	}
	//messageTime intervals
	float minMessageTime = 2.5f;
	float maxMessageTime = 7.5f;
	
	if(hasObjVar(self, "hoth_turret"))
	{
		obj_id turretTarget = getTarget(self);
		
		if(turretTarget == null)
		{
			//get the list of ATATs
			obj_id[] atats = trial.getObjectsInInstanceByObjVar(self, "isAtat");

			if(atats.length > 0)
			{
				//pick-an-atat
				int attackChoice = rand(0, atats.length -1);
				//the generator area is done - ATATs are invuln. BAIL!
				if(isInvulnerable(atats[attackChoice]))
				{
					return SCRIPT_CONTINUE;
				}
				
				//the ATAT chosen is dead - let's get another.
				if(isDead(atats[attackChoice]) || !canSee(self, atats[attackChoice]))
				{
					messageTo(self, "boredHothTurrets", null, 1.0f, false);
					return SCRIPT_CONTINUE;
				}	
				else
				{
					//Turrets must be within 700 meters to fire on the ATATs
					if(getDistance(self, atats[attackChoice]) > 700.0f)
					{
						messageTo(self, "boredHothTurrets", null, 10.0f, false);
						return SCRIPT_CONTINUE;
					}
					else
					{
						faceTo(self, atats[attackChoice]);
						//delay the shot to give the turret time to turn.	
						dictionary turretParams = new dictionary();
						turretParams.put("target", atats[attackChoice]);
						messageTo(self, "delayedHothTurretShot", turretParams, 1.0f, false);

						//setObjVar(self, "hitATAT", atats[attackChoice]);
						messageTo(self, "boredHothTurrets", null, getRandomTriggerTime(minMessageTime, maxMessageTime), false);
						return SCRIPT_CONTINUE;
					}
				}
			}
		}
		else
		{
			messageTo(self, "boredHothTurrets", null, getRandomTriggerTime(minMessageTime, maxMessageTime), false);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler delayedHothTurretShot()
{
	//let's get a player to see this.
	location loc = getLocation(self);
	obj_id player = getClosestPlayer(loc);
	
	if(!isIdValid(player))
	{
		player = self;
	}
		
	obj_id target = params.getObjId("target");
	//play a firing sound:::::::::PLAY_SOUND("sound/wep_atst_fire.snd")
	play2dNonLoopingSound(player, "sound/hoth_turret_bolt.snd");
	//draw the bolt particle
	createClientProjectileObjectToObject(player, "object/weapon/ranged/turret/shared_turret_energy.iff", self, "muzzle", target, "root", 125.0f, 3.0f, false, 0, 0, 0, 0);
	
	hothTurretShotApplyDamage(self, target, player);
	
	return SCRIPT_CONTINUE;
}

void hothTurretShotApplyDamage(obj_id turret, obj_id target, obj_id player)
{
	if(!isIdValid(turret))
		return;
	if(!isIdValid(target))
		return;
	if(!isIdValid(player))
		return;
	if(isInvulnerable(target))
		return;
	//initialize bolt damage - default amount is 2k just incase it breaks
	int boltDamage = 2000;
	//damage amount
	if(hasObjVar(turret, "isRebelInstance"))
	{
		boltDamage = rand(1500, 3000);
	}
	else
	{
		boltDamage = rand(15000, 20000); //Sprint Review Playtest Damage Amounts: rand(8000, 12500)
	}
	
	//debugging system message
	
	location loc = getLocation(turret);
	obj_id debugPlayer = getClosestPlayer(loc);
	if(isGod(debugPlayer) && hasObjVar(debugPlayer, "hoth.turretSpeak"))
	{
		sendSystemMessageTestingOnly(debugPlayer, "Turret (" + turret + ") hit ATAT (" + target + ") for: " + boltDamage + " points of damage.");
	}
	damage(target, DAMAGE_ENERGY, HIT_LOCATION_BODY, boltDamage);
}

float getRandomTriggerTime(float minTime, float maxTime)
{
	float triggerTime = rand(minTime, maxTime);
	
	return triggerTime;
}
















































































































