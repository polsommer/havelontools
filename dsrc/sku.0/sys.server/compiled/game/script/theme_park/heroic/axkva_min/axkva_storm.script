include library.ai_lib;
include library.trial;
include library.utils;

const float STORM_PULSE			= 1.0f;

trigger OnAttach()
{
	setInvulnerable(self, true);

	messageTo(self, "beginPath", null, 1.0f, false);
	messageTo(self, "forceStormPulse", null, 2.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler beginPath()
{
	location[] path = getLocationArrayObjVar(self, "path");
	patrolRandom(self, path);
	return SCRIPT_CONTINUE;
}

messageHandler forceStormPulse()
{
	location leadLoc = utils.findLocInFrontOfTarget(self, 1.0f);
	
	
	obj_id[] targets = trial.getValidTargetsInRadius(self, 5.0f);

	obj_id master = getMaster(self);
	
	if (!isIdValid(master) || ai_lib.isDead(master) || !ai_lib.isInCombat(master))
	{
		trial.cleanupObject(self);
		return SCRIPT_CONTINUE;
	}

	if (targets != null && targets.length > 0)
	{
		location loc = getLocation(self);
		string locationData = ""+loc.x+" "+loc.y+" "+loc.z+" "+loc.cell+" "+loc.x+" "+loc.y+" "+loc.z;
		queueCommand(getMaster(self), ##"axkva_whirl_blast", targets[0], locationData, COMMAND_PRIORITY_DEFAULT);
	}
		
	messageTo(self, "forceStormPulse", null, STORM_PULSE, false);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	obj_id master = getMaster(self);
	
	if (!isIdValid(master) || ai_lib.isDead(master))
	{
		trial.cleanupObject(self);
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}