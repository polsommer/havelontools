include library.ai_lib;
include library.chat;
include library.trial;
include library.utils;

// This function makes a mouse droid run in a square shape roughly 41 meters on a side.
void findNextTarget(obj_id self)
{
	if(ai_lib.isDead(self))
	{
		return;
	}

	obj_id dungeon = getTopMostContainer(self);

	if(!isIdValid(dungeon))
	{
		return;
	}

	location[] waypoints = new location[4];
	
	// Clockwise locations
	waypoints[0] = new location(20, 0, 30, getLocation(self).area, getLocation(self).cell);
	waypoints[1] = new location(20, 0, -10, getLocation(self).area, getLocation(self).cell);
	waypoints[2] = new location(-20, 0, -10, getLocation(self).area, getLocation(self).cell);
	waypoints[3] = new location(-20, 0, 30, getLocation(self).area, getLocation(self).cell);

	int waypoint;
	int lastWaypoint = -1;
	
	if(getMovementPercent(self) >= 1.0f)
	{
		setMovementPercent(self, 0.5f);
	}
	
	if(!utils.hasScriptVar(self, "currentWaypoint"))
	{
		waypoint = 0;
	}
	else
	{
		waypoint = lastWaypoint = utils.getIntScriptVar(self, "currentWaypoint");
	}
	
	// If we are within two meters of the current waypoint destination, then choose the next destination
	// based off of which mouse droid this is.
	if(utils.getDistance2D(waypoints[waypoint], getLocation(self)) < 2 && hasObjVar(self, "spawn_id"))
	{
		string whichMouse = getStringObjVar(self, "spawn_id");
		
		if(whichMouse.equals("mouse_droid1"))
		{
//			debugSpeakMsg(self, "Clockwise...");
			waypoint = (waypoint + 1 > 3 ? 0 : waypoint + 1); // Clockwise waypoint following.
		}
		else
		{
//			debugSpeakMsg(self, "Counter-clockwise...");
			waypoint = (waypoint - 1 < 0 ? 3 : waypoint - 1); // Counter-clockwise waypoint following.
		}
	}

	utils.setScriptVar(self, "currentWaypoint", waypoint);

//	if(waypoint != lastWaypoint)
	{
//		debugSpeakMsg(self, "Pathing..." + waypoints[waypoint].x + ", " + waypoints[waypoint].z + " distance: " + utils.getDistance2D(waypoints[waypoint], getLocation(self)) + " waypoint: " + waypoint);

		setHomeLocation(self, waypoints[waypoint]);

		pathTo(self, waypoints[waypoint]);
	}
}

messageHandler findTarget()
{
	if(!isIdValid(self))
		return SCRIPT_CONTINUE;

	// These mouse droids never engage in combat.
	if(hasScript(self, "ai.creature_combat"))
	{
		detachScript(self, "ai.ai");
		detachScript(self, "ai.creature_combat");
		detachScript(self, "ai.ai_combat_movement");
	}

	if(getLocomotion(self) != LOCOMOTION_RUNNING);
	{
		setMovementRun(self);
	}

	findNextTarget(self);
	
	dictionary sessionDict = new dictionary();
	
	messageTo(self, "findTarget", sessionDict, 1, false);

	return SCRIPT_CONTINUE;
}
