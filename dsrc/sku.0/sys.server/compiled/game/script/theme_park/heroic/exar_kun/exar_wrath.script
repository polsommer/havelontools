include library.buff;
include library.chat;
include library.combat;
include library.trial;


trigger OnAttach()
{
	trial.setHp(self, 545020);
	setObjVar(self, "isImmobile", true);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	setMovementPercent(self, 0.0f);
	playClientEffectObj(getHateTarget(self), "appearance/pt_force_meditate.prt", self, "");
	messageTo(self, "executeBlast", trial.getSessionDict(self, "blast"), 4.0f, false);
	messageTo(self, "applyWard", trial.getSessionDict(self, "ward"), 0.0f, false);
	buff.applyBuff(self, "mind_trick_immune");
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.bumpSession(self, "blast");
	trial.bumpSession(self, "ward");
	return SCRIPT_CONTINUE;
}

messageHandler executeBlast()
{
	if (!trial.verifySession(self, params, "blast"))
		return SCRIPT_CONTINUE;

	if (isDead(self))
	{
		clog("oh nos, I dead");
		return SCRIPT_CONTINUE;
	}

	obj_id hateTarget = getHateTarget(self);
	clog("Target = "+getName(hateTarget));
	obj_id weapon = getCurrentWeapon(hateTarget);
	clog("weapon = "+getEncodedName(weapon));
	int elementalType  = getWeaponElementalType(weapon);
	clog("Elemental Type = "+elementalType);

	switch(elementalType)
	{
		case DAMAGE_ELEMENTAL_HEAT:
				clog("HEAT");
				queueCommand(self, ##"kun_wrath_heat", hateTarget, "", COMMAND_PRIORITY_DEFAULT);
				break;
		case DAMAGE_ELEMENTAL_COLD:
				clog("COLD");
				queueCommand(self, ##"kun_wrath_cold", hateTarget, "", COMMAND_PRIORITY_DEFAULT);
				break;
		case DAMAGE_ELEMENTAL_ACID:
				clog("ACID");
				queueCommand(self, ##"kun_wrath_acid", hateTarget, "", COMMAND_PRIORITY_DEFAULT);
				break;
		case DAMAGE_ELEMENTAL_ELECTRICAL:
				clog("ELECTRICAL");
				queueCommand(self, ##"kun_wrath_electrical", hateTarget, "", COMMAND_PRIORITY_DEFAULT);
				break;
		default:
				clog("RANDOM");
				string[] randomBlast = {"heat", "cold", "acid", "electrical"};
				string blastChoice = randomBlast[rand(0, 3)];
				string blastCommand = "kun_wrath_"+blastChoice;
				queueCommand(self, getStringCrc(blastCommand.toLowerCase()), hateTarget, "", COMMAND_PRIORITY_DEFAULT);
				break;

	}

	messageTo(self, "executeBlast", trial.getSessionDict(self, "blast"), 4.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler applyWard()
{
	if (!trial.verifySession(self, params, "ward"))
		return SCRIPT_CONTINUE;

	if (isDead(self))
		return SCRIPT_CONTINUE;

	obj_id[] objects = trial.getAllObjectsInDungeon(trial.getTop(self));
	resizeable string[] wards = new string[0];
	wards.add("kun_wrath_ward_acid");
	wards.add("kun_wrath_ward_heat");
	wards.add("kun_wrath_ward_cold");
	wards.add("kun_wrath_ward_electrical");

	if (buff.hasBuff(self, "kun_wrath_ward_acid"))
		wards.remove("kun_wrath_ward_acid");

	if (buff.hasBuff(self, "kun_wrath_ward_heat"))
		wards.remove("kun_wrath_ward_heat");

	if (buff.hasBuff(self, "kun_wrath_ward_cold"))
		wards.remove("kun_wrath_ward_cold");

	if (buff.hasBuff(self, "kun_wrath_ward_electrical"))
		wards.remove("kun_wrath_ward_electrical");

	string newWard = wards[rand(0, wards.length -1)];
	for(int i=0;i<objects.length;i++)
	{
		if (isPlayer(objects[i]) || isMob(objects[i]))
		{
			buff.applyBuff(objects[i], newWard);
		}
	}

	messageTo(self, "applyWard", trial.getSessionDict(self, "ward"), 8.0f, false);
	return SCRIPT_CONTINUE;
}

void clog(string message)
{
	//chat.chat(getSelf(), message);
}