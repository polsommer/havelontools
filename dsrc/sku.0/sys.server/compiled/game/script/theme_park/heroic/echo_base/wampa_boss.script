include library.ai_lib;
include library.buff;
include library.combat;
include library.create;
include library.static_item;
include library.stealth;
include library.trial;
include library.utils;

const string ADDS_VAR_BASE		= "uncleJoeAdds";
const string TEN_PERCENT		= ADDS_VAR_BASE + ".tenPercent";
const string TWENTY_PERCENT		= ADDS_VAR_BASE + ".twentyPercent";
const string FORTY_PERCENT		= ADDS_VAR_BASE + ".fortyPercent";
const string SIXTY_PERCENT		= ADDS_VAR_BASE + ".sixtyPercent";
const string EIGHTY_PERCENT		= ADDS_VAR_BASE + ".eightyPercent";

const string WAMPA_DNA_LOOT_ITEM = "item_wampa_dna";
const int WAMPA_DNA_LOOT_CHANCE = 5;
const int UNCLE_JOE_MAX_DISTANCE = 104;

trigger OnAttach()
{	
	trial.setHp(self, trial.HP_UNCLE_JOE);
	applySkillStatisticModifier(self, "expertise_glancing_blow_reduction", 100);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	buff.applyBuff(self, "open_balance_buff", -1.0f);
	
	obj_id[] players = getPlayerCreaturesInRange(self, 250.0f);
	if ( players != null && players.length > 0 )
	{
		for ( int i = 0; i < players.length; i++ )
		{
			obj_id player = players[i];
			if ( isIdValid(player) && exists(player) && !isIncapacitated(player) && !isDead(player) )
			{
				addHate(self, player, 1000.0f);
				startCombat(self, player);
			}
		}
	}
	
	messageTo(self, "handleUncleJoeDistanceCheck", null, 3, false);
	//messageTo(self, "handleUncleJoeHateTesting", null, 9, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleUncleJoeDistanceCheck()
{
	location currentLoc = getLocation(self);
	location creationLoc = aiGetHomeLocation(self);

	float distanceCheck = utils.getDistance2D(currentLoc, creationLoc);
	if ( distanceCheck > UNCLE_JOE_MAX_DISTANCE )
	{
		int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
		setAttrib(self, HEALTH, maxHealth);
		setInvulnerable(self, true);	
		stopCombat(self);
	}
	else
	{
		messageTo(self, "handleUncleJoeDistanceCheck", null, 3, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnHateTargetAdded(obj_id target)
{
	reportHateListTesting(self, "OnHateTargetAdded");
	return SCRIPT_CONTINUE;
}

trigger OnHateTargetChanged(obj_id target)
{
	reportHateListTesting(self, "OnHateTargetChanged");
	return SCRIPT_CONTINUE;
}

trigger OnHateTargetRemoved(obj_id target)
{
	if ( !isInvulnerable(self) )
	{
		dictionary webster = new dictionary();
		webster.put("target", target);
		messageTo(self, "handleUncleJoePutsYouBackIntoCombat", webster, 2, false);
	}
	
	reportHateListTesting(self, "OnHateTargetRemoved");
	return SCRIPT_CONTINUE;
}

messageHandler handleUncleJoePutsYouBackIntoCombat()
{
	if ( params == null || params.isEmpty() )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( !isInvulnerable(self) )
	{
		obj_id target = params.getObjId("target");
		if ( isIdValid(target) )
		{
			if ( !isDead(target) && !isIncapacitated(target) && pvpCanAttack(self, target) )
			{
				stealth.checkForAndMakeVisible(target);

				addHate(self, target, 1000.0f);
				startCombat(self, target);
			}
		}

		reportHateListTesting(self, "handleUncleJoePutsYouBackIntoCombat");
	}
	return SCRIPT_CONTINUE;	
}

messageHandler handleUncleJoeHateTesting()
{
	reportHateListTesting(self, "handleUncleJoeHateTesting");
	messageTo(self, "handleUncleJoeHateTesting", null, 19, false);
	return SCRIPT_CONTINUE;	
}

void reportHateListTesting(obj_id self, string from)
{
	string hateReport = "Uncle Joe Hate List \n";
	hateReport += 		"("+from+") \n";
	hateReport += 		"------------------- \n";
	obj_id[] uncleJoeHateList = getHateList(self);
	if ( uncleJoeHateList != null && uncleJoeHateList.length > 0  )
	{
		for ( int j=0; j<uncleJoeHateList.length; j++ )
		{
			obj_id hated = uncleJoeHateList[j];
			string hatedName = getName(hated);
			hateReport += "# "+j+": "+hatedName+" ("+hated+") \n";
		}
	}

	obj_id[] players = getPlayerCreaturesInRange(self, 250.0f);
	if ( players != null && players.length > 0 )
	{
		for ( int i=0; i<players.length; i++ )
		{
			obj_id player = players[i];
			if ( isGod(player) && hasObjVar(player, "uncleJoeHateTesting") )
			{
				sendSystemMessage(player, hateReport, "");
			}
		}
	}
}

trigger OnExitedCombat()
{
	reportHateListTesting(self, "OnExitedCombat");
	
	if ( utils.hasScriptVarTree(self, ADDS_VAR_BASE) )
	{
		utils.removeScriptVarTree(self, ADDS_VAR_BASE);
	}
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{	
	int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
	int currentHealth = getAttrib(self, HEALTH);
	
	//sendSystemMessage(attacker, "currentHealth = "+currentHealth, "");
	//sendSystemMessage(attacker, "percent of maxHealth = "+100*currentHealth/maxHealth, "");

	if ( currentHealth <= maxHealth * 0.1 && !utils.hasScriptVar(self, TEN_PERCENT) )
	{
		messageTo(self, "summon_adds", null, 0.0f, false);
		utils.setScriptVar(self, TEN_PERCENT, 1);
	}
	else if ( currentHealth <= maxHealth * 0.2 && !utils.hasScriptVar(self, TWENTY_PERCENT) )
	{
		messageTo(self, "summon_adds", null, 0.0f, false);
		utils.setScriptVar(self, TWENTY_PERCENT, 1);
	}
	else if ( currentHealth <= maxHealth * 0.4 && !utils.hasScriptVar(self, FORTY_PERCENT) )
	{
		messageTo(self, "summon_adds", null, 0.0f, false);
		utils.setScriptVar(self, FORTY_PERCENT, 1);
	}
	else if ( currentHealth <= maxHealth * 0.6 && !utils.hasScriptVar(self, SIXTY_PERCENT) )
	{
		messageTo(self, "summon_adds", null, 0.0f, false);
		utils.setScriptVar(self, SIXTY_PERCENT, 1);
	}
	else if ( currentHealth <= maxHealth * 0.8 && !utils.hasScriptVar(self, EIGHTY_PERCENT) )
	{
		messageTo(self, "summon_adds", null, 0.0f, false);
		utils.setScriptVar(self, EIGHTY_PERCENT, 1);
	}

	return SCRIPT_CONTINUE;
}

messageHandler summon_adds()
{
	if (isDead(self))
		return SCRIPT_CONTINUE;
	
	obj_id parent = trial.getParent(self);
	if ( isIdValid(parent) )
	{
		dictionary dict = trial.getSessionDict(parent);
		dict.put("triggerType", "triggerId");
		dict.put("triggerName", "summon_wampas");
		messageTo(parent, "triggerFired", dict, 0.0f, false);
	
		messageTo(self, "wampaBossLinkAgro", null, 1.0f, false);
	}

	return SCRIPT_CONTINUE;	
}

messageHandler wampaBossLinkAgro()
{
	if (isDead(self))
		return SCRIPT_CONTINUE;
	
	ai_lib.establishAgroLink(self, 250.0f);
	return SCRIPT_CONTINUE;	
}

trigger OnDestroy()
{
	obj_id[] children = trial.getChildArray(self);
	if ( children != null && children.length > 0 )
	{
		for ( int i = 0; i < children.length; i++ )
		{
			obj_id child = children[i];
			if ( isIdValid(child) && exists(child) )
			{
				trial.cleanupObject(child);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler aiCorpsePrepared()
{
	//determine for Uncle Joe to drop wampa dna
	int chanceDna = rand(1,100);
	if ( chanceDna > WAMPA_DNA_LOOT_CHANCE )
	{
		// you dont get one.
		return SCRIPT_CONTINUE;
	}
	
	//createEnzyme
	obj_id inv = utils.getInventoryContainer(self);
	obj_id dna = static_item.createNewItemFunction(WAMPA_DNA_LOOT_ITEM, inv);
	
	return SCRIPT_CONTINUE;
}
