include library.ai_lib;
include library.chat;
include library.hue;
include library.trial;
include library.utils;

void findNextTarget(obj_id self)
{
	if(ai_lib.isDead(self))
	{
		return;
	}

	obj_id dungeon = getTopMostContainer(self);
	obj_id target = null;

//	debugSpeakMsg(self, "Acquiring target...");

	if(!isIdValid(dungeon))
	{
//		debugSpeakMsg(self, "Can't find targets due to not being in a cell.");
		return;
	}
	
	// Get a new target
	obj_id[] targets = trial.getNonStealthedTargetsInCell(dungeon, "r1");

	if(targets == null || targets.length <= 0)
	{
		return;
	}

	target = trial.getClosest(self, targets);
	
	if(!isIdValid(target))
	{
		dictionary sessionDict = new dictionary();

		messageTo(dungeon, "ig88_failed", sessionDict, 0, false);
		return;
	}

	int lastShieldTime = utils.getIntScriptVar(self, "lastShieldTime");
	
	if(getGameTime() - lastShieldTime > 120)
	{
		utils.setScriptVar(self, "lastShieldTime", getGameTime());
		queueCommand(self, ##"ig88_droideka_shield", self, "", COMMAND_PRIORITY_DEFAULT);
	}

	// Attack target
	setHate(self, target, 5000);
}

messageHandler findTarget()
{
	if(!isIdValid(self))
		return SCRIPT_CONTINUE;

	findNextTarget(self);

	dictionary sessionDict = new dictionary();
	
	messageTo(self, "findTarget", sessionDict, 1, false);

	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	findNextTarget(self);

	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	obj_id dungeon = getTopMostContainer(self);

	if(!isIdValid(dungeon))
	{
		return SCRIPT_CONTINUE;
	}

	dictionary sessionDict = new dictionary();

	messageTo(self, "initializeDroid", sessionDict, 0.25f, false);

	return SCRIPT_CONTINUE;
}

messageHandler initializeDroid()
{
	if(!isIdValid(self))
		return SCRIPT_CONTINUE;

	// Set up its good looks...
	hue.setColor(self, hue.INDEX_1, 7); // Light pink 9

	findNextTarget(self);

	return SCRIPT_CONTINUE;
}