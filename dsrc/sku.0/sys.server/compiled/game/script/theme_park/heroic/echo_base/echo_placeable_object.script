include library.buff;
include library.create;
include library.factions;
include library.trial;
include library.utils;


trigger OnAttach()
{
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
	}
	else
	{
		messageTo(self, "handleCheckForBarricadeCleanup", null, 6.0f, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleCheckForBarricadeCleanup()
{
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
	}
	
	messageTo(self, "handleCheckForBarricadeCleanup", null, 6.0f, false);
	return SCRIPT_CONTINUE;
}

boolean isValidBarricadeLocation(obj_id self)
{
	location here = getLocation(getTopMostContainer(self));
	if ( !here.area.equals("adventure2") )
	{
		return false;
	}
	
	return true;
}

messageHandler destroyHothBarricade()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{	
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
		return SCRIPT_CONTINUE;
	}
	
	if ( !utils.isNestedWithin(self, player) )
	{
		return SCRIPT_CONTINUE;
	}
	
	mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("theme_park/heroic", "hoth_object_deploy"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	return SCRIPT_CONTINUE;
}

trigger OnGroundTargetLoc(obj_id player, int menuItem, float x, float y, float z)
{
	float yaw = getYaw(player);
	location playerLoc = getLocation(player);

	if ( !playerLoc.area.equals("adventure2") )
	{
		trial.cleanupObject(self);
		return SCRIPT_CONTINUE;
	}
	
	if ( menuItem == menu_info_types.ITEM_USE )
	{
		if (!utils.isNestedWithin(self, player) )
		{
			return SCRIPT_CONTINUE;
		}

		location createLoc = new location(x, y, z, playerLoc.area, playerLoc.cell);

		string template = getStringObjVar(self, "object_template");
		if ( template != null && template.length() > 0 )
		{
			obj_id barricade = create.object(template, createLoc);
			if ( isIdValid(barricade) )
			{		
				if ( trial.registerObjectWithSequencer(barricade) )
				{
					setYaw(barricade, yaw);
					trial.cleanupObject(self);
				}
				else
				{
					trial.cleanupObject(barricade);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

