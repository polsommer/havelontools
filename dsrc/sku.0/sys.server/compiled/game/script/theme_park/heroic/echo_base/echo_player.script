include library.badge;
include library.factions;
include library.groundquests;
include library.instance;
include library.locations;
include library.utils;
include library.vehicle;

//constants:
const string BADGE_PLANET_HOTH = "bdg_hoth_planet";
string[] QUEST_TO_CLEAR =
			{
				"imperial_phase_1",
				"rebel_phase_1",
				"heroic_echo_imperial_phase_2",
				"heroic_echo_rebel_phase_2",
				"heroic_echo_rebel_phase_2_v2",
				"heroic_echo_rebel_evac",
				"heroic_echo_imperial_evac"
			};

trigger OnAttach()
{
	// Ending any conversations opened as they launched into the instance so that they do not
	// get stuck in a state that blocks having other conversations.
	npcEndConversation(self);
	
	if ( utils.hasScriptVar(self, "echo_player_setup"))
		utils.removeScriptVar(self, "echo_player_setup");

	messageTo(self, "handleEchoPlayerInitialSetup", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( utils.hasScriptVar(self, "echo_player_setup"))
		utils.removeScriptVar(self, "echo_player_setup");

	messageTo(self, "handleEchoPlayerInitialSetup", null, 9, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleEchoPlayerInitialSetup()
{	
	if ( utils.hasScriptVar(self, "echoBaseDeath"))
		utils.removeScriptVar(self, "echoBaseDeath");
		
	if ( !utils.hasScriptVar(self, "echo_player_setup") )
	{
		utils.setScriptVar(self, "echo_player_setup", true);
		messageTo(self, "checkForActiveHothTrackerQuest", null, 59, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	string area = locations.getBuildoutAreaName(self);

	if (area == null || area == "")
	{
		utils.removeScriptVar(self, factions.IN_ADHOC_PVP_AREA);
		detachScript(self, "theme_park.heroic.echo_base.echo_player");
		return SCRIPT_CONTINUE;
	}

	if (!area.equals("echo_base"))
	{
		utils.removeScriptVar(self, factions.IN_ADHOC_PVP_AREA);
		pvpMakeCovert(self);
		detachScript(self, "theme_park.heroic.echo_base.echo_player");
		return SCRIPT_CONTINUE;
	}

	if ( !utils.hasScriptVar(self, "echoBaseDeath"))
	{
		clearCurrentEchoQuest(self);
		messageTo(self, "update_quest", null, 10.0f, false);
	}
	else
	{
		utils.removeScriptVar(self, "echoBaseDeath");
	}

	obj_id[] waypoints = getWaypointsInDatapad(self);
	utils.setScriptVar(self, factions.IN_ADHOC_PVP_AREA, true);
	pvpMakeDeclared(self);

	if (waypoints != null && waypoints.length > 0)
	{
		for (int i=0;i<waypoints.length;i++)
		{
			location wpLoc = getWaypointLocation(waypoints[i]);
			if (wpLoc.area.equals("adventure2"))
				destroyWaypointInDatapad(waypoints[i], self);
		}
	}

	grantPlanetHothBadge(self);
	messageTo(self, "checkForHothMusic", null, 4, false);
	return SCRIPT_CONTINUE;
}

trigger OnNewbieTutorialResponse(string action)
{
    if ( action.equals("clientReady") )
    {
		location here = getLocation(self);
		if ( here.area.equals("adventure2") )
		{
			//messageTo(self, "checkForHothMusic", null, 4, false);
		}
    }
	return SCRIPT_OVERRIDE;
}

trigger OnRecapacitated()
{
	pvpMakeDeclared(self);
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	if ( utils.hasScriptVar(self, "echoBaseDeath"))
		utils.removeScriptVar(self, "echoBaseDeath");

	checkForBattlefieldVehicleAllowedZones(self);
	
	clearCurrentEchoQuest(self);

	obj_id[] waypoints = getWaypointsInDatapad(self);

	if (waypoints != null && waypoints.length > 0)
	{
		for (int i=0;i<waypoints.length;i++)
		{
			location wpLoc = getWaypointLocation(waypoints[i]);
			if(wpLoc.area.equals("adventure2"))
			{
				destroyWaypointInDatapad(waypoints[i], self);
			}
		}
	}
	
	//make the player covert so he doesn't get PWNED on Dathomir
	utils.removeScriptVar(self, factions.IN_ADHOC_PVP_AREA);
	pvpMakeCovert(self);
	
	return SCRIPT_CONTINUE;
}

void checkForBattlefieldVehicleAllowedZones(obj_id self)
{
	obj_id playerCurrentMount = getMountId(self);
	if( isIdValid(playerCurrentMount) )
	{
		if ( vehicle.isBattlefieldVehicle(playerCurrentMount) )
		{
			messageTo(playerCurrentMount, "handleCheckForAllowedZones", null, 0, false);
		}
		return;
	}
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	utils.setScriptVar(self, "echoBaseDeath", true);
	return SCRIPT_CONTINUE;
}

messageHandler checkForActiveHothTrackerQuest()
{
	location here = getLocation(self);

	if ( here.area.equals("adventure2") )
	{
		boolean questFound = false;
		for (int i = 0; i < QUEST_TO_CLEAR.length; ++i)
		{
			if(groundquests.isQuestActive(self, QUEST_TO_CLEAR[i]))
			{
				questFound = true;
			}
		}

		if ( !questFound )
		{
			messageTo(self, "update_quest", null, 1.0f, false);
		}
	}
	
	utils.removeScriptVar(self, "echo_player_setup");
	messageTo(self, "checkForActiveHothTrackerQuest", null, 19, false);
	return SCRIPT_CONTINUE;
}

messageHandler checkForHothMusic()
{
	obj_id instanceController = instance.getAreaInstanceController(self);

	if ( isIdValid(instanceController) )
	{
		if ( utils.hasScriptVar(instanceController, "instance_persistedMusic") )
		{
			string music = utils.getStringScriptVar(instanceController, "instance_persistedMusic");
			if ( music != null && music.length() > 0 )
			{
				playMusic(self, self, music, 0, false);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler update_quest()
{
	if ( utils.hasScriptVar(self, "echoBaseDeath"))
		utils.removeScriptVar(self, "echoBaseDeath");

	dictionary dict = new dictionary();
	dict.put("player", self);

	obj_id[] allObj = utils.getAllObjectsInBuildoutArea(self);
	obj_id quest_manager = obj_id.NULL_ID;

	if (allObj == null || allObj.length == 0)
		return SCRIPT_CONTINUE;

	for (int i=0;i<allObj.length;i++)
	{
		if (hasScript(allObj[i], "theme_park.heroic.echo_base.echo_quest_tracker"))
		{
			quest_manager = allObj[i];
			break;
		}
	}

	if (!isIdValid(quest_manager))
	{
		return SCRIPT_CONTINUE;
	}

	messageTo(quest_manager, "requestUpdatePlayer", dict, 0.0f, false);
	return SCRIPT_CONTINUE;
}

void clearCurrentEchoQuest(obj_id self)
{
	for (int i = 0; i < QUEST_TO_CLEAR.length; ++i)
	{
		if(groundquests.isQuestActive(self, QUEST_TO_CLEAR[i]))
			groundquests.clearQuest(self, QUEST_TO_CLEAR[i]);
	}

}

void grantPlanetHothBadge(obj_id player)
{
	if(isIdValid(player) && exists(player) && !badge.hasBadge(player, BADGE_PLANET_HOTH))
	{
		dictionary dict = new dictionary();
		dict.put("player", player);
		//delay 20 seconds to let them load in
		messageTo(player, "delayGrantPlanetHothBadge", dict, 20.0f, false);
	}
}

messageHandler delayGrantPlanetHothBadge()
{
	obj_id player = params.getObjId("player");

	if(isIdValid(player) && exists(player) && !badge.hasBadge(player, BADGE_PLANET_HOTH))
	{
		badge.grantBadge(player, BADGE_PLANET_HOTH);
	}

	return SCRIPT_CONTINUE;
}

//dismount the player that is trying to enter echo base
messageHandler dismountHothPlayer()
{
	boolean isRidingMount = (getState(self, STATE_RIDING_MOUNT) > 0);
	obj_id  mountId       = (isRidingMount ? getMountId(self) : null);
	string creature_name = getName(mountId);
	if(isRidingMount)
	{
		if(vehicle.isBattlefieldVehicle(mountId))
		{
			queueCommand(self, ##"battlefieldDismount", self, creature_name, COMMAND_PRIORITY_FRONT);

			setYaw(mountId, getYaw(mountId) + 180.0f);
		}
		else
		{
			queueCommand(self, ##"dismount", self, creature_name, COMMAND_PRIORITY_FRONT);
		}

	}
	return SCRIPT_CONTINUE;
}
