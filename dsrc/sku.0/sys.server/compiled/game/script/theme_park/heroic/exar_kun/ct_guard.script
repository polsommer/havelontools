include library.buff;
include library.chat;
include library.trial;

trigger OnAttach()
{
	trial.setHp(self, 65000);
	setName(self, "a Caretaker Protector");
	return SCRIPT_CONTINUE;
}
messageHandler start_boss_buff()
{
	messageTo(self, "buff_boss", trial.getSessionDict(self, "buff"), 0.0f, false);
	buff.applyBuff(self, "caretaker_guard_buff");
	return SCRIPT_CONTINUE;
}

messageHandler buff_boss()
{
	if (!trial.verifySession(self, params, "buff"))
		return SCRIPT_CONTINUE;
		
	obj_id boss = getFirstObjectWithScript(getLocation(self), 200.0f, "theme_park.heroic.exar_kun.caretaker");
	if (!isIdValid(boss))
		return SCRIPT_CONTINUE;
		
	queueCommand(self, ##"ct_guard_buff", boss, "", COMMAND_PRIORITY_DEFAULT);
	messageTo(self, "buff_boss", trial.getSessionDict(self, "buff"), rand(12.0f, 30.0f), false);
	return SCRIPT_CONTINUE;
}

messageHandler activateGuard()
{
	trial.bumpSession(self, "buff");
	buff.removeBuff(self, "caretaker_guard_buff");
	setInvulnerable(self, false);
	obj_id prisoner = getFirstObjectWithScript(getLocation(self), 200.0f, "theme_park.heroic.exar_kun.ct_prisoner");
	faceTo(self, prisoner);
	chat.chat(self, "Do not interfere!");
	kill(prisoner);
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	messageTo(self, "cleanup", null, 3.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler cleanup()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}