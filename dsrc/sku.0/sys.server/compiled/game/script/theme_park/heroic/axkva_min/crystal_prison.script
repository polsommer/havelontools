include library.ai_lib;
include library.buff;
include library.trial;


trigger OnAttach()
{
	messageTo(self, "validateTarget", null, 1.0f, false);
	messageTo(self, "cleanupSelf", null, 60.0f, false);
	setupSelf(self);
	trial.markAsTempObject(self, true);
	return SCRIPT_CONTINUE;
}

void setupSelf(obj_id self)
{
	setMaxHitpoints(self, 50000);
	setHitpoints(self, 50000);
	setInvulnerable(self, false);	
}

trigger OnObjectDisabled (obj_id killer)
{
	location death = getLocation( self );
	playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
	playClientEffectLoc(killer, "clienteffect/combat_explosion_lair_large.cef", death, 0);


	setInvulnerable( self, true );
	obj_id[] enemies = getWhoIsTargetingMe( self );
	if ( enemies != null && enemies.length > 1 )
	{
		for ( int i = 0; i < enemies.length; i++ )
		{
			if ( isPlayer( enemies[i] ) )
			{
				setTarget( enemies[i], null );
				setCombatTarget( enemies[i], null );
			}
		}
	}
	
	obj_id player = getObjIdObjVar(self, "player");
	if (isIdValid(player) && exists(player) && !isDead(player))
	{
		buff.removeBuff(player, "axkva_crystalize");
	}
	
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler validateTarget()
{
	if (!isIdValid(self) || !exists(self))
		return SCRIPT_CONTINUE;
		
	obj_id player = getObjIdObjVar(self, "player");
	
	if (!isIdValid(player) || !exists(player) || isDead(player))
	{
		messageTo(self, "cleanupSelf", null, 0.0f, false);
		return SCRIPT_CONTINUE;
	}
	
	obj_id axkva = trial.getParent(self);
	
	if (!isIdValid(axkva) || !exists(axkva) || isDead(axkva) || !ai_lib.isInCombat(axkva))
	{
		messageTo(self, "cleanupSelf", null, 0.0f, false);
		return SCRIPT_CONTINUE;
	}
	

	queueCommand(axkva, ##"axkva_drain", player, "", COMMAND_PRIORITY_DEFAULT);
	messageTo(self, "validateTarget", null, 2.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler cleanupSelf()
{
	obj_id player = getObjIdObjVar(self, "player");
	if (isIdValid(player) && exists(player) && !isDead(player))
	{
		buff.removeBuff(player, "axkva_crystalize");
	}
	
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}