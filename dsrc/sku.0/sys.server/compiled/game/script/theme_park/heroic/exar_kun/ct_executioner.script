include library.ai_lib;
include library.buff;
include library.chat;
include library.trial;

trigger OnAttach()
{
	detachScript(self, "ai.creature_combat");
	//buff.applyBuff(self, "open_add_debuff");
	return SCRIPT_CONTINUE;	
}

trigger OnMoveMoving()
{
	setMovementWalk(self);
	aiEquipPrimaryWeapon(self);
	return SCRIPT_CONTINUE;
}

messageHandler kill_prisoner()
{
	setInvulnerable(self, true);
	messageTo(self, "handleDelayedExecute", null, 3.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleDelayedExecute()
{
	obj_id[] prisoner = trial.getObjectsInDungeonWithScript(trial.getTop(self), "theme_park.heroic.exar_kun.ct_prisoner");
	for (int i=0;i<prisoner.length;i++)
	{
		kill(prisoner[i]);
	}
	
	messageTo(self, "cleanup", null, 5.0f, false);
	chat.chat(self, "Where is your god now!");
	
	queueCommand(self, ##"executioner_swipe", prisoner[0], "", COMMAND_PRIORITY_IMMEDIATE);

	dictionary dict = trial.getSessionDict(trial.getTop(self));
	dict.put("triggerType", "triggerId");
	dict.put("triggerName", "spawn_executioner");
	messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);

	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	if (hasObjVar(self, "stop_recording"))
		return SCRIPT_CONTINUE;
		
	float max = (float)getMaxHealth(self);
	float current = (float)getHealth(self);
	float ratio = current/max;

	if (ratio <= 0.2)
	{
		
		failExecute(self);
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

messageHandler cleanup()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

void failExecute(obj_id self)
{
	chat.chat(self, "I have failed the master!");
	setInvulnerable(self, true);
	stop(self);
	messageTo(self, "cleanup", null, 3.0f, false);
	
	dictionary dict = trial.getSessionDict(trial.getTop(self));
	dict.put("triggerType", "triggerId");
	dict.put("triggerName", "fail_execute");
	messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);
	
}