include library.trial;
include library.utils;

trigger OnAttach()
{
	findWarden(self);
	messageTo(self, "burn_hall", null, 2.0f, false);
	return SCRIPT_CONTINUE;
}

void findWarden(obj_id self)
{
	obj_id[] objects = trial.getObjectsInDungeonWithObjVar(trial.getTop(self), "spawn_id");
	
	if (objects == null || objects.length == 0)
		return;
		
	obj_id warden = null;
	
	for (int i=0;i<objects.length;i++)
	{
		if (!hasObjVar(objects[i], "spawn_id"))
			continue;
			
		if (getStringObjVar(objects[i], "spawn_id").equals("warden"))
			warden = objects[i];
	}
	
	trial.setParent(warden, self, true);
}

messageHandler burn_hall()
{
	obj_id[] players = trial.getValidTargetsInCell(trial.getTop(self), "r1");
	
	if (players == null || players.length == 0)
	{
		messageTo(self, "burn_hall", null, 1.0f, false);
		return SCRIPT_CONTINUE;
	}

	for (int i=0;i<players.length;i++)
	{
		location loc = getLocation(players[i]);
		string locationData = ""+loc.x+" "+loc.y+" "+loc.z+" "+loc.cell+" "+loc.x+" "+loc.y+" "+loc.z;
		queueCommand(trial.getParent(self), ##"axkva_warden_flame", players[i], locationData, COMMAND_PRIORITY_DEFAULT);
	
	}

	messageTo(self, "burn_hall", null, 1.0f, false);
	
	return SCRIPT_CONTINUE;
}