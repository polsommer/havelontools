include library.buff;
include library.factions;
include library.groundquests;
include library.restuss_event;
include library.static_item;
include library.trial;
include library.utils;


trigger OnAttach()
{
	if ( isValidBarricadeLocation(self) )
	{
		factions.setFaction(self, "Rebel", true, 0);
		messageTo(self, "handleHothRebelBarricade", null, 2, false);
	}
	else
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleHothRebelBarricade()
{
	obj_id[] objects = getObjectsInRange(self, 5.0f);
	if ( objects != null && objects.length > 0 )
	{
		for ( int i = 0; i < objects.length; i++ )
		{
			obj_id object = objects[i];
			if ( isIdValid(object) )
			{
				if ( factions.isRebel(object) && isMob(object) )
				{
					buff.applyBuff(object, self, "barricade_defender");
				}
			}
		}
	}
	
	messageTo(self, "handleHothRebelBarricade", null, 2, false);
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler destroyHothBarricade()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

boolean isValidBarricadeLocation(obj_id self)
{
	location here = getLocation(getTopMostContainer(self));
	if ( !here.area.equals("adventure2") )
	{
		return false;
	}
	
	return true;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{	
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
		return SCRIPT_CONTINUE;
	}
	
	if ( utils.isNestedWithin(self, player) )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( hasObjVar(self, "unmoveableBarricade") )
	{
		return SCRIPT_CONTINUE;
	}
	
	mi.addRootMenu (menu_info_types.SERVER_MENU1, new string_id("theme_park/heroic", "hoth_barricade_pickup"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int menuItem)
{
	if ( !isValidBarricadeLocation(self) )
	{
		messageTo(self, "destroyHothBarricade", null, 1.0f, false);
		return SCRIPT_CONTINUE;
	}
	
	if ( menuItem == menu_info_types.SERVER_MENU1 )
	{
		if ( utils.isNestedWithin(self, player) )
		{
			return SCRIPT_CONTINUE;
		}
		
		if ( hasObjVar(self, "unmoveableBarricade") )
		{
			return SCRIPT_CONTINUE;
		}

		if ( getHitpoints(self) == getMaxHitpoints(self) )
		{
			string staticItem = "hoth_rebel_barricade_inventory";					
			obj_id inv = getObjectInSlot(player, "inventory");
			obj_id item = static_item.createNewItemFunction(staticItem, inv);
			if ( isIdValid(item) )
			{
				if ( trial.registerObjectWithSequencer(item) )
				{
					groundquests.sendPlacedInInventorySystemMessage(player, item);
					trial.cleanupObject(self);
				}
				else
				{
					trial.cleanupObject(item);
				}
			}
		}
		else
		{
			sendSystemMessage(player, new string_id("theme_park/heroic", "hoth_barricade_cannot_pickup"));
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	handleDestroyBarricade(self, killer);

 	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled(obj_id killer)
{
	handleDestroyBarricade(self, killer);
	return SCRIPT_CONTINUE;
}
void handleDestroyBarricade(obj_id self, obj_id killer)
{
	location death = getLocation( self );
	playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
	playClientEffectLoc(killer, "clienteffect/combat_explosion_lair_large.cef", death, 0);

	setInvulnerable( self, true );
	messageTo( self, "destroyHothBarricade", null, 1f, false );

 	return;
}

