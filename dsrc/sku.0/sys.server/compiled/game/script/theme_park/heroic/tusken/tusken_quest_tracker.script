include library.groundquests;
include library.utils;

const string PHASE			= "phase";
const string DEAD_CITIZEN		= "citizen";
const string P1_GRANT			= "heroic_tusken_tracking_01";
const string P1_COMPLETE		= "heroic_tusken_phase1_complete";
const string[] P2_GRANT			= 
					{
						"heroic_tusken_tracking_02a",
						"heroic_tusken_tracking_02"
					};
					
const string P2_COMPLTE			= "heroic_tusken_phase2_complete";

const string P3_GRANT			= "heroic_tusken_tracking_03";
const string P3_COMPLETE		= "heroic_tusken_phase3_complete";

const string[] P1			=
					{
						"heroic_tusken_cantina",
						"heroic_tusken_starport",
						"heroic_tusken_watto",
						"heroic_tusken_combat",
						"heroic_tusken_university",
						"heroic_tusken_medcenter",
						"heroic_tusken_cloning",
						"heroic_tusken_hotel"						
					};
					
const string[] P2			= 
					{
						"heroic_tusken_starport_crew_01",
						"heroic_tusken_starport_crew_02",
						"heroic_tusken_starport_crew_03",
						"heroic_tusken_watto_crew_01",
						"heroic_tusken_watto_crew_02",
						"heroic_tusken_watto_crew_03",
						"heroic_tusken_combat_crew_01",
						"heroic_tusken_combat_crew_02",
						"heroic_tusken_combat_crew_03",
						"heroic_tusken_university_crew_01",
						"heroic_tusken_university_crew_02",
						"heroic_tusken_university_crew_03",
						"heroic_tusken_medcenter_crew_01",
						"heroic_tusken_medcenter_crew_02",
						"heroic_tusken_medcenter_crew_03",
						"heroic_tusken_cloning_crew_01",
						"heroic_tusken_cloning_crew_02",
						"heroic_tusken_cloning_crew_03"
					};


					
trigger OnAttach()
{
	setObjVar(self, PHASE, 1);
	setObjVar(self, DEAD_CITIZEN, 0);
	setObjVar(self, P3_COMPLETE, 0);
	
	for (int i=0;i<P1.length;i++)
	{
		setObjVar(self, P1[i], 0);
	}
	
	for (int q=0;q<P2.length;q++)
	{
		setObjVar(self, P2[q], 0);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler questUpdate()
{
	obj_id[] players = getPlayerCreaturesInRange(getLocation(self), 1000.0f);//utils.getPlayersInBuildoutRow(self);
	boolean doBroadcast = true;
	
	if (players == null || players.length == 0)
		doBroadcast = false;
	
	string update = params.getString("update");
	
	if (update == "citizen_died")
	{
		handleCitizenDeath(self, players, doBroadcast);
		return SCRIPT_CONTINUE;
	}

	setObjVar(self, update, 1);
	
	if (doBroadcast)
	{
		groundquests.sendSignal(players, update);
	}
	
	if (hasCompletedPhaseOne())
	{
		setObjVar(self, PHASE, 2);
		if (doBroadcast)
		{
			groundquests.sendSignal(players, P1_COMPLETE);
			for (int k=0;k<P2_GRANT.length;k++)
				groundquests.requestGrantQuest(players, P2_GRANT[k]);
		}
	}

	if (hasCompletedPhaseTwo())
	{
	
		setObjVar(self, PHASE, 3);
		
		if (doBroadcast)
		{
			groundquests.sendSignal(players, P2_COMPLTE);
			groundquests.requestGrantQuest(players, P3_GRANT);
		}
	}
	
	if (hasCompletedPhaseThree())
	{
		setObjVar(self, PHASE, -1);
		if (doBroadcast)
		{
			groundquests.sendSignal(players, P3_COMPLETE);
		}
	}
	
	return SCRIPT_CONTINUE;
}

int getPhase()
{
	return getIntObjVar(getSelf(), PHASE);
}

boolean hasCompletedPhaseOne()
{
	if (getPhase() != 1)
		return false;
		
	obj_id self = getSelf();
	int total = 0;
	
	for (int i=0;i<P1.length;i++)
	{
		total += getIntObjVar(self, P1[i]);
	}
	
	return total == P1.length;
}

boolean hasCompletedPhaseTwo()
{
	if (getPhase() != 2)
		return false;
		
	obj_id self = getSelf();
	
	int total = 0;
	
	for (int i=0;i<P2.length;i++)
	{
		total += getIntObjVar(self, P2[i]);
	}
	
	return total == P2.length;
}

boolean hasCompletedPhaseThree()
{
	if (getPhase() != 3)
		return false;
		
	obj_id self = getSelf();
	
	return getIntObjVar(self, P3_COMPLETE) == 1;
}

messageHandler requestUpdatePlayer()
{
	obj_id player = params.getObjId("player");
	
	int phase = getPhase();
	
	switch(phase)
	{
		case 1:
			groundquests.requestGrantQuest(player, P1_GRANT);
			for (int i=0;i<P1.length;i++)
			{
				if (getIntObjVar(self, P1[i]) == 1)
					groundquests.sendSignal(player, P1[i]);
			}
			break;
		
		case 2:
			for (int i=0;i<P2_GRANT.length;i++)
				groundquests.requestGrantQuest(player, P2_GRANT[i]);
				
			for (int q=0;q<P2.length;q++)
			{
				if (getIntObjVar(self, P2[q]) == 1)
					groundquests.sendSignal(player, P2[q]);
			}
			
			int dead_cit = getIntObjVar(self, DEAD_CITIZEN);
			
			dictionary dict = new dictionary();	
			dict.put("creatureName", "heroic_tusken_mos_espa_citizen");
			dict.put("location", getLocation(player));
			dict.put("socialGroup", "espa");

			for (int k=0;k<dead_cit;k++)
			{
				messageTo(player, "receiveCreditForKill", dict, 0.0f, false);
			}
			break;
			
		case 3:
			groundquests.requestGrantQuest(player, P3_GRANT);
			if (getIntObjVar(self, P3_COMPLETE) == 1)
				groundquests.sendSignal(player, P3_COMPLETE);
			break;
		
		case -1:
			break;
	}
	
	return SCRIPT_CONTINUE;
}

void handleCitizenDeath(obj_id self, obj_id[] players, boolean doBroadcast)
{
	int dead = getIntObjVar(self, DEAD_CITIZEN);
	dead++;
	setObjVar(self, DEAD_CITIZEN, dead);
	
	dictionary dict = new dictionary();
	
	if (doBroadcast)
	{
		for (int i=0;i<players.length;i++)
		{
			dict.put("creatureName", "heroic_tusken_mos_espa_citizen");
			dict.put("location", getLocation(players[i]));
			dict.put("socialGroup", "espa");
			messageTo(players[i], "receiveCreditForKill", dict, 0.0f, false);
		}
	}
}