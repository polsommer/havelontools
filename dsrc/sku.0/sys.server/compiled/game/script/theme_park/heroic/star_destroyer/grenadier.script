include library.trial;
include library.utils;

trigger OnAttach()
{
	setObjVar(self, "ai.combat.oneShotAction", "non_attack");
	setThrowSpeed(self, 4.0f);
	return SCRIPT_CONTINUE;

}

trigger OnEnteredCombat()
{
	setMovementPercent(self, 0.0f);
	messageTo(self, "doThrow", trial.getSessionDict(self, "throw"), getThrowSpeed(self), false);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.bumpSession(self, "throw");
	return SCRIPT_CONTINUE;
}

messageHandler doThrow()
{
	if (!trial.verifySession(self, params, "throw"))
		return SCRIPT_CONTINUE;

	removeObjVar(self, "ai.combat.oneShotAction");
	if (hasObjVar(self, "oneShotActionComplete"))
	{
		removeObjVar(self, "oneShotActionComplete");
	}

	obj_id target = utils.hasScriptVar(self, "focus") ? utils.getObjIdScriptVar(self, "focus") : getHateTarget(self);
	queueCommand(self, ##"grenadier_throw_random", target , "", COMMAND_PRIORITY_DEFAULT);
	messageTo(self, "doThrow", trial.getSessionDict(self, "throw"), getThrowSpeed(self), false);

	return SCRIPT_CONTINUE;	
}

commandHandler grenadier_throw_random()
{	
	string[] abilityList = 
				{
					"grenadier_cold",
					"grenadier_heat",
					"grenadier_acid",
					"grenadier_kinetic"
				};
				
	string random_ability = abilityList[rand(0, abilityList.length -1)];

	location loc = getLocation(target);
	string targetLoc = ""+loc.x+" "+loc.y+" "+loc.z+" "+loc.cell+" "+loc.x+" "+loc.y+" "+loc.z;

	queueCommand(self, getStringCrc(random_ability.toLowerCase()), target, targetLoc, COMMAND_PRIORITY_DEFAULT);
	return SCRIPT_CONTINUE;
}

messageHandler resetHate()
{
	if (isDead(self))
		return SCRIPT_CONTINUE;
	
	if (utils.hasScriptVar(self, "focus"))
		utils.removeScriptVar(self, "focus");
	
	obj_id[] hateList = getHateList(self);
	
	if (hateList == null || hateList.length == 0)
		return SCRIPT_CONTINUE;
		
	obj_id focus = hateList[rand(0, hateList.length -1)];
	
	
	for (int i=0;i<hateList.length;i++)
	{
		if (hateList[i] == focus)
		{
			setHate(self, focus, 10000.0f);
		}
		else
		{
			setHate(self, hateList[i], 1.0f);
		}
	}
	
	return SCRIPT_CONTINUE;
}

float getThrowSpeed(obj_id self)
{
	return getFloatObjVar(self, "throw_speed");
}

void setThrowSpeed(obj_id self, float speed)
{
	setObjVar(self, "throw_speed", speed);
}

float hastenThrowSpeed(obj_id self, float delta)
{
	float speed = getThrowSpeed(self);
	speed = speed - delta > 0.1f ? speed - delta : 0.1f;
	setThrowSpeed(self, speed);
	return speed;
}

messageHandler hastenThrow()
{
	float newSpeed = hastenThrowSpeed(self, 0.2f);
	return SCRIPT_CONTINUE;
}