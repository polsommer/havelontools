include library.ai_lib;
include library.chat;
include library.hue;
include library.stealth;
include library.trial;
include library.utils;

messageHandler setBombDroidMaxHealth()
{
	if(!isIdValid(self))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "bombDroidMaxHealthSet"))
	{
		setMaxAttrib(self, HEALTH, 8000);
		setAttrib(self, HEALTH, 8000);
		setObjVar(self, "bombDroidMaxHealthSet", 1);
	}

	return SCRIPT_CONTINUE;
}

messageHandler findTarget()
{
//	debugSpeakMsg(self, "Acquiring target...");

	if(!isIdValid(self) || ai_lib.isDead(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(getMovementPercent(self) >= 1.0f)
	{
		setMovementPercent(self, 0.5f + rand(0f, 0.1f));
	}

	if(isInvulnerable(self))
	{
		setInvulnerable(self, false);
	}

	obj_id dungeon = getTopMostContainer(self);
	obj_id target = utils.getObjIdScriptVar(self, "target");


	if(!isIdValid(dungeon))
	{
//		debugSpeakMsg(self, "Can't find bomb targets due to not being in a cell.");
		return SCRIPT_CONTINUE;
	}

	setObjVar(self, "ai.combat.oneShotAction", "ig88_bomb_explode");

	dictionary sessionDict = new dictionary();
	
	// Get a new target
	if(!isIdValid(target) || isDead(target) || stealth.hasInvisibleBuff(target))
	{
		obj_id[] targets = trial.getNonStealthedTargetsInCell(dungeon, "r1");
		
		if(targets == null || targets.length <= 0)
		{
//			debugSpeakMsg(self, "Nobody is here for me to attack. :(");

			messageTo(dungeon, "ig88_failed", sessionDict, 0, false);
			return SCRIPT_CONTINUE;
		}
		
		obj_id closest = trial.getClosest(self, targets);
		obj_id secondClosest = trial.getSecondClosest(self, targets);
		
		// Choose the closest as my target or the second closest
		if(isIdValid(closest) && isIdValid(secondClosest))
		{
			target = rand(0, 1) == 1 ? closest : secondClosest;
		}
		else
		{
			target = closest;
		}
	}
	
	if(!isIdValid(target))
	{
		messageTo(self, "findTarget", sessionDict, 1, false);
		
		return SCRIPT_CONTINUE;
	}

	// Blow up
	if(utils.getDistance2D(getLocation(target), getLocation(self)) < 5)
	{
		if(!utils.hasScriptVar(self, "exploded"))
		{
			queueCommand(self, ##"ig88_bomb_explode", target, "", COMMAND_PRIORITY_DEFAULT);
		}
		else
		{
			dictionary messageParams = new dictionary();

			messageParams.put("npc", self);

			messageTo(dungeon, "killNPC", messageParams, 0, false);
			
			return SCRIPT_CONTINUE;
		}

		messageTo(self, "findTarget", sessionDict, 1, false);

		return SCRIPT_CONTINUE;
	}

//	debugSpeakMsg(self, "Going to blow up " + getName(target) + "!!!");

	// Follow target
	setHate(self, target, 5000);
	
	utils.setScriptVar(self, "target", target);

	messageTo(self, "findTarget", sessionDict, 1, false);

	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}

	obj_id dungeon = getTopMostContainer(self);

	if(!isIdValid(dungeon))
	{
		return SCRIPT_CONTINUE;
	}

	dictionary sessionDict = new dictionary();

	messageTo(self, "colorize", sessionDict, 0.25f, true);

	return SCRIPT_CONTINUE;
}

messageHandler colorize()
{
	if(!isIdValid(self))
		return SCRIPT_CONTINUE;

	// Set up its good looks...
	hue.setColor(self, hue.INDEX_1, 9); // Light pink 9
	hue.setColor(self, hue.INDEX_2, 15); // Dark red 15
	hue.setTexture(self, 1, 7); // Striped

	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if(!isIdValid(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	dictionary sessionDict = new dictionary();
	
	messageTo(self, "findTarget", sessionDict, 0.25f, true);
	
	return SCRIPT_CONTINUE;
}
