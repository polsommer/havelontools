include library.ai_lib;
include library.buff;
include library.factions;
include library.trial;

trigger OnAttach()
{
	setCreatureCoverVisibility(self, false);
	setInvulnerable(self, true);

	messageTo(self, "handlePath", null, 1.0f, false);
	messageTo(self, "vapor_pulse", null, 2.0f, false);
	factions.setIgnorePlayer(self);
	return SCRIPT_CONTINUE;
}

messageHandler	handlePath()
{
	obj_id[] players = trial.getValidTargetsInCell(trial.getTop(self), "r4");
	
	obj_id target = players[rand(0, players.length -1)];

	setMovementPercent(self, 0.75f);
	follow(self, target, 0.0f, 0.1f);
	
	messageTo(self, "handlePath", null, 10.0f, false);	
	return SCRIPT_CONTINUE;
}

messageHandler vapor_pulse()
{
	obj_id boss = getFirstObjectWithScript(getLocation(self), 200.0f, "theme_park.heroic.exar_kun.caretaker");

	if (!isIdValid(boss) || !exists(boss) || isDead(boss))
	{
		trial.cleanupObject(self);
		return SCRIPT_CONTINUE;
	}
	
	location selfLoc = getLocation(self);
	string tarLoc = ""+selfLoc.x+" "+selfLoc.y+" "+selfLoc.z+" "+selfLoc.cell+" "+selfLoc.x+" "+selfLoc.y+" "+selfLoc.z;

	queueCommand(boss, ##"caretaker_vapors", ai_lib.getFollowTarget(self), tarLoc, COMMAND_PRIORITY_DEFAULT);

	messageTo(self, "vapor_pulse", null, 2.0f, false);
	return SCRIPT_CONTINUE;
}
