include library.ai_lib;
include library.buff;
include library.combat;
include library.movement;
include library.prose;
include library.trial;
include library.utils;

trigger OnAttach()
{
	if(hasObjVar(self, "posture"))
	{
		obj_id npc = self;
		setNpcPosture(npc);
	}

	if (hasObjVar(self, "void_damage"))
	{
		buff.applyBuff(self, "void_damage");
	}

	return SCRIPT_CONTINUE;
}

trigger OnHateTargetAdded(obj_id target)
{

	if (isPlayer(target))
	{
		if (hasObjVar(self, "void_damage"))
			buff.removeBuff(self, "void_damage");
	}
	return SCRIPT_CONTINUE;
}

messageHandler r1_st_death()
{
	obj_id[] cannon = trial.getObjectsInCellWithObjVar(trial.getTop(self), "r1", "cannon_1");
	obj_id[] players = trial.getPlayersInCell(trial.getTop(self), "r1");
	if (players == null || players.length == 0)
	{}
	else
	{
		createClientProjectileObjectToObject(players[0], "object/weapon/ranged/turret/shared_turret_energy.iff", cannon[0], "", self, "", 150.0f, 1.0f, false, 0, 0, 0, 0);
	}

	messageTo(self, "suicide", null, .25f, false);
	return SCRIPT_CONTINUE;
}

messageHandler r2_st_death()
{
	obj_id[] cannon = trial.getObjectsInCellWithObjVar(trial.getTop(self), "r1", "cannon_2");
	obj_id[] players = trial.getPlayersInCell(trial.getTop(self), "r1");
	if (players == null || players.length == 0)
	{}
	else
	{
		createClientProjectileObjectToObject(players[0], "object/weapon/ranged/turret/shared_turret_energy.iff", cannon[0], "", self, "", 150.0f, 1.0f, false, 0, 0, 0, 0);
	}

	messageTo(self, "suicide", null, .25f, false);
	return SCRIPT_CONTINUE;
}

messageHandler suicide()
{
	kill(self);
	messageTo(self, "handleDelayedCleanup", null, 5.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler r1_st_show()
{
	obj_id[] cannon = trial.getObjectsInCellWithObjVar(trial.getTop(self), "r1", "cannon_1");
	obj_id[] players = trial.getPlayersInCell(trial.getTop(self), "r1");
	if (players == null || players.length == 0)
	{}
	else
	{
		createClientProjectileObjectToObject(players[0], "object/weapon/ranged/turret/shared_turret_energy.iff", cannon[0], "", self, "", 150.0f, 1.0f, false, 0, 0, 0, 0);
	}

	return SCRIPT_CONTINUE;
}

messageHandler r2_st_show()
{
	obj_id[] cannon = trial.getObjectsInCellWithObjVar(trial.getTop(self), "r1", "cannon_2");
	obj_id[] players = trial.getPlayersInCell(trial.getTop(self), "r1");
	if (players == null || players.length == 0)
	{}
	else
	{
		createClientProjectileObjectToObject(players[0], "object/weapon/ranged/turret/shared_turret_energy.iff", cannon[0], "", self, "", 150.0f, 1.0f, false, 0, 0, 0, 0);
	}

	return SCRIPT_CONTINUE;
}

messageHandler kill_scott()
{
	obj_id[] scott = trial.getObjectsInInstanceBySpawnId(trial.getParent(self), "tg_1");
	if (scott == null || scott.length == 0)
		return SCRIPT_CONTINUE;

	string[] cells = {"r1", "r2"};
	obj_id[] players = trial.getPlayersInCellList(self, cells);
	messageTo(scott[0], "suicide", null, 0.25f, false);

	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;

	createClientProjectileObjectToObject(players[0], "object/weapon/ranged/rifle/shared_quest_rifle_flame_thrower.iff", self, "", scott[0], "", 75.0f, 2.0f, false, 0, 0, 0, 0);
	return SCRIPT_CONTINUE;
}

messageHandler kill_downey()
{
	obj_id[] downey = trial.getObjectsInInstanceBySpawnId(trial.getParent(self), "tg_2");
	if (downey == null || downey.length == 0)
		return SCRIPT_CONTINUE;

	string[] cells = {"r1", "r2"};
	obj_id[] players = trial.getPlayersInCellList(self, cells);
	messageTo(downey[0], "suicide", null, 0.25f, false);

	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;

	createClientProjectileObjectToObject(players[0], "object/weapon/ranged/rifle/shared_quest_rifle_flame_thrower.iff", self, "", downey[0], "", 75.0f, 2.0f, false, 0, 0, 0, 0);
	return SCRIPT_CONTINUE;
}


void setNpcPosture(obj_id npc)
{
	string posture = "";

	if(!hasObjVar(npc, "posture"))
	{
		return;
	}

	//get the posture position from the NPC
	posture = getStringObjVar(npc, "posture");

	if(posture.equals("prone"))
	{
		setPosture(npc, POSTURE_PRONE);
	}
	if(posture.equals("kneel"))
	{
		setPosture(npc, POSTURE_CROUCHED);
	}
	if(posture.equals("sit"))
	{
		setPosture(npc, POSTURE_SITTING);
	}
	if(posture.equals("sneak"))
	{
		setPosture(npc, POSTURE_SNEAKING);
	}
	if(posture.equals("block"))
	{
		setPosture(npc, POSTURE_BLOCKING);
	}
	if(posture.equals("climb"))
	{
		setPosture(npc, POSTURE_CLIMBING);
	}
	if(posture.equals("fly"))
	{
		setPosture(npc, POSTURE_FLYING);
	}
	if(posture.equals("lay_down"))  //puts NPC in bind pose :(
	{
		setPosture(npc, POSTURE_LYING_DOWN);
	}
	if(posture.equals("sit"))
	{
		setPosture(npc, POSTURE_SITTING);
	}
	if(posture.equals("sit"))
	{
		setPosture(npc, POSTURE_SITTING);
	}
	if(posture.equals("skill_anim"))
	{
		setPosture(npc, POSTURE_SKILL_ANIMATING);
	}
	if(posture.equals("drive"))
	{
		setPosture(npc, POSTURE_DRIVING_VEHICLE);
	}
	if(posture.equals("ride"))
	{
		setPosture(npc, POSTURE_RIDING_CREATURE);
	}
	if(posture.equals("knock_down"))
	{
		setPosture(npc, POSTURE_KNOCKED_DOWN);
	}
	if(posture.equals("incap"))
	{
		setPosture(npc, POSTURE_INCAPACITATED);
	}
	if(posture.equals("dead"))
	{
		setPosture(npc, POSTURE_DEAD);
	}
	if(posture.equals("count"))
	{
		setPosture(npc, POSTURE_COUNT);
	}
}

messageHandler startRunning()
{
	float rate = 1.0f;
	removeObjVar(self, "run");
	setObjVar(self, "run", rate);

	setMovementRun(self);

	setMovementPercent(self, rate);

	setBaseRunSpeed(self, 6.0f);

	return SCRIPT_CONTINUE;
}

messageHandler startWalking()
{
	movement.performWalk(self);

	return SCRIPT_CONTINUE;
}