include library.chat;
include library.prose;
include library.trial;
include library.utils;


				
const float[] HEALTH_TRIGGER		=
					{
						0.5f,
						0.10f,
						0.15f,
						0.20f,
						0.25f,
						0.30f,
						0.35f,
						0.40f,
						0.45f,
						0.50f,
						0.55f,
						0.60f,
						0.65f,
						0.70f,
						0.75f,
						0.80f,
						0.85f,
						0.90f,
						0.95f										
					};

					

trigger OnAttach()
{
	trial.setHp(self, 1243250);
	return SCRIPT_CONTINUE;
}

messageHandler startCombat()
{
	obj_id[] players = trial.getValidTargetsInCell(trial.getTop(self), "secondaryhangar");
	obj_id[] allSpawn = trial.getObjectsInDungeonWithObjVar(trial.getTop(self), "spawn_id");
	obj_id[] guards = getGuardsFromList(allSpawn);
	
	if (players == null || players.length == 0)
	{
		dictionary dict = trial.getSessionDict(trial.getTop(self));
		dict.put("triggerType", "triggerId");
		dict.put("triggerName", "reset_krix");
		messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);
		return SCRIPT_CONTINUE;
	}
	
	obj_id mainTarget = trial.getClosestValidTarget(self, players);
	
	for (int i = 0;i<players.length;i++)
	{
		startCombat(self, players[i]);
		
		if (guards !=null && guards.length > 0)
		{
			for (int q=0;q<guards.length;q++)
			{
				startCombat(guards[q], players[i]);
				setHate(guards[q], players[i], rand(10, 1000));
				startCombat(self, players[i]);
			}
		}
	}
	
	setHate(self, mainTarget, 10000);

	startAttackCycle(self);
	return SCRIPT_CONTINUE;
}

obj_id[] getGuardsFromList(obj_id[] allSpawn)
{
	if(allSpawn == null || allSpawn.length == 0)
		return null;
		
	resizeable obj_id[] guards = new obj_id[0];
	
	for(int i=0;i<allSpawn.length;i++)
	{
		if(getStringObjVar(allSpawn[i], "spawn_id").equals("sd_gren"))
		{
			if(!isDead(allSpawn[i]))
			{
				guards.add(allSpawn[i]);
			}
		}
	}
	
	if (guards == null || guards.length == 0)
		return null;
		
	allSpawn = guards;
	return allSpawn;
}



void startAttackCycle(obj_id self)
{
	dictionary dict = trial.getSessionDict(self, "special");
	dict.put("next", 0);
	messageTo(self, "executeBurn", dict, 5.0f, false);
	messageTo(self, "executeFocus", dict, 5.0f, false);
}

messageHandler executeBurn()
{
	if (!trial.verifySession(self, params, "special") || isDead(self))
		return SCRIPT_CONTINUE;

	for (int i=0;i<30;i++)
	{	
		string targetLoc = getBurnLocation(self);
		queueCommand(self, ##"krix_burn", getHateTarget(self), targetLoc, COMMAND_PRIORITY_DEFAULT);
	}
	
	messageTo(self, "executeBurn", trial.getSessionDict(self), 10.0f, false);
	
	return SCRIPT_CONTINUE;	
}

messageHandler executeFocus()
{
	if (!trial.verifySession(self, params, "special") || isDead(self))
		return SCRIPT_CONTINUE;

	validateCombat(self);
	obj_id[] players = trial.getValidTargetsInCell(trial.getTop(self), "secondaryhangar");
	obj_id[] allSpawn = trial.getObjectsInDungeonWithObjVar(trial.getTop(self), "spawn_id");
	obj_id[] guards = getGuardsFromList(allSpawn);

	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;;

	if (guards == null || guards.length == 0)
	{
		trial.bumpSession(self, "special");
		phaseTwo(self);
		return SCRIPT_CONTINUE;
	}


	obj_id focus = players[rand(0, players.length -1)];

	for (int q=0;q<players.length;q++)
	{
		if (isDead(players[q]) || isIncapacitated(players[q]))
			continue;

		for (int f=0;f<guards.length;f++)
		{
			if (isDead(guards[f]))
				continue;

			messageTo(guards[f], "resetHate", null, 5.0f, false);

			if (players[q] == focus)
			{
				utils.setScriptVar(guards[f], "focus", focus);
				setHate(guards[f], players[q],  10000.0f);
			}
			else
			{
				setHate(guards[f], players[q], 1.0f);
			}
		}
	}
	chat.chat(self, "No, you fools! Kill "+getPlayerName(focus)+"!");

	prose_package pp = new prose_package();
	pp = prose.setStringId(pp, new string_id("spam", "krix_directed_target_spam"));
	pp = prose.setTO(pp, focus);

	utils.sendSystemMessageProse(players, pp);

	messageTo(self, "executeFocus", trial.getSessionDict(self, "special"), 12.0f, false);

	return SCRIPT_CONTINUE;
}

void phaseTwo(obj_id self)
{
	chat.chat(self, "Those useless Imperials, I will do this myself.");
	obj_id[] hateList = getHateList(self);
	utils.sendSystemMessage(hateList, new string_id("spam", "krix_do_myself"));
	messageTo(self, "megaBurn", trial.getSessionDict(self, "special"), 3.0f, false);
}

string getBurnLocation(obj_id self)
{
	float x = rand(-40.0f, 40.0f);
	float y = 173.834f;
	float z = rand(-1.0f, 75.0f);
	return ""+x+" "+y+" "+z+" "+getLocation(self).cell+" "+x+" "+y+" "+z;
}

messageHandler megaBurn()
{
	if (!trial.verifySession(self, params, "special") || isDead(self))
		return SCRIPT_CONTINUE;
	
	validateCombat(self);
	obj_id[] hateList = getHateList(self);
	resizeable obj_id[] validTargets = new obj_id[0];
	
	for (int i=0;i<hateList.length;i++)
	{
		if (!isIdValid(hateList[i]) || !exists(hateList[i]) || isDead(hateList[i]) || !canSee(self, hateList[i]))
			continue;
			
		validTargets.add(hateList[i]);
	}
	
	obj_id target = validTargets[rand(0, validTargets.length -1)];
	location tarLoc = getLocation(target);
	
	string targetLoc = tarLoc.x+" "+tarLoc.y+" "+tarLoc.z+" "+tarLoc.cell+" "+tarLoc.x+" "+tarLoc.y+" "+tarLoc.z;
	queueCommand(self, ##"krix_megaburn", getHateTarget(self), targetLoc, COMMAND_PRIORITY_DEFAULT);
	queueCommand(self, ##"krix_megapatch", getHateTarget(self), targetLoc, COMMAND_PRIORITY_DEFAULT);
	

	messageTo(self, "megaBurn", trial.getSessionDict(self, "special"), 6.0f, false);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	float max = (float)getMaxHealth(self);
	float current = (float)getHealth(self);
	float ratio = current/max;

	int healthTrigger = getHealthTrigger(self, ratio);
	
	if (healthTrigger == -1)
		return SCRIPT_CONTINUE;
		
	dictionary dict = trial.getSessionDict(trial.getTop(self));
	dict.put("triggerType", "triggerId");
	dict.put("triggerName", "hasten_grenadier");
	
	messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);	
	return SCRIPT_CONTINUE;
}

int getHealthTrigger(obj_id self, float ratio)
{
	for (int i=0;i<HEALTH_TRIGGER.length;i++)
	{
		if (utils.hasScriptVar(self, "health_trigger_list."+i))
			continue;
		
		if (ratio <= HEALTH_TRIGGER[i])
		{
			utils.setScriptVar(self, "health_trigger_list."+i, 1);
			return i;
		}
	}

	return -1;
}

void validateCombat(obj_id self)
{
	obj_id[] players = trial.getValidTargetsInCell(trial.getTop(self), "secondaryhangar");
	
	if (players == null || players.length == 0)
	{
		dictionary dict = trial.getSessionDict(trial.getTop(self));
		dict.put("triggerType", "triggerId");
		dict.put("triggerName", "reset_krix");
		messageTo(trial.getTop(self), "triggerFired", dict, 0.0f, false);
		return;
	}

	for (int i=0;i<players.length;i++)
	{
		startCombat(self, players[i]);
	}
}