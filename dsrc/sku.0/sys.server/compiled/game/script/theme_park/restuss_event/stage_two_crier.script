include library.utils;
include library.chat;
include library.create;


const string_id WARNING		= new string_id("restuss_event/object", "restuss_battle_cryer_warning");

const string FIRST_SIGNAL	= "restuss_herald.first_signal";
const string SECOND_SIGNAL	= "restuss_herald.second_signal";
const string HERALD_ID		= "restuss_herald.herald_id";


trigger OnAttach()
{
	setCWData(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	setCWData(self);
	if (canSpawnHerald(self))
		messageTo(self, "beginSpawn", null, 1, false);
		
	return SCRIPT_CONTINUE;
}

boolean canSpawnHerald(obj_id self)
{
	if (hasObjVar(self, FIRST_SIGNAL) && !hasObjVar(self, SECOND_SIGNAL))
		return true;
		
	return false;
}
void setCWData(obj_id self)
{
	if(hasObjVar(self, SECOND_SIGNAL))
		return;
		
	if (hasObjVar(self, "space_dungeon.lock_key"))
		removeObjVar(self, "space_dungeon.lock_key");

	getClusterWideData("event", "stage_two_crier", true, self);

}

trigger OnClusterWideDataResponse(string manage_name, string dungeon_name, int request_id, string[] element_name_list, dictionary[] dungeon_data, int lock_key)
{
	

	string name = "stage_two_crier"+"-"+self;
	string scene = getCurrentSceneName();
	location loc = getLocation(self);
	
	dictionary dungeon_info = new dictionary();
	dungeon_info.put("dungeon_id", self);
	dungeon_info.put("scene", scene);
	dungeon_info.put("position_x", loc.x);
	dungeon_info.put("position_y", loc.y);
	dungeon_info.put("position_z", loc.z);

	replaceClusterWideData(manage_name, name, dungeon_info, true, lock_key);
	releaseClusterWideDataLock(manage_name, lock_key);
	return SCRIPT_CONTINUE;
}

messageHandler beginSpawn()
{
	location currentLoc = getLocation(self);
	obj_id herald = create.object ("restuss_battle_cryer", currentLoc);
	if (!isIdValid(herald))
	{
		utils.setScriptVar(self, "DESIGNER FATAL","Failed to create restuss herald");
		return SCRIPT_CONTINUE;
	}	
	
	utils.setScriptVar(self, HERALD_ID, herald);	
	setObjVar(self, FIRST_SIGNAL, true);	
	return SCRIPT_CONTINUE;
}

messageHandler beginMessage()
{
	obj_id herald = utils.getObjIdScriptVar(self, HERALD_ID);
	
	messageTo (self, "warningLoop", null, 0.0f, false);
	messageTo(self, "destroySpawn", null, 7200, false);
	setObjVar(self, SECOND_SIGNAL, true);
	return SCRIPT_CONTINUE;
}

messageHandler warningLoop()
{
	obj_id herald = utils.getObjIdScriptVar(self, HERALD_ID);
	chat.chat(herald, WARNING);
	messageTo (self, "warningLoop", null, 30.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler destroySpawn()
{
	obj_id battleCryer = utils.getObjIdScriptVar(self, HERALD_ID);
	
	destroyObject(battleCryer);
	return SCRIPT_CONTINUE;
}


