/***** INCLUDES ********************************************************/
include library.factions;
include library.groundquests
include library.utils;

/***** CONSTANTS *******************************************************/

const string VOLUME_NAME				= "quest_area";
const string_id AREA_FOUND				= new string_id("restuss_event/object", "right_area");
const string_id AREA_FOUND_NO_SPAWN		= new string_id("restuss_event/object", "right_area_wrong_time");

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	createTriggerVolume(VOLUME_NAME, 10.0f, true);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	createTriggerVolume(VOLUME_NAME, 10.0f, true);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	location spawnerLocation = getLocation(self);
	obj_id spawnerObject = getFirstObjectWithTemplate(spawnerLocation, 2.0f, "object/tangible/theme_park/invisible_object.iff");

	if (!factions.isImperial(breacher))
		return SCRIPT_CONTINUE;
		
	if (groundquests.isTaskActive(breacher, "restuss_imperial_st3_destroy_boss", "killRebelsBoss") && (!utils.hasScriptVar (self, "spawnedAlready")))
	{
		if (isIdNull (spawnerObject))
		{
			sendSystemMessage(breacher, AREA_FOUND);
			obj_id waveSpawner = createObject("object/tangible/theme_park/invisible_object.iff",getLocation(self));
			setObjVar(waveSpawner, "wave_spawner.data_table", "datatables/spawning/restuss_event/st3_imperial_destroy_wave.iff");
			attachScript (waveSpawner, "theme_park.wave_spawner");
			utils.setScriptVar (self, "spawnedAlready", 1);
			messageTo (self, "readyToSpawn", null, 300.0f, false);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

/***** MESSAGE HANDLERS ************************************************/

messageHandler test()
{
			obj_id waveSpawner = createObject("object/tangible/theme_park/invisible_object.iff",getLocation(self));
			setObjVar(waveSpawner, "wave_spawner.data_table", "datatables/spawning/restuss_event/st3_imperial_destroy_wave.iff");
			attachScript (waveSpawner, "theme_park.wave_spawner");
			utils.setScriptVar (self, "spawnedAlready", 1);
			messageTo (self, "readyToSpawn", null, 300.0f, false);
	return SCRIPT_CONTINUE;
}
messageHandler readyToSpawn()
{
	utils.removeScriptVar(self, "spawnedAlready");
	return SCRIPT_CONTINUE;
}