include library.trial;
include library.restuss_event;
include library.utils;
include library.factions;
include library.ai_lib;
include library.pclib;
include library.instance;

const boolean LOGGING				= false;

trigger OnAttach()
{
	messageTo(self, "handleFX", null, 0.25f, false);
	setName(self, getStringObjVar(self, restuss_event.EFFECT_NAME));
	messageTo(self, "handle_cleanup", null, 60.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler handleFX ()
{
	string effectName = getStringObjVar(self, restuss_event.EFFECT_NAME);
	string visability = getStringObjVar(self, restuss_event.EFFECT_VISABILITY);
	float delta = utils.stringToFloat(getStringObjVar(self, restuss_event.EFFECT_DELTA));
	effectName = getEffectType(effectName)+effectName;

	obj_id[] players = instance.getPlayerIdList(self);

	if (players == null || players.length == 0)
	{
		string[] parse = split(visability, '-');

		if (parse == null || parse.length < 2)
		{
			doLogging("handleFx", "Parse length in forced visability was less than two");
			return SCRIPT_CONTINUE;
		}

		float range = utils.stringToFloat(parse[1]);

		players =  getPlayerCreaturesInRange(getLocation(self), utils.stringToFloat(parse[1]));

		if (players == null || players.length == 0)
			return SCRIPT_CONTINUE;
	}

	playClientEffectLoc(players, effectName, getLocation(self), delta);
	doAdditionalEffects(self);
	return SCRIPT_CONTINUE;
}

string getEffectType(string name)
{
	if (name.endsWith(".prt"))
		return "appearance/";
	if (name.endsWith(".cef"))
		return "clienteffect/";
	return null;
}

void doAdditionalEffects(obj_id self)
{
	if (hasObjVar(self, "kill_effect"))
	{
		string fullString = getStringObjVar(self, "kill_effect");
		string[] fullParse = split(fullString, '-');

		boolean player = false;
		boolean npc = false;
		string faction = "";
		float range = 0.0f;

		for (int i=0;i<fullParse.length;i++)
		{
			if (fullParse[i].startsWith("restriction"))
			{
				string[] restParse = split(fullParse[i], '_');

				for (int q=0;q<restParse.length;q++)
				{
					if (q==0)
						continue;
					if (restParse[q].startsWith("player"))
						player = true;
					if (restParse[q].startsWith("npc"))
						npc = true;
					if (restParse[q].startsWith("faction"))
						faction = restParse[q].substring(8, restParse[q].length() -2);
				}
			}
			if (fullParse[i].startsWith("range"))
			{
				string[] rangeParse = split(fullParse[i], '_');
				range = utils.stringToFloat(rangeParse[1]);
			}
		}

		obj_id[] targets = getObjectsInRange(getLocation(self), range);

		if (targets == null || targets.length == 0)
			return;

		resizeable obj_id [] validatedTargets = new obj_id[0];

		for (int x=0;x<targets.length;x++)
		{
			if (player)
			{
				if (isPlayer(targets[x]))
				{
					if (faction != "")
					{
						if (faction.equals("imperial"))
						{
							if (factions.isImperial(targets[x]) && !factions.isOnLeave(targets[x]))
								utils.addElement(validatedTargets, targets[x]);
						}
						else if (faction.equals("rebel"))
						{
							if (factions.isRebel(targets[x]) && !factions.isOnLeave(targets[x]))
								utils.addElement(validatedTargets, targets[x]);
						}
					}
					else
						utils.addElement(validatedTargets, targets[x]);
				}
			}
			if (npc)
			{
				if (!isPlayer(targets[x]))
				{
					if (faction != "")
					{
						string creature = getStringObjVar(targets[x], "ai.creatureBaseName");
						string socialGroup = dataTableGetString("datatables/mob/creatures.iff", creature, "socialGroup");
						if (faction.equals(socialGroup))
							utils.addElement(validatedTargets, targets[x]);

					}
					else
						utils.addElement(validatedTargets, targets[x]);
				}
			}
		}

		if (validatedTargets != null && validatedTargets.length > 0)
		{
			for (int y = 0;y<validatedTargets.length;y++)
			{
				if(isPlayer(validatedTargets[y]))
				{
					setPosture(validatedTargets[y], POSTURE_DEAD);
					setObjVar(validatedTargets[y], pclib.VAR_BEEN_COUPDEGRACED, 1);
					messageTo(validatedTargets[y], "handlePlayerDeath", null, 10, false);
				}
				else
				{
					kill(validatedTargets[y]);
				}
			}
		}
	}
}

messageHandler handle_cleanup()
{
	trial.unregisterObjectWithSequencer(trial.getParent(self), self);
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/restuss_clientfx_controller/"+section, message);
}