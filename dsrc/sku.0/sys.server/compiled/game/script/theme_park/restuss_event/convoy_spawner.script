include library.create;
include library.trial;

trigger OnAttach()
{
	messageTo(self, "createConvoy", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	messageTo(self, "createConvoy", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler createConvoy()
{
	string faction = getStringObjVar(self, "alignment");
	location selfLoc = getLocation(self);
	obj_id newSpawn = null;

	if (faction.equals("imperial"))
	{
		for (int i=0;i<8;i++)
		{
			if (i<4)
			{
				location spawnLoc = new location(selfLoc.x+(i*2),selfLoc.y,selfLoc.z);
				newSpawn = create.object("restuss_imperial_load_lifter_ambush", spawnLoc);
			}
			else
			{
				location spawnLoc = new location(selfLoc.x+(i*2),selfLoc.y,selfLoc.z);
				newSpawn = create.object("restuss_imperial_stormtrooper_st3", spawnLoc);
			}

			setHibernationDelay(newSpawn, 600);
			trial.setParent(trial.getParent(self), newSpawn, true);
			copyObjVar(self, newSpawn, "alignment");
			attachScript(newSpawn, "theme_park.restuss_event.convoy_master");
		}
	}

	if (faction.equals("rebel"))
	{
		for (int i=0;i<8;i++)
		{
			if (i<4)
			{
				location spawnLoc = new location(selfLoc.x-(i*2),selfLoc.y,selfLoc.z);
				newSpawn = create.object("restuss_rebel_load_lifter_ambush", spawnLoc);
			}
			else
			{
				location spawnLoc = new location(selfLoc.x-(i*2),selfLoc.y,selfLoc.z);
				newSpawn = create.object("restuss_rebel_trooper_st3", spawnLoc);
			}
			setHibernationDelay(newSpawn, 600);
			trial.setParent(trial.getParent(self), newSpawn, true);
			copyObjVar(self, newSpawn, "alignment");
			attachScript(newSpawn, "theme_park.restuss_event.convoy_master");
		}
	}

	messageTo(self, "createConvoy", null, 630, false);
	return SCRIPT_CONTINUE;
}