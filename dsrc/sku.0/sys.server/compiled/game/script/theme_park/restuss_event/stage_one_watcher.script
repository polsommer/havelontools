include library.utils;
include library.restuss_event;

const string FACTION_REBEL 		= "completed_factions.rebel";
const string FACTION_IMPERIAL		= "completed_factions.imperial";

trigger OnAttach()
{
	if (!hasObjVar(self, FACTION_REBEL))
		setObjVar(self, FACTION_REBEL, false);
		
	if (!hasObjVar(self, FACTION_IMPERIAL))
		setObjVar(self, FACTION_IMPERIAL, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler updateStageData()
{
	string finishedFaction = params.getString("faction");
	setWinningFaction(self);
	
	if (finishedFaction.equals("imperial"))
		setObjVar(self, FACTION_IMPERIAL, true);
		
	if (finishedFaction.equals("rebel"))
		setObjVar(self, FACTION_REBEL, true);
		
	if (getBooleanObjVar(self, FACTION_IMPERIAL) && getBooleanObjVar(self, FACTION_REBEL))
		sendStartNotification(self);
	
	return SCRIPT_CONTINUE;
}

int setWinningFaction(obj_id self)
{
	if (hasObjVar(self, restuss_event.WINNING_FACTION))
		return getIntObjVar(self, restuss_event.WINNING_FACTION);
		
	boolean rebelWin = getBooleanObjVar(self, FACTION_REBEL);
	boolean imperialWin = getBooleanObjVar(self, FACTION_IMPERIAL);
	
	if (!rebelWin && !imperialWin)
		return -1;
		
	if (rebelWin && !imperialWin)
		setObjVar(self, restuss_event.WINNING_FACTION, restuss_event.WINNER_REBEL);
	
	if (!rebelWin && imperialWin)
		setObjVar(self, restuss_event.WINNING_FACTION, restuss_event.WINNER_IMPERIAL);
		
	return -1;
}

void sendStartNotification(obj_id self)
{
	if (hasObjVar(self, "sent_signal_one"))
		return;
	CustomerServiceLog("RESTUSS_EVENT", "RESTUSS EVENT - STAGE TWO IS READY TO BEGIN");
	setObjVar(self, "sent_signal_one", true);
	getClusterWideData("event", "stage_two_crier*", true, self);
	
}

messageHandler beginEventNotification()
{
	if (hasObjVar(self, "sent_signal_two"))
		return SCRIPT_CONTINUE;
		
	setObjVar(self, "sent_signal_two", true);
	getClusterWideData("event", "stage_two_crier*", true, self);
	return SCRIPT_CONTINUE;	
}

trigger OnClusterWideDataResponse(string manage_name, string name, int request_id, string[] element_name_list, dictionary[] dungeon_data, int lock_key)
{
	if (dungeon_data == null || dungeon_data.length ==0)
	{
		LOG("doLogging", "Dungeon data was null or empty");
		return SCRIPT_CONTINUE;
	}
	
	if (hasObjVar(self, "sent_signal_one") && hasObjVar(self, "sent_signal_two"))
	{
		for (int i=0;i<dungeon_data.length;i++)
		{
			obj_id crier_id = dungeon_data[i].getObjId("dungeon_id");
			messageTo(crier_id, "beginMessage", null, 0, false);
		}
		
	}
	
	if (hasObjVar(self, "sent_signal_one") && !hasObjVar(self, "sent_signal_two"))
	{

		for (int i=0;i<dungeon_data.length;i++)
		{
			obj_id crier_id = dungeon_data[i].getObjId("dungeon_id");
			messageTo(crier_id, "beginSpawn", null, 0, false);
		}
	}
	
	releaseClusterWideDataLock(manage_name, lock_key);

	
	return SCRIPT_CONTINUE;
}
