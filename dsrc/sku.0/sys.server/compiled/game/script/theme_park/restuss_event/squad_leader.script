include library.ai_lib;
include library.utils;
include library.trial;
include library.create;
include library.restuss_event;


const boolean LOGGING					= true;

trigger OnAttach()
{
	if (!restuss_event.getIsStatic(self))
	{
		findWayPoints(self);
		messageTo (self, "pathToNextPoint", null, 2, false);
	}
	
	trial.setInterest(self);
	messageTo(self, "spawnSquad", null, 2, false);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler spawnSquad()
{
	obj_id[] squad = new obj_id[4];
	location baseLoc = getLocation(self);
	string squadMember = "none";
	if (hasObjVar(self, "squad_member"))
		squadMember = getStringObjVar(self, "squad_member");
	if (squadMember.equals("none"))
		return SCRIPT_CONTINUE;
		
	if (dataTableGetString("datatables/mob/creatures.iff", squadMember, "creatureName") == null)
	{
		doLogging("spawnSquad", "Creature("+squadMember+") was not in the creatures datatable");
		return SCRIPT_CONTINUE;
	}
	
	boolean isStatic = restuss_event.getIsStatic(self);
	
	for (int i=0;i<squad.length;i++)
	{
//		location spawnLoc = new location(baseLoc.x+rand(-2,2), baseLoc.y, baseLoc.z+rand(-2,2), baseLoc.area, baseLoc.cell);
		location spawnLoc = new location(baseLoc.x+20, baseLoc.y, baseLoc.z, baseLoc.area, baseLoc.cell);
		squad[i] = create.object(squadMember, spawnLoc);
		
		if (isIdValid(squad[i]))
		{
			attachScript(squad[i], "theme_park.restuss_event.squad_member");
			utils.setScriptVar(squad[i], trial.PARENT, self);
			
			//if (isStatic)
				ai_lib.followInFormation(squad[i], self, ai_lib.FORMATION_WEDGE, i);
			
			utils.setScriptVar(squad[i], restuss_event.PATROL_POINTS, utils.getLocationArrayScriptVar(self, restuss_event.PATROL_POINTS));
			trial.markAsTempObject(squad[i], true);
		}
	}
	
	if (isStatic)
		ai_lib.establishAgroLink(self, squad);
	else
	{
		for (int j=0;j<squad.length;j++)
		{
			//messageTo(squad[j], "pathToNextPoint", null, j+2, false);
		}
	}
	return SCRIPT_CONTINUE;

}

void findWayPoints(obj_id self)
{
	resizeable obj_id[] wayPoints = utils.getResizeableObjIdArrayScriptVar(self, restuss_event.MASTER_PATROL_ARRAY);
	if (wayPoints == null || wayPoints.length == 0)
	{
		doLogging("findWayPoints", "Waypoint list was empty, exiting");
		trial.cleanupObject(self);
		return;
	}
	
	int pathNum = 0;
	
	if (hasObjVar(self, "path"))
	{		
		pathNum = getIntObjVar(self, "path");
	}
	else
	{
		doLogging("findWayPoints", "I did not have the path ObjVar");
		trial.cleanupObject(self);
		return;
	}
	
	string path = dataTableGetString(restuss_event.STAGE_TWO_DATA, pathNum, "path");
	string[] pathList = split(path, ';');
	
	if (pathList == null || pathList.length == 0)
	{
		doLogging("findWayPoints", "Path list was empty, exiting");
		trial.cleanupObject(self);
		return;
	}
	resizeable location[] myPath = new location[0];

	for (int i=0;i<pathList.length;i++)
	{
		for (int k=0;k<wayPoints.length;k++)
		{
			if (hasObjVar(wayPoints[k], "wp_name"))
			{
				if (pathList[i].equals(getStringObjVar(wayPoints[k], "wp_name")))
				{
					utils.addElement(myPath, getLocation(wayPoints[k]));
				}
			}
		}
	}
	
	
	if (myPath == null)
	{
		doLogging("findWayPoints", "No waypoints were found, exiting");
		trial.cleanupObject(self);
		return;
	}
	
	location[] patrolPoints = myPath;
	if (patrolPoints.length == 0)
	{
		doLogging("findWayPoints", "Patrol Point list was empty, exiting");
		trial.cleanupObject(self);
		return;
	}
	
	utils.setScriptVar(self, restuss_event.PATROL_POINTS, patrolPoints);
	
}

messageHandler pathToNextPoint()
{
	location[] patrolPoints = utils.getLocationArrayScriptVar(self, restuss_event.PATROL_POINTS);
	int patrolType = getIntObjVar(self, restuss_event.PATROL_TYPE);
	switch (patrolType)
	{
		case restuss_event.PATROL:
			ai_lib.setPatrolPath(self, patrolPoints);
		case restuss_event.PATROL_ONCE:
			ai_lib.setPatrolOncePath(self, patrolPoints);
		case restuss_event.PATROL_FLIP:
			ai_lib.setPatrolFlipPath(self, patrolPoints);
		case restuss_event.PATROL_FLIP_ONCE:
			ai_lib.setPatrolFlipOncePath(self, patrolPoints);
		case restuss_event.PATROL_RANDOM:
			ai_lib.setPatrolRandomPath(self, patrolPoints);
		case restuss_event.PATROL_RANDOM_ONCE:
			ai_lib.setPatrolRandomOncePath(self, patrolPoints);
	}

	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/event_squad_leader/"+section, message);	
}