/***** INCLUDES ********************************************************/
include library.utils;
include library.ai_lib;
include library.chat;
include library.prose;
include library.static_item;
include library.xp;
include library.trial;

/***** CONSTANTS *******************************************************/

const string VOLUME_NAME				= "aggressive_area";
const string_id FOUND_JEDI				= new string_id("restuss_event/object", "jedi_located");
const string_id SID_MNU_LIGHTSABER		= new string_id("restuss_event/object", "take_lightsaber");

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	createTriggerVolume(VOLUME_NAME, 15.0f, true);
	messageTo (self, "setLoiter", null, 10.0f, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	createTriggerVolume(VOLUME_NAME, 15.0f, true);
	messageTo (self, "setLoiter", null, 10.0f, false);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self,"cleanupCorpse", null, 300.0f, false);
	string[] scriptList = getScriptList(self);

	if (scriptList == null || scriptList.length == 0)
	{
		return SCRIPT_CONTINUE;
	}
	for (int i=0;i<scriptList.length;i++)
	{
			if (!scriptList[i].endsWith("emperors_hand"))
			{
				string script = scriptList[i].substring(7, scriptList[i].length());
				detachScript(self, script);
			}
	}

 	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	prose_package pp = prose.getPackage(FOUND_JEDI);
	pp.target.set (breacher);

	if (utils.isProfession(breacher, utils.FORCE_SENSITIVE))
	{
		if (!ai_lib.isInCombat(self))
		{
			chat.chat (self, breacher, pp);
			addHate(self, breacher, 1000f);
			startCombat(self, breacher);
			return SCRIPT_CONTINUE;
		}
		else
		{
			addHate(self, breacher, 500f);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)

{
	resizeable obj_id[ ] attackers = new obj_id[0];
	resizeable obj_id[] attackerList = utils.getResizeableObjIdArrayScriptVar(self, "attackerList");

	if (utils.hasScriptVar(self, "attackerList"))
	{
		attackers = utils.getResizeableObjIdArrayScriptVar(self, "attackerList");
		if (utils.getElementPositionInArray(attackerList, attacker) >-1)
			return SCRIPT_CONTINUE;
	}
	utils.addElement(attackers, attacker);
	utils.setScriptVar(self, "attackerList", attackers);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if (!isIncapacitated(self))
	{
		utils.removeScriptVar(self, "attackerList");
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	resizeable obj_id[] attackerList = utils.getResizeableObjIdArrayScriptVar(self, "attackerList");

	if (isIncapacitated(self))
	{
		if (utils.getElementPositionInArray(attackerList, player) >-1)
		{
			if (utils.isProfession(player, utils.FORCE_SENSITIVE))
			{
				if (!utils.hasScriptVar (player, "lootedSchematic"))
				{
					mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_LIGHTSABER);
					return SCRIPT_CONTINUE;
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	obj_id pInv = utils.getInventoryContainer(player);
	resizeable obj_id[] attackerList = utils.getResizeableObjIdArrayScriptVar(self, "attackerList");

	if (isIncapacitated(self))
	{
		if (item == menu_info_types.ITEM_USE)
		{
			if (utils.getElementPositionInArray(attackerList, player) >-1)
			{
				if (utils.isProfession(player, utils.FORCE_SENSITIVE))
				{
					if (!utils.hasScriptVar (player, "lootedSchematic"))
					{
						obj_id newItem = static_item.createNewItemFunction ("item_restuss_schematic_saber_04_01", pInv);
						CustomerServiceLog("jedi_saber", "%TU - Jinsu Razor Schematic Issued: Schematic OID is "+newItem, player);
						utils.setScriptVar(player, "lootedSchematic", 1);
						return SCRIPT_CONTINUE;
					}
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

/***** MESSAGE HANDLERS ************************************************/

messageHandler setLoiter()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_LOITER);
	ai_lib.setLoiterRanges (self, 0f, 80.0f);
	return SCRIPT_CONTINUE;
}

messageHandler cleanupCorpse()
{
	trial.cleanupNpc(self);
	return SCRIPT_CONTINUE;
}