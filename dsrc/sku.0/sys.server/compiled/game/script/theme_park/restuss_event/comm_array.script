/***** INCLUDES ********************************************************/
include library.utils;
include library.ai_lib;
include library.sui;
include library.groundquests;
include library.create;

/***** CONSTANTS *******************************************************/

const string_id SID_MNU_HACK  			= new string_id("restuss_event/object", "hack_comm");
const string_id SID_NO_HACK				= new string_id("restuss_event/object", "cant_hack");
const string_id SID_BEING_HACKED		= new string_id("restuss_event/object", "being_hacked");
const string_id SID_HACK_PROGRESS		= new string_id("restuss_event/object", "hack_in_progress");
const string_id SID_HACK_INTERRUPTED	= new string_id("restuss_event/object", "hack_interrupted");
const string_id SID_OWN_ALREADY			= new string_id("restuss_event/object", "own_already");
const string VOLUME_NAME				= "hacker_area";
const string OBJ_FACTION			= "faction";
const string FAC_REBEL				= "Rebel";
const string FAC_IMPERIAL			= "Imperial";

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	utils.removeObjVar (self, "spawned0");
	utils.removeObjVar (self, "spawned1");
	utils.removeObjVar (self, "spawned2");
	utils.removeObjVar (self, "spawned3");
	utils.removeObjVar (self, "spawned4");
	utils.removeObjVar (self, "spawned5");
	utils.removeObjVar (self, "spawned6");
	utils.removeObjVar (self, "spawned7");
	utils.removeObjVar (self, "spawned8");
	utils.removeObjVar (self, "spawned9");
	utils.removeObjVar (self, "spawned10");

	createTriggerVolume(VOLUME_NAME, 5.0f, true);
	messageTo ( self, "checkFactionInitial", null, 10, false );

	if (!utils.hasObjVar (self, OBJ_FACTION))
	{
		utils.setObjVar (self, OBJ_FACTION, FAC_IMPERIAL);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	utils.removeObjVar (self, "spawned0");
	utils.removeObjVar (self, "spawned1");
	utils.removeObjVar (self, "spawned2");
	utils.removeObjVar (self, "spawned3");
	utils.removeObjVar (self, "spawned4");
	utils.removeObjVar (self, "spawned5");
	utils.removeObjVar (self, "spawned6");
	utils.removeObjVar (self, "spawned7");
	utils.removeObjVar (self, "spawned8");
	utils.removeObjVar (self, "spawned9");
	utils.removeObjVar (self, "spawned10");
	messageTo ( self, "checkFactionInitial", null, 15, false );

	if(!hasTriggerVolume (self, VOLUME_NAME))
	{
		createTriggerVolume(VOLUME_NAME, 5.0f, true);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (utils.hasScriptVar (self, "cantHack"))
	{
		sendSystemMessage(player, SID_NO_HACK);
		return SCRIPT_OVERRIDE;
	}
	if (utils.hasScriptVar (self, "beingHacked"))
	{
		sendSystemMessage(player, SID_BEING_HACKED);
		return SCRIPT_OVERRIDE;
	}
	else if(!isDead(player) && !isIncapacitated(player))
	{
		if (getStringObjVar (self, OBJ_FACTION).equals(FAC_REBEL))
		{
			if (groundquests.isTaskActive(player, "restuss_imperial_st3_comm_array", "hackCommImperial1"))
			{
				mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_HACK);
				return SCRIPT_CONTINUE;
			}
			else if (groundquests.isTaskActive(player, "restuss_imperial_st3_comm_array_spy", "hackCommImperialSpy1"))
			{
				mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_HACK);
				return SCRIPT_CONTINUE;
			}
			else
			{
				sendSystemMessage(player, SID_OWN_ALREADY);
				return SCRIPT_CONTINUE;
			}
		}
		else if (getStringObjVar (self, OBJ_FACTION).equals(FAC_IMPERIAL))
		{
			if (groundquests.isTaskActive(player, "restuss_rebel_st3_comm_array", "hackCommRebel1"))
			{
				mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_HACK);
				return SCRIPT_CONTINUE;
			}
			else if (groundquests.isTaskActive(player, "restuss_rebel_st3_comm_array_spy", "hackCommRebelSpy1"))
			{
				mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_HACK);
				return SCRIPT_CONTINUE;
			}
			else
			{
				sendSystemMessage(player, SID_OWN_ALREADY);
				return SCRIPT_CONTINUE;
			}
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		if(!isDead(player) && !isIncapacitated(player))
		{
			if (getStringObjVar (self, OBJ_FACTION).equals(FAC_REBEL))
			{
				if (groundquests.isTaskActive(player, "restuss_imperial_st3_comm_array", "hackCommImperial1"))
				{
					utils.setScriptVar(self, "beingHacked", player);
					sendSystemMessage(player, SID_HACK_PROGRESS);
					messageTo(self, "checkForIncap", null, 2.0f, false );
					messageTo(self, "hackComplete", null, 40.0f, false );
					return SCRIPT_CONTINUE;
				}
				else if (groundquests.isTaskActive(player, "restuss_imperial_st3_comm_array_spy", "hackCommImperialSpy1"))
				{
					utils.setScriptVar(self, "beingHacked", player);
					sendSystemMessage(player, SID_HACK_PROGRESS);
					messageTo(self, "checkForIncap", null, 2.0f, false );
					messageTo(self, "hackComplete", null, 20.0f, false );
					return SCRIPT_CONTINUE;
				}
			}
			else if (getStringObjVar (self, OBJ_FACTION).equals(FAC_IMPERIAL))
			{
				if (groundquests.isTaskActive(player, "restuss_rebel_st3_comm_array", "hackCommRebel1"))
				{
					utils.setScriptVar(self, "beingHacked", player);
					sendSystemMessage(player, SID_HACK_PROGRESS);
					messageTo(self, "checkForIncap", null, 2.0f, false );
					messageTo(self, "hackComplete", null, 40.0f, false );
					return SCRIPT_CONTINUE;
				}
				else if (groundquests.isTaskActive(player, "restuss_rebel_st3_comm_array_spy", "hackCommRebelSpy1"))
				{
					utils.setScriptVar(self, "beingHacked", player);
					sendSystemMessage(player, SID_HACK_PROGRESS);
					messageTo(self, "checkForIncap", null, 2.0f, false );
					messageTo(self, "hackComplete", null, 20.0f, false );
					return SCRIPT_CONTINUE;
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id breacher)
{
	if (breacher == utils.getObjIdScriptVar(self, "beingHacked"))
	{
		sendSystemMessage(breacher, SID_HACK_INTERRUPTED);
		utils.removeScriptVar(self, "beingHacked");
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

/***** VOIDS ********************************************************/

void spawnCreatures(int x, string datatable, obj_id self )
{
	string spawn = dataTableGetString (datatable, x, "spawns");

	float xCoord = dataTableGetFloat (datatable, x, "loc_x");
	float yCoord = dataTableGetFloat (datatable, x, "loc_y");
	float zCoord = dataTableGetFloat (datatable, x, "loc_z");

	location myself = getLocation (self);

	string planet = myself.area;

	location spawnPoint = new location (xCoord, yCoord, zCoord, planet);

	obj_id spawnedCreature = create.object (spawn, spawnPoint);

	string creatureName = dataTableGetString (datatable, x, "name");
	if (creatureName != null && creatureName != "")
	{
		setName (spawnedCreature, creatureName);
	}

	setObjVar (spawnedCreature, "spawn_number", x);
	setObjVar (spawnedCreature, "mom", self );
	setObjVar (self, "spawned" + x, spawnedCreature);
	attachScript (spawnedCreature, "theme_park.restuss_event.comm_array_spawn_died");

	if (ai_lib.isNpc(spawnedCreature))
	{
		ai_lib.setDefaultCalmBehavior(spawnedCreature, ai_lib.BEHAVIOR_SENTINEL);
		aiEquipPrimaryWeapon(spawnedCreature);
	}

	string scriptList = dataTableGetString (datatable, x, "script");

	if (scriptList != null && scriptList != "")
	{
		string[] scriptArray = split(scriptList, ',' );

		for ( int i = 0; i < scriptArray.length; i++ )
		{
			attachScript( spawnedCreature, scriptArray[i] );
		}

	}

	if (dataTableHasColumn (datatable, "yaw"))
	{
		float spawnYaw = dataTableGetFloat (datatable, x, "yaw");
		if (spawnYaw != 0)
		{
			setYaw (spawnedCreature, spawnYaw);
		}
	}

	if (dataTableHasColumn (datatable, "mood"))
	{
		string creatureMood = dataTableGetString (datatable, x, "mood");
		if (creatureMood != null && creatureMood != "")
		{
			ai_lib.setDefaultCalmMood (spawnedCreature, creatureMood);
		}
	}

	if (dataTableHasColumn (datatable, "spawn_objvar2"))
	{

		string spawnObjVar = dataTableGetString (datatable, x, "spawn_objvar");
		string objvarValue1 = dataTableGetString (datatable, x, "spawn_objvar_value");
		string spawnObjVar2 = dataTableGetString (datatable, x, "spawn_objvar2");
		string spawnValue2 = dataTableGetString (datatable, x, "spawn_objvar_value2");

		if (spawnObjVar != null && spawnObjVar != "")
		{
			if (objvarValue1 != null && objvarValue1 != "")
			{
				setObjVar (spawnedCreature, spawnObjVar, objvarValue1);
			}
		}
		if (spawnObjVar2 != null && spawnObjVar2 != "")
		{
			if (spawnValue2 != null && spawnValue2 != "")
			{
				setObjVar (spawnedCreature, spawnObjVar2, spawnValue2);
			}
		}
	}

	else
	{
		string objVarList = dataTableGetString (datatable, x, "spawn_objvar");
		setCreatureObjVars ( spawnedCreature, objVarList );
	}
	return;
}

void setCreatureObjVars( obj_id creature, string objVarList )
{
	if ( objVarList == null || objVarList == "" )
		return;

	//get array of strings in the format int:name=value
	string[] pairs = split(objVarList, ',');
	for ( int i = 0; i < pairs.length; i++ )
	{
		//split each pair to get int:name and value
		string[] objVarToSet = split(pairs[i], '=' );
		string objVarValue = objVarToSet[1];
		//split int:name into type (int) and name ("name")
		string[] objVarNameAndType = split(objVarToSet[0], ':');
		string objVarType = objVarNameAndType[0];
		string objVarName = objVarNameAndType[1];

		//Now we have:
		// objVarType	=	string, int, float, boolean
		// objVarName	=	the name of the objvar to set
		// objVarValue	=	the value of the objvar

		if ( objVarType == "string" )
			setObjVar( creature, objVarName, objVarValue );
		else if ( objVarType == "int" )
			setObjVar( creature, objVarName, utils.stringToInt( objVarValue ) );
		else if ( objVarType == "float" )
			setObjVar( creature, objVarName, utils.stringToFloat( objVarValue ) );
		else if ( objVarType == "boolean" || objVarType == "bool" )
			setObjVar( creature, objVarName, utils.stringToInt( objVarValue ) );//booleans are stored as int's.
		else
			setObjVar( creature, objVarName, objVarValue );//must have been a string after all.
	}
}


/***** MESSAGE HANDLERS ************************************************/

messageHandler checkForIncap()
{
	obj_id[] hackerInRange = getPlayerCreaturesInRange(self, 5.0f);

	if (hackerInRange == null || hackerInRange.length == 0)
	{
		utils.removeScriptVar(self, "beingHacked");
		return SCRIPT_CONTINUE;
	}
	for (int i=0;i<hackerInRange.length;i++)
	{
		if (hackerInRange[i] == utils.getObjIdScriptVar(self, "beingHacked"))
		{
			if (isIncapacitated (hackerInRange[i]))
			{
				sendSystemMessage(hackerInRange[i], SID_HACK_INTERRUPTED);
				utils.removeScriptVar(self, "beingHacked");
				return SCRIPT_CONTINUE;
			}
			else
			{
				messageTo(self, "checkForIncap", null, 2.0f, false);
				return SCRIPT_CONTINUE;
			}
		}
	}
	utils.removeScriptVar(self, "beingHacked");
	return SCRIPT_CONTINUE;
}

messageHandler hackComplete()
{
	obj_id[] playersInRange = getPlayerCreaturesInRange(self, 64.0f);

	if (utils.hasScriptVar (self, "beingHacked"))
	{
		if (getStringObjVar (self, OBJ_FACTION).equals(FAC_REBEL))
		{
			groundquests.sendSignal (playersInRange, "hackedCommImperial1");
			utils.setScriptVar (self, "cantHack", 1);
			utils.removeScriptVar (self, "beingHacked");
			messageTo (self, "changeFactionImperial", null, 5.0f, false);
			messageTo (self, "hackAvailable", null, 120.0f, false);
		}
		else if (getStringObjVar (self, OBJ_FACTION).equals(FAC_IMPERIAL))
		{
			groundquests.sendSignal (playersInRange, "hackedCommRebel1");
			utils.setScriptVar (self, "cantHack", 1);
			utils.removeScriptVar (self, "beingHacked");
			messageTo (self, "changeFactionRebel", null, 5.0f, false);
			messageTo (self, "hackAvailable", null, 120.0f, false);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler hackAvailable()
{
	utils.removeScriptVar (self, "cantHack");
	return SCRIPT_CONTINUE;
}

messageHandler changeFactionImperial()
{
	location loc = getLocation(self);
	obj_id flagInRange = getFirstObjectWithTemplate(loc, 10.0f, "object/tangible/gcw/flip_banner_onpole_rebel.iff");

	if (!isIdNull(flagInRange))
	{
		destroyObject (flagInRange);
	}
	utils.removeObjVar (self, "spawned0");
	utils.removeObjVar (self, "spawned1");
	utils.removeObjVar (self, "spawned2");
	utils.removeObjVar (self, "spawned3");
	utils.removeObjVar (self, "spawned4");
	utils.removeObjVar (self, "spawned5");
	utils.removeObjVar (self, "spawned6");
	utils.removeObjVar (self, "spawned7");
	utils.removeObjVar (self, "spawned8");
	utils.removeObjVar (self, "spawned9");
	utils.removeObjVar (self, "spawned10");
	utils.setObjVar (self, OBJ_FACTION, FAC_IMPERIAL);
	messageTo ( self, "beginSpawnImperial", null, 3, false );
	return SCRIPT_CONTINUE;
}

messageHandler changeFactionRebel()
{
	location loc = getLocation(self);
	obj_id flagInRange = getFirstObjectWithTemplate(loc, 10.0f, "object/tangible/gcw/flip_banner_onpole_imperial.iff");

	if (!isIdNull(flagInRange))
	{
		destroyObject (flagInRange);
	}
	utils.removeObjVar (self, "spawned0");
	utils.removeObjVar (self, "spawned1");
	utils.removeObjVar (self, "spawned2");
	utils.removeObjVar (self, "spawned3");
	utils.removeObjVar (self, "spawned4");
	utils.removeObjVar (self, "spawned5");
	utils.removeObjVar (self, "spawned6");
	utils.removeObjVar (self, "spawned7");
	utils.removeObjVar (self, "spawned8");
	utils.removeObjVar (self, "spawned9");
	utils.removeObjVar (self, "spawned10");
	utils.setObjVar (self, OBJ_FACTION, FAC_REBEL);
	messageTo ( self, "beginSpawnRebel", null, 3, false );
	return SCRIPT_CONTINUE;
}

messageHandler beginSpawnImperial ()
{
	string datatable = getStringObjVar (self, "spawn_table_imperial");

	if (datatable == null || datatable == "")
	{
		return SCRIPT_OVERRIDE;
	}

	int numberOfCreaturesToSpawn = dataTableGetNumRows (datatable);
	int x = utils.getIntScriptVar (self, "spawnCounter");

	while (x < numberOfCreaturesToSpawn)
	{
		if (hasObjVar (self, "spawned" + x))
		{
			obj_id check = getObjIdObjVar (self, "spawned" + x);
			if (!check.isLoaded())
			{
				spawnCreatures(x, datatable, self );
			}
		}
		else
		{
			spawnCreatures(x, datatable, self );
		}
		x = x + 1;
	}
	return SCRIPT_CONTINUE;
}

messageHandler beginSpawnRebel ()
{
	string datatable = getStringObjVar (self, "spawn_table_rebel");

	if (datatable == null || datatable == "")
	{
		return SCRIPT_OVERRIDE;
	}

	int numberOfCreaturesToSpawn = dataTableGetNumRows (datatable);
	int x = utils.getIntScriptVar (self, "spawnCounter");

	while (x < numberOfCreaturesToSpawn)
	{
		if (hasObjVar (self, "spawned" + x))
		{
			obj_id check = getObjIdObjVar (self, "spawned" + x);
			if (!check.isLoaded())
			{
				spawnCreatures(x, datatable, self );
			}
		}
		else
		{
			spawnCreatures(x, datatable, self );
		}
		x = x + 1;
	}
	return SCRIPT_CONTINUE;
}

messageHandler tellingMomIDied()
{
	int spawn_num = params.getInt ("spawnNumber");
	obj_id spawn_mob = params.getObjId ("spawnMob");

	// only spawn a replacement if the mob who died is the one we actually spawned
	if (hasObjVar (self, "spawned" + spawn_num) && (spawn_mob == getObjIdObjVar (self, "spawned" + spawn_num)))
	{
		if (getStringObjVar (self, OBJ_FACTION).equals(FAC_REBEL))
		{
			string datatable = getStringObjVar (self, "spawn_table_rebel");
			spawnCreatures(spawn_num, datatable, self );
		}
		else
		{
			string datatable = getStringObjVar (self, "spawn_table_imperial");
			spawnCreatures(spawn_num, datatable, self );
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler checkFactionInitial()
{
	if (getStringObjVar (self, OBJ_FACTION).equals(FAC_IMPERIAL))
	{
		messageTo ( self, "beginSpawnImperial", null, 2, false );
		return SCRIPT_CONTINUE;
	}
	if (getStringObjVar (self, OBJ_FACTION).equals(FAC_REBEL))
	{
		messageTo ( self, "beginSpawnRebel", null, 2, false );
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}