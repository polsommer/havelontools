include library.quests;
include library.ai_lib;
include library.chat;
include library.utils;
include ai.ai_combat;
include library.money;
include library.create;

trigger OnAttach()
{
	messageTo (self, "setupSelf", null, 4, true);
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");

	string gatingString = "theme_park_rebel";
	string questID = "rebel_hideout";

	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	if (hasObjVar (speaker, questID + ".vip"))
	{

		obj_id courier = getObjIdObjVar (speaker, questID + ".vip");
		if (courier == self)
		{
			obj_id playerInv = utils.getInventoryContainer(speaker);
			if (type == "escort" || type == "arrest")
			{
				string reward = "npc_takeme_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				dictionary parms = new dictionary();
				parms.put ("player", speaker);
				messageTo (self, "followPlayer", parms, 3, true);
				messageTo (speaker, "finishRebelQuest", null, 1, true);
				//messageTo (self, "spawnExtras", null, 0, true);
				return SCRIPT_OVERRIDE;
			}
			else if (type == "smuggle" || type == "deliver")
			{
				if (checkForItem(playerInv, speaker, questNum) == true)
				{
					string reward = "npc_smuggle_" + questNum;
					string_id message = new string_id (CONVO, reward);
					chat.chat (self, message);
					dictionary parms = new dictionary();
					parms.put ("player", speaker);
					//messageTo (self, "giveReward", parms, 1, true);
					messageTo (speaker, "finishRebelQuest", null, 1, true);
					return SCRIPT_OVERRIDE;
				}
				else
				{
					string_id work = new string_id(CONVO, "gotowork");
					chat.chat (self, work);
					return SCRIPT_CONTINUE;
				}
			}
			else if (type == "retrieve")
			{
				string reward = "npc_smuggle_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				messageTo (speaker, "finishRebelQuest", null, 0, true);
				string retrieveObject = dataTableGetString (datatable, questNum, "retrieve_object");
				if (retrieveObject == null)
				{
					retrieveObject = "none";
				}
				if (retrieveObject != "none")
				{
					createObject (retrieveObject, playerInv, "");
				}
				return SCRIPT_OVERRIDE;
			}
			return SCRIPT_CONTINUE;
		}
		else
		{
			string_id work = new string_id(CONVO, "otherescort");
			chat.chat (self, work);
			return SCRIPT_CONTINUE;
		}
	}
	else
	{
		string_id blah = new string_id (CONVO, "dontknowyou_" + questNum);
		chat.chat (self, blah);
		return SCRIPT_CONTINUE;
	}
}

trigger OnIncapacitated (obj_id killer)
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (type == "destroy")
	{
		messageTo (player, "finishRebelQuest", null, 0, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
		messageTo (player, "finishRebelQuest", null, 1, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "rescue" || type == "escort" || type == "arrest")
	{
		if (questID != null && questID != "")
		{
			int playerQuest = getIntObjVar (player, "theme_park_rebel");
			if (questNum == playerQuest)
			{
				setObjVar(player, questID + ".failed", 1);
				string_id failed = new string_id ("theme_park/messages", "generic_fail_message");
				string failure = getString (failed);
				sendSystemMessage (self, failure, null);
			}
		}
	}
	else if (type == "retrieve" || type == "smuggle" || type == "deliver")
	{
		if(questID != null && questID != "")
		{
			int playerQuest = getIntObjVar (player, "theme_park_rebel");
			if (questNum == playerQuest)
			{
				if (!hasObjVar (player, questID + ".done"))
				{
					setObjVar(player, questID + ".failed", 1);
					string_id killed = new string_id("theme_park/messages", "rebel_quest_npc_killed");
					string_id failed = new string_id("theme_park/messages", "generic_fail_message");
					string killure = getString(killed);
					string failure = getString(failed);
					sendSystemMessage(player, killure, null);
					sendSystemMessage(player, failure, null);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler followPlayer()
{
	obj_id player = params.getObjId ("player");
	setMaster(self, player);
	ai_lib.aiFollow(self, player);
	location home = getLocationObjVar (self, "home");
	addLocationTarget ("home", home, 20);
	return SCRIPT_CONTINUE;
}

messageHandler stopFollowing()
{
	string datatable = getStringObjVar (self, "quest_table");
	//datatable = "datatables/theme_park/" + datatable + ".iff";
	int questNum = getIntObjVar (self, "questNum");
	string gatingString = "theme_park_rebel";
	string questID = "rebel_hideout";

	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	debugSpeakMsg (self, "Thanks for bringing me back.");
	obj_id player = params.getObjId ("player");
	ai_lib.aiStopFollowing (self);
	detachScript (player, playerScript);
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
	}
	messageTo (self, "cleanUp", null, 60, true);
	return SCRIPT_CONTINUE;
}


messageHandler setupSelf ()
{
	setWantSawAttackTriggers( self, false );
	string datatable = getStringObjVar (self, "quest_table");
	if (datatable == null)
	{
		setObjVar (self, "NO SCRIPT", 1);
		return SCRIPT_OVERRIDE;
	}
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	
	if ( hasScript(self, "npc.faction_recruiter.recruiter_setup") )
	{
		detachScript(self, "npc.faction_recruiter.recruiter_setup");
		clearCondition(self, CONDITION_CONVERSABLE);
	}

	if (type == "escort" || type == "smuggle" || type == "deliver" || type == "arrest" || type == "retrieve" || type == "rescue")
	{
		setInvulnerable(self, true );
		attachScript (self, "npc.converse.npc_converse_menu");
	}
	return SCRIPT_CONTINUE;
}

messageHandler saySomething()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");

	if(ai_lib.isNpc(self))
	{
		string something = "npc_breech_" + questNum;
		string_id message = new string_id (CONVO, something);
		chat.chat (self, message);
	}

	if (type == "destroy" || type == "fetch")
	{
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}

messageHandler giveReward()
{
	obj_id player = params.getObjId ("player");
	string datatable = getStringObjVar (player, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	string questID = "rebel_hideout";

	string reward = dataTableGetString (datatable, questNum, "reward");
	if (reward != null )
	{
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
	}
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
		messageTo (player, "finishRebelQuest", null, 1, true);
	}

	detachScript (player, playerScript);
	return SCRIPT_CONTINUE;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable, questNum, "deliver_object");
	boolean hadIt = false;

	obj_id[] contents = getContents(inv);
	for ( int i = 0; i < contents.length; i++ )
	{
		string itemInInventory = getTemplateName (contents[i]);
		if (itemInInventory == giveMe)
		{
			destroyObject (contents[i]);
			hadIt = true;
		}
	}
	return hadIt;
}

/*messageHandler spawnExtras()
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	location here = getLocation (self);
	obj_id player = getObjIdObjVar (self, "player");
	string columnName = dataTableGetColumnName (datatable, questNum);
	string[] rows = dataTableGetStringColumnNoDefaults (datatable, columnName);
	int numRows = rows.length;

	if (numRows > 9)
	{
		int x = 10;
		while (x <= numRows)
		{
			string spawn = dataTableGetString (datatable, x, questNum);
			int around = rand (5, 20);
			here.x = here.x + around;
			here.z = here.z + around;

			obj_id enemy = create.object (spawn, here);
			startCombat(enemy, player);
			x = x + 1;
		}
	}
	return SCRIPT_CONTINUE;
}*/

messageHandler cleanUp()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation (string name)
{
	if (name == "home")
	{
		string datatable = getStringObjVar (self, "quest_table");
		datatable = "datatables/theme_park/" + datatable + ".iff";
		int questNum = getIntObjVar (self, "questNum");
		string gatingString = "theme_park_rebel";
		string questID = "rebel_hideout";

		string playerScript = dataTableGetString (datatable, questNum, "player_script");

		debugSpeakMsg (self, "Thanks for bringing me back.  This is where I belong.");
		obj_id player = getObjIdObjVar (self, "player");
		ai_lib.aiStopFollowing (self);
		detachScript (player, playerScript);
		if (questID != null && questID != "")
		{
			setObjVar (player, questID + ".done", 1);
		}
		messageTo (self, "cleanUp", null, 60, true);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled ( obj_id killer )
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (type == "destroy")
	{
		messageTo (player, "finishRebelQuest", null, 0, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
		messageTo (player, "finishRebelQuest", null, 1, true);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}