
trigger OnAttach()
{
	detachScript (self, "ai.ai");
	detachScript (self, "ai.creature_combat");
	detachScript (self, "skeleton.humanoid");
	detachScript (self, "systems.combat.combat_actions");
	detachScript (self, "systems.combat.credit_for_kills");
	stop (self);
	
	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	
	messageTo(self, "msgShuttleTakeOff", null, 60, false);
	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{

	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);

	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	
	messageTo(self, "msgShuttleTakeOff", null, 60, false);
	
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech( obj_id speaker, string text )
{
	return SCRIPT_CONTINUE;
}

messageHandler msgShuttleTakeOff()
{
	// ignore dupe
	if (hasMessageTo(self, "msgShuttleTakeOff"))
		return SCRIPT_CONTINUE;

	setPosture(self, POSTURE_PRONE);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_PRONE;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"prone", self, "", COMMAND_PRIORITY_FRONT);
	
	messageTo(self, "msgShuttleLand", null, rand(40, 60), false);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgShuttleLand()
{
	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	
	messageTo (self, "msgShuttleTakeOff", null, rand(60, 300), false);
	
	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	obj_id objParent = getObjIdObjVar(self, "objParent");

	dictionary webster = new dictionary();
	webster.put ("destroyedShuttle", self);

	messageTo(objParent, "shuttleDestroyed", webster, 9, false);
	return SCRIPT_CONTINUE;
}
