include library.utils;
include library.ai_lib;
include library.space_utils;
include library.spawning;
include library.create;


messageHandler doBocctyyySpawnEvent()
{
	if (params == null || !params.containsKey("questName"))
	{
		return SCRIPT_CONTINUE;
	}
	
	string questName = params.getString ("questName");
	
	float radius = 3;	

	// Make sure we're not already at max population
	int maxPop = 1;
	if ( hasObjVar(self, "intSpawnCount") )
	{
		maxPop = getIntObjVar(self, "intSpawnCount");
	}
	
	if ( hasObjVar (self, "myCreations") )
	{
		resizeable obj_id[] theList = getResizeableObjIdArrayObjVar (self, "myCreations");
		if (theList.length >= maxPop)
		{
			return SCRIPT_CONTINUE;
		}
	}

	location locTest =spawning.getRandomLocationInCircle(getLocation(self), radius);
	createMob(questName, locTest, radius, self);
	
	return SCRIPT_CONTINUE;
}

void  createMob(string questName, location here, float radius, obj_id self)
{	
	string spawnType = getSpawnType(questName);
	if( spawnType == null || spawnType.equals("") )
	{
		LOG("bocctyyy_bet_spawner", "spawnType was null");
	}
	
	obj_id npc = create.object(spawnType, here);	
	if(!isIdValid(npc))
	{
		setName(self , "BAD MOB OF TYPE "+spawnType);
		return;
	}
	
	int numSpawned = 1;
	
	if (!hasObjVar (self, "myCreations"))
	{
		resizeable obj_id[] myCreations = new obj_id[0];
		utils.addElement (myCreations, npc);
		if ( myCreations != null && myCreations.length > 0  )
		{
			setObjVar (self, "myCreations", myCreations);
		}
	}
	else
	{
		resizeable obj_id[] spawnedList = getResizeableObjIdArrayObjVar (self, "myCreations");
		spawnedList.add (npc);
		
		if ( spawnedList != null && spawnedList.length > 0 )
		{
			setObjVar (self, "myCreations", spawnedList);
			numSpawned = spawnedList.length;
		}
	}

	ai_lib.setDefaultCalmBehavior(npc, ai_lib.BEHAVIOR_LOITER);
	
	setObjVar(npc, "objParent", self);
	attachScript(npc, "theme_park.kashyyyk.bocctyyy_bet_spawned_tracker");

	// Have we reached the max population for this spawner or 
	// do we need to spawn another?
	int maxPop = 1;
	if ( hasObjVar(self, "intSpawnCount") )
	{
		maxPop = getIntObjVar(self, "intSpawnCount");
	}
	
	if ( numSpawned < maxPop )
	{
		dictionary webster = new dictionary();
		webster.put ("questName", questName);
		messageTo(self, "doBocctyyySpawnEvent", webster, 2, false);
	}
	return;
}

string getSpawnType(string questName)
{
	string spawnType = "";
	
	if ( questName.equals("ep3_hunt_sordaan_uller_bet") )
	{
		spawnType = "ep3_etyyy_uller_warhoof";
	}
	else if ( questName.equals("ep3_hunt_sordaan_walluga_bet") )
	{
		spawnType = "ep3_etyyy_walluga_frenzied";
	}
	else if ( questName.equals("ep3_hunt_sordaan_mouf_bet") )
	{
		spawnType = "ep3_etyyy_mouf_roarlord";
	}
	else if ( questName.equals("ep3_hunt_sordaan_webweaver_bet") )
	{
		spawnType = "ep3_etyyy_webweaver_spiker";
	}
	
	return spawnType;
}

messageHandler spawnDestroyed()
{
	obj_id deadNpc = params.getObjId("deadNpc");

	if (!hasObjVar (self, "myCreations"))
	{
		return SCRIPT_CONTINUE;
	}

	resizeable obj_id[] spawnedList = getResizeableObjIdArrayObjVar (self, "myCreations");

	if(spawnedList.contains(deadNpc))
	{
		spawnedList.remove(deadNpc);

		if (spawnedList != null && spawnedList.length > 0)
		{
			setObjVar (self, "myCreations", spawnedList);
		}
		else
		{
			removeObjVar (self, "myCreations");
		}
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler doCleanupEvent()
{
	//LOG("bocctyyy_spawner", "Bocctyyy spawner received doCleanupEvent message.");
	
	if (!hasObjVar (self, "myCreations"))
	{
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] spawnedList = getResizeableObjIdArrayObjVar (self, "myCreations");
	for ( int i = 0; i < spawnedList.length; i++ )
	{
		obj_id spawnedNpc = spawnedList[i];
		if ( isIdValid(spawnedNpc) )
		{
			setObjVar(spawnedNpc, "cleaningUp", true);
			destroyObject(spawnedNpc);
		}
	}
	
	removeObjVar(self, "myCreations");
	
	return SCRIPT_CONTINUE;
}


boolean canSpawnByConfigSetting()
{
	string disableSpawners = getConfigSetting("GameServer", "disableAreaSpawners");
	if (disableSpawners == null)
		return true;
		
	if (disableSpawners.equals("true") || disableSpawners.equals("1"))
		return false;
		
	return true;		
}
