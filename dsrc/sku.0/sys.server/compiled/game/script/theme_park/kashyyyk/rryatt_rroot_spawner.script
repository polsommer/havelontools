include library.utils;
include library.create;
include library.groundquests;
include library.ai_lib;

const string triggerName				= "triggerVolumeSpawnRroot";
const float triggerRange				= 100f;
const string rrootSpawned				= "spawned.rrootSpawned";
const string rrootId					= "spawned.rrootId";
const string rrootOwner					= "spawned.rrootOwner";
const string rrootParent				= "spawned.rrootParent";

const boolean doLogging					= false;

trigger OnInitialize()
{
	establishTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	establishTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

void establishTriggerVolume(obj_id self)
{
	if (!hasTriggerVolume(self, triggerName))
	{
		doLogging("establishTriggerVolume", "Trigger Volume("+triggerName+"/"+triggerRange+") set");
		createTriggerVolume(triggerName, triggerRange, true);
		return;
	}
	doLogging("establishTriggerVolume", "Trigger Volume("+triggerName+"/"+triggerRange+") already established");
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{

	if (volumeName.equals(triggerName))
	{
		if (hasRrootQuest(breacher))
		{
			if (isRrootAvailable(self))
			{
				generateRroot(self, breacher);				
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id breacher)
{
	if (volumeName.equals(triggerName))
	{
		if (hasRrootQuest(breacher))
		{
			if (ownsThisSpawn(self, breacher))
			{
				handlePlayerDepart(self);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

boolean hasRrootQuest(obj_id player)
{
	return groundquests.isQuestActive(player, "ep3_kymayrr_rescue_rroot");
}

void generateRroot(obj_id self, obj_id player)
{
	location spawnLoc = getLocation(self);
	obj_id rroot = create.object("ep3_rroot", spawnLoc);
	setYaw (rroot, 117);
	ai_lib.setDefaultCalmBehavior( rroot, ai_lib.BEHAVIOR_SENTINEL );
	utils.setScriptVar(self, rrootSpawned, 1);
	utils.setScriptVar(self, rrootId, rroot);
	utils.setScriptVar(self, rrootOwner, player);
	utils.setScriptVar(rroot, rrootParent, self);
	messageTo(rroot, "destroyRroot", null, 300, false);
	
}

boolean ownsThisSpawn(obj_id self, obj_id player)
{
	if (utils.hasScriptVar(self, rrootOwner))
		return (utils.getObjIdScriptVar(self, rrootOwner) == player);
	else
		return false;
}

boolean isGettingKey(obj_id player)
{
	return groundquests.isTaskActive(player, "ep3_kymayrr_rescue_rroot", "taskRecoverCode");
}

void handlePlayerDepart(obj_id self)
{
	destroyObject(utils.getObjIdScriptVar(self, rrootId));
	utils.removeScriptVar(self, rrootSpawned);
	utils.removeScriptVar(self, rrootId);
	utils.removeScriptVar(self, rrootOwner);

}
boolean isRrootAvailable(obj_id self)
{
	return (!utils.hasScriptVar(self, rrootSpawned));
}

void doLogging(string section, string message)
{
	if(doLogging)
		LOG("debug/rryatt_rroot_spawner/"+section, message);
}

messageHandler destroyRroot()
{
	handlePlayerDepart(self);
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if(doLogging)
	{
		sendSystemMessageTestingOnly(speaker, "My objId is "+self);
		establishTriggerVolume(self);
	}
	return SCRIPT_CONTINUE;
}
