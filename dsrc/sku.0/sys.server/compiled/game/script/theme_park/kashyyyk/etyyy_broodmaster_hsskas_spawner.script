include library.utils;
include library.create;
include library.groundquests;
include library.ai_lib;

const string triggerName				= "triggerVolumeSpawnHsskas";
const string actionTrigger				= "triggerVolumeActionTrigger";
const float triggerRange				= 100f;
const float actionRange					= 50f;
const string hsskasSpawned				= "spawned.podSpawned";
const string hsskasId					= "spawned.podId";
const string hsskasOwner				= "spawned.podOwner";
const string hsskasParent				= "spawned.podParent";

const boolean doLogging					= false;

trigger OnInitialize()
{
	establishTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	establishTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

void establishTriggerVolume(obj_id self)
{
	if (!hasTriggerVolume(self, triggerName))
	{
		doLogging("establishTriggerVolume", "Trigger Volume("+triggerName+"/"+triggerRange+") set");
		createTriggerVolume(triggerName, triggerRange, true);
	}
	else
		doLogging("establishTriggerVolume", "Trigger Volume("+triggerName+"/"+triggerRange+") already established");
	
	if (!hasTriggerVolume(self, actionTrigger))
	{
		doLogging("establishTriggerVolume", "Trigger Volume("+actionTrigger+"/"+actionRange+") set");
		createTriggerVolume(actionTrigger, actionRange, true);
	}
	else
		doLogging("establishTriggerVolume", "Trigger Volume("+actionTrigger+"/"+actionRange+") already established");

}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{

	if (volumeName.equals(triggerName))
	{
		if (canSpawnHsskas(breacher))
		{
			if (isHsskasAvailable(self))
			{
				generateEscapePod(self, breacher);				
			}
		}
	}
	if (volumeName.equals(actionTrigger))
	{
		if (canSpawnHsskas(breacher))
		{
			if (ownsThisSpawn(self, breacher))
				triggerEvent(breacher);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id breacher)
{
	if (volumeName.equals(triggerName))
	{
		if (ownsThisSpawn(self, breacher))
		{
			handlePlayerDepart(self);
		}
	}
	return SCRIPT_CONTINUE;
}

boolean canSpawnHsskas(obj_id player)
{
	return groundquests.isTaskActive(player, "ep3_gursan_slay_hsskas", "taskApproachHsskas");
}

void generateEscapePod(obj_id self, obj_id player)
{
	location spawnLoc = getLocation(self);
	obj_id pod = create.object("object/static/poi/scene/escape_pod.iff", spawnLoc);
	setYaw (pod, 117);
	utils.setScriptVar(self, hsskasSpawned, 1);
	utils.setScriptVar(self, hsskasId, pod);
	utils.setScriptVar(self, hsskasOwner, player);
	utils.setScriptVar(pod, hsskasParent, self);
	attachScript(pod, "theme_park.kashyyyk.etyyy_hsskas_pod");
	messageTo(self, "destroyEscapePod", null, 300, false);
	
}

boolean ownsThisSpawn(obj_id self, obj_id player)
{
	if (utils.hasScriptVar(self, hsskasOwner))
		return (utils.getObjIdScriptVar(self, hsskasOwner) == player);
	else
		return false;
}

void triggerEvent(obj_id player)
{
	groundquests.sendSignal(player, "signalApproachHsskas");
}

void handlePlayerDepart(obj_id self)
{
	destroyObject(utils.getObjIdScriptVar(self, hsskasId));
	utils.removeScriptVar(self, hsskasSpawned);
	utils.removeScriptVar(self, hsskasId);
	utils.removeScriptVar(self, hsskasOwner);

}
boolean isHsskasAvailable(obj_id self)
{
	return (!utils.hasScriptVar(self, hsskasSpawned));
}

void doLogging(string section, string message)
{
	if(doLogging)
		LOG("debug/etyyy_hsskas_spawner/"+section, message);
}

messageHandler destroyEscapePod()
{
	handlePlayerDepart(self);
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if(doLogging)
	{
		sendSystemMessageTestingOnly(speaker, "My objId is "+self);
		establishTriggerVolume(self);
	}
	return SCRIPT_CONTINUE;
}
