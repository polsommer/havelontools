include library.groundquests;
include library.player_structure;

const string STF						= "dungeon/avatar_platform";
const string_id INCREASE_POWER				= new string_id(STF, "core_overload");
const string_id WARNING_OVERLOAD			= new string_id(STF, "warning_overload");
const string_id ALREADY_OVERLOADED			= new string_id(STF, "core_overloaded");
const string_id SAFETY_MEASURES				= new string_id(STF, "safety_measures");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, INCREASE_POWER );
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if(	groundquests.isTaskActive(player, "ep3_avatar_self_destruct", "overloadCore"))
		{
			startCoreOverload(player, self);
			groundquests.sendSignal(player, "coreOverloaded");
			sendSystemMessage(player, WARNING_OVERLOAD);
			return SCRIPT_CONTINUE;
		}
		if(groundquests.hasCompletedTask(player, "ep3_avatar_self_destruct", "overloadCore"))
		{
			sendSystemMessage(player, ALREADY_OVERLOADED);
			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, SAFETY_MEASURES);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

void startCoreOverload(obj_id player, obj_id self)
{
	obj_id structure = getTopMostContainer(self);
	obj_id powercore = getCellId( structure, "powercore" );
	location here = getLocation( self );
	string planet = here.area;
	location corePoint = new location( -90.0f, 7.98f, -50.0f, planet, powercore );
	playClientEffectLoc(player, "clienteffect/ep3_avatar_core_overload.cef", corePoint, 7.98f);
	messageTo(self, "handlePowerCoreReplay", null, 60f, false);
	return;
}

messageHandler handlePowerCoreReplay()
{
	obj_id[] players = player_structure.getPlayersInBuilding(getTopMostContainer(self));
	if ( players != null && players.length > 0 )
	{
		for ( int i = 0; i < players.length; i++ )
		{
			startCoreOverload(players[i], self);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}