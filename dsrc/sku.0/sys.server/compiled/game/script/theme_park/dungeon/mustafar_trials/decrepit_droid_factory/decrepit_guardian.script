include library.utils;
include library.buff;
include library.trial;

const float DEBUFF_RECAST				= 60;
const boolean LOGGING					= false;


trigger OnAttach()
{
	trial.bumpSession(self);
	trial.setHp(self, trial.HP_DECREPIT_GUARDIAN);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id top = trial.getTop(self);
	trial.setGuardianLockState(self, false);
	messageTo(top, "winTrial", null, 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	startEventActions(self);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.bumpSession(self);
	return SCRIPT_CONTINUE;
}

void startEventActions(obj_id self)
{
	messageTo(self, "doAEBurst", trial.getSessionDict(self), 4, false);
	messageTo(self, "doTankDebuff", trial.getSessionDict(self), 4, false);
}

messageHandler doTankDebuff()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	obj_id target = getTarget(self);
	if (target == null || isIncapacitated(target))
		messageTo(self, "doTankDebuff", trial.getSessionDict(self), 10, false);
		
	buff.applyBuff(target, "hunted");
	messageTo(self, "doTankDebuff", trial.getSessionDict(self), DEBUFF_RECAST, false);
	return SCRIPT_CONTINUE;
}

trigger OnLostTarget(obj_id oldTarget)
{
	messageTo(self, "doTankDebuff", null, 4, false);
	return SCRIPT_CONTINUE;
}

messageHandler doAEBurst()
{
	if (!trial.verifySession(self, params))
	{
		return SCRIPT_CONTINUE;
	}
	
	string[] effects = {"guardian_taint"};
	
	applyAEDebuffs(self, effects);
	
	messageTo(self, "doAEBurst", trial.getSessionDict(self), DEBUFF_RECAST, false);

	return SCRIPT_CONTINUE;
}

void applyAEDebuffs(obj_id self, string[] effects)
{
	obj_id[] players = trial.getValidTargetsInRadius(self, 100);
	
	if (players == null || players.length == 0)
	{
		doLogging("applyAEDebuffs", "Could find no valid players to afflict");
		return;
	}
	
	for (int i=0;i<players.length;i++)
	{
		buff.applyBuff(players[i], effects);
	}
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/decrepit_guardian/"+section, message);	
}
