include library.trial;
include library.utils;
include library.colors;

const string DECREPIT_STF			= "mustafar/decrepit_droid_factory";
const string_id SID_SENSOR_OBSCURE		= new string_id(DECREPIT_STF, "sensor_obscure");
const string_id SID_SENSOR_RESET		= new string_id(DECREPIT_STF, "sensor_reset");
const string_id SID_SENSOR_OBSCURED		= new string_id(DECREPIT_STF, "sensor_obscured");


const boolean doLogging				= false;

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	boolean isUnlocked = trial.isCellPublic(self, trial.DECREPIT_ONE_TWO_STAIR);
	
	if (isActive(self))
	{
		mi.addRootMenu (menu_info_types.ITEM_USE, SID_SENSOR_OBSCURE);
	}
	else
	{
		mi.addRootMenu (menu_info_types.ITEM_USE, SID_SENSOR_OBSCURED);
	}
	sendDirtyObjectMenuNotification(self);

	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		if (isActive(self))
		{
			obscureSensor(self);
		}
	}

	return SCRIPT_CONTINUE;
}

boolean isActive(obj_id self)
{
	if (utils.hasScriptVar(self, trial.SENSOR_STATE))
		return utils.getBooleanScriptVar(self, trial.SENSOR_STATE);
		
	utils.setScriptVar(self, trial.SENSOR_STATE, true);
	return true;	
}

void obscureSensor(obj_id self)
{
	utils.setScriptVar(self, trial.SENSOR_STATE, false);
	messageTo(self, "clearSensor", null, trial.SENSOR_RESET_TIME, false);
}

messageHandler clearSensor()
{
	utils.setScriptVar(self, trial.SENSOR_STATE, true);
	showFlyText( self, SID_SENSOR_RESET, 1.0f, colors.RED );
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (doLogging)
		LOG("travis/code_terminal_slave/"+section, message);
}