include library.ai_lib;
include library.utils;

const boolean LOGGING					= false;

trigger OnDestroy()
{
	if(!hasObjVar(self, "cleanup"))
	{
		obj_id top = getTopMostContainer (self);
		string datatable = getStringObjVar (top, "spawn_table");

		obj_id mom = getObjIdObjVar (self, "mom");
		if (mom == null)
		{
			return SCRIPT_OVERRIDE;
		}

		int spawnNum = getIntObjVar (self, "spawn_number");

		int respawnTime = dataTableGetInt (datatable, spawnNum, "respawn_time");

		if (respawnTime == 0)
		{
			respawnTime = 30;
		}

		dictionary info = new dictionary();
		info.put ("spawnNumber", spawnNum );
		info.put ("spawnMob", self );

		messageTo (mom, "tellingMomIDied", info, respawnTime, false );
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	return SCRIPT_CONTINUE;
}

/**
trigger OnHateTargetAdded(obj_id target)
{
	if (!isWithinHeightDifference(getLocation(self), getLocation(target)))
		removeHateTarget(self, target);
		
	return SCRIPT_CONTINUE;
}
**/

//*********************************************************************
//Functions

boolean isWithinHeightDifference(location selfLoc, location targetLoc)
{
	float heightDifference = Math.abs(targetLoc.y - selfLoc.y);
	if (heightDifference < 6)
		return true;
	else
		return false;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/patrol_guard/"+section, message);	
}

//************************************************************
//Message Handler

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}