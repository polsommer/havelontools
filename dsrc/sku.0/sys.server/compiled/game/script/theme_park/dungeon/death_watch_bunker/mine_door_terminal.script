/***** INCLUDES ****************************************************/

include library.player_structure;
include library.utils;
include library.create;
include library.group;

/***** CONST *******************************************************/

const string TBL_MINE_WAVE							= "datatables/dungeon/death_watch/mine_wave.iff";

const string_id MNU_OPEN_DOOR						= new string_id("dungeon/death_watch", "mnu_open_door");
const string_id ACCESS_GRANTED						= new string_id("dungeon/death_watch", "access_granted");
const string_id ACCESS_DENIED						= new string_id("dungeon/death_watch", "denied_access");
const string_id TERMINAL_LOCKED						= new string_id("dungeon/death_watch", "terminal_locked");

/***** TRIGGERS ****************************************************/
trigger OnAttach()
{
	obj_id structure = player_structure.getStructure(self);
	setObjVar(structure, "death_watch.mineTerminal", self);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	obj_id structure = player_structure.getStructure(player);
	if ( !isIdValid(structure) )
		return SCRIPT_CONTINUE;

	int mnuControl = mi.addRootMenu(menu_info_types.ITEM_USE, MNU_OPEN_DOOR);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (!isIdValid(player))
		return SCRIPT_CONTINUE;

	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	obj_id structure = player_structure.getStructure(player);
	if ( !isIdValid(structure) )
		return SCRIPT_CONTINUE;

	if ( item == menu_info_types.ITEM_USE )
	{
		checkAuthorization(structure, player);
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

void checkAuthorization(obj_id structure, obj_id player)
{
	if(!isIdValid(player) || !isIdValid(structure))
		return;

	obj_id self = getSelf();

	obj_id[] objContents = utils.getContents(player, true);

	if( objContents != null )
	{
		for( int intI = 0; intI<objContents.length; intI++ )
		{
			string strItemTemplate = getTemplateName(objContents[intI]);
			if( strItemTemplate=="object/tangible/dungeon/death_watch_bunker/passkey_mine.iff")
			{
				obj_id passkey = objContents[intI];
				sendSystemMessage(player, ACCESS_GRANTED);
				unlockDoors(structure, player);
				destroyObject(passkey);
				return;
			}
		}
	}

	if(!utils.hasScriptVar(self, "terminal_lock_out"))
	{
		utils.setScriptVar(self, "terminal_lock_out", 1);
		sendSystemMessage(player, ACCESS_DENIED);
		messageTo(self, "handleLockDown", null, 600f, false);
		spawnWave(player);
		return;
	}
	if(utils.hasScriptVar(self, "terminal_lock_out"))
	{
		sendSystemMessage(player, TERMINAL_LOCKED);
		return;
	}
	return;
}

void spawnWave(obj_id player)
{
	obj_id self = getSelf();
	obj_id structure = getTopMostContainer (self);

	int defenderCreatures = dataTableGetNumRows (TBL_MINE_WAVE);
	int x = 0;

	while (x < 1)
	{
		string spawn = dataTableGetString (TBL_MINE_WAVE, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_z");

		location myself = getLocation (player);

		string planet = myself.area;
		obj_id top = getTopMostContainer (player);
		string spawnRoom = dataTableGetString (TBL_MINE_WAVE, x, "room");
		obj_id room = getCellId (structure, spawnRoom);

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.mine_wave_01");
		x = x + 1;
	}
	return;
}

void unlockDoors(obj_id structure, obj_id player)
{
	if(!group.isGrouped(player))
	{
		setObjVar(player, "death_watch.minePass", 1);
		obj_id openRoom = getCellId(structure, "medroom38");
		dictionary params = new dictionary ();
		params.put ("player", player);
		params.put ("room", openRoom);
		messageTo(openRoom, "addToList", params, 1, false);
		return;
	}

	if(group.isGrouped(player))
	{
		resizeable obj_id[] members = group.getPCMembersInRange(player, 100f);
		if ( members != null && members.length > 0 )
		{
			int numInGroup = members.length;

			if (numInGroup < 1)
				return;

			for (int i = 0; i < numInGroup; i++)
			{
		 		obj_id thisMember = members[i];
		 		setObjVar(thisMember, "death_watch.minePass", 1);
		 		obj_id openRoom = getCellId(structure, "medroom38");
		 		dictionary params = new dictionary ();
				params.put ("player", thisMember);
				params.put ("room", openRoom);
		 		messageTo(openRoom, "addToList", params, 1, false);
			}
		}
	}
	return;
}

messageHandler handleLockDown()
{
	utils.removeScriptVar(self, "terminal_lock_out");
	return SCRIPT_CONTINUE;
}

messageHandler handleCallSupport1()
{
	obj_id structure = getTopMostContainer (self);

	int defenderCreatures = dataTableGetNumRows (TBL_MINE_WAVE);
	int x = 0;

	while (x < 2)
	{
		string spawn = dataTableGetString (TBL_MINE_WAVE, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_z");

		location myself = getLocation (self);

		string planet = myself.area;
		obj_id top = getTopMostContainer (self);
		string spawnRoom = dataTableGetString (TBL_MINE_WAVE, x, "room");
		obj_id room = getCellId (structure, spawnRoom);

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.mine_wave_02");
		if (x == 1)
		{
			setObjVar(spawnedCreature, "death_watch.call_backup", 1);
		}
		x = x + 1;
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleCallSupport2()
{
	obj_id structure = getTopMostContainer (self);

	int defenderCreatures = dataTableGetNumRows (TBL_MINE_WAVE);
	int x = 0;

	while (x < defenderCreatures)
	{
		string spawn = dataTableGetString (TBL_MINE_WAVE, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_MINE_WAVE, x, "loc_z");

		location myself = getLocation (self);

		string planet = myself.area;
		obj_id top = getTopMostContainer (self);
		string spawnRoom = dataTableGetString (TBL_MINE_WAVE, x, "room");
		obj_id room = getCellId (structure, spawnRoom);

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.mine_wave_03");
		if (x == 4)
		{
			attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.mine_mini_boss");
		}
		x = x + 1;
	}
	return SCRIPT_CONTINUE;
}
