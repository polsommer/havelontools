include library.trial;
include library.buff;
include library.create;

const boolean LOGGING				= false;

messageHandler triggerTrap()
{
	trial.setTrapState(getContainedBy(self), true);
	string[] guardDroids = {"som_decrepit_blastromech", "som_decrepit_blastromech", "som_decrepit_battle_droid"};	
	string[] cells = {trial.DECREPIT_TRAP_ROOM,trial.DECREPIT_PRE_TRAP_ROOM};
	obj_id[] players = trial.getPlayersInCellList(self, cells);
	
	if (players != null && players.length > 0)
	{
		for (int i=0;i<players.length;i++)
		{
			//playClientEffectObj(players[i], trial.PRT_TRAP_STUN, players[i], "");
			buff.applyBuff(players[i], "biological_suppression");
		}
		
		for (int k=0;k<guardDroids.length;k++)
		{
			obj_id player = players[rand(0, players.length -1)];
			location playerLoc = getLocation(player);
			obj_id guard = create.object(guardDroids[k], playerLoc);
			startCombat(guard, player);
		}
		
		messageTo(self, "clearTrapTrigger", null, 45, false);
	}
	else
	{
		trial.setTrapState(getContainedBy(self), false);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler clearTrapTrigger()
{
	trial.setTrapState(getContainedBy(self), false);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/trap_terminal_cell/"+section, message);
}