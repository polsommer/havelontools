include library.ai_lib;
include library.utils;
include library.trial;
include library.buff;

const int RECAST			= 8;

trigger OnAttach()
{
	trial.setHp(self, trial.HP_SHER_KAR_PRAETORIAN);
	trial.bumpSession(self);
	return SCRIPT_CONTINUE;
}

messageHandler doAttack()
{
	obj_id[] players = trial.getValidTargetsInDungeon(trial.getTop(self));
	obj_id closest = trial.getClosest(self, players);
	startCombat(self, closest);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	messageTo(self, "doShockWave", trial.getSessionDict(self), 4, false);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.bumpSession(self);
	return SCRIPT_CONTINUE;
}

messageHandler doShockWave()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	obj_id[] players = trial.getValidTargetsInRadius(self, 12.0f);
	if (players == null || players.length == 0)
	{
		messageTo(self, "doShockWave", trial.getSessionDict(self), RECAST, false);
		return SCRIPT_CONTINUE;
	}
	
	for (int i=0;i<players.length;i++)
	{
		buff.applyBuff(players[i], "sk_shockWave");
	}
	messageTo(self, "doShockWave", trial.getSessionDict(self), RECAST, false);
	return SCRIPT_CONTINUE;
}