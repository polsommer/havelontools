/***** INCLUDES ***********************************/
include library.chat;
include library.utils;
include library.ai_lib;
include library.utils;
include library.anims;

/***** CONSTANTS **********************************/
const string FACETO_VOLUME_NAME 	= "faceToTriggerVolume";

const string_id BATTERY_CLEANED		= new string_id("dungeon/death_watch", "battery_cleaned");
const string_id NEED_BATTERY		= new string_id("dungeon/death_watch", "need_battery");
const string_id NOT_AUTHORIZED		= new string_id("dungeon/death_watch", "not_authorized");

const string CONVO = "dungeon/death_watch";


/***** TRIGGERS ***************************************/
trigger OnAttach()
{
	attachScript (self, "conversation.death_watch_treadwell");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	setInvulnerable (self, true);
	createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
	setName(self, "WED15-I643 (a workshop droid)");
	return SCRIPT_CONTINUE;
}

messageHandler handleCleanBattery()
{
	obj_id player = params.getObjId("player");

	if(!isIdValid(player))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(player, "death_watch.drill_02"))
	{
		sendSystemMessage(player, NOT_AUTHORIZED);
		return SCRIPT_CONTINUE;
	}

	obj_id[] objContents = utils.getContents(player, true);

	if( objContents != null )
	{
		for( int intI = 0; intI<objContents.length; intI++ )
		{
			string strItemTemplate = getTemplateName(objContents[intI]);
			if( strItemTemplate=="object/tangible/dungeon/death_watch_bunker/drill_battery.iff")
			{
				obj_id battery = objContents[intI];
				destroyObject(battery);
				obj_id playerInv = getObjectInSlot( player, "inventory" );
				if(isIdValid(playerInv))
				{
					obj_id item = createObject( "object/tangible/dungeon/death_watch_bunker/drill_battery_clean.iff", playerInv, "" );
					if(isIdValid(item))
					{
						sendSystemMessage(player, BATTERY_CLEANED);
						return SCRIPT_CONTINUE;
				 	}
				}
			}
		}
	}
	sendSystemMessage(player, NEED_BATTERY);
	return SCRIPT_CONTINUE;
}

