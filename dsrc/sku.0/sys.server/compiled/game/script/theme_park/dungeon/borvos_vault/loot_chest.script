include library.create;
include library.utils;
include library.permissions;
include library.static_item;


//constants
const string DATATABLE_LOOT = "datatables/loot/dungeon/borvo_vault.iff";


trigger OnAttach ()
{
	detachScript (self, "item.container.loot_crate");
	attachScript (self, "item.container.base.base_container");
	if(!hasObjVar(self, "spawnedLoot"))
		spawnLoot(self);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuSelect(obj_id player, int item)
{

	if ( item == menu_info_types.ITEM_OPEN )
	{
		if ( !hasObjVar(self, permissions.VAR_PERMISSION_BASE) )
		{
			switch(getContainerType(self))
			{
				case 0:
					detachScript(self, "item.container.base.base_container");
					break;

				case 1:
					utils.requestContainerOpen(player, self);
					break;

				default:
					break;
			}
		}
	}


	return SCRIPT_CONTINUE;
}



trigger OnAboutToLoseItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	removeObjVar (self, "spawnedLoot");
	messageTo (self, "makeMoreLoot", null, 1200, true);
	return SCRIPT_CONTINUE;
}

messageHandler makeMoreLoot()
{
	if(!hasObjVar(self, "spawnedLoot"))
		spawnLoot(self);
	return SCRIPT_CONTINUE;
}

obj_id spawnLoot(obj_id self)
{
	string[] lootArray = dataTableGetStringColumn(DATATABLE_LOOT, "chest");
	int arrayLength = lootArray.length;
	int index = rand (1, arrayLength - 1);

	string newItem = lootArray[index];

	obj_id cargo = static_item.createNewItemFunction(newItem, self);
	setObjVar(self, "spawnedLoot", cargo);

	return cargo;
}

