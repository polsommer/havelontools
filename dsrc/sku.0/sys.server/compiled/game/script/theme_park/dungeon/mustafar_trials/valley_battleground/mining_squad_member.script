include library.utils;
include library.create;
include library.ai_lib;
include library.trial;
include library.pet_lib;


const boolean LOGGING					= false;


trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	trial.setInterest(self);
	setHibernationDelay(self, 7200);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	if (!utils.hasScriptVar(self, "parent"))
		return SCRIPT_CONTINUE;
	
	obj_id parent = utils.getObjIdScriptVar(self, "parent");
	
	if (!isIdValid(parent))
		return SCRIPT_CONTINUE;
		
	messageTo(parent, "troopEngaged", null, 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (isPlayer(attacker) || pet_lib.isPet(attacker))
	{
		setHate(self, attacker, -5000f);
		int total = 0;
		for (int x = 0;x<damage.length;x++)
		{
			total += damage[x];
		}

		addToHealth(self, total);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnAttackerCombatAction( obj_id weapon, obj_id defender )
{
	if (isPlayer(defender))
	{
		setHate(self, defender, -5000f);
	}
	return SCRIPT_CONTINUE;
}


trigger OnHateTargetAdded(obj_id target)
{
	if (isPlayer(target) || pet_lib.isPet(target))
	{
		setHate(self, target, -5000f);
	}
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/mining_squad_member/"+section, message);
}