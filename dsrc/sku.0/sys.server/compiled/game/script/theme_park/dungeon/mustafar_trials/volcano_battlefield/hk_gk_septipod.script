include library.ai_lib;
include library.utils;
include library.create;
include library.buff;
include library.trial;

const boolean LOGGING					= false;
const int BUFF_STRIP_RECAST				= 16;
const string_id	REMOVED_BUFF				= new string_id("mustafar/volcano_battlefield", "buff_removed");


trigger OnAttach()
{
	beginAttack(self);
	trial.setHp(self, trial.HP_VOLCANO_HK_SEPTIPOD);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	trial.bumpSession(self);
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	obj_id parent = trial.getParent(self);

	dictionary dict = new dictionary();
	dict.put("type", "trio");
	if (isIdValid(parent))
		messageTo(parent, "eventMobDied", dict, 0, false);

	destroyObject(self);

	return SCRIPT_CONTINUE;
}

void beginAttack(obj_id self)
{
	obj_id[] players = trial.getValidTargetsInRadius(self, 150.0f);

	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return;
	}

	obj_id toAttack = trial.getClosest(self, players);

	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return;
	}

	startCombat(self, toAttack);

	messageTo(self, "doBuffStrip", trial.getSessionDict(self), BUFF_STRIP_RECAST, false);

	return;
}

messageHandler doBuffStrip()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;

	stripBuff(self);
	messageTo (self, "doBuffStrip",trial.getSessionDict(self), BUFF_STRIP_RECAST, false);
	return SCRIPT_CONTINUE;
}

void stripBuff(obj_id self)
{
	if (!ai_lib.isInCombat(self))
		return;

	obj_id target = getTarget(self);
	if (isIdValid(target) && !isIncapacitated(target))
	{
		int[] buffs = buff.getAllBuffs(target);
		if (buffs == null && buffs.length == 0)
		{
			doLogging("doBuffStrip", "Target has no buffs of any type");
			return;
		}
		resizeable int[] nonDebuff = new int[0];

		for (int i=0;i<buffs.length;i++)
		{
			if (!buff.isDebuff(buffs[i]))
			{
				utils.addElement(nonDebuff, buffs[i]);
			}
		}


		if (nonDebuff == null || nonDebuff.length == 0)
		{
			doLogging("doBuffStrip", "There are no benifical buffs to remove");
			return;
		}
		int toRemove = 0;

		if (nonDebuff.length == 1)
		{
			toRemove = nonDebuff[0];
		}
		else
		{
			toRemove = nonDebuff[rand(0, nonDebuff.length -1)];
		}

		boolean removed = buff.removeBuff(target, toRemove);
		sendSystemMessage(target, REMOVED_BUFF);
	}
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/event_four_guard/"+section, message);
}
