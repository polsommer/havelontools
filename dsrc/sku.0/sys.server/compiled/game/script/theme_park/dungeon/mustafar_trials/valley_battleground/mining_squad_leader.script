include library.utils;
include library.create;
include library.ai_lib;
include library.armor;
include library.combat;
include library.trial;
include library.pet_lib;
include library.factions;

const string MINE_SOLDIER				= "som_battlefield_miner";


const boolean LOGGING					= false;


trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	trial.setInterest(self);
	messageTo(self, "autoDeploy", null, 5, false);
	setHibernationDelay(self, 7200);
	
	return SCRIPT_CONTINUE;
}

messageHandler autoDeploy()
{
	if (utils.hasScriptVar(self, "autoDeploy"))
		messageTo(self, "deployForces", null, 0, false);
		
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	utils.setScriptVar(self, "engaged", true);
	if (hasScript(self, "conversation.som_battlefield_miner_leader"))
	{
		clearCondition(self, CONDITION_CONVERSABLE);
		detachScript(self, "conversation.som_battlefield_miner_leader");
	}
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (isPlayer(attacker) || pet_lib.isPet(attacker))
	{
		setHate(self, attacker, -5000f);
		int total = 0;
		for (int x = 0;x<damage.length;x++)
		{
			total += damage[x];
		}

		addToHealth(self, total);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnAttackerCombatAction( obj_id weapon, obj_id defender )
{
	if (isPlayer(defender))
	{
		setHate(self, defender, -5000f);
	}
	return SCRIPT_CONTINUE;
}


trigger OnHateTargetAdded(obj_id target)
{
	if (isPlayer(target) || pet_lib.isPet(target))
	{
		setHate(self, target, -5000f);
	}
	return SCRIPT_CONTINUE;
}

messageHandler troopEngaged()
{
	utils.setScriptVar(self, "engaged", true);
	return SCRIPT_CONTINUE;
}

messageHandler deployForces()
{
	setInvulnerable(self, false);
	obj_id master = self;
	factions.setIgnorePlayer(self);
	obj_id[] miners = new obj_id[4];
	location baseLoc = getLocation(self);
	setYaw(self, -70);
	
	for (int i=0;i<miners.length;i++)
	{
		location spawnLoc = new location(baseLoc.x, baseLoc.y, baseLoc.z, baseLoc.area, baseLoc.cell);
		miners[i] = create.object(MINE_SOLDIER, spawnLoc);
		
		if (isIdValid(miners[i]))
		{
			//ai_lib.setDefaultCalmBehavior(miners[i], ai_lib.BEHAVIOR_SENTINEL);
			attachScript(miners[i], "theme_park.dungeon.mustafar_trials.valley_battleground.mining_squad_member");
			setYaw(miners[i], -70);
			utils.setScriptVar(miners[i], trial.PARENT, self);
			ai_lib.followInFormation(miners[i], self, ai_lib.FORMATION_BOX, i+1);
			factions.setIgnorePlayer(miners[i]);
/**
			obj_id inventory = utils.getInventoryContainer(miners[i]);
			obj_id item = createObject("object/tangible/component/armor/shield_generator_personal_c.iff", inventory, "");
			equip(item, miners[i], "utility_belt");
			armor.initializePsg(item, 2.5f, 2000, 10000);
**/
			
		}
	}
	
	utils.setScriptVar(self, "forces", miners);
	//ai_lib.establishAgroLink(self, miners);
	utils.setScriptVar(self, "deployed", true);

	return SCRIPT_CONTINUE;
}

messageHandler unDeployForces()
{
	if (utils.hasScriptVar(self, "engaged"))
	{
		doLogging("unDeployForces", "I have already been engaged, ignoring command");
		return SCRIPT_CONTINUE;
	}	
	if (utils.hasScriptVar(self, "deployed"))
		utils.removeScriptVar(self, "deployed");
		
	if (!utils.hasScriptVar(self, "forces"))
	{
		doLogging("unDeployForces", "I do not have a forces script");
		return SCRIPT_CONTINUE;
	}	
	obj_id[] forces = utils.getObjIdArrayScriptVar(self, "forces");
	
	if (forces == null || forces.length == 0)
	{
		doLogging("unDeployForces", "forces list was null or length was zero");
		return SCRIPT_CONTINUE;
	}
	
	setInvulnerable(self, true);
	for (int i=0;i<forces.length;i++)
	{
		if (isIdValid(forces[i]))
		{
			kill(forces[i]);
			destroyObject(forces[i]);
		}
		else
			doLogging("unDeployForces", "Id for troop("+forces[i]+") was invalid, ignoring");
	}
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/mining_squad_leader/"+section, message);
}