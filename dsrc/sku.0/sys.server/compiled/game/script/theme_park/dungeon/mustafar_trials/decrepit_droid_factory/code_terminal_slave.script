include library.trial;
include library.utils;
include library.sui;

const string DECREPIT_STF			= "mustafar/decrepit_droid_factory";
const string_id SID_GET_ACCESS_SNIP		= new string_id(DECREPIT_STF, "get_access_snip");
const string_id SID_NOT_LOCKED			= new string_id(DECREPIT_STF, "decrepit_not_locked");
const string_id SID_TITLE			= new string_id(DECREPIT_STF, "slave_text_title");
const string_id SID_TEXT			= new string_id(DECREPIT_STF, "slave_text_body");


const boolean LOGGING				= false;

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	boolean isUnlocked = trial.isCellPublic(self, trial.DECREPIT_ONE_TWO_STAIR);
	
	if (!isUnlocked)
	{
		mi.addRootMenu (menu_info_types.ITEM_USE, SID_GET_ACCESS_SNIP);
	}
	else
	{
		mi.addRootMenu (menu_info_types.ITEM_USE, SID_NOT_LOCKED);
	}
	sendDirtyObjectMenuNotification(self);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		if (!trial.isCellPublic(self, trial.DECREPIT_ONE_TWO_STAIR))
		{
			showAccessSnipitSui(self, player);
		}
	}

	return SCRIPT_CONTINUE;
}

void showAccessSnipitSui(obj_id terminal, obj_id player)
{
	obj_id top = getTopMostContainer(terminal);
	if (getGameTime() >= trial.getResetTime(top))
		trial.generateNewKeyCode(top);

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, terminal, player, "defaultHandler" );
	string_id sid_title = SID_TITLE;
	string_id sid_body = SID_TEXT;

	string title = getString (sid_title);
	string body = getString (sid_body);

	if (title == null || title == "")
	{
		title = "NO TITLE";
	}

	if (body == null || body == "")
	{
		body = "Error displaying text";
	}
	
	body += getCodeSnipit(terminal);
	

	setSUIProperty(pid, "", "Size", "450,375");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, body);

	sui.msgboxButtonSetup(pid, sui.OK_ONLY);

	sui.showSUIPage( pid );
}

string getCodeSnipit(obj_id terminal)
{
	obj_id top = getTopMostContainer(terminal);
	int section = getIntObjVar(terminal, "sequence");
	string code = trial.getKeyCode(top);
	string sub = "";
	
	switch (section)
	{
		case 1:
			sub = code.substring(0,2);
			return sub+"XXXX";
		case 2:
			sub = code.substring(2,4);
			return "XX"+sub+"XX";
		case 3:
			sub = code.substring(4,6);
			return "XXXX"+sub;
	}
	return sub;	
}

messageHandler handleResetTimer()
{
	dictionary dict = new dictionary();
	dict.put("timer", 10);
	messageTo(self, "showStatusFlyText", dict, 0, false);
	return SCRIPT_CONTINUE;
}

messageHandler showStatusFlyText()
{
	int timer = params.getInt("timer");
	
	if (timer == 0)
		return SCRIPT_CONTINUE;
	
	trial.doCountdownTimerFlyText(self, timer);	

	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/code_terminal_slave/"+section, message);
}