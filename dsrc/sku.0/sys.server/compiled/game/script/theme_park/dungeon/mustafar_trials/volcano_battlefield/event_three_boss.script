include library.ai_lib;
include library.utils;
include library.create;
include library.buff;
include library.trial;

const boolean LOGGING					= false;


trigger OnAttach()
{
	trial.setHp(self, trial.HP_VOLCANO_THREE_BOSS);
	trial.markAsVolcanoCommander(self);
	setInvulnerable(self, true);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id parent = trial.getParent(self);
	
	dictionary dict = new dictionary();
	dict.put("type", "boss");
	if (isIdValid(parent))
		messageTo(parent, "eventMobDied", dict, 0, false);
		
 	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if (!isIncapacitated(self))
	{
		resetEncounter(self);
		return SCRIPT_CONTINUE;
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler guardReset()
{
	resetEncounter(self);
	return SCRIPT_CONTINUE;
}

void resetEncounter(obj_id self)
{
	clearAllAdds(self);
	respawnAdds(self);
	resetSelf(self);
}

void clearAllAdds(obj_id self)
{
	obj_id[] objects = getCreaturesInRange(getLocation(self), 400);
	if (objects == null || objects.length == 0)
	{
		doLogging("clearAllAdds", "There are no objects in range");
		return;
	}
	
	for (int i=0;i<objects.length;i++)
	{
		if (hasObjVar(objects[i], "boss"))
		{
			obj_id parent = getObjIdObjVar(objects[i], "boss");
			if (parent == self)
			{
				trial.cleanupNpc(objects[i]);
			}
		}
	}
}

void respawnAdds(obj_id self)
{
	obj_id parent = trial.getParent(self);
	messageTo(parent, "spawnGuards", null, 2, false);
}

void resetSelf(obj_id self)
{
	int max = getMaxHealth(self);
	int current = getHealth(self);
	int toHeal = max - current;
	addToHealth(self, toHeal);
	setInvulnerable(self, true);
	ai_lib.clearCombatData();
}

messageHandler beginAttack()
{
	setInvulnerable(self, false);

	obj_id[] players = trial.getValidTargetsInRadius(self, 100.0f);
	
	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return SCRIPT_CONTINUE;
	}
	
	obj_id toAttack = trial.getClosest(self, players);
	
	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return SCRIPT_CONTINUE;
	}
	
	startCombat(self, toAttack);
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/event_two_boss/"+section, message);	
}
