const string MSGS = "dungeon/geonosian_madbio";

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	setOwner (self, player );
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if ( mid == null )
	{
		return SCRIPT_CONTINUE;
	}
	
	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		obj_id trap = getObjIdObjVar (self, "trap");
		//shutoffTrap ( trap, player );
		string_id liquid = new string_id (MSGS, "wrong_chem");
		sendSystemMessage (player, liquid);
	}
		
	return SCRIPT_CONTINUE;
}

void shutoffTrap( obj_id trap, obj_id player )
{
	if (!hasObjVar (trap, "trap_off"))
	{
		dictionary test = new dictionary();
		test.put ("player", player);
		messageTo (trap, "trapShutOff", test, 1, true );
		string_id stabilizer = new string_id (MSGS, "stabilizer");
		sendSystemMessage (player, stabilizer);
	}
	else
	{
		string_id clean = new string_id (MSGS, "clean");
		sendSystemMessage (player, clean);
	}
	return;
}	

trigger OnAboutToReceiveItem (obj_id srcContainer, obj_id giver, obj_id item)
{
	obj_id trap = getObjIdObjVar (self, "trap");
	string templateName = getTemplateName (item);
	if (templateName != "object/tangible/dungeon/poison_stabilizer.iff")
	{
		string_id tooBig = new string_id (MSGS, "too_big");
		sendSystemMessage (giver, tooBig);
		return SCRIPT_OVERRIDE;
	}
	else
	{
		shutoffTrap (trap, giver);
		dictionary webster = new dictionary ();
		webster.put ("chemical", item);
		messageTo (self, "destroyPoisonStabilizer", webster, 1, false );
	}		
	
	return SCRIPT_CONTINUE;
}

messageHandler destroyPoisonStabilizer()
{
	obj_id chemical = params.getObjId ("chemical");
	destroyObject (chemical);
	return SCRIPT_CONTINUE;
}