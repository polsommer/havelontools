include library.groundquests;
include library.player_structure;
include library.badge;
include library.space_dungeon;

const string STF						= "dungeon/avatar_platform";
const string_id ENTER_CODE					= new string_id(STF, "enter_code");
const string_id WARNING_DESTRUCT			= new string_id(STF, "warning_destruct");
const string_id WARNING_ALREADY				= new string_id(STF, "warning_already");
const string_id NO_EFFECT					= new string_id(STF, "no_effect");
const string_id INCORRECT_CODE				= new string_id(STF, "incorrect_code");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu(menu_info_types.ITEM_USE, ENTER_CODE);
		return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if(	groundquests.isTaskActive(player, "ep3_avatar_self_destruct", "selfDestruct"))
		{
			keypad ( player );
			return SCRIPT_CONTINUE;
		}
		if(groundquests.hasCompletedTask(player, "ep3_avatar_self_destruct", "selfDestruct"))
		{
			sendSystemMessage(player, WARNING_ALREADY);
			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, NO_EFFECT);
			return SCRIPT_CONTINUE;
		}
		//keypad(player);
	}

	return SCRIPT_CONTINUE;
}

void keypad( obj_id player )
{
	obj_id self = getSelf();
	int pid = createSUIPage ("Script.Keypad", self, player, "KeypadCallback");
	subscribeToSUIProperty(pid, "result.numberBox", "localtext");
	subscribeToSUIProperty(pid, "buttonEnter", "ButtonPressed");

	showSUIPage (pid);

	return;
}

messageHandler KeypadCallback()
{
	string result = params.getString("result.numberBox" + "." + "localtext");
	string button = params.getString("buttonEnter.ButtonPressed");
	obj_id player = params.getObjId ("player");

	if (!isIdValid(player))
	{
		return SCRIPT_OVERRIDE;
	}

	if ( button == null )
	{
		button = "none";
	}

	if ( result == null )
	{
		result = "0";
	}

	string passkey = getStringObjVar (self, "passcode");

	if (passkey == null || passkey == "")
	{
		passkey = "nothing";
	}

	if (button == "enter")
	{
		//debugSpeakMsg (self, "Passkey was " + passkey);
		if (passkey == result)
		{
			obj_id structure = getTopMostContainer(self);
			obj_id[] players = space_dungeon.getParticipantIds(structure);

			if (players == null )
			{
				//debugSpeakMsg(player, "Players are null");
				return SCRIPT_CONTINUE;
			}

			int numPlayers = players.length;
			//debugSpeakMsg(player, "numPlayers is " + numPlayers);

			if (numPlayers > 0)
			{
				for (int i = 0; i < numPlayers; i++)
				{
					if(groundquests.isTaskActive(players[i], "ep3_avatar_self_destruct", "selfDestruct"))
					{
						groundquests.sendSignal(players[i], "destructSequenceStarted");
						groundquests.sendSignal(players[i], "avatarDestructSequence");
					}
					sendSystemMessage(players[i], WARNING_DESTRUCT);

				}
				badge.grantBadge(players, "bdg_kash_avatar_zssik");
			}

			setObjVar(structure, "avatar_platform.avatar_destruct_sequence", 1);
			dictionary who = new dictionary();
			who.put( "player", player );
			messageTo(structure, "handleDestruct", who, 1f, false);

			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, INCORRECT_CODE);
		}
	}
	return SCRIPT_CONTINUE;
}