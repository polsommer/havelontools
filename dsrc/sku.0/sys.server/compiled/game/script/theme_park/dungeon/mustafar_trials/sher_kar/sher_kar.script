include library.ai_lib;
include library.utils;
include library.trial;
include library.space_dungeon;
include library.combat;
include library.prose;
include library.buff;

const int AE_RECAST					= 32;
const int AE_DAMAGE					= 600;
const float HEALTH_TRIGGER_1				= 0.95f;
const float HEALTH_TRIGGER_2				= 0.80f;
const float HEALTH_TRIGGER_3				= 0.65f;
const float HEALTH_TRIGGER_4				= 0.50f;
const float HEALTH_TRIGGER_5				= 0.35f;
const float HEALTH_TRIGGER_6				= 0.20f;
const float HEALTH_TRIGGER_7				= 0.05f;

trigger OnAttach()
{
	trial.setHp(self, trial.HP_SHER_KAR);
	trial.bumpSession(self);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	trial.bumpSession(self);
	messageTo(trial.getTop(self), "sherKarDied", null, 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	messageTo(self, "performAe", trial.getSessionDict(self), 0, false);
	messageTo(self, "doEnrage", trial.getSessionDict(self), 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.bumpSession(self);
	if (!isDead(self))
		resetSelf(self);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	verifyHealth(self);
	return SCRIPT_CONTINUE;	
}

messageHandler doEnrage()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	messageTo(self, "enrageWarning", null, 0, false);
	messageTo(self, "enrageBuff", trial.getSessionDict(self), 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler enrageWarning()
{
	obj_id[] players = trial.getPlayersInDungeon(trial.getTop(self));
	
	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;
		
	utils.sendSystemMessage(players, trial.MONSTER_ENRAGE_WARNING);
	return SCRIPT_CONTINUE;
}

messageHandler enrageBuff()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	buff.applyBuff(self, "sher_kar_rage");
	messageTo(self, "doEnrage", trial.getSessionDict(self), 75, false);
	return SCRIPT_CONTINUE;
}

messageHandler performAe()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	obj_id[] targets = null;
	if (trial.getTop(self) == self)
		targets = trial.getValidTargetsInRadius(self, 96.0f);
	else
		targets = trial.getPlayersInDungeon(trial.getTop(self));
	
	if (targets == null && targets.length == 0)
	{
		//space_dungeon.endDungeonSession(trial.getTop(self));
		trial.bumpSession(self);
		return SCRIPT_CONTINUE;
	}
	
	for (int i = 0;i<targets.length;i++)
	{
		int damage = AE_DAMAGE;
		prose_package pp = new prose_package();
		pp.stringId = new string_id("cbt_spam", "sk_cave_in");
		pp.actor.set(self);

		pp.target.set(targets[i]);
		pp.digitInteger = damage;
		combat.sendCombatSpamMessageProse(targets[i], self, pp, true, true, false, COMBAT_RESULT_HIT);
		playClientEffectLoc(targets[i], trial.PRT_SHER_KAR_CAVE_IN, getLocation(targets[i]), 14.0f);
		damage(targets[i], DAMAGE_ELEMENTAL_HEAT, HIT_LOCATION_BODY, damage);
	}
	
	messageTo(self, "performAe", trial.getSessionDict(self), AE_RECAST, false);
	return SCRIPT_CONTINUE;	
}

void resetSelf(obj_id self)
{
	int max = getMaxHealth(self);
	int current = getHealth(self);
	int toHeal = max - current;
	addToHealth(self, toHeal);
	ai_lib.clearCombatData();
	trial.healAssemblyUnit(self);
	string[] healthObjVar = {"stage1","stage2","stage3","stage4","stage5","stage6","stage7"};
	utils.removeObjVarList(self, healthObjVar);
}

void verifyHealth(obj_id self)
{
	float max = (float)getMaxHealth(self);
	float current = (float)getHealth(self);
	float ratio = current/max;
	if (ratio <= HEALTH_TRIGGER_1)
	{
		if (ratio <= HEALTH_TRIGGER_2)
		{
			if (ratio <= HEALTH_TRIGGER_3)
			{
				if (ratio <= HEALTH_TRIGGER_4)
				{
					if (ratio <= HEALTH_TRIGGER_5)
					{
						if (ratio <= HEALTH_TRIGGER_6)
						{
							if (ratio <= HEALTH_TRIGGER_7)
							{
								doHealthEvent(self, 7);
								return;
							}	
							doHealthEvent(self, 6);
							return;
						}
						doHealthEvent(self, 5);
						return;
					}
					doHealthEvent(self, 4);
					return;
				}
				doHealthEvent(self, 3);
				return;
			}
			doHealthEvent(self, 2);
			return;
		}
		doHealthEvent(self, 1);
		return;
	}

}

void doHealthEvent(obj_id self, int value)
{
	string stage = "stage"+Integer.toString(value);
	if (!hasObjVar(self, stage))
	{
		setObjVar(self, stage, true);
		switch (value)
		{
			case 1:
				messageTo(trial.getTop(self), "spawnAdd", null, 0, false);
				return;
			case 2:
				messageTo(trial.getTop(self), "spawnAdd", null, 0, false);
				return;
			case 3:
				messageTo(trial.getTop(self), "spawnAdd", null, 0, false);
				return;
			case 4:
				messageTo(trial.getTop(self), "doMidEvent", null, 0, false);
				return;
			case 5:
				messageTo(trial.getTop(self), "spawnAdd", null, 0, false);
				return;
			case 6:
				messageTo(trial.getTop(self), "spawnAdd", null, 0, false);
				return;
			case 7:
				messageTo(trial.getTop(self), "doEndEvent", null, 0, false);
		}
	}
}
