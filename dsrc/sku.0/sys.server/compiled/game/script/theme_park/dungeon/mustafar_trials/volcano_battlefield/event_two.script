include library.ai_lib;
include library.utils;
include library.create;
include library.trial;


const string boss 					= "som_volcano_two_ak_prime";
const string guard					= "som_volcano_two_hk77";


const boolean LOGGING					= false;



trigger OnAttach()
{
	spawnBoss(self);
	messageTo(self, "spawnGuards", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler activateEvent()
{
	setTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

void setTriggerVolume(obj_id self)
{
	if (!hasTriggerVolume(self, "activateVolume"))
	{
		createTriggerVolume("activateVolume", 45, true);
	}

}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if (isPlayer(breacher) && !isIncapacitated(breacher))
	{
		if (volumeName.equals("activateVolume"))
		{
			activateEncounter(self);
		}
	}

	return SCRIPT_CONTINUE;
}


void activateEncounter(obj_id self)
{
	obj_id eventBoss = utils.getObjIdScriptVar(self, "eventBoss");
	setInvulnerable(eventBoss, false);
	obj_id[] guardList = utils.getObjIdArrayScriptVar(self, "guardList");
	utils.messageTo(guardList, "activate", null, 0, false);
}


void spawnBoss(obj_id self)
{
	location here = getLocation(self);
	obj_id eventBoss = create.object(boss, here);
	if (!isIdValid(eventBoss))
	{
		doLogging("spawnGuards", "Failed to generate boss");
		return;
	}
	
	setYaw(eventBoss, 0);
	attachScript(eventBoss,"theme_park.dungeon.mustafar_trials.volcano_battlefield.event_two_boss"); 
	ai_lib.setDefaultCalmBehavior(eventBoss, ai_lib.BEHAVIOR_SENTINEL);
	trial.setParent(self, eventBoss, false);
	utils.setScriptVar(self, "eventBoss", eventBoss);
	
}

messageHandler spawnGuards()
{
	location here = getLocation(self);
	string[] offSet = 
			{
				"-6:-6",
				"6:6",
				"-6:6",
				"6:-6",
			};
	
	obj_id[] guards = new obj_id[4];
	obj_id eventBoss = utils.getObjIdScriptVar(self, "eventBoss");
	for (int i=0;i<offSet.length;i++)
	{
		string[] parse = split(offSet[i],':');
		float locX = here.x + utils.stringToFloat(parse[0]);
		float locZ = here.z + utils.stringToFloat(parse[1]);
		
		location spawnLoc = new location(locX, here.y, locZ, here.area, here.cell);
		guards[i] = create.object(guard, spawnLoc);
		
		if (isIdValid(guards[i]))
		{
			ai_lib.setDefaultCalmBehavior(guards[i], ai_lib.BEHAVIOR_SENTINEL);
			attachScript(guards[i], "theme_park.dungeon.mustafar_trials.volcano_battlefield.event_two_guard");
			setYaw(guards[i], 0);
			trial.setParent(self, guards[i], false);
			setObjVar(guards[i], "boss", eventBoss);
			setInvulnerable(guards[i], true);			
		}
	}
	
	utils.setScriptVar(self, "guardList", guards);
	ai_lib.establishAgroLink(eventBoss, guards);
	return SCRIPT_CONTINUE;
}

messageHandler eventMobDied()
{
	string type = params.getString("type");
	
	if (type.equals("boss"))
	{
		winEvent(self);
	}
		
	return SCRIPT_CONTINUE;
}

void winEvent(obj_id self)
{
	obj_id top = trial.getParent(self);
	if (!isIdValid(top))
	{
		doLogging("winEvent", "Parent ID is not valid");
		return;
	}
	
	messageTo(top, "eventDefeated", null, 0, false);
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("travis/event_two/"+section, message);	
}