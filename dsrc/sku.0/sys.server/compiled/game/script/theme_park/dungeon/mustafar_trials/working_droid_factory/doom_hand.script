include library.ai_lib;
include library.trial;
include library.utils;


const boolean LOGGING					= true;

trigger OnIncapacitated(obj_id killer)
{
 	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	trial.setHp(self, trial.HP_WORKING_DOOM_HAND);
	setInvulnerable(self, true);
	messageTo(self, "setFacing", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler setFacing()
{
	obj_id[] objects = utils.getSharedContainerObjects(self);
	
	for (int i=0;i<objects.length;i++)
	{
		if (getTemplateName(objects[i]).indexOf("radioactive") > -1)
			faceTo(self, objects[i]);
	}
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	if (!ai_lib.isInCombat(self))
		messageTo(self, "setFacing", null, 1, false);
		
	return SCRIPT_CONTINUE;
}
messageHandler deactivate()
{
	setInvulnerable(self, true);
	ai_lib.clearCombatData();
	return SCRIPT_CONTINUE;
}

messageHandler activate()
{
	setInvulnerable(self, false);
	obj_id target = utils.getObjIdScriptVar(self, trial.WORKING_HOD_TARGET);
	addHate(self, target, 100);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (!trial.isPrimaryHand(self))
	{
		int total = 0;
		for (int x = 0;x<damage.length;x++)
		{
			total += damage[x];
		}

		addToHealth(self, total);
	}
	
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/doom_hand/"+section, message);	
}