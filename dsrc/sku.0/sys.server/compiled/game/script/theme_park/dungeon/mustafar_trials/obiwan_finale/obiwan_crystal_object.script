
// ********************************************************************
//					INCLUDES
// ********************************************************************

include library.anims;
include library.buff;
include library.chat;
include library.mustafar;
include library.prose;
include library.sui;
include library.utils;

// ********************************************************************
//					CONSTS
// ********************************************************************

const string_id SID_USE_CRYSTAL 						= new string_id(mustafar.STF_OBI_MSGS, "obiwan_finale_use_crystal");
const string_id SID_DESTROY_CRYSTAL 					= new string_id(mustafar.STF_OBI_MSGS, "obiwan_finale_destroy_crystal");
const string_id SID_TAKE_CRYSTAL 						= new string_id(mustafar.STF_OBI_MSGS, "obiwan_finale_take_crystal");

const boolean CONST_FLAG_DO_LOGGING		= false;

// ********************************************************************
//					TRIGGERS
// ********************************************************************

trigger OnAttach()	// after the boss spawns, tell the event manager that we're ready for intermission 0. The first one.
{
	debugLogging("//***// OnAttach: ", "////>>>> spawned crystal.");

	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("//***// crystal object OnAttach: ", "////>>>> dungeon obj_id is invalid. BROKEN");

	utils.setScriptVar(dungeon, "crystal", self);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

/*
trigger OnInitialize ()
{
	launchObjectTriggerVolumeInitializer(self);
	return SCRIPT_CONTINUE;
}
*/
//----------------------------------------------------------------------

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	debugLogging("OnObjectMenuRequest: ", " entered.");

	if (utils.hasScriptVar(player,"readyToUseCrystal"))
	{
		mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_USE_CRYSTAL);
	}
	else if (utils.hasScriptVar(player,"dealWithCrystal"))
	{
		mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_DESTROY_CRYSTAL);
		mi.addRootMenu (menu_info_types.SERVER_MENU2, SID_TAKE_CRYSTAL);
	}
	else if (hasObjVar(self,"drainedCrystal"))
	{
		mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_USE_CRYSTAL);
	}

	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	debugLogging("OnObjectMenuSelect: ", " entered.");

	if (utils.hasScriptVar(player,"readyToUseCrystal"))
	{
		if (item == menu_info_types.SERVER_MENU1)
		{
			theBigCrystalBuff(player, self);	//A confirmation may be unnecessary, if a dramatic pause is not desired.
		}
	}
	else if (utils.hasScriptVar(player,"dealWithCrystal"))
	{
			if (item == menu_info_types.SERVER_MENU1)
			{
				debugLogging("OnObjectMenuRequest: ", " selected 'destroy the crystal'.");
				destroyTheCrystal(player, self);
			}
			else if (item == menu_info_types.SERVER_MENU2)
			{
				debugLogging("OnObjectMenuRequest: ", " selected 'take the Crystal'.");
				takeTheCrystal(player, self);
			}
	}
	else if (hasObjVar(self,"drainedCrystal"))
	{
		if (item == menu_info_types.SERVER_MENU1)
		{
			drainedCrystalBuff(player, self);
		}
	}
	return SCRIPT_CONTINUE;
}

// ********************************************************************
//					FUNCTIONS
// ********************************************************************

void debugLogging(string section, string message)
{
	if (CONST_FLAG_DO_LOGGING)
		LOG("debug/obiwan_crystal_object/"+section, message);
}

//----------------------------------------------------------------------

void theBigCrystalBuff(obj_id player, obj_id terminal)
{
	// buff, buff, buff																Buff the crap outta the player
	buff.applyBuff(player, "crystal_buff");
	//sendSystemMessageTestingOnly(player, "BUFF BUFF BUFF BUFF");
	utils.removeScriptVar(player,"readyToUseCrystal");

	playClientEffectObj(player, "clienteffect/mustafar/som_force_crystal_buff.cef", player, "");
	sendDirtyObjectMenuNotification(terminal);
	return;
}

//----------------------------------------------------------------------

void destroyTheCrystal(obj_id player, obj_id crystal)
{
	debugLogging("destroyTheCrystal: ", " ENTERED");

	obj_id self = getSelf();

	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("//***// specialForcePowerAttackWindup: ", "////>>>> dungeon obj_id is invalid. BROKEN");

	obj_id playerJedi = utils.getObjIdScriptVar(self, "player");
	// make player face the crystal
	doAnimationAction(playerJedi, anims.PLAYER_FORCE_BLAST);			// make player do animation action of an attack
	playClientEffectObj(playerJedi, "clienteffect/mustafar/som_force_crystal_destruction.cef", self, "");// sound and light explosion
	messageTo (dungeon, "blowUpCrystal", null, 3, false);
	messageTo (dungeon, "obiCongratulatesPlayer", null, 5, false);
	utils.removeScriptVar(player,"dealWithCrystal");

	return;
}


//----------------------------------------------------------------------

void takeTheCrystal(obj_id player, obj_id crystal)
{
	utils.removeScriptVar(player,"dealWithCrystal");

	obj_id self = getSelf();

	obj_id dungeon = getTopMostContainer(self);
	obj_id obiwan = utils.getObjIdScriptVar(dungeon, "obiwan");

	faceTo(obiwan, player);
	string_id strSpam = new string_id(mustafar.STF_OBI_MSGS, "som_obi_disappointed");
	prose_package pp = prose.getPackage(strSpam);
	prose.setTT( pp, player );
	chat.chat (obiwan, player, pp);

	messageTo (dungeon, "moveObiwanToCrystalSuckLocation", null, 2, false);
	return;
}

//----------------------------------------------------------------------

void drainedCrystalBuff(obj_id player, obj_id crystal)
{
	// buff, buff, buff																Temporarily buff the player
	buff.applyBuff(player, "crystal_buff_drained");
	playClientEffectObj(player, "clienteffect/mustafar/som_force_crystal_buff.cef", player, "");							// sound and light explosion
	//sendSystemMessageTestingOnly(player, "DRAINED VERSION! BUFF BUFF BUFF BUFF");
	return;
}

//----------------------------------------------------------------------

messageHandler crystalTest1()
{

	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("//***// specialForcePowerAttackWindup: ", "////>>>> dungeon obj_id is invalid. BROKEN");

	obj_id player = utils.getObjIdScriptVar(dungeon, "player");

	doAnimationAction(player, "anims.PLAYER_FORCE_BLAST");			// make player do animation action of an attack
	playClientEffectObj(player, "clienteffect/mustafar/som_force_crystal_destruction.cef", self, "");

	return SCRIPT_CONTINUE;
}


messageHandler crystalTest2()
{

	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("//***// specialForcePowerAttackWindup: ", "////>>>> dungeon obj_id is invalid. BROKEN");

	obj_id player = utils.getObjIdScriptVar(dungeon, "player");

	doAnimationAction(player, "anims.PLAYER_FORCE_BLAST");			// make player do animation action of an attack
	playClientEffectObj(player, "clienteffect/mustafar/som_force_crystal_drain.cef", self, "");


	return SCRIPT_CONTINUE;
}







/*
// should we be checking to see if the player is incombat or incapped or in range before exiting?

void confirmEject(obj_id player, obj_id terminal)
{
	if (hasScript(player, "theme_park.dungeon.mustafar_trials.obiwan_finale.obiwan_event_player"))
	{
		LOG("space_dungeon", "theme_park.dungeon.mustafar_trials.obiwan_finale.obiwan_crystal_object.confirmEject()");

		string title = "@mustafar/obiwan_finale:end_quest_title";
		string_id prompt = new string_id(mustafar.STF_OBI_MSGS, "end_quest_prompt");
		prose_package pp = new prose_package();
		prose.setStringId(pp, prompt);
		prose.setTU(pp, getEncodedName(player));
		int pid = sui.msgbox(player, player, pp, sui.YES_NO, title,"msgDungeonEjectConfirmed");
	}
	else
	{
		warpPlayer(player, "mustafar", -670, 18, -137, null, -670, 18, -137);
	}
	return;
}

*/




/*					BUFFING NOTES
		string[] effects
		for (int k=0;k<effects.length;k++)
		{
			buff.applyBuff(players[i], effects[k]);
		}


playClientEffectObj(healingGuard, effect, healingGuard, "");
playClientEffectObj(self, effect, self, "");

addToHealth(self, 1000);


	buff.applyBuff(target, "enfeeble");
	buff.applyBuff(target, "distraction");
	if (!jedi.doBuffAction(self, target, "forceInfusion"))
	if (!jedi.doBuffAction(self, target, "forceSpeed"))
	if (!jedi.doBuffAction(self, target, "forceArmor"))
	if (!jedi.doBuffAction(self, target, "forceShield"))
	if (!jedi.doBuffAction(self, target, "forceFeedback"))
	if (!jedi.doBuffAction(self, target, "forceAbsorb"))
	if (!jedi.doBuffAction(self, target, "forceResistDisease"))
	if (!jedi.doBuffAction(self, target, "forceResistPoison"))
	if (!jedi.doBuffAction(self, target, "forceResistBleeding"))
	if (!jedi.doBuffAction(self, target, "forceResistStates"))
	if (!jedi.doBuffAction(self, target, "avoidIncapacitation"))
	if (!jedi.doBuffAction(self, target, "forceValor"))
	if (!jedi.doBuffAction(self, target, "forceAura"))
	if (!jedi.doBuffAction(self, target, "forceCloak"))
*/
