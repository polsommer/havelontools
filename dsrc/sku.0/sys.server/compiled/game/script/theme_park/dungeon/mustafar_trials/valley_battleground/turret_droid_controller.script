include library.utils;
include library.create;
include library.ai_lib;

const string controllerObject				= "object/tangible/dungeon/mustafar/valley_battlefield/turret_controller_object.iff";

const boolean LOGGING					= false;


trigger OnAttach()
{
	stop(self);
	return SCRIPT_CONTINUE;
}

messageHandler buildTurret()
{
	obj_id controller = params.getObjId("turretController");
	string turretType = params.getString("turretType");
	location buildLoc = params.getLocation("buildLoc");
	
	utils.setScriptVar(self, "turretController", controller);
	utils.setScriptVar(self, "turretType", turretType);
	utils.setScriptVar(self, "buildLoc", buildLoc);
	location pathLoc = new location(buildLoc.x-2, buildLoc.y, buildLoc.z-2, buildLoc.area, buildLoc.cell);
	ai_lib.aiPathTo(self, pathLoc);
	setHomeLocation(self, pathLoc);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	string turretType = utils.getStringScriptVar(self, "turretType");
	obj_id controller = utils.getObjIdScriptVar(self, "turretController");
	string turretTemplate = "object/tangible/dungeon/mustafar/valley_battlefield/turret_"+turretType+".iff";
	location buildLoc  = utils.getLocationScriptVar(self, "buildLoc");
	obj_id turret = createObject(turretTemplate, buildLoc);
	if (!isIdValid(turret))
		return SCRIPT_CONTINUE;
	
	dictionary dict = new dictionary();
	dict.put("turretId", turret);
	
	utils.setScriptVar(turret, "controllerId", controller);
	attachScript(turret, "theme_park.dungeon.mustafar_trials.valley_battleground.turret_operations");
	
	messageTo(controller, "builtTurret", dict, 0, false);
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/turret_droid_controller/"+section, message);
}