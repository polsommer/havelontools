include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const boolean LOGGING					= false;

trigger OnAttach()
{
	messageTo(self, "beginAttack", trial.getSessionDict(self), 3, false);
	messageTo(self, "healBoss", trial.getSessionDict(self), 10, false);
	trial.setHp(self, trial.HP_VOLCANO_HK_RISEN_GUARD);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	trial.bumpSession(self);
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler healBoss()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	obj_id boss = trial.getParent(self);
	
	dictionary dict = new dictionary();
	dict.put("guard", self);
	messageTo(boss, "performGuardHeal", dict, 0, false);
	messageTo(self, "healBoss", trial.getSessionDict(self), 10, false);
	return SCRIPT_CONTINUE;
}

messageHandler beginAttack()
{
	obj_id[] players = trial.getValidTargetsInRadius(self, 90.0f);
	
	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return SCRIPT_CONTINUE;
	}
	
	obj_id toAttack = trial.getClosest(self, players);
	
	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return SCRIPT_CONTINUE;
	}
	
	startCombat(self, toAttack);
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/hk_risen_guard/"+section, message);
}
