include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const boolean LOGGING					= false;


trigger OnAttach()
{
	trial.setHp(self, trial.HP_VOLCANO_THREE_GUARD);
	setInvulnerable(self, true);
	return SCRIPT_CONTINUE;
}
trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
 	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	obj_id parent = trial.getParent(self);
	
	dictionary dict = new dictionary();
	dict.put("type", "guard");
	if (isIdValid(parent) && !hasObjVar(self, "reset"))
		messageTo(parent, "eventMobDied", dict, 0, false);
		

 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler beginAttack()
{
	obj_id[] players = trial.getValidTargetsInRadius(self, 100.0f);
	
	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return SCRIPT_CONTINUE;
	}
	
	obj_id toAttack = trial.getClosest(self, players);
	
	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return SCRIPT_CONTINUE;
	}
	
	setInvulnerable(self, false);
	startCombat(self, toAttack);
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/event_three_guard/"+section, message);
}
