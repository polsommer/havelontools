include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const string BUG_COUNT					= "spawning.bugCount";
const int BUG_MAX					= 2;

const string DRONE					= "som_link_lava_beetle_drone";

const boolean LOGGING					= false;

trigger OnAttach()
{
	messageTo (self, "spawnNewBug", null, 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler spawnNewBug()
{
	location spawnLoc = getLocation(self);
	
	obj_id creature = create.object (DRONE, spawnLoc);
	attachScript(creature, "theme_park.dungeon.mustafar_trials.establish_the_link.foreman_drone_spawner_tracker");
	utils.setScriptVar(creature, trial.PARENT, self);
	incrementBugCount(self);
	if (canSpawnMoreBugs(self))
	{
		messageTo (self, "spawnNewBug", null, 20, false);
	}
	return SCRIPT_CONTINUE;
}

int incrementBugCount(obj_id self)
{
	int count = 0;
	if (utils.hasScriptVar(self, BUG_COUNT))
		count = utils.getIntScriptVar(self, BUG_COUNT);
	
	count += 1;
	utils.setScriptVar(self, BUG_COUNT, count);
	return count;
}

int decrementBugCount(obj_id self)
{
	int count = 0;
	if (utils.hasScriptVar(self, BUG_COUNT))
		count = utils.getIntScriptVar(self, BUG_COUNT);
	
	count = count - 1;
	if (count < 0)
		count = 0;
		
	utils.setScriptVar(self, BUG_COUNT, count);
	
	return count;
}

boolean canSpawnMoreBugs(obj_id self)
{
	if (!utils.hasScriptVar(self, BUG_COUNT))
	{
		doLogging("canSpawnMoreBugs", "Lair does not have the script var, spawning more womprats");
		return true;
	}
	
	int currentCount = utils.getIntScriptVar(self, BUG_COUNT);
	
	if (currentCount < BUG_MAX)
	{
		return true;
	}
	
	doLogging("canSpawnMoreBugs", "Bug max exceeded, stop spawning bugs");
	return false;
}

messageHandler droneDied()
{
	decrementBugCount(self);
	
	if (canSpawnMoreBugs(self))
	{
		messageTo(self, "spawnNewBug", null, 0, false);
		return SCRIPT_CONTINUE;
	}
	else
	{
		doLogging("droneDied", "Cannot spawn more bugs because limit has been reached");
		return SCRIPT_CONTINUE;
	}
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/foreman_drone_spawner/"+section, message);	
}