include library.ai_lib;
include library.utils;
include library.trial;
include library.pet_lib;
include library.factions;

const string STF				= "mustafar/valley_battlefield";
const string_id ACTIVATE_DROID			= new string_id(STF, "activate_droid");

const boolean LOGGING				= false;


trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
 	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{

	if (isDroidEngineer(player) && isDeactivated(self))
	{
		int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, ACTIVATE_DROID);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE)
	{
		activateDroid(self);
	}
		
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (isPlayer(attacker) || pet_lib.isPet(attacker))
	{
		int total = 0;
		for (int x = 0;x<damage.length;x++)
		{
			total += damage[x];
		}

		addToHealth(self, total);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnHateTargetAdded(obj_id target)
{
	if (isPlayer(target) || pet_lib.isPet(target))
	{
		removeHateTarget(self, target);
	}
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	findWayPoints(self);
	setInvulnerable(self, true);
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	trial.setInterest(self);
	messageTo(self, "startPathing", null, 8, false);
	setHibernationDelay(self, 7200);
	return SCRIPT_CONTINUE;
}

messageHandler startPathing()
{
	if (!utils.hasScriptVar(self, "deactivated"))
	{
		factions.setIgnorePlayer(self);
		messageTo (self, "pathToNextPoint", null, 0, false);
	}
	return SCRIPT_CONTINUE;
}

boolean isDeactivated(obj_id droid)
{
	return utils.hasScriptVar(droid, "deactivated");
}

boolean isDroidEngineer(obj_id player)
{
	return hasSkill(player, "class_engineering_phase2_novice");
}

void activateDroid(obj_id self)
{
	if(utils.hasScriptVar(self, "deactivated"))
		utils.removeScriptVar(self, "deactivated");

	location playLoc = getLocation(self);
	string effect = "clienteffect/space_command/emergency_power_on.cef";
	playClientEffectLoc(self, effect, playLoc, 0.4f);
		
	messageTo(self, "startPathing", null, 3, false);
}
void findWayPoints(obj_id self)
{
	location baseLoc = getLocation(self);
	obj_id[] objects =  getObjectsInRange(baseLoc, 500);
	if (objects == null || objects.length == 0)
	{
		doLogging("findWayPoints", "Contents list was empty, exiting");
		return;
	}
	resizeable location[] waypoints = new location[0];
	
	for (int i = 0; i < objects.length; i++)
	{
		if (hasObjVar(objects[i], "wp_name"))
		{
			if (getStringObjVar(objects[i], "wp_name").startsWith("droid"))
			{
				utils.addElement(waypoints, getLocation(objects[i]));
			}
		}
	}
	
	if (waypoints == null)
	{
		doLogging("findWayPoints", "No waypoints were found, exiting");
		return;
	}
	
	location[] patrolPoints = waypoints;
	if (patrolPoints.length == 0)
	{
		doLogging("findWayPoints", "Patrol Point list was empty, exiting");
		return;
	}
	
	utils.setScriptVar(self, "patrolPoints", patrolPoints);
	
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler pathToNextPoint()
{
	location[] patrolPoints = utils.getLocationArrayScriptVar(self, "patrolPoints");
	ai_lib.setPatrolRandomPath(self, patrolPoints);	
	setInvulnerable(self, false);

	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/mining_droid/"+section, message);	
}