include library.ai_lib;
include library.utils;
include library.create;
include library.weapons;
include library.trial;
include library.buff;


const string[] BUFF_LIST				 = 
							{
								"volc_boss_one_1",
								"volc_boss_one_2", 
								"volc_boss_one_3", 
								"volc_boss_one_4", 
								"volc_boss_one_5", 
								"volc_boss_one_6", 
								"volc_boss_one_7", 
								"volc_boss_one_8"
							};

const boolean doLogging					= false;

trigger OnAttach()
{
	trial.setHp(self, trial.HP_VOLCANO_ONE_BOSS);
	setInvulnerable(self, true);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id parent = trial.getParent(self);
	
	dictionary dict = new dictionary();
	dict.put("type", "boss");
	if (isIdValid(parent))
		messageTo(parent, "eventMobDied", dict, 0, false);

 	return SCRIPT_CONTINUE;
}

trigger OnEnteredCombat()
{
	messageTo(trial.getParent(self), "beginGuardCycle", null, 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if (!isIncapacitated(self))
	{
		resetEncounter(self);
	}
	return SCRIPT_CONTINUE;
}

void resetEncounter(obj_id self)
{
	clearAllAdds(self);
	respawnAdds(self);
	resetSelf(self);
	clearDamageBuff(self);
}

void clearDamageBuff(obj_id self)
{
	
	for (int i=0;i<BUFF_LIST.length;i++)
	{
		if (buff.hasBuff(self, BUFF_LIST[i]))
			buff.removeBuff(self, BUFF_LIST[i]);
	}
}

void clearAllAdds(obj_id self)
{
	obj_id[] objects = getAllObjectsWithObjVar(getLocation(self), 400.0f, "boss");
	if (objects == null || objects.length == 0)
	{
		doLogging("clearAllAdds", "There are no objects in range");
		return;
	}
	
	for (int i=0;i<objects.length;i++)
	{
		obj_id parent = getObjIdObjVar(objects[i], "boss");
		if (parent == self)
		{
			trial.cleanupNpc(objects[i]);
		}
	}
}

void respawnAdds(obj_id self)
{
	obj_id parent = trial.getParent(self);
	messageTo(parent, "spawnGuards", null, 2, false);
}

void resetSelf(obj_id self)
{
	int max = getMaxHealth(self);
	int current = getHealth(self);
	int toHeal = max - current;
	addToHealth(self, toHeal);
	setInvulnerable(self, true);
	ai_lib.clearCombatData();
}

messageHandler guardDied()
{
	obj_id[] players = getHateList(self);
	utils.sendSystemMessage(players, trial.VOLCANO_TASKMASTER_STRENGTHEN);
	
	int current = 0;
	
	for (int i=0;i<BUFF_LIST.length;i++)
	{
		if (buff.hasBuff(self, BUFF_LIST[i]))
		{
			if (i < BUFF_LIST.length -1)
			{
				buff.removeBuff(self, BUFF_LIST[i]);
				current = i +1;
				buff.applyBuff(self, BUFF_LIST[current]);
				break;
			}
		}
	}
	
	if (current == 0)
		buff.applyBuff(self, BUFF_LIST[current]);
	
	return SCRIPT_CONTINUE;
}

messageHandler performGuardHeal()
{
	obj_id healingGuard = params.getObjId("guard");
	if (!isIdValid(healingGuard) || !exists(healingGuard))
	{
		doLogging("performGuardHeal", "The guard that tried to heal me was invalid");
		return SCRIPT_CONTINUE;
	}
	
	
	playClientEffectObj(healingGuard, trial.PRT_DROID_HEAL, healingGuard, "");
	playClientEffectObj(self, trial.PRT_DROID_HEAL, self, "");
	
	addToHealth(self, 1000);
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (doLogging)
		LOG("travis/event_one/"+section, message);	
}