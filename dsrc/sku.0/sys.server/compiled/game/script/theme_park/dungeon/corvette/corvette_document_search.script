// For the Corellian Corvette quests" a player on the quest must find certain documents using this search.

/***** INCLUDES ********************************************************/

include library.utils;

/***** INHERITS ********************************************************/


/***** CONSTANTS *******************************************************/

const string DATATABLE_NAME					= "datatables/dungeon/corellian_corvette_quest.iff";

const string_id SEARCH_ITEM         	 	= new string_id ("bestine", "search_item"); // "Search"
const string_id ALREADY_SEARCHED_MSG   	 	= new string_id ("bestine", "already_searched"); // "You've already searched here."
const string_id DEFAULT_RECEIVE_MSG    	 	= new string_id ("bestine", "default_receive_msg"); // "You search and find something then place it into your inventory."
const string_id INVENTORY_FULL_MSG   	 	= new string_id ("bestine", "inventory_full"); // "You find something but have no room in your inventory for it. Try again when you are carrying fewer things."

const string GATING_COLUMN					= "gatingObjVar";
const string ALREADY_SEARCHED_COLUMN		= "alreadySearchedObjVar";
const string INTEL_DOCUMENT_COLUMN			= "intel_document";
const string FILLER_01_DOCUMENT_COLUMN		= "filler01_document";
const string FILLER_02_DOCUMENT_COLUMN		= "filler02_document";

const string DOCUMENTS_LIST_OBJVAR_BASE		= "corl_corvette.documentsList";
const string SEARCH_OBJECT_INDEX_OBJVAR		= "corl_corvette.searchObject";

/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{	
	if ( canSearch(self, player) )
	{
		int menuOption = mi.addRootMenu ( menu_info_types.SERVER_ITEM_OPTIONS, SEARCH_ITEM);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.SERVER_ITEM_OPTIONS)
	{	
		if ( canSearch(self, player) )
		{				
			string objectTemplate = getTemplateName(self);
			dictionary templateRow = dataTableGetRow(DATATABLE_NAME, objectTemplate);
			
			string gatingObjVar = templateRow.getString(GATING_COLUMN);
			java.util.StringTokenizer foo = new java.util.StringTokenizer (gatingObjVar, ".");
			foo.nextToken(); //skip "corl_corvette"
 	 	 	string questName = foo.nextToken();
 	 	 	string documentsListObjvar = DOCUMENTS_LIST_OBJVAR_BASE	+ "." + questName;
			
			// Determine which document to give
			string documentFoundColumn = "";
			string[] documents = new string[3];
			int searchObjectIndex = getIntObjVar(self, SEARCH_OBJECT_INDEX_OBJVAR);
			if ( hasObjVar(player, documentsListObjvar) )
			{
				string[] tempArray = getStringArrayObjVar(player, documentsListObjvar);
				for ( int i = 0; i < tempArray.length; i++ )
						documents[i] = tempArray[i];
				
				documentFoundColumn = documents[searchObjectIndex];
			}
			else
			{
				string document01 = INTEL_DOCUMENT_COLUMN;
				string document02 = FILLER_01_DOCUMENT_COLUMN;
				string document03 = FILLER_02_DOCUMENT_COLUMN;
				
				int documentSetup = rand(1,6);
				switch(documentSetup)
				{
					case 1:
						document01 = INTEL_DOCUMENT_COLUMN;
						document02 = FILLER_01_DOCUMENT_COLUMN;
						document03 = FILLER_02_DOCUMENT_COLUMN;
						break;
					case 2:
						document01 = INTEL_DOCUMENT_COLUMN;
						document02 = FILLER_02_DOCUMENT_COLUMN;
						document03 = FILLER_01_DOCUMENT_COLUMN;
						break;
					case 3:
						document01 = FILLER_01_DOCUMENT_COLUMN;
						document02 = INTEL_DOCUMENT_COLUMN;
						document03 = FILLER_02_DOCUMENT_COLUMN;
						break;
					case 4:
						document01 = FILLER_02_DOCUMENT_COLUMN;
						document02 = INTEL_DOCUMENT_COLUMN;
						document03 = FILLER_01_DOCUMENT_COLUMN;
						break;
					case 5:
						document01 = FILLER_01_DOCUMENT_COLUMN;
						document02 = FILLER_02_DOCUMENT_COLUMN;
						document03 = INTEL_DOCUMENT_COLUMN;
						break;
					case 6:
						document01 = FILLER_02_DOCUMENT_COLUMN;
						document02 = FILLER_01_DOCUMENT_COLUMN;
						document03 = INTEL_DOCUMENT_COLUMN;
						break;
				}
				
				documents[0] = document01;
				documents[1] = document02;
				documents[2] = document03;
				setObjVar(player, documentsListObjvar, documents);
				documentFoundColumn = documents[searchObjectIndex];
			}
			
			if ( (documentFoundColumn != null) && (!documentFoundColumn.equals("")) )
			{
				if ( documentFoundColumn.equals("received") )
				{
					sendSystemMessage(player, ALREADY_SEARCHED_MSG);
					return SCRIPT_CONTINUE;
				}
				
				string documentFoundTemplate = templateRow.getString(documentFoundColumn);
				obj_id playerInv = utils.getInventoryContainer(player);
				if ( isIdValid(playerInv) )
				{
					int free_space = getVolumeFree(playerInv);
					if (free_space > 0)
					{
						obj_id objectReceived = createObject(documentFoundTemplate, playerInv, "");
						if ( isIdValid(objectReceived) )
						{
							setObjVar(objectReceived, "noTrade", true);
							if ( !hasScript(objectReceived, "item.special.nomove") )
								attachScript(objectReceived, "item.special.nomove");
							
							string_id receiveObjectMsg = DEFAULT_RECEIVE_MSG;
							sendSystemMessage(player, receiveObjectMsg);
							documents[searchObjectIndex] = "received";
							
							setObjVar(player, documentsListObjvar, documents);
						}
					}
					else
					{
						sendSystemMessage(player, INVENTORY_FULL_MSG);
					}
				}
			}	
		}
	}
	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS *******************************************************/

boolean canSearch(obj_id self, obj_id player)
{
	boolean result = false;
	
	string objectTemplate = getTemplateName(self);
	dictionary templateRow = dataTableGetRow(DATATABLE_NAME, objectTemplate);
	if ( templateRow != null )
	{
		string gatingObjVar = templateRow.getString(GATING_COLUMN);
		if ( hasObjVar(player, gatingObjVar) )
		{
			result = true;
		}
	}
		return result;
}
