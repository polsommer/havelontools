include library.ai_lib;
include library.utils;
include library.trial;
include library.create;


const boolean LOGGING					= false;

trigger OnIncapacitated(obj_id killer)
{
	trial.prepareCorpse(self);
	utils.setScriptVar(self, trial.BATTLEFIELD_DROID_CORPSE, true);	
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	findWayPoints(self);
	messageTo (self, "pathToNextPoint", null, 2, false);
	trial.setInterest(self);
	trial.markAsDroidArmy(self);	
	setHibernationDelay(self, 7200);
	return SCRIPT_CONTINUE;
}

void findWayPoints(obj_id self)
{
	obj_id objects[] = getObjectsInRange(self, 400);
	if (objects == null || objects.length == 0)
	{
		doLogging("findWayPoints", "Contents list was empty, exiting");
		return;
	}
	
	int pathNum = 0;
	
	if (utils.hasScriptVar(self, "path"))
	{		
		pathNum = utils.getIntScriptVar(self, "path");
	}
	else
	{
		string[] paths = dataTableGetStringColumn(trial.VALLEY_DATA, "path");
		pathNum = rand(0, paths.length -1);
	}
	
	string path = dataTableGetString(trial.VALLEY_DATA, pathNum, "path");
	string[] pathList = split(path, ';');
	
	if (pathList == null || pathList.length == 0)
	{
		doLogging("findWayPoints", "Path list was empty, exiting");
		return;
	}
	resizeable location[] waypoints = new location[0];

	for (int i=0;i<pathList.length;i++)
	{
		for (int k=0;k<objects.length;k++)
		{
			if (hasObjVar(objects[k], "wp_name"))
			{
				if (pathList[i].equals(getStringObjVar(objects[k], "wp_name")))
				{
					utils.addElement(waypoints, getLocation(objects[k]));
				}
			}
		}
	}
	
	
	if (waypoints == null)
	{
		doLogging("findWayPoints", "No waypoints were found, exiting");
		return;
	}
	
	location[] patrolPoints = waypoints;
	if (patrolPoints.length == 0)
	{
		doLogging("findWayPoints", "Patrol Point list was empty, exiting");
		return;
	}
	
	utils.setScriptVar(self, "patrolPoints", patrolPoints);
	
}

messageHandler pathToNextPoint()
{

	location[] patrolPoints = utils.getLocationArrayScriptVar(self, "patrolPoints");
	ai_lib.setPatrolOncePath(self, patrolPoints);
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/assault_killer_bot/"+section, message);	
}