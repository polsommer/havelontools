include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const string BOSS					= "som_volcano_five_boss_septipod";

const boolean LOGGING					= false;

trigger OnAttach()
{
	spawnEvent(self);
	return SCRIPT_CONTINUE;
}

messageHandler activateEvent()
{
	setTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

void setTriggerVolume(obj_id self)
{
	if (!hasTriggerVolume(self, "activateVolume"))
	{
		createTriggerVolume("activateVolume", 45, true);
	}

}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if (isPlayer(breacher) && !isIncapacitated(breacher))
	{
		if (volumeName.equals("activateVolume"))
		{
			activateEncounter(self);
		}
	}

	return SCRIPT_CONTINUE;
}


void activateEncounter(obj_id self)
{
	obj_id eventBoss = utils.getObjIdScriptVar(self, "eventBoss");
	messageTo(eventBoss, "activate", null, 0, false);
}

void spawnEvent(obj_id self)
{
	location here = getLocation(self);
	obj_id eventBoss = create.object(BOSS, here);
	if (!isIdValid(eventBoss))
	{
		doLogging("spawnGuards", "Failed to generate boss");
		return;
	}

	setYaw(eventBoss, 195);
	attachScript(eventBoss,"theme_park.dungeon.mustafar_trials.volcano_battlefield.event_five_boss"); 
	ai_lib.setDefaultCalmBehavior(eventBoss, ai_lib.BEHAVIOR_SENTINEL);
	trial.setParent(self, eventBoss, false);
	utils.setScriptVar(self, "eventBoss", eventBoss);
	here.y = here.y - 1;
	string[] offSet = 
			{
				"-19:20",
				"24:23",
				"-4:-32",
				"-6:-22",
				"-12:-6",
				"-12:6",
				"13:15",
				"17:0",
				"18:9"
			};
	
	for (int i=0;i<offSet.length;i++)
	{
		string[] parse = split(offSet[i],':');
		float locX = here.x + utils.stringToFloat(parse[0]);
		float locZ = here.z + utils.stringToFloat(parse[1]);
		
		location spawnLoc = new location(locX, here.y, locZ, here.area, here.cell);
		obj_id item = createObject(trial.WP_OBJECT, spawnLoc);
		if (!isIdValid(item))
		{
			doLogging("spawnActors", "Tried to create invalid item("+trial.WP_OBJECT+")");
			return;
		}
		trial.markAsTempObject(item, true);
		trial.setParent(self, item, false);
		if (i<3)
			setObjVar(item, "trioAddSpawn", true);
		else
			setObjVar(item, "midguardSpawn", true);
	}
	
}

messageHandler eventMobDied()
{
	string type = params.getString("type");
	
	if (type.equals("boss"))
	{
		winEncounter(self);
	}
	
	if (type.equals("midPointGuard"))
	{
		int guard = 0;
		if (utils.hasScriptVar(self, "midGuard"))
			guard = utils.getIntScriptVar(self, "midGuard");
			
		guard += 1;
		utils.setScriptVar(self, "midGuard", guard);
		
		if (guard == 6)
		{
			reactivateBoss(self);
			return SCRIPT_CONTINUE;
		}
	}
	
	return SCRIPT_CONTINUE;
}

void reactivateBoss(obj_id self)
{
	if (!utils.hasScriptVar(self, "eventBoss"))
	{
		doLogging("reactivateBoss", "Do not have boss script var");
		return;
	}
	
	obj_id eventBoss = utils.getObjIdScriptVar(self, "eventBoss");
	if (!isIdValid(eventBoss) || !exists(eventBoss))
	{
		doLogging("reactivateBoss", "Boss was invalid or does not exist");
	}

	messageTo(eventBoss, "reactivate", null, 3, false);
}

void winEncounter(obj_id self)
{
	obj_id top = trial.getParent(self);
	if (!isIdValid(top))
	{
		doLogging("winEvent", "Parent ID is not valid");
		return;
	}
	
	messageTo(top, "eventDefeated", null, 0, false);	
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/event_five/"+section, message);	
}