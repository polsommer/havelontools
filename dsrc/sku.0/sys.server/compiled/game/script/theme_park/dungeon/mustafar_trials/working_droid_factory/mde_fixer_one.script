include library.ai_lib;
include library.trial;
include library.utils;
include library.buff;
include library.prose;



const boolean LOGGING					= false;

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id top = trial.getTop(self);
	dictionary dict = new dictionary();
	messageTo(top, "fixerOneKilled", dict, 0, false);
	utils.messagePlayer(self, trial.getPlayersInDungeon(self), trial.WORKING_MDE_DEFEATED, "object/mobile/pit_droid.iff");
 	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	trial.setHp(self, trial.HP_WORKING_FIXER_ONE);
	messageTo(self, "beginAttack", null, 4, false);
	return SCRIPT_CONTINUE;
}

messageHandler beginAttack()
{
	obj_id[] players = trial.getPlayersInDungeon(self);
	
	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;
		
	obj_id prefered = obj_id.NULL_ID;
	
	for (int i=0;i<players.length;i++)
	{
		if (!isDead(players[i]))
		{
			if (prefered == obj_id.NULL_ID)
				prefered = players[i];
			else
			{
				if (getDistance(self, players[i]) < getDistance(self, prefered))
					prefered = players[i];
			}
		}
	}
	
	if (prefered == obj_id.NULL_ID)
		return SCRIPT_CONTINUE;
		
	startCombat(self, prefered);
	return SCRIPT_CONTINUE;
}
void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/fixer_one/"+section, message);	
}