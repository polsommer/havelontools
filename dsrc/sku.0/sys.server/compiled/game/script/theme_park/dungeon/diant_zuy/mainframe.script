include library.utils;
include library.locations;
include library.sui;
include library.colors;


const string DIANT_BUNKER = "dungeon/diant_bunker";

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	string_id mainframeUse = new string_id(DIANT_BUNKER, "mainframe_use");	
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid != null )
			mid.setServerNotify(true);
		else
			mi.addRootMenu (menu_info_types.ITEM_USE, mainframeUse);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	obj_id top = getTopMostContainer (self);
	int genState = getIntObjVar(top, "diant.generator");
	int securityState = getIntObjVar(top, "diant.security");
	int doorOpen = getIntObjVar(top, "diant.doorOpened");

	if ( item == menu_info_types.ITEM_USE )
	{
		if(doorOpen == 1)  //Door is open, quit messing with it.
		{
			string_id computerMainframeAlready = new string_id(DIANT_BUNKER, "computer_mainframe_already");
			sendSystemMessage(player, computerMainframeAlready);
			return SCRIPT_CONTINUE;
		}
	
		if(genState == 0 && doorOpen == 0) // The power is off
		{
			string_id computerMainframeNoPower = new string_id(DIANT_BUNKER, "computer_mainframe_no_power");
			sendSystemMessage(player, computerMainframeNoPower);
			return SCRIPT_CONTINUE;
		}
		
		if(securityState == 0 && genState == 1 && doorOpen == 0) // Security override first
		{
			string_id computerMainframeDenied = new string_id(DIANT_BUNKER, "computer_mainframe_denied");
			sendSystemMessage(player, computerMainframeDenied);		
			return SCRIPT_CONTINUE;
		}
		
		if(genState == 1 && securityState == 1 && doorOpen == 0) // Door might open
		{
			showMainframe(self, player);		
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

int showMainframe (obj_id pcd, obj_id player)
{
	string_id textMsg = new string_id (DIANT_BUNKER, "computer_mainframe_text");
	string TEXT = getString (textMsg);
	string_id titleMsg = new string_id (DIANT_BUNKER, "computer_mainframe_title");
	string TITLE = getString (titleMsg);
	// Create the dialog page.
	int pid = sui.createSUIPage( sui.SUI_MSGBOX, pcd, player, "handleMainframe" );

	// Add elements text.
	setSUIProperty(pid, "", "Size", "250,175");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, TITLE );
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, TEXT);

	// Add buttons.
	sui.msgboxButtonSetup(pid, sui.YES_NO_CANCEL);
	setSUIProperty(pid, sui.MSGBOX_BTN_REVERT, sui.PROP_TEXT, "Info");
	setSUIProperty(pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, "Yes");
	setSUIProperty(pid, sui.MSGBOX_BTN_CANCEL, sui.PROP_TEXT, "No");

	setSUIProperty(pid, sui.MSGBOX_BTN_REVERT, "OnPress", "RevertWasPressed=1\r\nparent.btnOk.press=t");
	subscribeToSUIProperty(pid, sui.MSGBOX_BTN_REVERT, "RevertWasPressed");
	
	// Show dialog.
	sui.showSUIPage( pid );
	
	return pid;
}

messageHandler handleMainframe()
{
	obj_id top = getTopMostContainer (self);
	if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	// Determine which button was pressed.
	obj_id player = sui.getPlayerId( params );
	string revert = params.getString(sui.MSGBOX_BTN_REVERT+".RevertWasPressed");
	int bp = sui.getIntButtonPressed( params );


	switch ( bp )
	{
		case sui.BP_OK:			

			if (revert != null && !revert.equals(""))
			{
			string_id computerMainframeInfo = new string_id(DIANT_BUNKER, "computer_mainframe_info");
			sendSystemMessage(player, computerMainframeInfo);
			return SCRIPT_CONTINUE;
			}
			
			else
			{
			string_id computerMainframeYes = new string_id(DIANT_BUNKER, "computer_mainframe_yes");
			sendSystemMessage(player, computerMainframeYes);
			messageTo(self, "tamperWithMainframe", params, 0, false);
			return SCRIPT_CONTINUE;
			}

		case sui.BP_CANCEL: // "Close"
			string_id computerMainframeNo = new string_id(DIANT_BUNKER, "computer_mainframe_no");
			sendSystemMessage(player, computerMainframeNo);
			return SCRIPT_CONTINUE;
			
	}

	return SCRIPT_CONTINUE;
}

messageHandler tamperWithMainframe()
{
	obj_id player = params.getObjId("player");
	obj_id top = getTopMostContainer (self);
	int educationBonus = 0;
	int total = 0;
	int roll = rand(1, 5);

// Give a bonus for each of the following sets of skills.

	if(	hasSkill(player, "class_medic_phase1_master") ||
		hasSkill(player, "class_munitions_phase1_master") ||
		hasSkill(player, "class_engineering_phase2_novice") ||
		hasSkill(player, "class_bountyhunter_phase2_novice") ||
		hasSkill(player, "class_smuggler_phase1_novice")	)
			
			educationBonus ++;

	if(	hasSkill(player, "class_medic_phase2_novice") ||
		hasSkill(player, "class_munitions_phase2_master") ||
		hasSkill(player, "class_engineering_phase3_novice") ||
		hasSkill(player, "class_bountyhunter_phase3_novice") ||
		hasSkill(player, "class_smuggler_phase2_novice")	)
			
			educationBonus ++;

	if(	hasSkill(player, "class_medic_phase3_novice") ||
		hasSkill(player, "class_munitions_phase2_master") ||
		hasSkill(player, "class_engineering_phase4_novice") ||
		hasSkill(player, "class_bountyhunter_phase4_novice") ||
		hasSkill(player, "class_smuggler_phase3_novice")	)
			
			educationBonus ++;

	total = roll + educationBonus;
	
//	sendSystemMessage(player, "Roll: " + roll + " Education Bonus: " + educationBonus + " Total: " + total, null);
	
	if(total >= 4)	// Win!
	{
		string_id computerMainframeSuccess = new string_id(DIANT_BUNKER, "computer_mainframe_success");
		string_id computerMainframeSuccessFly = new string_id(DIANT_BUNKER, "computer_mainframe_success_fly");
		sendSystemMessage(player, computerMainframeSuccess);
		showFlyText(player, computerMainframeSuccessFly, 1.5f, colors.BLUE);		
		setObjVar(top, "diant.doorOpened", 1);
		messageTo(top, "openLocks", params, 0, false);
		playMusic (player, "sound/music_acq_academic.snd");		
	}

	if(total < 4)	// Uh-oh. Spawn some droids.
	{
		string_id computerMainframeFailure = new string_id(DIANT_BUNKER, "computer_mainframe_failure");
		string_id computerMainframeFailureFly = new string_id(DIANT_BUNKER, "computer_mainframe_failure_fly");
		sendSystemMessage(player, computerMainframeFailure);
		showFlyText(player, computerMainframeFailureFly, 1.5f, colors.RED);
		messageTo(top, "mainframeFailed", params, 0, false);
	}

	return SCRIPT_CONTINUE;
}