//------------------------------------------------
// Includes
//------------------------------------------------

include library.utils;

//------------------------------------------------
// Constants
//------------------------------------------------

//  for messages
const string MSGS = "dungeon/geonosian_madbio";

//  for rooms
const string VAR_ACCESS_LIST = "access";


//------------------------------------------------

trigger OnInitialize ()
{
	// Convert the access list if necessary
	convertAccessList( self );

	permissionsMakePrivate ( self );
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar (self, VAR_ACCESS_LIST);
	if (permList == null || permList.size () == 0)
	{
		return SCRIPT_CONTINUE;
	}

	int numInList = permList.size();

	for (int i = 0; i < numInList; i ++)
	{
		obj_id thisPlayer = permList[i];
		if (isIdValid (thisPlayer))
		{
			string fname = getFirstName (thisPlayer);
			permissionsAddAllowed (self, fname);
		}			
	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	permissionsMakePrivate ( self );
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar (self, VAR_ACCESS_LIST);
	if (permList == null || permList.size () == 0)
	{
		return SCRIPT_CONTINUE;
	}

	int numInList = permList.size();

	for (int i = 0; i < numInList; i ++)
	{
		obj_id thisPlayer = permList[i];
		if (isIdValid (thisPlayer))
		{
			string fname = getFirstName (thisPlayer);
			permissionsAddAllowed (self, fname);
		}			
	}
	return SCRIPT_CONTINUE;
}

messageHandler addToList ()
{
	obj_id player = params.getObjId ("player");

	if (!isIdValid(player) || !isPlayer(player))
	{
		return SCRIPT_CONTINUE;
	}

	string fname = getFirstName (player);
	obj_id room = params.getObjId ("room");

	if (room == null)
	{
		return SCRIPT_CONTINUE;
	}

	permissionsAddAllowed (room, fname);

	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar(room, VAR_ACCESS_LIST );
	if (permList == null )
	{
		permList = new Vector();
	}

	if (!utils.isElementInArray( permList, player ))
	{
		permList = utils.addElement (permList, player);
		utils.setResizeableBatchObjVar(room, VAR_ACCESS_LIST, permList);
	}

	string roomName = getName (room);

	if (roomName == "largeendcave")
	{
		CustomerServiceLog("DUNGEON_GeonosianBunker","*Geonosian Finish: " + player + ": " + fname + " has entered the Last Room of the Bunker.");
	}
	return SCRIPT_CONTINUE;
}

messageHandler removeFromList ()
{
	obj_id player = params.getObjId ("player");

	if (!isIdValid(player) || !isPlayer(player))
	{
		return SCRIPT_CONTINUE;
	}

	string fname = getFirstName (player);
	obj_id room = params.getObjId ("room");

	if (room == null)
	{
		return SCRIPT_CONTINUE;
	}

	permissionsRemoveAllowed (room, fname);

	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar(room, VAR_ACCESS_LIST );
	if (permList == null )
	{
		permList = new Vector();
	}

	permList = utils.removeElement(permList, player);

	utils.setResizeableBatchObjVar(room, VAR_ACCESS_LIST, permList);

	return SCRIPT_CONTINUE;
}


/***********************************************************************
 * @brief	Converts access list over to obj_id's if needed.
 *
 * @param	obj_id 
 *
 * @return	boolean
 ***********************************************************************/
boolean convertAccessList(obj_id room)
{
	if (!isIdValid(room))
	{
		//LOG("door_lock", "door_lock.convertAccessList -- room is invalid.");
		return false;
	}
	
	string[] access_list = getStringArrayObjVar(room, VAR_ACCESS_LIST);
	if (access_list != null)
	{
		// If we got back a string array, it's using the old stuff.
		obj_id[] new_access_list = nameListToObjId(access_list);
		if ((new_access_list != null) && (new_access_list.length > 0))
			setObjVar(room, VAR_ACCESS_LIST, new_access_list);
	}
	
	return true;
}


/***********************************************************************
 * @brief	Transforms a list of player first names into obj_ids
 *
 * @param	string[] name_list
 *
 * @return	obj_id[] 	list of obj_ids, null on error
 ***********************************************************************/
obj_id[] nameListToObjId(string[] name_list)
{
	if (name_list == null || name_list.length < 1)
	{
		//LOG("door_lock", "door_lock.nameListToObjId -- name_list is null or empty.");
		return null;
	}
	
	resizeable obj_id[] obj_id_list = new obj_id[0];
	for (int i = 0; i < name_list.length; i++)
	{
		obj_id new_obj_id = getPlayerIdFromFirstName(name_list[i]);
		if (isIdValid(new_obj_id))
			obj_id_list.add(new_obj_id);
		else
			LOG("door_lock", "door_lock.nameListToObjId -- couldn't find obj_id for " + name_list[i]);
	}
	
	if (obj_id_list.length > 0)
		return obj_id_list;
	else
		return null;
}

