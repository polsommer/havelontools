/***** INCLUDES ***********************************/

include library.ai_lib;
include library.chat;
include library.create;
include library.utils;


/***** CONSTANTS **********************************/

const string TBL_HALL_WAVE							= "datatables/dungeon/death_watch/hall_wave.iff";


/***** TRIGGERS ***************************************/
trigger OnAttach()
{
	setName(self, "Klin Nif");
	messageTo (self, "handleAttackerCleanUp", null, 300f, false);
	messageTo (self, "handleInvestigate", null, 1f, false);
	return SCRIPT_CONTINUE;
}

messageHandler aiCorpsePrepared()
{
	obj_id corpseInventory = utils.getInventoryContainer(self);

	if ( corpseInventory == null )
		return SCRIPT_CONTINUE;

	createObject( "object/tangible/dungeon/death_watch_bunker/passkey_storage.iff", corpseInventory, "" );

	return SCRIPT_CONTINUE;
}

messageHandler handleAttackerCleanUp()
{
	if ( ai_lib.isInCombat(self) )
	{
		messageTo(self, "handleAttackerCleanUp", null, 300f, false);
		return SCRIPT_CONTINUE;
	}

	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleInvestigate()
{
	obj_id structure = getTopMostContainer (self);
	obj_id top = getTopMostContainer (self );
	obj_id room = getCellId (top, "observationroom17");
	location here = getLocation (self);
	string planet = here.area;
	location attack = new location (-20.5f, 0, -74.5f, planet, room);
	ai_lib.aiPathTo (self, attack);
	addLocationTarget ("checkPoint", attack, 1);
	return SCRIPT_CONTINUE;
}


