include library.ai_lib;
include library.utils;
include library.trial;

const string VOLUME_NAME				= "hk_trigger";
const float VOLUME_RANGE				= 4.0f;

trigger OnAttach()
{
	messageTo(self, "establishTriggerVolumes", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if (!isPlayer(breacher))
		return SCRIPT_CONTINUE;
		
	string type = getStringObjVar(self, "hk_sequence");
	
	if (volumeName.equals(VOLUME_NAME) && type.equals("player_spawn_trigger"))
	{
		location selfLoc = getLocation(self);
		location breachLoc = getLocation(breacher);
		float heightDifference = Math.abs(breachLoc.y - selfLoc.y);
		if (heightDifference < 2 && !trial.isHkSpawned(trial.getTop(self)))
		{
			messageTo(trial.getTop(self), "spawnHK", trial.getSessionDict(trial.getTop(self), "spawn_hk"), 0, false);
			return SCRIPT_CONTINUE;
		}
	}
	if (volumeName.equals(VOLUME_NAME) && type.equals("player_blast_trigger"))
	{
		location selfLoc = getLocation(self);
		location breachLoc = getLocation(breacher);
		float heightDifference = Math.abs(breachLoc.y - selfLoc.y);
		if (heightDifference < 2 && !trial.isHkDetonated(trial.getTop(self)))
		{
			messageTo(trial.getTop(self), "detonateHK", trial.getSessionDict(trial.getTop(self), "spawn_hk"), 1, false);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler establishTriggerVolumes()
{
	createTriggerVolume(VOLUME_NAME, VOLUME_RANGE, true);
	return SCRIPT_CONTINUE;
}