include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const boolean LOGGING					= false;


trigger OnAttach()
{
	trial.setHp(self, trial.HP_VOLCANO_TWO_GUARD);
	return SCRIPT_CONTINUE;
}
trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
 	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	obj_id parent = trial.getParent(self);
	obj_id boss = getObjIdObjVar(self, "boss");
	
	dictionary dict = new dictionary();
	dict.put("type", "guard");
	if (isIdValid(parent))
		messageTo(parent, "eventMobDied", dict, 0, false);
		

 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler activate()
{
	setInvulnerable(self, false);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/event_two/"+section, message);	
}