include library.sui;
include library.utils;
include library.create;

const string MSGS = "dungeon/death_watch";

trigger OnAttach ()
{
	setName (self, "Droid Terminal");
	createTriggerVolume ( "usability", 3, true );
	createMouseDroid (self );
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech (obj_id speaker, string text )
{
	location here = getLocation (self);
	location there = getLocation (speaker);

	float locDistance = getDistance (here, there);

	if (locDistance > 2.0f)
	{
		string_id tooFar = new string_id (MSGS, "too_far_from_terminal");
		sendSystemMessage (speaker, tooFar);
		return SCRIPT_CONTINUE;
	}

	if (hasObjVar (self, "previous"))
	{
		obj_id old = getObjIdObjVar (self, "previous");
		if (old == speaker)
		{
			string_id voice = new string_id (MSGS, "reload_voice_pattern");
			sendSystemMessage (speaker, voice);
			return SCRIPT_CONTINUE;
		}
	}

	if (!hasObjVar (self, "controller"))
	{
		if (isPlayer (speaker))
		{
			setObjVar (self, "controller", speaker);
		}
	}

	obj_id current = getObjIdObjVar (self, "controller");

	if (speaker != current)
	{
		string_id inUse = new string_id (MSGS, "terminal_in_use");
		sendSystemMessage (speaker, inUse);
		return SCRIPT_CONTINUE;
	}

	dictionary web = new dictionary ();
	web.put ("player", speaker);
	messageTo (self, "timesUp", web, 180, false );
	obj_id mouse = getObjIdObjVar (self, "mouse");

	int forwardCheck = text.indexOf("forward");
	int backwardCheck = text.indexOf("backward");
	int rightCheck = text.indexOf("right");
	int leftCheck = text.indexOf("left");

	if (forwardCheck > -1)
	{
		string distUp = text.substring( text.indexOf(" ")+1, text.length() );
		int distanceUp = utils.stringToInt (distUp);
		dictionary up = new dictionary ();
		up.put ("distance", distanceUp);
		messageTo (mouse, "moveForward", up, 1, false );
		return SCRIPT_CONTINUE;
	}

	if (backwardCheck > -1)
	{
		string distDown = text.substring( text.indexOf(" ")+1, text.length() );
		int distanceDown = utils.stringToInt (distDown);
		dictionary down = new dictionary ();
		down.put ("distance", distanceDown);
		messageTo (mouse, "moveBackward", down, 1, false );
		return SCRIPT_CONTINUE;
	}

	if (rightCheck > -1)
	{
		string distRight = text.substring( text.indexOf(" ")+1, text.length() );
		int distanceRight = utils.stringToInt (distRight);
		dictionary right = new dictionary ();
		right.put ("distance", distanceRight);
		messageTo (mouse, "moveRight", right, 1, false );
		return SCRIPT_CONTINUE;
	}

	if (leftCheck > -1)
	{
		string dist = text.substring( text.indexOf(" ")+1, text.length() );
		int distance = utils.stringToInt (dist);
		dictionary left = new dictionary ();
		left.put ("distance", distance);
		messageTo (mouse, "moveLeft", left, 1, false );
		return SCRIPT_CONTINUE;
	}

	if (text == "detonate")
	{
		dictionary webster = new dictionary ();
		webster.put ("player", speaker );
		messageTo (mouse, "detonate", webster, 1, false );
		removeObjVar (self, "controller");
		setObjVar (self, "previous", speaker);
		messageTo (self, "removePrevious", null, 30, false);
		removeObjVar (self, "mouse");
		return SCRIPT_CONTINUE;
	}

	if (text == "reset")
	{
		if (!hasObjVar (self, "mouse"))
		{
			createMouseDroid (self );
			return SCRIPT_CONTINUE;
		}
		else
		{
			obj_id droid = getObjIdObjVar (self, "mouse");
			destroyObject (droid);
			createMouseDroid (self);
		}
	}
	return SCRIPT_CONTINUE;
}

void createMouseDroid (obj_id self)
{
	location here = getLocation (self) ;
	string planet = here.area;

	obj_id top = getTopMostContainer (self );

	obj_id room = getCellId (top, "observationroom34");

	location mouseLoc = new location (92, -64, -128, planet, room );

	obj_id mouse = create.object ("r2", mouseLoc);
	setObjVar (self, "mouse", mouse);
	attachScript (mouse, "theme_park.dungeon.death_watch_bunker.rc_mouse");
	return;
}

/*trigger OnTriggerVolumeEntered (string volume, obj_id player )
{
	if (volume == "usability")
	{
		sendSystemMessage (player, "Voice Recognition Software: To control the mouse simply state the direction (forward, backward, left, right) and the distance to travel (between 1 and 10)", null);
	}
	return SCRIPT_CONTINUE;
}*/

messageHandler removePrevious ()
{
	if (hasObjVar (self, "previous"))
	{
		removeObjVar (self, "previous");
	}
	return SCRIPT_CONTINUE;
}

messageHandler timesUp ()
{
	obj_id speaker = params.getObjId ("player");
	obj_id player = getObjIdObjVar (self, "controller");
	removeObjVar (self, "controller");
	setObjVar (self, "previous", player);
	messageTo (self, "removePrevious", null, 120, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if ( mid == null )
	{
		return SCRIPT_CONTINUE;
	}

	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		testSui( self, player );
	}

	return SCRIPT_CONTINUE;
}

int testSui(obj_id self, obj_id player)
{
	// Create the dialog page.

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, self, player, "readableText" );

	string_id fallBackString = new string_id ("BOOK", "wiped");
	string_id fallBackTitle = new string_id ("BOOK", "no_title");

	if (hasObjVar (self, "text_id"))
	{
		int textNum = getIntObjVar (self, "text_id");
		fallBackString = new string_id ("theme_park/book_text", "text_" + textNum);
		fallBackTitle = new string_id ("theme_park/book_text", "title_" + textNum);
	}

	string text = getString (fallBackString);
	string title = getString (fallBackTitle);

	if (title == null || title == "")
	{
		title = "VRS Terminal";
	}

	if (text == null || text == "")
	{
		string_id instructions = new string_id (MSGS, "rc_mouse_instructions");
		text = getString (instructions);
	}

	// Add elements text.
	//setSUIProperty(pid, "", "Size", "450,375");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, text);

	// Add buttons.
	sui.msgboxButtonSetup(pid, sui.OK_ONLY);
	setSUIProperty(pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, "CLOSE" );

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}