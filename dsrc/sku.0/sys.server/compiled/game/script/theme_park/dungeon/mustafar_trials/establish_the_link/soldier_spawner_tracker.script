include library.ai_lib;
include library.utils;
include library.trial;


const boolean LOGGING					= false;

trigger OnDestroy()
{
	if (trial.isUplinkActive(self))
	{
		obj_id parent = utils.getObjIdScriptVar(self, trial.PARENT);
		int respawn = rand(75,100);
		messageTo(parent, "soldierDied", null, respawn, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "selfDestruct", null, 5, false);
	playClientEffectObj(self, trial.PRT_KUBAZA_WARNING, self, "");
	
 	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	findTargets(self);
	setInvulnerable(self, true);
	messageTo (self, "removeInvulnerable", null, 8, false);
	messageTo (self, "engageTarget", null, 9, false);
	return SCRIPT_CONTINUE;
}

void findTargets(obj_id self)
{
	obj_id contents[] = utils.getSharedContainerObjects(self);
	if (contents == null || contents.length == 0)
	{
		doLogging("findTargets", "Contents list was empty, exiting");
		return;
	}
	resizeable obj_id[] targets = new obj_id[0];
	
	for (int i = 0; i < contents.length; i++)
	{
		if (isPlayer(contents[i]))
		{
			utils.addElement(targets, contents[i]);
		}
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.droid_patrol_script"))
		{
			utils.addElement(targets, contents[i]);
		}
	}
	
	if (targets == null)
	{
		doLogging("findTargets", "No targets were found, exiting");
		return;
	}
	
	obj_id[] targetList = targets;
	if (targetList.length == 0)
	{
		doLogging("findTargets", "Target list was empty, exiting");
		return;
	}
	
	utils.setScriptVar(self, "targetList", targetList);
	
}

messageHandler engageTarget()
{
	setInvulnerable(self, false);
	obj_id[] targets = utils.getObjIdArrayScriptVar(self, "targetList");
	obj_id randomTarget = targets[rand(0, targets.length -1)];
	startCombat(self, randomTarget);
	return SCRIPT_CONTINUE;
}


messageHandler selfDestruct()
{
	obj_id[] targets = trial.getValidTargetsInRadius(self, 7.0f);

	playClientEffectLoc(self, trial.PRT_KUBAZA_EXPLODE, getLocation(self), 0.4f);

	destroyObject(self);

	if (targets == null || targets.length == 0)
	{
		doLogging("nukeSelf", "No valid targets in blast radius");
		return SCRIPT_CONTINUE;
	}

	for (int i=0;i<targets.length;i++)
	{
		damage(targets[i], DAMAGE_ELEMENTAL_HEAT, HIT_LOCATION_BODY, 500);
	}

	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/soldier_spawner_tracker/"+section, message);	
}
