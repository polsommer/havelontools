include library.sui;

const string MSGS = "dungeon/death_watch";

trigger OnDeath (obj_id killer, obj_id corpse_id)
{
	detachScript (self, "theme_park.dungeon.death_watch_bunker.mandalorian_crafting");
	return SCRIPT_CONTINUE;
}

messageHandler secondTime ()
{
	string_id terminal = new string_id (MSGS, "use_terminal");
	sendSystemMessage (self, terminal);
	setObjVar (self, "dw_craft.second", 1);
	dictionary webster = new dictionary ();
	webster.put ("player", self);
	messageTo (self, "finalTenSeconds", webster, 30, false );
	return SCRIPT_CONTINUE;
}

messageHandler firstBox ()
{
	string_id terminal = new string_id (MSGS, "use_terminal");
	sendSystemMessage (self, terminal);
	setObjVar (self, "dw_craft.first", 1);
	dictionary webster = new dictionary ();
	webster.put ("player", self);
	messageTo (self, "thirtySecondsLeft", webster, 30, false );
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	//setName (self, "Mandalorian Forge");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if ( mid == null )
	{
		return SCRIPT_CONTINUE;
	}

	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if (hasObjVar (self, "dw_craft.halted"))
		{
			string_id fail = new string_id (MSGS, "failed");
			sendSystemMessage (self, fail);

			return SCRIPT_CONTINUE;
		}
		if (!hasObjVar (player, "dw_craft.second") && !hasObjVar (player, "dw_craft.first"))
		{
			notYet (self, player);
		}
		else if (hasObjVar (player, "dw_craft.first"))
		{
			testSui( self, player );
		}
		else
		{
			finishSui( self, player );
		}
	}

	return SCRIPT_CONTINUE;
}

int testSui(obj_id self, obj_id player)
{
	// Create the dialog page.

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, self, player, "readableText" );

	string_id textString = new string_id (MSGS, "continue_manufacturing");
	string text = getString (textString);

	string_id titleString = new string_id (MSGS, "continue_button");
	string title = getString (titleString);

	setObjVar (player, "dw_craft.opened_test", 1);
	// Add elements text.
	//setSUIProperty(pid, "", "Size", "450,375");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, text);

	// Add buttons.
	sui.msgboxButtonSetup(pid, sui.OK_ONLY);
	setSUIProperty(pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, "CONTINUE" );

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}

int finishSui(obj_id self, obj_id player)
{
	// Create the dialog page.

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, self, player, "completeText" );

	string_id textString = new string_id (MSGS, "finish_manufacturing");
	string text = getString (textString);

	string_id titleString = new string_id (MSGS, "finish_button");
	string title = getString (titleString);

	setObjVar (player, "dw_craft.opened_finish", 1);
	// Add elements text.
	//setSUIProperty(pid, "", "Size", "450,375");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, text);

	// Add buttons.
	sui.msgboxButtonSetup(pid, sui.OK_ONLY);
	setSUIProperty(pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, "COMPLETE" );

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}


messageHandler readableText ()
{
	obj_id player = sui.getPlayerId (params);
	removeObjVar (player, "dw_craft.first");
	messageTo (player, "secondTime", null, 10, false );
	string_id hardening = new string_id (MSGS, "alum_process_begun");
	sendSystemMessage (player, hardening);
	return SCRIPT_CONTINUE;
}


int notYet (obj_id self, obj_id player)
{
	string_id notready = new string_id (MSGS, "crafting_not_yet");
	sendSystemMessage (player, notready);
	return 0;
}

messageHandler completeText ()
{
	obj_id player = sui.getPlayerId (params);
	obj_id droid = getObjIdObjVar (self, "droid");
	removeObjVar (player, "dw_craft.second");
	dictionary webster = new dictionary ();
	webster.put ("player", player);
	messageTo (droid, "craftItem", webster, 10, false );
	string_id aerate = new string_id (MSGS, "aeration_process_begun");
	sendSystemMessage (player, aerate);
	return SCRIPT_CONTINUE;
}

messageHandler thirtySecondsLeft ()
{
	sendSystemMessage (self, new string_id (MSGS, "thirty_seconds"));
	obj_id player = params.getObjId ("player");
	if (!hasObjVar (player, "dw_craft.opened_test"))
	{
		string_id tooLong = new string_id (MSGS, "took_too_long");
		sendSystemMessage (player, tooLong);
		setObjVar (self, "dw_craft.halted", 1);
		obj_id droid = getObjIdObjVar (self, "dw_craft.droid");
		finishCraftingSession(self, player, droid);
	}

	return SCRIPT_CONTINUE;
}

void finishCraftingSession (obj_id self, obj_id player, obj_id droid)
{
	removeObjVar (droid, "have");
	removeObjVar (droid, "making");
	removeObjVar (player, "dw_craft");
	detachScript (player, "theme_park.dungeon.death_watch_bunker.mandalorian_crafting");
	return;
}

messageHandler finalTenSeconds ()
{
	obj_id player = params.getObjId ("player");
	if (!hasObjVar (player, "dw_craft.opened_finish"))
	{
		string_id tooLong = new string_id (MSGS, "took_too_long");
		sendSystemMessage (player, tooLong);
		setObjVar (self, "dw_craft.halted", 1);
		setObjVar (self, "dw_craft.halted", 1);
		obj_id droid = getObjIdObjVar (self, "dw_craft.droid");
		finishCraftingSession(self, player, droid);
	}
	return SCRIPT_CONTINUE;
}