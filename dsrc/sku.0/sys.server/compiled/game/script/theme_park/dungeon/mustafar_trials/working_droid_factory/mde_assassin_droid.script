include library.ai_lib;
include library.trial;
include library.utils;
include library.combat;

const boolean LOGGING					= true;

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	if (!utils.hasScriptVar(self, trial.WORKING_MDE_REVIVED))
	{
		detachAllScripts(self);
		removeAllObjVars(self);
 	}
 	else
 	{
 		utils.setScriptVar(self, "taken", true);
		messageTo(self, "destroySelf", null, 5, false);
 	}	
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	setInvulnerable(self, false);
	clearAssassinCloak(self);
	obj_id[] players = trial.getValidTargetsInDungeon(self);
	
	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;
		
	obj_id prefered = trial.getClosest(self, players);
	
	if (prefered == obj_id.NULL_ID)
		return SCRIPT_CONTINUE;
		
	startCombat(self, prefered);
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	messageTo(self, "path", null, 2, false);
	assassinCloak(self);
	return SCRIPT_CONTINUE;
}

messageHandler path()
{
	location exit = utils.getLocationScriptVar(self, trial.WORKING_CLONER_EXIT);
	
	obj_id[] points = trial.getObjectsInDungeonWithObjVar(self, "de_random");
	
	if (points == null || points.length == 0)
		return SCRIPT_CONTINUE;
		
	location random = getLocation(points[rand(0, points.length - 1)]);
	if (exit == null)
		exit = getLocation(points[rand(0, points.length -1)]);
		
	location[] spawnPath = new location[2];
	spawnPath[0] = exit;
	spawnPath[1] = random;
	
	patrolOnce(self, spawnPath);
	return SCRIPT_CONTINUE;
}

void assassinCloak(obj_id self)
{
	

	setCreatureCover(self, 125);
	setCreatureCoverVisibility(self, false);
	playClientEffectObj(self, "clienteffect/combat_special_attacker_cover.cef", self, "");
}

void clearAssassinCloak(obj_id self)
{
	


	setCreatureCover(self, 0);
	setCreatureCoverVisibility(self, true);
	playClientEffectObj(self, "clienteffect/combat_special_attacker_cover.cef", self, "");
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/mde_combat_droid/"+section, message);	
}