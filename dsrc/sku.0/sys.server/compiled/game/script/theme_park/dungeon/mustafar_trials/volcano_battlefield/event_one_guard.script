include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

const string SHIELD					= "effect_shield";
const boolean doLogging					= false;

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	stopClientEffectObjByLabel(self, SHIELD);
 	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	trial.setHp(self, trial.HP_VOLCANO_ONE_GUARD);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	obj_id parent = getObjIdObjVar(self, "parent");
	obj_id boss = getObjIdObjVar(self, "boss");
	
	dictionary dict = new dictionary();
	dict.put("type", "guard");
	if (isIdValid(parent))
		messageTo(parent, "eventMobDied", dict, 0, false);
		
	if (isIdValid(boss))
		messageTo(boss, "guardDied", null, 0, false);
	
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler beginAttack()
{
	stopClientEffectObjByLabel(self, SHIELD);
	obj_id[] players = trial.getValidTargetsInRadius(self, 80);
	
	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return SCRIPT_CONTINUE;
	}
	
	obj_id toAttack = trial.getClosest(self, players);
	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return SCRIPT_CONTINUE;
	}
	
	setInvulnerable(self, false);
	startCombat(self, toAttack);
	
	return SCRIPT_CONTINUE;
}

messageHandler stopAttack()
{
	setInvulnerable(self, true);
	playClientEffectObj(self, trial.PRT_INVULN_SHIELD, self, "", null, SHIELD);
	clearHateList(self);
	stopCombat(self);
	return SCRIPT_CONTINUE;
}

messageHandler activateShield()
{
	playClientEffectObj(self, trial.PRT_INVULN_SHIELD, self, "", null, SHIELD);
	return SCRIPT_CONTINUE;
}

messageHandler healBoss()
{
	if (!hasObjVar(self, "boss"))
	{
		doLogging("healBoss", "Did not have the boss objvar");
		return SCRIPT_CONTINUE;
	}
	
	if (isIncapacitated(self))
	{
		return SCRIPT_CONTINUE;
	}

	obj_id boss = getObjIdObjVar(self, "boss");
	
	dictionary dict = new dictionary();
	dict.put("guard", self);
	messageTo(boss, "performGuardHeal", dict, 0, false);
	messageTo(self, "healBoss", null, 5, false);
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (doLogging || trial.VOLCANO_LOGGING)
		LOG("logging/event_one_guard/"+section, message);
}
