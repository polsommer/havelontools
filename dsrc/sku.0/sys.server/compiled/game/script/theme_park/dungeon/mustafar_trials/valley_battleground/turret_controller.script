include library.utils;
include library.sui;

const string STF			= "mustafar/valley_battlefield";
const string_id fire			= new string_id(STF, "fire");
const string_id assemble		= new string_id(STF, "assemble_turret");
const string_id pickup			= new string_id(STF, "pick_up_control_device");

const string[] turretList		=
					{
						"object/tangible/dungeon/mustafar/valley_battlefield/turret_plasma.iff",
						"object/tangible/dungeon/mustafar/valley_battlefield/turret_concussion.iff",
						"object/tangible/dungeon/mustafar/valley_battlefield/turret_energy_burst.iff",
						"object/tangible/dungeon/mustafar/valley_battlefield/turret_null_energy.iff"
					};

const string_id[] turretOptions		=
					{
						new string_id(STF, "plasma_turret"),
						new string_id(STF, "concussion_turret"),
						new string_id(STF, "energy_burst"),
						new string_id(STF, "null_energy")
					};
					
const string_id setSUIInterest_d	= new string_id(STF, "set_interest_d");
const string_id setSUIInterest_t	= new string_id(STF, "set_interest_t");
const string_id showTargetSUI_d		= new string_id(STF, "show_targets_d");
const string_id showTargetSUI_t		= new string_id(STF, "show_targets_t");


const string_id buildingPlasma		= new string_id(STF, "building_plasma");
const string_id buildingConcussion	= new string_id(STF, "building_concussion");
const string_id buildingEnergy		= new string_id(STF, "building_energy");
const string_id buildingNullEnergy	= new string_id(STF, "building_null_energy");
					
					
const string controllerObject		= "object/tangible/dungeon/mustafar/valley_battlefield/turret_controller_object.iff";


//Obj Vars - need to transfer
const string turretID			= "activeTurret";
const string constructorID		= "constructionDroid";

//Change to false to stop logging
const boolean doLogging			= false;



trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
		int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, new string_id(STF, "start"));
		int menu = mi.addRootMenu(menu_info_types.ITEM_USE_SELF, new string_id(STF, "reset"));
	
/**
	if (!utils.verifyLocationBasedDestructionAnchor(self, 500))
		return SCRIPT_OVERRIDE;

	if (!hasBeenPickedUp(self))
	{
		int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, pickup);
		return SCRIPT_CONTINUE;
	}
		
	if (isTurretActive(self))
	{
		int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, fire);
	}
	else
	{
		int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, assemble);
	}
**/	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE)
	{
		obj_id top = getObjIdObjVar(self, "top");
		dictionary dict = new dictionary();
		dict.put("command", "startEvent");
		messageTo(top, "transmitCommand", dict, 0, false);
	}
	if (item == menu_info_types.ITEM_USE_SELF)
	{
		obj_id top = getObjIdObjVar(self, "top");
		dictionary dict = new dictionary();
		dict.put("command", "reset");
		messageTo(top, "transmitCommand", dict, 0, false);
	}
/**
	if (!hasBeenPickedUp(self))
	{
		regenerateInPlayerInventory(player, self);
		return SCRIPT_CONTINUE;
	}
	
	if (isTurretActive(self))
	{
		fireTurret(player, self);
	}
	else
	{
		presentAssembleSUI(player, self);
	}
**/	
	return SCRIPT_CONTINUE;
}

boolean hasBeenPickedUp(obj_id self)
{
	if (hasObjVar(self, "inWorld"))
		return false;
		
	return true;
}

boolean isTurretActive(obj_id self)
{
	if(!hasObjVar(self, turretID))
	{
		return false;
	}	
	obj_id activeTurret = getObjIdObjVar(self, turretID);
	
	if (isIdValid(activeTurret))
		return true;
		
	return false;
}

obj_id getTurret(obj_id player, obj_id controller)
{
	if (!isTurretActive(controller))
	{
		presentAssembleSUI(player, controller);
	}
	
	obj_id activeTurret = getObjIdObjVar(controller, turretID);
	
	if (!isIdValid(activeTurret))
	{
		if(isTurretDisabled(controller))
		{
			destroyObject(controller);
			return obj_id.NULL_ID;
		}
	}
	
	return activeTurret;
}

boolean isTurretDisabled(obj_id controller)
{
	if (hasObjVar(controller, "turretDisabled"))
		return true;
		
	return false;
}

messageHandler turretDisabled()
{
	setObjVar(self, "turretDisabled", true);
	return SCRIPT_CONTINUE;
}

messageHandler builtTurret()
{
	obj_id turret = params.getObjId("turretId");
	if (!isIdValid(turret))
		return SCRIPT_CONTINUE;
		
	setObjVar(self, turretID, turret);
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

void regenerateInPlayerInventory(obj_id player, obj_id self)
{
	obj_id turretController = createObjectInInventoryAllowOverload(controllerObject, player);
	if (!isIdValid(turretController))
	{
		doLogging("regenerateInPlayerInventory", "Failed to create controller in player inventory");
		return;
	}
	
	attachScript(turretController, "theme_park.dungeon.mustafar_trials.valley_battleground.turret_controller");
	utils.verifyLocationBasedDestructionAnchor(turretController, getLocation(player), 500);
	copyObjVar(self, turretController, constructorID);
	destroyObject(self);
}

void fireTurret(obj_id player, obj_id controller)
{
	obj_id target = getTarget(player);
	
	if (!isIdValid(target))
	{
		presentTargetingSUI(player, controller);
		return;
	}

	if (!isMob(target))
	{
		presentTargetingSUI(player, controller);
		return;
	}
	
	if (isTurretDisabled(controller))
	{
		doLogging("fireTurret", "Call to fire occured but the turret was disabled");
		return;
	}
	
	obj_id turret = getTurret(player, controller);
	if (!isIdValid(turret))
	{
		doLogging("fireTurret", "Call to fire occured but the turret Id was invalid");
		return;
	}
	dictionary dict = new dictionary();
	dict.put("player", player);
	dict.put("controller", controller);
	dict.put("target", target);
	
	doLogging("fireTurret", "Sending command to direct fire to turret("+turret+"): Player("+getName(player)+") from controller("+controller+") at target("+getName(target)+")");
	
	messageTo(turret, "doFireAction", dict, 0, false);
}

void presentAssembleSUI(obj_id player, obj_id self)
{
	string[] turretTypes = new string[4];
	turretTypes[0] = "@"+ turretOptions[0];
	turretTypes[1] = "@"+ turretOptions[1];
	turretTypes[2] = "@"+ turretOptions[2];
	turretTypes[3] = "@"+ turretOptions[3];

	sui.listbox(self, player, "@"+ setSUIInterest_d, sui.OK_CANCEL, "@"+ setSUIInterest_t, turretTypes, "handleAssembleTurret", true);
}

messageHandler handleAssembleTurret()
{
	int idx = sui.getListboxSelectedRow( params );
	obj_id player = sui.getPlayerId( params );
	obj_id constructorDroid = getConstructionDroid(self);
	location buildLoc = getLocation(player);
	if (!isIdValid(constructorDroid))
		return SCRIPT_CONTINUE;
	
	doLogging("handleAssembleTurret", "Idx precheck: "+idx);
	
	dictionary dict = new dictionary();
	dict.put("turretController", self);
	dict.put("buildLoc", buildLoc);
	
	if (!isIdValid(constructorDroid))
		return SCRIPT_CONTINUE;
	
	int btn = sui.getIntButtonPressed( params );
	if ( btn == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;
	
	
	if ( idx == 0 ) 
	{
		sendSystemMessage(player, buildingPlasma);
		dict.put("turretType", "plasma");
		messageTo(constructorDroid, "buildTurret", dict, 1, false);
		return SCRIPT_CONTINUE;
	}	

	if (idx == 1)
	{
		sendSystemMessage(player, buildingConcussion);
		dict.put("turretType", "concussion");
		messageTo(constructorDroid, "buildTurret", dict, 1, false);
		return SCRIPT_CONTINUE;
	}
	if (idx == 2)
	{
		sendSystemMessage(player, buildingEnergy);
		dict.put("turretType", "energy_burst");
		messageTo(constructorDroid, "buildTurret", dict, 1, false);
		return SCRIPT_CONTINUE;
	}
	if (idx == 3)
	{
		sendSystemMessage(player, buildingNullEnergy);
		dict.put("turretType", "null_energy");
		messageTo(constructorDroid, "buildTurret", dict, 1, false);
		return SCRIPT_CONTINUE;
	}
	
	return SCRIPT_CONTINUE;
}

obj_id getConstructionDroid(obj_id controller)
{
	if (!hasObjVar(controller, constructorID))
	{
		destroyObject(controller);
		return obj_id.NULL_ID;
	}
	
	obj_id constructor = getObjIdObjVar(controller, constructorID);
	
	if (!isIdValid(constructor))
	{
		destroyObject(controller);
		return obj_id.NULL_ID;
	}
	
	return constructor;
}

void presentTargetingSUI(obj_id player, obj_id controller)
{
	obj_id turret = getTurret(player, controller);
	if (isTurretDisabled(controller))
	{
		doLogging("presentTargetingSUI", "Cannot querey targets because turret is diabled");
		return;
	}	
	if (!isIdValid(turret))
	{
		doLogging("presentTargetingSUI", "Cannot querey targets because turret is invalid");
		return;
	}
	
	obj_id[] targets = getCreaturesInRange(turret, 40);
	
	resizeable obj_id[] validTargets = new obj_id[0];
	
	for (int i=0;i<targets.length;i++)
	{
		if (!isPlayer(targets[i]))
		{
			if (!isDead(targets[i]))
			{
				if (canSee(turret, targets[i]))
				{
					utils.addElement(validTargets, targets[i]);
				}
			}
		}
	}
	
	if (validTargets.length == 0)
	{
		doLogging("presentTargetingSUI", "No valid targets were available");
		return;
	}
	
	obj_id[] goodTargets = validTargets;
	utils.setScriptVar(turret, "goodTargets", goodTargets);
	
	string[] targetNames = new string[goodTargets.length];
	
	for (int k=0; k<goodTargets.length;k++)
	{
		targetNames[k] = getEncodedName(goodTargets[k]);
	}
	
	if (targetNames == null || targetNames.length == 0)
	{
		doLogging("presetnTArgetingSUI", "No list of names for valid targets could be generated");
		return;
	}	
	sui.listbox(controller, player, "@"+ showTargetSUI_d, sui.OK_CANCEL, "@"+ showTargetSUI_t, targetNames, "handleChooseTarget", true);
}

messageHandler handleChooseTarget()
{
	int idx = sui.getListboxSelectedRow( params );
	obj_id player = sui.getPlayerId( params );
	obj_id turret = getTurret(player, self);
	
	if (!isIdValid(turret))
	{
		doLogging("handleChooseTarget", "Turret id was invalid");
		return SCRIPT_CONTINUE;
	}
	dictionary dict = new dictionary();
	dict.put("player", player);
	dict.put("controller", self);
	
	int btn = sui.getIntButtonPressed( params );
	if ( btn == sui.BP_CANCEL )
	{
		doLogging("handleChooseTarget", "Cancel button was pressed");
		return SCRIPT_CONTINUE;
	}
	obj_id[] targetList = utils.getObjIdArrayScriptVar(turret, "goodTargets");
	
	if (targetList == null || targetList.length == 0)
	{
		doLogging("handleChooseTarget", "Target list was null");
		return SCRIPT_CONTINUE;
	}
	
	int maxIdx = targetList.length - 1;
	if (idx > maxIdx)
	{
		doLogging("handleChooseTarget", "idx is greater than max idx("+idx+" > "+maxIdx+")");
	}
	
	obj_id target = targetList[idx];
	if (!isIdValid(target))
	{
		doLogging("handleChooseTarget", "TargetId was invalid");
		return SCRIPT_CONTINUE;
	}
	dict.put("target", target);
	
	messageTo(turret, "doFireAction", dict, 0, false);

	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (doLogging)
		LOG("debug/turret_controller/"+section, message);
}


