include library.trial;
include library.utils;
include library.badge;
include library.create;
include library.instance;

const string[] LOCKED_ROOMS			=
						{
							"mainroom27",
							"hall2",
							"hall5",
							"smallroom12",
							"smallroom11",
							"hall13",
							"centralroom28"
						};


trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

messageHandler beginSpawn()
{
	setEventLocks(self);
	setEventStates(self);
	spawnOr5(self);
	return SCRIPT_CONTINUE;
}

messageHandler remoteCommand()
{
	string command = "null";
	command = params.getString("command");
	
	if (command.equals("setLock"))
	{
		setEventLocks(self);
		return SCRIPT_CONTINUE;
	}
	
	if (command.equals("removeLock"))
	{
		removeEventLocks(self);
		return SCRIPT_CONTINUE;
	}
	
	if (command.equals("lockCell"))
	{
		lockCell(self,params);
		return SCRIPT_CONTINUE;
	}
	
	if (command.equals("deactivateTrap"))
	{
		deactivateTrap(self);
		return SCRIPT_CONTINUE;
	}
	
	if (command.equals("setDefaultStates"))
	{
		setEventLocks(self);
		return SCRIPT_CONTINUE;
	}
	if (command.equals("removeEventStates"))
	{
		removeEventStates(self);
		return SCRIPT_CONTINUE;
	}
	
	return SCRIPT_CONTINUE;
}


void setEventLocks(obj_id dungeon)
{
	for (int i=0;i<LOCKED_ROOMS.length;i++)
	{
		permissionsMakePrivate(getCellId(dungeon, LOCKED_ROOMS[i]));
	}
}

void removeEventLocks(obj_id dungeon)
{
	for (int i=0;i<LOCKED_ROOMS.length;i++)
	{
		permissionsMakePublic(getCellId(dungeon, LOCKED_ROOMS[i]));
	}
}

void setEventStates(obj_id dungeon)
{
	trial.setTrapState(dungeon, false);//trap inactive
	trial.setFireCellState(dungeon, true);//fire cell on
	trial.setPowerCoreState(dungeon, false);// power core off
	trial.setGuardianLockState(dungeon, true);// guardian lock active
	trial.setDecrepitTrialState(dungeon, false);// master systems off
}

void removeEventStates(obj_id dungeon)
{
	trial.setTrapState(dungeon, false);//trap inactive
	trial.setFireCellState(dungeon, false);//fire cell on
	trial.setPowerCoreState(dungeon, true);// power core off
	trial.setGuardianLockState(dungeon, false);// guardian lock active
	trial.setDecrepitTrialState(dungeon, true);// master systems off
	
}

void lockCell(obj_id dungeon, dictionary params)
{
	string cell = params.getString("cell");
	trial.makeCellPrivate(dungeon, cell);
}

void spawnOr5(obj_id self)
{
	obj_id cell = getCellId(self, "mediumroom10");
	location spawnLoc = new location(63, -67, -50, getLocation(self).area, cell);
	obj_id colonel = create.object("som_decrepit_colonel_or5", spawnLoc);
	setYaw(colonel, 90);
	attachScript(colonel, "theme_park.dungeon.mustafar_trials.decrepit_droid_factory.colonel_or5");
}

messageHandler codeResetOccured()
{
	obj_id[] masterTerminals = trial.getObjectsInDungeonWithScript(self, "theme_park.dungeon.mustafar_trials.decrepit_droid_factory.code_terminal_master");
	obj_id[] slaveTerminals = trial.getObjectsInDungeonWithScript(self, "theme_park.dungeon.mustafar_trials.decrepit_droid_factory.code_terminal_slave");
	
	if (masterTerminals != null && masterTerminals.length > 0)
		utils.messageTo(masterTerminals, "handleResetTimer", null, 0, false);
		
	if (slaveTerminals != null && slaveTerminals.length > 0)
		utils.messageTo(slaveTerminals, "handleResetTimer", null, 0, false);
		
	return SCRIPT_CONTINUE;
}

messageHandler colonelDied()
{
	trial.makeCellPublic(self, "hall13");
	return SCRIPT_CONTINUE;
}

messageHandler winTrial()
{
	trial.setDecrepitTrialState(self, true);
	trial.setDungeonCleanOutTimer(self);
	trial.sendCompletionSignal(self, trial.DECREPIT_WIN_SIGNAL);
	obj_id[] players = trial.getPlayersInDungeon(self);
	badge.grantBadge(players, "bdg_must_victory_ddf");
	return SCRIPT_CONTINUE;
}

void deactivateTrap(obj_id self)
{
	trial.setTrapState(self, false);
}