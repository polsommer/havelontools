include library.utils;
include library.instance;
include library.create;
include library.trial;
include library.badge;

const boolean LOGGING					= false;

messageHandler beginSpawn()
{
	clearEventArea(self);
	spawnActors(self, 1);
	messageTo(self, "beginEvent", null, 20, false);
	trial.setUplinkActiveState(self, true);
	return SCRIPT_CONTINUE;
}

messageHandler cleanupSpawn()
{
	trial.setUplinkActiveState(self, false);
	clearEventArea(self);
	trial.setUplinkVictoryState(self, false);	
	return SCRIPT_CONTINUE;
}

void clearEventArea(obj_id dungeon)
{
	obj_id cell = getCellId(dungeon, trial.UPLINK_ROOM);
	
	obj_id[] contents = getContents(cell);
	
	
	if (contents == null || contents.length == 0)
	{
		doLogging("clearEventArea", "Dungeon was empty, return");
		return;
	}	
	for (int i = 0; i<contents.length; i++)
	{
		if (isPlayer(contents[i]))
		{
		}
		else
		{	
			if (isMob(contents[i]) || trial.isTempObject(contents[i]))
			{
				doLogging("xx", "Cleanup performed on "+getName(contents[i]));
				trial.cleanupNpc(contents[i]);
			}
		}
	}
}

void spawnActors(obj_id dungeon, int stage)
{
	int rows = dataTableGetNumRows(trial.UPLINK_DATA);
	
	if (rows == 0)
	{
		doLogging("spawnActors", "The datatable is empty");
		return;
	}
	
	for (int i=0;i < rows;i++)
	{
		dictionary dict = dataTableGetRow(trial.UPLINK_DATA, i);
		
		if (dict.getInt("stage") == stage)
		{
			int locx = dict.getInt("locx");
			int locy = dict.getInt("locy");
			int locz = dict.getInt("locz");
			string scene = getCurrentSceneName();
			obj_id cell = getCellId(dungeon, trial.UPLINK_ROOM);
			float yaw = dict.getFloat("yaw");
			string script = dict.getString("script");
			string wpName = dict.getString("wp_name");
			location spawnLoc = new location (locx, locy, locz, scene, cell);
			string object = dict.getString("object");
			if (object.startsWith("object/"))
			{
				obj_id item = createObjectInCell(object, dungeon, trial.UPLINK_ROOM, spawnLoc);
				if (!isIdValid(item))
				{
					doLogging("spawnActors", "Tried to create invalid item("+object+")");
					return;
				}
				setYaw(item, yaw);
				if (!script.equals("none"))
					attachScript(item, script);
				if (!wpName.equals("none"))
					utils.setScriptVar(item, trial.WP_NAME, wpName);
				
				trial.markAsTempObject(item, false);
			}
			else
			{
				obj_id creature = create.object (object, spawnLoc);
				if (!isIdValid(creature))
				{
					doLogging("spawnActors", "Tried to create invalid creature("+object+")");
					return;
				}
				if (!script.equals("none"))
					attachScript(creature, script);
			}
		}
	}
}

messageHandler beginEvent()
{
	spawnActors(self, 2);
	return SCRIPT_CONTINUE;
}

messageHandler remoteCommand()
{
	string command = "null";
	command = params.getString("command");
	
	if (command.equals("clearEventArea"))
	{
		clearEventArea(self);
		return SCRIPT_CONTINUE;
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler validateRelays()
{
	obj_id cell = getCellId(self, trial.UPLINK_ROOM);
	
	obj_id[] contents = getContents(cell);
	
	if (contents == null || contents.length == 0)
		return SCRIPT_CONTINUE;
		
	int relayCount = 0;
	
	for (int i=0;i<contents.length;i++)
	{
		if (getTemplateName(contents[i]).equals(trial.RELAY_OBJECT))
			relayCount++;
				
	
		if (relayCount >=11)
		{
			doLogging("validateRelays", "Target relay count reached, spawning foreman");
			spawnActors(self, 3);
			deactivateDroid(self);
			stopRandomSoldiers(self);
			return SCRIPT_CONTINUE;
		}
	}
	
	
	return SCRIPT_CONTINUE;
	
	
}

void deactivateDroid(obj_id self)
{
	obj_id cell = getCellId(self, trial.UPLINK_ROOM);
	
	obj_id[] contents = getContents(cell);
	
	if (contents == null || contents.length == 0)
		return;
		
	int relayCount = 0;
	
	for (int i=0;i<contents.length;i++)
	{
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.droid_patrol_script"))
		{
			stop(contents[i]);
			setInvulnerable(contents[i], true);
		}
		
		if (getTemplateName(contents[i]).equals(trial.RELAY_OBJECT))
		{
			location playLoc = getLocation(contents[i]);
			playClientEffectLoc(contents[i], trial.PRT_RELAY_ACTIVATE, playLoc, 3f);
		}

	}
}

void stopRandomSoldiers(obj_id self)
{
	obj_id cell = getCellId(self, trial.UPLINK_ROOM);
	
	obj_id[] contents = getContents(cell);
	
	if (contents == null || contents.length == 0)
		return;
		
	int relayCount = 0;
	
	for (int i=0;i<contents.length;i++)
	{
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.soldier_spawner"))
		{
			destroyObject(contents[i]);
		}
	}
	
}


void stopForemanDrones(obj_id self)
{
	obj_id cell = getCellId(self, trial.UPLINK_ROOM);
	
	obj_id[] contents = getContents(cell);
	
	if (contents == null || contents.length == 0)
		return;
		
	int relayCount = 0;
	
	for (int i=0;i<contents.length;i++)
	{
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.foreman_drone_spawner"))
		{
			destroyObject(contents[i]);
		}
		
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.foreman_drone_spawner_tracker"))
		{
			destroyObject(contents[i]);
		}
	}
	
	return;	
}

messageHandler linkEventWon()
{
	stopForemanDrones(self);
	trial.setUplinkVictoryState(self, true);
	trial.sendCompletionSignal(self, trial.UPLINK_WIN_SIGNAL);
	obj_id[] players = trial.getPlayersInDungeon(self);
	badge.grantBadge(players, "bdg_must_victory_kubaza");
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/link_event_manager/"+section, message);
}