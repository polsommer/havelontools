/***** INCLUDES ***********************************/

include library.ai_lib;
include library.chat;
include library.create;


/***** CONSTANTS **********************************/

const string TBL_HALL_WAVE							= "datatables/dungeon/death_watch/hall_wave.iff";

const string_id CALL_BACK_UP				= new string_id("dungeon/death_watch", "call_back_up");

/***** TRIGGERS ***************************************/
trigger OnAttach()
{
	messageTo (self, "handleAttackerCleanUp", null, 300f, false);
	messageTo (self, "handleInvestigate", null, 5f, false);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{
	if(!hasObjVar(self, "death_watch.call_backup"))
	{
		obj_id structure = getTopMostContainer(self);
		obj_id hallTerminal = getObjIdObjVar(structure, "death_watch.hallTerminal");
		chat.chat(self, CALL_BACK_UP);
		setObjVar(self, "death_watch.call_backup", 1);
		messageTo(hallTerminal, "handleCallSupport1", null, 30f, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleAttackerCleanUp()
{
	if ( ai_lib.isInCombat(self) )
	{
		messageTo(self, "handleAttackerCleanUp", null, 300f, false);
		return SCRIPT_CONTINUE;
	}

	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleInvestigate()
{
	obj_id structure = getTopMostContainer (self);
	obj_id top = getTopMostContainer (self );
	obj_id room = getCellId (top, "largeroom");
	location here = getLocation (self);
	string planet = here.area;
	location attack = new location (-101.4f, 0, -50.5f, planet, room);
	ai_lib.aiPathTo (self, attack);
	addLocationTarget ("checkPoint", attack, 1);
	return SCRIPT_CONTINUE;
}


