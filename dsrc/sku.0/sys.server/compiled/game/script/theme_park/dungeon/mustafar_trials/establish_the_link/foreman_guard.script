include library.ai_lib;
include library.utils;
include library.trial;


const boolean LOGGING					= false;

trigger OnDestroy()
{
	if (trial.isUplinkActive(self))
	{
		obj_id controller = utils.getObjIdScriptVar(self, trial.PARENT);
		
		if (!isIdValid(controller))
		{
			doLogging("OnDestroy", "I do not have the parent script var");
			return SCRIPT_CONTINUE;
		}	
		messageTo(controller, "guardDied", null, 0, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	obj_id[] targets = trial.getValidTargetsInRadius(self, 7.0f);

	playClientEffectLoc(self, trial.PRT_KUBAZA_EXPLODE, getLocation(self), 0.4f);

	destroyObject(self);

	if (targets == null || targets.length == 0)
	{
		doLogging("nukeSelf", "No valid targets in blast radius");
		return SCRIPT_CONTINUE;
	}

	for (int i=0;i<targets.length;i++)
	{
		damage(targets[i], DAMAGE_ELEMENTAL_HEAT, HIT_LOCATION_BODY, 500);
	}

	return SCRIPT_CONTINUE;

}

trigger OnAttach()
{
	setInvulnerable(self, true);
	messageTo (self, "removeInvulnerable", null, 4, false);
	return SCRIPT_CONTINUE;
}

messageHandler removeInvulnerable()
{
	setInvulnerable(self, false);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/foreman_guard/"+section, message);	
}
