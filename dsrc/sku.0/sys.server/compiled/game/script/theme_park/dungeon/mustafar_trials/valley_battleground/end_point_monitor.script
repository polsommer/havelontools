include library.ai_lib;
include library.utils;
include library.trial;
include library.space_dungeon;
include library.instance;

const string VOLUME_NAME				= "finish_monitor";
const float VOLUME_RANGE				= 18.0f;
const int RESCAN					= 10;
const string CAN_SCAN					= "canScan";
const string STAGE					= "stage";

trigger OnAttach()
{
	trial.setInterest(self);
	messageTo(self, "scan", null, 1.0f, false);
	return SCRIPT_CONTINUE;
}


messageHandler scan()
{
	checkForDroidArmy(self);
	return SCRIPT_CONTINUE;
}


int getStage(obj_id self)
{
	int stage = 0;
	if (utils.hasScriptVar(self, STAGE))
		stage =  utils.getIntScriptVar(self, STAGE);
	
	return stage;
}

void incrementStage(obj_id self)
{
	int stage = getStage(self);
	stage += 1;
	utils.setScriptVar(self, STAGE, stage);
}

void decrementStage(obj_id self)
{
	int stage = getStage(self);
	stage -= 1;
	if (stage < 0)
		stage = 0;
		
	utils.setScriptVar(self, STAGE, stage);
}

void checkForDroidArmy(obj_id self)
{

	messageTo(self, "scan", null, RESCAN, false);
	obj_id[] droids = trial.getObjectsInRangeWithScriptVar(self, trial.BATTLEFIELD_DROID_ARMY, VOLUME_RANGE);
	if (droids == null || droids.length == 0)
	{
		decrementStage(self);
	}
	else
	{
		boolean living = false;
		for (int i=0;i<droids.length;i++)
		{
			if (!isDead(droids[i]) && !ai_lib.isInCombat(droids[i]))
				living = true;
		}
		if (living)
		{
			incrementStage(self);
		}
		else
		{
			decrementStage(self);
			return;
		}
	}
	int stage = getStage(self);
	switch (stage)
	{
		case 1:
			instance.sendInstanceSystemMessage(trial.getParent(self), trial.BATTLEFIELD_LOSE_1);
			return;
		case 2:
			instance.sendInstanceSystemMessage(trial.getParent(self), trial.BATTLEFIELD_LOSE_2);
			return;
		case 3:
			instance.sendInstanceSystemMessage(trial.getParent(self), trial.BATTLEFIELD_LOSE_3);
			return;
		case 4:
			messageTo(trial.getParent(self), "loseTrial", null, 0, false);
	}
}
