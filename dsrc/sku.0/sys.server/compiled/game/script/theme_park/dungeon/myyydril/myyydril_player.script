include library.utils;

const boolean LOGGING					= false;

trigger OnLogin()
{
	doLogging("OnLogin", "OnLogin Fired, validating location");
	messageTo(self, "validateLocation", null, 2, false);
	return SCRIPT_CONTINUE;
}

trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	doLogging("OnTransferred", "OnTransferred Fired, validating location");
	messageTo(self, "validateLocation", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler validateLocation()
{
	obj_id container = getContainedBy(self);
	doLogging("validateLocation", "I am contained by("+container+")");
	if (!isIdValid(container))
	{
		string scene = getCurrentSceneName();
		doLogging("validateLocation", "Current scene name is("+scene+")");
		if (scene.equals("kashyyyk_pob_dungeons"))
		{
			doLogging("validateLocation", "I am uncontained in POB Dungeons. Warping to Dead Forest");
			warpPlayer(self, "kashyyyk_dead_forest", -205, 38, 301, null, 0, 0, 0);
		}
		else
		{
			doLogging("validateLocation", "I was uncontained not on POB Dungeons. Removing script");
			detachScript(self, "theme_park.dungeon.myyydril.myyydril_player");
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnUnsticking()
{
	warpPlayer(self, "kashyyyk_dead_forest", -205, 38, 301, null, 0, 0, 0);
	return SCRIPT_OVERRIDE;
}

commandHandler cmdSetGrievousAuthorized()
{
	if (isGod(self))
	{
		doLogging("cmdSetGrievousAuthorized", "God mode user("+getName(self)+"/"+self+") requsted to be made grievous authoratative");
		utils.setScriptVar(self, "grievous_lock.god_authorized", true);	
	}
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/myyydril_player/"+section, message);
}