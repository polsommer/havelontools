/***** INCLUDES ***********************************/
include library.chat;
include library.utils;
include library.ai_lib;
include library.utils;
include library.chat;
include library.buff;
include library.anims;
include ai.ai_combat;

/***** CONSTANTS **********************************/
const string FACETO_VOLUME_NAME 	= "faceToTriggerVolume";

const string_id HELP_ME				= new string_id("dungeon/death_watch", "help_me");
const string_id RECOVERED_BATTERY	= new string_id("dungeon/death_watch", "recovered_battery");
const string_id HALDO_FAILED		= new string_id("dungeon/death_watch", "haldo_failed");


/***** TRIGGERS ***************************************/
trigger OnAttach()
{
	setAnimationMood (self, "nervous");
	setName(self, "Haldo (a crazed miner)");
	messageTo(self, "handleHaldoTimeOut", null, 1800f, false);
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{
	if (hasObjVar(self, "death_watch.already_spoke"))
		return SCRIPT_CONTINUE;

	setInvulnerable (self, true);
	messageTo(self, "makeCrazedMinerInvulnerable", null, 1, false);
	createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
	chat.chat(self, HELP_ME);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id attacker)
{
	obj_id structure = getTopMostContainer(self);

	obj_id player = getObjIdObjVar(self, "death_watch.noHelp");
	if (!isIdValid(player))
		return SCRIPT_CONTINUE;

	obj_id playerInv = getObjectInSlot( player, "inventory" );
	if(isIdValid(playerInv))
	{
		obj_id item = createObject( "object/tangible/dungeon/death_watch_bunker/drill_battery.iff", playerInv, "" );
		if(isIdValid(item))
		{
			sendSystemMessage(player, RECOVERED_BATTERY);
			setObjVar(player, "death_watch.medicine_kill", 1);
			removeObjVar(player, "death_watch.medicine");
			removeObjVar(structure, "death_watch.haldo");
			removeObjVar(structure, "death_watch.haldo_player");
			return SCRIPT_CONTINUE;
	 	}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleCrazedCleanup()
{
	obj_id structure = getTopMostContainer (self);
	obj_id player = getObjIdObjVar(structure, "death_watch.haldo_player");
	removeObjVar(structure, "death_watch.haldo");
	removeObjVar(structure, "death_watch.haldo_player");
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleCrazedAttack()
{
	obj_id player = params.getObjId("player");
	detachScript(self, "conversation.death_watch_insane_miner");
	clearCondition(self, CONDITION_CONVERSABLE);
	setInvulnerable(self, false);
	setObjVar(self, "death_watch.already_spoke", 1);
	startCombat(self, player);
	return SCRIPT_CONTINUE;
}

messageHandler handleHaldoTimeOut()
{
	obj_id structure = getTopMostContainer (self);
	obj_id player = getObjIdObjVar(structure, "death_watch.haldo_player");

	if(isIdValid(player))
	{
		sendSystemMessage(player, HALDO_FAILED);
	}
	removeObjVar(structure, "death_watch.haldo");
	removeObjVar(structure, "death_watch.haldo_player");
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler makeCrazedMinerInvulnerable()
{
	utils.removeScriptVar( self, "ai.combat.isInCombat");
	setCombatTarget(self, null);
	stopCombat(self);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	buff.removeAllBuffs(self);
	clearHateList(self);
	attachScript (self, "conversation.death_watch_insane_miner");
	setCondition (self, CONDITION_CONVERSABLE);
	return SCRIPT_CONTINUE;
}