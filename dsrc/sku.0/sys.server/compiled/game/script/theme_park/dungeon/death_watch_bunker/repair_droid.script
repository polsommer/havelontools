/***** INCLUDES ***********************************/
include library.chat;
include library.utils;
include library.ai_lib;
include library.utils;
include library.anims;
include library.create;
include ai.ai_combat;
include library.group;

/***** CONSTANTS **********************************/

const string TBL_ATTACK_WAVE1			= "datatables/dungeon/death_watch/attack_wave_01.iff";
const string TBL_ATTACK_WAVE2			= "datatables/dungeon/death_watch/attack_wave_02.iff";

const string_id VENTILATION_REPAIR		= new string_id("dungeon/death_watch", "ventilation_repair");
const string_id REPAIR_FAILED			= new string_id("dungeon/death_watch", "repair_failed");
const string_id PROTECT_TOOLS			= new string_id("dungeon/death_watch", "protect_tools");
const string_id PROTECT_FIX				= new string_id("dungeon/death_watch", "protect_fix");

/***** TRIGGERS ***************************************/
trigger OnAttach()
{
	detachScript(self, "ai.ai_combat");
	setName(self, "R2-F4 (a repair droid)");
	messageTo (self, "handleGetTools", null, 10f, false);
	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation (string name)
{
	if (name == "tools" && !hasObjVar(self, "toolsReached"))
	{
		spawnAttackWaveOne(self);
		setObjVar(self, "toolsReached", 1);
		messageTo (self, "handleGoVentilation", null, 60f, false);
	}

	if (name == "fix" && !hasObjVar(self, "fixing"))
	{
		spawnAttackWaveTwo(self);
		setObjVar(self, "fixing", 1);
		messageTo(self, "handleFix", null, 120f, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id attacker)
{
	obj_id structure = getTopMostContainer (self);

	if(!isIdValid(structure))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "repair_completed"))
	{
		obj_id player = getObjIdObjVar(structure, "death_watch.missionTaker");

		if (!isIdValid(player))
			return SCRIPT_CONTINUE;

		int curTime = getGameTime();
		removeObjVar(player, "repair_droid");
		setObjVar(player, "death_watch.air_vent_fail", curTime);
		removeObjVar(structure, "death_watch.missionTaker");

		if(!group.isGrouped(player))
		{
			sendSystemMessage(player, REPAIR_FAILED);
				return SCRIPT_CONTINUE;
		}

		if(group.isGrouped(player))
		{
			resizeable obj_id[] members = group.getPCMembersInRange(player, 100f);
			if ( members != null && members.length > 0 )
			{
				int numInGroup = members.length;

				if (numInGroup < 1)
					return SCRIPT_CONTINUE;

				for (int i = 0; i < numInGroup; i++)
				{
		 			obj_id thisMember = members[i];
		 			sendSystemMessage(thisMember, REPAIR_FAILED);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}


/***** FUNCTIONS **************************************/
void spawnAttackWaveOne(obj_id droid)
{
	int defenderCreatures = dataTableGetNumRows (TBL_ATTACK_WAVE1);
	int x = 0;

	while (x < defenderCreatures)
	{
		string spawn = dataTableGetString (TBL_ATTACK_WAVE1, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_ATTACK_WAVE1, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_ATTACK_WAVE1, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_ATTACK_WAVE1, x, "loc_z");

		location myself = getLocation (droid);

		string planet = myself.area;
		obj_id top = getTopMostContainer (droid);
		obj_id room = getCellId (top, "filtrationroom65");

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.attacker_wave");
		dictionary params = new dictionary();
		params.put ("droid", droid );
		params.put ("spawn", spawnedCreature);
		messageTo(droid, "handleAttackDroid", params, 5, false);
		x = x + 1;
	}
	return;
}

void spawnAttackWaveTwo(obj_id droid)
{
	int defenderCreatures = dataTableGetNumRows (TBL_ATTACK_WAVE2);
	int x = 0;

	while (x < defenderCreatures)
	{
		string spawn = dataTableGetString (TBL_ATTACK_WAVE2, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_ATTACK_WAVE2, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_ATTACK_WAVE2, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_ATTACK_WAVE2, x, "loc_z");

		location myself = getLocation (droid);

		string planet = myself.area;
		obj_id top = getTopMostContainer (droid);
		obj_id room = getCellId (top, "filtrationroom65");

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.attacker_wave");
		dictionary params = new dictionary();
		params.put ("droid", droid );
		params.put ("spawn", spawnedCreature);
		messageTo(droid, "handleAttackDroid", params, 5, false);
		x = x + 1;
	}
	return;
}
/***** HANDLERS ***************************************/
messageHandler handleGetTools()
{
	obj_id structure = getTopMostContainer (self);

	if(!isIdValid(structure))
		return SCRIPT_CONTINUE;

	obj_id player = getObjIdObjVar(structure, "death_watch.missionTaker");

	obj_id top = getTopMostContainer (self );
	obj_id toolChest = getCellId (top, "filtrationroom65");
	location here = getLocation (self);
	string planet = here.area;
	location attack1 = new location (-4.5f, 0, -120.6f, planet, toolChest);
	ai_lib.aiPathTo (self, attack1);
	addLocationTarget ("tools", attack1, 1);

	if(!group.isGrouped(player))
	{
		sendSystemMessage(player, PROTECT_TOOLS);
		return SCRIPT_CONTINUE;
	}

	if(group.isGrouped(player))
	{
		resizeable obj_id[] members = group.getPCMembersInRange(player, 100f);
		if ( members != null && members.length > 0 )
		{
			int numInGroup = members.length;

			if (numInGroup < 1)
				return SCRIPT_CONTINUE;

			for (int i = 0; i < numInGroup; i++)
			{
	 			obj_id thisMember = members[i];
	 			sendSystemMessage(thisMember, PROTECT_TOOLS);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleGoVentilation()
{
	obj_id structure = getTopMostContainer (self);

	if(!isIdValid(structure))
		return SCRIPT_CONTINUE;

	obj_id player = getObjIdObjVar(structure, "death_watch.missionTaker");
	obj_id top = getTopMostContainer (self );
	obj_id ventilation = getCellId (top, "filtrationroom65");
	location here = getLocation (self);
	string planet = here.area;
	location attack2 = new location (-17f, 0, -61.5f, planet, ventilation);
	ai_lib.aiPathTo (self, attack2);
	addLocationTarget ("fix", attack2, 1);

	if(!isIncapacitated(self))
	{
		if(!group.isGrouped(player))
		{
			sendSystemMessage(player, PROTECT_FIX);
			CustomerServiceLog("DUNGEON_DeathWatchBunker","*Death Watch Air Vent: %TU has turned the air vent back on.", player);
			return SCRIPT_CONTINUE;
		}

		if(group.isGrouped(player))
		{
			resizeable obj_id[] members = group.getPCMembersInRange(player, 100f);
			if ( members != null && members.length > 0 )
			{
				int numInGroup = members.length;

				if (numInGroup < 1)
					return SCRIPT_CONTINUE;

				for (int i = 0; i < numInGroup; i++)
				{
		 			obj_id thisMember = members[i];
		 			sendSystemMessage(thisMember, PROTECT_FIX);
		 			CustomerServiceLog("DUNGEON_DeathWatchBunker","*Death Watch Air Vent: %TU has turned the air vent back on.", thisMember);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleFix()
{
	if(isIncapacitated(self))
		return SCRIPT_CONTINUE;

	obj_id structure = getTopMostContainer (self);

	if(!isIdValid(structure))
		return SCRIPT_CONTINUE;

	obj_id player = getObjIdObjVar(structure, "death_watch.missionTaker");

	setObjVar(player, "death_watch.air_vent_success", 1);
	setObjVar(self, "repair_completed", 1);
	setObjVar(structure, "death_watch.air_vent_on", 1);
	messageTo(self, "handleCleanUp", null, 10f, false);
	messageTo(structure, "handleAirVentOff", null, 1800f, false);
	removeObjVar(structure, "death_watch.missionTaker");

	if(!group.isGrouped(player))
	{
		sendSystemMessage(player, VENTILATION_REPAIR);
		return SCRIPT_CONTINUE;
	}

	if(group.isGrouped(player))
	{
		resizeable obj_id[] members = group.getPCMembersInRange(player, 100f);
		if ( members != null && members.length > 0 )
		{
			int numInGroup = members.length;

			if (numInGroup < 1)
				return SCRIPT_CONTINUE;

			for (int i = 0; i < numInGroup; i++)
			{
	 			obj_id thisMember = members[i];
	 			sendSystemMessage(thisMember, VENTILATION_REPAIR);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleCleanUp()
{
	destroyObject(self);

	return SCRIPT_CONTINUE;
}

messageHandler handleAttackDroid()
{
	obj_id droid = params.getObjId("droid");
	obj_id spawn = params.getObjId("spawn");
	startCombat(spawn, droid);
	return SCRIPT_CONTINUE;
}
