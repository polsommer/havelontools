include library.slicing;
include library.utils;
include library.permissions;
include library.sui;

const string MSGS = "dungeon/geonosian_madbio";

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if ( mid == null )
	{
		return SCRIPT_CONTINUE;
	}
	
	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		keypad ( player );
	}
		
	return SCRIPT_CONTINUE;
}

void keypad( obj_id player )
{
	boolean playersKeyCard = hasKeyCard ( player );
	boolean playerHasSlicingSkill = hasSlicingSkill ( player );
	
	obj_id self = getSelf();
	
	int pid = createSUIPage ("Script.Keypad", self, player, "KeypadCallback");

	sui.setAssociateRange(player, pid, self, 8.0f);

	subscribeToSUIProperty(pid, "result.numberBox", "localtext");
	subscribeToSUIProperty(pid, "buttonEnter", "ButtonPressed");
	if (playersKeyCard == false )
	{
		setSUIProperty(pid, "buttonKeyCard", "enabled", "false");
	}
	
	if (playerHasSlicingSkill == false )
	{
		setSUIProperty(pid, "buttonSlice", "enabled", "false");	
	}
	
	showSUIPage (pid);
	
	return;
}

messageHandler KeypadCallback()
{
	string result = params.getString("result.numberBox" + "." + "localtext");
	string button = params.getString("buttonEnter.ButtonPressed");
	obj_id player = params.getObjId ("player");
	string passcard = "object/tangible/loot/dungeon/geonosian_mad_bunker/passkey.iff";
	
	boolean playersKeyCard = hasKeyCard ( player );
		
	if (!isIdValid(player))
	{
		return SCRIPT_OVERRIDE;
	}		
	
	if ( button == null )
	{
		button = "none";
	}
	
	if ( result == null ) 
	{
		result = "0";
	}
	
	string passkey = getStringObjVar (self, "passcode");
	string objvarToSet = getStringObjVar (self, "player_lock");
	
	if (passkey == null || passkey == "")
	{
		passkey = "nothing";
	}
	
	if (button == "enter")
	{
		//debugSpeakMsg (self, "Passkey was " + passkey);
		if (passkey == result)
		{
			string_id goodCode = new string_id (MSGS, "right_code");
			string room = getStringObjVar (self, "room");
			obj_id mom = getTopMostContainer ( self );
			obj_id openRoom = getCellId (mom, room);
			
			dictionary websters = new dictionary ();
			websters.put ("player", player );
			websters.put ("room", openRoom);
			
			//debugSpeakMsg (player, "Sending msg to " + openRoom);
			
			messageTo (openRoom, "addToList", websters, 1, false);
			sendSystemMessage (player, goodCode);
			setObjVar (player, objvarToSet,1);
		}
		else
		{
			string_id badcode = new string_id (MSGS, "bad_code");
			sendSystemMessage (player, badcode);
		}
	}
	
	if (button == "keycard")
	{
		obj_id keyCard = keyCardObjId (player, passcard);
		if (keyCard == null)
		{
			//debugSpeakMsg (player, "NO KEYCARD");
		}
		else
		{
			string room = getStringObjVar (self, "room");
			obj_id mom = getTopMostContainer ( self );
			obj_id openRoom = getCellId (mom, room);
			
			dictionary websters = new dictionary ();
			websters.put ("player", player );
			websters.put ("room", openRoom);
			
			//debugSpeakMsg (player, "Sending msg to " + openRoom);
			
			messageTo (openRoom, "addToList", websters, 1, false);
						
			destroyObject (keyCard);
			string_id keycard = new string_id (MSGS, "keycard_success");
			sendSystemMessage (player, keycard);			
		}
	}
	
	if (button == "slice")
	{
		slicing.startSlicing( player, self, "finishedSlicingKeypad", "keypad" );	
	}
	return SCRIPT_CONTINUE;
}

boolean hasKeyCard ( obj_id player )
{
	obj_id playerInv = utils.getInventoryContainer( player );
	string passcard = "object/tangible/loot/dungeon/geonosian_mad_bunker/passkey.iff";
	
	boolean hadIt = false;
	hadIt = utils.playerHasItemByTemplate(player, passcard);
	
	return hadIt;
}

boolean hasSlicingSkill ( obj_id player )
{
	boolean hadIt = false;
	if (hasSkill (player, "class_smuggler_phase1_novice"))	
	{
		hadIt = true;
	}		
	return hadIt;
}

obj_id keyCardObjId (obj_id objPlayer, string strTemplate)
{
	obj_id objInventory = utils.getInventoryContainer (objPlayer);
	if( isIdValid(objInventory) )
	{
		obj_id[] objContents = getContents(objInventory);

		if( objContents != null )
		{
			for( int intI = 0; intI<objContents.length; intI++ )
			{
				string strItemTemplate = getTemplateName(objContents[intI]);
				if( strItemTemplate==strTemplate )
				{
					obj_id keycard = objContents[intI];
					return keycard;
				}
			}
		}
	}
	return null ;
}

messageHandler finishedSlicingKeypad()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	int success = params.getInt( "success" );
	obj_id player = params.getObjId( "player" );
	if ( success == 1 )
	{
		string_id hack = new string_id (MSGS, "hack_success");
		sendSystemMessage (player, hack);
		
		string room = getStringObjVar (self, "room");
		obj_id mom = getTopMostContainer ( self );
		obj_id openRoom = getCellId (mom, room);

		
		dictionary websters = new dictionary ();
		websters.put ("player", player );
		websters.put ("room", openRoom);
		messageTo (openRoom, "addToList", websters, 1, false);		
	}
	else
	{
		// Failed armor hack.
		string_id fail = new string_id (MSGS, "hack_fail");
		sendSystemMessage ( player, fail);
		setObjVar( self, "slicing.hacked", 1 );
	}

	return SCRIPT_CONTINUE;
}
