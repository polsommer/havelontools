include library.utils;
include library.combat;
include library.colors;
include library.attrib;
include library.trial;

const string DATA_TABLE						= "datatables/combat/npc_landmines.iff";

const string STF						= "npc_landmines";
const string_id SHOW_PAGE_TEXT					= new string_id(STF, "charge_page_text");

const boolean LOGGING						= false;


trigger OnInitialize()
{
	verifyMine(self);
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	verifyMine(self);
	trial.markAsTempObject(self, true);
	return SCRIPT_CONTINUE;
}

messageHandler detonateCharge()
{
	applyChargeEffects();
	return SCRIPT_CONTINUE;
}

messageHandler pageCharge()
{
	showFlyText( getSelf(), SHOW_PAGE_TEXT, 1.0f, colors.GREEN );
	return SCRIPT_CONTINUE;
}


void verifyMine(obj_id landMine)
{
	if(!utils.hasScriptVar(landMine, "mineType"))
	{
		doLogging("verifyMine", "charge destroyed itself due to invalid mineType script");
		destroyObject(landMine);
		return;
	}
	string chargeType = utils.getStringScriptVar(landMine, "mineType");

	string testValid = dataTableGetString(DATA_TABLE, chargeType, "mineType");
	if (testValid == null|| testValid.equals(""))
	{
		doLogging("verifyMine", "charge destroyed itself due to invalid entry("+chargeType+") in datatable("+DATA_TABLE+")");
		destroyObject(landMine);
		return;
	}
}


obj_id[] getTargetsInBlastRadius()
{
	obj_id landMine = getSelf();
	string mineType = utils.getStringScriptVar(landMine, "mineType");
	float blastRadius = dataTableGetFloat(DATA_TABLE, mineType, "blastRadius");
	location loc = getLocation(landMine);
	if (loc == null)
	{
		doLogging("getTargetsInBlastRadius", "Failed to determine my location, returning null");
		return null;
	}
	obj_id[] objects = getObjectsInRange(loc, blastRadius);
	resizeable obj_id[] targetsInRadius = new obj_id[0];
	for (int i = 0; i < objects.length; i++)
	{
		if (isPlayer(objects[i]) || isMob(objects[i]))
		{
			if (!isIncapacitated(objects[i]) && !isDead(objects[i]))
			{
				targetsInRadius = utils.addElement(targetsInRadius, objects[i]);
			}

		}
	}

	if (targetsInRadius.length < 1)
	{
		doLogging("getTargetsInBlastRadius", "targetsInRadius is less than 1, returning null");
		return null;
	}
	else
		return targetsInRadius;

}


void applyChargeEffects()
{
	obj_id detonationCharge = getSelf();
	location mineLoc = getLocation(getSelf());
	string chargeType = utils.getStringScriptVar(detonationCharge, "mineType");
	int minDamage = dataTableGetInt(DATA_TABLE, chargeType, "minDamage");
	int maxDamage = dataTableGetInt(DATA_TABLE, chargeType, "maxDamage");
	string stringDamageType = dataTableGetString(DATA_TABLE, chargeType, "damageType");
	string mineDetonationEffect = dataTableGetString(DATA_TABLE, chargeType, "effectOnExplode");
	int damageType = getDamageTypeFromString(stringDamageType);
	if (damageType == -1)
	{
		doLogging("applyMineEffects", "getDamageTypeFromString returned -1 when sent "+stringDamageType+" for mine "+chargeType);
		destroyObject(detonationCharge);
		return;
	}
	
	obj_id[] targets = getTargetsInBlastRadius();
	
	if (targets == null || targets.length == 0)
	{
		playClientEffectLoc(detonationCharge, mineDetonationEffect, getLocation(detonationCharge), 0.4f);
		destroyObject(detonationCharge);
		return;
	}
	
	playClientEffectLoc(detonationCharge, mineDetonationEffect, getLocation(detonationCharge), 0.4f);

	for (int i = 0;i<targets.length;i++)
	{
		int damageToApply = rand(minDamage, maxDamage);
		damage(targets[i], damageType, HIT_LOCATION_BODY, damageToApply);
	}
	destroyObject(detonationCharge);
}

int getDamageTypeFromString(string damageType)
{
	if (damageType == "blast")
		return DAMAGE_ELEMENTAL_HEAT;// no more blast, so sad.

	if (damageType == "energy")
		return DAMAGE_ENERGY;

	if (damageType == "stun")
		return DAMAGE_STUN;

	if (damageType == "heat")
		return DAMAGE_ELEMENTAL_HEAT;

	if (damageType == "cold")
		return DAMAGE_ELEMENTAL_COLD;

	if (damageType == "acid")
		return DAMAGE_ELEMENTAL_ACID;

	if (damageType == "electrical")
		return DAMAGE_ELEMENTAL_ELECTRICAL;

	if (damageType == "kinetic")
		return DAMAGE_KINETIC;

	return -1;
}

void doLogging(string section, string message)
{
	if(LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/demolition_pack/"+section, message);
}

