include library.ai_lib;
include library.trial;
include library.utils;

const boolean LOGGING					= true;

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	if (!utils.hasScriptVar(self, trial.WORKING_MDE_REVIVED))
	{
		detachAllScripts(self);
		removeAllObjVars(self);
 	}
 	else
 	{
 		utils.setScriptVar(self, "taken", true);
		messageTo(self, "destroySelf", null, 5, false);
 	}	
 	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	setInvulnerable(self, false);
	obj_id[] players = trial.getValidTargetsInDungeon(self);
	
	if (players == null || players.length == 0)
		return SCRIPT_CONTINUE;
		
	obj_id prefered = obj_id.NULL_ID;
	
	for (int i=0;i<players.length;i++)
	{
		if (!isDead(players[i]))
		{
			if (prefered == obj_id.NULL_ID)
				prefered = players[i];
			else
			{
				if (getDistance(self, players[i]) < getDistance(self, prefered))
					prefered = players[i];
			}
		}
	}
	
	if (prefered == obj_id.NULL_ID)
		return SCRIPT_CONTINUE;
		
	startCombat(self, prefered);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	if (!utils.hasScriptVar(self, trial.WORKING_MDE_REVIVED))
	{
		messageTo(self, "path", null, 2, false);
	}
	else
		utils.findLocInFrontOfTarget(self, 1);
	
	return SCRIPT_CONTINUE;
}

messageHandler path()
{
	location exit = utils.getLocationScriptVar(self, trial.WORKING_CLONER_EXIT);
	ai_lib.aiPathTo(self, exit);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/mde_combat_droid/"+section, message);	
}