include library.utils;
include library.permissions;

trigger OnAttach ()
{
	detachScript (self, "item.container.loot_crate");
	attachScript (self, "item.container.base.base_container");
	string newLoot = pickNewLoot();
	obj_id cargo = createObject (newLoot, self, "");
	
	if (hasObjVar (self, "room"))
	{
		createObject ("object/tangible/dungeon/poison_stabilizer.iff", self, "");
	}
	
	return SCRIPT_CONTINUE;
}	
	

messageHandler makeMoreLoot()
{
	removeObjVar (self, "gaveLoot");
	string newLoot = pickNewLoot();
	obj_id cargo = createObject (newLoot, self, "");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_OPEN )
	{
		if ( !hasObjVar(self, permissions.VAR_PERMISSION_BASE) )
		{
			switch(getContainerType(self))
			{
				case 0:
					detachScript(self, "item.container.base.base_container");
					break;

				case 1:
					utils.requestContainerOpen(player, self);
					break;

				default:
					break;
			}
		}
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnAboutToLoseItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	setObjVar (self, "gaveLoot", 1);
	messageTo (self, "makeMoreLoot", null, 600, true);
	return SCRIPT_CONTINUE;
}

string pickNewLoot ()
{
	string newLoot = "object/tangible/loot/dungeon/geonosian_mad_bunker/passkey.iff";

	if (hasObjVar (getSelf(), "room"))
	{
		newLoot = "object/tangible/dungeon/poison_stabilizer.iff";
		return newLoot;
	}		
	
	int pickNewLoot = rand (1, 5);
	switch(pickNewLoot)
	{
		case 1:
			newLoot = "object/tangible/loot/dungeon/geonosian_mad_bunker/passkey.iff";
			break;

		case 2:
			newLoot = "object/tangible/wearables/goggles/rebreather.iff";
			break;

		case 3:
			newLoot = "object/tangible/loot/dungeon/geonosian_mad_bunker/relic_gbb_honey_carafe.iff";
			break;

		case 4:
			newLoot = "object/tangible/loot/dungeon/geonosian_mad_bunker/relic_gbb_honey_carafe.iff";
			break;
		case 5:
			newLoot = "object/tangible/loot/dungeon/geonosian_mad_bunker/relic_gbb_small_ball.iff";
			break;

		default:
			break;
	}
	
	return newLoot;
}