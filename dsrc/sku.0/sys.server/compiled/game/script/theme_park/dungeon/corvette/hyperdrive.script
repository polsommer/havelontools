include library.sui;
include library.pet_lib;

const string MSGS = "dungeon/corvette";

trigger OnAttach ()
{
	string_id hypr = new string_id (MSGS, "hyper_name");
	string name = getString (hypr);
	setName (self, name);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if ( mid == null )
	{
		return SCRIPT_CONTINUE;
	}

	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if (hasObjVar (player, "corl_corvette.imperial_destroy_mission") || hasObjVar (player, "corl_corvette.rebel_destroy_mission") || hasObjVar (player, "corl_corvette.neutral_destroy_mission"))
		{
			showEngineSettings ( self, player );
		}
		else
		{
			string_id wrongMission = new string_id (MSGS, "does_nothing");
			sendSystemMessage (player, wrongMission);
		}
	}

	return SCRIPT_CONTINUE;
}

int showEngineSettings (obj_id pcd, obj_id player)
{
	string_id textMsg = new string_id (MSGS, "hyperdrive_settings");
	string TEXT = getString (textMsg);
	string_id titleMsg = new string_id (MSGS, "hyperdrive_title");
	string TITLE = getString (titleMsg);
	// Create the dialog page.
	int pid = sui.createSUIPage( sui.SUI_MSGBOX, pcd, player, "CorvetteEngine" );

	// Add elements text.
	setSUIProperty(pid, "", "Size", "250,175");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, TITLE );
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, TEXT);

	// Add buttons.
	sui.msgboxButtonSetup(pid, sui.YES_NO_CANCEL);
	setSUIProperty(pid, sui.MSGBOX_BTN_REVERT, sui.PROP_TEXT, "40");
	setSUIProperty(pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, "20");
	setSUIProperty(pid, sui.MSGBOX_BTN_CANCEL, sui.PROP_TEXT, "60");

	setSUIProperty(pid, sui.MSGBOX_BTN_REVERT, "OnPress", "RevertWasPressed=1\r\nparent.btnOk.press=t");
	subscribeToSUIProperty(pid, sui.MSGBOX_BTN_REVERT, "RevertWasPressed");

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}


messageHandler CorvetteEngine()
{
	obj_id top = getTopMostContainer (self);
	if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	// Determine which button was pressed.
	obj_id player = sui.getPlayerId( params );
	string revert = params.getString(sui.MSGBOX_BTN_REVERT+".RevertWasPressed");
	int bp = sui.getIntButtonPressed( params );
	int fuel = getIntObjVar (top, "fuel");
	int engine = getIntObjVar (top, "engine");

	switch ( bp )
	{
		case sui.BP_OK:
			string_id engineIs = new string_id (MSGS, "engine_is");
			string_id fuelIs = new string_id (MSGS, "fuel_is");
			string_id result = new string_id (MSGS, "engine_result");

			if (revert != null && !revert.equals("")) // "Fix Level"
			{
				string_id hypr40 = new string_id (MSGS, "hypr_40");
				sendSystemMessage (player, hypr40);
				setObjVar (top, "hyperdrive", 40);

				if (engine == 0)
				{
					sendSystemMessage (player, fuelIs);
					sendSystemMessage (player, "" + fuel, null);
					sendSystemMessage (player, result);
				}
				else
				{
					sendSystemMessage (player, fuelIs);
					sendSystemMessage (player, "" + fuel, null);
					sendSystemMessage (player, engineIs);
					sendSystemMessage (player, "" + engine, null);
				}
				checkForDestroy (player, top, 40);
			}
			else
			{
				string_id hypr20 = new string_id (MSGS, "hypr_20");
				sendSystemMessage (player, hypr20);
				setObjVar (top, "hyperdrive", 20);
				if (engine == 0)
				{
					sendSystemMessage (player, fuelIs);
					sendSystemMessage (player, "" + fuel, null);
					sendSystemMessage (player, result);
				}
				else
				{
					sendSystemMessage (player, fuelIs);
					sendSystemMessage (player, "" + fuel, null);
					sendSystemMessage (player, engineIs);
					sendSystemMessage (player, "" + engine, null);
				}
				checkForDestroy (player, top, 20);
			}
			return SCRIPT_CONTINUE;

		case sui.BP_CANCEL: // "Close"
			string_id hypr60 = new string_id (MSGS, "hypr_60");
			sendSystemMessage (player, hypr60);
			setObjVar (top, "hyperdrive", 60);
			string_id engine_is = new string_id (MSGS, "engine_is");
			string_id fuel_is = new string_id (MSGS, "fuel_is");
			string_id result_is = new string_id (MSGS, "engine_result");

			if (engine == 0)
			{
				sendSystemMessage (player, fuel_is);
				sendSystemMessage (player, "" + fuel, null);
				sendSystemMessage (player, result_is);
			}
			else
			{
				sendSystemMessage (player, fuel_is);
				sendSystemMessage (player, "" + fuel, null);
				sendSystemMessage (player, engine_is);
				sendSystemMessage (player, "" + engine, null);
			}
			checkForDestroy (player, top, 60);
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

void checkForDestroy (obj_id player, obj_id top, int hyper)
{
	int fuel = getIntObjVar (top, "fuel");

	if (fuel > hyper)
	{
		string_id reset = new string_id (MSGS, "engine_reset");
		sendSystemMessage (player, reset);
	}
	return;
}