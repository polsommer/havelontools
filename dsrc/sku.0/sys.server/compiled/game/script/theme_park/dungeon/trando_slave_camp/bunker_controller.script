include library.utils;
include library.create;

const string DATATABLE				= "datatables/dungeon/trando_slave_camp/camp_command_bunker.iff";

const string[] CELL_NAMES			=
						{
							"entry",
							"hall1",
							"hall2",
							"anteroom",
							"powerroom",
							"computerroom",
							"office",
							"barracks"
						};

const boolean doLogging 			= false;

messageHandler beginSpawn()
{
	resetBunker(self);
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if(isGod(speaker))
	{
		string[] parse = split( text, ' ' );
		if (parse[0] == "bunker")
		{
			if(parse[1] == "lockdown")
				setEventLocks(self);
			
			if(parse[1] == "reset")
				resetBunker(self);
		}
	}
	
	return SCRIPT_CONTINUE;
}
trigger OnAttach()
{
	validateScripts(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	validateScripts(self);
	return SCRIPT_CONTINUE;
}

void resetBunker(obj_id bunker)
{

	obj_id[] cellIds = getCellObjIds(bunker);
	if (hasObjVar(bunker, "toskKilled"))
		removeObjVar(bunker, "toskKilled");
		
	clearDungeon(bunker, cellIds);
	spawnMobs(bunker);
	setEventLocks(bunker); //lock the two doors
}


void setEventLocks(obj_id bunker)
{
	doLogging("setEventLocks", "In lock loop");
	obj_id powerRoom = getCellId(bunker, "barracks");
	obj_id sequencer = getCellId(bunker, "powerroom");
	
	setObjVar(bunker, "powerRoom", powerRoom);
	setObjVar(bunker, "sequencer", sequencer);
	
	permissionsMakePrivate(powerRoom);
	permissionsMakePrivate(sequencer);
}

void validateScripts(obj_id bunker)
{
	if (!hasScript(getCellId(bunker, "entry"), "theme_park.dungeon.trando_slave_camp.door_signal"))
		attachScript(getCellId(bunker, "entry"), "theme_park.dungeon.trando_slave_camp.door_signal");
}

void doLogging(string section, string message)
{
	if (doLogging)
		LOG("debug_bunker_controller_"+section, message);
}

obj_id[] getCellObjIds(obj_id bunker)
{
	resizeable obj_id[] resizeableCellId = new obj_id[0];

	for (int i= 0;i<CELL_NAMES.length;i++)
	{
		utils.addElement(resizeableCellId, getCellId(bunker, CELL_NAMES[i]));	
	}
	return resizeableCellId;
}

void clearDungeon(obj_id bunker, obj_id[] cellIds)
{
	for (int i = 0;i< cellIds.length;i++)
	{
		obj_id[] cellContents = getContents(cellIds[i]);
		
		if (cellContents.length > 0)
		{		
			for (int k = 0;k < cellContents.length;k++)
			{
				if (isPlayer(cellContents[k]))
					expelFromBuilding(cellContents[k]);
				else if(isMob(cellContents[k]))
					destroyObject(cellContents[k]);
			}
		}
	}
	
	
	if (hasObjVar(bunker, "terminalObjIdList"))
	{
		obj_id[] terminalList = getObjIdArrayObjVar(bunker, "terminalObjIdList");
	
		if (terminalList.length > 0)
		{
			for (int j = 0; j<terminalList.length; j++)
			{
				destroyObject(terminalList[j]);
			}
		}
	}
}

void spawnMobs(obj_id bunker)
{
	int spawnCount = dataTableGetNumRows (DATATABLE);
	resizeable obj_id[] resizeableTerminalId = new obj_id[0];
	
	for (int i = 0;i < spawnCount;i++)
	{
		string object = dataTableGetString (DATATABLE, i, "object");
		string cellName = dataTableGetString (DATATABLE, i, "cell");
		obj_id cellObjId = getCellId(bunker, cellName);
		float locX = dataTableGetFloat (DATATABLE, i, "locx");
		float locY = dataTableGetFloat (DATATABLE, i, "locy");
		float locZ = dataTableGetFloat (DATATABLE, i, "locz");
		float yaw = dataTableGetFloat(DATATABLE, i, "yaw");
		location bunkerLoc = getLocation(bunker);
		string planet = bunkerLoc.area;
		string script1 = dataTableGetString(DATATABLE, i, "script1");
		string script2 = dataTableGetString(DATATABLE, i, "script2");
		
		
		location spawnLoc = new location (locX, locY, locZ, planet, cellObjId);
		obj_id spawnObject;
	
		string preCheck = object.substring(0, 7);
		if (preCheck.equals("object/"))
		{
			spawnObject = createObjectInCell(object, bunker, cellName, spawnLoc);
			if(isIdValid(spawnObject))
				utils.addElement(resizeableTerminalId, spawnObject);
		}
		else
		{
			spawnObject = create.object (object, spawnLoc);
		}
		
		if (isIdValid(spawnObject))
		{
			setYaw(spawnObject, yaw);
			setObjVar(spawnObject, "parent", bunker);
			if (script1 != "")
				attachScript(spawnObject, script1);
			if (script2 != "")
				attachScript(spawnObject, script2);
		}

	}
	
	if (resizeableTerminalId.length > 0)
		setObjVar(bunker, "terminalObjIdList", resizeableTerminalId);
}