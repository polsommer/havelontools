include library.ai_lib;
include library.utils;
include library.healing;
include library.trial;
include library.buff;

const boolean LOGGING					= false;

trigger OnDestroy()
{
	if (trial.isUplinkActive(self))
	{
		obj_id parent = utils.getObjIdScriptVar(self, trial.PARENT);
		messageTo(parent, "droneDied", null, 3, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "selfDestruct", null, 5, false);
	playClientEffectObj(self, trial.PRT_KUBAZA_WARNING, self, "");
 	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	setInvulnerable(self, true);
	messageTo (self, "chargeForeman", null, 4, false);
	return SCRIPT_CONTINUE;
}

obj_id getForeman(obj_id self)
{
	obj_id contents[] = utils.getSharedContainerObjects(self);
	if (contents == null || contents.length == 0)
	{
		doLogging("locateForeman", "Contents list was empty, exiting");
		return obj_id.NULL_ID;
	}
	
	
	for (int i = 0; i < contents.length; i++)
	{
		if (hasScript(contents[i], "theme_park.dungeon.mustafar_trials.establish_the_link.foreman"))
		{
			return contents[i];
		}
	}
	
	doLogging("getForeman", "Unable to locate foreman");
	return obj_id.NULL_ID;
}

messageHandler chargeForeman()
{
	setInvulnerable(self, false);
	obj_id foreman = getForeman(self);
	if (!isIdValid(foreman))
	{
		messageTo(self, "selfDestruct", null, 0, false);
		return SCRIPT_CONTINUE;
	}
	location targetLoc = getLocation(foreman);
	ai_lib.aiPathTo( self, targetLoc );
	setMovementRun(self);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	obj_id foreman = getForeman(self);
	if (!isIdValid(foreman))
	{
		messageTo(self, "selfDestruct", null, 0, false);
		return SCRIPT_CONTINUE;		
	}
	
	float distance = getDistance(self, foreman);
	if (distance < 7f)
	{
		healForeman(self, foreman);
		return SCRIPT_CONTINUE;
	}
	else
	{
		messageTo(self, "chargeForeman", null, 0, false);
		return SCRIPT_CONTINUE;
	}
}

void healForeman(obj_id self, obj_id foreman)
{
	messageTo(self, "selfDestruct", null, 0, false);
	healing.healDamage(foreman, 10000);
	if (!buff.hasBuff(foreman, "uplink_enrage"))
		buff.applyBuff(foreman, "uplink_enrage");
}

messageHandler selfDestruct()
{
	obj_id[] targets = trial.getValidTargetsInRadius(self, 7.0f);
	
	playClientEffectLoc(self, trial.PRT_KUBAZA_EXPLODE, getLocation(self), 0.4f);
	
	destroyObject(self);
	
	if (targets == null || targets.length == 0)
	{
		doLogging("nukeSelf", "No valid targets in blast radius");
		return SCRIPT_CONTINUE;
	}
	
	for (int i=0;i<targets.length;i++)
	{
		damage(targets[i], DAMAGE_ELEMENTAL_HEAT, HIT_LOCATION_BODY, 2500);
	}
	
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/foreman_drone_spawner_tracker/"+section, message);	
}