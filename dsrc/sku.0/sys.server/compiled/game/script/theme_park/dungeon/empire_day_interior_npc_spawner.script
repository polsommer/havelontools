include ai.ai;
include library.ai_lib;
include library.utils;
include library.create;
include library.holiday;

trigger OnAttach ()
{
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.OnAttach: Initialized.");	
	
	messageTo (self, "beginEmpireDaySpawning", null, (holiday.EMPIRE_DAY_EVENT_START_DELAY + 300), false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize ()
{
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.OnInitialize: Initialized.");	
	
	messageTo (self, "beginEmpireDaySpawning", null, (holiday.EMPIRE_DAY_EVENT_START_DELAY + 300), false);
	return SCRIPT_CONTINUE;
}

messageHandler beginEmpireDaySpawning()
{
	if(!isEmpireDayRunning())
	{
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: Initialized.");	

	string datatable = getStringObjVar(self, "empire_day_spawn_table");
	if(datatable == null || datatable.length() <= 0)
	{
		CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: The datatable objvar for the event spawning was not found.");	
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: datatable: "+datatable);	

	int numberOfCreaturesToSpawn = dataTableGetNumRows(datatable);
	if(numberOfCreaturesToSpawn <= 0)
	{
		CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: The datatable objvar was found but the table reference was corrupt or had no rows.");		
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: numberOfCreaturesToSpawn: "+numberOfCreaturesToSpawn);	
	
	int x = utils.getIntScriptVar(self, "spawnCounter");
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.beginEmpireDaySpawning: spawnCounter: "+x);	

	while (x < numberOfCreaturesToSpawn)
	{

		if (hasObjVar (self, "empire_day_spawned" + x))
		{
			obj_id check = getObjIdObjVar (self, "empire_day_spawned" + x);
			if (!check.isLoaded())
			{
				spawnCreatures(x, datatable, self );
			}
		}
		else
		{
			spawnCreatures(x, datatable, self );
		}
		x = x + 1;
	}

	if (dataTableHasColumn (datatable, "special_room"))
	{
		attachRoomScripts (self, datatable);
	}

	if (dataTableHasColumn (datatable, "room_objvar"))
	{
		setRoomObjVars (self, datatable);
	}

	return SCRIPT_CONTINUE;
}

messageHandler tellingMomIDied()
{
	int spawn_num = params.getInt ("spawnNumber");
	obj_id spawn_mob = params.getObjId ("spawnMob");

	// only spawn a replacement if the mob who died is the one we actually spawned
	if (hasObjVar (self, "empire_day_spawned" + spawn_num) && (spawn_mob == getObjIdObjVar (self, "empire_day_spawned" + spawn_num)))
	{
		string datatable = getStringObjVar (self, "empire_day_spawn_table");
		spawnCreatures(spawn_num, datatable, self );
	}

	return SCRIPT_CONTINUE;
}

messageHandler randomCreatureDied()
{
	return SCRIPT_CONTINUE;
}

void attachRoomScripts (obj_id self, string datatable)
{
	string [] roomsToLock = dataTableGetStringColumnNoDefaults (datatable, "special_room");
	int numRooms = roomsToLock.length;

	int passThrough = 0;

	while (passThrough < numRooms)
	{
		string roomName = dataTableGetString (datatable, passThrough, "special_room");
		string roomScript = dataTableGetString (datatable, passThrough, "special_room_script");

		if (roomName == null && roomName == "")
		{
			setObjVar (self, "problem", "No room name");
			return;
		}

		if (roomScript == null && roomScript == "")
		{
			setObjVar (self, "problem", "No Script");
			return;
		}

		obj_id roomObj = self;

		if (roomName == "self")
		{
			roomObj = self;
		}
		else
		{
			roomObj = getCellId (self, roomName);
		}

		attachScript (roomObj, roomScript);
		setObjVar (self, "set_room", passThrough);
		passThrough = passThrough + 1;
	}
	return;
}

void setRoomObjVars (obj_id self, string datatable)
{
	string [] roomsToSet = dataTableGetStringColumnNoDefaults (datatable, "room_objvar");
	int numRooms = roomsToSet.length;

	if (numRooms == 0)
	{
		return;
	}

	int passThrough = 0;

	while (passThrough < numRooms)
	{
		string roomName = dataTableGetString (datatable, passThrough, "room_objvar");
		string roomObjVar = dataTableGetString (datatable, passThrough, "room_objvar_name");
		string roomObjVarValue = dataTableGetString (datatable, passThrough, "room_objvar_value");

		if (roomName == null && roomName == "")
		{
			setObjVar (self, "problem", "No room name");
			return;
		}

		if (roomObjVar == null && roomObjVar == "")
		{
			setObjVar (self, "problem", "No ObjVar Name");
			return;
		}

		obj_id roomObj = getCellId (self, roomName);

		setObjVar (roomObj, roomObjVar, roomObjVarValue);

		passThrough = passThrough + 1;
	}
	return;
}

void spawnCreatures(int x, string datatable, obj_id self )
{
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.spawnCreatures: Init");	

	string spawn = dataTableGetString (datatable, x, "spawns");

	float xCoord = dataTableGetFloat (datatable, x, "loc_x");
	float yCoord = dataTableGetFloat (datatable, x, "loc_y");
	float zCoord = dataTableGetFloat (datatable, x, "loc_z");

	location myself = getLocation (self);
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.spawnCreatures: my location: "+myself);	

	string planet = myself.area;
	string spawnRoom = dataTableGetString (datatable, x, "room");
	obj_id room = getCellId (self, spawnRoom);

	if (!isIdValid (room) && (spawnRoom != "world"))
	{
		CustomerServiceLog("bad_spawner_data", "spawner " + self + ", datatable " + datatable + ", row " + x + ", mob " + spawn + ", room " + spawnRoom + " doesn't exist");
		removeObjVar (self, "empire_day_spawned" + x);

		return;
	}

	location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

	obj_id spawnedCreature = create.object (spawn, spawnPoint);
	if(!isValidId(spawnedCreature) || !exists(spawnedCreature))
		return;
	
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.spawnCreatures: spawnedCreature: "+spawnedCreature);	

	if (dataTableHasColumn (datatable, "convo_script"))
	{
		string convoScript = dataTableGetString (datatable, x, "convo_script");
		if (convoScript != null && convoScript != "")
		{
			attachScript (spawnedCreature, convoScript);
		}
	}

	string creatureName = dataTableGetString (datatable, x, "name");
	if (creatureName != null && creatureName != "")
	{
		setName (spawnedCreature, creatureName);
	}

	setObjVar (spawnedCreature, "spawn_number", x);
	setObjVar (spawnedCreature, "mom", self );
	setObjVar (self, "empire_day_spawned" + x, spawnedCreature);
	attachScript (spawnedCreature, "theme_park.dungeon.clone_relic.spawned_creature_died");

	string scriptList = dataTableGetString (datatable, x, "script");

	if (scriptList != null && scriptList != "")
	{
		string[] scriptArray = split(scriptList, ',' );

		for ( int i = 0; i < scriptArray.length; i++ )
		{
			attachScript( spawnedCreature, scriptArray[i] );
		}

	}
	
	if (dataTableHasColumn (datatable, "yaw"))
	{
		float spawnYaw = dataTableGetFloat (datatable, x, "yaw");
		if (spawnYaw != 0)
		{
			setYaw (spawnedCreature, spawnYaw);
		}
	}
	
	if (dataTableHasColumn (datatable, "animation_mood"))
	
	{
		dictionary outparams = new dictionary ();
		outparams.put ("x", x );
		outparams.put ("datatable", datatable );
		outparams.put ("spawnedCreature", spawnedCreature );
		messageTo ( self, "animatedMood", outparams, 3, false );
	}

	if (dataTableHasColumn (datatable, "mood"))
	{
		string creatureMood = dataTableGetString (datatable, x, "mood");
		if (creatureMood != null && creatureMood != "")
		{
			ai_lib.setDefaultCalmMood (spawnedCreature, creatureMood);
		}
	}
	
	if (dataTableHasColumn (datatable, "spawn_objvar2"))
	{

		string spawnObjVar = dataTableGetString (datatable, x, "spawn_objvar");
		string objvarValue1 = dataTableGetString (datatable, x, "spawn_objvar_value");
		string spawnObjVar2 = dataTableGetString (datatable, x, "spawn_objvar2");
		string spawnValue2 = dataTableGetString (datatable, x, "spawn_objvar_value2");

		if (spawnObjVar != null && spawnObjVar != "")
		{
			if (objvarValue1 != null && objvarValue1 != "")
			{
				setObjVar (spawnedCreature, spawnObjVar, objvarValue1);
			}
		}
		if (spawnObjVar2 != null && spawnObjVar2 != "")
		{
			if (spawnValue2 != null && spawnValue2 != "")
			{
				setObjVar (spawnedCreature, spawnObjVar2, spawnValue2);
			}
		}
	}
	
	else
	{
		string objVarList = dataTableGetString (datatable, x, "spawn_objvar");
		setCreatureObjVars ( spawnedCreature, objVarList );
	}
	return;
}

messageHandler animatedMood ()
{
	int x = params.getInt( "x" );
	string datatable = params.getString( "datatable" );
	obj_id spawnedCreature = params.getObjId( "spawnedCreature" );
	string creatureAnimationMood = dataTableGetString (datatable, x, "animation_mood");
	
	if (creatureAnimationMood != null && creatureAnimationMood != "")
	{
		ai_lib.setDefaultCalmMood (spawnedCreature, creatureAnimationMood);
	}	
	
	if (creatureAnimationMood == "npc_sitting_drinking" || creatureAnimationMood == "npc_standing_drinking")
	{
		obj_id cup = createObject ("object/tangible/item/con_drinking_glass_01.iff", spawnedCreature, "");
		equip(cup, spawnedCreature);
	}
	
	return SCRIPT_CONTINUE;
}

void setCreatureObjVars( obj_id creature, string objVarList )
{
	if ( objVarList == null || objVarList == "" )
		return;

	//get array of strings in the format int:name=value
	string[] pairs = split(objVarList, ',');
	for ( int i = 0; i < pairs.length; i++ )
	{
		//split each pair to get int:name and value
		string[] objVarToSet = split(pairs[i], '=' );
		string objVarValue = objVarToSet[1];
		//split int:name into type (int) and name ("name")
		string[] objVarNameAndType = split(objVarToSet[0], ':');
		string objVarType = objVarNameAndType[0];
		string objVarName = objVarNameAndType[1];

		//Now we have:
		// objVarType	=	string, int, float, boolean
		// objVarName	=	the name of the objvar to set
		// objVarValue	=	the value of the objvar

		if ( objVarType == "string" )
			setObjVar( creature, objVarName, objVarValue );
		else if ( objVarType == "int" )
			setObjVar( creature, objVarName, utils.stringToInt( objVarValue ) );
		else if ( objVarType == "float" )
			setObjVar( creature, objVarName, utils.stringToFloat( objVarValue ) );
		else if ( objVarType == "boolean" || objVarType == "bool" )
			setObjVar( creature, objVarName, utils.stringToInt( objVarValue ) );//booleans are stored as int's.
		else
			setObjVar( creature, objVarName, objVarValue );//fuck it, must have been a string after all.
	}
}

boolean isEmpireDayRunning()
{
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.isEmpireDayRunning: Initializing check for building.");

	string empiredayRunning = getConfigSetting("GameServer", "empireday_ceremony");

	string empiredayString = getCurrentUniverseWideEvents();
	int empireday = empiredayString.indexOf("empireday_ceremony");	
	if(empireday < 0)
	{
		CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.isEmpireDayRunning: event is NOT runing or starting.");
		if(empiredayRunning.equals("true") || empiredayRunning.equals("1"))
		{
			obj_id self = getSelf();
			CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.isEmpireDayRunning: There is a config that shows the event is running. Sending a message to later to see if we tried to spawn too soon.");
			messageTo (self, "beginEmpireDaySpawning", null, (holiday.EMPIRE_DAY_EVENT_START_DELAY + 300), false);
		}
		else
		{
			CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.isEmpireDayRunning: There is a config that shows the event is NOT running.");
		
		}
		return false;
	}	
	CustomerServiceLog("holidayEvent", "empire_day_interior_npc_spawner.isEmpireDayRunning: event is runing or starting.");
	return true;
}