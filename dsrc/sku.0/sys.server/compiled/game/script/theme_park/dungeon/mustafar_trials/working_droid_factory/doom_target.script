include library.utils;
include library.trial;

const boolean LOGGING				= false;

trigger OnAttach()
{
	trial.setHp(self, trial.HP_DOOM_TARGET);
	setInvulnerable(self, true);
	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled (obj_id killer)
{
	location death = getLocation( self );
	playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
	playClientEffectLoc(killer, "clienteffect/combat_explosion_lair_large.cef", death, 0);


	setInvulnerable( self, true );
	messageTo( self, "destroyDisabledLair", null, .5f, false );
	obj_id[] enemies = getWhoIsTargetingMe( self );
	if ( enemies != null && enemies.length > 1 )
	{
		for ( int i = 0; i < enemies.length; i++ )
		{
			if ( isPlayer( enemies[i] ) )
			{
				setTarget( enemies[i], null );
				setCombatTarget( enemies[i], null );
			}
		}
	}
	return SCRIPT_CONTINUE;

}

messageHandler destroyDisabledLair()
{
	destroyObject( self );
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	messageTo(trial.getTop(self), "doomTargetDestroyed", null, 0, false);
	return SCRIPT_CONTINUE;
}

trigger OnObjectDamaged(obj_id attacker, obj_id weapon, int damage)
{
	doLogging("xx", "Damage recieved = "+damage);
	int curHP = getHitpoints (self);
	int maxHP = getMaxHitpoints( self );
	int smolder = (maxHP - (maxHP/3));
	int fire = (maxHP/ 3);

	if (!hasObjVar (self, "playingEffect"))
	{
		if (curHP < smolder)
		{
			if (curHP < fire)
			{
				location death = getLocation (self);
				setObjVar (self, "playingEffect", 1);
				messageTo (self, "effectManager", null, 15, true);
			}
			else
			{
				location death = getLocation (self);
				playClientEffectObj(attacker, "clienteffect/lair_med_damage_smoke.cef" , self, "");
				playClientEffectLoc(attacker, "clienteffect/combat_explosion_lair_large.cef", death, 0);
				setObjVar (self, "playingEffect", 1);
				messageTo (self, "effectManager", null, 15, true);
			}
		}
	}


	return SCRIPT_CONTINUE;
}


messageHandler effectManager ()
{
	removeObjVar (self, "playingEffect");
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/doom_target/"+section, message);
}