// Script to spawn event surrounding Xos the Dark Jedi for the Mustafar Treasure Hunt quest 'Fragments of the Past'

// ********************************************************************
//					INCLUDES
// ********************************************************************

include library.chat;
include library.ai_lib;
include library.utils;
include library.create;
include library.buff;

// ********************************************************************
//					CONSTS
// ********************************************************************

const string STF_INQ_MSGS					="mustafar/inquisitor_event";
const string_id DARK_SPAWN 					= new string_id(STF_INQ_MSGS, "dark_trooper_spawn");
const string_id INQ_ATTACK 					= new string_id(STF_INQ_MSGS, "inquisitor_attack");
const string TRIGGER_VOLUME_JEDI				= "jedi_interest_volume";
const float JEDI_INTEREST_RADIUS				= 35f;

const boolean CONST_FLAG_DO_LOGGING				= true;

// ********************************************************************
//					TRIGGERS
// ********************************************************************
																				//COMMENTED OUT FOR TESTING ONLY! 	RE-ENABLE!
trigger OnAttach ()
{
	launchObjectTriggerVolumeInitializer(self);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnInitialize ()
{
	launchObjectTriggerVolumeInitializer(self);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	debugLogging("OnTriggerVolumeEntered: ", " entered.");

	if (isPlayer(breacher) && !isIncapacitated(breacher))
	{
		if (volumeName.equals(TRIGGER_VOLUME_JEDI))
		{
			if (!hasObjVar (self, "noRespawn"))
			{
				if (canCallEnemies(self))
						spawnEnemies(self, self);
					//else
					//delayedSpawnJedi(breacher, self);
			}
		}
	}

	return SCRIPT_CONTINUE;
}


// ********************************************************************
//					FUNCTIONS
// ********************************************************************

void debugLogging(string section, string message)
{
	if (CONST_FLAG_DO_LOGGING)
		LOG("debug/reunite_jedi_event/"+section, message);
}

//----------------------------------------------------------------------

void launchObjectTriggerVolumeInitializer(obj_id self)
{
	if(!hasTriggerVolume(self, TRIGGER_VOLUME_JEDI))
	{
		createTriggerVolume(TRIGGER_VOLUME_JEDI, JEDI_INTEREST_RADIUS, true);
	}
	else
	{
		obj_id[] denizens = getTriggerVolumeContents(self, TRIGGER_VOLUME_JEDI);
		for(int i = 0; i < denizens.length; i++)
		{
			if(isPlayer(denizens[i]) && !isIncapacitated(denizens[i]))
			{
				if(canCallEnemies(self))
				{
					spawnEnemies(self, self);
					return;
				}
			}
		}
	}

	return;
}

//----------------------------------------------------------------------

obj_id callInquisitor(obj_id self, obj_id landmark)
{
	debugLogging("//***// callInquisitor: ", "////>>>> entered.");
	
	location currentLoc = getLocation(self);
	float landmarkDistanceOffset = 0f;
	if (isIdValid(landmark))
	{
		location landmarkLoc = getLocation(landmark);
		landmarkDistanceOffset = getDistance(self, landmark);
		debugLogging("callInquisitor: ", "landmark location is valid.");
	}
	
	float distance = landmarkDistanceOffset + 30f;
			
	location spawnLoc = utils.findLocInFrontOfTarget(self, distance);
	
	obj_id inquisitor = create.object ("som_kenobi_reunite_inquisitorium_hunter", spawnLoc);
	if (!isIdValid(inquisitor))
	{
		debugLogging("callInquisitor: ", "inquisitor obj_id that we created is not valid");
		return null;
	}

	ai_lib.setDefaultCalmBehavior( inquisitor, ai_lib.BEHAVIOR_SENTINEL );
	faceTo(inquisitor, self);
	setObjVar(inquisitor,"inquisitor", 1);

	return inquisitor;
}

//----------------------------------------------------------------------

obj_id callDark_trooper_1(obj_id self, obj_id landmark)
{
	debugLogging("//***// callDark_trooper_1: ", "////>>>> entered.");
	
	location currentLoc = getLocation(self);
	float landmarkDistanceOffset = 0f;
	if (isIdValid(landmark))
	{
		location landmarkLoc = getLocation(landmark);
		landmarkDistanceOffset = getDistance(self, landmark);
		debugLogging("callDark_trooper_1: ", "landmark location is valid.");
	}
	
	float distance = landmarkDistanceOffset + 30f;
			
	location spawnLoc = utils.findLocInFrontOfTarget(self, distance);
	
	obj_id dark_trooper_1 = create.object ("som_kenobi_reunite_dark_trooper", spawnLoc);
	if (!isIdValid(dark_trooper_1))
	{
		debugLogging("callDark_trooper_1: ", "dark_trooper_1 obj_id that we created is not valid");
		return null;
	}

	ai_lib.setDefaultCalmBehavior( dark_trooper_1, ai_lib.BEHAVIOR_LOITER );
	faceTo(dark_trooper_1, self);
	setObjVar(dark_trooper_1,"inquisitor", 1);

	return dark_trooper_1;
}

//----------------------------------------------------------------------

obj_id callDark_trooper_2(obj_id self, obj_id landmark)
{
	debugLogging("//***// callDark_trooper_2: ", "////>>>> entered.");
	
	location currentLoc = getLocation(self);
	float landmarkDistanceOffset = 0f;
	if (isIdValid(landmark))
	{
		location landmarkLoc = getLocation(landmark);
		landmarkDistanceOffset = getDistance(self, landmark);
		debugLogging("callDark_trooper_2: ", "landmark location is valid.");
	}
	
	float distance = landmarkDistanceOffset + 30f;
			
	location spawnLoc = utils.findLocInFrontOfTarget(self, distance);
	
	obj_id dark_trooper_2 = create.object ("som_kenobi_reunite_dark_trooper", spawnLoc);
	if (!isIdValid(dark_trooper_2))
	{
		debugLogging("callDark_trooper_2: ", "dark_trooper_1 obj_id that we created is not valid");
		return null;
	}

	ai_lib.setDefaultCalmBehavior( dark_trooper_2, ai_lib.BEHAVIOR_LOITER );
	faceTo(dark_trooper_2, self);
	setObjVar(dark_trooper_2,"inquisitor", 1);

	return dark_trooper_2;
}

//----------------------------------------------------------------------

boolean canCallEnemies(obj_id self)
{
	debugLogging("canCallEnemies: ", " entered.");

	string planetName = getCurrentSceneName();
	if (!planetName.startsWith("mustafar"))
		return false;

	if(!enemiesAlreadyPresent(self))	// is there already an inquisitor around? getObjects in range with a certain script?
	{
		debugLogging("canCallEnemies: ", " No enemies in range. ok to call him.");
		return true;
	}	
	
	return false;
}

//----------------------------------------------------------------------

boolean enemiesAlreadyPresent(obj_id self)
{
	debugLogging("enemiesAlreadyPresent: ", " entered.");

	location currentLoc = getLocation(self);
	obj_id enemyObject = getFirstObjectWithObjVar(currentLoc, 100f, "inquisitor");
	if(isIdValid(enemyObject))
	{
		debugLogging("enemyAlreadyPresent: ", "found a pre-existing inquisitor object.");
		return true;
	}

	debugLogging("enemyAlreadyPresent: ", "there is no pre-existing inquisitor object");
	return false;
}

//----------------------------------------------------------------------

void spawnEnemies(obj_id self, obj_id landmark)
{
	obj_id inquisitor = callInquisitor(self, landmark);
	obj_id dark_trooper_1 = callDark_trooper_1(self, landmark);
	obj_id dark_trooper_2 = callDark_trooper_2(self, landmark);
	
	dictionary inqs = new dictionary ();
	inqs.put ("inquisitor", inquisitor);
	inqs.put ("dark_trooper_1", dark_trooper_1);
	inqs.put ("dark_trooper_2", dark_trooper_2);

	chat.publicChat (dark_trooper_1, inquisitor, DARK_SPAWN);
	messageTo (self, "noHate", inqs, 5, false);
	messageTo (self, "inquisitorAttack", inqs, 7, false);
	messageTo (self, "dontRespawn", null, 480, false);
	setObjVar(self,"noRespawn", 1);
	return;
}


// ********************************************************************
//					MESSAGE HANDLERS
// ********************************************************************

messageHandler noHate()
{
	obj_id inquisitor = params.getObjId ("inquisitor");
	obj_id dark_trooper_1 = params.getObjId ("dark_trooper_1");
	obj_id dark_trooper_2 = params.getObjId ("dark_trooper_2");
	
	clearHateList(inquisitor);
	clearHateList(dark_trooper_1);
	clearHateList(dark_trooper_2);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

messageHandler inquisitorAttack()
{
	obj_id inquisitor = params.getObjId ("inquisitor");
	obj_id dark_trooper_1 = params.getObjId ("dark_trooper_1");
	obj_id dark_trooper_2 = params.getObjId ("dark_trooper_2");
	
	chat.publicChat (inquisitor, dark_trooper_1, INQ_ATTACK);
	
	addHate(inquisitor, self, 1000f);
	addHate(dark_trooper_1, self, 1000f);
	addHate(dark_trooper_2, self, 1000f);
	addHate(self, dark_trooper_2, 5000f);
	
	startCombat(inquisitor, self);
	startCombat(dark_trooper_1, self);
	startCombat(dark_trooper_2, self);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

messageHandler dontRespawn()
{
	removeObjVar (self, "noRespawn");
	return SCRIPT_CONTINUE;
}