include library.ai_lib;
include library.trial;
include library.utils;


const boolean LOGGING					= false;

trigger OnIncapacitated(obj_id killer)
{
	obj_id top = trial.getTop(self);
	messageTo(top, "devistatorKilled", null, 0, false);
 	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	obj_id homeCell = getContainedBy(self);
	trial.setHp(self, trial.HP_WORKING_DEVISTATOR);
	utils.setScriptVar(self, "home", homeCell);
	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	obj_id homeCell = utils.getObjIdScriptVar(self, "home");
	if (homeCell != destContainer)
	{
		resetSelf(self);
		messageTo(self, "removeInvulnerable", null, 10, false);
		return SCRIPT_CONTINUE;
	}
 	return SCRIPT_CONTINUE;
}


trigger OnEnteredCombat()
{
	trial.setDevistatorEngaged(self, true);
	trial.bumpSession(trial.getTop(self), "devistator_control");
	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	trial.setDevistatorEngaged(self, false);
	return SCRIPT_CONTINUE;
}

messageHandler removeInvulnerable()
{
	setInvulnerable(self, false);
	return SCRIPT_CONTINUE;
}

void resetSelf(obj_id self)
{
	int max = getMaxHealth(self);
	int current = getHealth(self);
	int toHeal = max - current;
	addToHealth(self, toHeal);
	setInvulnerable(self, true);
	ai_lib.clearCombatData();
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (!trial.isRruDeactivated(self))
	{
		int total = 0;
		for (int x = 0;x<damage.length;x++)
		{
			total += damage[x];
		}

		addToHealth(self, total);
	}
	
	return SCRIPT_CONTINUE;
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/devistator_boss/"+section, message);	
}