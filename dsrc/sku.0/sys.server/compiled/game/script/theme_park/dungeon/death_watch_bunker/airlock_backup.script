/***** INCLUDES ***********************************/

include library.ai_lib;
include library.chat;
include library.create;

/***** CONSTANTS **********************************/

const string TBL_BACKUP	= "datatables/dungeon/death_watch/airlock_backup.iff";
const string STF_FILE = "dungeon/death_watch";

/***** TRIGGERS ***************************************/

/*trigger OnAttach()
{
	messageTo (self, "handleAttackerCleanUp", null, 420f, false);
	return SCRIPT_CONTINUE;
}*/

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{
	if(!hasObjVar(self, "death_watch.backup"))
	{
		chat.chat(self, new string_id(STF_FILE, "airlock_backup"));
		setObjVar(self, "death_watch.backup", 1);
		messageTo(self, "Backup", null, 5f, false);
	}
	return SCRIPT_CONTINUE;
}

/***** HANDLERS ***************************************/

messageHandler Backup()
{
	obj_id structure = getTopMostContainer (self);

	int defenderCreatures = dataTableGetNumRows (TBL_BACKUP);
	int x = 0;

	while (x < 3)
	{
		string spawn = dataTableGetString (TBL_BACKUP, x, "spawns");

		float xCoord = dataTableGetFloat (TBL_BACKUP, x, "loc_x");
		float yCoord = dataTableGetFloat (TBL_BACKUP, x, "loc_y");
		float zCoord = dataTableGetFloat (TBL_BACKUP, x, "loc_z");

		location myself = getLocation (self);

		string planet = myself.area;
		obj_id top = getTopMostContainer (self);
		string spawnRoom = dataTableGetString (TBL_BACKUP, x, "room");
		obj_id room = getCellId (structure, spawnRoom);

		location spawnPoint = new location (xCoord, yCoord, zCoord, planet, room);

		obj_id spawnedCreature = create.object (spawn, spawnPoint);
		attachScript(spawnedCreature, "theme_park.dungeon.death_watch_bunker.airlock_clean");
		if (x == 1)
		{
			setObjVar(spawnedCreature, "death_watch.backup", 1);
		}
		x = x + 1;
	}
	return SCRIPT_CONTINUE;
}

/*messageHandler handleAttackerCleanUp()
{
	if ( ai_lib.isInCombat(self) )
	{
		messageTo(self, "handleAttackerCleanUp", null, 420f, false);
		return SCRIPT_CONTINUE;
	}

	destroyObject(self);
	return SCRIPT_CONTINUE;
}*/