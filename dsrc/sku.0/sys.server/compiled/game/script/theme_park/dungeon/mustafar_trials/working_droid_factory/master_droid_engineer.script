include library.ai_lib;
include library.trial;
include library.utils;
include library.buff;
include library.prose;


const string VOLUME_NAME				= "mdeStartRange";
const float VOLUME_RANGE				= 25.0f;

const float RAT_STAGE_1					= 0.90f;
const float RAT_STAGE_2					= 0.75f;
const float RAT_STAGE_3					= 0.60f;
const float RAT_STAGE_4					= 0.45f;
const float RAT_STAGE_5					= 0.30f;
const float RAT_STAGE_6					= 0.15f;

const boolean LOGGING					= false;

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id top = trial.getTop(self);
	dictionary dict = new dictionary();
	dict.put("mde", self);
	messageTo(top, "mdeKilled", dict, 0, false);
	trial.healAssemblyUnit(self);	

	detachAllScripts(self);
	removeAllObjVars(self);

 	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	trial.setHp(self, trial.HP_WORKING_MDE);
	setInvulnerable(self, true);
	obj_id homeCell = getContainedBy(self);
	utils.setScriptVar(self, "home", homeCell);
	setTriggerVolume(self);
	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	obj_id homeCell = utils.getObjIdScriptVar(self, "home");
	if (homeCell != destContainer)
	{
		resetSelf(self);
		return SCRIPT_CONTINUE;
	}
 	return SCRIPT_CONTINUE;
}

messageHandler removeInvulnerable()
{
	setInvulnerable(self, false);
	return SCRIPT_CONTINUE;
}

void resetSelf(obj_id self)
{
	int max = getMaxHealth(self);
	int current = getHealth(self);
	int toHeal = max - current;
	addToHealth(self, toHeal);
	setInvulnerable(self, true);
	ai_lib.clearCombatData();
	trial.healAssemblyUnit(self);
	trial.clearMdeArea(self);
	trial.setMdeEngaged(self, false);
	trial.bumpSession(trial.getTop(self), "mde_control");
	trial.resetAssemblyStage(self);
	string[] healthObjVar = {"stage1","stage2","stage3","stage4","stage5", "stage6"};
	utils.removeObjVarList(self, healthObjVar);
}

trigger OnExitedCombat()
{
	if (!isDead(self))
	{
		resetSelf(self);
	}
	return SCRIPT_CONTINUE;
}

void setTriggerVolume(obj_id self)
{
	createTriggerVolume(VOLUME_NAME, VOLUME_RANGE, true);
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if (volumeName.equals(VOLUME_NAME))
	{
		if (isPlayer(breacher))
			triggerEvent(self);
	}
	return SCRIPT_CONTINUE;
}

void triggerEvent(obj_id self)
{
	if (trial.isMdeEngaged(self))
		return;


	utils.messagePlayer(self, trial.getPlayersInDungeon(self), trial.WORKING_MDE_TAUNT);
	setInvulnerable(self, false);
	trial.setMdeEngaged(self, true);
	
	//Rapid Assembly Units in the next room
	obj_id[] rau = trial.getObjectsInDungeonWithScript(self, "theme_park.dungeon.mustafar_trials.working_droid_factory.rapid_assembly_unit");
	
	if (rau == null || rau.length == 0)
		return;
		
	utils.messageTo(rau, "triggerEvent", trial.getSessionDict(trial.getTop(self), "mde_control"), 0, false);
}

trigger OnCreatureDamaged( obj_id attacker, obj_id weapon, int[] damage )
{
	if (!trial.isMdeEngaged(self))
		return SCRIPT_CONTINUE;
	
	verifyHealth(self);	
	
	
	return SCRIPT_CONTINUE;
}

void verifyHealth(obj_id self)
{

	float max = (float)getMaxHealth(self);
	float current = (float)getHealth(self);
	float ratio = current/max;
	if (ratio <= RAT_STAGE_1)
	{
		if (ratio <= RAT_STAGE_2)
		{
			if (ratio <= RAT_STAGE_3)
			{
				if (ratio <= RAT_STAGE_4)
				{
					if (ratio <= RAT_STAGE_5)
					{
						if (ratio <= RAT_STAGE_6)
						{
							activateRau(self, 6);
						}
						activateRau(self, 5);
						return;
					}
					activateRau(self, 4);
					return;
				}
				activateRau(self, 3);
				return;
			}
			activateRau(self, 2);
			return;
		}
		activateRau(self, 1);
		return;
	}
}

void activateRau(obj_id self, int value)
{
	string stage = "stage"+Integer.toString(value);
	if (!hasObjVar(self, stage))
	{
		obj_id[] rau = trial.getObjectsInDungeonWithScript(self, "theme_park.dungeon.mustafar_trials.working_droid_factory.rapid_assembly_unit");
		if (rau == null || rau.length == 0)
			return;
			
		for (int i=0;i<rau.length;i++)
		{
			utils.setScriptVar(rau[i], trial.WORKING_ASSEMBLY_STAGE, value);
			messageTo(rau[i], "triggerEvent", trial.getSessionDict(trial.getTop(self), "mde_control"), 0, false);
		}
		
		setObjVar(self, stage, true);
	}
}


void doLogging(string section, string message)
{
	if (LOGGING || trial.WORKING_LOGGING)
		LOG("logging/master_droid_engineer/"+section, message);	
}