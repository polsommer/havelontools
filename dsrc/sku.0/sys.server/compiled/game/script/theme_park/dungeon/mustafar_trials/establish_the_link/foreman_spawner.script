include library.ai_lib;
include library.utils;
include library.create;
include library.trial;

							
const boolean LOGGING					= false;

const string FOREMAN					="som_link_lava_beetle_foreman";
const string SOLDIER					="som_link_lava_beetle_defender";
const string[] offSet					=
							{
								"-10:-10",
								"-10:10",
								"10:-10",
								"10:10"
							};

trigger OnAttach()
{
	spawnEventMobs(self);
	utils.sendSystemMessagePob(trial.getTop(self), trial.UPLINK_FOREMAN_SPAWN);
	return SCRIPT_CONTINUE;
}

messageHandler foremanDied()
{
	utils.setScriptVar(self, "foremanDead", true);
	obj_id controller = trial.getTop(self);
	messageTo(controller, "linkEventWon", null, 0, false);
	return SCRIPT_CONTINUE;
}

void spawnEventMobs(obj_id self)
{
	obj_id[] eventMobs = new obj_id[5];
	location spawnLoc = getLocation(self);
	obj_id foreman = create.object (FOREMAN, spawnLoc);
	if (!isIdValid(foreman))
	{
		doLogging("spawnActors", "Tried to create invalid creature("+foreman+")");
		return;
	}
	utils.setScriptVar(foreman, trial.PARENT, self);
	attachScript(foreman, "theme_park.dungeon.mustafar_trials.establish_the_link.foreman");
	
	obj_id creature = obj_id.NULL_ID;
	
	for (int i=0;i<4;i++)
	{
		string locString = offSet[i];
		string[] parse = split(locString, ':');
		float locX = spawnLoc.x + utils.stringToFloat(parse[0]);
		float locZ = spawnLoc.z + utils.stringToFloat(parse[1]);
		location soldierSpawn = new location(locX, spawnLoc.y, locZ, spawnLoc.area, spawnLoc.cell);
		creature = create.object (SOLDIER, soldierSpawn);
		if (!isIdValid(creature))
		{
			doLogging("spawnActors", "Tried to create invalid creature("+creature+")");
			return;
		}
		attachScript(creature, "theme_park.dungeon.mustafar_trials.establish_the_link.foreman_guard");
		eventMobs[i] = creature;
		utils.setScriptVar(creature, trial.PARENT, self);
	}
	
	ai_lib.establishAgroLink(foreman, eventMobs);
	
}

messageHandler guardDied()
{
	int deadGuards = 0;
	if (utils.hasScriptVar(self, "deadGuards"))
		deadGuards = utils.getIntScriptVar(self, "deadGuards");
	
	deadGuards +=1;
	validateEvent(self);
	return SCRIPT_CONTINUE;
}


void validateEvent(obj_id self)
{
	boolean foremanDead = false;
	boolean guardsDead = false;
	
	if (utils.hasScriptVar(self, "foremanDead"))
		foremanDead = utils.getBooleanScriptVar(self, "foremanDead");
		
	if (utils.hasScriptVar(self, "deadGuards"))
	{
		int guards = utils.getIntScriptVar(self, "deadGuards");
		if (guards >= 4)
			guardsDead = true;
	}
	
	if (foremanDead && guardsDead)
		winEvent(self);
}

void winEvent(obj_id self)
{
	obj_id dungeon = trial.getTop(self);
	if (isIdValid(dungeon))
		messageTo(dungeon, "foremanEventWon", null, 5, false);
	else
		doLogging("winEvent", "Failed to get top");
}



void doLogging(string section, string message)
{
	if (LOGGING || trial.UPLINK_LOGGING)
		LOG("logging/foreman_drone_spawner/"+section, message);	
}