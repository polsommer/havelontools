//This script is used in conjunction with quest.task.ground.retrieve_item.

//This script is attached to the object from which you wish to retrieve items.  It adds a radial menu item that sends a messageto
//to the player that quest.task.ground.retrieve_item will pick up and handle appropriately.

// ---------------------------------------------------------------------

include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

trigger OnAttach()
{
	messageTo(self, "getQuestPlayerName", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler getQuestPlayerName()
{
	obj_id questPlayer = utils.getContainingPlayer(self);
	if( isIdValid(questPlayer) )
	{
		setObjVar(self, "questPlayer", questPlayer);
	}
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			String menuText = groundquests.getRetrieveMenuText(player, self);
			string_id menuStringId = utils.unpackString(menuText);
			int menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, menuStringId);
			menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
			menuInfoData.setServerNotify(true);
		}	
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			if(item == menu_info_types.ITEM_USE)
			{
				location here = getLocation(player);
				if ( here.area.equals("dungeon1") && getCellName(here.cell).equals("greenhouse") )
				{
					obj_id graveNode = getFirstObjectWithScript(here, 5.0f, "theme_park.dungeon.nova_orion_station.nova_orion_gravestone_node");
					if ( isIdValid(graveNode) )
					{
						if ( utils.hasScriptVar(graveNode, "graveEventInProgress") )
						{
							sendSystemMessage(player, new string_id("nexus", "no_finale_event_already_underway"));
							return SCRIPT_CONTINUE;							
						}
						else
						{
							dictionary params = new dictionary();
							params.put("source", self);
							params.put("player", player);
							messageTo(player, "questRetrieveItemObjectFound", params, 0, false);
							messageTo(graveNode, "startNoFinaleEvent", params, 0, false);

							if ( !hasObjVar(self, "doNotDestroyMe") )
							{
								messageTo(self, "destroyMe", null, 1, false);
							}
						}
					}
					else
					{
						sendSystemMessage(player, new string_id("nexus", "no_finale_event_too_far"));
						return SCRIPT_CONTINUE;		
					}
				}
				else
				{
					sendSystemMessage(player, new string_id("nexus", "no_finale_event_incorrect_location"));
					return SCRIPT_CONTINUE;	
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler destroyMe()
{
	if ( !hasObjVar(self, "doNotDestroyMe") )
	{
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}

