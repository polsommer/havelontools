include library.utils;
include library.trial;


const string STF					= "npc_landmines";
const string_id DETONATE				= new string_id(STF, "detonate_charge");
const string_id PAGE					= new string_id(STF, "page_charge");


//Change to false to stop logging
const boolean LOGGING					= false;

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (!utils.verifyLocationBasedDestructionAnchor(self, 500))
		return SCRIPT_OVERRIDE;

	int root_menu = mi.addRootMenu(menu_info_types.ITEM_USE, DETONATE);
	mi.addSubMenu(root_menu, menu_info_types.ITEM_USE_OTHER, PAGE);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE)
	{
		detonateCharge(player, self);
	}
	if (item == menu_info_types.ITEM_USE_OTHER)
	{
		pageDetonationCharge(player, self);
	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

void detonateCharge(obj_id player, obj_id detonator)
{
	if (!utils.hasScriptVar(detonator, "chargeId"))
	{
		doLogging("detonateCharge", "Detonator did not have an associated chargeId ScriptVar");
		destroyObject(detonator);
		return;
	}
	
	obj_id charge = utils.getObjIdScriptVar(detonator, "chargeId");

	if (!isIdValid(charge))
	{
		doLogging("placeDetonationCharge", "Charge Obj_Id was invalid, destroying detonator");
		destroyObject(detonator);
		return;
	}
	
	messageTo(charge, "detonateCharge", null, 0, false);
	destroyObject(detonator);
	
	return;
}

void pageDetonationCharge(obj_id player, obj_id detonator)
{
	if (!utils.hasScriptVar(detonator, "chargeId"))
	{
		doLogging("pageDetonationCharge", "Detonator did not have an associated chargeId ScriptVar");
		destroyObject(detonator);
		return;
	}
	
	obj_id charge = utils.getObjIdScriptVar(detonator, "chargeId");

	if (!isIdValid(charge))
	{
		doLogging("placeDetonationCharge", "Charge obj_id was invalid, destroying detonator");
		destroyObject(detonator);
		return;
	}
	
	messageTo(charge, "pageCharge", null, 0, false);
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VALLEY_LOGGING)
		LOG("logging/demolition_detonator/"+section, message);
}

