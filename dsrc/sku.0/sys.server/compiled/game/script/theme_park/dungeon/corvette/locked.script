include library.utils;

trigger OnInitialize ()
{
	permissionsMakePrivate ( self );
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar (self, "access");
	if (permList == null || permList.size () == 0)
	{
		return SCRIPT_CONTINUE;
	}
	
	int numInList = permList.size();
	
	for (int i = 0; i < numInList; i ++)
	{
		obj_id thisPlayer = permList[i];
		if (isIdValid (thisPlayer))
		{
			string fname = getFirstName (thisPlayer);
			permissionsAddAllowed (self, fname);
		}			
	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	permissionsMakePrivate ( self );
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar (self, "access");
	if (permList == null || permList.size () == 0)
	{
		return SCRIPT_CONTINUE;
	}
	
	int numInList = permList.size();
	
	for (int i = 0; i < numInList; i ++)
	{
		obj_id thisPlayer = permList[i];
		if (isIdValid (thisPlayer))
		{
			string fname = getFirstName (thisPlayer);
			permissionsAddAllowed (self, fname);
		}			
	}
	return SCRIPT_CONTINUE;
}

trigger OnAboutToReceiveItem (obj_id destinationCell, obj_id transferrer, obj_id item)
{
	if (!isPlayer (item))
	{
		return SCRIPT_CONTINUE;
	}			
	
	string objvarKey = getStringObjVar (self, "objvar_key");
	
	if (objvarKey == null || objvarKey == "")
	{
		objvarKey = "nil";
	}
	
	return SCRIPT_CONTINUE;

}


messageHandler addToList ()
{
	obj_id player = params.getObjId ("player");

	if (!isIdValid(player) || !isPlayer(player))
	{
		return SCRIPT_CONTINUE;
	}

	string fname = getFirstName (player);
	obj_id room = params.getObjId ("room");

	if (room == null)
	{
		return SCRIPT_CONTINUE;
	}

	permissionsAddAllowed (room, fname);
	
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar(room, "access" );
	if (permList == null )
	{
		permList = new Vector();
	}
	
	if (!utils.isElementInArray( permList, player ))
	{		
		permList = utils.addElement (permList, player);
		utils.setResizeableBatchObjVar(room, "access", permList);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler removeFromList ()
{
	obj_id player = params.getObjId ("player");
	
	if (!isIdValid(player) || !isPlayer(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	string fname = getFirstName (player);
	obj_id room = params.getObjId ("room");

	if (room == null)
	{
		return SCRIPT_CONTINUE;
	}

	permissionsRemoveAllowed (room, fname);
	
	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar(room, "access" );
	if (permList == null )
	{
		permList = new Vector();
	}
	
	permList = utils.removeElement (permList, player);
	
	utils.setResizeableBatchObjVar(room, "access", permList);
	
	return SCRIPT_CONTINUE;
}

messageHandler unlock()
{
	permissionsMakePublic (self);
	return SCRIPT_CONTINUE;
}