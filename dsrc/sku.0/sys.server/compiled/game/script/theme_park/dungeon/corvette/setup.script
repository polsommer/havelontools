include library.player_structure;
include library.utils;

trigger OnReceivedItem (obj_id srcContainer, obj_id transferer, obj_id item)
{
	obj_id top = getTopMostContainer (self);
	if (hasObjVar (top, "space_dungeon.quest_type"))
	{
		string quest_type = getStringObjVar (top, "space_dungeon.quest_type");
		string forPlayer = "corl_corvette." + quest_type + "_mission";

		if (!hasObjVar (item, forPlayer))
		{
			setObjVar (item, forPlayer, 1);
		}
	}

	if (isPlayer (item))
	{
		//attachScript (item, "theme_park.dungeon.corvette.timer");
		dictionary webster = new dictionary ();
		webster.put ( "player", item);
		messageTo (self, "addToList", webster, 1, false );
	}

	return SCRIPT_CONTINUE;
}

messageHandler addToList ()
{
	obj_id player = params.getObjId ("player");
	obj_id top = getTopMostContainer (self);
	if (player == null)
	{
		return SCRIPT_CONTINUE;
	}

	resizeable obj_id[] permList = utils.getResizeableObjIdBatchObjVar(top, "current_players" );
	if (permList == null )
	{
		permList = new Vector();
	}

	if (!utils.isElementInArray( permList, player ))
	{
		permList = utils.addElement (permList, player);
		utils.setResizeableBatchObjVar(top, "current_players", permList);
	}

	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	obj_id[] players = player_structure.getPlayersInBuilding(self);

	if (players == null )
	{
		return SCRIPT_CONTINUE;
	}

	int numPlayers = players.length;

	if (numPlayers > 0)
	{
		for (int i = 0; i < numPlayers; i++)
		{
			if (!hasScript (players[i], "theme_park.dungeon.corvette.timer"))
			{
				attachScript (players[i], "theme_park.dungeon.corvette.timer");
			}
		}
	}
	return SCRIPT_CONTINUE;
}