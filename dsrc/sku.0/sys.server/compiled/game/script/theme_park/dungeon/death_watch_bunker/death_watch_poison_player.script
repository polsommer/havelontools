/***** INCLUDES ********************************************************/

include library.utils;
include library.dot;
include library.player_structure;

/***** CONSTANTS *******************************************************/

const string SCRIPT_POISON					= "theme_park.dungeon.death_watch_bunker.death_watch_poison_player";

const string_id BAD_AIR				 		= new string_id("dungeon/death_watch", "bad_air");

const int HEALTH_COST					= 5000;
const int ACTION_COST					= 2000;

/***** TRIGGERS ********************************************************/
trigger OnAttach()
{
	poisonAir(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	poisonAirLogIn(self);
	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	poisonAir(self);
	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS ********************************************************/
boolean checkForGasMask(obj_id self)
{
	obj_id[] objContents = utils.getContents(self, true);

	if( objContents != null )
	{
		for( int intI = 0; intI<objContents.length; intI++ )
		{
			string strItemTemplate = getTemplateName(objContents[intI]);
			if( strItemTemplate=="object/tangible/wearables/goggles/rebreather.iff")
			{
				obj_id mask = objContents[intI];
				if(hasObjVar(mask, "death_watch_ready"))
				{
					obj_id holder = getContainedBy (mask);
					if (holder == self)
					{
						return true;
					}
				}
			}
			if(strItemTemplate=="object/tangible/wearables/armor/mandalorian/armor_mandalorian_helmet.iff")
			{
				obj_id mandHelm = objContents[intI];
				obj_id holder = getContainedBy(mandHelm);
				if (holder == self)
				{
					return true;
				}
			}
		}
	}
	return false;
}

void poisonAirLogIn(obj_id self)
{
	messageTo (self, "handlePoisonAir", null, 30f, false);
	return;
}

void poisonAir(obj_id self)
{
	messageTo (self, "handlePoisonAir", null, 10f, false);
	return;
}

boolean validateRoom(obj_id self)
{
	obj_id structure = player_structure.getStructure(self);

	if (!isIdValid(structure))
		return false;

	obj_id cell54 = getCellId(structure, "medroom54");
	obj_id cell56 = getCellId(structure, "storageroom56");
	obj_id cell60 = getCellId(structure, "tramroom60");
	obj_id cell57 = getCellId(structure, "smallroom57");

	location myLoc = getLocation(self);

	obj_id myCell = myLoc.cell;

	if (myCell == cell54 || myCell == cell56 || myCell == cell60 || myCell == cell57)
	{
		//debugSpeakMsg(self, "I am in " + myCell);
		return false;
	}

	return true;
}


/***** MESSAGEHANDLERS ***************************************************/
messageHandler handlePoisonAir ()
{
	obj_id structure = player_structure.getStructure(self);

	if ( !isIdValid(structure) )
	{
		detachScript(self, SCRIPT_POISON);
		return SCRIPT_CONTINUE;
	}

	string strBuildingName = getTemplateName(structure);

	if (strBuildingName != "object/building/general/bunker_allum_mine.iff")
	{
		detachScript(self, SCRIPT_POISON);
		return SCRIPT_CONTINUE;
	}

	if (validateRoom(self) == false)
	{
		poisonAir(self);
		return SCRIPT_CONTINUE;
	}

	if (hasObjVar(structure, "death_watch.air_vent_on"))
	{
		poisonAir(self);
		return SCRIPT_CONTINUE;
	}

	if (checkForGasMask(self) == true)
	{
		poisonAir(self);
		return SCRIPT_CONTINUE;
	}

	if (isDead(self) || isIncapacitated(self))
	{
		poisonAir(self);
		return SCRIPT_CONTINUE;
	}

	sendSystemMessage (self, BAD_AIR);

	int health = getAttrib( self, HEALTH );
	int action = getAttrib( self, ACTION );
	int healthcost = HEALTH_COST;
	int actioncost = ACTION_COST;

	if (health <= healthcost)
		healthcost = health - 1;
	if (action <= actioncost)
		actioncost = action -1;

	//Set damage to be done to a negative number
	healthcost = healthcost * -1;
	//subtract the damage from Health
	addToHealth(self, healthcost);
	drainAttributes(self, actioncost, 0 );
	//drainAttributes(self, 0, actioncost, 0);

	messageTo (self, "handlePoisonAir", null, 30f, false);
	return SCRIPT_CONTINUE;
}








