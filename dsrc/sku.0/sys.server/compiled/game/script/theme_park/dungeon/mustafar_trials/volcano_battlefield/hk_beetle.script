include library.ai_lib;
include library.utils;
include library.trial;

const boolean LOGGING					= false;

trigger OnAttach()
{
	beginAttack(self);
	trial.setHp(self, trial.HP_VOLCANO_HK_BEETLE);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, "nukeSelf", null, 5, false);
	playClientEffectObj(self, trial.PRT_KUBAZA_WARNING, self, "");
	
 	return SCRIPT_CONTINUE;
}

messageHandler nukeSelf()
{
	obj_id[] targets = trial.getValidTargetsInRadius(self, 7.0f);
	
	playClientEffectLoc(self, trial.PRT_KUBAZA_EXPLODE, getLocation(self), 0.4f);
	
	destroyObject(self);
	
	if (targets == null || targets.length == 0)
	{
		doLogging("nukeSelf", "No valid targets in blast radius");
		return SCRIPT_CONTINUE;
	}
	
	for (int i=0;i<targets.length;i++)
	{
		damage(targets[i], DAMAGE_ELEMENTAL_HEAT, HIT_LOCATION_BODY, 500);
	}
	
	return SCRIPT_CONTINUE;
}

void beginAttack(obj_id self)
{
	setMovementRun(self);
	obj_id[] players = trial.getValidTargetsInRadius(self, 100.0f);
	
	if (players == null || players.length == 0)
	{
		doLogging("beginAttack", "Found no players to attack");
		return;
	}
	
	obj_id toAttack = trial.getClosest(self, players);
	
	if (!isIdValid(toAttack))
	{
		doLogging("beginAttack", "player toAttack, was invalid");
		return;
	}
	
	startCombat(self, toAttack);
	
	return;
}

void doLogging(string section, string message)
{
	if (LOGGING || trial.VOLCANO_LOGGING)
		LOG("logging/hk_beetle/"+section, message);
}
