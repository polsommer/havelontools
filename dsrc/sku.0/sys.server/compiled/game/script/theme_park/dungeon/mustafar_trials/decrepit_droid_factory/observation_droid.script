include library.ai_lib;
include library.attrib;
include library.buff;
include library.trial;
include library.utils;

const boolean LOGGING				= true;

const string TRIGGER_DETONATE			= "trigger_volume_duality_detonate";
trigger OnDestroy()
{
	if(!hasObjVar(self, "cleanup"))
	{
		obj_id top = getTopMostContainer (self);
		string datatable = getStringObjVar (top, "spawn_table");

		obj_id mom = getObjIdObjVar (self, "mom");
		if (mom == null)
		{
			return SCRIPT_OVERRIDE;
		}

		int spawnNum = getIntObjVar (self, "spawn_number");

		int respawnTime = dataTableGetInt (datatable, spawnNum, "respawn_time");

		if (respawnTime == 0)
		{
			respawnTime = 30;
		}

		dictionary info = new dictionary();
		info.put ("spawnNumber", spawnNum );
		info.put ("spawnMob", self );

		messageTo (mom, "tellingMomIDied", info, respawnTime, false );
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated (obj_id killer)
{
	messageTo(self, "destroySelf", null, 5, false);
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	setInvulnerable(self, true);
	messageTo (self, "locatePatrolPoints", null, 3, false);
	createTriggerVolume(TRIGGER_DETONATE, 5.0f, true);
	setAttributeInterested( self, attrib.ALL );

	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breecher)
{
	doLogging("xx", "otve");
	if (volumeName.equals(TRIGGER_DETONATE))
	{
		if (!isIdValid(breecher) || !isPlayer(breecher) || !getCellName(getLocation(breecher).cell).equals("mainroom27"))
		{
			doLogging("OnTriggerVolumeEntered", "Breecher was invalid, not a player, or in the wrong cell");
			return SCRIPT_CONTINUE;
		}
		
		if (buff.hasBuff(breecher, "aurekDuality") || buff.hasBuff(breecher, "beshDuality"))
		{
			buff.removeBuff(breecher, "aurekDuality");
			buff.removeBuff(breecher, "beshDuality");
			//messageTo(breecher, "dualityDetonation", null, 0.0f, false);
			sendSystemMessage(breecher, trial.WORKING_OBSERVER_DETONATE);
		}
		else
			doLogging("xx", "Breecher did not have a buff to detonate");
	}
	else
		doLogging("xx", "was not trigger volume");
	return SCRIPT_CONTINUE;
}


messageHandler locatePatrolPoints()
{
	obj_id[] objects = utils.getSharedContainerObjects(self);
	if (objects == null || objects.length == 0)
	{
		doLogging("locatePatrolPoints", "There are no objects in the shared cell");
		return SCRIPT_CONTINUE;
	}
	
	string patrolPath = getStringObjVar(self, "patrol_path");
	string[] parse = split(patrolPath, ';');
	
	location[] patrolPoints = new location[parse.length];
	for (int i=0;i<parse.length;i++)
	{
		for (int k=0;k<objects.length;k++)
		{
			if (hasObjVar(objects[k], "patrol_wp"))
			{
				if (parse[i].equals(getStringObjVar(objects[k], "patrol_wp")))
					patrolPoints[i] = getLocation(objects[k]);
			}
		}
	}
	
	if (patrolPoints == null || patrolPoints.length == 0)
	{
		doLogging("locatePatrolPoints", "No patrol points could be found");
		return SCRIPT_CONTINUE;
	}
	
	setObjVar(self, "patrolPoints", patrolPoints);
	messageTo (self, "pathToNextPoint", null, 5, false);
	return SCRIPT_CONTINUE;
}

messageHandler pathToNextPoint()
{
	if (!hasObjVar(self, "patrolPoints"))
	{
		doLogging("pathToNextPoint", "I do not have hte patrolArray objVar");
	}
	
	location[] patrolPoints = getLocationArrayObjVar(self, "patrolPoints");
	patrol(self, patrolPoints);

	return SCRIPT_CONTINUE;
}

void handlePatrolTypeReset(obj_id self, location[] patrolPoints)
{
	utils.setScriptVar(self, "pathIndex", 0);
	messageTo (self, "pathToNextPoint", null, 1, false);
	
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/observation_droid/"+section, message);	
}