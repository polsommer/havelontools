

// ********************************************************************
//					INCLUDES
// ********************************************************************

include library.ai_lib;
include ai.ai_combat;
include library.utils;

// ********************************************************************
//					CONSTS
// ********************************************************************

const boolean CONST_FLAG_DO_LOGGING		= true;

// ********************************************************************
//					TRIGGERS
// ********************************************************************

trigger OnAttach()
{
	findTarget(self);
	
	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("OnAttach", "////>>>> dungeon obj_id is invalid. BROKEN");
	else
	{
		if(utils.hasScriptVar(dungeon,"minions"))
		{
			int minionCount = utils.getIntScriptVar(dungeon,"minions");
			utils.setScriptVar(dungeon,"minions", ++minionCount);
			debugLogging("OnAttach", "////>>>> added a minion to the dungeon. Current total count is "+minionCount);
		}
		else
			utils.setScriptVar(dungeon,"minions", 1);			
	}

	
	setObjVar(self,"minion",1);
	dictionary params = new dictionary();
	params.put("minion", self);
	messageTo(dungeon, "moveMinionIntoRoom", params, 0, false);
	
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------------------

trigger OnIncapacitated(obj_id killer)
{
	debugLogging("OnIncapacitated", "Minion destroyed");

	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
		debugLogging("//***// OnAttach: ", "////>>>> dungeon obj_id is invalid. BROKEN");
	else
	{
		if(utils.hasScriptVar(dungeon,"minions"))
		{
			int minionCount = utils.getIntScriptVar(dungeon,"minions");
			if(minionCount == 1)
			{
				utils.removeScriptVar(dungeon, "minions");
				messageTo(dungeon, "minionDied", null, 2, false);
			}
			else
				utils.setScriptVar(dungeon,"minions", --minionCount);
			debugLogging("OnIncapacitated", "////>>>> Pulled out a minion from the count. Current count is "+minionCount);
		}
	}	

	if (!hasObjVar(self,"minion"))
		debugLogging("OnIncapacitated: ", "////>>>> minion didn't have the minion objvar. BROKEN");

	return SCRIPT_CONTINUE;
}

// ********************************************************************
//					FUNCTIONS
// ********************************************************************

void debugLogging(string section, string message)
{
	if (CONST_FLAG_DO_LOGGING)
		LOG("debug/obiwan_minion_ops/"+section, message);
}

//----------------------------------------------------------------------

void findTarget(obj_id self)
{
	obj_id dungeon = getTopMostContainer(self);
	if (!isIdValid(dungeon))
	{
		debugLogging("//***// findTarget: ", "////>>>> dungeon obj_id is STILL invalid.");
		return;
	}

	obj_id contents[] = getContents(dungeon);
	if (contents == null || contents.length == 0)
	{
		debugLogging("findTargets", "Contents list was empty, exiting");
		return;
	}

	
	
/*	for (int i = 0; i < contents.length; i++)
	{
		if (isIdValid(contents[i]))
		{
			if (isPlayer(contents[i]))
			{
				debugLogging("findTargets", "Setting target objvar to: "+getName(contents[i])+" and exiting out of findTargets");
				setObjVar(self, "target", contents[i]);
				dictionary params = new dictionary();
				params.put("target", contents[i]);
				messageTo (self, "engageTarget", null, 10, false);
				return;
			}
				debugLogging("findTargets", "contents["+i+"] wasn't a player. NEXT!");
		}
		else
			debugLogging("findTargets", "contents["+i+"] wasn't VALID!. NEXT!");
	}
	*/
	
	obj_id target = utils.getObjIdScriptVar(dungeon, "player");
	
	dictionary params = new dictionary();
	params.put("target", target);
	messageTo (self, "engageTarget", params, 20, false);

}

// ********************************************************************
//					MESSAGE HANDLERS
// ********************************************************************

// entry from this script

messageHandler engageTarget()
{
	debugLogging("engageTarget", "entered");
	obj_id target = params.getObjId("target");
	if (!isIdValid(target))
	{	
		debugLogging("engageTarget", "target objId isn't valid. Trying alternate method");
		target = getObjIdObjVar(self, "target");
			if (!isIdValid(target))
			{	
				debugLogging("engageTarget", "Still no good target objId. BROKEN.");
			}
	}
	
	startCombat(self, target);
	debugLogging("engageTarget", "StartedCombat with target: ."+getName(target));
	addHate(self, target, 1000);
	return SCRIPT_CONTINUE;
}



