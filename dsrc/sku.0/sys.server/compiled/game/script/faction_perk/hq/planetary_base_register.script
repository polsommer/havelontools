include library.utils;
include library.gcw;

trigger OnAttach()
{
	setControlData(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	setControlData(self);
	messageTo(self, "performQuery", null, 30.0f, false);	
	return SCRIPT_CONTINUE;
}

trigger OnPreloadComplete()
{
	return SCRIPT_CONTINUE;
}

messageHandler performQuery()
{
	queryPlanetaryBaseData(self);
	return SCRIPT_CONTINUE;
}

void setControlData(obj_id self)
{
	obj_id planet = getPlanetByName(getLocation(self).area);
	utils.setScriptVar(planet, gcw.GCW_BASE_MANAGER, self);
}

trigger OnClusterWideDataResponse(string manage_name, string dungeon_name, int request_id, string[] element_name_list, dictionary[] dungeon_data, int lock_key)
{
	
	if (dungeon_name.startsWith("base_cwdata"))
	{
		if (dungeon_data == null || dungeon_data.length == 0)
		{
			releaseClusterWideDataLock(manage_name, lock_key);
			addToBaseCount(self, 0, 0);
			return SCRIPT_CONTINUE;		
		}
		
		int imperial = 0;
		int rebel = 0;
		
		for (int i = 0;i<dungeon_data.length;i++)
		{
			if (dungeon_data[i].getInt("faction") == gcw.FACTION_REBEL && dungeon_data[i].getString("scene").equals(getLocation(self).area))
				rebel++;
			
			if (dungeon_data[i].getInt("faction") == gcw.FACTION_IMPERIAL && dungeon_data[i].getString("scene").equals(getLocation(self).area))
				imperial++;
		}
		
		addToBaseCount(self, rebel, imperial);
	}
	return SCRIPT_CONTINUE;
}

void queryPlanetaryBaseData(obj_id self)
{
	getClusterWideData("gcw_player_base", "base_cwdata_manager*", true, self);
}

void addToBaseCount(obj_id self, int rebel, int imperial)
{
	obj_id planet = getPlanetByName(getLocation(self).area);
	int curReb = gcw.getRebelBaseCount(planet);
	int curImp = gcw.getImperialBaseCount(planet);
	
	utils.setScriptVar(planet, gcw.GCW_BASE_COUNT_REBEL, ((curReb+rebel) >=0 ? (curReb+rebel):0));
	utils.setScriptVar(planet, gcw.GCW_BASE_COUNT_IMPERIAL, ((curImp+imperial) >=0 ? (curImp+imperial):0));
}

messageHandler alterBaseCount()
{
	int faction = params.getInt("faction");
	int delta = params.getInt("delta");
	
	if (faction == gcw.FACTION_REBEL)
		addToBaseCount(self, delta, 0);
	else
		addToBaseCount(self, 0, delta);
	
	return SCRIPT_CONTINUE;
}