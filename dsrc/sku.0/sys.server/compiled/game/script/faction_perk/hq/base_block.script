include library.factions;
include library.pclib;
include library.utils;

trigger OnAboutToReceiveItem (obj_id destinationCell, obj_id transferrer, obj_id item)
{
	if (!isPlayer (item))
	{
		return SCRIPT_CONTINUE;
	}

	if ( utils.isNestedWithin(destinationCell, self) )
	{
		return SCRIPT_CONTINUE;	//If the player is merely moving between cells and is within the structure already, bypass this.
	}

	/*
	int myFac = pvpGetAlignedFaction(self);
	int tFac = pvpGetAlignedFaction(item);
	if ( pvpGetType( item ) == PVPTYPE_NEUTRAL )
		tFac = 0;

	if (pvpAreFactionsOpposed(myFac, tFac))
	{
		obj_id building = getTopMostContainer (self);
		//debugSpeakMsg(item, "Building ID is " + building);
		if (isIdValid(building))
		{
			string_id warning = new string_id ("faction_perk","destroy_turrets");
			sendSystemMessage (item, warning);
			{
				location there = getBuildingEjectLocation(building);
				//debugSpeakMsg(item, "Building eject loc is " + there);
					if ( there == null )
						return SCRIPT_CONTINUE;

					//setLocation(self, there);
				dictionary params = new dictionary();
				params.put("player", item);
				params.put("loc", there);
				messageTo(self, "ejectPlayer", params, 1f, false);
			}
		}
		return SCRIPT_OVERRIDE;
	}
	*/

	return SCRIPT_CONTINUE;

}

messageHandler ejectPlayer()
{
	location loc = params.getLocation( "loc" );
	obj_id player = params.getObjId("player");

	if (!isIdValid(player))
	 	return SCRIPT_CONTINUE;

	if (loc == null)
		return SCRIPT_CONTINUE;

	pclib.sendToAnyLocation(player, loc, null);

	return SCRIPT_CONTINUE;
}
