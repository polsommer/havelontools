
/***** INCLUDES ********************************************************/

include library.hq;

/***** CONSTANTS *******************************************************/

const int VULN_DELAY = 14400;

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	if ( !hasObjVar(self, "isPvpBase"))
	{
		messageTo(self, "handlePveVulnerability", null, VULN_DELAY, true);
		return SCRIPT_CONTINUE;
	}

	messageTo(self, "handleLoadVulnerability", null, VULN_DELAY, true);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( !hasObjVar(self, "isPvpBase"))
	{
		messageTo(self, "handlePveVulnerability", null, VULN_DELAY, true);
		return SCRIPT_CONTINUE;
	}

	messageTo(self, "handleLoadVulnerability", null, VULN_DELAY, true);
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	hq.unloadVulnerability(self);
	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS *******************************************************/
messageHandler handlePveVulnerability()
{
	hq.loadFullTimeVulnerability(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleLoadVulnerability()
{
	//LOG("hq", "faction_perk.hq.objective_manager -- handeLoadVulnerability: message received. Firing hq.loadVulnerability(self) immediately");
	hq.loadVulnerability(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleUnloadVulnerability()
{
	//LOG("hq", "faction_perk.hq.objective_manager -- handeUnloadVulnerability: message received. Firing hq.unloadVulnerability(self) immediately");
	hq.unloadVulnerability(self);
	return SCRIPT_CONTINUE;
}



messageHandler handleFlagVulnerabilityChange()
{
	int status = params.getInt( "status" );
	LOG("hq", "faction_perk.hq.objective_manager -- handleFlagVulnerability: message received. Firing hq.planetMapVulnerabilityStatusChange(self, status) immediately with status of: "+status);
	hq.planetMapVulnerabilityStatusChange(self, status);
	return SCRIPT_CONTINUE;
}
