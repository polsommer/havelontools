include ai.ai_combat;
include library.ai_lib;
include library.chat;

const string STF 						= "imperial_presence/contraband_search";

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	messageTo( self, "goingToFight", null, 1, false );
	int x = rand( 300, 600 );
	messageTo( self, "cleanUp", null, x, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// goingToFight
//------------------------------------------------

messageHandler goingToFight()
{
	location goFight = getLocationObjVar( self, "whereToFight" );
	goFight.x = goFight.x + ( rand (-5, 5) );
	ai_lib.aiPathTo( self, goFight );
	setMovementRun( self );
	addLocationTarget( "fight", goFight, 1 );
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnArrivedAtLocation
//------------------------------------------------

trigger OnArrivedAtLocation( string name )
{
	if ( name == "fight" )
	{
		chat.setAngryMood( self );
		if ( hasObjVar( self, "leader" ) )
		{
			if ( hasObjVar( self, "jedi" ) )
				chat.chat( self, new string_id(STF, "containment_team_jedi_"+getStringObjVar(self,"faction")) );
			else
				chat.chat( self, new string_id(STF, "containment_team_"+getStringObjVar(self,"faction")) );
		}
		obj_id attacker = getObjIdObjVar( self, "whoToFight" );
		startCombat( self, attacker );
	}

	if ( name == "done" )
	{
		messageTo( self, "leaveWorld", null, 7, false );
	}
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// cleanUp
//------------------------------------------------

messageHandler cleanUp()
{
	location home = getLocationObjVar( self, "home" );
	ai_lib.aiPathTo( self, home );
	addLocationTarget( "done", home, 1 );
	messageTo( self, "handleBadLeaving", null, 120, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// leaveWorld
//------------------------------------------------

messageHandler leaveWorld()
{
	destroyObject( self );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// handleBadLeaving
//------------------------------------------------

messageHandler handleBadLeaving()
{
	messageTo( self, "leaveWorld", null, 7, false );
	return SCRIPT_CONTINUE;
}
