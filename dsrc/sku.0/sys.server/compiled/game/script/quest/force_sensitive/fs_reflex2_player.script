include library.fs_dyn_village;
include library.fs_quests;
include library.prose;
include library.quests;
include library.utils;

const string_id MSG_FIND_THEATER_WAYPOINT		= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_find_theater_waypoint");
const string_id MSG_GOT_CRATE					= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_got_crate");
const string_id MSG_QUEST_FINISHED				= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_finished");
const string_id MSG_QUEST_CONTINUE			 	= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_continue");
const string_id MSG_QUEST_FAILED			 	= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_failed");
const string_id MSG_QUEST_FAIL_PHASE_DONE		= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_fail_phase_done");
const string_id MSG_QUEST_FAIL_INCAP			= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_fail_incap");
const string_id MSG_QUEST_ERROR_ABORTED			= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_02_quest_error_aborted");

const string QUEST_OBJVAR						= "quest.fs_reflex2";
const string RESCUED_OBJVAR						= QUEST_OBJVAR + ".rescued";
const string IN_PROGRESS_OBJVAR					= QUEST_OBJVAR + ".in_progress";
const string CONTINUE_OBJVAR					= QUEST_OBJVAR + ".continue";
const string FAILED_OBJVAR						= QUEST_OBJVAR + ".failed";
const string MASTER_OBJVAR						= QUEST_OBJVAR + ".master";
const string ABORTED_OBJVAR						= QUEST_OBJVAR + ".aborted";

messageHandler msgQuestAbortPhaseChange() {

	sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);
	removeObjVar(self, QUEST_OBJVAR);
	resetQuest(self);

	if(hasTheaterAssigned(self))
		unassignTheaterFromPlayer(self);

	detachScript(self, "quest.force_sensitive.fs_reflex2_player");

	return SCRIPT_CONTINUE;
}

/*
trigger OnLogin() {

	fs_dyn_village.getRegisteredIntegerFromClusterWideData(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE, "handleGetPhaseResponse", self);

//	if(hasObjVar(self, MASTER_OBJVAR)) {
//
//		obj_id master = getObjIdObjVar(self, MASTER_OBJVAR);
//
//		if(!isIdValid(master)) {
//
//			fs_dyn_village.getRegisteredObjIdFromClusterWideData(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "handleMasterIdResponse", self);
//
//			return SCRIPT_CONTINUE;
//		}
//
//		int phase = fs_dyn_village.getCurrentPhaseAuth(master);
//
//		if(phase != 2) {
//
//			sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);
//			removeObjVar(self, QUEST_OBJVAR);
//			resetQuest(self);
//			detachScript(self, "quest.force_sensitive.fs_reflex2_player");
//
//			return SCRIPT_CONTINUE;
//		}
//
//	} else {
//
//		fs_dyn_village.getRegisteredObjIdFromClusterWideData(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "handleMasterIdResponse", self);
//	}

	return SCRIPT_CONTINUE;
}

messageHandler handleGetPhaseResponse() {

	if(!params.containsKey(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE))
		return SCRIPT_CONTINUE;

	int phase = params.getInt(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE);

	if(phase != 2) {

		sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);
		removeObjVar(self, QUEST_OBJVAR);
		resetQuest(self);
		detachScript(self, "quest.force_sensitive.fs_reflex2_player");

		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}
*/

trigger OnQuestActivated(int questRow) {

	string questName = quests.getDataEntry(questRow, "NAME");

	if (questName == null) {
		return SCRIPT_CONTINUE;
	}

	if(questName.equals("fs_reflex_fetch_quest_01")) {

		setObjVar(self, IN_PROGRESS_OBJVAR, 1);

	} else if(questName.equals("fs_reflex_fetch_quest_02")) {

		obj_id crate = createObjectInInventoryAllowOverload("object/tangible/item/quest/force_sensitive/fs_reflex_supply_crate.iff", self);

		if(isIdValid(crate)) {

			setObjVar(crate, "player", self);
			sendSystemMessage(self, MSG_GOT_CRATE);

			quests.complete("fs_reflex_fetch_quest_02", self, true);

		}

	} else if(questName.equals("fs_reflex_fetch_quest_03")) {

		location loc = new location(5284.0f, 0 , -4222.0f, "dathomir");

		addLocationTarget(questName, loc, 15.0f);

		string wp_objvar = "quest." + questName + ".waypoint";

		obj_id wp = createWaypointInDatapad(self, loc);

		String summary = quests.getDataEntry(questName, "JOURNAL_ENTRY_SUMMARY");
		if(summary != null && summary.length() > 0)
		{
			setWaypointName(wp, summary);
		}
		else
		{
			setWaypointName(wp, "missing task summary for " + questName);
		}

		setWaypointColor(wp, "yellow");
		setWaypointActive(wp, true);
		setObjVar(self, wp_objvar, wp);

	} else if(questName.equals("fs_reflex_fetch_quest_04")) {

		int rescued = 0;

		if(hasObjVar(self, RESCUED_OBJVAR))
			rescued = getIntObjVar(self, RESCUED_OBJVAR);

		rescued++;

		if(rescued >= 6) {

			finishQuest(self, questName);

		} else {

			setObjVar(self, RESCUED_OBJVAR, rescued);
			continueQuest(self, questName, rescued);
		}

	} else if(questName.equals("fs_reflex_fetch_quest_05")) {

		sendSystemMessage(self, MSG_QUEST_FAILED);

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, FAILED_OBJVAR, 1);

		resetQuest(self);

	} else if(questName.equals("fs_reflex_fetch_quest_06")) {

		sendSystemMessage(self, MSG_QUEST_ERROR_ABORTED);

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, ABORTED_OBJVAR, 1);

		resetQuest(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string locationName) {

	if(locationName.equals("fs_reflex_fetch_quest_01_waypoint")) {

		sendSystemMessage(self, MSG_FIND_THEATER_WAYPOINT);

	} else if(locationName.equals("fs_reflex_fetch_quest_03")) {

		quests.complete("fs_reflex_fetch_quest_03", self, utils.playerHasItemByTemplate(self, "object/tangible/item/quest/force_sensitive/fs_reflex_supply_crate.iff"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer) {

	if(quests.isActive("fs_reflex_fetch_quest_03", self)) {

		sendSystemMessage(self, MSG_QUEST_FAIL_INCAP);

		quests.complete("fs_reflex_fetch_quest_03", self, false);

		if(utils.playerHasItemByTemplate(self, "object/tangible/item/quest/force_sensitive/fs_reflex_supply_crate.iff")) {

			obj_id crate = utils.getItemPlayerHasByTemplate(self, "object/tangible/item/quest/force_sensitive/fs_reflex_supply_crate.iff");

			if(isIdValid(crate))
				destroyObject(crate);
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleMasterIdResponse() {

	obj_id master = params.getObjId(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER);

	if(isIdValid(master))
		setObjVar(self, MASTER_OBJVAR, master);

	return SCRIPT_CONTINUE;
}

void continueQuest(obj_id self, string questName, int rescued) {

	int left = (6 - rescued);

	prose_package pp = prose.getPackage(MSG_QUEST_CONTINUE, left);
	sendSystemMessageProse(self, pp);

	removeObjVar(self, IN_PROGRESS_OBJVAR);
	setObjVar(self, CONTINUE_OBJVAR, 1);

	resetQuest(self);
}

void finishQuest(obj_id self, string questName) {

	sendSystemMessage(self, MSG_QUEST_FINISHED);

	removeObjVar(self, QUEST_OBJVAR);

	quests.complete(questName, self, true);

	fs_quests.unlockBranch(self, "force_sensitive_enhanced_reflexes_vehicle_control");

	fs_quests.setQuestCompleted(self, "fs_reflex2");

	detachScript(self, "quest.force_sensitive.fs_reflex2_player");

	// GIVE REWARD HERE
	// Reward coded quick add by BNorris
	obj_id createdObject = null;
	createdObject = createObjectInInventoryAllowOverload("object/tangible/item/quest/force_sensitive/fs_buff_item.iff", self);
	if (createdObject != null)
	{
		setObjVar (createdObject,"item.time.reuse_time",259200);
		setObjVar (createdObject,"item.buff.type",0);
		setObjVar (createdObject,"item.buff.value",2000);
		setObjVar (createdObject,"item.buff.duration",7200);
	}
	//END Reward Code

	obj_id theater = getLastSpawnedTheater(self);

	if(isIdValid(theater))
		destroyObject(theater);
}

void resetQuest(obj_id self) {

	for(int i = 6; i >= 0; i--) {

		string name = "fs_reflex_fetch_quest_0" + i;
		int questId = quests.getQuestId(name);

		quests.complete(name, self, false);
		clearCompletedQuest(self, questId);

		if(hasObjVar(self, "quest." + name + ".waypoint")) {

			obj_id waypoint = getObjIdObjVar(self, "quest." + name + ".waypoint");

			if(isIdValid(waypoint))
				destroyWaypointInDatapad(waypoint, self);
		}
	}

	obj_id theater = getLastSpawnedTheater(self);

	if(isIdValid(theater))
		destroyObject(theater);
}

trigger OnPlayerTheaterFail(string datatable, string name)
{
	if (datatable.equals("datatables/theater/quest/fs_quest/fs_reflex2.iff"))
	{
		int questId = quests.getQuestId("fs_reflex_fetch_quest_01");
		clearCompletedQuest(self, questId);
		if (quests.isActive("fs_reflex_fetch_quest_01", self))
			quests.deactivate("fs_reflex_fetch_quest_01", self);

		if(hasObjVar(self, "quest.fs_reflex_fetch_quest_01.waypoint")) {

			obj_id waypoint = getObjIdObjVar(self, "quest.fs_reflex_fetch_quest_01.waypoint");

			if(isIdValid(waypoint))
				destroyWaypointInDatapad(waypoint, self);
		}

		messageTo(self, "handleReactivateFailedTask", null, 1.0f, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleReactivateFailedTask() {

	quests.activate("fs_reflex_fetch_quest_01", self, null);

	return SCRIPT_CONTINUE;
}