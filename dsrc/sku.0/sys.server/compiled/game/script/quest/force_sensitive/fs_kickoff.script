/**
 * Copyright (c)2000-2004 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        fs_kickoff.script
 * Description:  Force Sensitive initial quest giver
 * @author       $Author:$
 * @version      $Revision:$
 */

include library.quests;
include library.fs_quests;
include library.utils;
include library.prose;
include library.chat;
include library.jedi_trials;
include library.group;
include library.xp;

const string RANGED_SPEED_BRANCH  = "force_sensitive_combat_prowess_ranged_speed";
const string MELEE_DEFENSE_BRANCH = "force_sensitive_enhanced_reflexes_melee_defense";

const string RANGED_SPEED_QUEST  = "fs_defend_wait_01";
const string MELEE_DEFENSE_QUEST = "fs_defend_wait_02";

/* DISABLED FOR NPE */
trigger OnInitialize()
{
	detachScript(self, "quest.force_sensitive.fs_kickoff");
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	/* DISABLED FOR NPE
	if (isJedi(self))
	*/
	{
		detachScript(self, "quest.force_sensitive.fs_kickoff");
	}
	return SCRIPT_CONTINUE;
}

// Recover from failed theaters
trigger OnPlayerTheaterFail(string datatable, string name)
{
	int quest_id = 0;
	if (hasObjVar(self, "theaterRecoveryTarget"))
	{
		removeObjVar(self, "theaterRecoveryTarget");
	}

	if (datatable == "datatables/theater/fs_quest_intro/fs_village_quest_intro.iff")
	{
		obj_id waypoint = getObjIdObjVar(self, "quest.fs_theater_camp.waypoint");
		if(isIdValid(waypoint))
		{
			destroyWaypointInDatapad(waypoint, self);

		}
		if (hasObjVar(self, "quest.fs_theater_camp.selected_location"))
		{
			removeObjVar(self, "quest.fs_theater_camp.selected_location");
		}

		obj_id theater = getLastSpawnedTheater(self);
		if (isIdValid(theater))
		{
			destroyObject(theater);
		}

		quest_id = quests.getQuestId("fs_theater_camp");
		quests.deactivate("fs_theater_camp", self);
		clearCompletedQuest(self, quest_id);
		unassignTheaterFromPlayer(self);
		messageTo( self, "recreateTheaterOne", null, 4, false );
		sendSystemMessage(self, new string_id("quest/force_sensitive/intro","theater_retry"));
	}

	if (datatable == "datatables/theater/quest/fs_quest/final_battle.iff")
	{
		obj_id waypointFinal = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
		if(isIdValid(waypointFinal))
		{
			destroyWaypointInDatapad(waypointFinal, self);

		}

		if (hasObjVar(self, "quest.fs_theater_final.selected_location"))
		{
			removeObjVar(self, "quest.fs_theater_final.selected_location");
		}

		obj_id theater = getLastSpawnedTheater(self);
		if (isIdValid(theater))
		{
			destroyObject(theater);
		}

		quest_id = quests.getQuestId("fs_theater_final");
		quests.deactivate("fs_theater_final", self);
		unassignTheaterFromPlayer(self);
		clearCompletedQuest(self, quest_id);
		messageTo( self, "recreateTheaterTwo", null, 4, false );
		sendSystemMessage(self, new string_id("quest/force_sensitive/intro","theater_retry"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnRemovingFromWorld()
{
	obj_id waypoint = getObjIdObjVar(self, "quest.fs_theater_camp.waypoint");
	if(isIdValid(waypoint))
	{
		destroyWaypointInDatapad(waypoint, self);
	}

	waypoint = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
	if(isIdValid(waypoint))
	{
			destroyWaypointInDatapad(waypoint, self);
	}

	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}
	return SCRIPT_CONTINUE;
}

trigger OnImmediateLogout()
{
	obj_id waypoint = getObjIdObjVar(self, "quest.fs_theater_camp.waypoint");
	if(isIdValid(waypoint))
	{
		destroyWaypointInDatapad(waypoint, self);
	}

	waypoint = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
	if(isIdValid(waypoint))
	{
		destroyWaypointInDatapad(waypoint, self);
	}

	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}

	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
//	------ Not using this system anymore so always detach. ------
//	if (isJedi(self))
//	{
		if (hasObjVar(self, "fs_kickoff_stage"))
		{
			removeObjVar(self, "fs_kickoff_stage");
		}
		detachScript(self, "quest.force_sensitive_fs_kickoff");
		return SCRIPT_CONTINUE;

//	}
/**********************************************************
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return SCRIPT_CONTINUE;

	if (!hasSkill(self, "force_title_jedi_novice"))
	{
		if (fs_quests.isVillageEligible(self))
			grantSkill(self, "force_title_jedi_novice");
	}

	// Determine what stage the player is in
	int stage = getIntObjVar(self, "fs_kickoff_stage");
	int randomDelay;

	switch(stage)
	{
		case 0: // Should never happen but if it does reset the delay
		{
			fs_quests.setDelay(self, 0);
			break;
		}
		case 1: // Delay period for the old man meeting
		{
			if (fs_quests.checkDelay(self))
			{
				startMeetOldMan(self);
				fs_quests.advanceStage(self);
				removeObjVar(self, "fs_timestamp");
				removeObjVar(self, "fs_delay");
			}
			break;
		}
		case 2: // Old Man Meeting
		{
			int quest_id = quests.getQuestId("old_man_initial");
			clearCompletedQuest(self, quest_id);
			randomDelay = rand(300, 900);
			messageTo( self, "meetOldMan", null, randomDelay, false );
			break;
		}
		case 3: // Delay period for the two military enemies
		{
			if (fs_quests.checkDelay(self))
			{
				randomDelay = rand(300, 900);
				messageTo( self, "twoMilitaryEncounter", null, randomDelay, false );
				fs_quests.advanceStage(self);
				removeObjVar(self, "fs_timestamp");
				removeObjVar(self, "fs_delay");
			}
			break;
		}
		case 4: // Two military enemies
		{
			if (quests.isActive("two_military", self))
			{
				quests.deactivate("two_military", self);
			}
			int quest_id = quests.getQuestId("two_military");
			clearCompletedQuest(self, quest_id);

			if (quests.isActive("loot_datapad_1", self))
			{
				quests.deactivate("loot_datapad_1", self);
			}
			quest_id = quests.getQuestId("loot_datapad_1");
			clearCompletedQuest(self, quest_id);

			quest_id = quests.getQuestId("got_datapad");
			clearCompletedQuest(self, quest_id);

			if (hasScript(self, "quest.task.retrieve_item"))
			{
				detachScript(self, "quest.task.retrieve_item");
			}

			randomDelay = rand(300, 900);
			messageTo( self, "twoMilitaryEncounter", null, randomDelay, false );
			break;
		}
		case 5: // Use the first data pad
		{
			if (!utils.playerHasItemByTemplateInBankOrInventory(self, "object/tangible/loot/quest/force_sensitive/waypoint_datapad.iff"))
			{
				if(quests.isActive("two_military", self))
				{
					quests.deactivate("two_military", self);
				}
				int quest_id = quests.getQuestId("two_military");
				clearCompletedQuest(self, quest_id);

				if (quests.isActive("loot_datapad_1", self))
				{
					quests.deactivate("loot_datapad_1", self);
				}
				quest_id = quests.getQuestId("loot_datapad_1");
				clearCompletedQuest(self, quest_id);
				quest_id = quests.getQuestId("got_datapad");
				clearCompletedQuest(self, quest_id);

				if (hasScript(self, "quest.task.retrieve_item"))
				{
					detachScript(self, "quest.task.retrieve_item");
				}

				fs_quests.decreaseStage(self);
				startTwoMilitary(self);
			}
			break;
		}
		case 6: // First Camp Theater
		{
			int quest_id = quests.getQuestId("fs_theater_camp");
			obj_id theater = getLastSpawnedTheater(self);
			if (isIdValid(theater))
			{
				destroyObject(theater);
			}

			quests.complete("fs_theater_camp", self, false);
			clearCompletedQuest(self, quest_id);
			unassignTheaterFromPlayer(self);
			if (quests.isActive("loot_datapad_2", self))
			{
				quests.deactivate("loot_datapad_2", self);
			}
			quest_id = quests.getQuestId("loot_datapad_2");
			clearCompletedQuest(self, quest_id);

			quest_id = quests.getQuestId("got_datapad_2");
			clearCompletedQuest(self, quest_id);

			if (hasScript(self, "quest.task.retrieve_item"))
			{
				detachScript(self, "quest.task.retrieve_item");
			}

			messageTo( self, "recreateTheaterOne", null, 6, false );
			break;
		}
		case 7: // Use the second datapad
		{
			if (!utils.playerHasItemByTemplateInBankOrInventory(self, "object/tangible/loot/quest/force_sensitive/theater_datapad.iff"))
			{
				int quest_id = quests.getQuestId("fs_theater_camp");
				clearCompletedQuest(self, quest_id);
				fs_quests.setStage(self, 6);

				if (quests.isActive("loot_datapad_2", self))
				{
					quests.deactivate("loot_datapad_2", self);
				}
				quest_id = quests.getQuestId("loot_datapad_2");
				clearCompletedQuest(self, quest_id);

				quest_id = quests.getQuestId("got_datapad_2");
				clearCompletedQuest(self, quest_id);

				if (hasScript(self, "quest.task.retrieve_item"))
				{
				detachScript(self, "quest.task.retrieve_item");
				}

				messageTo( self, "recreateTheaterOne", null, 6, false );
			}
			break;
		}
		case 8: // &Nothing here - player is doing the village quests
			if (fs_quests.isEndQuestEligible(self))
			{
				fs_quests.setDelay(self, 13);
				fs_quests.setStage(self, 9);
			}
			else
			{
				completeStuckWaitForTasks(self);
				grantStuckBranchUnlocks(self);
				resetStaleWaitForTasks(self);
			}
			break;
		case 9: // Start the second old man encounter
		{
			if (!fs_quests.isEndQuestEligible(self))
			{
				fs_quests.setStage(self, 8);
				return SCRIPT_CONTINUE;
			}

			if (fs_quests.checkDelay(self))
			{
				randomDelay = rand(300, 900); //TODO
				messageTo( self, "meetOldManExit", null, randomDelay, false );
			}
			break;
		}
		case 10: // Final Camp theater
		{
			if (!fs_quests.isEndQuestEligible(self))
			{
				fs_quests.setStage(self, 8);
				return SCRIPT_CONTINUE;
			}

			obj_id theater = getLastSpawnedTheater(self);
			if (isIdValid(theater))
			{
				destroyObject(theater);
			}
			int quest_id = quests.getQuestId("fs_theater_final");
			quests.deactivate("fs_theater_final", self);
			quests.complete("fs_theater_final", self, false);
			clearCompletedQuest(self, quest_id);
				unassignTheaterFromPlayer(self);
			messageTo( self, "recreateTheaterTwo", null, 6, false );
			break;
		}
		case 12: // Finished force sensitive quests
			if (!fs_quests.isEndQuestEligible(self))
			{
				fs_quests.setStage(self, 8);
				return SCRIPT_CONTINUE;
			}

			removeObjVar(self, "fs_oldman_visits");
			removeObjVar(self, "fs_kickoff_stage");
			detachScript(self, "quest.force_sensitive.fs_kickoff");
			break;
		default:
			break;
	}

	return SCRIPT_CONTINUE;
********************************************************/
}

trigger OnSkillAboutToBeRevoked(string strSkill)
{
	if (strSkill.startsWith ("force_title") && !hasObjVar(self, "clickRespec.granting"))
	{
		string_id nonrevokable = new string_id ("jedi_spam", "revoke_force_title");
		sendSystemMessage (self, nonrevokable);
		return SCRIPT_OVERRIDE;
	}

	return SCRIPT_CONTINUE;
}

messageHandler meetOldMan()
{
	// Here is where the server config is checked to see if this quest is active
	string config = getConfigSetting("GameServer", "forceSensitiveIntroActive");
	if (config != null)
	{
		if (config.equals("false"))
		{
		     return SCRIPT_CONTINUE;
	    }
	}

	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return SCRIPT_CONTINUE;

	int stage = getIntObjVar(self, "fs_kickoff_stage");
	if (stage != 2)
	{
		return SCRIPT_CONTINUE;
	}

	if (fs_quests.canBeginEncounter(self))
	{
		quests.activate("old_man_initial", self, null);
	}
	else
	{
		startMeetOldMan(self);
	}
	return SCRIPT_CONTINUE;
}

messageHandler meetOldManExit()
{
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return SCRIPT_CONTINUE;

	int stage = getIntObjVar(self, "fs_kickoff_stage");
	if (stage != 9)
	{
			return SCRIPT_CONTINUE;
	}

	if (fs_quests.canBeginEncounter(self))
	{
		// Sanity check - if we are here clear the quest
		int quest_id = quests.getQuestId("old_man_final");
		clearCompletedQuest(self, quest_id);
		quests.activate("old_man_final", self, null);
	}
	else
	{
		startMeetOldManExit(self);
	}
	return SCRIPT_CONTINUE;
}

messageHandler twoMilitaryEncounter()
{
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return SCRIPT_CONTINUE;

	if (fs_quests.canBeginEncounter(self))
	{
		quests.activate("two_military", self, null);
	}
	else
	{
		startTwoMilitary(self);
	}
	return SCRIPT_CONTINUE;
}

void startMeetOldMan (obj_id player)
{
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return;

	int randomDelay = rand(30, 300);
	messageTo( player, "meetOldMan", null, randomDelay, false );
	return;
}

void startTwoMilitary(obj_id player)
{
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return;

	int randomDelay = rand(30, 300);
	messageTo( player, "twoMilitaryEncounter", null, randomDelay, false );
	return;
}

void startMeetOldManExit (obj_id player)
{
	string planet = getCurrentSceneName();
	if(planet == "mustafar")
		return;

	int randomDelay = rand(30, 300);
	messageTo( player, "meetOldManExit", null, randomDelay, false );
	return;
}

messageHandler tryAgain()
{
	startMeetOldMan(self);
	return SCRIPT_CONTINUE;
}

messageHandler finalCleanup()
{
	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}
	return SCRIPT_CONTINUE;
}

messageHandler msgForceComplete()
{
	fs_quests.advanceStage(self);
	jedi_trials.initializePadawanTrials(self);
	sendSystemMessage(self, new string_id("quest/force_sensitive/exit","final_complete"));
	CustomerServiceLog("fs_quests", "%TU has completed the exit encounter", self, null);

	if (hasObjVar(self, "theaterRecoveryTarget"))
	{
		removeObjVar(self, "theaterRecoveryTarget");
	}

	obj_id waypointFinal = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
	if(isIdValid(waypointFinal))
	{
		destroyWaypointInDatapad(waypointFinal, self);
	}

	messageTo( self, "finalCleanup", null, 60, false );

	return SCRIPT_CONTINUE;
}

messageHandler msgForceFail()
{
	fs_quests.setDelay(self, 13);
	fs_quests.setStage(self, 10);
	int quest_id = quests.getQuestId("old_man_final");
	clearCompletedQuest(self, quest_id);
	quest_id = quests.getQuestId("fs_theater_final");
	clearCompletedQuest(self, quest_id);
	sendSystemMessage(self, new string_id("quest/force_sensitive/exit","final_fail"));
	// Allow log in to catch this - reapply the timer and have the old man come again to initiate the encounter
	if (hasObjVar(self, "theaterRecoveryTarget"))
	{
		removeObjVar(self, "theaterRecoveryTarget");
	}

	obj_id waypointFinal = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
	if(isIdValid(waypointFinal))
	{
		destroyWaypointInDatapad(waypointFinal, self);
	}

	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}

	return SCRIPT_CONTINUE;
}

messageHandler recreateTheaterOne()
{
	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}

	obj_id waypoint = getObjIdObjVar(self, "quest.fs_theater_camp.waypoint");
	if(isIdValid(waypoint))
	{
		destroyWaypointInDatapad(waypoint, self);
	}
	quests.activate("fs_theater_camp", self, null);
	return SCRIPT_CONTINUE;
}

messageHandler recreateTheaterTwo()
{
	obj_id theater = getLastSpawnedTheater(self);
	if (isIdValid(theater))
	{
		destroyObject(theater);
	}
	obj_id waypointFinal = getObjIdObjVar(self, "quest.fs_theater_final.waypoint");
	if(isIdValid(waypointFinal))
	{
		destroyWaypointInDatapad(waypointFinal, self);
	}

	// Hack to try and recover people from a bad exit quest on Kashyyyk
	if(hasObjVar(self, "theaterRecoveryTarget"))
	{
		location where = getLocationObjVar(self, "theaterRecoveryTarget");
		if(toLower(where.area).startsWith("kashyyyk"))
		{
			removeObjVar(self, "theaterRecoveryTarget");
			fs_quests.setStage(self, 9);
			if (!fs_quests.isEndQuestEligible(self))
			{
				fs_quests.setStage(self, 8);
				return SCRIPT_CONTINUE;
			}

			if(fs_quests.checkDelay(self))
			{
				int randomDelay = rand(300, 900);
				messageTo( self, "meetOldManExit", null, randomDelay, false );
			}
		}
	}

	quests.activate("fs_theater_final", self, null);
	return SCRIPT_CONTINUE;
}

messageHandler addQuestLootToCorpse()
{
	if (params == null)
	{
		return SCRIPT_CONTINUE;
	}

	obj_id corpse    = params.getObjId("corpse");
	string questName = params.getString("questName");

	if (questName == "two_military")
	{
		obj_id questOwner = utils.getObjIdObjVar(corpse, "quest.owner", obj_id.NULL_ID);

		if (isIdValid(questOwner)
			&& questOwner == self
			&& quests.isActive("loot_datapad_1", self)
			&& !utils.playerHasItemByTemplateInBankOrInventory(self, "object/tangible/loot/quest/force_sensitive/waypoint_datapad.iff"))
		{
			obj_id winner = getObjIdObjVar(corpse, xp.VAR_TOP_GROUP);
			if (isIdValid(winner))
			{
				obj_id[] permitted = null;

				if (group.isGroupObject(winner))
				{
					permitted = getGroupMemberIds(winner);
				}
				else
				{
					permitted = new obj_id[1];
					permitted[0] = winner;
				}
				if (permitted != null)
				{
					for (int i = 0; i < permitted.length; i++)
					{
						if (permitted[i] == self)
						{
							obj_id inv = utils.getInventoryContainer(corpse);
							if (isIdValid(inv))
							{
								obj_id loot = createObject("object/tangible/loot/quest/force_sensitive/waypoint_datapad.iff", inv, "");
								setObjVar(loot, "quest.loot_datapad_1.quest_item_target", self);
								setOwner(loot, self);
							}
							break;
						}
					}
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	if ( (hasScript(killer, "quest.force_sensitive.fs_military_initial")) || (hasScript(killer, "quest.force_sensitive.fs_military_initial_silent")) )
	{
		if (hasObjVar(killer, "quest.owner"))
		{
			obj_id questOwner = getObjIdObjVar(killer, "quest.owner");
			if (questOwner == self)
			{
				// Take the force crystal if they have it
				if (utils.playerHasItemByTemplate(self, "object/tangible/loot/quest/force_sensitive/force_crystal.iff"))
				{
					obj_id crystal = utils.getItemPlayerHasByTemplate(self, "object/tangible/loot/quest/force_sensitive/force_crystal.iff");
					int quest_id = quests.getQuestId("old_man_force_crystal");
					clearCompletedQuest(self, quest_id);
					destroyObject(crystal);

					prose_package pp = prose.getPackage(new string_id("quest/force_sensitive/intro", "military_take_crystal"), self);
					chat.publicChat(killer, self, null, null, pp);
				}

				setObjVar(self, "fs_kickoff_stage", 2);
				startMeetOldMan(self);
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnQuestActivated(int questRow)
{
	if (isJedi(self))
	{
		return SCRIPT_CONTINUE;
	}


	int quest_id = quests.getQuestId("fs_village_elder");
	if (quest_id == questRow)
	{
		fs_quests.makeVillageEligible(self);
		setJediState(self, JEDI_STATE_FORCE_SENSITIVE);
		grantSkill(self, "force_title_jedi_novice");
		sendSystemMessage(self, new string_id("quest/force_sensitive/intro","force_sensitive"));
		CustomerServiceLog("fs_quests", "%TU is now force sensitive", self, null);
		return SCRIPT_CONTINUE;
	}

	quest_id = quests.getQuestId("got_datapad");
	if (quest_id == questRow)
	{
		if (hasObjVar(self, "fs_kickoff_stage"))
		{
			int stage = getIntObjVar(self, "fs_kickoff_stage");
			if (stage == 4)
			{
				fs_quests.advanceStage(self);
			}
		}
	}

	quest_id = quests.getQuestId("got_datapad_2");
		if (quest_id == questRow)
		{
			if (hasObjVar(self, "fs_kickoff_stage"))
			{
				int stage = getIntObjVar(self, "fs_kickoff_stage");
				if (stage == 6)
				{
					fs_quests.advanceStage(self);
				}
			}
	}

	return SCRIPT_CONTINUE;
}

/**
 * HACK: corrects an issue where groundquest quest.task.ground.wait_for_tasks
 * used to remove the quest.wait_for_tasks objvar needed by fs_defend_wait_* tasks.
 * If player has a stuck fs_defend_wait_ quest, auto complete it for them so that
 * they receive the quest reward.
 */
void completeStuckWaitForTasks(obj_id self)
{
	if (!quests.safeHasObjVar(self, "quest.wait_for_tasks"))
	{
		if (quests.isActive(RANGED_SPEED_QUEST, self))
		{
			if (quests.isComplete("fs_defend_01", self) && quests.isComplete("fs_defend_02", self))
			{
				CustomerServiceLog("fs_quests", "completing stuck " + RANGED_SPEED_QUEST + " task for %TU", self, null);
				quests.complete(RANGED_SPEED_QUEST, self, true);
			}
		}
		if (quests.isActive(MELEE_DEFENSE_QUEST, self))
		{
			if (quests.isComplete("fs_defend_03", self) && quests.isComplete("fs_defend_04", self))
			{
				CustomerServiceLog("fs_quests", "completing stuck " + MELEE_DEFENSE_QUEST + " task for %TU", self, null);
				quests.complete(MELEE_DEFENSE_QUEST, self, true);
			}
		}
	}
}

/**
 * HACK: corrects issue where even though wait_for_tasks was completed,
 * the unlock was not granted. re-completing the quest should grant the unlock.
 */
void grantStuckBranchUnlocks(obj_id self)
{
	if (quests.isComplete("fs_defend_01", self) && quests.isComplete("fs_defend_02", self))
	{
		if (quests.isComplete(RANGED_SPEED_QUEST, self))
		{
			if (!fs_quests.hasUnlockedBranch(self, RANGED_SPEED_BRANCH))
			{
				CustomerServiceLog("fs_quests", "re-completing " + RANGED_SPEED_QUEST + " to grant stuck " + RANGED_SPEED_BRANCH
					+ " branch unlock for %TU", self, null);
				quests.complete(RANGED_SPEED_QUEST, self, true);
			}
		}
	}
	if (quests.isComplete("fs_defend_03", self) && quests.isComplete("fs_defend_04", self))
	{
		if (quests.isComplete(MELEE_DEFENSE_QUEST, self))
		{
			if (!fs_quests.hasUnlockedBranch(self, MELEE_DEFENSE_BRANCH))
			{
				CustomerServiceLog("fs_quests", "re-completing " + MELEE_DEFENSE_QUEST + " to grant stuck " + MELEE_DEFENSE_BRANCH
					+ " branch unlock for %TU", self, null);
				quests.complete(MELEE_DEFENSE_QUEST, self, true);
			}
		}
	}
}

/**
 * HACK: corrects issue where previous phase quest state was not reset fully
 * preventing player from accepting quest again in current phase.
 */
void resetStaleWaitForTasks(obj_id self)
{
	if (!fs_quests.hasQuestAccepted(self))
	{
		if (quests.isActive(RANGED_SPEED_QUEST, self))
		{
			CustomerServiceLog("fs_quests", "resetting stale active " + RANGED_SPEED_QUEST + " task for %TU", self, null);
			quests.deactivate(RANGED_SPEED_QUEST, self);
		}
		if (quests.isActive(MELEE_DEFENSE_QUEST, self))
		{
			CustomerServiceLog("fs_quests", "resetting stale active " + MELEE_DEFENSE_QUEST + " task for %TU", self, null);
			quests.deactivate(MELEE_DEFENSE_QUEST, self);
		}
	}
}
