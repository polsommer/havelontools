include library.create;
include library.utils;
include library.ai_lib;
include library.xp;
include library.group;
include library.fs_dyn_village;

trigger OnInitialize ()
{
	fs_dyn_village.getRegisteredIntegerFromClusterWideData(fs_dyn_village.CLUSTER_INT_KEY_PHASE_UID, "findCurrentPhase", self);
	return SCRIPT_CONTINUE;
}

trigger OnAttach ()
{
	fs_dyn_village.getRegisteredIntegerFromClusterWideData(fs_dyn_village.CLUSTER_INT_KEY_PHASE_UID, "findCurrentPhase", self);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id attacker)
{
	//messageTo(self, "aiCorpsePrepared", null, 1f, false);
	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/
messageHandler findCurrentPhase()
{
	if(!params.containsKey(fs_dyn_village.CLUSTER_INT_KEY_PHASE_UID))
	{
		LOG(fs_dyn_village.LOG_CHAN, "fs_quest_player::msgValidateFSQuestPhase: -> Error getting current phase from cluster data.  Potentially on wrong quest phase.");
		return SCRIPT_CONTINUE;
	}

	int curUid = params.getInt(fs_dyn_village.CLUSTER_INT_KEY_PHASE_UID);
	int curPhase = fs_dyn_village.getPhaseFromVersionUid(curUid);

	setObjVar (self, "current_phase", curPhase);

	return SCRIPT_CONTINUE;
}

messageHandler aiCorpsePrepared()
{
	obj_id corpseInventory = utils.getInventoryContainer(self);
	if ( corpseInventory == null )
		return SCRIPT_CONTINUE;

	int phase = getIntObjVar (self, "current_phase");

	if (phase == 0)
	{
		return SCRIPT_CONTINUE;
	}

	int success = 75;

	if (phase == 4)
	{
		success = 10;
	}

	int chance = rand (1,100);

	if (chance <= success)
	{
		string treasure = pickLootItem();
		obj_id item = createObject( treasure, corpseInventory, "" );
		if ( isIdValid(item) )
		{
			setSpecialResourceObjVars(treasure, item);
		}
	}


	return SCRIPT_CONTINUE;
}

string pickLootItem()
{
	string treasure = "object/tangible/loot/quest/endrine.iff";

	int which = rand (1,5);
	switch (which)
	{
		case 1:
		treasure = "object/tangible/loot/quest/ardanium_ii.iff";
		break;
		case 2:
		treasure = "object/tangible/loot/quest/endrine.iff";
		break;
		case 3:
		treasure = "object/tangible/loot/quest/ostrine.iff";
		break;
		case 4:
		treasure = "object/tangible/loot/quest/wind_crystal.iff";
		break;
		case 5:
		treasure = "object/tangible/loot/quest/rudic.iff";
		break;
	}

	return treasure;
}

void setSpecialResourceObjVars(string special, obj_id resource)
{
	if (!isIdValid(resource) || special == null || special == "")
	{
		return;
	}

	const int average = 500;

	if (special == "object/tangible/loot/quest/ardanium_ii.iff")
	{
		setObjVar (resource, "crafting_components.res_potential_energy", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_quality", getResourceValue(average));

	}
	else if (special == "object/tangible/loot/quest/wind_crystal.iff")
	{
		setObjVar (resource, "crafting_components.res_potential_energy", getResourceValue(average));
	}
	else if (special == "object/tangible/loot/quest/ostrine.iff")
	{
		setObjVar (resource, "crafting_components.res_malleability", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_quality", getResourceValue(average));
	}
	else if (special == "object/tangible/loot/quest/endrine.iff")
	{
		setObjVar (resource, "crafting_components.res_malleability", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_quality", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_toughness", getResourceValue(average));
	}
	else if (special == "object/tangible/loot/quest/rudic.iff")
	{
		setObjVar (resource, "crafting_components.res_conductivity", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_decay_resist", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_quality", getResourceValue(average));
		setObjVar (resource, "crafting_components.res_shock_resistance", getResourceValue(average));
	}
}

int getResourceValue(int average)
{
	float value = gaussRand(average, 50.0f);
	if ( value > 1000.0f )
		value = 1000.0f;
	else if ( value < 150.0f )
		value = 150.0f;
	return (int)(value);
}

