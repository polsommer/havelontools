/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        timestamp
 * Description:  Script that allows use of an item off a time stamp
 *
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.utils;
include library.player_structure;
include library.static_item;

/***** CONSTANTS *******************************************************/


const string STRING_TABLE_NAME	= "quest/force_sensitive/utils";

const string VAR_TIMESTAMP		= "item.time.timestamp";
const string VAR_REUSE_TIME		= "item.time.reuse_time";

const string VAR_BUFF_TYPE		= "item.buff.type";
const string VAR_BUFF_VALUE		= "item.buff.value";
const string VAR_BUFF_DURATION 	= "item.buff.duration";

const string[] BUFF_STRING_NAMES ={	"health",
									"strength", // unused
									"constitution",
									"action",
									"quickness", // unused
									"stamina",
									"mind",
									"focus", // unused
									"willpower"};



const int DEFAULT_REUSE_TIME	= 60*60*24*3;//Default 3 day reuse time

const int BUFF_TYPE 			= 0;		//Default buff type of Health
const int BUFF_VALUE			= 1000;		//Default buff value of 1000
const int BUFF_DURATION			= 60*60;	//Default buff duration of 1 hour

//const int NUM_OF_USES		= 50;

/***** TRIGGERS ********************************************************/

trigger OnInitialize()
{
	//start Hotfix to remove old mind buff and replace with new static item with proc and action buff
	if(hasObjVar(self, "item.buff.type"))
	{
		int buffType = getIntObjVar(self, "item.buff.type");
		if(buffType == 6)
		{
			obj_id home = getContainedBy(self);
			if(!isIdValid(home))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " was not deleted, because its container's id was null");
				return SCRIPT_CONTINUE;
			}

			obj_id newCrystal = static_item.createNewItemFunction("item_force_crystal_04_02", home);

			if(isIdValid(newCrystal))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " is contained in player's " + getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " is to be destroyed and replaced with new Crystal " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				destroyObject(self);
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal was successfully destroyed " + !exists(self) + "and replaced with " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
			}
		}
		else if(buffType == 0)
		{
			obj_id home = getContainedBy(self);
			if(!isIdValid(home))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " was not deleted, because its container's id was null");
				return SCRIPT_CONTINUE;
			}

			obj_id newCrystal = static_item.createNewItemFunction("item_force_crystal_04_01", home);

			if(isIdValid(newCrystal))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " is contained in player's " + getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " is to be destroyed and replaced with new Crystal " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				destroyObject(self);
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal was successfully destroyed " + !exists(self) + "and replaced with " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
			}
		}		
	}
	//end Hotfix to remove old mind buff and replace with new static item with proc and action buff
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	//start Hotfix to remove old mind buff and replace with new static item with proc and action buff
	if(hasObjVar(self, "item.buff.type"))
	{
		int buffType = getIntObjVar(self, "item.buff.type");
		if(buffType == 6)
		{
			obj_id home = getContainedBy(self);
			if(!isIdValid(home))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " was not deleted, because its container's id was null");
				return SCRIPT_CONTINUE;
			}

			obj_id newCrystal = static_item.createNewItemFunction("item_force_crystal_04_02", home);

			if(isIdValid(newCrystal))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " is contained in player's " + getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal (" + self + ")"+ " is to be destroyed and replaced with new Crystal " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				destroyObject(self);
				CustomerServiceLog("FSMindCrystal: ", "Old Crystal was successfully destroyed " + !exists(self) + "and replaced with " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
			}
		}
		else if(buffType == 0)
		{
			obj_id home = getContainedBy(self);
			if(!isIdValid(home))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " was not deleted, because its container's id was null");
				return SCRIPT_CONTINUE;
			}

			obj_id newCrystal = static_item.createNewItemFunction("item_force_crystal_04_01", home);

			if(isIdValid(newCrystal))
			{
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " is contained in player's " + getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal (" + self + ")"+ " is to be destroyed and replaced with new Crystal " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
				destroyObject(self);
				CustomerServiceLog("FSMindCrystal: ", "Old FS VILLAGE Focused Crystal was successfully destroyed " + !exists(self) + "and replaced with " + getStaticItemName(newCrystal) + "(" + newCrystal+ ") in "+ getFirstName(utils.getContainingPlayer(self)) + "(" + utils.getContainingPlayer(self) + ") inventory.");
			}
		}		
	}
	//end Hotfix to remove old mind buff and replace with new static item with proc and action buff

	mi.addRootMenu(menu_info_types.SERVER_MENU1, new string_id(STRING_TABLE_NAME, "use_special_effect"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	//do not allow the player to continue to use the broken buffs
	int buffType = getIntObjVar(self, "item.buff.type");
	if(buffType == 0 || buffType == 6)
		return SCRIPT_CONTINUE;

	//check/set timestamp
	if (!hasObjVar (self, VAR_TIMESTAMP))
	{
		setObjVar (self, VAR_TIMESTAMP, getGameTime());
	}
	else
	{
		int timestamp = getIntObjVar(self,VAR_TIMESTAMP);
		int current_time = getGameTime();
		int time_delta = current_time - timestamp;
		if (!hasObjVar (self, VAR_REUSE_TIME))
			setObjVar (self, VAR_REUSE_TIME, DEFAULT_REUSE_TIME);

		int reuse_time = getIntObjVar(self, VAR_REUSE_TIME);
		if (time_delta < reuse_time)
		{
			sendSystemMessage(player, new string_id(STRING_TABLE_NAME, "timer_not_up"));
			return SCRIPT_CONTINUE;
		}
	}

	if (item == menu_info_types.SERVER_MENU1)
	{			
		setObjVar (self, VAR_TIMESTAMP, getGameTime());
		//sendSystemMessageTestingOnly(player, "stuff happens here")
		applyBuff (player,self);
		//function to do stuff here

	}

	return SCRIPT_CONTINUE;
}


trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	// Display Time Remaining on Use
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	names[idx] = "reuse_time";
	int timestamp = -1;
	if (hasObjVar(self,VAR_TIMESTAMP))
		timestamp = getIntObjVar(self,VAR_TIMESTAMP);
	int current_time = getGameTime();
	int time_delta = current_time - timestamp;
	if (!hasObjVar (self, VAR_REUSE_TIME))
		setObjVar (self, VAR_REUSE_TIME, DEFAULT_REUSE_TIME);
	int reuse_time = getIntObjVar(self, VAR_REUSE_TIME);
	int time_remaining = reuse_time - time_delta;

	if (timestamp == -1 || time_remaining <= 0)
		attribs[idx] = "0";
	else
		attribs[idx] = player_structure.assembleTimeRemaining(player_structure.convertSecondsTime(time_remaining));
	idx++;
	if (idx >= names.length)
		return SCRIPT_CONTINUE;

	if (hasObjVar(self, VAR_BUFF_TYPE))
	{
		names[idx] = "examine_dot_attribute";
		attribs[idx] = BUFF_STRING_NAMES[getIntObjVar(self, VAR_BUFF_TYPE)];
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	if (hasObjVar(self, VAR_BUFF_VALUE))
	{
		names[idx] = "potency";
		attribs[idx] = "+"+getIntObjVar(self, VAR_BUFF_VALUE);
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	if (hasObjVar(self, VAR_BUFF_DURATION))
	{
		names[idx] = "duration";
		attribs[idx] = player_structure.assembleTimeRemaining(player_structure.convertSecondsTime(getIntObjVar(self, VAR_BUFF_DURATION)));
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}



/***** MESSAGEHANDLERS *************************************************/

/***** COMMANDHANDLERS *************************************************/

/***** FUNCTIONS *******************************************************/

void applyBuff (obj_id player, obj_id item)
{
	int buff_type = BUFF_TYPE;
	
	if (hasObjVar(item, VAR_BUFF_TYPE))
		buff_type = getIntObjVar(item, VAR_BUFF_TYPE);

	//-----do not let the player use old broken legacy buffs.
	if(buff_type == 0 || buff_type == 6)
		return;

	int buff_value = BUFF_VALUE;
	if (hasObjVar(item, VAR_BUFF_VALUE))
		buff_value = getIntObjVar(item, VAR_BUFF_VALUE);

	int buff_duration = BUFF_DURATION;
	if (hasObjVar(item, VAR_BUFF_DURATION))
		buff_duration = getIntObjVar(item, VAR_BUFF_DURATION);

	boolean wasBuffApplied = false;
	string buff_class = "medical_enhance_";
	string buff_type_name = BUFF_STRING_NAMES[buff_type];
	if (buff_type == 6)
		buff_class = "performance_enhance_dance_";
	if (buff_type == 7)
		buff_class = "performance_enhance_music_";
	if (buff_type == 8)
		buff_class = "performance_enhance_music_";



	if(wasBuffApplied = !hasAttribModifier(player, buff_class + buff_type_name))
		addAttribModifier(player, buff_class + buff_type_name , buff_type, buff_value, buff_duration, 0.0f, 10.0f, true, false, true);

	if (wasBuffApplied)
	{
		sendSystemMessage(player, new string_id(STRING_TABLE_NAME, "buff_applied"));
	}
	else
	{
		sendSystemMessage(player, new string_id(STRING_TABLE_NAME, "have_buff"));
		removeObjVar (item, VAR_TIMESTAMP);
	}
}
