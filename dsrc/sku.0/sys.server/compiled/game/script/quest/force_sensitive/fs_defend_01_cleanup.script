include library.factions;
include library.fs_quests;
include library.quests;

messageHandler msgQuestAbortPhaseChange()
{
	if(! quests.isComplete("fs_defend_01", self) || !quests.isComplete("fs_defend_02", self))
	{
		CustomerServiceLog("fs_quests", "failing and clearing incomplete Ranged Speed quests for %TU", self, null);

		// indented to show parent-child relationship

		quests.complete("fs_defend_set_faction", self, false);
			quests.complete("fs_defend_01", self, false);
			quests.complete("fs_defend_02", self, false);
			quests.complete("fs_defend_wait_01", self, false);
				quests.complete("fs_defend_reward_01", self, false);
					quests.complete("fs_defend_reward_02", self, false);

		clearCompletedQuest(self, quests.getQuestId("fs_defend_set_faction"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_01"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_02"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_wait_01"));
				clearCompletedQuest(self, quests.getQuestId("fs_defend_reward_01"));
					clearCompletedQuest(self, quests.getQuestId("fs_defend_reward_02"));

		factions.setFactionStanding(self, "sith_shadow_nonaggro", 0);
	}

	if(! quests.isComplete("fs_defend_03", self) || !quests.isComplete("fs_defend_04", self))
	{
		CustomerServiceLog("fs_quests", "failing and clearing incomplete Melee Defense quests for %TU", self, null);

		// indented to show parent-child relationship

		quests.complete("fs_defend_set_faction_02", self, false);
			quests.complete("fs_defend_03", self, false);
			quests.complete("fs_defend_04", self, false);
			quests.complete("fs_defend_wait_02", self, false);
				quests.complete("fs_defend_reward_03", self, false);
					quests.complete("fs_defend_reward_04", self, false);

		clearCompletedQuest(self, quests.getQuestId("fs_defend_set_faction_02"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_03"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_04"));
			clearCompletedQuest(self, quests.getQuestId("fs_defend_wait_02"));
				clearCompletedQuest(self, quests.getQuestId("fs_defend_reward_03"));
					clearCompletedQuest(self, quests.getQuestId("fs_defend_reward_04"));

		factions.setFactionStanding(self, "sith_shadow_nonaggro", 0);
	}

	// remove destroy multi entries for the quest
	if(hasObjVar(self, "quest.destroy_multi"))
	{
		Vector objvarsToRemove = new Vector();
		obj_var_list objvarList = getObjVarList(self, "quest.destroy_multi");
		int numItems = objvarList.getNumItems();
		int iter = 0;
		for(iter= 0; iter < numItems; ++iter)
		{
			obj_var objvar = objvarList.getObjVar(iter);
			String[] questNames = objvar.getStringArrayData();
			Vector newArray = new Vector();
			int questIter = 0;
			for(questIter = 0; questIter < questNames.length; ++ questIter)
			{
				if(questNames[questIter] != "fs_defend_01" &&
				                          questNames[questIter] != "fs_defend_02" &&
				                          questNames[questIter] != "fs_defend_03" &&
				   questNames[questIter] != "fs_defend_04")
				{
					newArray.add(questNames[questIter]);
				}
			}
			if(newArray.size() > 0)
			{
				String[] updateNames = new String[newArray.size()];
				newArray.toArray(updateNames);
				setObjVar(self, "quest.destroy_multi." + objvar.getName(), updateNames);
			}
			else
			{
				objvarsToRemove.add("quest.destroy_multi." + objvar.getName());
			}
		}
		if(objvarsToRemove.size() > 0)
		{
			java.util.Iterator i = objvarsToRemove.iterator();
			while(i.hasNext())
			{
				String name = (String)i.next();
				removeObjVar(self, name);
			}
		}
	}
	detachScript(self, "quest.force_sensitive.fs_defend_01_cleanup");
	
	return SCRIPT_CONTINUE;
}

trigger OnQuestActivated(int questRow)
{
	String questName = quests.getDataEntry(questRow, "NAME");

	if (questName == null)
	{
		return SCRIPT_CONTINUE;
	}

	if(questName == "fs_defend_reward_01" || questName == "fs_defend_reward_03")
	{
		factions.setFactionStanding(self, "sith_shadow_nonaggro", 5000);

		fs_quests.setQuestCompleted(self, questName);

		detachScript(self, "quest.force_sensitive.fs_defend_01_cleanup");
	}
	return SCRIPT_CONTINUE;
}

