/**
 * Copyright (c)2000-2004 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        fs_oldman_initial.script
 * Description:  Force Sensitive initial quest giver
 * @author       $Author:$
 * @version      $Revision:$
 */

include library.ai_lib;
include library.prose;
include library.chat;
include library.quests;
include library.fs_quests;

trigger OnAttach()
{
	createTriggerVolume("fs_oldman_messagerange", 12, true);
	messageTo(self, "approach", null, 3, false);  // Wait 3 seconds and approach the player
	return SCRIPT_CONTINUE;
}	

messageHandler approach()
{
	obj_id owner = null;
	owner = getObjIdObjVar(self, "old_man_initial.holder");
	setMovementRun(self);
	
	if ( (isIdValid(owner)) && (exists(owner)) )
	{
		ai_lib.aiFollow(self, owner);
	}
	messageTo( self, "approachFail", null, 180, false ); // 180 seconds he cleans up if he hasnt made contact
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id target )
{
	if (volumeName == "fs_oldman_messagerange")
	{
		obj_id owner = getObjIdObjVar(self, "old_man_initial.holder");
		if (owner == target)
		{
			if (!hasObjVar(self, "contact"))
			{
				setObjVar(self, "contact", 1);
				messageTo( self, "timeout", null, 180, false );  
				prose_package pp = prose.getPackage(new string_id("quest/force_sensitive/intro", "oldman_greeting"), target);
				chat.publicChat(self, target, null, null, pp);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler approachFail()
{
	if (hasObjVar(self, "contact"))
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id owner = null;
	owner = getObjIdObjVar(self, "old_man_initial.holder");
	if ( (isIdValid(owner)) && (exists(owner)) )
	{
		fs_quests.oldManDepart(owner, self, 1);
	}
	return SCRIPT_CONTINUE;
}

messageHandler timeout()
{
	obj_id owner = null;
	owner = getObjIdObjVar(self, "old_man_initial.holder");
	
	if ( (isIdValid(owner)) && (exists(owner)) )
	{
		sendSystemMessage(owner, new string_id("quest/force_sensitive/intro", "leave"));
		fs_quests.oldManDepart(owner, self, 1);
	}
	else
	{
		messageTo( self, "cleanUp", null, 1, false );
	}	
	
	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

