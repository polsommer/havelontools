include library.fs_dyn_village;
include library.fs_quests;
include library.prose;
include library.quests;
include library.utils;

const string_id MSG_FIND_THEATER_WAYPOINT		= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_find_theater_waypoint");
const string_id MSG_QUEST_FINISHED				= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_finished");
const string_id MSG_QUEST_CONTINUE			 	= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_continue");
const string_id MSG_QUEST_FAILED			 	= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_failed");
const string_id MSG_QUEST_FAIL_PHASE_DONE		= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_fail_phase_done");
const string_id MSG_QUEST_FAIL_INCAP			= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_fail_incap");
const string_id MSG_QUEST_FAIL_LOGOUT			= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_fail_logout");
const string_id MSG_QUEST_ERROR_ABORTED			= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_error_aborted");
const string_id MSG_QUEST_ERROR_THEATER_FAIL	= new string_id("quest/force_sensitive/fs_reflex", "msg_phase_01_quest_error_theater_fail");

const string QUEST_OBJVAR						= "quest.fs_reflex1";
const string RESCUED_OBJVAR						= QUEST_OBJVAR + ".rescued";
const string IN_PROGRESS_OBJVAR					= QUEST_OBJVAR + ".in_progress";
const string CONTINUE_OBJVAR					= QUEST_OBJVAR + ".continue";
const string FAILED_OBJVAR						= QUEST_OBJVAR + ".failed";
const string MASTER_OBJVAR						= QUEST_OBJVAR + ".master";
const string ABORTED_OBJVAR						= QUEST_OBJVAR + ".aborted";

messageHandler msgQuestAbortPhaseChange() {

	sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);

	resetQuest(self);
	removeObjVar(self, QUEST_OBJVAR);

	detachScript(self, "quest.force_sensitive.fs_reflex1_player");

	if(hasTheaterAssigned(self))
		unassignTheaterFromPlayer(self);

	return SCRIPT_CONTINUE;
}

/*
trigger OnLogin() {

	fs_dyn_village.getRegisteredIntegerFromClusterWideData(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE, "handleGetPhaseResponse", self);

//	if(hasObjVar(self, MASTER_OBJVAR)) {
//
//		obj_id master = getObjIdObjVar(self, MASTER_OBJVAR);
//
//		if(!isIdValid(master)) {
//
//			fs_dyn_village.getRegisteredObjIdFromClusterWideData(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "handleMasterIdResponse", self);
//
//			return SCRIPT_CONTINUE;
//		}
//
//		int phase = fs_dyn_village.getCurrentPhaseAuth(master);
//
//		if(phase != 1) {
//
//			sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);
//			resetQuest(self);
//			removeObjVar(self, QUEST_OBJVAR);
//			detachScript(self, "quest.force_sensitive.fs_reflex1_player");
//
//			return SCRIPT_CONTINUE;
//		}
//
//	} else {
//
//		fs_dyn_village.getRegisteredObjIdFromClusterWideData(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "handleMasterIdResponse", self);
//	}

	return SCRIPT_CONTINUE;
}

messageHandler handleGetPhaseResponse() {

	if(!params.containsKey(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE))
		return SCRIPT_CONTINUE;

	int phase = params.getInt(fs_dyn_village.CLUSTER_INT_KEY_CUR_PHASE);

	if(phase != 1) {

		sendSystemMessage(self, MSG_QUEST_FAIL_PHASE_DONE);
		resetQuest(self);
		removeObjVar(self, QUEST_OBJVAR);
		detachScript(self, "quest.force_sensitive.fs_reflex1_player");

		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}
*/

trigger OnInitialize()
{
	// If the player was in the middle of a quest, he must start over .
	if (hasObjVar(self, IN_PROGRESS_OBJVAR))
	{
		if(hasObjVar(self, "quest.fs_reflex_rescue_quest_03.escort_target")) {

			obj_id escort = getObjIdObjVar(self, "quest.fs_reflex_rescue_quest_03.escort_target");

			destroyObject(escort);
		}

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, FAILED_OBJVAR, 1);

		obj_id theater = getLastSpawnedTheater(self);

		if(isIdValid(theater))
			destroyObject(theater);

		unassignTheaterFromPlayer(self);

		sendSystemMessage(self, MSG_QUEST_FAIL_LOGOUT);

		resetQuest(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer) {

	if (hasObjVar(self, IN_PROGRESS_OBJVAR))
	{
		if(hasObjVar(self, "quest.fs_reflex_rescue_quest_03.escort_target")) {

			obj_id escort = getObjIdObjVar(self, "quest.fs_reflex_rescue_quest_03.escort_target");

			destroyObject(escort);
		}

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, FAILED_OBJVAR, 1);

		obj_id theater = getLastSpawnedTheater(self);

		if(isIdValid(theater))
			destroyObject(theater);

		unassignTheaterFromPlayer(self);

		sendSystemMessage(self, MSG_QUEST_FAIL_INCAP);

		resetQuest(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnQuestActivated(int questRow) {

	string questName = quests.getDataEntry(questRow, "NAME");

	if (questName == null) {
		return SCRIPT_CONTINUE;
	}

	if(questName.equals("fs_reflex_rescue_quest_01")) {

		setObjVar(self, IN_PROGRESS_OBJVAR, 1);

	} else if(questName.equals("fs_reflex_rescue_quest_03")) {

		if(hasObjVar(self, "quest.fs_reflex_rescue_quest_02.waypoint")) {

			obj_id waypoint = getObjIdObjVar(self, "quest.fs_reflex_rescue_quest_02.waypoint");
			if(isIdValid(waypoint))
				destroyWaypointInDatapad(waypoint, self);
		}

	} else if(questName.equals("fs_reflex_rescue_quest_05")) {

		int rescued = 0;

		if(hasObjVar(self, RESCUED_OBJVAR))
			rescued = getIntObjVar(self, RESCUED_OBJVAR);

		rescued++;

		if(rescued >= 5) {

			finishQuest(self, questName);

		} else {

			setObjVar(self, RESCUED_OBJVAR, rescued);
			continueQuest(self, questName, rescued);
		}

	} else if(questName.equals("fs_reflex_rescue_quest_06")) {

		sendSystemMessage(self, MSG_QUEST_FAILED);

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, FAILED_OBJVAR, 1);

		resetQuest(self);

	} else if(questName.equals("fs_reflex_rescue_quest_07")) {

		sendSystemMessage(self, MSG_QUEST_ERROR_ABORTED);

		removeObjVar(self, IN_PROGRESS_OBJVAR);
		setObjVar(self, ABORTED_OBJVAR, 1);

		resetQuest(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string locationName) {

	if(locationName.equals("fs_reflex_rescue_quest_01_waypoint")) {

		sendSystemMessage(self, MSG_FIND_THEATER_WAYPOINT);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleMasterIdResponse() {

	obj_id master = params.getObjId(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER);

	if(isIdValid(master))
		setObjVar(self, MASTER_OBJVAR, master);

	return SCRIPT_CONTINUE;
}

void continueQuest(obj_id self, string questName, int rescued) {

	int left = (5 - rescued);

	prose_package pp = prose.getPackage(MSG_QUEST_CONTINUE, left);
	sendSystemMessageProse(self, pp);

	removeObjVar(self, IN_PROGRESS_OBJVAR);
	setObjVar(self, CONTINUE_OBJVAR, 1);

	resetQuest(self);
}

void finishQuest(obj_id self, string questName) {

	sendSystemMessage(self, MSG_QUEST_FINISHED);

	removeObjVar(self, QUEST_OBJVAR);

	quests.complete(questName, self, true);

	fs_quests.unlockBranch(self, "force_sensitive_enhanced_reflexes_survival");

	fs_quests.setQuestCompleted(self, "fs_reflex1");

	detachScript(self, "quest.force_sensitive.fs_reflex1_player");

	// GIVE REWARD HERE
	// Reward coded quick add by BNorris
	obj_id createdObject = null;
	createdObject = createObjectInInventoryAllowOverload("object/tangible/item/quest/force_sensitive/fs_sculpture_3.iff", self);
	//END Reward Code

	obj_id theater = getLastSpawnedTheater(self);

	if(isIdValid(theater))
		destroyObject(theater);
}

void resetQuest(obj_id self) {

	for(int i = 0; i <= 7; i++) {

		string name = "fs_reflex_rescue_quest_0" + i;
		int questId = quests.getQuestId(name);

		if(quests.isComplete(name, self)) {

			clearCompletedQuest(self, questId);

		} else if(quests.isActive(name, self)) {

			quests.deactivate(name, self);
		}

		if (hasObjVar(self, "quest." + name + ".waypoint"))
		{
			obj_id waypoint = getObjIdObjVar(self, "quest." + name + ".waypoint");
			if (isIdValid(waypoint))
				destroyWaypointInDatapad(waypoint, self);
		}
		if (hasObjVar(self, "quest." + name))
			removeObjVar(self, "quest." + name);

		if (hasObjVar(self, name))
			removeObjVar(self, name);
	}

	obj_id theater = getLastSpawnedTheater(self);

	if(isIdValid(theater))
		destroyObject(theater);
}

trigger OnPlayerTheaterFail(string datatable, string name)
{
	if (datatable.equals("datatables/theater/quest/fs_quest/fs_reflex1.iff"))
	{
		LOG("newquests", "REFLEX1: theater creation failed - attempting to recover");

		int questId = quests.getQuestId("fs_reflex_rescue_quest_01");
		clearCompletedQuest(self, questId);
		if (quests.isActive("fs_reflex_rescue_quest_01", self))
			quests.deactivate("fs_reflex_rescue_quest_01", self);

		if(hasObjVar(self, "quest.fs_reflex_rescue_quest_01.waypoint")) {

			LOG("newquests", "REFLEX1: theater creation failed - deleting waypoint");

			obj_id waypoint = getObjIdObjVar(self, "quest.fs_reflex_rescue_quest_01.waypoint");
			if(isIdValid(waypoint))
				destroyWaypointInDatapad(waypoint, self);
		}

		sendSystemMessage(self, MSG_QUEST_ERROR_THEATER_FAIL);

		LOG("newquests", "REFLEX1: theater creation failed - reactivating quest");

		messageTo(self, "handleReactivateFailedTask", null, 1.0f, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleReactivateFailedTask() {

	quests.activate("fs_reflex_rescue_quest_01", self, null);

	return SCRIPT_CONTINUE;
}
