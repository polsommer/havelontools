include library.groundquests;
include library.utils;

trigger OnAttach()
{
	messageTo(self, "handleRecordOriginalRotation", null, 3, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	messageTo(self, "handleRecordOriginalRotation", null, 3, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleRecordOriginalRotation()
{
	if ( !hasObjVar(self, "orignalYaw") )
	{
		float originalYaw = getYaw(self);
		setObjVar(self, "orignalYaw", originalYaw);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(item == menu_info_types.ITEM_USE)
	{
		if( hasScript(player, "quest.task.ground.retrieve_item") || hasScript(player, "quest.task.ground.wave_event_player"))
		{
			if( groundquests.playerNeedsToRetrieveThisItem(player, self, "retrieve_item") || 
				groundquests.playerNeedsToRetrieveThisItem(player, self, "wave_event"))
			{
				if ( utils.hasScriptVar(self, "waveEventCurrentWave") )
				{
					int wave = utils.getIntScriptVar(self, "waveEventCurrentWave");
					if ( wave > 0 )
					{
						return SCRIPT_CONTINUE;
					}
				}
				
				if ( hasObjVar(self, "orignalYaw") )
				{
					if ( !utils.hasScriptVar(self, "alreadyRotated") )
					{
						obj_id[] players = getPlayerCreaturesInRange(getLocation(self), 40.0f);
						if ( players != null && players.length > 0 )
						{
							playClientEffectObj(players, "sound/item_heavy_wood_door_open.snd", self, "");
						}
						setYaw(self, 0.0f);
						utils.setScriptVar(self, "alreadyRotated", 1);
						messageTo(self, "handleRestoreOriginalRotation", null, 9, false);
					}
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleRestoreOriginalRotation()
{
	if ( hasObjVar(self, "orignalYaw") )
	{
		float originalYaw = getFloatObjVar(self, "orignalYaw");
		
		obj_id[] players = getPlayerCreaturesInRange(getLocation(self), 40.0f);
		if ( players != null && players.length > 0 )
		{
			playClientEffectObj(players, "sound/item_heavy_wood_door_close.snd", self, "");
		}
		utils.removeScriptVar(self, "alreadyRotated");
		setYaw(self, originalYaw);
	}
	return SCRIPT_CONTINUE;
}

