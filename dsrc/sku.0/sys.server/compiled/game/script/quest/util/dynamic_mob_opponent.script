/**
 * Copyright (c) ©2000-2003 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        dynamic_mob_opponent.script
 * Description:  dynamic_mob_opponent logic
 * @author       $Author: jhaskell $
 * @version      $Revision: #1 $
 */


/*
This is a script used to dynamically change an enemy MOB or NPC level to match the player's combat level.
*/

//------------------------------------------------
// Includes
//------------------------------------------------
include library.ai_lib;
include library.anims;
include library.chat;
include library.create;
include library.groundquests;
include library.group;
include library.prose;
include library.trial;
include library.utils;


//------------------------------------------------
// CONSTANTS
//------------------------------------------------
const string CLIENT_EFFECT			= "appearance/pt_smoke_puff.prt";
const string FAIL_SIGNAL			= "fail_signal";
const string CREATURE_TABLE 			= "datatables/mob/creatures.iff";
const string STAT_BALANCE_TABLE 		= "datatables/mob/stat_balance.iff";


//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	CustomerServiceLog("quest", "dynamic_mob_opponent.OnAttach() Attempting to spawn and modify wave event dynamic enemy.");
	playClientEffectObj(self, CLIENT_EFFECT, self, "");
	messageTo(self, "setDynamicDataOnMob", null, 1, false);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitateTarget(obj_id victim)
{
	CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() Dynamic Enemy Incapacitated a target.");
	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("quest", "dynamic_mob_opponent.setDynamicDataOnMob() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}

	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() FAILED to find playerEnemy script variable.");
		return SCRIPT_CONTINUE;
	}
		
	if(victim != playerEnemy)
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() Dynamic Enemy just killed a player ( "+victim+" )that was not the player that spawned the dynamic mob.");
 		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() Dynamic Enemy has killed the spawning player: "+playerEnemy);
	
	string signal = getStringObjVar(self, FAIL_SIGNAL);
	if(signal == null|| signal.length() <= 0)
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() FAILED to find signal objvar. This is likely a designer error.");
	}

	CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() Dynamic Enemy sent quest signal to player. Signal was: "+signal);

	groundquests.sendSignal(playerEnemy, signal);
	messageTo(parent, "cleanupEvent", null, 2, false);
 	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{ 	

 	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{

	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if(ai_lib.isDead(self))
		return SCRIPT_CONTINUE;
		
	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnExitedCombat() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}
	
	string signal = getStringObjVar(self, FAIL_SIGNAL);
	if(signal == null|| signal.length() <= 0)
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnExitedCombat() FAILED to find signal objvar. This is likely a designer error.");
	}

	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnIncapacitateTarget() FAILED to find playerEnemy script variable.");
		return SCRIPT_CONTINUE;
	}
		
	CustomerServiceLog("quest", "dynamic_mob_opponent.OnExitedCombat() Dynamic Enemy sent quest signal to player. Signal was: "+signal);

	groundquests.sendSignal(playerEnemy, signal);
	messageTo(parent, "cleanupEvent", null, 2, false);
	return SCRIPT_CONTINUE;
}
//------------------------------------------------
// MESSAGE HANDLERS
//------------------------------------------------
messageHandler setDynamicDataOnMob()
{
	obj_id parent = getObjIdObjVar(self, trial.PARENT);
	if(!isIdValid(parent) || !exists(parent))
	{
		destroyObject(self);
		CustomerServiceLog("quest", "dynamic_mob_opponent.setDynamicDataOnMob() FAILED to find parent object.");
		return SCRIPT_CONTINUE;
	}
	
	CustomerServiceLog("quest", "dynamic_mob_opponent.setDynamicDataOnMob() Dynamic Mob has parent: "+parent);	
	obj_id playerEnemy = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if(!isIdValid(playerEnemy) || !exists(playerEnemy))
	{
		messageTo(parent, "cleanupEvent", null, 2, false);
		CustomerServiceLog("quest", "dynamic_mob_opponent.OnAttach() FAILED to find player enemy.");
		return SCRIPT_CONTINUE;
	}
	
	int mobLevel = getLevel(playerEnemy);
	if(mobLevel <= 0)
	{
		CustomerServiceLog("quest", "dynamic_mob_opponent.setDynamicDataOnMob() Player level was less than or equal to 0. Making Dynamic Mob level 5");		
		mobLevel = 5;
	}	
	CustomerServiceLog("quest", "dynamic_mob_opponent.setDynamicDataOnMob() Dynamic Mob level is now: "+mobLevel);		

	/*
	IF YOU WANT TO ADD A MULTIPLIER to make the mob a higher or lower level than the player
	place objvars on the mob using the creature table, then do your math here.  Likewise, if you'd like to 
	adjust the difficulty or mob level for entertainers or traders, you'll need to add the logic.
	*/
	//If you are initializing a creature, you NEED this objvar
	setObjVar(self, create.INITIALIZE_CREATURE_DO_NOT_SCALE_OBJVAR, 1);	
	//This is where the mob damage min/max is overwritten
	string creatureName = getStringObjVar(self, "creature_type");
	if(creatureName != null && creatureName.length() > 0)
	{
		dictionary creatureDict = utils.dataTableGetRow(CREATURE_TABLE, creatureName);
		if(creatureDict != null)
		{
			create.initializeCreature (self, creatureName, creatureDict, mobLevel);
		}
	}
	
	setInvulnerable(self, false);
	clearCondition(self, CONDITION_CONVERSABLE);
	startCombat(self, playerEnemy);

	return SCRIPT_CONTINUE;

}