include library.groundquests;
include library.money;
include library.weapons;
include library.utils;

const string STF						= "ep3/sidequests";
const string_id ENTER_CODE					= new string_id(STF, "enter_code");
const string_id UNLOCKED					= new string_id(STF, "unlocked");
const string_id UNKNOWN_CODE				= new string_id(STF, "unknown_code");
const string_id INCORRECT_CODE				= new string_id(STF, "incorrect_code");
const string_id UNLOCK						= new string_id(STF, "unlock");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, ENTER_CODE );

	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid == null )
		{
			return SCRIPT_CONTINUE;
		}

		mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if(	groundquests.isTaskActive(player, "ep3_kachirho_destroyed_camp", "unlockContainer"))
		{
			if(!utils.hasScriptVar(player, "lockbox.pid"))
				keypad ( player );
			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, UNKNOWN_CODE);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

void keypad( obj_id player )
{
	obj_id self = getSelf();
	int pid = createSUIPage ("Script.Keypad", self, player, "KeypadCallback");
	utils.setScriptVar(player, "lockbox.pid", pid);
	subscribeToSUIProperty(pid, "result.numberBox", "localtext");
	subscribeToSUIProperty(pid, "buttonEnter", "ButtonPressed");
	setSUIProperty(pid, "buttonKeyCard", "enabled", "false");
	setSUIProperty(pid, "buttonSlice", "enabled", "false");

	showSUIPage (pid);

	return;
}

messageHandler KeypadCallback()
{
	string result = params.getString("result.numberBox" + "." + "localtext");
	string button = params.getString("buttonEnter.ButtonPressed");
	obj_id player = params.getObjId ("player");

	if (!isIdValid(player))
	{
		utils.removeScriptVarTree(player,"lockbox");
		return SCRIPT_OVERRIDE;
	}

	if ( button == null )
	{
		utils.removeScriptVarTree(player,"lockbox");
		button = "none";
	}

	if ( result == null )
	{
		utils.removeScriptVarTree(player,"lockbox");
		result = "0";
	}

	string passkey = getStringObjVar (self, "passcode");

	if (passkey == null || passkey == "")
	{
		passkey = "nothing";
	}

	if (button == "enter")
	{
		//debugSpeakMsg (self, "Passkey was " + passkey);
		if (passkey == result)
		{
			sendSystemMessage(player, UNLOCKED);
			grantReward(player);
			utils.removeScriptVarTree(player,"lockbox");
			return SCRIPT_CONTINUE;
		}
		else
		{
			utils.removeScriptVarTree(player,"lockbox");
			sendSystemMessage(player, INCORRECT_CODE);
		}
	}
	return SCRIPT_CONTINUE;
}

void grantReward(obj_id player)
{
	obj_id playerInv = utils.getInventoryContainer(player);
	groundquests.sendSignal(player, "codeEntered");
	money.bankTo(money.ACCT_NEW_PLAYER_QUESTS, player, 10000);
	weapons.createWeapon("object/weapon/ranged/pistol/pistol_jawa.iff", playerInv, 1, 1, 1, 1);
}