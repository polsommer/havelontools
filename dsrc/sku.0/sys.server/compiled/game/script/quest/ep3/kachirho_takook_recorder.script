include library.groundquests;
include library.chat;
include library.attrib;
include library.utils;
include library.create;

const string STF									= "ep3/sidequests";
const string_id LISTEN								= new string_id(STF, "takook_recorder_listen");
const string_id CLICK								= new string_id(STF, "takook_recorder_click");

trigger OnAttach()
{
	setRecorderAttributes(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	setRecorderAttributes(self);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, LISTEN );

	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid == null )
		{
			return SCRIPT_CONTINUE;
		}

		mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if(	groundquests.isTaskActive(player, "ep3_kachirho_missing_son", "talkToTakook"))
		{
			groundquests.grantQuest ( player, "ep3_kachirho_takook_comm" );
			groundquests.sendSignal ( player, "takookTale");
			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, CLICK);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

void setRecorderAttributes(obj_id self)
{
	createTriggerVolume( "blink_range", 5, true );
	setAttributeInterested( self, attrib.ALL );
	return;
}

messageHandler handleReset()
{
	obj_id lightParticle = params.getObjId("lightParticle");
	destroyObject(lightParticle);
	utils.removeScriptVar(self, "blinking");
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id who )
{
	if(utils.hasScriptVar(self, "blinking"))
	{
		return SCRIPT_CONTINUE;
	}

	if (volumeName == "blink_range")
	{
		if(groundquests.isTaskActive(who, "ep3_kachirho_missing_son", "talkToTakook"))
		{
			location here = getLocation (self);
			obj_id blinkLight = create.object("object/static/particle/pt_light_blink_green.iff", here);
			utils.setScriptVar(self, "blinking", 1);
			dictionary light = new dictionary();
			light.put ("lightParticle", blinkLight );
			messageTo(self, "handleReset", light, 15f, false);
		}
	}
	return SCRIPT_CONTINUE;
}