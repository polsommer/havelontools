include library.groundquests;
include library.money;
include library.create;
include library.pet_lib;
include library.utils;

const string STF						= "ep3/sidequests";
const string_id HATCH_EGG				= new string_id(STF, "hatch_egg");
const string_id EGG_HATCHED				= new string_id(STF, "egg_hatched");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, HATCH_EGG );
		return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		string controlTemplate = "object/intangible/pet/varactyl.iff";
		obj_id datapad = utils.getPlayerDatapad( player );
		obj_id petControlDevice = createObject( controlTemplate, datapad, "");

		setObjVar( petControlDevice, "pet.creatureName", "ep3_qst_reward_varactyl" );
		attachScript( petControlDevice, "ai.pet_control_device" );
		setName( petControlDevice, "(varactyl)" );
		int petType = pet_lib.PET_TYPE_AGGRO;
		setObjVar( petControlDevice, "ai.pet.type", petType );
		setObjVar( petControlDevice, "ai.petAdvance.growthStage", 1);
		int level = create.calcCreatureLevel("ep3_qst_reward_varactyl");
		setObjVar(petControlDevice, "ai.petAbility.toBeEarned", pet_lib.getMaxAbilitySlots(level));
		setObjVar(petControlDevice, "ai.petAbility.available", 0);

		sendSystemMessage(player, EGG_HATCHED);

		pet_lib.createPetFromData(petControlDevice);
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}