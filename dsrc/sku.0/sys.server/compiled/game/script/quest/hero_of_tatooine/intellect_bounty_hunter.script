include library.badge;
include library.chat;
include library.groundquests;
include library.sui;
include library.utils;

const string MARK_OF_INTELLECT			= "object/tangible/loot/quest/hero_of_tatooine/mark_intellect.iff";
const string SPAWNER_OBJVAR				= "quest.hero_of_tatooine.intellect.spawner";
const string SPAWNER_CONTROLLER			= SPAWNER_OBJVAR + ".controller";
const string SPAWNER_COMPLETE			= SPAWNER_OBJVAR + ".complete";
const string INTELLECT_OBJVAR			= "quest.hero_of_tatooine.intellect";
const string INTELLECT_COMPLETE			= INTELLECT_OBJVAR + ".complete";
const string INTELLECT_FAILED			= INTELLECT_OBJVAR + ".failed";

const string_id BH_WIN					= new string_id("quest/hero_of_tatooine/intellect_liar", "bh_win");
const string_id BH_LOSE					= new string_id("quest/hero_of_tatooine/intellect_liar", "bh_lose");
const string_id INTELLECT_INV_FULL		= new string_id("quest/hero_of_tatooine/system_messages", "intellect_inv_full");

const string_id NPC_NAME         	 	= new string_id ("quest/hero_of_tatooine/npc_names", "tearfin");

trigger OnAttach()
{
	setName( self, "" );
	setName( self, NPC_NAME );
	return SCRIPT_CONTINUE;
}

messageHandler handleImplicationSui() {

	obj_id player = sui.getPlayerId(params);

	if(!isIdValid(player))
		return SCRIPT_CONTINUE;

	int idx = sui.getListboxSelectedRow(params);
	int bp = sui.getIntButtonPressed(params);

	if(bp == sui.BP_CANCEL)
		return SCRIPT_CONTINUE;

	if(idx == -1)
		return SCRIPT_CONTINUE;

	if(!utils.hasScriptVar(player, "quest.hero_of_tatooine.intellect.liar")) {

		if(isGod(player))
			sendSystemMessageTestingOnly(self, "[TESTING] You don't have a script var identifying the correct liar. This is a bug. You automatically win!");

		// Something went wrong, the player doesn't have the script var
		// so he automatically wins
		chat.publicChat(self, player, BH_WIN);
		puzzleSuccess(self, player);

		return SCRIPT_CONTINUE;
	}

	int liar = utils.getIntScriptVar(player, "quest.hero_of_tatooine.intellect.liar");

	if(idx == liar) {

		chat.publicChat(self, player, BH_WIN);
		puzzleSuccess(self, player);

	} else {

		chat.chat(self, player, BH_LOSE, chat.ChatFlag_targetOnly);
		puzzleFailure(self, player);
	}

	return SCRIPT_CONTINUE;
}

void puzzleSuccess(obj_id self, obj_id player) 
{
	obj_id mark_intellect = createObjectInInventoryAllowOverload(MARK_OF_INTELLECT, player);

	removeObjVar(player, INTELLECT_OBJVAR);

	if(!badge.hasBadge(player, "poi_twoliars"))
	{
		badge.grantBadge(player, "poi_twoliars");
	
		groundquests.sendSignal(player, "hero_of_tatooine_main_intellect");

		CustomerServiceLog("quest", "HERO OF TATOOINE - %TU has acquired the Mark of Intellect", player);

		setObjVar(player, INTELLECT_COMPLETE, 1);
	}

	if(!isIdValid(mark_intellect)) {

		sendSystemMessage(player, INTELLECT_INV_FULL);
		setObjVar(player, "quest.hero_of_tatooine.owed.intellect", 1);
	}

	obj_id control = getObjIdObjVar(self, SPAWNER_CONTROLLER);

	if(!isIdValid(control))
		return;

	setObjVar(self, SPAWNER_COMPLETE, 1);

	messageTo(control, "handleComplete", null, 0.0f, false);
}

void puzzleFailure(obj_id self, obj_id player) {

	removeObjVar(player, INTELLECT_OBJVAR);

	setObjVar(player, INTELLECT_FAILED, self);
}
