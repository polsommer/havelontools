include library.utils;

const string ALTRUISM_OBJVAR 			= "quest.hero_of_tatooine.altruism";
const string ALTRUISM_COMPLETE			= ALTRUISM_OBJVAR + ".complete";
const string ALTRUISM_CONTROL			= ALTRUISM_OBJVAR + ".control";

const string_id NO_REASON				= new string_id("quest/hero_of_tatooine/system_messages", "altruism_no_reason");
const string_id ALREADY_OPEN			= new string_id("quest/hero_of_tatooine/system_messages", "altruism_already_open");
const string_id NOT_WISE_EXAMINE		= new string_id("quest/hero_of_tatooine/system_messages", "altruism_not_wise_examine");
const string_id EXPLOSIVE_SET			= new string_id("quest/hero_of_tatooine/system_messages", "altruism_explosive_set");
const string_id EXPLOSIVE_REMOVED		= new string_id("quest/hero_of_tatooine/system_messages", "altruism_explosive_removed");

trigger OnAboutToOpenContainer(obj_id who) {

	obj_id owner = getOwner(self);

	if (isIdValid(owner)) {

		if(owner != who) {

			if(utils.hasScriptVar(self, "hasExplosive")) {
				sendSystemMessage(who, NOT_WISE_EXAMINE);
			}
			else {
				sendSystemMessage(who, ALREADY_OPEN);
			}

			return SCRIPT_OVERRIDE;
		}
	}

	setOwner(self, who);

	return SCRIPT_CONTINUE;
}

trigger OnClosedContainer(obj_id who) {

	if(!utils.hasScriptVar(self, "hasExplosive"))
		setOwner(self, obj_id.NULL_ID);

	return SCRIPT_CONTINUE;
}

trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item) {

	if(!hasObjVar(transferer, ALTRUISM_OBJVAR)) {

		sendSystemMessage(transferer, NO_REASON);
		return SCRIPT_OVERRIDE;
	}

	if(hasObjVar(transferer, ALTRUISM_COMPLETE)) {

		sendSystemMessage(transferer, NO_REASON);
		return SCRIPT_OVERRIDE;
	}

	if(!isIdValid(item) || !exists(item))
		return SCRIPT_CONTINUE;

	string template = getTemplateName(item);

	if(!template.equals("object/tangible/item/quest/hero_of_tatooine/explosives.iff")) {

		sendSystemMessage(transferer, NO_REASON);
		return SCRIPT_OVERRIDE;
	}

	int exp_id = rand(10000, 99999);

	utils.setScriptVar(self, "hasExplosive", exp_id);

	dictionary d = new dictionary();
	d.put("id", exp_id);
	d.put("player", transferer);

	messageTo(self, "handleExplosiveTimer", d, 10.0f, false);

	sendSystemMessage(transferer, EXPLOSIVE_SET);

	return SCRIPT_CONTINUE;
}

trigger OnLostItem(obj_id destContainer, obj_id transferer, obj_id item) {

	if(!isIdValid(item) || !exists(item))
		return SCRIPT_CONTINUE;

	string template = getTemplateName(item);

	if(!template.equals("object/tangible/item/quest/hero_of_tatooine/explosives.iff"))
		return SCRIPT_CONTINUE;

	utils.removeScriptVar(self, "hasExplosive");

	sendSystemMessage(transferer, EXPLOSIVE_REMOVED);

	return SCRIPT_CONTINUE;
}

trigger OnGiveItem(obj_id item, obj_id player) {

	return SCRIPT_OVERRIDE;
}

messageHandler handleExplosiveTimer() {

	if(!utils.hasScriptVar(self, "hasExplosive"))
		return SCRIPT_CONTINUE;

	int exp_id = utils.getIntScriptVar(self, "hasExplosive");
	int id = params.getInt("id");
	obj_id player = params.getObjId("player");

	if(exp_id != id)
		return SCRIPT_CONTINUE;

	obj_id control = getObjIdObjVar(self, ALTRUISM_CONTROL);

	if(!isIdValid(control))
		return SCRIPT_CONTINUE;

	dictionary d = new dictionary();
	d.put("player", player);

	messageTo(control, "handleExplosion", d, 1.0f, false);

	location loc = getLocation(self);
	location other_loc = new location(150.96f, -65.83f, -97.66f, loc.area, loc.cell);

	obj_id[] contents = getContents(loc.cell);

	if(contents == null || contents.length == 0)
		return SCRIPT_CONTINUE;

	for(int i = 0; i < contents.length; i++) {

		if(!isPlayer(contents[i]))
			continue;

		playClientEffectLoc(contents[i], "clienteffect/lair_damage_heavy_shake.cef", loc, 0.0f);
		playClientEffectLoc(contents[i], "clienteffect/lair_damage_heavy_shake.cef", other_loc, 0.0f);

		break;
	}

	return SCRIPT_CONTINUE;
}
