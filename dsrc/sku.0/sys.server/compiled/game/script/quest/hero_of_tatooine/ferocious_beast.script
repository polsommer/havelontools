
include library.ai_lib;
include library.badge;
include library.create;
include library.groundquests;
include library.group;
include library.utils;
include library.xp;


const string SCRIPT_NAME						= "quest.hero_of_tatooine.ferocious_beast";
const string NOMOVE_SCRIPT						= "item.special.nomove_furniture";
const string NOMOVE_OBJVAR						= "noTrade";
const string MARK_OF_COURAGE					= "object/tangible/loot/quest/hero_of_tatooine/mark_courage.iff";

const string COURAGE_OBJVAR						= "quest.hero_of_tatooine.courage";
const string COURAGE_COMPLETE					= COURAGE_OBJVAR + ".complete";

const string_id NOTICE_OBJECT					= new string_id("quest/hero_of_tatooine/system_messages", "courage_notice_object");
const string_id ALREADY_HAVE_MARK				= new string_id("quest/hero_of_tatooine/system_messages", "courage_already_have_mark");

trigger OnAboutToLoseItem(obj_id destContainer, obj_id transferer, obj_id item) {

	if(!isIdValid(item))
		return SCRIPT_CONTINUE;

	string template = getTemplateName(item);

	if(!template.equals(MARK_OF_COURAGE))
		return SCRIPT_CONTINUE;

	if(isIdValid(transferer)) {

		if(hasObjVar(transferer, COURAGE_COMPLETE)) {

			sendSystemMessage(transferer, ALREADY_HAVE_MARK);

			return SCRIPT_OVERRIDE;
		}
	}

	obj_id owner = getOwner(destContainer);

	if(isIdValid(owner) && isPlayer(owner)) {

		if(hasObjVar(owner, COURAGE_COMPLETE)) {

			sendSystemMessage(owner, ALREADY_HAVE_MARK);

			return SCRIPT_OVERRIDE;
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnLostItem(obj_id destContainer, obj_id transferer, obj_id item) {

	if(!isIdValid(item))
		return SCRIPT_CONTINUE;

	string template = getTemplateName(item);

	if(!template.equals(MARK_OF_COURAGE))
		return SCRIPT_CONTINUE;

	obj_id player = getOwner(destContainer);

	if(isIdValid(player) && isPlayer(player)) {

		badge.grantBadge(player, "poi_rabidbeast");
		setObjVar(player, COURAGE_COMPLETE, 1);
		
		groundquests.sendSignal(player, "hero_of_tatooine_main_courage");

		CustomerServiceLog("quest", "HERO OF TATOOINE - %TU has acquired the Mark of Courage", player);
	}

	attachScript(item, NOMOVE_SCRIPT);

	return SCRIPT_CONTINUE;
}

messageHandler aiCorpsePrepared()
{
	obj_id inv = utils.getInventoryContainer(self);

	if(!isIdValid(inv))
		return SCRIPT_CONTINUE;

	attachScript(inv, SCRIPT_NAME);

	obj_id mark_courage = createObject(MARK_OF_COURAGE, inv, "");

	if(!isIdValid(mark_courage)) {

		CustomerServiceLog("quest", "HERO OF TATOOINE: Wild Bladeback Boar was killed, but the Mark of Courage did not spawn");

		return SCRIPT_CONTINUE;
	}

	dictionary d = new dictionary();
	d.put("item", mark_courage);

	messageTo(self, "handlePrepItem", d, 1.0f, false);

	obj_id winner = getObjIdObjVar(self, xp.VAR_TOP_GROUP);

	if(isIdValid(winner)) {

		obj_id[] members = null;

		if(group.isGroupObject(winner)) {

			members = getGroupMemberIds(winner);

		} else {

			members = new obj_id[1];
			members[0] = winner;
		}

		if((members == null) || (members.length == 0))
			return SCRIPT_CONTINUE;

		for(int i = 0; i < members.length; i++) {

			if(isIdValid(members[i]))
				sendSystemMessage(members[i], NOTICE_OBJECT);
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handlePrepItem() {

	obj_id item = params.getObjId("item");

	if(hasScript(item, NOMOVE_SCRIPT))
		detachScript(item, NOMOVE_SCRIPT);

	if(hasObjVar(item, NOMOVE_OBJVAR))
		removeObjVar(item, NOMOVE_OBJVAR);

	return SCRIPT_CONTINUE;
}
