include library.chat;
include library.prose;
include library.utils;

const string CONVO						= "quest/hero_of_tatooine/intellect_liar";
const string HERO_OF_TATOOINE_COMPLETE	= "quest.hero_of_tatooine.complete";
const string SPAWNER_OBJVAR				= "quest.hero_of_tatooine.intellect.spawner";
const string SPAWNER_CONTROLLER			= SPAWNER_OBJVAR + ".controller";
const string SPAWNER_NPC				= SPAWNER_OBJVAR + ".npc";
const string SPAWNER_ACTIVE				= SPAWNER_OBJVAR + ".active";
const string SPAWNER_LIARS				= SPAWNER_ACTIVE + ".liars";
const string INTELLECT_OBJVAR			= "quest.hero_of_tatooine.intellect";
const string INTELLECT_COMPLETE			= INTELLECT_OBJVAR + ".complete";
const string INTELLECT_IN_PROGRESS		= INTELLECT_OBJVAR + ".in_progress";
const string INTELLECT_FAILED			= INTELLECT_OBJVAR + ".failed";

trigger OnAttach() {

	attachScript(self, "npc.converse.npc_converse_menu");

	return SCRIPT_CONTINUE;
}

trigger OnInitialize() {

	if(!hasScript(self, "npc.converse.npc_converse_menu"))
		attachScript(self, "npc.converse.npc_converse_menu");

	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation(obj_id speaker) {

	int m = rand(0, 11);
	string_id msg = new string_id(CONVO, "greeting_" + m);

	if(hasObjVar(speaker, HERO_OF_TATOOINE_COMPLETE) || hasObjVar(speaker, INTELLECT_COMPLETE) || hasObjVar(speaker, INTELLECT_FAILED) || !utils.hasScriptVar(speaker, INTELLECT_IN_PROGRESS)) {

		chat.chat(self, speaker, msg, chat.ChatFlag_targetOnly);
		messageTo(self, "handleResetYaw", null, 4.0f, false);

		return SCRIPT_CONTINUE;
	}

	string_id[] responses = new string_id[3];
	responses[0] = new string_id(CONVO, "response_0");
	responses[1] = new string_id(CONVO, "response_1");
	responses[2] = new string_id(CONVO, "response_2");

	npcStartConversation(speaker, self, CONVO, msg, responses);

	return SCRIPT_CONTINUE;
}

trigger OnNpcConversationResponse(string conversation, obj_id speaker, string_id response) {

	if(response.getAsciiId().equals("response_0")) {

		int m = rand(0, 11);
		string_id msg = new string_id(CONVO, "equipment_" + m);

		npcSpeak(speaker, msg);

		string_id[] responses = new string_id[2];
		responses[0] = new string_id(CONVO, "response_1");
		responses[1] = new string_id(CONVO, "response_2");

		npcSetConversationResponses(speaker, responses);

		return SCRIPT_CONTINUE;

	} else if(response.getAsciiId().equals("response_1")) {

		int m = rand(0, 2);
		int n = getIntObjVar(self, SPAWNER_NPC);

		string_id msg = new string_id(CONVO, "others_" + n + "_" + m);

		prose_package pp = null;

		switch(n) {

			case 0:	npcSpeak(speaker, msg);
					break;

			case 1:	pp = prose.getPackage(msg, getLiarName(self, 5));
					npcSpeak(speaker, pp);
					break;

			case 2: pp = prose.getPackage(msg, getLiarName(self, 1), getLiarName(self, 3));
					npcSpeak(speaker, pp);
					break;

			case 3: pp = prose.getPackage(msg, getLiarName(self, 1), getLiarName(self, 2));
					npcSpeak(speaker, pp);
					break;

			case 4: pp = prose.getPackage(msg, getLiarName(self, 3), getLiarName(self, 1), getLiarName(self, 2));
					npcSpeak(speaker, pp);
					break;

			case 5: pp = prose.getPackage(msg, getLiarName(self, 4));
					npcSpeak(speaker, pp);
					break;
		}

		string_id[] responses = new string_id[2];
		responses[0] = new string_id(CONVO, "response_0");
		responses[1] = new string_id(CONVO, "response_2");

		npcSetConversationResponses(speaker, responses);

		return SCRIPT_CONTINUE;

	} else if(response.getAsciiId().equals("response_2")) {

		int m = rand(0, 11);
		string_id msg = new string_id(CONVO, "bye_" + m);

		npcSpeak(speaker,msg);
		npcEndConversation(speaker);

		return SCRIPT_CONTINUE;

	}

	return SCRIPT_CONTINUE;
}

trigger OnEndNpcConversation(obj_id speaker) {

	messageTo(self, "handleResetYaw", null, 4.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler handleSetYaw() {

	location loc = params.getLocation("loc");

	faceTo(self, loc);

	setObjVar(self, "ai.yaw", getYaw(self));

	return SCRIPT_CONTINUE;
}

messageHandler handleResetYaw() {

	if(isInNpcConversation(self))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "ai.yaw"))
		return SCRIPT_CONTINUE;

	int yaw = getIntObjVar(self, "ai.yaw");

	setYaw(self, yaw);

	return SCRIPT_CONTINUE;
}

string getLiarName(obj_id self, int number) {

	obj_id control = getObjIdObjVar(self, SPAWNER_CONTROLLER);

	if(!isIdValid(control))
		return null;

	obj_id[] liars = getObjIdArrayObjVar(control, SPAWNER_LIARS);

	if(liars == null || liars.length == 0) {

		debugSpeakMsg(self, "ARRAY OF LIARS IS NULL OR EMPTY!");
		return null;
	}

	if(!isIdValid(liars[number])) {

		debugSpeakMsg(self, "THE LIAR ID IS NOT VALID!");
		return null;
	}

	string name = getEncodedName(liars[number]);

	return name;
}

