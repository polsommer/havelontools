include library.utils;
include library.ai_lib;
include library.create;


// pirate base on tatooine at 5672 180 -5737

trigger OnAttach()
{
	/*if (canSpawnByConfigSetting())
	{
		setName(self, "Pirate Leader Spawner");
		
		resetPirateCounter(self);
		messageTo(self, "doSpawnEvent", null, 20, false);
	}
	else
	{
		setName(self, "Pirate Leader Spawner - Off by Config");
	}*/

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if (canSpawnByConfigSetting())
	{
		setName(self, "Pirate Leader Spawner");
		
		resetPirateCounter(self);
		messageTo(self, "doSpawnEvent", null, 20, false);
	}
	else
	{
		setName(self, "Pirate Leader Spawner - Off by Config");
	}

	return SCRIPT_CONTINUE;
}


messageHandler doSpawnEvent()
{
	string whatToSpawn = pickAPirate(self);

	float spawnYaw = getYaw(self);
	location spawnLoc = getLocation(self);

	float minSpawnTime = 190.0f;
	float maxSpawnTime = 240.0f;
	float respawnTime = rand(minSpawnTime, maxSpawnTime);

	obj_id npc = create.object(whatToSpawn, spawnLoc);
	if( isIdValid(npc) )
	{
		ai_lib.setDefaultCalmBehavior(npc, ai_lib.BEHAVIOR_SENTINEL);

		setObjVar(npc, "objParent", self);
		setObjVar(npc, "fltRespawnTime", respawnTime);
		attachScript(npc, "quest.hero_of_tatooine.spawned_pirate_tracker");

		setYaw(npc, spawnYaw);
	}

	
	return SCRIPT_CONTINUE;
}

messageHandler spawnDestroyed()
{
	messageTo(self, "doSpawnEvent", null, 2, false);
	return SCRIPT_CONTINUE;
}

string pickAPirate(obj_id spawner)
{
	// default pirate
	string pirate = "quest_hero_of_tatooine_pirate_deckhand";
	
	int piratesSpawned = utils.getIntScriptVar(spawner, "piratesSpawned");
	int numPiratesNeeded = utils.getIntScriptVar(spawner, "numPiratesNeeded");
	
	// if enough other pirates have been spawned, spawn the pirate leader
	if( piratesSpawned >= numPiratesNeeded )
	{
		pirate = "quest_hero_of_tatooine_pirate_leader";
		resetPirateCounter(spawner);
	}
	else
	{
		// remote chance any time this respawns to spawn the leader
		// regardless of the count of the other pirates spawned
		int chance = rand(0,24);
		if( chance == 19 )
		{
			pirate = "quest_hero_of_tatooine_pirate_leader";
			resetPirateCounter(spawner);
		}
		else
		{
			// otherwise, spawn one of the other pirates
			utils.setScriptVar(spawner, "piratesSpawned", piratesSpawned + 1);
			
			int whichOtherPirate = rand(0,2);
			switch(whichOtherPirate)
			{
				case 0:
					pirate = "quest_hero_of_tatooine_pirate_deckhand";
					break;
				case 1:
					pirate = "quest_hero_of_tatooine_pirate_plunderer";
					break;
				case 2:
					pirate = "quest_hero_of_tatooine_pirate_first_mate";
					break;
			}
		}
	}
	
	return pirate;
}

void resetPirateCounter(obj_id spawner)
{
	utils.setScriptVar(spawner, "piratesSpawned", 0);
	
	int num = rand(5,9);
	utils.setScriptVar(spawner, "numPiratesNeeded", num);
}

boolean canSpawnByConfigSetting()
{
	string disableSpawners = getConfigSetting("GameServer", "disableAreaSpawners");
	if (disableSpawners == null)
		return true;

	if (disableSpawners.equals("true") || disableSpawners.equals("1"))
		return false;

	return true;
}