include library.utils;

const string ALTRUISM_OBJVAR 			= "quest.hero_of_tatooine.altruism";
const string ALTRUISM_COMPLETE			= ALTRUISM_OBJVAR + ".complete";

const string_id SEARCH					= new string_id("quest/hero_of_tatooine/system_messages", "menu_search");
const string_id INVENTORY_FULL			= new string_id("quest/hero_of_tatooine/system_messages", "altruism_inventory_full");
const string_id NULL_OBJECT				= new string_id("quest/hero_of_tatooine/system_messages", "altruism_null_object");
const string_id GOT_OBJECT				= new string_id("quest/hero_of_tatooine/system_messages", "altruism_got_object");

trigger OnObjectMenuRequest(obj_id player, menu_info mi) {

	if(hasObjVar(player, ALTRUISM_OBJVAR) && !hasObjVar(player, ALTRUISM_COMPLETE))
		int menuOption = mi.addRootMenu(menu_info_types.SERVER_ITEM_OPTIONS, SEARCH);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item) {

	if(item == menu_info_types.SERVER_ITEM_OPTIONS) {

		if(!hasObjVar(player, ALTRUISM_OBJVAR) || hasObjVar(player, ALTRUISM_COMPLETE))
			return SCRIPT_CONTINUE;

		obj_id playerInv = utils.getInventoryContainer(player);
		if(isIdValid(playerInv)) {

			int free_space = getVolumeFree(playerInv);
			if(free_space <= 0) {

				sendSystemMessage(player, INVENTORY_FULL);
				return SCRIPT_CONTINUE;
			}

			obj_id object = createObject("object/tangible/item/quest/hero_of_tatooine/explosives.iff", playerInv, "");
			if(!isIdValid(object)) {

				sendSystemMessage(player, NULL_OBJECT);
				return SCRIPT_CONTINUE;
			}

			sendSystemMessage(player, GOT_OBJECT);
			destroyObject(self);
		}
	}

	return SCRIPT_CONTINUE;
}