include library.ai_lib;
include library.create;
include library.utils;

const string SPAWNER_DATATABLE			= "datatables/quest/hero_of_tatooine/intellect_spawner.iff";
const string SPAWNER_OBJVAR				= "quest.hero_of_tatooine.intellect.spawner";
const string SPAWNER_CONTROLLER			= SPAWNER_OBJVAR + ".controller";
const string SPAWNER_NUMBER				= SPAWNER_OBJVAR + ".number";
const string SPAWNER_NPC				= SPAWNER_OBJVAR + ".npc";
const string SPAWNER_ACTIVE				= SPAWNER_OBJVAR + ".active";
const string SPAWNER_LIARS				= SPAWNER_ACTIVE + ".liars";
const string SPAWNER_BH					= SPAWNER_ACTIVE + ".bh";

const string_id CAPTAIN_NAME         	 	= new string_id ("quest/hero_of_tatooine/npc_names", "himfan");

trigger OnInitialize() {

	if(hasObjVar(self, SPAWNER_ACTIVE)) {

		if(!hasObjVar(self, SPAWNER_NUMBER) || !hasObjVar(self, SPAWNER_CONTROLLER)) {

			destroySpawnedObjects(self);
			removeObjVar(self, SPAWNER_OBJVAR);

			return SCRIPT_CONTINUE;
		}

		int number = getIntObjVar(self, SPAWNER_NUMBER);
		obj_id controller = getObjIdObjVar(self, SPAWNER_CONTROLLER);

		if(!spawnObjects(self, controller, number)) {

			destroySpawnedObjects(self);
			removeObjVar(self, SPAWNER_OBJVAR);
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleValidate() {

	obj_id controller = params.getObjId("controller");
	int number = params.getInt("number");

	dictionary d = new dictionary();
	d.put("number", number);

	if(hasObjVar(self, SPAWNER_ACTIVE)) {

		if(validateActiveSpawn(self)) {

			d.put("spawn", 1);

		} else {

			destroySpawnedObjects(self);
			removeObjVar(self, SPAWNER_OBJVAR);

			d.put("spawn", 0);
		}

	} else {

		cleanupStaleObjects(self);
		if(hasObjVar(self, SPAWNER_OBJVAR))
			removeObjVar(self, SPAWNER_OBJVAR);

		d.put("spawn", 0);
	}

	messageTo(controller, "handleValidation", d, 0.0f, true);

	return SCRIPT_CONTINUE;
}

messageHandler handleSpawn()
{

	obj_id controller = params.getObjId("controller");
	int number = params.getInt("number");

	dictionary d = new dictionary();
	d.put("number", number);

	if(hasObjVar(self, SPAWNER_ACTIVE)) {

		if(validateActiveSpawn(self)) {

			return SCRIPT_CONTINUE;

		} else {

			destroySpawnedObjects(self);
			removeObjVar(self, SPAWNER_OBJVAR);
		}
	}

	if(spawnObjects(self, controller, number)) {

		d.put("spawn", 1);

	} else {

		destroySpawnedObjects(self);
		d.put("spawn", 0);
	}

	messageTo(controller, "handleValidation", d, 0.0f, true);

	return SCRIPT_CONTINUE;
}

messageHandler handleComplete() {

	if(!hasObjVar(self, SPAWNER_NUMBER) || !hasObjVar(self, SPAWNER_CONTROLLER))
		return SCRIPT_CONTINUE;

	obj_id controller = getObjIdObjVar(self, SPAWNER_CONTROLLER);
	int number = getIntObjVar(self, SPAWNER_NUMBER);

	if(!isIdValid(controller)) {

		messageTo(self, "handleCleanup", null, 30.0f, false);
		return SCRIPT_CONTINUE;
	}

	removeObjVar(self, SPAWNER_OBJVAR);

	dictionary d = new dictionary();
	d.put("number", number);

	messageTo(controller, "handleCompletion", d, 15.0f, true);

	return SCRIPT_CONTINUE;
}

messageHandler handleCleanup() {

	destroySpawnedObjects(self);

	return SCRIPT_CONTINUE;
}

messageHandler handleLocationRequest() {

	obj_id control = params.getObjId("controller");

	location loc = getLocation(self);

	params.put("loc", loc);

	messageTo(control, "handleLocationResponse", params, 0.0f, true);

	return SCRIPT_CONTINUE;
}

boolean spawnObjects(obj_id self, obj_id controller, int number)
{

	location center = getLocation(self);

	dictionary loc_info = dataTableGetRow(SPAWNER_DATATABLE, self.toString());

	if(loc_info == null) {

		return false;
	}

	location center1 = new location(loc_info.getFloat("center1_x"), loc_info.getFloat("center1_y"), loc_info.getFloat("center1_z"), center.area);
	location center2 = new location(loc_info.getFloat("center2_x"), loc_info.getFloat("center2_y"), loc_info.getFloat("center2_z"), center.area);

	location liar1_loc = new location((center1.x - 0.75f), center1.y, (center1.z + 1.3f), center1.area);
	location liar2_loc = new location((center1.x - 0.75f), center1.y, (center1.z - 1.3f), center1.area);
	location liar3_loc = new location((center1.x + 1.5f), center1.y, center1.z, center1.area);

	location liar4_loc = new location((center2.x - 0.75f), center2.y, (center2.z + 1.3f), center2.area);
	location liar5_loc = new location((center2.x - 0.75f), center2.y, (center2.z - 1.3f), center2.area);
	location liar6_loc = new location((center2.x + 1.5f), center2.y, center2.z, center2.area);

	obj_id bh = create.object("quest_hero_of_tatooine_liar_bounty_hunter", center);

	resizeable obj_id[] liars = new obj_id[0];

	liars = utils.addElement(liars, create.object("smuggler", liar1_loc));
	liars = utils.addElement(liars, create.object("smuggler", liar2_loc));
	liars = utils.addElement(liars, create.object("smuggler", liar3_loc));
	liars = utils.addElement(liars, create.object("smuggler", liar4_loc));
	liars = utils.addElement(liars, create.object("smuggler", liar5_loc));
	liars = utils.addElement(liars, create.object("smuggler", liar6_loc));

	liars = shuffleList(liars);
	namePirates(liars);

	if(liars == null || liars.length == 0)
		return false;

	boolean success = true;

	for(int i = 0; i < liars.length; i++)
		success &= isIdValid(liars[i]);

	success &= isIdValid(bh);

	setObjVar(self, SPAWNER_CONTROLLER, controller);
	setObjVar(self, SPAWNER_NUMBER, number);
	setObjVar(self, SPAWNER_BH, bh);
	setObjVar(self, SPAWNER_LIARS, liars);

	if(!success)
		return success;

	for(int i = 0; i < liars.length; i++) {

		dictionary d = new dictionary();

		if(i < 3) {

			d.put("loc", center1);

		} else {

			d.put("loc", center2);
		}

		setObjVar(liars[i], SPAWNER_NPC, i);
		setObjVar(liars[i], SPAWNER_CONTROLLER, self);
		ai_lib.setDefaultCalmBehavior(liars[i], ai_lib.BEHAVIOR_SENTINEL);
		setInvulnerable(liars[i], true);
		attachScript(liars[i], "quest.hero_of_tatooine.intellect_liar");
		messageTo(liars[i], "handleSetYaw", d, 3.0f, true);
	}

	setName(liars[0], CAPTAIN_NAME);

	setObjVar(bh, SPAWNER_NPC, -1);
	setObjVar(bh, SPAWNER_CONTROLLER, self);
	ai_lib.setDefaultCalmBehavior(bh, ai_lib.BEHAVIOR_SENTINEL);
	setInvulnerable(bh, true);
	attachScript(bh, "conversation.quest_hero_of_tatooine_bounty_hunter");

	return success;
}

boolean validateActiveSpawn(obj_id self) {

	obj_id[] liars = getObjIdArrayObjVar(self, SPAWNER_LIARS);
	obj_id bh = getObjIdObjVar(self, SPAWNER_BH);

	boolean validSuccess = true;
	boolean existSuccess = true;

	for(int i = 0; i < liars.length; i++)
		validSuccess &= isIdValid(liars[i]);

	validSuccess &= isIdValid(bh);


	for(int i = 0; i < liars.length; i++)
		existSuccess &= exists(liars[i]);

	existSuccess &= exists(bh);


	validSuccess &= existSuccess;

	return validSuccess;
}

void destroySpawnedObjects(obj_id self) {

	obj_id[] liars = getObjIdArrayObjVar(self, SPAWNER_LIARS);
	obj_id bh = getObjIdObjVar(self, SPAWNER_BH);

	if(liars == null || liars.length == 0 || !isIdValid(bh)) {

		cleanupStaleObjects(self);
	}

	for(int i = 0; i < liars.length; i++) {

		if(isIdValid(liars[i]) && exists(liars[i]))
			destroyObject(liars[i]);
	}

	if(isIdValid(bh) && exists(bh))
		destroyObject(bh);
}

void cleanupStaleObjects(obj_id self) {

	obj_id[] npcs = getAllObjectsWithObjVar(getLocation(self), 50.0f, SPAWNER_NPC);

	if(npcs == null || npcs.length == 0)
		return;

	for(int i = 0; i < npcs.length; i++) {

		destroyObject(npcs[i]);
	}
}

Vector shuffleList(Vector list)
{
	Vector newList = new Vector();
	int size = list.size();

	while(size > 0) {

		int i = rand(0, (size - 1));

		newList = utils.addElement(newList, list.get(i));
		list = utils.removeElementAt(list, i);
		size--;
	}

	if(newList == null || newList.size() == 0)
		return null;

	return newList;
}

void namePirates( Vector pirates )
{
	string_id[] names =
		{
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_0"),
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_1"),
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_2"),
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_3"),
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_4"),
			new string_id ("quest/hero_of_tatooine/npc_names", "pirate_5")
		};

	obj_id[] pirateObjs = new obj_id[names.length];
	pirates.toArray(pirateObjs);

	for ( int i = 0; i < names.length; ++i )
	{
		setName( pirateObjs[i], "" );
		setName( pirateObjs[i], names[i] );
	}
}
