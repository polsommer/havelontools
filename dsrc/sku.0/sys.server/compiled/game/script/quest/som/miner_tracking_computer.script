include library.groundquests;
include library.create;
include library.trial;
include library.utils;

const string STF									= "som/som_quest";
const string_id ACTIVATE							= new string_id(STF, "tracking_computer_activate");
const string_id WAIT								= new string_id(STF, "tracking_computer_working");
const string_id FINISHED							= new string_id(STF, "tracking_computer_done");
const string_id SUCCESS								= new string_id(STF, "tracking_computer_success");
const string_id SEARCHING							= new string_id(STF, "tracking_computer_searching");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if( groundquests.isQuestActive(player, "som_poison_miners"))
	{
		int menu = mi.addRootMenu( menu_info_types.ITEM_USE, ACTIVATE );

		menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
			if ( mid == null )
			{
				return SCRIPT_CONTINUE;
			}

			mid.setServerNotify(true);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if (groundquests.isTaskActive(player, "som_poison_miners", "mustafar_poison_miners_two"))
		{
			doAnimationAction (player, "std_manipulate_medium");
			sendSystemMessage(player, SEARCHING);
			groundquests.sendSignal(player, "poison_miners_signal_one");
			playClientEffectObj(self, "clienteffect/survey_effect.cef", self, "");
			dictionary dict = new dictionary();
			dict.put("target", player);
			messageTo(self, "handleMinerTrack", dict, 10f, false);
			return SCRIPT_CONTINUE;
		}
		if (groundquests.isTaskActive(player, "som_poison_miners", "mustafar_poison_miners_two_b"))
		{
			sendSystemMessage(player, WAIT);
			return SCRIPT_CONTINUE;
		}
		else
		{
			sendSystemMessage(player, FINISHED);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleMinerTrack()
{
	obj_id player = params.getObjId("target");
	sendSystemMessage(player, SUCCESS);
	groundquests.sendSignal(player, "poison_miners_signal_two");
	return SCRIPT_CONTINUE;
}