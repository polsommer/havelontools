include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const String dataTableQuestNamePre       = "TASK_QUEST_NAME_";
const String dataTableTaskNamePre        = "TASK_TASK_NAME_";
const String dataTableDisplayStringIdPre = "TASK_DISPLAY_STRING_";

const String questCrcsListObjVarName   = "questCrcs";
const String taskIdsListObjVarName     = "taskIds";
const String taskIndexesListObjVarName = "taskIndexes";
const String completedListObjVarName   = "completed";

const String taskType = "wait_for_tasks";


const String dot = ".";

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", taskType + " task activated.");
	String baseObjVar = groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	
	//task data in datatables is 1-based
	int waitForTaskIndex = 1;
	
	resizeable int[] questCrcsListResizable   = new int[0];
	resizeable int[] taskIdsListResizable     = new int[0];
	resizeable int[] taskIndexesListResizable = new int[0];
	resizeable int[] completedListResizable   = new int[0];

	boolean done = false;
	while(!done)
	{
		String dataTableQuestName = dataTableQuestNamePre + waitForTaskIndex;
		String questName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableQuestName);
		if(questName != null && questName.length() > 0)
		{
			String dataTableTaskName = dataTableTaskNamePre + waitForTaskIndex;
			String taskName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableTaskName);
			if(taskName != null && taskName.length() > 0)
			{
				String dataTableDisplayStringId = dataTableDisplayStringIdPre + waitForTaskIndex;
				String displayStringId = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableDisplayStringId);
				
				int taskQuestCrc = groundquests.getQuestIdFromString(questName);
				int taskTaskId = groundquests.getTaskId(taskQuestCrc, taskName);
				//add to the objvar lists
				utils.addElement(questCrcsListResizable,   taskQuestCrc);
				utils.addElement(taskIdsListResizable,     taskTaskId);
				utils.addElement(taskIndexesListResizable, waitForTaskIndex);
				utils.addElement(completedListResizable,   0);
				++waitForTaskIndex;
				if(displayStringId != null && displayStringId.length() > 0)
				{
					//set a counter
					questSetQuestTaskCounter(self, questGetQuestName(questCrc), taskId, displayStringId, 0, 1);
				}
			}	
			else
			{
				done = true;
			}	
		}
		else
		{
			done = true;
		}
	}
	
	//store all the objvar lists on the player
	if(questCrcsListResizable.size() == taskIdsListResizable.size())
	{
		if(questCrcsListResizable.size() > 0)
		{
			int[] questCrcsList   = questCrcsListResizable;
			int[] taskIdsList     = taskIdsListResizable;
			int[] taskIndexesList = taskIndexesListResizable;
			int[] completedList   = completedListResizable;
			setObjVar(self, baseObjVar + dot + questCrcsListObjVarName,   questCrcsList);
			setObjVar(self, baseObjVar + dot + taskIdsListObjVarName,     taskIdsList);
			setObjVar(self, baseObjVar + dot + taskIndexesListObjVarName, taskIndexesList);
			setObjVar(self, baseObjVar + dot + completedListObjVarName,   completedList);
		}
		else
		{
			groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", "[designer bug] No valid tasks to wait for found, are the task names valid names in the given quests?");
		}
	}
	else
	{
			groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", "[programmer bug] Task arrays mismatched, this shouldn't happen.");
	}
	
	dictionary webster = new dictionary();
	webster.put ("questCrc", questCrc);
	webster.put ("taskId", taskId);
	messageTo(self, "checkForAlreadyCompletedTasks", webster, 1, false);
	
	return SCRIPT_CONTINUE;
}
// ---------------------------------------------------------------------

messageHandler checkForAlreadyCompletedTasks()
{
	int questCrc = params.getInt("questCrc");
	int taskId = params.getInt("taskId");
	
	String baseObjVar = groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	
	int waitForTaskIndex = 1;
	
	boolean done = false;
	while(!done)
	{
		String dataTableQuestName = dataTableQuestNamePre + waitForTaskIndex;
		String questName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableQuestName);
		if(questName != null && questName.length() > 0)
		{
			String dataTableTaskName = dataTableTaskNamePre + waitForTaskIndex;
			String taskName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableTaskName);
			if(taskName != null && taskName.length() > 0)
			{
				String dataTableDisplayStringId = dataTableDisplayStringIdPre + waitForTaskIndex;
				String displayStringId = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableDisplayStringId);
				
				int taskQuestCrc = groundquests.getQuestIdFromString(questName);
				int taskTaskId = groundquests.getTaskId(taskQuestCrc, taskName);
				
				//Has the required task already been completed?
				if ( questIsTaskComplete(taskQuestCrc, taskTaskId, self) )
				{
					handleSomeTaskFinished(self, taskQuestCrc, taskTaskId);
				}
				
				++waitForTaskIndex;
			}	
			else
			{
				done = true;
			}	
		}
		else
		{
			done = true;
		}
	}
	
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnSomeTaskCompleted(int questCrc, int taskId)
{
	handleSomeTaskFinished(self, questCrc, taskId);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnSomeTaskFailed(int questCrc, int taskId)
{
	handleSomeTaskFinished(self, questCrc, taskId);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

/** Handle the case when SOME task gets completed.  See if any active wait_for_tasks tasks care about it
*/
void handleSomeTaskFinished(obj_id player, int finishedTaskQuestCrc, int finishedTaskTaskId)
{
	//get wait_for_tasks tasks
	dictionary tasks = groundquests.getActiveTasksForTaskType(player, taskType);
	if ((tasks != null) && !tasks.isEmpty())
	{
		java.util.Enumeration keys = tasks.keys();
		while (keys.hasMoreElements())
		{
			//get the questCrc and taskId info for the given wait_for_task task
			String questCrcString       = (string)keys.nextElement();
			int    questCrc             = utils.stringToInt(questCrcString);
			int[]  tasksForCurrentQuest = tasks.getIntArray(questCrcString);

			for(int taskIndex = 0; taskIndex < tasksForCurrentQuest.length; ++taskIndex)
			{
				int    taskId         = tasksForCurrentQuest[taskIndex];
				String baseObjVar     = groundquests.getBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);

				//get the objvar data (the list of questCrc/taskId pairs we care about)
				int[] questCrcsList   = getIntArrayObjVar(player, baseObjVar + dot + questCrcsListObjVarName);
				int[] taskIdsList     = getIntArrayObjVar(player, baseObjVar + dot + taskIdsListObjVarName);
				int[] taskIndexesList = getIntArrayObjVar(player, baseObjVar + dot + taskIndexesListObjVarName);
				int[] completedList   = getIntArrayObjVar(player, baseObjVar + dot + completedListObjVarName);
				if(questCrcsList != null)
				{
					for (int i = 0; i < questCrcsList.length; ++i)
					{
						//see if the task that completed is one that this wait_for_tasks task cares about
						if((finishedTaskQuestCrc == questCrcsList[i]) && (finishedTaskTaskId == taskIdsList[i]))
						{
							String dataTableDisplayStringId = dataTableDisplayStringIdPre + taskIndexesList[i];
							String displayStringId = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableDisplayStringId);

							questSetQuestTaskCounter(player, questGetQuestName(questCrc), taskId, displayStringId, 1, 1);
							play2dNonLoopingSound(player, groundquests.MUSIC_QUEST_INCREMENT_COUNTER);
							groundquests.playJournalUpdatedMusic(questCrc, taskId, player);

							resizeable int[] questCrcsListResizable   = new int[0];
							resizeable int[] taskIdsListResizable     = new int[0];
							resizeable int[] taskIndexesListResizable = new int[0];
							resizeable int[] completedListResizable   = new int[0];

							for(int l = 0; l < questCrcsList.length; ++l)
							{
									utils.addElement(questCrcsListResizable,   questCrcsList[l]);
									utils.addElement(taskIdsListResizable,     taskIdsList[l]);
									utils.addElement(taskIndexesListResizable, taskIndexesList[l]);
									if(l == i)
									{
										utils.addElement(completedListResizable, 1);
									}
									else
									{
										utils.addElement(completedListResizable, completedList[l]);
									}
							}

							//now see if all tasks are completed
							boolean allTasksComplete = true;
							for (int j = 0; j < completedListResizable.length; ++j)
							{
								if(completedListResizable[j] != 1)
								{
									allTasksComplete = false;
									break;
								}
							}			

							//if they are, complete the task
							if(allTasksComplete)
							{
								questCompleteTask(questCrc, taskId, player);
								return;
							}
							else
							{
								int[] newQuestCrcsList   = questCrcsListResizable;
								int[] newTaskIdsList     = taskIdsListResizable;
								int[] newTaskIndexesList = taskIndexesListResizable;
								int[] newCompletedList   = completedListResizable;
								setObjVar(player, baseObjVar + dot + questCrcsListObjVarName,   newQuestCrcsList);
								setObjVar(player, baseObjVar + dot + taskIdsListObjVarName,     newTaskIdsList);
								setObjVar(player, baseObjVar + dot + taskIndexesListObjVarName, newTaskIndexesList);
								setObjVar(player, baseObjVar + dot + completedListObjVarName,   newCompletedList);
							}	
						}
					}
				}	
			}
		}	
	}
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + " task completed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is failed
trigger OnTaskFailed(int questCrc, int taskId)
{

	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + " task failed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is cleared
trigger OnTaskCleared(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + " task cleared.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

/** When the client logs in, recreate counters for any active tasks
*/
commandHandler handleClientLogin()
{
	//get wait_for_tasks tasks
	dictionary tasks = groundquests.getActiveTasksForTaskType(self, taskType);
	if ((tasks != null) && !tasks.isEmpty())
	{
		java.util.Enumeration keys = tasks.keys();
		while (keys.hasMoreElements())
		{
			//get the questCrc and taskId info for the given wait_for_task task
			String questCrcString = (string)keys.nextElement();
			int questCrc = utils.stringToInt(questCrcString);
			int[] tasksForCurrentQuest = tasks.getIntArray(questCrcString);

			for (int j = 0; j < tasksForCurrentQuest.length; ++j)
			{
				int taskId = tasksForCurrentQuest[j];
				String baseObjVar = groundquests.getBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
				int[] taskIndexesList = getIntArrayObjVar(self, baseObjVar + dot + taskIndexesListObjVarName);
				int[] completedList = getIntArrayObjVar(self, baseObjVar + dot + completedListObjVarName);

				if (taskIndexesList != null)
				{
					for (int i = 0; i < taskIndexesList.length; ++i)
					{
						//recreate the counters
						String dataTableDisplayStringId = dataTableDisplayStringIdPre + taskIndexesList[i];
						String displayStringId = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableDisplayStringId);
						questSetQuestTaskCounter(self, questGetQuestName(questCrc), taskId, displayStringId, completedList[i], 1);
					}
				}	
			}
		}
	}

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	String legacyObjVarName = "quest.wait_for_tasks";
	resizeable String[] legacyObjVarValue = null;

	if (hasObjVar(self, legacyObjVarName))
	{
		legacyObjVarValue = getResizeableStringArrayObjVar(self, legacyObjVarName);
	}

	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));

	//but restore value that was set by legacy quest.task.wait_for_tasks
	if (!hasObjVar(self, legacyObjVarName) && legacyObjVarValue != null && legacyObjVarValue.length > 0)
	{
		CustomerServiceLog("fs_quests", "restoring clobbered objvar " + legacyObjVarName + " to %TU", self, null);
		setObjVar(self, legacyObjVarName, legacyObjVarValue);
	}

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
