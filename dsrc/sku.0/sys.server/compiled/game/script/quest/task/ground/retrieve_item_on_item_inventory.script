//This script is used in conjunction with quest.task.ground.retrieve_item.

//This script is attached to the object from which you wish to retrieve items.  It adds a radial menu item that sends a messageto
//to the player that quest.task.ground.retrieve_item will pick up and handle appropriately.

// ---------------------------------------------------------------------

include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

trigger OnAttach()
{
	messageTo(self, "getQuestPlayerName", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler getQuestPlayerName()
{
	obj_id questPlayer = utils.getContainingPlayer(self);
	if( isIdValid(questPlayer) )
	{
		setObjVar(self, "questPlayer", questPlayer);
	}
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			String menuText = groundquests.getRetrieveMenuText(player, self);
			string_id menuStringId = utils.unpackString(menuText);
			int menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, menuStringId);
			menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);
			menuInfoData.setServerNotify(true);
		}	
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(hasScript(player, "quest.task.ground.retrieve_item"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self))
		{
			if(item == menu_info_types.ITEM_USE)
			{
				setObjVar(self,"questItemUsed", true);

				dictionary params = new dictionary();
				params.put("source", self);
				messageTo(player, "questRetrieveItemObjectFound", params, 0, false);
				
				if ( !hasObjVar(self, "doNotDestroyMe") )
				{
					messageTo(self, "destroyMe", null, 1, false);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler destroyMe()
{
	if ( !hasObjVar(self, "doNotDestroyMe") )
	{
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}


// ---------------------------------------------------------------------

trigger OnDestroy()
{
	if ( !hasObjVar(self, "questItemUsed") )
	{
		if ( hasObjVar(self, "questPlayer") )
		{
			obj_id player = getObjIdObjVar(self, "questPlayer");
			if ( isIdValid(player) )
			{
				if(groundquests.playerNeedsToRetrieveThisItem(player, self))
				{
					string template = getTemplateName(self);
					obj_id newItem = createObjectInInventoryAllowOverload(template, player);
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
