include library.prose;
include library.groundquests;
include library.utils;
include library.space_quest;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const int winner = 1;
const int failure = 2;
const int split = 3;

const string spaceQuestIdentifier = ".spaceQuestIdentifier";
const string spaceQuestName = "SPACE_QUEST_NAME";
const string spaceQuestType = "SPACE_QUEST_TYPE";
const string ignoreSplit = "IGNORE_SPLIT";
const String taskType = "grantSpaceQuest";

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	String baseObjVar = groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	string spaceName = groundquests.getTaskStringDataEntry(questCrc, taskId, spaceQuestName);
	string spaceType = groundquests.getTaskStringDataEntry(questCrc, taskId, spaceQuestType);

	setObjVar (self, baseObjVar + ".spaceQuestIdentifier" , spaceName );

	space_quest.grantQuest( self, spaceType, spaceName);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

messageHandler groundSpaceWinner ()
{
	handleSpaceQuestMessaging(self, params, winner);
	return SCRIPT_CONTINUE;
}

messageHandler groundSpaceSplit ()
{
	handleSpaceQuestMessaging(self, params, split);
	return SCRIPT_CONTINUE;
}

messageHandler groundSpaceFailed ()
{
	handleSpaceQuestMessaging(self, params, failure);
	return SCRIPT_CONTINUE;
}
// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + "task completed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is failed
trigger OnTaskFailed(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + "task failed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnTaskCleared(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + " task cleared.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	//clear tracking objvars
	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void handleSpaceQuestMessaging (obj_id self, dictionary params, int spaceQuestValue)
{
	string spaceQuestName = params.getString ("questName");
	string splitQuestName = "";

	if (spaceQuestValue == split)
	{
		splitQuestName = params.getString ("splitQuestName");
	}

	dictionary tasks = groundquests.getActiveTasksForTaskType(self, taskType);
	if ((tasks != null) && !tasks.isEmpty())
 	{
  		java.util.Enumeration keys = tasks.keys();
  		while (keys.hasMoreElements())
  		{
			String questCrcString = (string)keys.nextElement();
			int questCrc = utils.stringToInt(questCrcString);

			int[] tasksForCurrentQuest = tasks.getIntArray(questCrcString);

			for (int i = 0; i < tasksForCurrentQuest.length; ++i)
			{
				int taskId = tasksForCurrentQuest[i];
				String baseObjVar = groundquests.getBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
				String spaceQuestIdentifierVariableName = baseObjVar + spaceQuestIdentifier;
				if(hasObjVar(self, spaceQuestIdentifierVariableName))
				{
					string spaceQuest = getStringObjVar (self, spaceQuestIdentifierVariableName);
					if (spaceQuest.equals(spaceQuestName))
					{
						if (spaceQuestValue == winner)
						{
							questCompleteTask(questCrc, taskId, self);
						}
						else if (spaceQuestValue == failure)
						{
							questFailTask(questCrc, taskId, self);
						}
						else if (spaceQuestValue == split)
						{
							setObjVar (self, spaceQuestIdentifierVariableName, splitQuestName);
						}
						groundquests.questOutputDebugLog(taskType, "grantSpaceQuest", "start");
					}
				}
			}
   		}
	}
}