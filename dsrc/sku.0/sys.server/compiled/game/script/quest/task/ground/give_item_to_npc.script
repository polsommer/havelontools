include library.ai_lib;
include library.groundquests;
include library.static_item;

const string dataTableItemToGive = "ITEM_TO_GIVE";
const string_id noGiveDuringCombat = new string_id("quest/ground/system_message", "no_give_during_combat");

trigger OnGiveItem (obj_id item, obj_id giver)
{
	if ( isGod(giver) )
	{
		debugSpeakMsg (giver, "The item is " + item);
	}
	string questName = getStringObjVar (self, "quest_name");
	string taskName = getStringObjVar (self, "task_name");
	string itemName = getTemplateName (item);

	if(static_item.isStaticItem(item))
		itemName = getStaticItemName(item);

	int questCrc = groundquests.getQuestIdFromString (questName);
	int taskId = groundquests.getTaskId (questCrc, taskName);

	if (!questIsTaskActive(questCrc, taskId, giver))
	{
		// Need to check for alternate quest here
		if (hasObjVar(self, "alternate_quest_name"))
		{
			questName = getStringObjVar (self, "alternate_quest_name");
		}
		else
		{
			return SCRIPT_CONTINUE;
		}
		
		questCrc = groundquests.getQuestIdFromString (questName);
		
		if (!questIsTaskActive(questCrc, taskId, giver))
		{
			return SCRIPT_CONTINUE;
		}	
	}

	if (groundquests.isTimeRemainingBeforeCompletion(giver, questCrc, taskId))
		return SCRIPT_CONTINUE;

	string itemToGive = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableItemToGive);

	if(itemToGive != null && itemToGive.length() > 0)
	{
		String[] itemsNeeded = split(itemToGive, ',');

		for(int i = 0; i < itemsNeeded.length; ++i)
		{
			if(itemsNeeded[i] == itemName)
			{
				if (ai_lib.isInCombat(giver))
				{
					sendQuestSystemMessage(giver, noGiveDuringCombat);
					return SCRIPT_CONTINUE;
				}
				else
				{
					dictionary webster = new dictionary();

					webster.put ("questName", questName);
					webster.put ("taskName", taskName);
					webster.put ("itemName", itemName);

					messageTo (giver, "itemGivenToNpc", webster, 0, false);
					return SCRIPT_OVERRIDE;
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}
