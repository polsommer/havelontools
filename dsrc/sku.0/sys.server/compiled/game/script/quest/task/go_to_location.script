include library.locations;
include library.quests;
include library.utils;

void completeTask(obj_id self, String questName, boolean succeeded)
{
	// clean up the waypoint before completing the task
	if(hasObjVar(self, "quest." + questName))
	{
		// destroy the waypoint
		obj_id waypoint = getObjIdObjVar(self, "quest." + questName + ".waypoint");
		if(isIdValid(waypoint))
		{
			destroyWaypointInDatapad(waypoint, self);
		}
	}

	quests.complete(questName, self, succeeded);
}

void setupWaypoint(obj_id self, int questRow)
{
	// attempt to generate a location and create a
	// waypoint in the player's datapad
	if(quests.isMyQuest(questRow, "quest.task.go_to_location"))
	{
		// this quest is a go_to_location, generate the target location
		location loc = quests.getLocationTarget(self, questRow);
		String questName = quests.getDataEntry(questRow, "NAME");
		if(loc != null)
		{
			// create a waypoint, save the waypoint id in an objvar
			// called quest.<questName>.waypoint so it can later
			// be destroyed when the player completes the task
			if(questName != null && questName.length() > 0)
			{
				string wp_objvar = "quest." + questName + ".waypoint";

				if(hasObjVar(self, wp_objvar))
					return;

				obj_id wp = createWaypointInDatapad(self, loc);

				// attempt to label the waypoint using the localized
				// summary text defined in the JOURNAL_ENTRY_SUMMARY
				// column of the quests data table
				String summary = quests.getDataEntry(questName, "JOURNAL_ENTRY_SUMMARY");
				if(summary != null && summary.length() > 0)
				{
					setWaypointName(wp, summary);
				}
				else
				{
					setWaypointName(wp, "missing task summary for " + questName);
				}

				setWaypointColor(wp, "yellow");
				setWaypointActive(wp, true);
				setObjVar(self, wp_objvar, wp);
			}
		}
		else
		{
			LOG("newquests", "failed to retrieve a location target for quest " + questName);
		}
	}
}

trigger OnLogin()
{
	// if the location was supposed to be randomly generated,
	// but the target planet was specified as something other
	// than the planet the quest was granted on, the
	// location generation must be deferred until the
	// player travels to the destination. Iterate through
	// the quests, get generate
	int rows = dataTableGetNumRows("datatables/player/quests.iff");
	int iter = 0;
	for(iter = 0; iter < rows; ++iter)
	{
		String questName = quests.getDataEntry(iter, "NAME");
		if(quests.isMyQuest(iter, "quest.task.go_to_location"))
		{
			if(quests.isActive(questName, self))
			{
				if(hasObjVar(self, "quest." + questName + ".generate"))
				{
					removeObjVar(self, "quest." + questName + ".generate");
					setupWaypoint(self, iter);
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnQuestActivated(int questRow)
{
	LOG("newquests", "go_to_location - OnQuestActivated(" + questRow + ")");
	if(quests.isMyQuest(questRow, "quest.task.go_to_location"))
	{
		LOG("newquests", "go_to_location attempting to generate waypoint");
		setupWaypoint(self, questRow);
	}
	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string locationName)
{
	if(quests.isActive(locationName, self))
	{
		LOG("newquests", "go_to_location arrived at " + locationName);
		completeTask(self, locationName, true);
	}

	return SCRIPT_CONTINUE;
}
