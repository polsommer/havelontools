// ================================================================================
//
// spawn_on_ship.script
// copyright 2006, Sony Online Entertainment LLC
//
// The script for managing ships dynamically spawned by the quest system.
//
// ================================================================================

include library.ship_ai;
include quest.task.ground.spawn;

const int maxRetries = 5;
const String retryCountName = "retryCount";

// --------------------------------------------------------------------------------

trigger OnAttach()
{
	messageTo( self, "pendingWarp", null, spawn.cleanupTime, false );

	return SCRIPT_CONTINUE;
}

// --------------------------------------------------------------------------------

messageHandler spawnAttackPlayerShip()
{
	obj_id playerShip = params.getObjId ("player");

	LOG("QUEST_SPAWN_LOG", "Attack! " + playerShip + ":" + self);

	ship_ai.spaceAttack(self, playerShip);

	return SCRIPT_CONTINUE;
}

// --------------------------------------------------------------------------------

messageHandler pendingWarp()
{
	if (ship_ai.spaceIsInCombat(self))
	{
		int retryCount = params.getInt(retryCountName) + 1;

		if (retryCount <= maxRetries)
		{
			LOG("QUEST_SPAWN_LOG", "Ship in combat - trying again. retryCount = " + retryCount + "/" + maxRetries);

			params.put(retryCountName, retryCount);
			messageTo(self, "pendingWarp", params, spawn.cleanupRetryTime, false);
		}
		else
			LOG("QUEST_SPAWN_LOG", "Ship in combat - no more retries left.");

		return SCRIPT_CONTINUE;
	}

	LOG("QUEST_SPAWN_LOG", "Destroying self = " + self);
	destroyObjectHyperspace(self);

	return SCRIPT_CONTINUE;
}

// --------------------------------------------------------------------------------

messageHandler objectDestroyed()
{
	return SCRIPT_CONTINUE;
}

// --------------------------------------------------------------------------------

messageHandler missionAbort()
{
	return SCRIPT_CONTINUE;
}

// --------------------------------------------------------------------------------

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

// ================================================================================
