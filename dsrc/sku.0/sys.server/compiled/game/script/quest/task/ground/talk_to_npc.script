include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const String dataTableColumnExperienceType   = "NPC_NAME";

const String taskType = "talk_to_npc";
const String dot = ".";
const String objvarNPCName = "npcName";

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", taskType + "task activated.");

	//gather data for this task
	String npcName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnExperienceType);

	//store objvar data for this task type
	String baseObjVar = groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	setObjVar(self, baseObjVar + dot + objvarNPCName, npcName);

	groundquests.questOutputDebugInfo(self, taskType, "OnStartConversation", "Player must talk to " + npcName + ".");

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnStartConversation(obj_id conversant)
{	
	groundquests.questOutputDebugInfo(self, taskType, "OnStartConversation", "Checking for talk_to_npc quest task completion.");
	
	String name = getName(conversant);

	//get the base objvar for talk_to_npcs quests, all data is under that
	String taskObjVarName = groundquests.getTaskTypeObjVar(self, taskType);
	if(taskObjVarName != null)
	{
		//get the list of talk_to_npcs quests
		obj_var_list questList = getObjVarList(self, taskObjVarName);
		if(questList != null)
		{
			int countQuests = questList.getNumItems();
			//for each talk_to_npcs quest, see if it cares about this object
			for (int i = 0; i < countQuests; ++i)
			{
				obj_var ov = questList.getObjVar(i);
				string questName = ov.getName();
				int questCrc = questGetQuestId(questName);

				String questObjVarName = taskObjVarName + dot + questName;
				if(hasObjVar(self, questObjVarName))
				{
					//get the list of tasks for this quest that are talk_to_npcs
					obj_var_list taskList = getObjVarList(self, questObjVarName);
					if(taskList != null)
					{
						int countTasks = taskList.getNumItems();
						for (int j = 0; j < countTasks; ++j)
						{
							obj_var ov2 = taskList.getObjVar(j);
							string taskName = ov2.getName();
							int taskId = utils.stringToInt(taskName);

							//get the spawn list for this talk_to_npcs task
							String nameObjVarName = questObjVarName + dot + taskName + dot + objvarNPCName;
							if(hasObjVar(self, nameObjVarName))
							{
								String npcName = getStringObjVar(self, nameObjVarName);
								if(name == npcName)
								{
									groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnStartConversation", "Target NPC " + npcName + " found.");
									questCompleteTask(questGetQuestId(questName), utils.stringToInt(taskName), self);
								}
								else
								{
									groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnStartConversation", "NPC spoken to (" + name + ") does not match target (" + npcName + ").");
								}
							}
						}
					}
				}
			}
		}
	}





	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + "task completed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is failed
trigger OnTaskFailed(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + "task failed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnTaskCleared(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + " task cleared.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	//clear tracking objvars
	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
