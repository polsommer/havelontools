include library.ai_lib;
include library.chat;
include library.prose;
include library.trial;
include library.utils;


const boolean LOGGING					= false;


trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	
	trial.setInterest(self);
	
	messageTo(self, "waveEventCheckForUtterance", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler waveEventCheckForUtterance()
{
	if ( utils.hasScriptVar(self, "waveEventUtterance") )
	{
		string utterance =  utils.getStringScriptVar(self, "waveEventUtterance");
		obj_id player = utils.getObjIdScriptVar(self, "waveEventPlayer");
		
		if ( isIdValid(player) )
		{
			string playerName = getName(player);
			if ( playerName != null && playerName.length() > 0 )
			{
				prose_package pp = new prose_package ();
				pp.stringId = utils.unpackString(utterance);
				prose.setTO(pp, playerName);

				chat.publicChat(self, player, null, null, pp);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id parent = trial.getParent(self);
	dictionary webster = new dictionary();
	webster.put("waveEventChild", self);
	
	messageTo(parent, "waveEventChildDestroyed", webster, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	if ( isInvulnerable(self) )
	{
		obj_id parent = trial.getParent(self);
		dictionary webster = new dictionary();
		webster.put("waveEventChild", self);

		messageTo(parent, "waveEventChildDestroyed", webster, 1, false);
	}
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	//trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/ai_controller/"+section, message);	
}