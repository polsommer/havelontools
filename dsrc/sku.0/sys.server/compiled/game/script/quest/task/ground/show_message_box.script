// ---------------------------------------------------------------------

include library.groundquests;
include library.sui;
include library.utils;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const String dataTableColumnMessageBoxTitle = "MESSAGE_BOX_TITLE";
const String dataTableColumnMessageBoxText = "MESSAGE_BOX_TEXT";
const String dataTableColumnMessageBoxSound = "MESSAGE_BOX_SOUND";
const String dataTableColumnMessageBoxSizeWidth = "MESSAGE_BOX_SIZE_WIDTH";
const String dataTableColumnMessageBoxSizeHeight = "MESSAGE_BOX_SIZE_HEIGHT";
const String dataTableColumnMessageBoxLocationX = "MESSAGE_BOX_LOCATION_X";
const String dataTableColumnMessageBoxLocationY = "MESSAGE_BOX_LOCATION_Y";

const String taskType = "show_message_box";

const int defaultMessageBoxSizeWidth = 384;
const int defaultMessageBoxSizeHeight = 256;
const int defaultMessageBoxLocationX = 320;
const int defaultMessageBoxLocationY = 256;

// ---------------------------------------------------------------------

String getQuestCrcVarName(int pageId)
{
	return taskType + ".questCrc." + pageId;
}

// ---------------------------------------------------------------------

String getTaskIdVarName(int pageId)
{
	return taskType + ".taskId." + pageId;
}

// ---------------------------------------------------------------------

void displayMessageBox(obj_id player, int questCrc, int taskId)
{
	//gather data for this task
	String messageBoxTitle = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnMessageBoxTitle);
	String messageBoxText = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnMessageBoxText);
	String messageBoxSound = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnMessageBoxSound);
	int messageBoxSizeWidth = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableColumnMessageBoxSizeWidth);
	int messageBoxSizeHeight = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableColumnMessageBoxSizeHeight);
	int messageBoxLocationX = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableColumnMessageBoxLocationX);
	int messageBoxLocationY = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableColumnMessageBoxLocationY);

	int pageId = sui.createSUIPage(sui.SUI_MSGBOX, player, player, "QuestShowMessageBoxCompleted");

	//do not save the position and size settings for this window
	sui.setAutosaveProperty(pageId, false);

	//size
	if (messageBoxSizeWidth != -1 && messageBoxSizeHeight != -1)
	{
		sui.setSizeProperty(pageId, messageBoxSizeWidth, messageBoxSizeHeight);
	}
	else
	{
		sui.setSizeProperty(pageId, defaultMessageBoxSizeWidth, defaultMessageBoxSizeHeight);
	}

	//location
	if (messageBoxLocationX != -1 && messageBoxLocationY != -1)
	{
		sui.setLocationProperty(pageId, messageBoxLocationX, messageBoxLocationY);
	}
	else
	{
		sui.setLocationProperty(pageId, defaultMessageBoxLocationX, defaultMessageBoxLocationY);
	}

	//sound
	if (messageBoxSound != null && messageBoxSound.length() > 0)
	{
		sui.setSoundProperty(pageId, messageBoxSound);
	}

	setSUIProperty(pageId, sui.MSGBOX_TITLE, sui.PROP_TEXT, messageBoxTitle);
	setSUIProperty(pageId, sui.MSGBOX_PROMPT, sui.PROP_TEXT, messageBoxText);

	sui.msgboxButtonSetup(pageId, sui.OK_ONLY);
	sui.showSUIPage(pageId);

	//store crc and task id using the unique page id for later reference in the message handler
	utils.setScriptVar(player, getQuestCrcVarName(pageId), questCrc);
	utils.setScriptVar(player, getTaskIdVarName(pageId), taskId);

	groundquests.questOutputDebugLog(taskType, "displayMessageBox", "pageId = " + pageId);
}

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", taskType + "task activated.");

	displayMessageBox(self, questCrc, taskId);

	groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

messageHandler QuestShowMessageBoxCompleted()
{
	int pageId = params.getInt("pageId");
	if(pageId < 0)
		return SCRIPT_CONTINUE;

	int questCrc = utils.getIntScriptVar(self, getQuestCrcVarName(pageId));
	int taskId = utils.getIntScriptVar(self, getTaskIdVarName(pageId));

	if(questIsTaskActive(questCrc, taskId, self))
		questCompleteTask(questCrc, taskId, self);

	utils.removeScriptVar(self, getQuestCrcVarName(pageId));
	utils.removeScriptVar(self, getTaskIdVarName(pageId));

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + "task completed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskFailed(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + "task failed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is cleared
trigger OnTaskCleared(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + "task cleared.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

commandHandler handleClientLogin()
{
	groundquests.questOutputDebugLog(taskType, "handleClientLogin", "start");

	dictionary tasks = groundquests.getActiveTasksForTaskType(self, taskType);
	if ((tasks != null) && !tasks.isEmpty())
	{
		java.util.Enumeration keys = tasks.keys();

		groundquests.questOutputDebugLog(taskType, "handleClientLogin", "task count = " + tasks.size());

		while (keys.hasMoreElements())
		{
			String questCrcString = (string)keys.nextElement();
			int questCrc = utils.stringToInt(questCrcString);

			int[] tasksForCurrentQuest = tasks.getIntArray(questCrcString);

			for(int i = 0; i < tasksForCurrentQuest.length; ++i)
			{
				int taskId = tasksForCurrentQuest[i];

				displayMessageBox(self, questCrc, taskId);
			}
		}
	}

	groundquests.questOutputDebugLog(taskType, "handleClientLogin", "end");

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
