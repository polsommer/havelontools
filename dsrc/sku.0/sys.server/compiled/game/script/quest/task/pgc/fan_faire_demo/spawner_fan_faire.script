include library.utils;
include library.ai_lib;
include library.space_utils;
include library.spawning;
include library.create;


trigger OnAttach()
{
	//LOG("spawning", "ONATTACACHA!");
	if (!hasObjVar(self, "registerWithController"))
		setObjVar(self, "registerWithController", 1);
	
	if (hasObjVar(self, "what_to_spawn"))
		setName(self, "Fan Faire Spawner: "+getStringObjVar(self, "what_to_spawn"));

	if (canSpawnByConfigSetting())
		messageTo(self, "doSpawnEvent", null, 20, false);

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	//LOG("spawning", "ONINITN");
	if (!hasObjVar(self, "registerWithController"))
		setObjVar(self, "registerWithController", 1);
	
	if (hasObjVar(self, "what_to_spawn"))
		setName(self, "Fan Faire Spawner: "+getStringObjVar(self, "what_to_spawn"));

	if (canSpawnByConfigSetting())
		messageTo(self, "doSpawnEvent", null, 20, false);

	return SCRIPT_CONTINUE;
}


messageHandler doSpawnEvent()
{
	if( utils.hasScriptVar(self, "spawned") )
	{
		return SCRIPT_CONTINUE;
	}

	string spawnType = getStringObjVar(self, "what_to_spawn");	

	if( spawnType == null || spawnType.length() < 1 )
	{
		setName(self, "Mangled spawner. spawnType is " + spawnType + ".");
		return SCRIPT_CONTINUE;
	}

	location locTest = getLocation(self);
	createMob(spawnType, locTest, self);

	return SCRIPT_CONTINUE;
}


void  createMob(string spawnType, location locLocation, obj_id self)
{
	if( utils.hasScriptVar(self, "spawned") )
	{
		return;
	}

	float spawnerYaw = getYaw(self);

	// SPAWN@!@!@!@!@!
	float minRespawnTime = 9.0f;
	float maxRespawnTime = 19.0f;
	float respawnTime = rand(minRespawnTime, maxRespawnTime);

	obj_id objMob = create.object(spawnType, locLocation);
	if(!isIdValid(objMob))
	{
		setName(self , "BAD MOB OF TYPE "+spawnType);
		return;
	}
	
	int stringCheck = spawnType.indexOf("kreetle");
	if ( stringCheck > -1 )
	{
		ai_lib.setDefaultCalmBehavior(objMob, ai_lib.BEHAVIOR_LOITER);
	}
	else
	{
		ai_lib.setDefaultCalmBehavior(objMob, ai_lib.BEHAVIOR_SENTINEL);
	}

	setObjVar(objMob, "objParent", self);
	setObjVar(objMob, "fltRespawnTime", respawnTime);
	attachScript(objMob, "systems.spawning.spawned_tracker");

	setYaw(objMob, spawnerYaw);

	utils.setScriptVar(self, "spawned", objMob);
	
	if ( spawnType.equals("c_3po") )
	{
		attachScript(objMob, "conversation.fan_faire_pgc_c3po");
	}
	else
	{
		attachScript(objMob, "quest.task.pgc.fan_faire_demo.quest_pinata");
	}
	
	return;


}


messageHandler spawnDestroyed()
{
	utils.removeScriptVar(self, "spawned");
	messageTo(self, "doSpawnEvent", null, 2, false);
	return SCRIPT_CONTINUE;

}

boolean canSpawnByConfigSetting()
{
	string disableSpawners = getConfigSetting("GameServer", "disableAreaSpawners");
	if (disableSpawners == null)
		return true;

	if (disableSpawners.equals("true") || disableSpawners.equals("1"))
		return false;

	return true;
}

//Destroy spawned objects when spawner is destroyed.
trigger OnDestroy()
{
	if ( utils.hasScriptVar(self, "spawned") )
	{
		obj_id spawned = utils.getObjIdScriptVar(self, "spawned");
		messageTo(spawned, "selfDestruct", null, 5, false);
	}
	return SCRIPT_CONTINUE;
}