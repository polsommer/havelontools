include ai.ai_combat;
include library.ai_lib;
include library.quests;
include library.create;
include library.groundquests;
include library.locations;
include library.prose;
include library.utils;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const String dataTableColumnServerTemplate      = "SERVER_TEMPLATE";
const String dataTableColumnDestinationNodeName = "DESTINATION_NODE_NAME";
const String dataTableColumnMovementType        = "MOVEMENT_TYPE";

const String objvarEscortTarget  = "target";
const String objvarBeenWarnedDistance = "beenWarned";

const String scriptNameEscortOnTarget = "quest.task.ground.escort_on_target";

const String taskType = "escort";
const String dot = ".";

const float escortDistanceTimeCheck = 10;
const float maximumAllowedDistance  = 25;
const float cleanupTime             = 120;

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", taskType + " task activated.");

	String baseObjVar = groundquests.setBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);

	//gather data for this task
	String serverTemplate      = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnServerTemplate);
	String destinationNodeName = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnDestinationNodeName);
	String movementType        = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnMovementType);

	location l = groundquests.getRandom2DLocationAroundPlayer(self, 5, 15);
	obj_id escortTarget = create.createCreature(serverTemplate, l, true);
	attachScript(escortTarget, scriptNameEscortOnTarget);

	setMaster(escortTarget, self);
	ai_lib.aiFollow(escortTarget, self, 1.0f, 8.0f);

	groundquests.addDestroyNotification(escortTarget, self);

	setObjVar(self, baseObjVar + dot + objvarEscortTarget, escortTarget);

	//set up first distance check pulse
	dictionary distanceCheckParams = new dictionary();
	distanceCheckParams.put("player", self);
	distanceCheckParams.put("escortTarget", escortTarget);
	distanceCheckParams.put("questCrc", questCrc);
	distanceCheckParams.put("taskId", taskId);
	messageTo(self, "messageEscortCheckDistance", distanceCheckParams, escortDistanceTimeCheck, false);

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

messageHandler destroyNotification()
{
	if(params != null)
	{
		obj_id source = params.getObjId("source");

		//get the base objvar for quests, all data is under that
		String taskObjVarName = groundquests.getTaskTypeObjVar(self, taskType);
		if(taskObjVarName != null)
		{
			//get the list of quests
			obj_var_list questList = getObjVarList(self, taskObjVarName);
			if(questList != null)
			{
				int countQuests = questList.getNumItems();
				//for each quest, check each task
				for (int i = 0; i < countQuests; ++i)
				{
					obj_var ov = questList.getObjVar(i);
					string questName = ov.getName();
					int questCrc = questGetQuestId(questName);

					String questObjVarName = taskObjVarName + dot + questName;
					if(hasObjVar(self, questObjVarName))
					{
						//get the list of tasks for this quest that are of the right taskType
						obj_var_list taskList = getObjVarList(self, questObjVarName);
						if(taskList != null)
						{
							int countTasks = taskList.getNumItems();
							for (int j = 0; j < countTasks; ++j)
							{
								obj_var ov2 = taskList.getObjVar(j);
								string taskName = ov2.getName();
								int taskId = utils.stringToInt(taskName);

								//check the data specific to this task type
								String escortTargetObjVarName = questObjVarName + dot + taskName + dot + objvarEscortTarget;
								if(hasObjVar(self, escortTargetObjVarName))
								{
									obj_id escortTarget = getObjIdObjVar(self, escortTargetObjVarName);
									if(source == escortTarget)
									{
										questFailTask(questCrc, taskId, self);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

messageHandler messageEscortCheckDistance()
{
	obj_id player       = params.getObjId("player");
	obj_id escortTarget = params.getObjId("escortTarget");
	int questCrc        = params.getInt  ("questCrc");
	int taskId          = params.getInt  ("taskId");
	
	if ( questIsTaskActive(questCrc, taskId, player) )
	{
		String baseObjVar = groundquests.getBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
		if(isEscortNearby(questCrc, taskId, player, escortTarget))
		{
			if(hasObjVar(player, baseObjVar + objvarBeenWarnedDistance))
				removeObjVar(player, baseObjVar + objvarBeenWarnedDistance);
		}
		else
		{
			failEscortDistanceCheck(player, questCrc, taskId, escortTarget);
		}

		//re-set follow, this is necessary since going incap causes follow to break.  This ensures that they'll re-follow you (after up to escortDistanceTimeCheck seconds)
		ai_lib.aiFollow(escortTarget, self, 1.0f, 8.0f);
		//send message for next pulse
		//this is not an infinite loop because it checks distance each time, and fails the task if the distance check fails twice in a row
		messageTo(self, "messageEscortCheckDistance", params, escortDistanceTimeCheck, false);
	}

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

boolean isEscortNearby(int questCrc, int taskId, obj_id player, obj_id escortTarget)
{
	boolean result = false;
	if(isIdValid(player) && isIdValid(escortTarget))
	{
		result = getDistance(player, escortTarget) <= maximumAllowedDistance;
	}
	return result;
}

// ---------------------------------------------------------------------

void failEscortDistanceCheck(obj_id player, int questCrc, int taskId, obj_id escortTarget)
{
	String baseObjVar = groundquests.getBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
	if(!hasObjVar(player, baseObjVar + objvarBeenWarnedDistance))
	{
		//set objvar and warn player
		setObjVar(player, baseObjVar + objvarBeenWarnedDistance, "true");

		string_id message = new string_id ("quest/groundquests", "static_escort_distance_warning");
		prose_package pp = prose.getPackage(message, player, player, 0);
		prose.setDF(pp, escortDistanceTimeCheck);
		sendSystemMessageProse(player, pp);
	}
	else
	{
		string_id message = new string_id ("quest/groundquests", "static_escort_failed_due_to_distance");
		prose_package pp = prose.getPackage(message, player, player, 0);
		sendSystemMessageProse(player, pp);

		questFailTask(questCrc, taskId, player);
	}
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + " task completed.");

	String baseObjVar = groundquests.getBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	obj_id escort = getObjIdObjVar(self, baseObjVar + dot + objvarEscortTarget);

	ai_lib.aiStopFollowing(escort);

	cleanup(self, questCrc, taskId);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is failed
trigger OnTaskFailed(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + " task failed.");

	String baseObjVar = groundquests.getBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	obj_id escort = getObjIdObjVar(self, baseObjVar + dot + objvarEscortTarget);

	ai_lib.aiStopFollowing(escort);
	
	cleanup(self, questCrc, taskId);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is cleared
trigger OnTaskCleared(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + " task cleared.");

	String baseObjVar = groundquests.getBaseObjVar(self, taskType, questGetQuestName(questCrc), taskId);
	obj_id escort = getObjIdObjVar(self, baseObjVar + dot + objvarEscortTarget);

	ai_lib.aiStopFollowing(escort);

	cleanup(self, questCrc, taskId);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	// destroy the escort target
	String baseObjVar = groundquests.getBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
	String escortTargetObjVarName = baseObjVar + dot + objvarEscortTarget;

	obj_id escortTarget = getObjIdObjVar(player, escortTargetObjVarName);

	if (escortTarget != null)
	{
		removeObjVar(player, escortTargetObjVarName);
		if(!ai_lib.isAiDead(escortTarget))
		{
			//cleanup live escort targets after 2 minutes
			dictionary params = new dictionary();
			messageTo(escortTarget, "messageEscortCleanup", params, cleanupTime, false);
			ai_lib.aiStopFollowing(escortTarget);
		}
	}

	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

trigger OnLogout()
{
	groundquests.failAllActiveTasksOfType(self, taskType);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnInitialize()
{
	groundquests.failAllActiveTasksOfType(self, taskType);
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
