
include library.create;
include library.groundquests;
include library.prose;
include library.spawning;
include library.stealth;
include library.sui;
include library.trial;
include library.utils;

const String dataTableWaveEventPrimaryTargetPre	= "PRIMARY_TARGET_WAVE_";
const String dataTableWaveEventGuardPre			= "GUARDS_SPAWNED_WAVE_";
const String dataTableWaveEventNumGuardsPre		= "NUM_GUARDS_WAVE_";
const String dataTableWaveEventDelayPre			= "DELAY_WAVE_";
const String dataTableWaveEventRadiusPre		= "RADIUS_WAVE_";
const String dataTableWaveEventUtterancePre		= "UTTERANCE_WAVE_";
const String dataTableWaveEventStartMessage		= "START_MESSAGE";

const String TASK_TYPE 							= "wave_event";

const String WAVE_SCRIPT_VAR					= "waveEventCurrentWave";
const String PLAYER_SCRIPT_VAR					= "waveEventPlayer";
const String CHILDRENLIST_SCRIPT_VAR			= "waveEventChildrenList";



const boolean	LOGGING				= false;

trigger OnObjectMenuRequest (obj_id player, menu_info menuInfo)
{
	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	int menu = menuInfo.addRootMenu(menu_info_types.ITEM_USE, new string_id("ui_radial", "item_use"));
	
	if ( isGod(player) )
		menu = menuInfo.addRootMenu(menu_info_types.SERVER_MENU1, new string_id("ui_radial", "wave_event_reset"));

	if(hasScript(player, "quest.task.ground.wave_event_player"))
	{
		if(groundquests.playerNeedsToRetrieveThisItem(player, self, TASK_TYPE))
		{
			String menuText = groundquests.getRetrieveMenuText(player, self, TASK_TYPE);
			string_id menuStringId = utils.unpackString(menuText);

			if ( isMob(self)  )
			{
				menu = menuInfo.addRootMenu (menu_info_types.CONVERSE_START, menuStringId);
			}
			else
			{
				menu = menuInfo.addRootMenu (menu_info_types.ITEM_USE, menuStringId);
			}
		}
	}

	menu_info_data menuInfoData = menuInfo.getMenuItemById (menu);

	if ( menuInfoData != null )
	{
 		menuInfoData.setServerNotify(true);
 	}
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if( item == menu_info_types.ITEM_USE )
	{
		if(hasScript(player, "quest.task.ground.wave_event_player"))
		{
			if(groundquests.playerNeedsToRetrieveThisItem(player, self, TASK_TYPE))
			{
				if ( groundquests.gcwActiveDutyCheck(self, player) )
				{
					int countdownTimer = groundquests.getQuestCountdownTime(player, self);
					if ( countdownTimer > 0 )
					{
						String menuText = groundquests.getRetrieveMenuText(player, self, TASK_TYPE);
						string_id menuStringId = utils.unpackString(menuText);

						string handler = "handleQuestCountdownTimer";
						int startTime = 0;
						int range = 3;

						int flags = 0;
						//flags |= sui.CD_EVENT_LOCOMOTION;
						flags |= sui.CD_EVENT_INCAPACITATE;
						flags |= sui.CD_EVENT_DAMAGED;

						stealth.testInvisNonCombatAction(player, self);

						int countdownSui = sui.smartCountdownTimerSUI(self, player, "quest_countdown_timer", menuStringId, startTime, countdownTimer, handler, range, flags);
					}
					else
					{
						// Don't start a wave event if another is already in progress
						if ( utils.hasScriptVar(self, WAVE_SCRIPT_VAR) )
						{
							int wave = utils.getIntScriptVar(self, WAVE_SCRIPT_VAR);
							if ( wave > 0 )
							{
								sendSystemMessage(player, new string_id("quest/groundquests", "wave_event_already_underway"));
								return SCRIPT_CONTINUE;
							}
						}

						waveEventBegin(self, player);
					}
				}
				else
				{
					sendSystemMessage(player, new string_id("quest/groundquests", "retrieve_item_not_active_duty"));
				}

				return SCRIPT_CONTINUE;
			}
		}
	}
	
	if( item == menu_info_types.SERVER_MENU1 )
	{
		if ( isGod(player) )
		{
			sendSystemMessage(player, "Reseting wave event controller...", "");
			clearEventArea(self);
			return SCRIPT_CONTINUE;
		}
	}
	
	sendSystemMessage(player, new string_id("quest/groundquests", "retrieve_item_no_interest"));
	return SCRIPT_CONTINUE;
}

messageHandler handleQuestCountdownTimer()
{
 	int pid = params.getInt("id");
	obj_id player = params.getObjId("player");

	if( !isIdValid(player) )
	{
		return SCRIPT_CONTINUE;
	}	

	int bp = sui.getIntButtonPressed(params);

	// Cancel button is sent when player manually closes the countdown window,
	// or when he/she moves out of range.
	if(bp == sui.BP_CANCEL)
	{
		detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);
		return SCRIPT_CONTINUE;
	}
	
	else if(bp == sui.BP_REVERT)
	{
		// Gets the reason why the timer was aborted
		int event = params.getInt("event");

		// You can handle the situation differently depending on the reason
		if(event == sui.CD_EVENT_LOCOMOTION)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_locomotion"));
		}
		else if(event == sui.CD_EVENT_INCAPACITATE)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_incapacitated"));
		}
		else if(event == sui.CD_EVENT_DAMAGED)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_damaged"));
		}

		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR))
		return SCRIPT_CONTINUE;

	int test_pid = getIntObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR);

	if(pid != test_pid)
	{
		return SCRIPT_CONTINUE;
	}

	forceCloseSUIPage(pid);
	detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);

	// Don't start a wave event if another is already in progress
	if ( utils.hasScriptVar(self, WAVE_SCRIPT_VAR) )
	{
		int wave = utils.getIntScriptVar(self, WAVE_SCRIPT_VAR);
		if ( wave > 0 )
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "wave_event_already_underway"));
			return SCRIPT_CONTINUE;
		}
	}
	
	// Start Wave Event
	waveEventBegin(self, player);
	return SCRIPT_CONTINUE;
}

void waveEventBegin(obj_id self, obj_id player)
{	
	int wave = 1;
	float delay = waveEventGetWaveDelay(self, player, wave);
	
	if ( delay > -1 )
	{
		clearEventArea(self);
		
		dictionary webster = trial.getSessionDict(self);
		// reset the wave event in 10 minutes if the player has not completed it
		messageTo(self, "defaultEventReset", webster, 600, false);
		
		utils.setScriptVar(self, WAVE_SCRIPT_VAR, wave);
		utils.setScriptVar(self, PLAYER_SCRIPT_VAR, player);
		
		prose_package pp = new prose_package ();
		pp.stringId = new string_id("quest/groundquests", "wave_event_starting");

		dictionary questData = getwaveEventQuestData(self, player);
		if ( questData != null && !questData.isEmpty() )
		{
			boolean taskFound = questData.getBoolean("waveEventTaskFound");
			if ( taskFound )
			{
				int questCrc = questData.getInt("waveEventQuestCrc");
				int taskId = questData.getInt("waveEventTaskId");
				String newMsg = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableWaveEventStartMessage);
				if( newMsg != null && !newMsg.equals("") )
				{
					pp.stringId = utils.unpackString(newMsg);
				}
			}
		}
		
		sendSystemMessageProse(player, pp);

		messageTo(self, "waveEventSpawnNextWave", webster, delay, false);
		
		if ( hasObjVar(self, "questFlavorObject") )
		{
			messageTo(self, "handleQuestFlavorObject", null, 0, false);
		}
	}
	
	return;
}

dictionary getwaveEventQuestData(obj_id self, obj_id player)
{
	dictionary webster = new dictionary();
	
	int questCrc = -1;
	int taskId = -1;
	boolean taskFound = false;
	String itemTemplateName = getTemplateName(self);
	
	dictionary tasks = groundquests.getActiveTasksForTaskType(player, TASK_TYPE);
	if ((tasks != null) && !tasks.isEmpty())
	{
		java.util.Enumeration keys = tasks.keys();
		while (keys.hasMoreElements() || !taskFound )
		{
			String questCrcString = (string)keys.nextElement();
			int tempQuestCrc = utils.stringToInt(questCrcString);
			int[] tasksForCurrentQuest = tasks.getIntArray(questCrcString);

			for(int i = 0; i < tasksForCurrentQuest.length; ++i)
			{
				int tempTaskId = tasksForCurrentQuest[i];
				String baseObjVar = groundquests.getBaseObjVar(player, TASK_TYPE, questGetQuestName(tempQuestCrc), tempTaskId);
				String retrieveTemplateName = groundquests.getTaskStringDataEntry(tempQuestCrc, tempTaskId, "SERVER_TEMPLATE");
				if( retrieveTemplateName != null && itemTemplateName == retrieveTemplateName )
				{
					questCrc = tempQuestCrc;
					taskId = tempTaskId;
					taskFound = true;
				}
			}
		}
	}
	
	webster.put("waveEventTaskFound", taskFound);
	webster.put("waveEventQuestCrc", questCrc);
	webster.put("waveEventTaskId", taskId);
	
	return webster;
}

float waveEventGetWaveDelay(obj_id self, obj_id player, int wave)
{
	int delay = -1;
	
	dictionary webster = getwaveEventQuestData(self, player);
	if ( webster != null && !webster.isEmpty() )
	{
		boolean taskFound = webster.getBoolean("waveEventTaskFound");
		if ( taskFound )
		{
			int questCrc = webster.getInt("waveEventQuestCrc");
			int taskId = webster.getInt("waveEventTaskId");
			String dataTableWaveEventDelay = dataTableWaveEventDelayPre + wave;
			delay = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableWaveEventDelay);
		}
	}
	return delay;
}

messageHandler waveEventSpawnNextWave()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
		
	int wave = utils.getIntScriptVar(self, WAVE_SCRIPT_VAR);
	obj_id player = utils.getObjIdScriptVar(self, PLAYER_SCRIPT_VAR);
	
	if ( !isValidId(player) )
	{
		messageTo(self, "cleanupEvent", null, 2, false);
		return SCRIPT_CONTINUE;
	}
	
	dictionary webster = getwaveEventQuestData(self, player);
	if ( webster != null && !webster.isEmpty() )
	{
		boolean taskFound = webster.getBoolean("waveEventTaskFound");
		if ( taskFound )
		{
			int questCrc = webster.getInt("waveEventQuestCrc");
			int taskId = webster.getInt("waveEventTaskId");
			
			// Spawn the primary wave target for this wave
			String dataTableWaveEventPrimaryTarget = dataTableWaveEventPrimaryTargetPre + wave;
			String waveEventPrimaryTarget = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableWaveEventPrimaryTarget);
			
			if( waveEventPrimaryTarget != null && waveEventPrimaryTarget.length() > 0 )
			{
				String dataTableWaveEventRadius = dataTableWaveEventRadiusPre + wave;
				float radius = groundquests.getTaskFloatDataEntry(questCrc, taskId, dataTableWaveEventRadius);
				location spawnLoc = spawning.getRandomLocationAtDistance(getLocation(self), radius);

				obj_id spawnedPrimaryTarget = create.object(waveEventPrimaryTarget, spawnLoc);
				if (!isIdValid(spawnedPrimaryTarget))
				{
					// The primary target was not valid, so clean up the event.
					messageTo(self, "cleanupEvent", null, 2, false);
					return SCRIPT_CONTINUE;
				}
				
				setHibernationDelay(spawnedPrimaryTarget, 3600.0f);

				trial.setParent(self, spawnedPrimaryTarget, true);
				trial.setInterest(spawnedPrimaryTarget);

				String dataTableWaveEventUtterance = dataTableWaveEventUtterancePre + wave;
				String utterance = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableWaveEventUtterance);
				if( utterance != null && utterance.length() > 0 )
				{
					utils.setScriptVar(spawnedPrimaryTarget, "waveEventUtterance", utterance);
					utils.setScriptVar(spawnedPrimaryTarget, "waveEventPlayer", player);
				}
				
				attachScript(spawnedPrimaryTarget, "quest.task.ground.wave_event_on_creature");
				
				resizeable obj_id[] waveEventChildrenList = new obj_id[0];
				utils.addElement (waveEventChildrenList, spawnedPrimaryTarget);
				utils.setScriptVar(self, CHILDRENLIST_SCRIPT_VAR, waveEventChildrenList);
				
			
				// Spawn guards for this wave
				String dataTableWaveEventGuard = dataTableWaveEventGuardPre + wave;
				String waveEventGuard = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableWaveEventGuard);
				if( waveEventGuard != null && waveEventGuard.length() > 0 )
				{
					String dataTableWaveEventNumGuards = dataTableWaveEventNumGuardsPre + wave;
					int waveEventNumGuards = groundquests.getTaskIntDataEntry(questCrc, taskId, dataTableWaveEventNumGuards);
					if ( waveEventNumGuards > 0 )
					{
						for ( int i = 0; i < waveEventNumGuards; i++ )
						{
							location guardLoc = spawning.getRandomLocationAtDistance(getLocation(self), radius);
							obj_id spawnedGuard = create.object (waveEventGuard, guardLoc);
							if (!isIdValid(spawnedGuard))
							{
								return SCRIPT_CONTINUE;
							}
							setHibernationDelay(spawnedGuard, 3600.0f);

							trial.setParent(self, spawnedGuard, true);
							trial.setInterest(spawnedGuard);

							attachScript(spawnedGuard, "quest.task.ground.wave_event_on_creature");

							if (!utils.hasScriptVar(self, CHILDRENLIST_SCRIPT_VAR))
							{
								// Something happened to the list of previously spawned children and 
								// the primary target. That's not good, so clean up the event.
								messageTo(self, "cleanupEvent", null, 2, false);
								return SCRIPT_CONTINUE;
							}
							
							waveEventChildrenList = utils.getResizeableObjIdArrayScriptVar(self, CHILDRENLIST_SCRIPT_VAR);
							if ( waveEventChildrenList != null )
							{
								utils.addElement (waveEventChildrenList, spawnedGuard);
								if ( waveEventChildrenList != null && waveEventChildrenList.length > 0  )
								{
									utils.setScriptVar(self, CHILDRENLIST_SCRIPT_VAR, waveEventChildrenList);
								}
							}
							else
							{
								// The list of previously spawned children returned as null. 
								// That's not good, so clean up the event.
								messageTo(self, "cleanupEvent", null, 2, false);
								return SCRIPT_CONTINUE;
							}
						}
					}
				}
			}
			else
			{
				groundquests.questOutputDebugInfo(self, TASK_TYPE, "waveEventSpawnNextWave", "No more waves to spawn...the wave event has ended.");
				messageTo(self, "cleanupEvent", null, 2, false);	
			}
		}
		else
		{
			groundquests.questOutputDebugInfo(self, TASK_TYPE, "waveEventSpawnNextWave", "No active wave event task was found for this player(" +player+") and this object("+getTemplateName(self)+").");
			messageTo(self, "cleanupEvent", null, 2, false);	
		}
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler waveEventChildDestroyed()
{
	if ( params != null && !params.isEmpty() )
	{
		obj_id player = utils.getObjIdScriptVar(self, PLAYER_SCRIPT_VAR);
		if ( isIdValid(player) )
		{
			obj_id child = params.getObjId("waveEventChild");
			if ( utils.hasScriptVar(self, CHILDRENLIST_SCRIPT_VAR) )
			{
				resizeable obj_id[] waveEventChildrenList = utils.getResizeableObjIdArrayScriptVar(self, CHILDRENLIST_SCRIPT_VAR);;
				if ( waveEventChildrenList != null )
				{
					if ( waveEventChildrenList.contains(child) )
					{
						waveEventChildrenList.removeElement(child);
					}
					
					if ( waveEventChildrenList.length > 0 )
					{
						// the current wave has not ended yet
						utils.setScriptVar(self, CHILDRENLIST_SCRIPT_VAR, waveEventChildrenList);
						return SCRIPT_CONTINUE;
					}
					else
					{
						//there are no more elements in waveEventChildrenList, so the wave has ended.
						// Time to start the next wave.
						utils.removeScriptVar(self, CHILDRENLIST_SCRIPT_VAR);

						int previousWave = utils.getIntScriptVar(self, WAVE_SCRIPT_VAR);
						int nextWave = previousWave + 1;

						float delay =  waveEventGetWaveDelay(self, player, nextWave);
						if ( delay > -1 )
						{
							dictionary webster = trial.getSessionDict(self);

							utils.setScriptVar(self, WAVE_SCRIPT_VAR, nextWave);

							messageTo(self, "waveEventSpawnNextWave", webster, delay, false);
							return SCRIPT_CONTINUE;
						}
					}
				}
			}
		}
	}
	
	// something was missing, so cleanup the event.
	messageTo(self, "cleanupEvent", null, 2, false);
	return SCRIPT_CONTINUE;
}

void spoutChildrenListScriptVar(obj_id self, obj_id player)
{
	if ( isGod(player) )
	{
		sendSystemMessage(player, "Spouting waveEventChildrenList scriptvar value...", "");
		resizeable obj_id[] testList = utils.getResizeableObjIdArrayScriptVar(self, CHILDRENLIST_SCRIPT_VAR);
		if ( testList != null )
		{
			for(int j=0; j<testList.length; j++)
			{
				sendSystemMessage(player, "testList["+j+"] = "+testList[j], "");
			}
		}
	}
}

messageHandler defaultEventReset()
{
	if (!trial.verifySession(self, params))
		return SCRIPT_CONTINUE;
	
	clearEventArea(self);
	return SCRIPT_CONTINUE;
}

messageHandler cleanupEvent()
{
	obj_id player = utils.getObjIdScriptVar(self, PLAYER_SCRIPT_VAR);
	
	if ( !isValidId(player) )
	{
		clearEventArea(self);
		return SCRIPT_CONTINUE;
	}
	
	dictionary webster = getwaveEventQuestData(self, player);
	if ( webster != null && !webster.isEmpty() )
	{
		boolean taskFound = webster.getBoolean("waveEventTaskFound");	
		if( taskFound && !hasObjVar(self, "waveEventDoNotComplete") )
		{
			int questCrc = webster.getInt("waveEventQuestCrc");
			int taskId = webster.getInt("waveEventTaskId");
			questCompleteTask(questCrc, taskId, player);
			
			groundquests.completeTaskForGroupMembersInRange(self, player, questCrc, taskId);
			
			clearEventArea(self, player, true);
			return SCRIPT_CONTINUE;
		}
	}
	
	clearEventArea(self);
	return SCRIPT_CONTINUE;
}

void clearEventArea(obj_id self)
{
	clearEventArea(self, obj_id.NULL_ID, false);
}

void clearEventArea(obj_id self, obj_id player, boolean taskCompleted)
{
	utils.setScriptVar(self, WAVE_SCRIPT_VAR, 0);
	utils.removeScriptVar(self, PLAYER_SCRIPT_VAR);
	utils.removeScriptVar(self, CHILDRENLIST_SCRIPT_VAR);
	trial.bumpSession(self);
	
	obj_id[] objects = trial.getChildrenInRange(self, self, 1000.0f);
	if (objects == null || objects.length == 0)
		return;

	for (int i=0;i<objects.length;i++)
	{
		obj_id child = objects[i];
		if ( isIdValid(child) && child != self && !isPlayer(child))
		{
			if ( !hasScript(child, "corpse.ai_corpse") )
			{
				trial.cleanupObject(child);
			}
		}
	}

	if ( hasObjVar(self, "questFlavorObject") )
	{
		dictionary webster = new dictionary();
		webster.put("taskCompleted", taskCompleted);
		webster.put("player", player);
		messageTo(self, "handleQuestFlavorObjectCleanup", webster, 0, false);
	}
	
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/wave_spawner/"+section, message);
}

