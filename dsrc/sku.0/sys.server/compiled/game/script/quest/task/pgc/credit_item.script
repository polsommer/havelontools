
include library.corpse;
include library.money;
include library.prose;
include library.utils;

trigger OnAttach()
{
	/*
	if ( !hasScript(self, "item.special.nomove") )
	{
		attachScript(self, "item.special.nomove");
	}
	setObjVar(self, "noTrade", true);
	*/
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int credits = getIntObjVar(self, "loot.cashAmount");

	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;
	names[idx] = "amount";
	attribs[idx] = Integer.toString(credits);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest (obj_id objPlayer, menu_info mi)
{
	mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("space/space_loot", "use_credit_chip"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	obj_id containingPlayer = utils.getContainingPlayer(self);
	if( !isIdValid(containingPlayer) || containingPlayer != player )
	{
		return SCRIPT_CONTINUE;
	}
	if ( item == menu_info_types.ITEM_USE )
	{
		int cash = getIntObjVar(self, "loot.cashAmount");
		money.bankTo("pgc_player_donated_credits", player, cash);
		
		string_id creditsMsg = new string_id ("saga_system","holocron_reward_credits_given");
		prose_package pp = prose.getPackage(creditsMsg, player, player);
		prose.setDI(pp, cash);
		sendSystemMessageProse(player, pp);
		
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}



