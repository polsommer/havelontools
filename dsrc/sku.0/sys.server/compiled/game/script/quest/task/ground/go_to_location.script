include library.groundquests;
include library.utils;

// ---------------------------------------------------------------------

inherits quest.task.ground.base_task;

// ---------------------------------------------------------------------

const String dataTableColumnPlanetName   = "PLANET_NAME";
const String dataTableColumnLocationX    = "LOCATION_X";
const String dataTableColumnLocationY    = "LOCATION_Y";
const String dataTableColumnLocationZ    = "LOCATION_Z";
const String dataTableColumnSphereSize   = "RADIUS";

const String objvarBase      = "quest.go_to_location";
const String objvarLocation  = "location";
const String objvarQuestName = "quest_name";
const String objvarTaskId    = "taskId";
const String dot             = ".";

const String taskType = "go_to_location";

const String JOURNAL_UPDATED_MUSIC    = "sound/ui_objective_reached.snd";

// ---------------------------------------------------------------------

//fires when this task is added to the player
trigger OnTaskActivated(int questCrc, int taskId)
{
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + "task activated.");

	//gather data for this task
	String planetName   = groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnPlanetName);
	float  locationX    = utils.stringToFloat(groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnLocationX));
	float  locationY    = utils.stringToFloat(groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnLocationY));
	float  locationZ    = utils.stringToFloat(groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnLocationZ));
	float  sphereSize   = utils.stringToFloat(groundquests.getTaskStringDataEntry(questCrc, taskId, dataTableColumnSphereSize));

//TODO EAS normalize objvar use, remove taskId

	//set tracking objvars
	String questName = questGetQuestName(questCrc);
	String objvarQuestName = objvarBase + dot + questName;
	String objvarTaskIdName = objvarQuestName + dot + objvarTaskId;
	setObjVar(self, objvarTaskIdName, taskId);

	//set the location target
	//NOTE: all locations must be in the world cell for now
	location loc = new location (locationX, locationY, locationZ, planetName, null);
	addLocationTarget (questName + ":" + taskId, loc, sphereSize);

	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskActivated", "Must reach within " + sphereSize + " meters of " + locationX + ", " + locationY + ", " + locationZ + " on " + planetName + ".");

	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnArrivedAtLocation(string locationName)
{
	String questName = locationName;
	int taskId = -1;

	int index = locationName.lastIndexOf(":");
	if (index != -1)
	{
		// new naming convention - questName:taskId
		questName = locationName.substring(0, index);
		taskId = utils.stringToInt(locationName.substring(index + 1));
	}

	//see if the location reached is one this script cares about
	String objvarName = objvarBase + dot + questName;
	boolean result = hasObjVar(self, objvarName);

	if(result)
	{
		// support active tasks that used the original naming convention
		if (taskId == -1)
		{
			String objvarQuestName = objvarBase + dot + questName;
			String objvarTaskIdName = objvarQuestName + dot + objvarTaskId;
			taskId = getIntObjVar(self, objvarTaskIdName);
		}
		int questCrc = questGetQuestId(questName);
		groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnArrivedAtLocation", "Arrived at location for go_to_location quest.  Location name is " + questName);
		//clean up the location target
		removeLocationTarget(locationName);
		
		//only tell player things if task is visible
		if(groundquests.isTaskVisible(questCrc, taskId))
		{
			play2dNonLoopingSound(self, JOURNAL_UPDATED_MUSIC);
		}
		
		questCompleteTask(questCrc, taskId, self);
	}	
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is completed
trigger OnTaskCompleted(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCompleted", taskType + "task completed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

//fires when the task is failed
trigger OnTaskFailed(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskFailed", taskType + "task failed.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

trigger OnTaskCleared(int questCrc, int taskId)
{
	cleanup(self, questCrc, taskId);
	groundquests.questOutputDebugInfo(self, questCrc, taskId, taskType, "OnTaskCleared", taskType + " task cleared.");
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------

void cleanup(obj_id player, int questCrc, int taskId)
{
	//clear tracking objvars
	groundquests.clearBaseObjVar(player, taskType, questGetQuestName(questCrc), taskId);
}

// ---------------------------------------------------------------------

trigger OnDetach()
{
	//make sure the base objvar is removed
	removeObjVar(self, groundquests.getTaskTypeObjVar(self, taskType));
	return SCRIPT_CONTINUE;
}

// ---------------------------------------------------------------------
