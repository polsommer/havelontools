include library.ai_lib;
include library.buff;
include library.combat;
include library.create;
include library.static_item;
include library.stealth;
include library.trial;
include library.utils;


trigger OnAttach()
{	
	messageTo(self, "initializeQuestPinata", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler initializeQuestPinata()
{
	removeTriggerVolume(ai_lib.ALERT_VOLUME_NAME);
	removeTriggerVolume(ai_lib.AGGRO_VOLUME_NAME);
	if ( hasScript(self, "ai.creature_combat") )
	{
		detachScript(self, "ai.creature_combat");
	}
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{	
	int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
	int currentHealth = getAttrib(self, HEALTH);
	
	if ( rand(0,1) == 1 )
	{
		dictionary webster = new dictionary();
		string creatureName = getCreatureName(self);
		string socialGroup = ai_lib.getSocialGroup(self);
		webster.put("creatureName", creatureName);
		webster.put("location", getLocation(attacker));
		webster.put("socialGroup", socialGroup);
		messageTo(attacker, "receiveCreditForKill", webster, 0.0f, false);
	}

	removeHateTarget(self, attacker);
	removeHateTarget(attacker, self);
	stopCombat(attacker);

	if ( currentHealth <= maxHealth * 0.5 )
	{
		setAttrib(self, HEALTH, maxHealth);
	}

	return SCRIPT_CONTINUE;
}

