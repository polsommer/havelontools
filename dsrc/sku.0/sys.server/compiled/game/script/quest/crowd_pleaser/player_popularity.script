include library.utils;
include library.prose;

const string SCRIPT_NAME					= "quest.crowd_pleaser.player_popularity";
const string QUEST_COMPLETE_OBJVAR			= "quest.crowd_pleaser.complete";
const string STATUS_OBJVAR					= "quest.crowd_pleaser.status";
const string POPULARITY_OBJVAR				= "quest.crowd_pleaser.popularity";
const string ENTERTAINED_OBJVAR				= POPULARITY_OBJVAR + ".entertained";
const string NUMBER_OBJVAR					= POPULARITY_OBJVAR + ".number";
const string LEVEL_OBJVAR					= POPULARITY_OBJVAR + ".level";
const string COMPLETE_OBJVAR				= POPULARITY_OBJVAR + ".complete";

const string_id STARTING_MESSAGE			= new string_id("quest/crowd_pleaser/system_messages", "popularity_starting_message");
const string_id POPULARITY_1_COMPLETE		= new string_id("quest/crowd_pleaser/system_messages", "popularity_1_complete");
const string_id POPULARITY_2_COMPLETE		= new string_id("quest/crowd_pleaser/system_messages", "popularity_2_complete");
const string_id POPULARITY_3_COMPLETE		= new string_id("quest/crowd_pleaser/system_messages", "popularity_3_complete");
const string_id POPULARITY_1_REMAINING		= new string_id("quest/crowd_pleaser/system_messages", "popularity_1_remaining");
const string_id POPULARITY_2_REMAINING		= new string_id("quest/crowd_pleaser/system_messages", "popularity_2_remaining");
const string_id POPULARITY_3_REMAINING		= new string_id("quest/crowd_pleaser/system_messages", "popularity_3_remaining");

trigger OnAttach() {

	int number = getIntObjVar(self, NUMBER_OBJVAR);

	prose_package pp = prose.getPackage(STARTING_MESSAGE, number);
	sendSystemMessageProse(self, pp);

	return SCRIPT_CONTINUE;
}

messageHandler handleEntertainedPlayer() {

	if(!hasObjVar(self, POPULARITY_OBJVAR)) {

		detachScript(self, SCRIPT_NAME);
		return SCRIPT_CONTINUE;
	}

	obj_id player = params.getObjId("player");

	if(!isPlayer(player))
		return SCRIPT_CONTINUE;

	resizeable obj_id[] entertained = new obj_id[0];

	if(hasObjVar(self, ENTERTAINED_OBJVAR))
		entertained = utils.getResizeableObjIdBatchObjVar(self, ENTERTAINED_OBJVAR);

	int idx = entertained.indexOf(player);

	if(idx >= 0)
		return SCRIPT_CONTINUE;

	/*
	for(int i = 0; i < entertained.length; i++) {

		if(entertained[i] == player)
			return SCRIPT_CONTINUE;
	}
	*/

	entertained = utils.addElement(entertained, player);

	int number = getIntObjVar(self, NUMBER_OBJVAR);
	int level = getIntObjVar(self, LEVEL_OBJVAR);

	if(entertained.length >= number) {

		removeObjVar(self, POPULARITY_OBJVAR);

		int status = 0;

		switch(level) {

			case 1: sendSystemMessage(self, POPULARITY_1_COMPLETE);
					status = 6;
					break;
			case 2: sendSystemMessage(self, POPULARITY_2_COMPLETE);
					status = 12;
					break;
			case 3: sendSystemMessage(self, POPULARITY_3_COMPLETE);
					status = 18;
					break;
		}

		setObjVar(self, STATUS_OBJVAR, status);

		detachScript(self, SCRIPT_NAME);

	} else {

		if(entertained == null || entertained.length == 0)
			return SCRIPT_CONTINUE;

		utils.setResizeableBatchObjVar(self, ENTERTAINED_OBJVAR, entertained);

		int remaining = (number - entertained.length);

		prose_package pp = new prose_package();

		switch(level) {

					case 1: pp = prose.getPackage(POPULARITY_1_REMAINING, getFirstName(player), remaining);
							break;
					case 2: pp = prose.getPackage(POPULARITY_2_REMAINING, getFirstName(player), remaining);
							break;
					case 3: pp = prose.getPackage(POPULARITY_3_REMAINING, getFirstName(player), remaining);
							break;
		}

		sendSystemMessageProse(self, pp);
	}

	return SCRIPT_CONTINUE;
}