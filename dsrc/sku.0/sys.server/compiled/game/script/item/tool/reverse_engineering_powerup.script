include library.utils;
include library.reverse_engineering;

				
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!utils.isNestedWithin(self, player))
		return SCRIPT_CONTINUE;

	string_id strSpam = new string_id("spam", "powerup_use");

	mi.addRootMenuOrServerNotify(menu_info_types.ITEM_USE, strSpam);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!utils.isNestedWithin(self, player))
		return SCRIPT_CONTINUE;

	if(item == menu_info_types.SERVER_MENU9)
	{
		reverse_engineering.applyPowerupItem(player, self, reverse_engineering.getPowerupType(self));
	}

	if(item == menu_info_types.ITEM_USE)
	{
		reverse_engineering.applyPowerupItem(player, self, reverse_engineering.getPowerupType(self));
	}

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if ( names == null || attribs == null || names.length != attribs.length )
		return SCRIPT_CONTINUE;

	int i = getFirstFreeIndex(names);
	if (i != -1 && i < names.length)
	{
		if(hasObjVar(self, reverse_engineering.ENGINEERING_POWER) &&
		hasObjVar(self, reverse_engineering.ENGINEERING_MODIFIER) &&
		hasObjVar(self, reverse_engineering.ENGINEERING_RATIO) )
		{
			int power = getIntObjVar(self, reverse_engineering.ENGINEERING_POWER);
			string mod = getStringObjVar(self, reverse_engineering.ENGINEERING_MODIFIER);
			int ratio = getIntObjVar(self, reverse_engineering.ENGINEERING_RATIO);
		
			names[i] = "@stat_n:" + mod;
			attribs[i] = "" + power/ratio;
		}
	}
	
	return SCRIPT_CONTINUE;
}