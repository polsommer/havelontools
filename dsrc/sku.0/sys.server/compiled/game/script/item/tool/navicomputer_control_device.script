include library.space_crafting;
include library.utils;
include library.sui;
include library.ai_lib;
include library.pet_lib;
include library.space_combat;


/*******************************************/

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( ai_lib.aiIsDead(player) )
		return SCRIPT_CONTINUE;

	obj_id myContainer = getContainedBy( self );
	obj_id yourPad = utils.getPlayerDatapad(player);
	if ( myContainer != yourPad )
	{
		if ( hasScript( myContainer, "item.tool.navicomputer_control_device" ) )
		{
			//I am being accessed while inside of a pcd So I will move from here to your pad:
			putIn( self, yourPad );
		}
		return SCRIPT_CONTINUE;
	}

	/*	No such thing as a tangible navicomp anymore. Don't try to get it's obj_id
	obj_id navicomp = getObjIdObjVar( self, "item.current" );
	if ( !isIdValid (navicomp) )
		return SCRIPT_CONTINUE;
	*/

	/*	This has probably always been BS. How would a navicomp control device EVER be in combat?
	if ( ai_lib.isInCombat( self ) )
		return SCRIPT_CONTINUE;
	*/

	if (!isSpaceScene())
		mi.addRootMenu(menu_info_types.OPEN_NAVICOMP_DPAD, new string_id(pet_lib.MENU_FILE,"open_navicomp_dpad"));

	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( ai_lib.aiIsDead(player) )
		return SCRIPT_CONTINUE;

	if ( ai_lib.isInCombat( self ) )
		return SCRIPT_CONTINUE;

	obj_id myContainer = getContainedBy( self );
	obj_id yourPad = utils.getPlayerDatapad(player);
	if ( myContainer != yourPad )
	{
		if ( hasScript( myContainer, "item.tool.navicomputer_control_device" ) )
		{
			//I am being accessed while inside of a pcd So I will move from here to your pad:
			putIn( self, yourPad );
		}
		return SCRIPT_CONTINUE;
	}

	/*	No more tangible-centric operation, so don't try to get the obj_id of the non-existent navicomp
	obj_id navicomp = getObjIdObjVar( self, "item.current" );

	if ( !isIdValid (navicomp) )
		return SCRIPT_CONTINUE;
	*/

	/*  no more tangible-centric operation. Assume they are certed if they get this far.
	if (!hasCertificationsForItem (player, navicomp))
	{
		//sendSystemMessageTestingOnly(player, "You aren't certified to operate this device.");
		string_id strSpam = new string_id("space/space_interaction", "not_certified_device");
		sendSystemMessage(player, strSpam);
		return SCRIPT_CONTINUE;
	}
	*/

	if (!isSpaceScene())
		if ( item == menu_info_types.OPEN_NAVICOMP_DPAD )
			space_combat.openFlightComputerDatapad( self, player );
		//space_combat.openFlightComputerDatapad( navicomp, player );

	return SCRIPT_CONTINUE;
}


trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	// for CTS, allow contained item(s) to be unpacked
	if (utils.hasLocalVar(self, "ctsBeingUnpacked"))
	{
		return SCRIPT_CONTINUE;
	}

	debugServerConsoleMsg(null, "navicomputer_control_device.OnAboutToReceiveItem ***************** Entered ");

	if ( hasObjVar( item, "item.current" ) || hasScript( item, "ai.pet_control_device" ))
		return SCRIPT_OVERRIDE;//You cannot put a controlDevice inside of another controlDevice, dammit!

	debugServerConsoleMsg(null, "navicomputer_control_device.OnAboutToReceiveItem ***************** Not trying to pass in a pcd. Good! Continuing:");

	string itemTemplate  = getTemplateName(item);
	int index = itemTemplate.indexOf("object/intangible/data_item/droid_command");
	if(index<0)
	{
		obj_id dpad = utils.getDatapad(self);
		putIn (item, dpad);
		return SCRIPT_OVERRIDE; // don't allow the transfer if the thing being given isn't a droid program module
	}

	if ( !isIdValid(transferer))
	   	return SCRIPT_OVERRIDE;

	debugServerConsoleMsg(null, "navicomputer_control_device.OnAboutToReceiveItem ***************** Everything looked good. Sending a script-continue");

	return SCRIPT_CONTINUE;
}


trigger OnGiveItem(obj_id item, obj_id player)
{
	debugServerConsoleMsg(null, "**********  OnGiveItem trigger on the Navicomputer Control Device has fired.");
	//debugServerConsoleMsg(null, "**********  The obj_id of the item being transferred is: "+item);

	obj_id owner = getOwner( self );
	if (!isIdValid(owner))
		return SCRIPT_OVERRIDE;

	if ( player != owner )
		return SCRIPT_OVERRIDE;

	obj_id navicompDpad = getObjectInSlot(self, "datapad");
	if (!isIdValid (navicompDpad))
		return SCRIPT_OVERRIDE;

	putIn(item, navicompDpad);
	debugServerConsoleMsg(null, "navicomputer_control_device.OnGiveItem ***************** Everything looked good. Sending a script-continue");

	return SCRIPT_CONTINUE;
}


//******************************************************************************************************************************************************
trigger OnAttach()
{
	obj_id datapad = getContainedBy( self );
	if ( !isIdValid( datapad ) )
		return SCRIPT_CONTINUE;

	obj_id master = getContainedBy( datapad );
	if ( !isIdValid( master ) )
		return SCRIPT_CONTINUE;

	 sendSystemMessage( master, new string_id( "pet/pet_menu", "device_added" ));

	 return SCRIPT_CONTINUE;
}


trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	if (hasObjVar(self, "dataModuleRating"))
	{
		//names[idx] = "data_module_rating";
		int datastorage = getIntObjVar(self, "dataModuleRating");
		//attribs[idx] = " " + datastorage;
		//idx++;
		//if (idx >= names.length)
		//	return SCRIPT_CONTINUE;
	}

	obj_id[] loadedDroidCommands = space_crafting.getDatapadDroidCommands(self);
	if((loadedDroidCommands!=null)&&(loadedDroidCommands.length>0))
	{
		names[idx] = "droid_program_loaded";
		attribs[idx] = " ";
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		for (int i = 0; i< loadedDroidCommands.length; i++)
		{
			if(hasObjVar(loadedDroidCommands[i], "strDroidCommand"))
			{
				string programName = getStringObjVar(loadedDroidCommands[i], "strDroidCommand");
				names[idx] = "droid_program";
				//attribs[idx] = " " + localize(new string_id("space/droid_commands", programName));
				attribs[idx] = utils.packStringId(new string_id("space/droid_commands", programName));
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
			}
		}
	}
	return SCRIPT_CONTINUE;
}



messageHandler destroySelf()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}



trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	if ( !isIdValid( destContainer ) )
		return SCRIPT_OVERRIDE;

	if ( !isIdValid( transferer ) )
		return SCRIPT_OVERRIDE;

	//sendSystemMessageTestingOnly (transferer, "Warning: You cannot transfer a Flight-Computer's memory Core that has already been activated by a pilot.");
	string_id strSpam = new string_id("space/space_interaction", "cant_transfer_active_computer");
	sendSystemMessage(transferer, strSpam);

	return SCRIPT_OVERRIDE;
}
