/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        parrot_treasure.script
 * Description:  script for talking parrot
 * @author       $Author: Matthew Kwid$
 * @version      $Revision:$
 */

/***** INCLUDES ********************************************************/
include library.utils;
include library.debug;
/***** INHERITS ********************************************************/

/***** CONSTANTS *******************************************************/
const int   TREASURE_RADIUS             = 100;
const string PARROT_TREASURE_SCRIPT     = "item.parrot_cage.parrot_treasure";
const string TREASURE_PARTICLE_TEMPLATE = "object/static/particle/particle_magic_sparks.iff";
const string_id TREASURE_FOUND_MESSAGE  = new string_id("item_n", "bird_treasure_found");
const string ITEM_ONE   = "object/tangible/component/item/electronic_control_unit.iff";
const string ITEM_TWO   = "object/tangible/component/item/electronic_energy_distributor.iff";
const string ITEM_THREE = "object/tangible/component/item/electronic_power_conditioner.iff";
const string ITEM_FOUR  = "object/tangible/component/item/electronics_gp_module.iff";
const string ITEM_FIVE  = "object/tangible/component/item/electronics_memory_module.iff";
const string[] ITEMS = {ITEM_ONE, ITEM_TWO, ITEM_THREE, ITEM_FOUR, ITEM_FIVE};

/***** TREASURE OBJECTS ************************************************/

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	debug.debugAllMsg("DEBUG", self, "#############Parrot_treasure script attached############");
	return SCRIPT_CONTINUE;
}//OnInitialize

trigger OnInitialize()
{
	debug.debugAllMsg("DEBUG", self, "#############Parrot_treasure script initialized############");
	return SCRIPT_CONTINUE;
}//OnInitialize

messageHandler createTreasureLocation()
{
	location treasureLoc = (location)params.get("specialLoc");
	addLocationTarget("parrot_treasure", treasureLoc, TREASURE_RADIUS);
	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string locName)
{
	debug.debugAllMsg("DEBUG", self, "#############TREASURE FOUND!!!############");

	// create the magic sparks where the player is located
	obj_id sparks  = createObject(TREASURE_PARTICLE_TEMPLATE, getLocation(self));

	sendSystemMessage(self, TREASURE_FOUND_MESSAGE);

	dictionary params = new dictionary();
	params.put("sparks", sparks);
	messageTo(self, "cleanUp", params, 10, true);

	receiveLoot(self);

	return SCRIPT_CONTINUE;
}

void receiveLoot(obj_id player)
{
	int index        = rand(0, 4);
	obj_id inventory = getObjectInSlot(player, "inventory");

	if(inventory == null)
	{
		debug.debugAllMsg("DEBUG", player, "#############Inventory Is NULL!############");
		return;
	}

	createObject(ITEMS[index], inventory,"");
}

messageHandler cleanUp()
{
	obj_id sparks = (obj_id)params.get("sparks");

	destroyObject(sparks);
	detachScript(self, PARROT_TREASURE_SCRIPT);

	return SCRIPT_CONTINUE;
}
