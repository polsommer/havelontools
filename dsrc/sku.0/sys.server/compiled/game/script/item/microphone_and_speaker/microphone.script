/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        mircophone.script
 * Description:  script to project what a player speaks to speaker objects
 * @author       $Author: Matthew Kwid$
 * @version      $Revision:$
 */

/***** INCLUDES ********************************************************/
include library.utils;
include library.debug;
include library.xp;

/***** INHERITS ********************************************************/

/***** CONSTANTS *******************************************************/
const float  MIC_RADIUS            = .05f;
const string_id SIGNAL_MESSAGE     = new string_id("sui", "mic_speaker_signal");
const string_id SID_ACTIVATE       = new string_id("sui", "mic_activation");
const string_id SID_DEACTIVATE     = new string_id("sui", "mic_deactivation");
const string_id SID_ACTIVATE_MSG   = new string_id("sui", "mic_activation_msg");
const string_id SID_DEACTIVATE_MSG = new string_id("sui", "mic_deactivation_msg");
const string VAR_IS_ACTIVE         = "microphone_is_active";
const string SPEAKER_TEMPLATE      = "object/tangible/speaker/speaker.iff";

/***** TRIGGERS ********************************************************/
trigger OnInitialize()
{
	debug.debugAllMsg("DEBUG", self, "#############microphone script initialized############");
	setObjVar(self, VAR_IS_ACTIVE, false);
	return SCRIPT_CONTINUE;

}//OnInitialize

trigger OnHearSpeech(obj_id player, String message)
{
	boolean isActive = getBooleanObjVar(self, VAR_IS_ACTIVE);

	if(!isActive || getDistance(player, self) > MIC_RADIUS)
		return SCRIPT_CONTINUE;

   	debug.debugAllMsg("DEBUG", self, "############MIC IS ACTIVE############");

   	obj_id[] speakers = getAllObjectsWithTemplate(getLocation(self), 30, SPEAKER_TEMPLATE);

   	if(speakers.length > 0)
   	{
		xp.grantCraftingXpChance( self, player, 40 );

    	dictionary params = new dictionary();
   		params.put("message", message);

   		for(int i=0; i < speakers.length; ++i)
   		{
			messageTo(speakers[i], "projectMicSpeak", params, 0, true);
		}
	}

  	return SCRIPT_CONTINUE;

}//OnHearSpeech

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	boolean isActive = getBooleanObjVar(self, VAR_IS_ACTIVE);

	if(isActive)
		mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_DEACTIVATE);
	else
		mi.addRootMenu (menu_info_types.SERVER_MENU2, SID_ACTIVATE);

	return SCRIPT_CONTINUE;

}//OnObjectMenuRequest

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(item == menu_info_types.SERVER_MENU1)
	{
		sendSystemMessage(player, SID_DEACTIVATE_MSG);
		setObjVar(self, VAR_IS_ACTIVE, false);
	}
	else if(item == menu_info_types.SERVER_MENU2)
	{
		sendSystemMessage(player, SID_ACTIVATE_MSG);

		obj_id[] speakers = getAllObjectsWithTemplate(getLocation(self), 30, SPEAKER_TEMPLATE);

		if(speakers.length > 0)
    	{
    		dictionary params = new dictionary();
   			params.put("message", utils.packStringId(SIGNAL_MESSAGE));

   			for(int i=0; i < speakers.length; ++i)
				messageTo(speakers[i], "projectMicActive", params, 0, true);
		}

		setObjVar(self, VAR_IS_ACTIVE, true);
	}

 	return SCRIPT_CONTINUE;

}//OnObjectMenuRequest
