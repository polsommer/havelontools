/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        speaker.script
 * Description:  projects the text transmitted from a microphone
 * @author       $Author: Matthew Kwid$
 * @version      $Revision:$
 */

/***** INCLUDES ********************************************************/
include library.chat;
include library.utils;
include library.debug;
include library.xp;

/***** INHERITS ********************************************************/

/***** CONSTANTS *******************************************************/
const string VAR_ACCEPTING_SIGNAL  = "speaker.acceptingSignal";
const string_id SID_DEACTIVATE     = new string_id("sui", "speaker_deactivate");
const string_id SID_ACTIVATE       = new string_id("sui", "speaker_activate");
const string_id SID_ACTIVATE_MSG   = new string_id("sui", "speaker_activate_msg");
const string_id SID_DEACTIVATE_MSG = new string_id("sui", "speaker_deactivate_msg");

/***** TRIGGERS ********************************************************/
trigger OnInitialize()
{
	debug.debugAllMsg("DEBUG", self, "#############speaker script initialized############");
	setObjVar(self, VAR_ACCEPTING_SIGNAL, false);
	return SCRIPT_CONTINUE;

}//OnInitialize

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	boolean isActive = getBooleanObjVar(self, VAR_ACCEPTING_SIGNAL);

	if(isActive)
		mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_DEACTIVATE);
	else
		mi.addRootMenu (menu_info_types.SERVER_MENU2, SID_ACTIVATE);

	return SCRIPT_CONTINUE;

}//OnObjectMenuRequest

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(item == menu_info_types.SERVER_MENU1)
	{
		sendSystemMessage(player, SID_DEACTIVATE_MSG);
		setObjVar(self, VAR_ACCEPTING_SIGNAL, false);
	}
	else if(item == menu_info_types.SERVER_MENU2)
	{
		sendSystemMessage(player, SID_ACTIVATE_MSG);
		setObjVar(self, VAR_ACCEPTING_SIGNAL, true);
	}

 	return SCRIPT_CONTINUE;

}//OnObjectMenuRequest

/***** MESSAGE HANDLERS ********************************************************/
messageHandler projectMicSpeak()
{
	if(!getBooleanObjVar(self, VAR_ACCEPTING_SIGNAL))
		return SCRIPT_CONTINUE;

	string message = (string)params.get("message");

	debug.debugAllMsg("DEBUG", self, "############SPEAKER PROJECTS: " + message + "############");
	//speak(self, message);
	chat.chat(self, message);

	return SCRIPT_CONTINUE;
}

messageHandler projectMicActive()
{
	if(!getBooleanObjVar(self, VAR_ACCEPTING_SIGNAL))
		return SCRIPT_CONTINUE;

	string message = (string)params.get("message");

	debug.debugAllMsg("DEBUG", self, "############SPEAKER PROJECTS: " + message + "############");
	//speak(self, message);
	chat.chat(self, message);

	return SCRIPT_CONTINUE;
}