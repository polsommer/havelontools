/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        outdoorsman.script
 * Description:  scout command handlers
 * @author       $Author:$
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.utils;
include library.ai_lib;
include library.camping;
include library.create;
include library.battlefield;
include library.locations;
include library.craftinglib;
include library.space_dungeon;
include library.instance;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id SID_DEPLOY					= new string_id("camp","deploy");
const string_id SID_SYS_ALREADY_CAMPING		= new string_id("camp","sys_already_camping");
const string_id SID_SYS_CANT_CAMP			= new string_id("camp","sys_cant_camp");
const string_id SID_SYS_NOT_IN_INV			= new string_id("camp","sys_not_in_inv");
const string_id SID_SYS_DEPLOY				= new string_id("camp","sys_deploy");
const string_id SID_SYS_NOT_IN_COMBAT		= new string_id("camp","sys_not_in_combat");
const string_id SID_SYS_NSF_SKILL		 	= new string_id("camp","sys_nsf_skill");


//SYSTEM MESSAGE DEFINES
const string_id SID_ABANDONED_CAMP              = new string_id("camp", "abandoned_camp");
const string_id SID_STARTING_CAMP               = new string_id("camp", "starting_camp");
const string_id SID_CAMP_COMPLETE               = new string_id("camp", "camp_complete");
const string_id SID_ASSUMING_OWNERSHIP          = new string_id("camp", "assuming_ownership");

const string_id SID_ERROR_CAMP_DISBAND          = new string_id("camp", "error_camp_disband");

const string_id SID_ERROR_DEFAULT               = new string_id("camp", "error_default");
const string_id SID_ERROR_INSIDE				= new string_id("camp", "error_inside");
const string_id SID_ERROR_CAMP_EXISTS           = new string_id("camp", "error_camp_exists");
const string_id SID_ERROR_CAMP_TOO_CLOSE		= new string_id("camp", "error_camp_too_close");
const string_id SID_ERROR_BUILDING_TOO_CLOSE	= new string_id("camp", "error_building_too_close");
const string_id SID_ERROR_LAIR_TOO_CLOSE		= new string_id("camp", "error_lair_too_close");
const string_id SID_ERROR_MUNI_TRUE             = new string_id("camp", "error_muni_true");
const string_id SID_ERROR_NOBUILD               = new string_id("camp", "error_nobuild");
const string_id SID_ERROR_BATTLEFIELD			= new string_id("camp", "error_battlefield");
const string_id SID_ERROR_IN_WATER				= new string_id("camp", "error_in_water");
const string_id SID_ERROR_TOO_CLOSE_TO_WATER	= new string_id("camp", "error_too_close_to_water");

const string_id SID_ERROR_CAMP_TOO_BIG			= new string_id("camp", "error_too_big");
const string_id SID_CAMP_MASTER_NAME			= new string_id("camp", "camp_master");

const string_id SID_GENERAL_ITEM_ADDED			= new string_id("camp", "general_item_added");
const string_id SID_ADVANCED_ITEMS_ADDED		= new string_id("camp", "advanced_items_added");

const string_id SID_CAMP_ENTER					= new string_id("camp", "camp_enter");
const string_id SID_CAMP_EXIT					= new string_id("camp", "camp_exit");

const string_id PROSE_CAMP_ENTER				= new string_id("camp", "prose_camp_enter");
const string_id PROSE_CAMP_EXIT					= new string_id("camp", "prose_camp_exit");



//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	// If we are encrypted add the option to decode.
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if(mid != null)
		mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	// Item was used.
	if(item == menu_info_types.ITEM_USE)
	{
		// Deploy the camp.
		deployCamp(self, player);
	}

	return SCRIPT_CONTINUE;
}

/***** TRIGGERS ********************************************************/
trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	//Shuttle Beacon
	if (hasObjVar(self, "modules.shuttle_beacon"))
	{
		float attrib = getFloatObjVar(self, "modules.shuttle_beacon");

		if ( attrib != 0.0f )
		{
			names[idx] = "shuttle_beacon";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Cloning tube
	if (hasObjVar(self, "modules.cloning_tube"))
	{
		float attrib = getFloatObjVar(self, "modules.cloning_tube");
		if ( attrib != 0.0f )
		{
			names[idx] = "cloning_tube";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Entertainer
	if (hasObjVar(self, "modules.entertainer"))
	{
		float attrib = getFloatObjVar(self, "modules.entertainer");
		if ( attrib != 0.0f )
		{
			names[idx] = "entertainer";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Junk Dealer
	if (hasObjVar(self, "modules.junk_dealer"))
	{
		float attrib = getFloatObjVar(self, "modules.junk_dealer");
		if ( attrib != 0.0f )
		{
			names[idx] = "junk_dealer";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Clothing Station
	if (hasObjVar(self, "modules.clothing_station"))
	{
		float attrib = getFloatObjVar(self, "modules.clothing_station");
		if ( attrib != 0.0f )
		{
			names[idx] = "clothing_station";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Food Station
	if (hasObjVar(self, "modules.food_station"))
	{
		float attrib = getFloatObjVar(self, "modules.food_station");
		if ( attrib != 0.0f )
		{
			names[idx] = "food_station";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Ship Station
	if (hasObjVar(self, "modules.ship_station"))
	{
		float attrib = getFloatObjVar(self, "modules.ship_station");
		if ( attrib != 0.0f )
		{
			names[idx] = "ship_station";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Structure Station
	if (hasObjVar(self, "modules.structure_station"))
	{
		float attrib = getFloatObjVar(self, "modules.structure_station");
		if ( attrib != 0.0f )
		{
			names[idx] = "structure_station";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Weapon Station
	if (hasObjVar(self, "modules.weapon_station"))
	{
		float attrib = getFloatObjVar(self, "modules.weapon_station");
		if ( attrib != 0.0f )
		{
			names[idx] = "weapon_station";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Imperial Recruiter
	if (hasObjVar(self, "modules.imperial"))
	{
		float attrib = getFloatObjVar(self, "modules.imperial");
		if ( attrib != 0.0f )
		{
			names[idx] = "imperial";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Rebel Recruiter
	if (hasObjVar(self, "modules.rebel"))
	{
		float attrib = getFloatObjVar(self, "modules.rebel");
		if ( attrib != 0.0f )
		{
			names[idx] = "rebel";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Battery
	if (hasObjVar(self, "modules.extra_life"))
	{
		float attrib = getFloatObjVar(self, "modules.extra_life");
		if ( attrib != 0.0f )
		{
			names[idx] = "extra_life";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	//Lifetime
	if (hasObjVar(self, "modules.lifetime"))
	{
		float attrib = getFloatObjVar(self, "modules.lifetime");
		
		if (hasObjVar(self, "modules.extra_life"))
		{
			float extraLife = getFloatObjVar(self, "modules.extra_life");
			if ( extraLife != 0.0f )
			{
				attrib +=extraLife;		
			}
		}
		
		if ( attrib != 0.0f )
		{
			names[idx] = "lifetime";
			attribs[idx] = " " + (int)(attrib);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// deployCamp
//------------------------------------------------

void deployCamp(obj_id self, obj_id player)
{
	if(!utils.isNestedWithin(self, player))
	{
		sendSystemMessage(player, SID_SYS_NOT_IN_INV);
		return;
	}

	// Make sure we aren't in combat.
	if(ai_lib.isInCombat(player))
	{
		sendSystemMessage(player, SID_SYS_NOT_IN_COMBAT);
		return;
	}
	
	// Make sure we aren't on a mount.
	obj_id mount = getMountId(player);		
	if(isIdValid(mount))
	{
		sendSystemMessage(player, new string_id("camp", "error_mounted"));
		return;	
	}
	
	location here = getLocation(player);
	
	float height = getHeightAtLocation(here.x, here.z);
	
	if (here.y != height)
	{
		sendSystemMessage(player, new string_id("camp", "bad_location"));
		return;
	}	
		
	// TO DO: Is in cell
	//inside?
	if (isIdValid(here.cell) || here.area.startsWith("space_"))
	{
		sendSystemMessage(player, SID_ERROR_INSIDE);
		return;
	}
	
	if (space_dungeon.verifyPlayerSession(player))
	{
		sendSystemMessage(player, new string_id("camp", "camp_instance"));
		return;
	}
	if (here.area.equals("mustafar"))
	{
		if (here.x > 1120 || here.z < -1024)
		{
			return;
		}
	}
	
	
	if (instance.isInInstanceArea(player))
		return;
	

	// Check for proximity of camps, and buildings.
	if ( camping.isTooCloseToAnotherCamp(here,player) )
	{
		sendSystemMessage(player, new string_id("camp", "camp_too_close"));
		return;
	}
	
	//check regions
	region bf = battlefield.getBattlefield(here);
	if ( bf != null )
	{
		sendSystemMessage(player, SID_ERROR_BATTLEFIELD);
		return;
	}
	
	if ( locations.isInMissionCity( here ) )
	{
		sendSystemMessage(player, SID_ERROR_MUNI_TRUE);
		return;
	}
	
	if ( isBelowWater( here ) )
	{
		sendSystemMessage(player, SID_ERROR_IN_WATER);
		return;
	}
		
	if(1 == getState(player, STATE_SWIMMING))
	{
		sendSystemMessage(player, SID_SYS_CANT_CAMP);
		return;
	}
	
	// Check to see if the player is already camping.
	if(hasObjVar(player, camping.VAR_CAMP_BASE))
	{
		obj_id myCamp = getObjIdObjVar(player, camping.VAR_PLAYER_CAMP);
		if((myCamp == null) || (myCamp == obj_id.NULL_ID))
		{
			// Camp doesn't exist.
		}
		else
		{
			if(exists(myCamp) && myCamp.isLoaded())
			{
				// We are already camping.
				sendSystemMessage(player, SID_SYS_ALREADY_CAMPING);
				return;
			}
			else
			{
				removeObjVar(player, camping.VAR_CAMP_BASE);
			}
		}
	}

	if(!hasObjVar(self, "template"))
	{
		sendSystemMessage(player, SID_SYS_CANT_CAMP);
		return;
	}

	string template = getStringObjVar(self, "template");

	if(template == null || template.equals(""))
	{
		sendSystemMessage(player, SID_SYS_CANT_CAMP);
		return;
	}

	sendSystemMessage(player, SID_SYS_DEPLOY);
	location loc = getLocation(player);
	obj_id master = create.object(template, loc);

	if(isIdValid(master))
	{
		camping.initializeAdvancedCamp(self, master, player, loc);

		setObjVar(player, camping.VAR_PLAYER_CAMP, master);

		if(hasScript(player, "theme_park.new_player.new_player"))
		{
			dictionary webster = new dictionary();
			webster.put("deployedCamp", 1);
			messageTo(player, "handleNewPlayerScoutAction", webster, 1, false);
		}

		destroyObject(self);
	}
	return;
}