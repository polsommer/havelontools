//------------------------------------------------
// loot_crate.scriptlib
// Brandon Reinhart
//
// Attach to containers that can be sliced.
//------------------------------------------------

//------------------------------------------------
// Inherits
//------------------------------------------------

inherits item.container.locked_slicable;

//------------------------------------------------
// Constants
//------------------------------------------------

const string LOOT_CRATE						= "object/tangible/container/loot/loot_crate.iff";

//------------------------------------------------
// handleSlicingSuccess
//------------------------------------------------

messageHandler handleSlicingSuccess()
{
	// Spawn our replacement.
	obj_id myContainer = getContainedBy( self );
	obj_id lootCrate = null;
	if ( isIdValid( myContainer ) )
		lootCrate = createObject( LOOT_CRATE, myContainer, "" );
	else
		lootCrate = createObject( LOOT_CRATE, getLocation( self ) );
	removeObjVar( lootCrate, "slicing.locked" );

	// Remove us.
	destroyObject( self );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnGetAttributes
//------------------------------------------------

trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{
	names[0] = "lock_mechanism";
	if ( hasObjVar( self, "slicing.slicable" ) )
	{
		// Slicable.
		attribs[0] = "@obj_attr_n:slicable";
	}
	else
	{
		// Broken.
		attribs[0] = "@obj_attr_n:broken";
	}

	return SCRIPT_CONTINUE;
}