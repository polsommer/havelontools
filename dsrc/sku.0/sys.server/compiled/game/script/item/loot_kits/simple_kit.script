include library.sui;
include library.utils;

const string STF						= "loot_kit";

const string_id INCORRECT_ITEM					= new string_id(STF, "incorrect_item");
const string_id ALREADY_CONTAINS				= new string_id(STF, "already_contains");
const string_id NEW_ITEM_CREATED				= new string_id(STF, "new_item_created");
const string_id ITEM_USED					= new string_id(STF, "item_used");

// **********************************************************************************************************************************
// ********** TRIGGERS **********
// **********************************************************************************************************************************


trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}


trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{
	int idx = utils.getValidAttributeIndex(names);

	if (idx == -1)
		return SCRIPT_CONTINUE;

	string datatable = getStringObjVar (self, "loot_kit");

	if(hasObjVar(self, "collectible"))
	{
		int one = getIntObjVar(self, "collectible.item_contained_01");
		int two = getIntObjVar(self, "collectible.item_contained_02");
		int three = getIntObjVar(self, "collectible.item_contained_03");
		int four = getIntObjVar(self, "collectible.item_contained_04");
		int five = getIntObjVar(self, "collectible.item_contained_05");
		int six = getIntObjVar(self, "collectible.item_contained_06");
		int seven = getIntObjVar(self, "collectible.item_contained_07");
		int eight = getIntObjVar(self, "collectible.item_contained_08");
		int nine = getIntObjVar(self, "collectible.item_contained_09");
		int ten = getIntObjVar(self, "collectible.item_contained_10");

		string itemNameOne = dataTableGetString (datatable, 0, "examine_item_name");
		names[idx] = itemNameOne;
		if (one == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (one == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameTwo = dataTableGetString (datatable, 1, "examine_item_name");
		names[idx] = itemNameTwo;
		if (two == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (two == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameThree = dataTableGetString (datatable, 2, "examine_item_name");
		names[idx] = itemNameThree;
		if (three == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (three == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameFour = dataTableGetString (datatable, 3, "examine_item_name");
		names[idx] = itemNameFour;
		if (four == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (four == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameFive = dataTableGetString (datatable, 4, "examine_item_name");
		names[idx] = itemNameFive;
		if (five == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (five == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameSix = dataTableGetString (datatable, 5, "examine_item_name");
		names[idx] = itemNameSix;
		if (six == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (six == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameSeven = dataTableGetString (datatable, 6, "examine_item_name");
		names[idx] = itemNameSeven;
		if (seven == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (seven == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameEight = dataTableGetString (datatable, 7, "examine_item_name");
		names[idx] = itemNameEight;
		if (eight == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (eight == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameNine = dataTableGetString (datatable, 8, "examine_item_name");
		names[idx] = itemNameNine;
		if (nine == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (nine == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameTen = dataTableGetString (datatable, 9, "examine_item_name");
		names[idx] = itemNameTen;
		if (ten == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (ten == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

// If this object has another dragged on top of it, do this. Do not allow OnReceivedItem to go off if we decide to ScriptOverride
trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id player, obj_id item)
{
	// Skip checks if transferer is invalid since CTS must be inserting the item in that case.
	if (!isIdValid(player))
		return SCRIPT_CONTINUE;

	if ( !utils.isNestedWithin(self, player) )
		return SCRIPT_OVERRIDE;
		
	string itemTemplate = getTemplateName(item);

	//For Fireworks only, work on both type 1 and type 2
	if (itemTemplate == "object/tangible/loot/misc/firework_dud_s2.iff")
		itemTemplate = "object/tangible/loot/misc/firework_dud_s1.iff";

	if (itemTemplate == null)
		return SCRIPT_CONTINUE;

	resizeable string[] itemsNeeded = getResizeableStringArrayObjVar (self, "needs");

	if (itemsNeeded == null)
		return SCRIPT_CONTINUE;

	int numNeeded = itemsNeeded.length;

	boolean useful = false;

	for (int x = 0; x < numNeeded; x ++)
	{
		string thisItem = itemsNeeded[x];
		if (thisItem == itemTemplate)
		{
			useful = true;
			return SCRIPT_CONTINUE;
		}
	}

	if (useful == false)
		return SCRIPT_OVERRIDE;

	return SCRIPT_CONTINUE;
}


trigger OnReceivedItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	
	obj_id player = utils.getContainingPlayer(self);
	string itemTemplate = getTemplateName(item);
	
	resizeable string[] itemsNeeded = getResizeableStringArrayObjVar (self, "needs");
	
	if (itemsNeeded == null)
		return SCRIPT_CONTINUE;
	
	int numNeeded = itemsNeeded.length;
	
	for (int x = 0; x < numNeeded; x ++)
	{
		string thisItem = itemsNeeded[x];
		if (thisItem == itemTemplate)
		{
			checkForCompletion(self, player, x, item);
			return SCRIPT_CONTINUE;
		}
	}
	
	
	return SCRIPT_CONTINUE;
}


void checkForCompletion(obj_id self, obj_id player, int x, obj_id item)
{
	//debugSpeakMsg (player, "CHECKING FOR COMPLETION");
	if (!isIdValid(player))
		return;

	resizeable string[] needs = getResizeableStringArrayObjVar (self, "needs");

	if (needs == null)
		return;

	int numItems = needs.length;

	//debugSpeakMsg (player, "Num Items is " + numItems + " And x is " + x);

	needs = utils.removeElementAt (needs, x);

	if (needs.length > 0)
		setObjVar (self, "needs", needs);
	else
		removeObjVar (self, "needs");

	if (numItems == 1)
	{
		obj_id playerInv = utils.getInventoryContainer(player);
		if(isIdValid(playerInv))
		{
			string rewardItem = getStringObjVar (self, "reward");
			obj_id reward = createObjectOverloaded(rewardItem, playerInv);
			if(isIdValid(reward))
			{
				sendSystemMessage(player, NEW_ITEM_CREATED);
				destroyObject(self);
			}
		}
		return;
	}
	else
	{
		//debugSpeakMsg (player, "Needs More Stuff");
	}

	return;
}

messageHandler destroyPart ()
{

	return SCRIPT_CONTINUE;
}

trigger OnAboutToLoseItem(obj_id srcContainer, obj_id player, obj_id item)
{
	if ( !utils.isNestedWithin(self, player) )
		return SCRIPT_OVERRIDE;

	string itemTemplate = getTemplateName(item);

	if (itemTemplate == null)
		return SCRIPT_CONTINUE;

	//For Fireworks only, work on both type 1 and type 2
	if (itemTemplate == "object/tangible/loot/misc/firework_dud_s2.iff")
		itemTemplate = "object/tangible/loot/misc/firework_dud_s1.iff";

	resizeable string[] overview = getResizeableStringArrayObjVar (self, "overview");

	if (overview == null)
	{
		LOG("DESIGNER_FATAL", "Simple Kit script failed to find an overview objvar on the kit it was making.");
		return SCRIPT_CONTINUE;
	}

	int totalItems = overview.length;

	if (totalItems == 0)
	{
		LOG("DESIGNER_FATAL", "Simple Kit script found an overview objvar but it was empty!");
		return SCRIPT_CONTINUE;
	}

	resizeable string[] itemsNeeded = getResizeableStringArrayObjVar (self, "needs");

	if (itemsNeeded == null)
	{
		LOG("DESIGNER_FATAL", "Simple Kit script failed to find a Needed objvar (that's actually an objvar named 'needs') on a kit it was making.");
		return SCRIPT_CONTINUE;
	}

	for (int x = 0; x < totalItems; x ++)
	{
		string thisItem = overview[x];
		if (itemTemplate.equals(thisItem) && itemsNeeded.indexOf(thisItem) < 0)
		{
			itemsNeeded = utils.addElement (itemsNeeded, thisItem);
		}
	}
	setObjVar (self, "needs", itemsNeeded);

	return SCRIPT_CONTINUE;
}
