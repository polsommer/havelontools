
include library.sui;
include library.utils;

const string STF								= "loot_kit";

const string_id INCORRECT_ITEM					= new string_id(STF, "incorrect_item");
const string_id ALREADY_CONTAINS				= new string_id(STF, "already_contains");
const string_id NEW_ITEM_CREATED				= new string_id(STF, "new_item_created");
const string_id ITEM_USED					= new string_id(STF, "item_used");
const string_id AUTOSTACK_ATTACHED_EJECTED			= new string_id(STF, "austostack_attached_ejected");

// **********************************************************************************************************************************
// ********** TRIGGERS **********
// **********************************************************************************************************************************
trigger OnAttach()
{
	string datatable = getStringObjVar (self, "loot_kit");

	string [] objvarToSet = dataTableGetStringColumnNoDefaults (datatable, "objvar_name");
	int numObjVars = objvarToSet.length;

	if (numObjVars == 0)
	{
		return SCRIPT_CONTINUE;
	}

	int passThrough = 0;

	while (passThrough < numObjVars)
	{
		string kitObjVar = dataTableGetString (datatable, passThrough, "objvar_name");
		string kitObjVarValue = dataTableGetString (datatable, passThrough, "objvar_value");

		setObjVar (self, kitObjVar, kitObjVarValue);

		passThrough = passThrough + 1;
	}

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{
	int idx = utils.getValidAttributeIndex(names);

	if (idx == -1)
		return SCRIPT_CONTINUE;

	string datatable = getStringObjVar (self, "loot_kit");

	if(hasObjVar(self, "collectible"))
	{
		int one = getIntObjVar(self, "collectible.item_contained_01");
		int two = getIntObjVar(self, "collectible.item_contained_02");
		int three = getIntObjVar(self, "collectible.item_contained_03");
		int four = getIntObjVar(self, "collectible.item_contained_04");
		int five = getIntObjVar(self, "collectible.item_contained_05");
		int six = getIntObjVar(self, "collectible.item_contained_06");
		int seven = getIntObjVar(self, "collectible.item_contained_07");
		int eight = getIntObjVar(self, "collectible.item_contained_08");
		int nine = getIntObjVar(self, "collectible.item_contained_09");
		int ten = getIntObjVar(self, "collectible.item_contained_10");

		string itemNameOne = dataTableGetString (datatable, 0, "examine_item_name");
		names[idx] = itemNameOne;
		if (one == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (one == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameTwo = dataTableGetString (datatable, 1, "examine_item_name");
		names[idx] = itemNameTwo;
		if (two == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (two == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameThree = dataTableGetString (datatable, 2, "examine_item_name");
		names[idx] = itemNameThree;
		if (three == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (three == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameFour = dataTableGetString (datatable, 3, "examine_item_name");
		names[idx] = itemNameFour;
		if (four == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (four == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameFive = dataTableGetString (datatable, 4, "examine_item_name");
		names[idx] = itemNameFive;
		if (five == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (five == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameSix = dataTableGetString (datatable, 5, "examine_item_name");
		names[idx] = itemNameSix;
		if (six == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (six == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameSeven = dataTableGetString (datatable, 6, "examine_item_name");
		names[idx] = itemNameSeven;
		if (seven == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (seven == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameEight = dataTableGetString (datatable, 7, "examine_item_name");
		names[idx] = itemNameEight;
		if (eight == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (eight == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameNine = dataTableGetString (datatable, 8, "examine_item_name");
		names[idx] = itemNameNine;
		if (nine == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (nine == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;

		string itemNameTen = dataTableGetString (datatable, 9, "examine_item_name");
		names[idx] = itemNameTen;
		if (ten == 0)
		{
			string hasItem = "No";
			attribs[idx] = hasItem;
		}
		else if (ten == 1)
		{
			string hasItem = "Yes";
			attribs[idx] = hasItem;
		}
		idx++;

		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

// If this object has another dragged on top of it, do this. Do not allow OnReceivedItem to go off if we decide to ScriptOverride
trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	if ( !utils.isNestedWithin(self, transferer) )
			return SCRIPT_OVERRIDE;

	string datatable = getStringObjVar (self, "loot_kit");

	string itemObjVar = dataTableGetString(datatable, 0, "item_objvar_name");
	
	int kitPartTemplateRowNum = -1;
	if ( dataTableHasColumn (datatable, "useKitPartTemplate") )
	{
		string itemTemplate = getTemplateName(item);
		if ( !itemTemplate.equals("") )
		{
			kitPartTemplateRowNum = dataTableSearchColumnForString(itemTemplate, "useKitPartTemplate", datatable);
		}
	}
	if ( kitPartTemplateRowNum > -1 )
	{
		string kitPartObjVar = dataTableGetString(datatable, kitPartTemplateRowNum, "objvar_name");	
		if ( getIntObjVar(self, kitPartObjVar) == 1 )
		{
			sendSystemMessage(transferer, ALREADY_CONTAINS);
			return SCRIPT_OVERRIDE;
		}
	}
	else if (hasObjVar(item, itemObjVar))
	{
		//check for stack script
		if(!hasScript(item, "object.autostack"))
		{
			//attach script
			attachScript(item, "object.autostack");
			//the player may be just trying to free
			//up space,
			sendSystemMessage(transferer, AUTOSTACK_ATTACHED_EJECTED);
			return SCRIPT_OVERRIDE;
		}
		
		int itemNumber = getIntObjVar(item, itemObjVar);

		if (itemNumber == 1)
		{
			if (getIntObjVar(self, "collectible.item_contained_01") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 2)
		{
			if (getIntObjVar(self, "collectible.item_contained_02") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 3)
		{
			if (getIntObjVar(self, "collectible.item_contained_03") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 4)
		{
			if (getIntObjVar(self, "collectible.item_contained_04") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 5)
		{
			if (getIntObjVar(self, "collectible.item_contained_05") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 6)
		{
			if (getIntObjVar(self, "collectible.item_contained_06") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 7)
		{
			if (getIntObjVar(self, "collectible.item_contained_07") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 8)
		{
			if (getIntObjVar(self, "collectible.item_contained_08") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 9)
		{
			if (getIntObjVar(self, "collectible.item_contained_09") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
		else if (itemNumber == 10)
		{
			if (getIntObjVar(self, "collectible.item_contained_10") == 1)
			{
				sendSystemMessage(transferer, ALREADY_CONTAINS);
				return SCRIPT_OVERRIDE;
			}
		}
	}
	else //if(!hasObjVar(item, itemObjVar))
	{
		sendSystemMessage(transferer, INCORRECT_ITEM);
		return SCRIPT_OVERRIDE;
	}

	return SCRIPT_CONTINUE;
}

// If this object actually receives another item, do this. If the item being dragged on top of the medtool is of the correct type, increment the tool's count
trigger OnReceivedItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	string datatable = getStringObjVar (self, "loot_kit");

	string itemObjVar = dataTableGetString(datatable, 0, "item_objvar_name");

	int itemNumber = getIntObjVar(item, itemObjVar);

	int kitPartTemplateRowNum = -1;
	if ( dataTableHasColumn (datatable, "useKitPartTemplate") )
	{
		string itemTemplate = getTemplateName(item);
		if ( !itemTemplate.equals("") )
		{
			kitPartTemplateRowNum = dataTableSearchColumnForString(itemTemplate, "useKitPartTemplate", datatable);
		}
	}
	
	if ( kitPartTemplateRowNum > -1 )
	{
		string kitPartObjVar = dataTableGetString(datatable, kitPartTemplateRowNum, "objvar_name");
		setObjVar(self, kitPartObjVar, 1 );
	}
	else if (itemNumber == 1)
	{
		setObjVar(self, "collectible.item_contained_01", 1);
	}
	else if (itemNumber == 2)
	{
		setObjVar(self, "collectible.item_contained_02", 1);
	}
	else if (itemNumber == 3)
	{
		setObjVar(self, "collectible.item_contained_03", 1);
	}
	else if (itemNumber == 4)
	{
		setObjVar(self, "collectible.item_contained_04", 1);
	}
	else if (itemNumber == 5)
	{
		setObjVar(self, "collectible.item_contained_05", 1);
	}
	else if (itemNumber == 6)
	{
		setObjVar(self, "collectible.item_contained_06", 1);
	}
	else if (itemNumber == 7)
	{
		setObjVar(self, "collectible.item_contained_07", 1);
	}
	else if (itemNumber == 8)
	{
		setObjVar(self, "collectible.item_contained_08", 1);
	}
	else if (itemNumber == 9)
	{
		setObjVar(self, "collectible.item_contained_09", 1);
	}
	else if (itemNumber == 10)
	{
		setObjVar(self, "collectible.item_contained_10", 1);
	}

	sendSystemMessage(transferer, ITEM_USED);
	
	decrementCount(item);
	//if a stack exists, eject it
	obj_id[] contents = getContents(self);
	if(contents != null && contents.length > 0)
	{
		obj_id playerInv = utils.getInventoryContainer(transferer);
		for(int i = 0; i < contents.length; i++)
			putInOverloaded(contents[i], playerInv);
	}

	checkForCompletion(self, transferer);

	return SCRIPT_CONTINUE;
}

// **********************************************************************************************************************************
// ********** FUNCTIONS **********
// **********************************************************************************************************************************
void checkForCompletion(obj_id self, obj_id player)
{
	if (!isIdValid(player))
		return;

	if(getIntObjVar(self, "collectible.item_contained_01") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_02") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_03") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_04") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_05") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_06") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_07") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_08") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_09") == 0)
		return;

	if(getIntObjVar(self, "collectible.item_contained_10") == 0)
		return;

	obj_id playerInv = getObjectInSlot( player, "inventory" );
	if(isIdValid(playerInv))
	{
		string datatable = getStringObjVar (self, "loot_kit");
		string rewardItem = dataTableGetString(datatable, 0, "item_reward_name");
		obj_id item = createObject( rewardItem, playerInv, "" );
		if(isIdValid(item))
		{
			sendSystemMessage(player, NEW_ITEM_CREATED);
			utils.setScriptVar(self, "cleaningUp", true);
			destroyObject(self);
		}
	}
	return;
}
