include library.craftinglib;
include library.pet_lib;
include library.player_structure;
include library.structure;
include library.sui;
include library.utils;

trigger OnAttach()
{
	if(hasObjVar(self, "notrade"))
		removeObjVar(self, "notrade");

	setObjVar(self, "noTrade", true);

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if(hasObjVar(self, "notrade"))
		removeObjVar(self, "notrade");

	setObjVar(self, "noTrade", true);

	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeTransferred(obj_id dest, obj_id transferer)
{
	if(!isPlayer(transferer) || isGod(transferer))
		return SCRIPT_CONTINUE;

	obj_id owner = getOwner(self);

	if(!isIdValid(owner))
		return SCRIPT_OVERRIDE;

	if(owner != transferer)
	{
		// if the no trade item is a "shared" no trade item and is immediately
		// contained in a structure cell, and is being transferred to the
		// transferer's inventory (i.e. picked up), also allow the transfer if
		// the transferer is on the same account as the current owner of the item
		if(isNoTradeShared(self))
		{
			obj_id container = getContainedBy(self);

			if(isIdValid(container) && getTemplateName(container).equals(structure.TEMPLATE_CELL) && isIdValid(dest))
			{
				obj_id transfererInv = utils.getInventoryContainer(transferer);

				if(isIdValid(transfererInv) && (dest == transfererInv))
				{
					int transfererStationId = getPlayerStationId(transferer);

					if(transfererStationId != 0 && transfererStationId == getPlayerStationId(owner))
						return SCRIPT_CONTINUE;
				}
			}
		}

		string name = getString(getNameStringId(self));

		string msg = "You are not the owner of " + name + "\n";
		msg += " This item may only be picked up by the owner.";

		string title = "INFO";

		sui.msgbox(transferer, transferer, msg, sui.OK_ONLY, title, "noHandler");

		return SCRIPT_OVERRIDE;
	}

	if(pet_lib.isPet(dest))
	{
		return SCRIPT_OVERRIDE;
	}

	location loc = getLocation(transferer);

	obj_id inv = utils.getInventoryContainer(owner);
	obj_id cell = loc.cell;

	LOG("nomove", "Source = " + transferer + "; Dest = " + dest + "; Owner = " + owner + "; Inv = " + inv);

	if(!isIdValid(inv))
		return SCRIPT_OVERRIDE;

	if(dest == owner || dest == inv)
		return SCRIPT_CONTINUE;

	string validHouseName = null;

	if(isIdValid(cell) && dest == cell)
	{
		obj_id house = getTopMostContainer(transferer);
		
		if(isIdValid(house) && exists(house) && player_structure.isOwner(house, transferer))
		{
			string houseTemplate = getTemplateName(house);
			string validTemplate = getStringObjVar(self, "validHouse");
			validHouseName = getStringObjVar(self, "validHouseName");

			if(houseTemplate.equals(validTemplate))
			{
				return SCRIPT_CONTINUE;
			}
		}
	}

	string name = getString(getNameStringId(self));

	string msg = name + " may only be equipped, placed in your inventory or house.\n";
	msg += " This item may *not* be placed in containers other than your top-level inventory or house.";

	if(validHouseName != null && validHouseName.length() > 0)
	{
		msg = name + " may only be equipped, placed in your inventory or " + validHouseName + " (house).\n";
		msg += " This item may *not* be placed in containers other than your top-level inventory or house.";
	}

	string title = "INFO";

	sui.msgbox(owner, owner, msg, sui.OK_ONLY, title, "noHandler");

 	return SCRIPT_OVERRIDE;
}
