include library.sui;
include library.utils;

trigger OnAttach()
{
	if(hasObjVar(self, "notrade"))
		removeObjVar(self, "notrade");

	if(utils.isNestedWithinAPlayer(self))
		setObjVar(self, "noTrade", true);

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if(hasObjVar(self, "notrade"))
		removeObjVar(self, "notrade");

	if(utils.isNestedWithinAPlayer(self))
		setObjVar(self, "noTrade", true);

	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeTransferred(obj_id dest, obj_id transferer)
{
	if(!isPlayer(transferer) || isGod(transferer))
		return SCRIPT_CONTINUE;

	obj_id owner = getOwner(self);
	if(!isIdValid(owner))
		return SCRIPT_CONTINUE;

	obj_id inv = utils.getInventoryContainer(owner);
	obj_id bank = utils.getPlayerBank(owner);

	if(!isIdValid(inv) || !isIdValid(bank))
		return SCRIPT_OVERRIDE;

	if(dest == owner || dest == inv || dest == bank)
		return SCRIPT_CONTINUE;

	if(hasScript(dest, "item.loot_cube.republic_assembly_tool"))
		return SCRIPT_CONTINUE;

	string prompt = "@som/som_cube:nomove_prompt";
	string title = "@som/som_cube:nomove_title";
	sui.msgbox(owner, owner, prompt, sui.OK_ONLY, title, "noHandler");
 	return SCRIPT_OVERRIDE;
}

trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	obj_id inv = utils.getInventoryContainer(transferer);

	if(destContainer == inv)
		setObjVar(self, "noTrade", true);

	return SCRIPT_CONTINUE;
}