//------------------------------------------------
// slicing_armor.scriptlib
// Brandon Reinhart
//------------------------------------------------

//------------------------------------------------
// Include
//------------------------------------------------

include library.prose;
include library.slicing;
include library.utils;
include library.weapons;
include library.xp;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id SID_SLICE			= new string_id("slicing/slicing", "slice");
const string_id SID_REPAIR			= new string_id("slicing/slicing", "repair");
const string_id SID_NO_KIT			= new string_id("slicing/slicing", "no_armor_kit");
const string_id SID_RES_MOD			= new string_id("slicing/slicing", "res_mod");
const string_id SID_DEF_MOD			= new string_id("slicing/slicing", "def_mod");
const string_id SID_CRIT_MOD		= new string_id("slicing/slicing", "acrit_mod");
const string_id SID_AB_MOD			= new string_id("slicing/slicing", "ab_mod");
const string_id SID_FAIL_ARMOR		= new string_id("slicing/slicing", "fail_armor");
const string_id SID_ARMOR_AT_MAX	= new string_id("slicing/slicing", "armor_at_max");
const string_id SID_NOT_IN_INV		= new string_id("slicing/slicing", "not_in_inv");
const string_id SID_NOT_ARMOR		= new string_id("slicing/slicing", "not_armor");
const string_id SID_FAILED_NO_EQUIP	= new string_id("slicing/slicing", "failed_no_equip");

const string_id SID_SLICE_APPLIED	= new string_id("slicing/slicing", "slice_applied");

const string COMP_BI_L				= "armor_composite_bicep_l.iff";
const string COMP_BI_R				= "armor_composite_bicep_r.iff";
const string COMP_BOOTS				= "armor_composite_boots.iff";
const string COMP_BRC_L				= "armor_composite_bracer_l.iff";
const string COMP_BRC_R				= "armor_composite_bracer_r.iff";
const string COMP_CHEST				= "armor_composite_chest_plate.iff";
const string COMP_GLOVE				= "armor_composite_gloves.iff";
const string COMP_HELM				= "armor_composite_helmet.iff";
const string COMP_LEGS				= "armor_composite_leggings.iff";

const float ARMOR_MIN				= 0.0f;
const float ARMOR_MAX				= 1.0f;

const string SLICE_TABLE			= "datatables/smuggler/slice_armor.iff";

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// If we are not armor, detach us.
	int ourType = getGameObjectType( self );
	if ( !isGameObjectTypeOf( ourType, GOT_armor ) )
		detachScript( self, "item.slicing.slicing_armor" );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------
/*						// BLOCK MODIFIED FOR NPE/CLICKY-COMBAT - RcT - 10/12/05
trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	if ( hasSkill( player, "combat_smuggler_novice" ) && hasObjVar( self, "armor.general_protection" ) )
	{
		int cust = getIntObjVar( self, "slice.customized" );
		if ( cust == 100 )
			return SCRIPT_CONTINUE;

		// Make sure we are in the player's inventory.
		obj_id pInv = utils.getInventoryContainer( player );
		if ( !isIdValid(pInv) )
			return SCRIPT_CONTINUE;
		if ( !contains( pInv, self ) )
			return SCRIPT_CONTINUE;
		//mi.addRootMenu( menu_info_types.SERVER_MENU5, SID_SLICE );		// MODIFIED FOR NPE/CLICKY-COMBAT - RcT - 10/12/05
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	// Item was used.
	if ( item == menu_info_types.SERVER_MENU5 )
	{
		// You can only slice this if you have the correct skill.
		if ( hasObjVar( self, "slicing.hacked" ) || !hasSkill( player, "combat_smuggler_novice" ) || !hasObjVar( self, "armor.general_protection" ) )
			return SCRIPT_CONTINUE;
		int cust = getIntObjVar( self, "slice.customized" );
		if ( cust == 100 )
			return SCRIPT_CONTINUE;

		// Make sure we are in the player's inventory.
		obj_id pInv = utils.getInventoryContainer( player );
		if ( !isIdValid(pInv) )
			return SCRIPT_CONTINUE;
		if ( !contains( pInv, self ) )
			return SCRIPT_CONTINUE;
			
		// Begin the slicing game.
		slicing.startSlicing( player, self, "finishSlicing", "armor" );
	}

	return SCRIPT_CONTINUE;
}
*/
//------------------------------------------------
// finishSlicing
//------------------------------------------------

messageHandler finishSlicing()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	// Make sure we are in the player's inventory.
	obj_id player = params.getObjId( "player" );
	obj_id pInv = utils.getInventoryContainer( player );
	if ( !isIdValid(pInv) )
		return SCRIPT_CONTINUE;
	if ( !contains( pInv, self ) )
	{
		sendSystemMessage( player, SID_NOT_IN_INV );
		return SCRIPT_CONTINUE;
	}

	int success = params.getInt( "success" );
	int row = params.getInt( "row" );
	if ( success == 1 )
	{
		// We successfully applied the slice.
		dictionary effect = dataTableGetRow( SLICE_TABLE, row );
		string slice_name = effect.getString( "SLICE" );
		string stat = effect.getString( "STAT" );
		int slice_cost = effect.getInt( "COST" );
		int slice_amount = effect.getInt( "AMOUNT" );
		
		// Apply the effect.
		boolean asuccess = false;
		if ( stat == "resilience" )
		{
			asuccess = applyResilienceChange( self, player, slice_amount );
		}
		else if ( stat == "deflect" )
		{
			asuccess = applyDeflectChange( self, player, slice_amount );
		}
		else if ( stat == "crit_chance" )
		{
			asuccess = applyCritChange( self, player, slice_amount );
		}
		else if ( stat == "armor_break" )
		{
			asuccess = applyArmorBreakChange( self, player, slice_amount );
		}
		
		if ( asuccess )
		{
			// Add the cost to the armor's current customized complexity.
			int armor_cust = getIntObjVar( self, "slice.customized" );
			armor_cust += slice_cost;
			setObjVar( self, "slice.customized", armor_cust );

			// Remember the rank this armor is sliced to.
			setObjVar( self, "slice.rank."+stat, effect.getInt( "RANK" ) );

			// General notification.		
			prose_package pp = prose.getPackage( SID_SLICE_APPLIED, new string_id( "slicing/slicing_armor", slice_name ) );
			sendSystemMessageProse( player, pp );

			// Mark us as being hacked!
			setObjVar( self, "slicing.new_hacked", 1 );

			// Update our attributes.
			sendDirtyAttributesNotification( self );
		}
	}
	else
	{
		// We failed to apply the slice.
		// Currently this doesn't happen.
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// applyResilienceChange
//------------------------------------------------

boolean applyResilienceChange( obj_id self, obj_id player, int slice_amount )
{
	// Notify the player.
	prose_package pp = prose.getPackage( SID_RES_MOD, slice_amount );
	sendSystemMessageProse( player, pp );

	// Record the change.
	setObjVar( self, "slice.resilience", slice_amount );

	return true;
}

//------------------------------------------------
// applyDeflectChange
//------------------------------------------------

boolean applyDeflectChange( obj_id self, obj_id player, int slice_amount )
{
	// Notify the player.
	prose_package pp = prose.getPackage( SID_DEF_MOD, slice_amount );
	sendSystemMessageProse( player, pp );

	// Record the change.
	setObjVar( self, "slice.deflect", slice_amount );

	return true;
}

//------------------------------------------------
// applyCritChange
//------------------------------------------------

boolean applyCritChange( obj_id self, obj_id player, int slice_amount )
{
	// Notify the player.
	prose_package pp = prose.getPackage( SID_CRIT_MOD, slice_amount );
	sendSystemMessageProse( player, pp );

	// Record the change.
	setObjVar( self, "slice.crit", slice_amount );

	return true;
}

//------------------------------------------------
// applyArmorBreakChange
//------------------------------------------------

boolean applyArmorBreakChange( obj_id self, obj_id player, int slice_amount )
{
	// Notify the player.
	prose_package pp = prose.getPackage( SID_AB_MOD, slice_amount );
	sendSystemMessageProse( player, pp );

	// Record the change.
	setObjVar( self, "slice.armor_break", slice_amount );

	return true;
}

//------------------------------------------------
// OnGetAttributes
//------------------------------------------------
/*						// BLOCK MODIFIED FOR NPE/CLICKY-COMBAT - RcT - 10/12/05
trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{
	if ( hasObjVar( self, "slice" ) )
	{
		int idx = utils.getValidAttributeIndex( names );
		if ( idx == -1 )
			return SCRIPT_CONTINUE;
			
		// Customization
		int armor_cust = getIntObjVar( self, "slice.customized" );
		names[idx] = "wpn_cust";
		attribs[idx] = armor_cust + "%";
		idx++;
		
		// Resilience
		if ( hasObjVar( self, "slice.resilience" ) )
		{
			int resilience = getIntObjVar( self, "slice.resilience" );
			names[idx] = "a_resilience";
			attribs[idx] = resilience + "%";
			idx++;
		}

		// Deflect
		if ( hasObjVar( self, "slice.deflect" ) )
		{
			int deflect = getIntObjVar( self, "slice.deflect" );
			names[idx] = "a_deflect";
			attribs[idx] = deflect + "%";
			idx++;
		}
		
		// Crit Chance
		if ( hasObjVar( self, "slice.crit" ) )
		{
			int crit_chance = getIntObjVar( self, "slice.crit" );
			names[idx] = "a_crit_chance";
			attribs[idx] = crit_chance + "%";
			idx++;
		}

		// Armor Break
		if ( hasObjVar( self, "slice.armor_break" ) )
		{
			int armor_break = getIntObjVar( self, "slice.armor_break" );
			names[idx] = "a_armor_break";
			attribs[idx] = armor_break + "%";
			idx++;
		}
	}
	
	return SCRIPT_CONTINUE;
}
*/
