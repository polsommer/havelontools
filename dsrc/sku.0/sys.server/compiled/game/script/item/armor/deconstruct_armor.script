/**
 * Copyright (c) ©2004 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        item.armor.new_armor.script
 * Description:  displays the attributes for armor created by the new armor system
 * @author       $Author: Steve Jakab$
 * @version      $Revision: 0$
 */


/***** INCLUDES ********************************************************/

include library.armor;
include library.craftinglib;
include library.metrics;
include library.utils;
include library.prose;
include library.static_item;
include library.sui;

/***** CONSTANTS *******************************************************/
const string PID_NAME = "armorDeconstruct";

/***** TRIGGERS ********************************************************/

trigger OnObjectMenuRequest(obj_id player, menu_info item)
{
	//if is not in player inventory
	if(!utils.isNestedWithinAPlayer(self))
		return SCRIPT_CONTINUE;
	
	//cannot be equipped
	if(utils.isEquipped(self))
		return SCRIPT_CONTINUE;

	//if is static dynamic
	if(static_item.isDynamicItem(self))
		return SCRIPT_CONTINUE;
	
	//if biolinked, we only want the owner to do the deconstuction
	obj_id bioLink = getBioLink(self);
	if(isIdValid(bioLink) && utils.stringToLong(bioLink.toString()) != 1)
	{
		if(bioLink != player)
			return SCRIPT_CONTINUE;
	}
	
	int management_root = item.addRootMenu (menu_info_types.SERVER_MENU5, armor.SID_ARMOR_TO_SCHEM);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.SERVER_MENU5)
	{
		//if is not in player inventory
		if(!utils.isNestedWithinAPlayer(self))
			return SCRIPT_CONTINUE;

		//cannot be equipped
		if(utils.isEquipped(self))
			return SCRIPT_CONTINUE;

		//if is static dynamic
		if(static_item.isDynamicItem(self))
			return SCRIPT_CONTINUE;
		
		//if biolinked, we only want the owner to do the deconstuction
		obj_id bioLink = getBioLink(self);
		if(isIdValid(bioLink) && utils.stringToLong(bioLink.toString()) != 1)
		{
			if(bioLink != player)
				return SCRIPT_CONTINUE;
		}
		
		if(sui.hasPid(player, PID_NAME))
		{
			int pid = sui.getPid(player, PID_NAME);
			forceCloseSUIPage(pid);
		}

		int pid = sui.inputbox(self, player, "@" + armor.SID_CONVERT_PROMPT, sui.OK_CANCEL, "@" + armor.SID_CONVERT_TITLE, sui.INPUT_NORMAL, null, "handleConvertSchemSui");

		sui.setPid(player, pid, PID_NAME);		
	}
	return SCRIPT_CONTINUE;
}
messageHandler handleConvertSchemSui()
{
	if(params == null || params.isEmpty())
		return SCRIPT_CONTINUE;
	
	obj_id player = sui.getPlayerId(params);
	
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;
	
	int bp = sui.getIntButtonPressed(params);
	
	if(bp == sui.BP_CANCEL)
	{
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}
	
	int pageId = params.getInt("pageId");
	
	if(!sui.hasPid(player, PID_NAME))
	{
		forceCloseSUIPage(pageId);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has somehow gotten two conversion windows while attempting to convert their old armor("+self+") to a new cored schematic. Bailing out now");
		return SCRIPT_CONTINUE;
	}
	
	int pid = sui.getPid(player, PID_NAME);
	
	if(pageId != pid)
	{
		forceCloseSUIPage(pageId);
		forceCloseSUIPage(pid);
		sui.removePid(player, PID_NAME);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has somehow gotten two conversion windows while attempting to convert their old armor("+self+") to a new cored schematic. Bailing out now");
		return SCRIPT_CONTINUE;
	}
	
	if(!utils.isNestedWithinAPlayer(self))
	{
		forceCloseSUIPage(pid);
		sui.removePid(player, PID_NAME);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has moved their weapon into a container that is not a player while attempting to convert their old armor("+self+") to a new cored schematic. Bailing out now");
		return SCRIPT_CONTINUE;
	}

	//cannot be equipped
	if(utils.isEquipped(self))
	{
		forceCloseSUIPage(pid);
		sui.removePid(player, PID_NAME);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has equipped their old armor("+self+") while attempting to convert it int a new cored schematic. Bailing out now");
		return SCRIPT_CONTINUE;
	}
		
	obj_id playerContained = utils.getContainingPlayer(self);
	
	if(playerContained != player)
	{
		forceCloseSUIPage(pid);
		sui.removePid(player, PID_NAME);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") traded their old armor("+self+") to " + getFirstName(playerContained) + "("+playerContained+") while attempting to convert it int a new cored schematic. They are prolly trying to exploit, bailing out now");
		return SCRIPT_CONTINUE;
	}
	
	//if biolinked, we only want the owner to do the deconstuction
	obj_id bioLink = getBioLink(self);
	if(isIdValid(bioLink) && utils.stringToLong(bioLink.toString()) != 1)
	{
		if(bioLink != player)
		{
			forceCloseSUIPage(pid);
			sui.removePid(player, PID_NAME);
			CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") tried to deconstruct an armor piece("+self+") that is biolinked to " + getFirstName(bioLink) + "("+bioLink+"). They are prolly trying to exploit, bailing out now");
			return SCRIPT_CONTINUE;
		}
	}
	
	string response = sui.getInputBoxText(params);
	
	if(!response.toLowerCase().equals("deconstruct"))
	{
		forceCloseSUIPage(pid);
		sui.removePid(player, PID_NAME);
		sendSystemMessage(player, armor.SID_CONVERT_INVALID_RESPONSE);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has entered '" + response + "' instead of 'deconstruct' so the armor will not be deconstructed.");
		return SCRIPT_CONTINUE;
	}

	if(armor.turnArmorIntoSchem(player, self))
	{
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") has decided to convert their old armor("+self+") to a new cored schematic.");
		sui.removePid(player, PID_NAME);
		sendSystemMessage(player, armor.SID_CONVERT_CONVERT_SUCCESS);
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}
	else
	{
		sendSystemMessage(player, armor.SID_CONVERT_CONVERT_FAIL);
		CustomerServiceLog("armor_conversion", "Player "+getFirstName(player)+"("+player+") attempted to convert their old armor("+self+") to a new cored schematic, and it failed.");
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}
}

