include library.prose;
include library.static_item;
include library.township;
include library.utils;


const string VAR_SCHEMATIC				= "loot_schematic.schematic";
const string VAR_SKILL					= "loot_schematic.skill";
const string VAR_SKILL_REQ				= "loot_schematic.skill_req";
const string VAR_TYPE					= "loot_schematic.type";


const string_id SID_LEARN_SCHEMATIC			= new string_id("loot_schematic", "learn_schematic");
const string_id SID_SCHEMATIC				= new string_id("loot_schematic", "schematic");
const string_id SID_NOT_ENOUGH_SKILL			= new string_id("loot_schematic", "not_enough_skill");
const string_id SID_ALREADY_HAVE_SCHEMATIC		= new string_id("loot_schematic", "already_have_schematic");
const string_id SID_MUST_BE_HOLDING			= new string_id("loot_schematic", "must_be_holding");
const string_id SID_SCHEMATIC_GRANTED			= new string_id("loot_schematic", "schematic_granted");
const string_id SID_SKILL				= new string_id("loot_schematic", "skill");
const string_id SID_ABILITY				= new string_id("loot_schematic", "ability");
const string_id SID_WAYPOINT				= new string_id("loot_schematic", "waypoint");



trigger OnInitialize()
{
	if(hasObjVar(self, VAR_SCHEMATIC) && !static_item.isStaticItem(self))
	{
		string schemGranted = getStringObjVar(self, VAR_SCHEMATIC);
		
		if(schemGranted.indexOf("weapon") > -1 && schemGranted.indexOf("component") < 0)
		{
			if(schemGranted.indexOf("appearance") < 0)
			{
				string template = getTemplateName(self);

				if(template.length() > 0)
				{
					utils.replaceSnowflakeItem(self, template);
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1) 
		return SCRIPT_CONTINUE;
		
	int type = getLootItemType(self);
	if (type < 1)
		return SCRIPT_CONTINUE;
	
	string[] type_str = {localize(SID_SCHEMATIC), localize(SID_SKILL), localize(SID_ABILITY), localize(SID_WAYPOINT), localize(SID_ABILITY)};
	
	names[idx] = "knowlege_type";		
	attribs[idx] = type_str[type - 1];
	idx++;
	
	if (hasObjVar(self, VAR_SKILL_REQ))
	{
		string skill_req = getStringObjVar(self, VAR_SKILL_REQ);
		string_id skill_id = utils.unpackString("@skl_n:" + skill_req);
		names[idx] = "loot_schematic_skill_required";
		attribs[idx] = localize(skill_id);
		idx++;
	}
	
	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( hasObjVar(self, township.OBJECT_FOR_SALE_ON_VENDOR) )
		return SCRIPT_CONTINUE;
	
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, SID_LEARN_SCHEMATIC );

	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid == null )
		{
			return SCRIPT_CONTINUE;
		}

		mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if (!isIdValid(self))
		return SCRIPT_CONTINUE;

	if ( hasObjVar(self, township.OBJECT_FOR_SALE_ON_VENDOR) )
		return SCRIPT_CONTINUE;

	obj_id container = getContainedBy(self);
	if (!isIdValid(container))
	{
		sendSystemMessage(player, SID_MUST_BE_HOLDING);
		return SCRIPT_CONTINUE;
	}
	else if (container != getObjectInSlot(player, "inventory"))
	{
		sendSystemMessage(player, SID_MUST_BE_HOLDING);
		return SCRIPT_CONTINUE;
	}

	if (item == menu_info_types.ITEM_USE)
	{
		if (hasObjVar(self, VAR_SKILL_REQ))
		{
			string skill_req = getStringObjVar(self, VAR_SKILL_REQ);
			if (!hasSkill(player, skill_req))
			{
				string_id skill_id = utils.unpackString("@skl_n:" + skill_req);
				prose_package pp = prose.getPackage(SID_NOT_ENOUGH_SKILL, skill_id);
				sendSystemMessageProse(player, pp);
				return SCRIPT_CONTINUE;
			}
		}
		string schematic = getStringObjVar(self, VAR_SCHEMATIC);
		if (hasSchematic(player, schematic))
		{
				sendSystemMessage(player, SID_ALREADY_HAVE_SCHEMATIC);
				return SCRIPT_CONTINUE;
		}

		grantSchematic(player, schematic);
		sendSystemMessage(player, SID_SCHEMATIC_GRANTED);
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}

int getLootItemType(obj_id item)
{
	if (!isIdValid(item))
		return -1;
	
	
	if (hasObjVar(item, VAR_TYPE))
		return getIntObjVar(item, VAR_TYPE);
	else
	{
		// if no type is given, it is assumed to be the schematic.
		return 1;
	}
}
