/********************************************************************************************
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 ********************************************************************************************
 * Title:       base_dice.script
 * Description:
 *
 * @author       $Author: Matthew Kwid$
 * @version      $Revision: $
 *
 ********************************************************************************************

/***** FUNCTIONS *****************************************************************************
trigger OnInitialize()

/***** INCLUDES *****************************************************************************/
include library.utils;
include library.debug;
include library.prose;

/***** INHERITS *****************************************************************************/

/***** CONSTANTS ****************************************************************************/
const string VAR_ROLL_RESULT          = "roll_result_value";
const string VAR_FACE_COUNT           = "dice_face_count";
const string DICE_TYPE_NAME           = "dice_type_name";
const string CHANCE_CUBE_DICE         = "chance_cube";
const string VAR_DICE_COUNT           = "dice_count";
const string CHANCE_CUBE_SCRIPT       = "item.dice.chance_cube";
const string CONFIGURABLE_DICE_SCRIPT = "item.dice.configurable_group_dice";
const string SIX_SIDED_SCRIPT         = "item.dice.six_sided_dice_set";
const string VAR_VALUE_INITIALIZED    = "dice_initialized";
const string_id CONFIGURE_MSG         = new string_id("dice/dice", "dice_configure_msg");

const string STF						= "dice/dice";

const string_id RED						= new string_id(STF, "red");
const string_id BLUE					= new string_id(STF, "blue");

/********************************************************************************************
 * @brief  trigger handler when initializing the script
 *
 * @return	SCRIPT_CONTINUE
 ********************************************************************************************/
trigger OnAttach()
{
    debug.debugAllMsg("DEBUG", self, "##########base_dice script attached##############");
	return SCRIPT_CONTINUE;

}//OnInitialize

/********************************************************************************************
 * @brief  trigger handler when initializing the script
 *
 * @return	SCRIPT_CONTINUE
 ********************************************************************************************/
trigger OnInitialize()
{
    debug.debugAllMsg("DEBUG", self, "##########base_dice script initialized##############");
    setObjVar(self, VAR_VALUE_INITIALIZED, false);
	return SCRIPT_CONTINUE;

}//OnInitialize

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	string dice_type_name = getStringObjVar(self, DICE_TYPE_NAME);
	if ( dice_type_name == null || dice_type_name.equals("") )
		return SCRIPT_CONTINUE;
	
	debug.debugAllMsg("DEBUG", self, "##########" + dice_type_name + "##############");

	if(dice_type_name.equals("chance_cube"))
	{
		mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("dice/dice","dice_roll_single"));
	}
	else if(dice_type_name.equals("configurable_group_dice"))
	{
	 	mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("dice/dice","dice_roll_single"));
	 	
	 	int menu = mi.addRootMenu(menu_info_types.SERVER_MENU1, new string_id("dice/dice_details","eqp_dice_configure"));
		mi.addSubMenu(menu, menu_info_types.DICE_EIGHT_FACE, new string_id("dice/dice","dice_eight_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_SEVEN_FACE, new string_id("dice/dice","dice_seven_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_SIX_FACE, new string_id("dice/dice","dice_six_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_FIVE_FACE, new string_id("dice/dice","dice_five_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_FOUR_FACE, new string_id("dice/dice","dice_four_single"));
	  	mi.addSubMenu(menu, menu_info_types.DICE_THREE_FACE, new string_id("dice/dice","dice_three_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_TWO_FACE, new string_id("dice/dice","dice_two_single"));
	}
	else
	{
	 	int menu = mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("dice/dice","dice_roll_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_COUNT_FOUR, new string_id("dice/dice","dice_roll_four_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_COUNT_THREE, new string_id("dice/dice","dice_roll_three_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_COUNT_TWO, new string_id("dice/dice","dice_roll_two_single"));
		mi.addSubMenu(menu, menu_info_types.DICE_COUNT_ONE, new string_id("dice/dice","dice_roll_one_single"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	debug.debugAllMsg("DEBUG", self, "##########OnObjectMenuSelect()#########");
    string typeName= getStringObjVar(self, DICE_TYPE_NAME);
	if ( typeName == null || typeName.equals("") )
		return SCRIPT_CONTINUE;

	if (item == menu_info_types.ITEM_USE && typeName.equals("chance_cube"))
 	{
		string color = null;

		debug.debugAllMsg("DEBUG", self, "##########found color in base_dice#########");

		messageTo(self, "roll", null, 0, true);

		color = getStringObjVar(self, VAR_ROLL_RESULT );
		
		if(color == null)
		{
			int chooser = rand(1,2,0);
		
			if(chooser == 1)
				color = "blue";
			else 
				color = "red";
		}
		
		debug.debugAllMsg("DEBUG", self, "##########Color found: + " + color + "#########");

		informGroupOfResults(null, player, self, color);
		return SCRIPT_CONTINUE;
 	}

	if(typeName.equals("chance_cube"))
		return SCRIPT_CONTINUE;

	debug.debugAllMsg("DEBUG", self, "##########found value in base_dice#########");

	dictionary params = new dictionary();
	params.put("player", player);
	
	if(item == menu_info_types.DICE_TWO_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 2);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_THREE_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 3);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_FOUR_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 4);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_FIVE_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 5);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_SIX_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 6);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_SEVEN_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 7);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_EIGHT_FACE)
	{
		setObjVar(self, VAR_FACE_COUNT, 8);
		setObjVar(self, VAR_VALUE_INITIALIZED, true);
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.SERVER_MENU1)
	{
		return SCRIPT_CONTINUE;
	}
	else if(item == menu_info_types.DICE_COUNT_ONE  || item == menu_info_types.ITEM_USE)
	{
		setObjVar(self, VAR_DICE_COUNT, 1);
		messageTo(self, "roll", params, 0, true);
	}
	else if(item == menu_info_types.DICE_COUNT_TWO)
	{
		setObjVar(self, VAR_DICE_COUNT, 2);
		messageTo(self, "roll", params, 0, true);
	}
	else if(item == menu_info_types.DICE_COUNT_THREE)
	{
		setObjVar(self, VAR_DICE_COUNT, 3);
		messageTo(self, "roll", params, 0, true);
	}
	else if(item == menu_info_types.DICE_COUNT_FOUR)
	{
		setObjVar(self, VAR_DICE_COUNT, 4);
		messageTo(self, "roll", params, 0, true);
	}
	else if(item == menu_info_types.DICE_ROLL)
		messageTo(self, "roll", params, 0, true);	
	
 	return SCRIPT_CONTINUE;
}

void informGroupOfResults(int[] rollValues, obj_id player, obj_id die, string color)
{
	obj_id groupId        = getGroupObject(player);
	obj_id[] groupMembers = getGroupMemberIds(groupId);

	if(groupMembers != null)
	{
		// print results to the entire group
		for(int i=0; i < groupMembers.length; ++i)
		{
			if(groupMembers[i] != player && groupMembers[i].isLoaded() )
				displayResults(player, groupMembers[i], die, rollValues, color);
		}
	}

	displayResults(player, player, die, rollValues, color);

}//informGroupOfResults

void displayResults(obj_id player, obj_id target, obj_id die, int[] rollValues, string color)
{
	if(color != null)
	{
		prose_package pp = new prose_package();
		if ( player == target )
		{
			pp = prose.getPackage(new string_id(STF, "chance_cube_result_self"), new string_id(STF, color));
		}
		else
		{
			pp = prose.getPackage(new string_id(STF, "chance_cube_result_other"), player, new string_id(STF, color));
		}
		
		/*
		if(color.equals("red"))
		{
   			pp.stringId      = new string_id("dice/dice", "chance_cube_red_result_single");
			pp.actor.set(player);
		}
		else
		{
			prose_package pp = new prose_package();
   			pp.stringId      = new string_id("dice/dice", "chance_cube_blue_result_single");
			pp.actor.set(player);
			sendSystemMessageProse(target, pp);
		}
		*/

		sendSystemMessageProse(target, pp);

		string messageStr = getName(player) + "'s chance cube rolled the color " + color + ".";
		debug.debugAllMsg("DEBUG", player, "##########" + messageStr + "###########");
		return;
	}

	string dice_type_name = getStringObjVar(die, DICE_TYPE_NAME);
	if(dice_type_name.equals("configurable_group_dice"))
	{
 		int faceCount = getIntObjVar(die, VAR_FACE_COUNT);
		string value  = String.valueOf(rollValues[0]);
		prose_package pp = new prose_package();
		
		if ( player == target )
		{
			pp = prose.getPackage(new string_id(STF, "configurable_dice_result_self"), value, faceCount);
		}
		else
		{
			pp = prose.getPackage(new string_id(STF, "configurable_dice_result_other"),
							null,  null,  null,
							player, null, null,
							null,  value,  null,
							faceCount, 0f);
		}
		
		/*
   		pp.stringId      = new string_id("dice/dice", "configurable_dice_result_single");
		pp.actor.set(player);
		pp.digitInteger  = faceCount;
		pp.other.set(value);
		*/
		
		sendSystemMessageProse(target, pp);

	   	string messageStr = "Your " + faceCount + " sided die rolled a value of " + rollValues[0] + ".";
		debug.debugAllMsg("DEBUG", player, "#############" + messageStr + "############");
		return;
	}

	int dieCount       = getIntObjVar(die, VAR_DICE_COUNT);
	
	/*
	string dieCountStr = new string();
	if(dieCount == 1)
		dieCountStr = "one_";
	else if(dieCount == 2)
		dieCountStr = "two_";
	else if(dieCount == 3)
		dieCountStr = "three_";
	else if(dieCount == 4)
		dieCountStr = "four_";

	string faceStr     = new string();
	string faceStrId   = new string();
	if(dice_type_name.equals("six_sided_dice_set"))
	{
		faceStr   = "six";
		faceStrId = dieCountStr + "six_single";
	}
	if(dice_type_name.equals("ten_sided_dice_set"))
	{
		faceStr   = "ten";
		faceStrId = dieCountStr + "ten_single";
	}
	if(dice_type_name.equals("twelve_sided_dice_set"))
	{
		faceStr   = "twelve";
		faceStrId = dieCountStr + "twelve_single";
	}
	if(dice_type_name.equals("twenty_sided_dice_set"))
	{
		faceStr   = "twenty";
		faceStrId = dieCountStr + "twenty_single";
	}
	if(dice_type_name.equals("one_hundred_sided_dice_set"))
	{
		faceStr   = "one hundred";
		faceStrId = dieCountStr + "one_hundred_single";
	}
	*/

	string rollStr = new string();
	for(int i=0; i < rollValues.length && rollValues != null; ++i)
		rollStr += " " + rollValues[i];

	prose_package pp = new prose_package();
	
	/*
   	pp.stringId      = new string_id("dice/dice", faceStrId);
	pp.actor.set(player);
	pp.other.set(rollStr);
	*/
	
	string_id sidNumSides = new string_id(STF, dice_type_name.substring(0, dice_type_name.length()-15));
	if ( dieCount == 1 )
	{
		if ( target == player )
		{
			pp = prose.getPackage(new string_id(STF, "roll_one_self"),
							null,  null,  null,
							null, null, sidNumSides,
							null,  rollStr,  null,
							dieCount, 0f);
		}
		else
		{
			pp = prose.getPackage(new string_id(STF, "roll_one_other"),
							player,  null,  null,
							null, null, sidNumSides,
							null,  rollStr,  null,
							dieCount, 0f);
		}
	}
	else
	{
		if ( target == player )
		{
			pp = prose.getPackage(new string_id(STF, "roll_many_self"),
							null,  null,  null,
							null, null, sidNumSides,
							null,  rollStr,  null,
							dieCount, 0f);
		}
		else
		{
			pp = prose.getPackage(new string_id(STF, "roll_many_other"),
							player,  null,  null,
							null, null, sidNumSides,
							null,  rollStr,  null,
							dieCount, 0f);
		}
	}
	
	sendSystemMessageProse(target, pp);

	/*
	string messageStr = dieCount + " " + faceStr + " sided dice rolled for values of" + rollStr + ".";
	debug.debugAllMsg("DEBUG", player, "#############" + messageStr + "############");
	*/

}//displayResutls

/********************************************************************************************
 * @brief trigger handler when detaching the script
 *
 * @return trigger  SCRIPT_CONTINUE
*********************************************************************************************/
trigger OnDetach()
{
	debug.debugAllMsg("DEBUG", self, "##########base_dice script detached##############");

	return SCRIPT_CONTINUE;

}//OnDetach


