/********************************************************************************************
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 ********************************************************************************************
 * Title:       one_hundred_sided_dice_set.script
 *
 * Description: Allows a player to configure the high and low values for the dice prior to
 * 	    		rolling it. The default floor is 0 and ceiling is 8.
 *
 * @author       $Author: Matthew Kwid$
 * @version      $Revision: $
 *
 ********************************************************************************************

/***** METHODS *****************************************************************************
trigger OnInitialize()
messageHandler roll()
trigger OnDetach()

/***** INCLUDES *****************************************************************************/
include library.utils;
include library.debug;
include library.xp;
include library.craftinglib;

/***** INHERITS *****************************************************************************/
 inherits item.dice.base.base_dice;

/***** CONSTANTS ****************************************************************************/
const int FACE_COUNT         = 100;
const int DEFAULT_DICE_COUNT = 1;
const string TYPE_NAME       = "one_hundred_sided_dice_set";

/********************************************************************************************
 * @brief  trigger handler when initializing the script
 *
 * @return	SCRIPT_CONTINUE
 ********************************************************************************************/
trigger OnInitialize()
{
    debug.debugAllMsg("DEBUG", self, "##########one hundred sided dice script initialized##############");
	setObjVar(self, VAR_FACE_COUNT, FACE_COUNT);
	setObjVar(self, VAR_DICE_COUNT, DEFAULT_DICE_COUNT);
	setObjVar(self, DICE_TYPE_NAME, TYPE_NAME);
	return SCRIPT_CONTINUE;

}//OnInitialize

messageHandler roll()
{
	debug.debugAllMsg("DEBUG", self, "##########one hundred sided dice roll()##############");

	obj_id player = params.getObjId( "player" );
	xp.grantCraftingXpChance( self, player, 40 );

	int faceCount    = getIntObjVar(self, VAR_FACE_COUNT);
	int diceCount    = getIntObjVar(self, VAR_DICE_COUNT);
	int[] rollValues = new int[diceCount];

	for(int i=0; i < diceCount; ++i)
	{
		int roll = rand(1, faceCount, 0);
		rollValues[i] = roll;
	}

	for(int i=0; i < rollValues.length; ++i)
		debug.debugAllMsg("DEBUG", self, "#############Roll Values: " + rollValues[i] + "############");

	setObjVar(self, VAR_ROLL_RESULT, rollValues);

	informGroupOfResults(rollValues, player, self, null);

	return SCRIPT_CONTINUE;

}//roll

/********************************************************************************************
 * @brief trigger handler when detaching the script
 *
 * @return trigger  SCRIPT_CONTINUE
*********************************************************************************************/
trigger OnDetach()
{
	debug.debugAllMsg("DEBUG", self, "##########one hundred sided dice script detached##############");

	return SCRIPT_CONTINUE;

}//OnDetach

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	if (hasObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".useModifier"))
	{
		names[idx] = "usemodifier";
		int attrib = (int)getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".useModifier");
		attribs[idx] = "" + attrib;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}
