/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        travel_ticket.script
 * Description:  script for the travel tickets.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.city;
include library.utils;
include library.player_structure;
include library.prose;
include library.travel;
include library.sui;

/***** CONSTANTS *******************************************************/

const string_id SID_BANNED_TICKET			 = new string_id("city/city", "banned_services");
const string_id SID_ON_PET_OR_VEHICLE		 = new string_id("travel/travel", "on_pet_or_vehicle");
const string_id SID_TICKET_INVALID			 = new string_id("travel/travel", "ticket_invalid");
const string_id SID_NO_SHUTTLE_NEARBY		 = new string_id("travel/travel", "no_shuttle_nearby");
const string_id SID_NO_SHUTTLE_FOR_LOCATION	 = new string_id("travel/travel", "no_shuttle_for_location");
const string_id SID_SUI_TICKET_DEPARTURE_POINT = new string_id("travel/travel", "sui_ticket_departure_point");
const string_id SID_SUI_TICKET_ARRIVAL_POINT = new string_id("travel/travel", "sui_ticket_arrival_point");
const string_id SID_SUI_TICKET_INFORMATION	= new string_id("travel/travel", "sui_ticket_information");

/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType (menu_info_types.ITEM_USE);
	if (mid != null)
	{
		mid.setServerNotify (true);
	}

	//mid = mi.getMenuItemByType (menu_info_types.EXAMINE);
	//if (mid != null)
	//{
	//	mid.setServerNotify (true);
	//}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		if (isIdValid(getMountId(player)))
		{
			LOG("LOG_CHANNEL", player + " -> TRAVEL_TICKET - OnObjectMenuSelect - USE - You cannot board the shuttle when mounted on a pet/vehicle?");
			sendSystemMessage(player, SID_ON_PET_OR_VEHICLE);
			return SCRIPT_CONTINUE;
		}

		// Find the shuttle
		string planet = travel.getTicketDeparturePlanet(self);
		string point = travel.getTicketDeparturePoint(self);
		if (planet == null)
		{
			sendSystemMessage(player, SID_TICKET_INVALID);
			return SCRIPT_CONTINUE;
		}
		if (point == null)
		{
			sendSystemMessage(player, SID_TICKET_INVALID);
			return SCRIPT_CONTINUE;
		}


		// Find a shuttle within range of the player
		obj_id shuttle = travel.getTravelShuttle(player);
		if (shuttle == null)
		{
			LOG("LOG_CHANNEL", player + " ->There is no shuttle nearby.");
			sendSystemMessage(player, SID_NO_SHUTTLE_NEARBY);
			return SCRIPT_CONTINUE;
		}
		else
		{
			obj_id starport = travel.getStarportFromTerminal(shuttle);

			if ( player_structure.isCivic( starport ) )
			{
				// See if we are city banned.
				int city_id = getCityAtLocation( getLocation(starport), 0 );
				if ( city.isCityBanned( player, city_id ) )
				{
					// Can't buy a ticket.
					sendSystemMessage( player, SID_BANNED_TICKET );
					return SCRIPT_CONTINUE;
				}
			}

			if (starport == null)
			{
				LOG("LOG_CHANNEL", player + " ->There is no shuttle nearby for that ticket's departure location.");
				sendSystemMessage(player, SID_NO_SHUTTLE_FOR_LOCATION);
				return SCRIPT_CONTINUE;
			}
			else
			{
				string starport_point = travel.getTravelPointName(starport);
				if (!starport_point.equals(point))
				{
					LOG("LOG_CHANNEL", player + " ->There is no shuttle nearby for that ticket's departure location.");
					sendSystemMessage(player, SID_NO_SHUTTLE_FOR_LOCATION);
					return SCRIPT_CONTINUE;
				}
			}
		}

		if (travel.isTravelBlocked(player, false))
			return SCRIPT_CONTINUE;

		if (travel.isInShuttleBoardingRange(player, shuttle))
			queueCommand(player, ##"boardShuttle", shuttle, self.toString(), COMMAND_PRIORITY_DEFAULT);
		else
		{
			LOG("LOG_CHANNEL", player + " ->There is no shuttle nearby for that ticket's departure location.");
			sendSystemMessage(player, SID_NO_SHUTTLE_FOR_LOCATION);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	// Display departure and arrival locations
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	names[idx] = "travel_departure_planet";
	string departure_planet = travel.getTicketDeparturePlanet(self);
	if (departure_planet == null)
		return SCRIPT_CONTINUE;

	departure_planet = departure_planet.substring(0,1).toUpperCase() + departure_planet.substring(1).toLowerCase();
	attribs[idx] = departure_planet;
	idx++;
	if (idx >= names.length)
		return SCRIPT_CONTINUE;

	names[idx] = "travel_departure_point";
	attribs[idx] = travel.getTicketDeparturePoint(self);
	idx++;
	if (idx >= names.length)
		return SCRIPT_CONTINUE;

	names[idx] = "travel_arrival_planet";
	string arrival_planet = travel.getTicketArrivalPlanet(self);
	if (arrival_planet == null)
		return SCRIPT_CONTINUE;

	arrival_planet = arrival_planet.substring(0,1).toUpperCase() + arrival_planet.substring(1).toLowerCase();
	attribs[idx] = arrival_planet;
	idx++;
	if (idx >= names.length)
		return SCRIPT_CONTINUE;

	names[idx] = "travel_arrival_point";
	attribs[idx] = travel.getTicketArrivalPoint(self);

	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/


/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/


