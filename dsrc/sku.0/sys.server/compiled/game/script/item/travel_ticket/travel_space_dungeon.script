/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        travel_space_dungeon
 * Description:  Attaches to npc/terminal that handles traveling to a space dungeon
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.space_dungeon;
include library.space_dungeon_data;
include library.utils;
include library.sui;
include library.prose;

/***** CONSTANTS *******************************************************/
const string_id SID_UNABLE_TO_FIND_DUNGEON	   	  = new string_id("dungeon/space_dungeon", "unable_to_find_dungeon");
const string_id SID_NO_TICKET				  = new string_id("dungeon/space_dungeon", "no_ticket");
const string_id SID_REQUEST_TRAVEL	   	          = new string_id("dungeon/space_dungeon", "request_travel");
const string_id SID_REQUEST_TRAVEL_OUTSTANDING		  = new string_id("dungeon/space_dungeon", "request_travel_outstanding");

/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( !isMob(self) )
		mi.addRootMenu (menu_info_types.ITEM_USE, SID_REQUEST_TRAVEL);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	// If this script is attached to an NPC, don't use the radial menu.  Allow the travel to be done in conversation.
	if (isMob(self))
		return SCRIPT_CONTINUE;

	if (item == menu_info_types.ITEM_USE)
	{
		space_dungeon.selectDungeonTicket(self, player);
	}

	return SCRIPT_CONTINUE;
}

trigger OnClusterWideDataResponse(string manage_name, string dungeon_type, int request_id, string[] element_name_list, dictionary[] dungeon_data, int lock_key)
{
	// This trigger is fired whenever a request for space dungeon travel has been made.
	LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse");

	// Get the player that initiated this trigger.
	obj_id player = space_dungeon.getDungeonTraveler(self, request_id);
	if (!isIdValid(player) || !player.isAuthoritative())
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- player is invalid or not authoritative.");
		releaseClusterWideDataLock(manage_name, lock_key);

		if (isIdValid(player))
			space_dungeon.cleanupPlayerTicketObjvars(player);

		return SCRIPT_CONTINUE;
	}

	obj_id ticket = null;

	if (hasObjVar(player, space_dungeon.VAR_TICKET_USED))
		ticket = getObjIdObjVar(player, space_dungeon.VAR_TICKET_USED);
	else
	{
		//-- player can be used as the ticket, and carries all the necessary ticket information as objvars
		ticket = player;
	}

	// Make sure the player ticket is still valid
	if (!isIdValid(ticket) || !ticket.isAuthoritative())
	{
		sendSystemMessage(player, space_dungeon.SID_ILLEGAL_TICKET);
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}

	if (!manage_name.equals("dungeon"))
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- ignorning manage_name " + manage_name + " because it is not dungeon.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}
	if (request_id < 1)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- invalid request_id value of " + request_id);
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}
	if (dungeon_data == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon_data is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}
	if (element_name_list == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- element_name_list is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}
	if (dungeon_type == null)
	{
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon_type is null.");
		space_dungeon.cleanupPlayerTicketObjvars(player);
		releaseClusterWideDataLock(manage_name, lock_key);

		return SCRIPT_CONTINUE;
	}

	// The dungeon type is the dungeon name with a wildcard search (ie: dungeon_name*)
	string dungeon_name = dungeon_type.substring(0, dungeon_type.length() - 1);
	//LOG("space_dungeon", "dungeon_name ->" + dungeon_name);

	// Pull the data we need from the dictionary.
	for (int i = 0; i < dungeon_data.length; i++)
	{
		// Check to make certain that the name is in the dungeon datatable.
		if (false == space_dungeon_data.isValidDungeon(dungeon_name))
		{
			LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- dungeon name of " + dungeon_name + " is not in the dungeon datatable.");
			break;
		}
		dictionary dungeon = dungeon_data[i];
		obj_id dungeon_id = dungeon.getObjId("dungeon_id");
		//int participants = dungeon.getInt("participants");
		int session_id = dungeon.getInt("session_id");
		LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- session_id ->" + session_id + " dungeon_instance ->" + element_name_list[i]);
		if (!isIdValid(dungeon_id))
		{
			LOG("space_dungeon", "travel_space_dungeon.OnClusterWideDataResponse -- bad data found for dungeon entry " + i + ". Ignoring.");
			continue;
		}
		if (session_id < 1)
		{
			// Mark the player with his dungeon session id
			setObjVar(player, space_dungeon.VAR_SESSION_ID, lock_key);

			// Update the cluster data with the session_id.
			dictionary dungeon_update = new dictionary();
			dungeon_update.put("session_id", lock_key);
			updateClusterWideData(manage_name, element_name_list[i], dungeon_update, lock_key);

			// Release the lock on the dungeon data
			releaseClusterWideDataLock(manage_name, lock_key);

			// Send a message to the dungeon to mark it's session id.  After this is acknowledged, the transport starts.
			dictionary d = new dictionary();
			d.put("session_id", lock_key);
			d.put("request_id", request_id);
			d.put("player", player);
			d.put("ticket_collector", self);
			if (hasObjVar(ticket, space_dungeon.VAR_TICKET_QUEST_TYPE))
				d.put("quest_type", getStringObjVar(ticket, space_dungeon.VAR_TICKET_QUEST_TYPE));
			messageTo(dungeon_id, "msgSetSessionId", d, 0.0f, false);

			return SCRIPT_CONTINUE;
		}
	}

	// Release the lock on the dungeon data
	releaseClusterWideDataLock(manage_name, lock_key);

	// Clean up the player's ticket data
	space_dungeon.cleanupPlayerTicketObjvars(player);
	space_dungeon.removeDungeonTraveler(self, request_id);

	// Could not find a dungeon.  Check for a "fictional" reason to deny entry. If that doesn't exist, give the
	// generic response.
	string_id success = space_dungeon_data.getDungeonFailureString(dungeon_name);
	if (success == null)
		sendSystemMessage(player, SID_UNABLE_TO_FIND_DUNGEON);
	else
		sendSystemMessage(player, success);

	return SCRIPT_CONTINUE;
}


/***** MESSAGEHANDLERS *************************************************/
messageHandler msgStartDungeonTravel()
{
	int session_id = params.getInt("session_id");
	LOG("space_dungeon", "msgStartDungeonTravel -- session_id ->" + session_id);

	obj_id dungeon_id = params.getObjId("dungeon_id");
	if (!isIdValid(dungeon_id))
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- dungeon_id is invalid for " + self + ".");
		return SCRIPT_CONTINUE;
	}
	string dungeon_name = params.getString("dungeon_name");
	if (dungeon_id == null)
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- dungeon_name is null for " + self + ".");
		return SCRIPT_CONTINUE;
	}
	int request_id = params.getInt("request_id");
	obj_id player = space_dungeon.getDungeonTraveler(self, request_id);
	if (!isIdValid(player))
	{
		LOG("space_dungeon", "player_travel.msgStartDungeonTravel -- player is null for " + self);
		return SCRIPT_CONTINUE;
	}
	space_dungeon.removeDungeonTraveler(self, request_id);
	if (player.isAuthoritative())
	{
		location dungeon_loc = params.getLocation("dungeon_loc");
		if (dungeon_loc == null)
		{
			LOG("space_dungeon", "travel_space_dungeon.msgStartDungeonTravel -- location is null for " + self + ".");
			return SCRIPT_CONTINUE;
		}

		space_dungeon.movePlayerGroupToDungeon(player, dungeon_id, dungeon_name, dungeon_loc);
	}

	return SCRIPT_CONTINUE;
}


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/

