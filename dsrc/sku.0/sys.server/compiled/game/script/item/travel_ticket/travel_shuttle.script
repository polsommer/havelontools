/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        travel_shuttle
 * Description:  handles the landing and takeoff of the travel shuttle
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.travel;

/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnAttach()
{
	detachScript (self, "ai.ai");
	detachScript (self, "ai.creature_combat");
	detachScript (self, "skeleton.humanoid");
	detachScript (self, "systems.combat.combat_actions");
	detachScript (self, "systems.combat.credit_for_kills");
	stop (self);
	
	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	
	obj_id starport = travel.getStarportFromTerminal(self);
	if (starport == null || starport == obj_id.NULL_ID)
	{
		LOG("LOG_CHANNEL", "travel_shuttle::OnAttach -- starport is null for " + self);
		return SCRIPT_CONTINUE;
	}
	
	int ground_time = travel.getGroundTime(starport);
	
	//LOG("LOG_CHANNEL", "starport ->" + starport + " ground_time ->" + ground_time);
	messageTo(self, "msgShuttleTakeOff", null, ground_time, false);
	
	return SCRIPT_CONTINUE;
}

trigger OnUnloadedFromMemory()
{
	obj_id starport = travel.getStarportFromTerminal(self);
	LOG("LOG_CHANNEL", "travel_shuttle::OnUnloadedFromMemory -- " + self + " from starport " + starport);
	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	// Restart the shuttle
	
	LOG("LOG_CHANNEL", "travel_shuttle::OnInitialize -- " + self);
	obj_id starport = travel.getStarportFromTerminal(self);
	if (starport == null || starport == obj_id.NULL_ID)
	{
		LOG("LOG_CHANNEL", "travel_shuttle::OnInitialize -- starport is null for " + self);
		return SCRIPT_CONTINUE;
	}
	
	// reset the timestamp and send the message
	boolean stuff = false;
	// !!!!!!! Change to isInitialized(starport) once the method is available
	if (self.isInitialized())
	{
		setPosture(self, POSTURE_UPRIGHT);
		attacker_results cbtAnimationResults = new attacker_results();
		cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
		cbtAnimationResults.id = self;
		doCombatResults("change_posture", cbtAnimationResults, null);
		
		queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
		setObjVar(starport, travel.VAR_SHUTTLE_AVAILABLE, 1);	
		setObjVar(starport, travel.VAR_SHUTTLE_TIMESTAMP, getGameTime());
		int ground_time = travel.getGroundTime(starport);
		LOG("LOG_CHANNEL", "starport ->" + starport + " ground_time ->" + ground_time + " shuttle ->" + self);
		messageTo(self, "msgShuttleTakeOff", null, ground_time, false);
	}
	else
	{
		// If the starport isn't yet loaded, wait for it do to so.
		LOG("LOG_CHANNEL", "travel_shuttle::OnInitialize -- starport " + starport + " is not yet loaded.");
		dictionary params = new dictionary();
		params.put("shuttle", self);
		messageTo(starport, "msgRestartShuttle", params, 10.0f, false);
		LOG("LOG_CHANNEL", "travel_shuttle::OnInitialize -- send message to " + starport);
	}
	
	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/
messageHandler msgShuttleTakeOff()
{
	LOG("LOG_CHANNEL", "travel_shuttle::msgShuttleTakeOff --" + self);

	// ignore dupe
	if (hasMessageTo(self, "msgShuttleTakeOff"))
		return SCRIPT_CONTINUE;

	setPosture(self, POSTURE_PRONE);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_PRONE;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"prone", self, "", COMMAND_PRIORITY_FRONT);
	
	obj_id starport = travel.getStarportFromTerminal(self);
	
	// Set the ship as unavailable
	boolean toggle = travel.setShuttleAvailability(starport);
	LOG("LOG_CHANNEL", "travel_shuttle::msgShuttleTakeOff -- starport ->" + starport + " toggle ->" + toggle);
	
	int air_time = travel.getAirTime(starport);
	messageTo(self, "msgShuttleLand", null, air_time, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgShuttleLand()
{
	LOG("LOG_CHANNEL", "travel_shuttle::msgShuttleLand -- " + self);

	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	
	obj_id starport = travel.getStarportFromTerminal(self);
	int ground_time = travel.getGroundTime(starport);
	
	messageTo (self, "msgShuttleTakeOff", null, ground_time, false);
	
	// The ship doesn't become available to board until 25 seconds after the posture change.
	messageTo (self, "msgBoardTime", null, 25, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgBoardTime()
{
	LOG("LOG_CHANNEL", "travel_shuttle::msgBoardTime -- " + self);
	
	obj_id starport = travel.getStarportFromTerminal(self);
	boolean toggle = travel.setShuttleAvailability(starport);
	LOG("LOG_CHANNEL", "travel_shuttle::msgBoardTime -- starport ->" + starport + " toggle ->" + toggle);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgRestartShuttle()
{
	// This is called by the starport in the cases when the shuttle loads first.
	LOG("LOG_CHANNEL", "travel_shuttle::msgRestartShuttle -- " + self);
	
	obj_id starport = params.getObjId("starport");
	if (starport == null || starport == obj_id.NULL_ID)
	{
		LOG("LOG_CHANNEL", "starport::msgRestartShuttle -- starport is null for " + self);
		return SCRIPT_CONTINUE;
	}
	
	setPosture(self, POSTURE_UPRIGHT);
	attacker_results cbtAnimationResults = new attacker_results();
	cbtAnimationResults.endPosture = POSTURE_UPRIGHT;
	cbtAnimationResults.id = self;
	doCombatResults("change_posture", cbtAnimationResults, null);
	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	setObjVar(starport, travel.VAR_SHUTTLE_AVAILABLE, 1);	
	setObjVar(starport, travel.VAR_SHUTTLE_TIMESTAMP, getGameTime());
	int ground_time = travel.getGroundTime(starport);
	messageTo(self, "msgShuttleTakeOff", null, ground_time, false);
	
	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
