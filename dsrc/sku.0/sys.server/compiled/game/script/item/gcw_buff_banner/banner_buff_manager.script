include library.trial;
include library.utils;
include library.buff;
include library.factions;

trigger OnInitialize()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	messageTo(self, "buffPlayers", null, 1.0f, false);
	messageTo(self, "handleDeleteSelf", null, 180.0f, false);
	return SCRIPT_CONTINUE;
}

string getBannerBuff(obj_id self)
{
	obj_id player = trial.getParent(self);
	 
	if (!isIdValid(player))
		return null;
		
	int profession = utils.getPlayerProfession(player);
	
	switch (profession)
	{
		case utils.COMMANDO:
			return "banner_buff_commando";
			
		case utils.SMUGGLER:
			return "banner_buff_smuggler";
			
		case utils.MEDIC:
			return "banner_buff_medic";
			
		case utils.OFFICER:
			return "banner_buff_officer";
			
		case utils.SPY:
			return "banner_buff_spy";
			
		case utils.BOUNTY_HUNTER:
			return "banner_buff_bounty_hunter";
			
		case utils.FORCE_SENSITIVE:
			return "banner_buff_force_sensitive";
			
		case utils.TRADER:
			return null;
			
		case utils.ENTERTAINER:
			return null;
			
	}
	
	return null;
}

messageHandler buffPlayers()
{
	obj_id[] players = trial.getValidPlayersInRadius(self, 30.0f);
	resizeable obj_id[] filteredPlayers = new obj_id[0];

	boolean applyBuff = true;
	int faction = -1;
	
	if (!hasObjVar(self, "parent.faction"))
		applyBuff = false;
	else
		faction = getIntObjVar(self, "parent.faction");

	if (players == null || players.length == 0)
		applyBuff = false;
	else
	{
		for (int i=0;i<players.length;i++)
		{
			switch (faction)
			{
				case 0:
					if (factions.isRebel(players[i]))
						utils.addElement(filteredPlayers, players[i]);
					break;
				case 1:
					if (factions.isImperial(players[i]))
						utils.addElement(filteredPlayers, players[i]);
					break;
				default:
					break;
			}
		}
	}
	
	if (filteredPlayers == null || filteredPlayers.length == 0)
		applyBuff = false;		
	
	players = filteredPlayers;
	
	string buffToApply = getBannerBuff(self);
	
	if (buffToApply == null)
		applyBuff = false;
		
	if (applyBuff)
		buff.applyBuff(players, buffToApply);
	
	messageTo(self, "buffPlayers", null, 5.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleDeleteSelf()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}