include library.create;
include library.utils;
include library.player_structure;
include library.sui;
include library.static_item;
include library.space_utils;
include library.space_transition;
include library.sui;
inherits terminal.base.base_terminal;

//const obj_id CONTAINER = getLocation(getSelf()).cell;
const string[] PROP_TYPE = {"Backdrop", "Smoke", "Pyrotechnics", "light", "Fog"};
const string[] BACKDROP_NUMBER = {"Turn Off", "Backdrop 1", "Backdrop 2", "Backdrop 3", "Backdrop 4", "Backdrop 5", "Backdrop 6", "Backdrop 7", "Backdrop 8", "Backdrop 9", "Backdrop 10"};
const string[] BACKDROP_SET = {"Galactic Scenes", "Galactic Scenes - Wide"};
const string_id SID_START_CONTROLLER = new string_id("spam", "activate_stage_controller");
const string_id SID_NOT_IN_HOUSE = new string_id("spam", "stage_controller_not_in_house");
const string_id SID_NO_PROPS = new string_id("spam", "stage_controller_no_props");

/***** TRIGGERS ********************************************************/

//mi.addRootMenu(menu_info_types.SERVER_MENU1, SID_ACTIVATE);

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	
	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(checkLocation(self))
	{
		int startController = mi.addRootMenu(menu_info_types.ITEM_USE, SID_START_CONTROLLER);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{

	//player_structure.isNameOnEntryList(structure, getPlayerName(player)) 
	if(item == menu_info_types.ITEM_USE && isIdValid(player))
	{
		if(checkLocation(self))
		{
			startController(player);
		}
		
		else
		{
			sendSystemMessage(player, SID_NOT_IN_HOUSE);
		}
	
	}
	
	
	return SCRIPT_CONTINUE;

}


/****** CONTROLLER *****************************************************/


void startController(obj_id player)
{

	if(!isIdValid(player))
	{
		return;
	}
	
	obj_id self = getSelf();
	
	if(!isIdValid(self))
	{
		return;
	}
	
	obj_id container = getTopMostContainer(self); 
	
	if(!isIdValid(container))
	{
		return;
	}
	
	if(!checkLocation(self))
	{
		//Sys message stating that there are no props to interact with
		sendSystemMessage(player, SID_NO_PROPS); //need string
		return;
	}
	
	resizeable string[] propList = new Vector();
	
	resizeable obj_id[] backdropList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.backdrop");
	if(backdropList != null && backdropList.size()>0)
	{
		propList.addElement("Backdrop");
	}
	
	resizeable obj_id[] smokeList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.smoke");
	if(smokeList != null && smokeList.size()>0)
	{
		propList.addElement("Smoke");

	}
	
	resizeable obj_id[] pyrotechnicList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.pyrotechnic");
	if(pyrotechnicList != null && pyrotechnicList.size()>0)
	{
		propList.addElement("Pyrotechnic");
	}

	resizeable obj_id[] fogList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.fog");
	if(fogList != null && fogList.size()>0)
	{
		propList.addElement("Fog");
	}
	
	resizeable obj_id[] lightList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.light");
	if(lightList != null && lightList.size()>0)
	{
		propList.addElement("Light");
	}
	
	string[] propListArray = new string[propList.size()];
	propList.toArray(propListArray);
	Arrays.sort(propListArray);

	stageMenuStart(self, player, "Select the stage machinery you wish to operate.", "Stage Controler", propListArray, "stageMenuChoice", true, "propList", "propList.propsFound");
}

boolean checkLocation(obj_id item)
{
	
	if(!isIdValid(item))
	{
		return false;
	}

	if(!utils.isInHouseCellSpace(item))
	{
		return false;
	}
	
	if (!utils.isNestedWithinAPlayer (item))
	{
		obj_id house = getTopMostContainer(item);
		obj_id ship = space_transition.getContainingShip(item);

		string templateName ="";

		if(isIdValid(ship))
		{
			templateName = getTemplateName(ship);
		}


		if(isIdValid(house) && (player_structure.isBuilding(house) || space_utils.isPobType(templateName)))
		{
			return true;
		}
	}
	
	return false;
}




/********************************** SUI  Methods*************************/

//stageMenu(self, player, "Select the stage machinery you wish to operate.", "Stage Controler", propListArray, "stageMenuChoice", true, "propListChoice", "propList");

void stageMenuStart(obj_id self, obj_id player, string prompt, string title, string[] options, string myHandler, boolean cancel, string PIDVar, string scriptVar)
{
	closeOldWindow(player, scriptVar);
	int pid = sui.listbox(self, player, prompt, sui.OK_CANCEL, title, options, myHandler, false, false);
	//setSUIProperty(pid, sui.LISTBOX_BTN_REVERT, sui.PROP_TEXT,"Back");
	sui.showSUIPage(pid);
	setWindowPid(player, pid, PIDVar);
	utils.setScriptVar(player, scriptVar, options );
}

void stageMenu(obj_id self, obj_id player, string prompt, string title, string[] options, string myHandler, boolean cancel, string PIDVar, string scriptVar)
{
	closeOldWindow(player, scriptVar);
	int pid = sui.listbox(self, player, prompt, sui.OK_CANCEL_REFRESH, title, options, myHandler, false, false);
	//setSUIProperty(pid, sui.LISTBOX_BTN_REVERT, sui.PROP_TEXT,"Back");
	sui.listboxUseOtherButton(pid, "Back");
	sui.showSUIPage(pid);
	setWindowPid(player, pid, PIDVar);
	utils.setScriptVar(player, scriptVar, options );
}

void closeOldWindow(obj_id player, string scriptVar)
{
	if ( utils.hasScriptVar(player, scriptVar))
	{
		int oldpid = utils.getIntScriptVar(player, scriptVar);
		forceCloseSUIPage (oldpid);
		utils.removeScriptVarTree(player, scriptVar);
	}
}

void setWindowPid(obj_id player, int pid, string scriptVar)
{
	if (pid > -1)
	{
		utils.setScriptVar(player, scriptVar, pid);
	}
}

/***** MESSAGEHANDLERS **************************************************/

messageHandler stageMenuChoice()
{
	obj_id container = getTopMostContainer(getSelf());
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

			
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(!isIdValid(container))
	{
		return SCRIPT_CONTINUE;
	}
	
	string propMenuArray[] = utils.getStringArrayScriptVar(player, "propList.propsFound" );
	
	string propSelected = propMenuArray[idx];
	string propTemplate = toLower("entertainer_console." + propSelected);
	string methodName = "handle"+propSelected;
	resizeable obj_id[] objectList = utils.getResizeableObjIdArrayScriptVar(container, propTemplate);

	string[] itemList = new string[objectList.size()+1];
	itemList[0] = "All";
	int n = 0;
	for(int i = 1; i < itemList.length; i++)
	{
		if(!isIdValid(objectList[n]))
		{
			continue;
		}
		string tempName = getEncodedName(objectList[n]);
		itemList[i] = tempName;
		n++;
	}
	stageMenu(self, player, "Please select the "+propSelected+" machine you wish to activate.", "Stage Controler", itemList, methodName, true, "choice", "prop.arrayList");

	return SCRIPT_CONTINUE;
}

messageHandler handleBackdrop()
{
	obj_id container =  getTopMostContainer(self);
	int backdropNumber = 0;
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	
	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	if(!isIdValid(container))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] backdropList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.backdrop");
	int idx = sui.getListboxSelectedRow(params);
	
	if(idx >= 0 && idx < backdropList.length+1)
	{	
		utils.setScriptVar(self, "backdrop.propSelection", idx);
		stageMenu(self, player, "Please Select the backdrop design.", "Stage Controler", BACKDROP_SET, "handleBackdropDesign", true, "backdropChoice", "backdrop.backdropListArray");
	}
	return SCRIPT_CONTINUE;
}


messageHandler handleBackdropDesign()
{
	//obj_id container =  getTopMostContainer(getSelf());
	int backdropNumber = 0;
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}	

	int idx = sui.getListboxSelectedRow(params);
	utils.setScriptVar(self, "backdrop.backdropSet", idx);
	stageMenu(self, player, "Please Select the backdrop design.", "Stage Controler", BACKDROP_NUMBER, "handleAllBackdropPicture", true, "backdropChoice", "backdrop.backdropListArray");


	return SCRIPT_CONTINUE;
}

messageHandler handleSmoke()
{
	obj_id container =  getTopMostContainer(getSelf());
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
	
	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] smokeObjectList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.smoke");
	int idx = sui.getListboxSelectedRow(params);
	if(idx==0)
	{
		for(int i = 0; i < smokeObjectList.length; i++)
		{
			if(isIdValid(smokeObjectList[i]))
			{
				boolean playEffect = playSmokeEffect(smokeObjectList[i]);
			}
		}
	
	}
	else
	{
		idx--;
		if(isIdValid(smokeObjectList[idx]))
		{
			boolean playEffect = playSmokeEffect(smokeObjectList[idx]);
		}
	}
	
	
	string[] smokeItemList = new string[smokeObjectList.size()+1];
	smokeItemList[0] = "All";
	
	int n = 0;
	for(int i = 1; i < smokeItemList.length; i++)
	{
		if(!isIdValid(smokeObjectList[n]))
		{
			continue;
		}
		string tempName = getEncodedName(smokeObjectList[n]);
		smokeItemList[i] = tempName;
		n++;
	}
	stageMenu(self, player, "Please Select the Smoke Machine you wish to activate.", "Stage Controler", smokeItemList, "handleSmoke", true, "smokeChoice", "smoke.smokeListArray");
	
	return SCRIPT_CONTINUE;
}

messageHandler handlePyrotechnic()
{
	obj_id player = sui.getPlayerId(params);
	obj_id container =  getTopMostContainer(getSelf());
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
	
	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] pyroObjectList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.pyrotechnic");
	int idx = sui.getListboxSelectedRow(params);
	if(idx==0)
	{
		for(int i = 0; i < pyroObjectList.length; i++)
		{
			if(isIdValid(pyroObjectList[i]))
			{
				boolean playEffect = playFireEffect(pyroObjectList[i]);
			}
		}
	}
	else
	{
		idx--;
		if(isIdValid(pyroObjectList[idx]))
		{
			boolean playEffect = playFireEffect(pyroObjectList[idx]);
		}
	}
		

	string[] pyroItemList = new string[pyroObjectList.size()+1];
	pyroItemList[0] = "All";
	int n = 0;
	for(int i = 1; i < pyroItemList.length; i++)
	{
		if(!isIdValid(pyroObjectList[n]))
		{
			continue;
		}
		
		string tempName = getEncodedName(pyroObjectList[n]);
		pyroItemList[i] = tempName;
		n++;
	}



	stageMenu(self, player, "Please Select the Pyrotechnic Machine you wish to activate.", "Stage Controler", pyroItemList, "handlePyrotechnic", true, "pyroChoice", "pyro.pyroListArray");
	return SCRIPT_CONTINUE;
}

messageHandler handleFog()
{
	obj_id player = sui.getPlayerId(params);
	obj_id container =  getTopMostContainer(getSelf());
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] fogObjectList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.fog");
	int idx = sui.getListboxSelectedRow(params);
	if(idx==0)
	{
		for(int i = 0; i < fogObjectList.length; i++)
		{
			if(isIdValid(fogObjectList[i]))
			{
				boolean playEffect = startFogEffect(fogObjectList[i]);
			}
		}
	
	}
	else
	{
		idx--;
		if(isIdValid(fogObjectList[idx]))
		{
			boolean playEffect = startFogEffect(fogObjectList[idx]);
		}
	}
		

	string[] fogItemList = new string[fogObjectList.size()+1];
	fogItemList[0] = "All";
	int n = 0;
	for(int i = 1; i < fogItemList.length; i++)
	{
		if(!isIdValid(fogObjectList[n]))
		{
			continue;
		}
		
		string tempName = getEncodedName(fogObjectList[n]);
		fogItemList[i] = tempName;
		n++;
	}



	stageMenu(self, player, "Please Select the Fog Machine you wish to activate.", "Stage Controler", fogItemList, "handleFog", true, "fogChoice", "fog.fogListArray");
	return SCRIPT_CONTINUE;
}

messageHandler handleLight()
{

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] lightList = utils.getResizeableObjIdArrayScriptVar(self, "item.entertainer_console.light");
	int idx = sui.getListboxSelectedRow(params);
	boolean playEffect = playLightEffect(lightList[idx]);

	resizeable obj_id[] lightObjectList = utils.getResizeableObjIdArrayScriptVar(self, "item.entertainer_console.light");
	string[] lightItemList = new string[lightObjectList.size()];
	for(int i = 0; i < lightItemList.length; i++)
	{
		if(!isIdValid(lightObjectList[i]))
		{
			string tempName = getEncodedName(lightObjectList[i]);
			lightItemList[i] = tempName;
		}
	}

	stageMenu(self, player, "Please Select the Light Machine you wish to activate.", "Stage Controler", lightItemList, "handleLightList", true, "lightChoice", "light.lightListArray");
	return SCRIPT_CONTINUE;
}


messageHandler handleAllBackdropPicture()
{
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id container =  getTopMostContainer(getSelf());
	int backdropNumber = sui.getListboxSelectedRow(params);
	if(!isIdValid(container))
	{
		return SCRIPT_CONTINUE;
	}

	if(btn == sui.BP_REVERT)
	{
		startController(player);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id[] backdropList = utils.getResizeableObjIdArrayScriptVar(container, "entertainer_console.backdrop");

	
	string backdropObjectString = "item_generated_backdrop_01_";
	int propSelection = 0;
	if(utils.hasScriptVar(self, "backdrop.backdropSet"))
	{
		int backdropSet = utils.getIntScriptVar(self, "backdrop.backdropSet");
		utils.removeScriptVar(self, "backdrop.backdropSet");
		
		if(backdropSet == 1)
		{
			backdropObjectString = "item_generated_backdrop_wide_01_";
		}
	}
	
	//backdropObjectString = backdropObjectString + backdropNumber;

	if(utils.hasScriptVar(self, "backdrop.propSelection"))
	{
		propSelection = utils.getIntScriptVar(self, "backdrop.propSelection");
		utils.removeScriptVar(self, "backdrop.propSelection");
	}
	
	
	
	
	if(propSelection == 0)
	{
		for(int i = 0; i < backdropList.length; i++)
		{

			if(isIdValid(backdropList[i]))
			{
				boolean changed = changeBackdrop(backdropList[i], backdropObjectString, backdropNumber);
			}
		}
	}
	
	else
	{
		propSelection--;
		if(isIdValid(backdropList[propSelection]))
		{
			boolean changed = changeBackdrop(backdropList[propSelection], backdropObjectString, backdropNumber);
		}
	}
	
	return SCRIPT_CONTINUE;


}

/********************************** Effects ***************************/

boolean changeBackdrop(obj_id prop, string backdropObject, int backdropNumber)
{	

	obj_id self = getSelf();
	obj_id house = getTopMostContainer(self);
	obj_id owner = getOwner(house);

	if(!isIdValid(prop) || !isIdValid(self) || !isIdValid(house) || !isIdValid(owner))
	{
		return false;
	}
	
	if(!checkLocation(prop))
	{
		return false;
	}


	if(hasObjVar(prop, "paintingId"))
	{
		obj_id oldBackdrop = getObjIdObjVar(prop, "paintingId");
		destroyObject(oldBackdrop);
	}	

	if(backdropNumber == 0)
	{
		//BackdropNumber 0 means that the player is turning the backdrop off. So the old picture (if any) is removed
		//without a new one being spawned in its place
		return true;	
	}
	
	string staticString = backdropObject + backdropNumber;
	
	location backdropLocation = getLocation(prop);
	if(backdropLocation != null)
	{

		float myYaw = getYaw (prop);
		backdropLocation.y += 0.3f;

		obj_id backdropId = static_item.createNewItemFunction(staticString, house, backdropLocation);


		if (isIdValid (backdropId) || isIdNull (backdropId))
		{
			setYaw (backdropId, myYaw);
			setObjVar(prop, "paintingType", staticString);
			setObjVar(prop, "paintingId", backdropId);
			setObjVar(backdropId, "generatorId", self);
			return true;
		}

	}
	return false;
	
}

boolean playSmokeEffect(obj_id prop)
{
	
	if(!isIdValid(prop))
	{
		return false;
	}
	
	if(!checkLocation(prop))
	{
		return false;
	}
	

	location loc = getLocation(prop);
	if(loc == null)
	{
		return false;
	}

	obj_id[] players = getAllPlayers(loc, 20.0f);
	if(players != null)
	{
		for(int i = 0; i < players.length; i++)
		{
			playClientEffectLoc(players[i], "appearance/pt_partydroid_fogmachine.prt" , loc, 0);
//			playClientEffectObj(self, "clienteffect/droid_effect_fog_machine.cef", self, "");
			//playClientEffectLoc(players[i], "clienteffect/droid_effect_fog_machine.cef" , loc, 0);
		}
	}


	return true;
}

boolean playFireEffect(obj_id prop)
{
	if(!isIdValid(prop))
	{
		return false;
	}
	
	if(!checkLocation(prop))
	{
		return false;
	}
	
	location loc = getLocation(prop);
	if(loc == null)
	{
		return false;
	}

	obj_id[] players = getAllPlayers(loc, 20.0f);
	if(players != null)
	{
		for(int i = 0; i < players.length; i++)
		{
			playClientEffectLoc(players[i], "clienteffect/stage_controller_explosion_1.cef" , loc, 0);
			//playClientEffectLoc(players[i], "clientdata/item/client_shared_item_treasure_gem_red_s01.cdf" , loc, 0);
		
		}
	}


	return true;
}


boolean playLightEffect(obj_id prop)
{
	
	if(!isIdValid(prop))
	{
		return false;
	}
	
	if(!checkLocation(prop))
	{
		return false;
	}
	
	location loc = getLocation(prop);
	if(loc == null)
	{
		return false;
	}

	obj_id[] players = getAllPlayers(loc, 20.0f);
	if(players != null)
	{
		for(int i = 0; i < players.length; i++)
		{
			playClientEffectLoc(players[i], "clientdata/item/client_shared_item_treasure_gem_red_s01.cdf" , loc, 0);
		}
	}


	return true;
}

boolean startFogEffect(obj_id prop)
{
	obj_id self = getSelf();

	if(!isIdValid(prop))
	{
		return false;
	}
	
	if(!checkLocation(prop))
	{
		return false;
	}
	
	location loc = getLocation(prop);
	if(loc == null)
	{
		return false;
	}

	if(hasObjVar(prop, "entertainer_console.fogId"))
	{
		obj_id fogObject = getObjIdObjVar(prop,"entertainer_console.fogId");
		if(!isIdValid(fogObject))
		{
			return false;
		}
		
		destroyObject(fogObject);
		removeObjVar(prop, "entertainer_console.fogId");
		// Verify that its actually a fog item that we're destroying
		// destroy the existing fog item
		// remove the objvar
		return false;
	}
	
	if(!hasObjVar(prop, "entertainer_console.fogId"))
	{
		obj_id fogObject = createObject("object/static/particle/pt_miasma_of_fog_gray.iff", getLocation(prop));
		setObjVar(prop, "entertainer_console.fogId", fogObject);
		return true;
	}
	
	return false;
}
