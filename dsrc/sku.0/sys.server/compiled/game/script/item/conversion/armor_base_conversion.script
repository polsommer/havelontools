/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        conversion.medicine.script
 * Description:  This script is the base script all armor conversion scripts derive from and should never ever be atttached to anything
 * @author       Thomas Blair
 * @version      $Revision:$
 */


/***** INCLUDES ********************************************************/
include library.utils;
include library.sui;
include library.armor;

/***** CONSTANTS *******************************************************/
const string ARMOR_SET_PREFIX = "object/tangible/wearables/armor/";
const string[] ARMOR_SET_ASSAULT = {

};
const string[] ARMOR_SET_BATTLE = {

};
const string[] ARMOR_SET_RECON = {

};
const string[] ARMOR_TYPE = {
							"Assault",
							"Battle",
							"Reconnaissance"
};
const string[] ASSAULT_TYPE = {

};
const string[] BATTLE_TYPE = {

};
const string[] RECON_TYPE = {
							
};

/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (utils.getContainingPlayer(self) == player)
	{
		mi.addRootMenu (menu_info_types.SERVER_MENU8, new string_id("craft_armor_ingredients_d","refit_armor"));
	}
  	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (utils.getContainingPlayer(self) == player)
	{
		if (item == menu_info_types.SERVER_MENU8)
		{
			showConfirmationWindow(player);
		}
	}
	return SCRIPT_CONTINUE;
}


void showConfirmationWindow(obj_id player)
{
	obj_id self = getSelf();
	string prompt = "Are you sure you wish to REFIT this piece of armor to Assault, Battle or Reconnaissance? YOU WILL ONLY BE ABLE TO REFIT A PIECE OF ARMOR ONCE!";
	string title = "Refit Armor Piece";

	closeOldWindow(player);
			 
	int pid = sui.msgbox(self, player, prompt, sui.OK_CANCEL, title, 0,"handleConfirmationSelect");
	setWindowPid(player, pid);

}

void refitArmor(obj_id player, string newItemTemplate, obj_id oldObject, int armorCategory)
{
	obj_id pInv = utils.getInventoryContainer(player);
	if (getVolumeFree(pInv) <= 1)
	{
		sendSystemMessage(player, new string_id("quest_armorsmith", "inventory_full"));
		return;
	}
	else
	{
		if (newItemTemplate.length() < 1)
		{
			CustomerServiceLog("armor_converion", "%TU attempted to dismantle Armor " +newItemTemplate+ " however was not found in template listing", player);
			return;
		}
		obj_id newObj = createObject(ARMOR_SET_PREFIX + newItemTemplate, pInv, "");
		if (isIdValid(newObj))
		{
			//copy stats of old armor to new piece, destroy old armor piece
			copyObjVar(oldObject, newObj, "armor");
			copyObjVar(oldObject, newObj, "skillmod");
			setObjVar(newObj, "armor.armorCategory", armorCategory);
			setMaxHitpoints(newObj, getMaxHitpoints(oldObject));
			setHitpoints(newObj, getHitpoints(oldObject));
			//remove old layers
			armor.removeArmorSpecialProtection(newObj, armor.DATATABLE_RECON_LAYER);
			armor.removeArmorSpecialProtection(newObj, armor.DATATABLE_ASSAULT_LAYER);
			
			//add layers if needed
			int gotType = getGameObjectType( oldObject );
			if (gotType != GOT_armor_hand && gotType != GOT_armor_foot)
			
			{
				if ( armorCategory == AC_reconnaissance )
				{
					armor.setArmorSpecialProtectionPercent(newObj, armor.DATATABLE_RECON_LAYER, 1.0f);
				}
				else if ( armorCategory == AC_assault )
				{
					armor.setArmorSpecialProtectionPercent(newObj, armor.DATATABLE_ASSAULT_LAYER, 1.0f);
				}
			}
			
			//this is for old 4 part set wookie chests
			if (hasObjVar(newObj, "armor.wookieeDeconstruct"))
			{
				attachScript(newObj, "item.conversion.armor_wookiee");	
			}
			int oldSockets = getSkillModSockets(oldObject);
			destroyObject(oldObject);
			setCraftedId(newObj, newObj);
			setCrafter(newObj, player);
//			setSkillModSockets(newObj, oldSockets);

			if(oldSockets > 0)
				setSkillModSockets(newObj, 1);
			else
				setSkillModSockets(newObj, 0);

			sendSystemMessage(player, new string_id("quest_armorsmith", "armor_issued"));
		}
		else
		{
			CustomerServiceLog("armor_converion", "Server attempted to create Armor " +newItemTemplate+ " for %TU but failed", player);
			return;
		}
	}

}

void closeOldWindow(obj_id player)
{
	if ( utils.hasScriptVar(player, "refit_armor.pid"))
	{
		int oldpid = utils.getIntScriptVar(player, "refit_armor.pid");
		forceCloseSUIPage (oldpid);
		utils.removeScriptVar(player, "refit_armor.pid");
	}
}

void setWindowPid(obj_id player, int pid)
{
	if (pid > -1) utils.setScriptVar(player, "refit_armor.pid", pid);
}

messageHandler handleConfirmationSelect()
{
	string prompt = "Armor Types you may wear are assigned by Combat Profession. \n\n"+ 
	"Bounty Hunters, Commandos, Squad Leaders wear ASSAULT. \n\n" +
	"Swordsmen, Carbineers, Fencers, Pikemen, Combat Medics, Doctors wear BATTLE. \n\n"+
	"Pistoleers, Riflemen, Smugglers wear RECONNAISSANCE.";
	string title = "Armor Refit";
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if ( btn == sui.BP_CANCEL )
	{
		utils.removeScriptVar(player, "refit_armor.pid");
		return SCRIPT_CONTINUE;
	}
	closeOldWindow(player);
	int pid = sui.listbox(self, player, prompt, sui.OK_CANCEL, title, ARMOR_TYPE, "handleArmorType", true, false);
	setWindowPid(player, pid);
	return SCRIPT_CONTINUE;
}

messageHandler handleArmorType()
{
if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}
	string prompt = "Select the Armor Appearance you desire";
	string title = "Armor Refit";
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	closeOldWindow(player);
	
	if ( btn == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}

	if ( idx == -1 || idx > ARMOR_TYPE.length)
	{
		return SCRIPT_CONTINUE;
	}
	string[] choices = new string[0];
	string handler = "";
	switch(idx)
	{
		case 0:  // Assault
			choices = getAssaultTypes();
			handler = "handleAssaultSelect";
			break;
		case 1:  // Battle
		
			choices = getBattleTypes();
			handler = "handleBattleSelect";
			break;
		case 2:  // Recon
			choices = getReconTypes();
			handler = "handleReconSelect";
			break;
		default:
		return SCRIPT_CONTINUE;	
	}
	
	int pid = sui.listbox(self, player, prompt, sui.OK_CANCEL, title, choices, handler, true, false);
	setWindowPid(player, pid);
	return SCRIPT_CONTINUE;
}

messageHandler handleAssaultSelect()
{
if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	closeOldWindow(player);
	
	if ( btn == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}
	string[] assaultTemplates = getAssaultTemplates();
	if ( idx == -1 || idx > assaultTemplates.length)
	{
		return SCRIPT_CONTINUE;
	}
	
	refitArmor(player, assaultTemplates[idx], self, AC_assault);
	return SCRIPT_CONTINUE;	

}

messageHandler handleBattleSelect()
{
if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	closeOldWindow(player);
	
	if ( btn == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}
	string[] battleTemplates = getBattleTemplates();
	if ( idx == -1 || idx > battleTemplates.length)
	{
		return SCRIPT_CONTINUE;
	}
	
	refitArmor(player, battleTemplates[idx], self, AC_battle);
	return SCRIPT_CONTINUE;	
}

messageHandler handleReconSelect()
{
if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	closeOldWindow(player);
	if ( btn == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}
	string[] reconTemplates = getReconTemplates();
	if ( idx == -1 || idx > reconTemplates.length)
	{
		return SCRIPT_CONTINUE;
	}

	refitArmor(player, reconTemplates[idx], self, AC_reconnaissance);
	return SCRIPT_CONTINUE;	

}

string[] getAssaultTemplates()
{
	return ARMOR_SET_ASSAULT;
}

string[] getBattleTemplates()
{
	return ARMOR_SET_BATTLE;
}

string[] getReconTemplates()
{
	return ARMOR_SET_RECON;
}

string[] getAssaultTypes()
{
	return ASSAULT_TYPE;
}

string[] getBattleTypes()
{
	return BATTLE_TYPE;
}

string[] getReconTypes()
{
	return RECON_TYPE;
}



