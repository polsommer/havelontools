/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        buff_click_item.script
 * Description:  This script handles the application a buff from a static worn object, all the data should be contained in Objvars on the item
 * @author       Thomas Blair 
 * @version      1.0
 */

/***** INCLUDES ********************************************************/

include library.utils;
include library.buff;
include library.static_item;
include library.prose;

include library.armor;
/***** CONSTANTS *******************************************************/

const string NON_ENHANCEMENT_BUFF = 		"buff.non_enhancement";


trigger OnInitialize()
{
	
	if(isPlayer(getContainedBy(self)))
	{
		static_item.applyWornBuffs(self, getContainedBy(self));
		static_item.checkForAddSetBonus(self, getContainedBy(self));
	}
	else if(isAPlayerAppearanceInventoryContainer(getContainedBy(self)) && hasObjVar(self, NON_ENHANCEMENT_BUFF))
	{
		obj_id player = utils.getContainingPlayer(self);
		static_item.applyWornBuffs(self, player);
		static_item.checkForAddSetBonus(self, player);
	}

	return SCRIPT_CONTINUE;
}


trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	obj_id player = destContainer;

	if (isIdValid(destContainer) && isPlayer(destContainer))
	{
		static_item.applyWornBuffs(self, destContainer);
		static_item.checkForAddSetBonus(self, destContainer);
	}
	else if(isIdValid(destContainer) && isAPlayerAppearanceInventoryContainer(destContainer) && hasObjVar(self, NON_ENHANCEMENT_BUFF))
	{
		player = utils.getContainingPlayer(destContainer);
		if(!isValidId(player))
			return SCRIPT_CONTINUE;

		static_item.applyWornBuffs(self, player);
		static_item.checkForAddSetBonus(self, player);
	}	
	else if(isIdValid(sourceContainer) && isPlayer(sourceContainer))
	{	
		player = sourceContainer;
		static_item.removeWornBuffs(self, sourceContainer);
		static_item.checkForRemoveSetBonus(self, sourceContainer);
	}
	else if(isIdValid(sourceContainer) && isAPlayerAppearanceInventoryContainer(sourceContainer))
	{
		player = utils.getContainingPlayer(sourceContainer);
		if(!isValidId(player))
			return SCRIPT_CONTINUE;
		static_item.removeWornBuffs(self, player);
		static_item.checkForRemoveSetBonus(self, player);
	}
	
	if (isIdValid(self) && hasObjVar(self, "armor.general_protection_clothing") && (getContainedBy(self) == sourceContainer || getContainedBy(self) == destContainer))
		armor.recalculatePseudoArmorForPlayer(player, self, isPlayer(destContainer));

	if (isIdValid(self) && hasObjVar(self, "armor.fake_armor") && (getContainedBy(self) == sourceContainer || getContainedBy(self) == destContainer))
		armor.recalculateArmorForPlayer(player);
		
	return SCRIPT_CONTINUE;
}

trigger OnAboutToLoseItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	if(isIdValid(item))
	{
		obj_id player = utils.getContainingPlayer(item);
		static_item.removeWornBuffs(item, player);
		static_item.checkForRemoveSetBonus(item, player);
	}
	
	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	obj_id player = utils.getContainingPlayer(self);
	static_item.removeWornBuffs(self, player);
	static_item.checkForRemoveSetBonus(self, player);
	
	if(getContainedBy(self) == player)
		armor.recalculatePseudoArmorForPlayer(player, self, false);

	return SCRIPT_CONTINUE;
}
