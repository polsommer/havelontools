/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        stimpack script
 * Description:  script for handling crafted stimpacks
 * @author       $Author:$jbenjamin
 * @version      $Revision:$
 */

include library.buff;
include library.sui;
include library.utils;
include library.healing;

const string_id SID_ITEM_LEVEL_TOO_LOW	= new string_id("healing", "item_level_too_low");
const string_id SID_STIMPACK_TOO_SOON	= new string_id("healing", "channel_heal_stimpack_too_soon");




trigger OnGetAttributes (obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	//how much this thing heals total
	if (hasObjVar(self, "healing.power"))
	{
		names[idx] = "healing_power";
		int value = getIntObjVar(self, "healing.power");
		attribs[idx] = "" + value;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	//level required to use this item
	if (hasObjVar(self, "healing.combat_level_required"))
	{
		names[idx] = "healing_combat_level_required";
		int value = getIntObjVar(self, "healing.combat_level_required");
		attribs[idx] = "" + value;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	names[idx] = "count";
	int value = getCount(self);
	attribs[idx] = "" + value;

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (canManipulate(player, self, true, true, 15, true))
	{
		menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid != null )
		{
			mid.setServerNotify(true);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	//cant use if dead or incapped
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	//cant use if you are feigning death
	if(buff.hasBuff(player, "feign_death"))
		return SCRIPT_CONTINUE;
	
	//check to see if they have recently used one of these
	if(buff.hasBuff(player, "recent_heal"))
	{
		sendSystemMessage(player, SID_STIMPACK_TOO_SOON);
		return SCRIPT_CONTINUE;
	}

	if ( item == menu_info_types.ITEM_USE)
	{
		int level = getLevel(player);
		int requiredLevel = getIntObjVar(self, "healing.combat_level_required");
		//compare player level to required level
		if(level < requiredLevel)
		{
			sendSystemMessage(player, SID_ITEM_LEVEL_TOO_LOW);
			return SCRIPT_OVERRIDE;
		}

		else
			boolean worked = healing.useChannelHealItem(player, self);
	}

	return SCRIPT_CONTINUE;
}
