/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        stimpack script
 * Description:  script for handling stimpacks
 * @author       $Author:$tblair
 * @version      $Revision:$
 */

include library.buff;
include library.groundquests;
include library.sui;
include library.utils;
include library.healing;

const string_id SID_ITEM_YOU_MUST_TARGET	= new string_id("healing", "item_must_target");
const string_id SID_ITEM_ONLY_OTHERS		= new string_id("healing", "item_only_on_others");

const String ACTION_NAME = "bactaShot";

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (canManipulate(player, self, true, true, 15, true))
	{
		menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid != null )
		{
			mid.setServerNotify(true);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(buff.hasBuff(player, "feign_death"))
		return SCRIPT_CONTINUE;

	if ( item == menu_info_types.ITEM_USE)
	{
			const obj_id target = getLookAtTarget(player);

			if(target == null)
			{
				sendSystemMessage(player, SID_ITEM_YOU_MUST_TARGET);
				return SCRIPT_CONTINUE;
			}
			if(target == player)
			{
				sendSystemMessage(player, SID_ITEM_ONLY_OTHERS);
				return SCRIPT_CONTINUE;
			}
			
			// notify the quest system that the player successfully performed a "bactaShot"
			//   on a target using this item
			if (groundquests.questActionCompleted(player, target, ACTION_NAME))
			{
				decrementCount(self);
				healing.doHealingAnimationAndEffect(player, target);
			}
			else
			{
				healing.useHealDamageItem(player, target, self);
			}
	}

	return SCRIPT_CONTINUE;
}
