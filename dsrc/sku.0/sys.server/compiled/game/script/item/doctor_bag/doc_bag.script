//------------------------------------------------
// Includes
//------------------------------------------------

include library.doctor_bag;
include library.sui;
include library.utils;
include library.prose;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id SID_EXAMINE_MEDS			= new string_id("doctor_bag", "examine_meds");
const string_id SID_REMOVE_MEDS				= new string_id("doctor_bag", "remove_meds");
const string_id SID_NOTHING_IN_BAG			= new string_id("doctor_bag", "nothing_in_bag");
const string_id SID_MED_ENTRY				= new string_id("doctor_bag", "med_entry");
const string_id SID_SET_LABEL				= new string_id("doctor_bag", "set_label");
const string_id SID_LABEL_ALREADY			= new string_id("doctor_bag", "label_already_assigned");
const string_id SID_NEW_LABEL				= new string_id("doctor_bag", "new_label");
const string_id SID_LABEL_NO_SPACES			= new string_id("doctor_bag", "label_no_spaces");

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	setCount( self, 1 );

//	mi.addRootMenu( menu_info_types.SERVER_MENU1, SID_EXAMINE_MEDS );
	mi.addRootMenu( menu_info_types.SERVER_MENU2, SID_REMOVE_MEDS );
	mi.addRootMenu( menu_info_types.SERVER_MENU3, SID_SET_LABEL );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.SERVER_MENU1 )
	{
		displayExamineMeds( player, self );
	}
	else if ( item == menu_info_types.SERVER_MENU2 )
	{
		displayRemoveMeds( player, self );
	}
	else if ( item == menu_info_types.SERVER_MENU3 )
	{
		displayLabelMeds( player, self );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// displayRemoveMeds
//------------------------------------------------

void displayRemoveMeds( obj_id player, obj_id self )
{
	int count = 0;
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			count++;
		}
	}

	int j = 0;
	prose_package[] med_names = new prose_package[count];
	resizeable int[] med_index = new int[0];
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			string med_name = getStringObjVar( self, "meds."+i+".name" );
			string med_label = getStringObjVar( self, "meds."+i+".label" );
			if ( med_label == null )
				med_label = "No Label";
			if ( med_name.indexOf( ':' ) > -1 )
				med_name = "@" + med_name;
			prose_package pp = prose.getPackage( SID_MED_ENTRY, med_name, med_label, getIntObjVar( self, "meds."+i+".count" ) );

			med_names[j++] = pp;
			med_index = utils.addElement( med_index, i );
		}
	}

	if ( med_names.length == 0 )
	{
		sendSystemMessage( player, SID_NOTHING_IN_BAG );
		return;
	}

	utils.setScriptVar( self, "med_index", med_index );
	sui.listbox( self, player, "@doctor_bag:remove_med_d", sui.OK_CANCEL, "@doctor_bag:remove_med_t", med_names, "handleRemoveMed", true, false );
}

//------------------------------------------------
// handleRemoveMed
//------------------------------------------------

messageHandler handleRemoveMed()
{
	// Params.
	obj_id player = sui.getPlayerId( params );
	int idx = sui.getListboxSelectedRow( params );
	if ( idx < 0 ) idx = 0;
	int btn = sui.getIntButtonPressed( params );
	if ( btn == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	// Get the real index.
	int[] med_index = utils.getIntArrayScriptVar( self, "med_index" );
	int real_med_index = med_index[idx];

	// Make the med.
	doctor_bag.removeMedicine( player, self, real_med_index );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// displayLabelMeds
//------------------------------------------------

void displayLabelMeds( obj_id player, obj_id self )
{
	int count = 0;
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			count++;
		}
	}

	int j = 0;
	prose_package[] med_names = new prose_package[count];
	resizeable int[] med_index = new int[0];
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			string med_name = getStringObjVar( self, "meds."+i+".name" );
			string med_label = getStringObjVar( self, "meds."+i+".label" );
			if ( med_label == null )
				med_label = "No Label";
			if ( med_name.indexOf( ':' ) > -1 )
				med_name = "@" + med_name;
			prose_package pp = prose.getPackage( SID_MED_ENTRY, med_name, med_label, getIntObjVar( self, "meds."+i+".count" ) );

			med_names[j++] = pp;
			med_index = utils.addElement( med_index, i );
		}
	}

	if ( med_names.length == 0 )
	{
		sendSystemMessage( player, SID_NOTHING_IN_BAG );
		return;
	}

	utils.setScriptVar( self, "med_index", med_index );
	sui.listbox( self, player, "@doctor_bag:label_med_d", sui.OK_CANCEL, "@doctor_bag:label_med_t", med_names, "handleLabelMed", true, false );
}

//------------------------------------------------
// handleLabelMed
//------------------------------------------------

messageHandler handleLabelMed()
{
	// Params.
	obj_id player = sui.getPlayerId( params );
	int idx = sui.getListboxSelectedRow( params );
	if ( idx < 0 ) idx = 0;
	int btn = sui.getIntButtonPressed( params );
	if ( btn == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	// Get the real index.
	int[] med_index = utils.getIntArrayScriptVar( self, "med_index" );
	int real_med_index = med_index[idx];

	string prefix = "meds."+real_med_index+".";
	string label = getStringObjVar( self, prefix+"label" );

	utils.setScriptVar( self, "med_prefix", prefix );
	sui.inputbox( self, player, "@doctor_bag:label_input_d", "@doctor_bag:label_input_t", "handleSetLabel", label );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// handleSetLabel
//------------------------------------------------

messageHandler handleSetLabel()
{
	// Params.
	obj_id player = sui.getPlayerId( params );
	string new_label = sui.getInputBoxText( params );
	if ( new_label == null )
	{
		return SCRIPT_CONTINUE;
	}

	// Get the real index.
	string prefix = utils.getStringScriptVar( self, "med_prefix" );

	// Check for whitespace.
	int whitespace = new_label.indexOf( " " );
	if ( whitespace > -1 )
	{
		sendSystemMessage( player, SID_LABEL_NO_SPACES );
		return SCRIPT_CONTINUE;
	}

	// Check for duplicates.
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			string label = getStringObjVar( self, "meds."+i+".label" );
			if ( (label != null) && label.equals( new_label ) )
			{
				sendSystemMessage( player, SID_LABEL_ALREADY );
				return SCRIPT_CONTINUE;
			}
		}
	}

	setObjVar( self, prefix+"label", new_label );
	prose_package pp = prose.getPackage( SID_NEW_LABEL, new_label );
	sendSystemMessageProse( player, pp );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// displayExamineMeds
//------------------------------------------------

void displayExamineMeds( obj_id player, obj_id self )
{
	int count = 0;
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			count++;
		}
	}

	int j = 0;
	prose_package[] med_names = new prose_package[count];
	resizeable int[] med_index = new int[0];
	for ( int i=0; i<doctor_bag.MAX_MEDS; i++ )
	{
		if ( hasObjVar( self, "meds."+i+".name" ) )
		{
			string med_name = getStringObjVar( self, "meds."+i+".name" );
			if ( med_name.indexOf( ':' ) > -1 )
				med_name = "@" + med_name;
			prose_package pp = prose.getPackage( SID_MED_ENTRY, med_name, getIntObjVar( self, "meds."+i+".count" ) );

			med_names[j++] = pp;
			med_index = utils.addElement( med_index, i );
		}
	}

	if ( med_names.length == 0 )
	{
		sendSystemMessage( player, SID_NOTHING_IN_BAG );
		return;
	}

	utils.setScriptVar( self, "med_index", med_index );
	sui.listbox( self, player, "@doctor_bag:examine_med_d", sui.OK_CANCEL, "@doctor_bag:examine_med_t", med_names, "handleExamineMed", true, false );
}

//------------------------------------------------
// handleExamineMed
//------------------------------------------------

messageHandler handleExamineMed()
{
	// Params.
	obj_id player = sui.getPlayerId( params );
	int idx = sui.getListboxSelectedRow( params );
	if ( idx < 0 ) idx = 0;
	int btn = sui.getIntButtonPressed( params );
	if ( btn == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	// Get the real index.
	int[] med_index = utils.getIntArrayScriptVar( self, "med_index" );
	int real_med_index = med_index[idx];

	string prefix = "meds."+real_med_index+".";
	doctor_bag.setSurrogateState( self, prefix );

	// Place examine code here...

	doctor_bag.clearSurrogateState( self );

	return SCRIPT_CONTINUE;
}


/*
trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	attrib_mod[] am = getAttribModArrayObjVar(self, consumable.VAR_CONSUMABLE_MODS);

	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	if ( (am == null) || (am.length == 0) )
	{
		if (healing.isHealStateMedicine(self))
		{
			string heal_state = healing.getHealingState(self);
			//heal_state = heal_state.substring(0,1).toUpperCase() + heal_state.substring(1).toLowerCase();
			names[idx] = "examine_heal_state";
			attribs[idx] = "@obj_attr_n:state_type_" + heal_state;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
		else if (healing.isCureDotMedicine(self))
		{
			string dot_type = healing.getCureDot(self);
			//dot_type = dot_type.substring(0,1).toUpperCase() + dot_type.substring(1).toLowerCase();
			int dot_power = healing.getDotPower(self);
			names[idx] = "examine_dot_cure";
			attribs[idx] = "@obj_attr_n:dot_type_" + dot_type;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;

			names[idx] = "examine_dot_cure_power";
			attribs[idx] = Integer.toString(dot_power);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
		else if (healing.isApplyDotMedicine(self))
		{
			string dot_type = healing.getApplyDot(self);
			//dot_type = dot_type.substring(0,1).toUpperCase() + dot_type.substring(1).toLowerCase();
			int dot_attribute = healing.getDotAttribute(self);
			string attribute_name = consumable.STAT_NAME[dot_attribute];
			attribute_name = attribute_name.substring(0,1).toUpperCase() + attribute_name.substring(1).toLowerCase();
			int dot_potency = healing.getDotPotency(self);
			int dot_power = healing.getDotPower(self);
			int dot_duration = healing.getDotDuration(self);
			names[idx] = "examine_dot_apply";
			attribs[idx] = "@obj_attr_n:dot_type_" + dot_type;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
			names[idx] = "examine_dot_attribute";
			attribs[idx] = attribute_name;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
			names[idx] = "examine_dot_potency";
			attribs[idx] = Integer.toString(dot_potency);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
			names[idx] = "examine_dot_apply_power";
			attribs[idx] = Integer.toString(dot_power);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
			names[idx] = "examine_dot_duration";
			attribs[idx] = Integer.toString(dot_duration);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	else
	{
		for ( int i = 0; i < am.length; i++ )
		{
			int attrib = am[i].getAttribute();
			int val = am[i].getValue();
			float atk = am[i].getAttack();
			float dcy = am[i].getDecay();

			switch ((int)(atk))
			{
				case (int)healing.AM_HEAL_WOUND:
					names[idx] = "examine_heal_wound_" + consumable.STAT_NAME[attrib];
					attribs[idx] = Integer.toString(val);
					idx++;
					if (idx >= names.length)
						return SCRIPT_CONTINUE;
					break;

				case (int)healing.AM_HEAL_SHOCK:
					names[idx] = "examine_heal_shock";
					attribs[idx] = Integer.toString(val);
					idx++;
					if (idx >= names.length)
						return SCRIPT_CONTINUE;
					break;

				case (int)healing.VAR_BUFF_MOD_ATTACK:
					// Enhancement medicines
					names[idx] = "examine_enhance_" + consumable.STAT_NAME[attrib];
					int newVal = healing.getBuffPercentage(val);
					attribs[idx] = Integer.toString(newVal)+ "%";
					idx++;
					if (idx >= names.length)
						return SCRIPT_CONTINUE;
					names[idx] = "examine_duration_" + consumable.STAT_NAME[attrib];
					attribs[idx] = Integer.toString((int)am[i].getDuration());
					idx++;
					if (idx >= names.length)
						return SCRIPT_CONTINUE;
					break;

				default:
					switch ((int)(dcy))
					{
						case (int)MOD_POOL:
							names[idx] = "examine_heal_damage_" + consumable.STAT_NAME[attrib];
							attribs[idx] = Integer.toString(val);
							idx++;

							// Display theat stim packs also heal mind in the case of legacy stim packs
							if ( (attrib == ACTION) && (am.length == 2) )
							{
								names[idx] = "examine_heal_damage_" + consumable.STAT_NAME[MIND];
								attribs[idx] = Integer.toString(val);
								idx++;
							}
							if (idx >= names.length)
								return SCRIPT_CONTINUE;
							break;

						case (int)MOD_ANTIDOTE:
							names[idx] = "examine_antidote_" + consumable.STAT_NAME[attrib];
							attribs[idx] = Integer.toString(val);
							idx++;
							if (idx >= names.length)
								return SCRIPT_CONTINUE;
							break;
					}
			}
		}
	}

	if (hasObjVar(self, healing.VAR_HEALING_RANGE))
	{
		names[idx] = "examine_heal_range";
		attribs[idx] = Integer.toString(getIntObjVar(self, healing.VAR_HEALING_RANGE));
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	if (hasObjVar(self, healing.VAR_HEALING_AREA))
	{
		names[idx] = "examine_heal_area";
		attribs[idx] = Integer.toString(getIntObjVar(self, healing.VAR_HEALING_AREA));
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	if (hasObjVar(self, consumable.VAR_SKILL_MOD_REQUIRED))
	{
		string[] skill_mods = getStringArrayObjVar(self, consumable.VAR_SKILL_MOD_REQUIRED);
		LOG("LOG_CHANNEL", "skill ->" + skill_mods[0]);
		// Medicines are only allowed 1 skill mod
		names[idx] = skill_mods[0];
		int[] skill_values = getIntArrayObjVar(self, consumable.VAR_SKILL_MOD_MIN);
		attribs[idx] = Integer.toString(skill_values[0]);
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	if (hasObjVar(self, healing.VAR_HEALING_ABSORPTION))
	{
		names[idx] = "examine_heal_absorption";
		attribs[idx] = Integer.toString(getIntObjVar(self, healing.VAR_HEALING_ABSORPTION));
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}
*/