/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        item.publish_gift.weather_machine
 * Description:
 * @author       jmichener
 * @version      $Revision: 0$
 */

include library.player_structure;
include library.static_item;
include library.sui;
include library.utils;

const string_id SID_WHILE_DEAD							= new string_id("spam", "while_dead");
const string_id SID_TURN_ON 							= new string_id("spam", "weather_machine_on");
const string_id SID_TURN_OFF	 						= new string_id("spam", "weather_machine_off");
const string_id SID_STORM_INTENSITY 						= new string_id("spam", "weather_machine_intensity");
const string_id SID_STORM_01	 						= new string_id("spam", "weather_machine_storm1");
const string_id SID_STORM_02	 						= new string_id("spam", "weather_machine_storm2");
const string_id SID_STORM_03	 						= new string_id("spam", "weather_machine_storm3");
const string OBJVAR_WEATHER_PARTICLE_01						= "particle_1";
const string OBJVAR_WEATHER_PARTICLE_02						= "particle_2";
const string OBJVAR_WEATHER_PARTICLE_03						= "particle_3";

const string CS_TCG_5_RAIN_MACHINE_CATEGORY					= "tcg_set5_rain_machine";

trigger OnInitialize()
{
	if(hasObjVar(self, "weather_machine_on"))
	{
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Rain Machine Loaded: Attempting to restart rain machine...rainMachine = ("+self+","+getTemplateName(self)+")");
		playWeatherParticle(self);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	obj_id weatherMachine = self;

	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}
	if(isDead(player) || isIncapacitated(player))
	{
		sendSystemMessage(player, SID_WHILE_DEAD);
		return SCRIPT_CONTINUE;
	}

	//it's in a house?
	if(utils.isInHouseCellSpace(weatherMachine))
	{
		//House admin Check
		obj_id structure = getTopMostContainer(weatherMachine);
		if (!player_structure.isAdmin(structure, player))
			return SCRIPT_CONTINUE;

		//power menu
		if(hasObjVar(weatherMachine, "weather_machine_on"))
			int stormOnOff = mi.addRootMenu(menu_info_types.ITEM_USE, SID_TURN_OFF);
		else
			int stormOnOff = mi.addRootMenu(menu_info_types.ITEM_USE, SID_TURN_ON);

		//intensity menu
		int intensityMain = mi.addRootMenu(menu_info_types.SERVER_MENU2, SID_STORM_INTENSITY);
		//intensity sub-menus
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU3, SID_STORM_01);
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU4, SID_STORM_02);
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU5, SID_STORM_03);

		//update menus
		sendDirtyObjectMenuNotification(weatherMachine);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	//weather machine
	obj_id weatherMachine = self;

	//player ID validation
	if(!isIdValid(player) || !isIdValid(weatherMachine))
	{
		return SCRIPT_CONTINUE;
	}

	//not while dead or incapped
	if(isDead(player) || isIncapacitated(player) )
	{
		sendSystemMessage( player, SID_WHILE_DEAD );
		return SCRIPT_CONTINUE;
	}

	//weatherMachine is in player's house
	if(utils.isInHouseCellSpace(weatherMachine))
	{
		//we want to turn it on
		if(item == menu_info_types.ITEM_USE && !hasObjVar(weatherMachine, "weather_machine_on"))
		{
			setObjVar(weatherMachine, "weather_machine_on", 1);
			setObjVar(weatherMachine, "unmoveable", 1);

			playWeatherParticle(weatherMachine);
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Radial Menu Selection: Rain machine is being turned on (by "+player+")...rainMachine = ("+self+","+getTemplateName(self)+")");
			return SCRIPT_CONTINUE;
		}
		if(item == menu_info_types.ITEM_USE && hasObjVar(weatherMachine, "weather_machine_on"))
		{
			stopWeatherParticle(weatherMachine);
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Radial Menu Selection: Rain machine is being turned off (by "+player+")...rainMachine = ("+self+","+getTemplateName(self)+")");
			return SCRIPT_CONTINUE;
		}
	}

	if(item == menu_info_types.SERVER_MENU3)
	{
		removeStormObjVar(weatherMachine);
		setObjVar(weatherMachine, "weatherMachine.storm1", 1);
		checkRefreshParticle(weatherMachine);
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Radial Menu Selection: Rain machine is being set to low intensity (by "+player+")...rainMachine = ("+self+","+getTemplateName(self)+")");
	}
	if(item == menu_info_types.SERVER_MENU4)
	{
		removeStormObjVar(weatherMachine);
		setObjVar(weatherMachine, "weatherMachine.storm2", 1);
		checkRefreshParticle(weatherMachine);
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Radial Menu Selection: Rain machine is being set to medium intensity (by "+player+")...rainMachine = ("+self+","+getTemplateName(self)+")");
	}
	if(item == menu_info_types.SERVER_MENU5)
	{
		removeStormObjVar(weatherMachine);
		setObjVar(weatherMachine, "weatherMachine.storm3", 1);
		checkRefreshParticle(weatherMachine);
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Radial Menu Selection: Rain machine is being set to high intensity (by "+player+")...rainMachine = ("+self+","+getTemplateName(self)+")");
	}

	return SCRIPT_CONTINUE;
}


trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	if(hasObjVar(self, "weather_machine_on"))
	{
		//a weather object exists in the world - delete it.
		if(hasObjVar(self, "weatherParticleId"))
		{
			obj_id particleToDelete = getObjIdObjVar(self, "weatherParticleId");
			if(!isIdNull(particleToDelete))
			{
				CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Rain Machine Moved: rain machine is being picked up (by "+transferer+") so cleaning up rain particle("+particleToDelete+","+getTemplateName(particleToDelete)+")...rainMachine = ("+self+","+getTemplateName(self)+")");
				destroyObject(particleToDelete);
				//make sure it has been destroyed - if so, remove the objvar
				if(!exists(particleToDelete))
					messageTo(self, "handleCleanUpScriptsAndSuch", null, 0.2f, false);
			}
		}

	}

	return SCRIPT_CONTINUE;
}

messageHandler handleCleanUpScriptsAndSuch()
{
	cleanUpScriptsAndSuch(self);
	return SCRIPT_CONTINUE;
}

void cleanUpScriptsAndSuch(obj_id weatherMachine)
{
	if(hasObjVar(weatherMachine, "weatherParticleId"))
	{
		obj_id particle_id = getObjIdObjVar(weatherMachine, "weatherParticleId");
		
		if(exists(particle_id))
		{
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Rain Machine Clean-up: cleaning up rain particle("+particle_id+","+getTemplateName(particle_id)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
			destroyObject(particle_id);
			
			if(!exists(particle_id))
				removeObjVar(weatherMachine, "weatherParticleId");
		}
		else
			removeObjVar(weatherMachine, "weatherParticleId");
	}
	if(hasObjVar(weatherMachine, "weather_machine_on"))
	{
		removeObjVar(weatherMachine, "weather_machine_on");
	}
	if(hasObjVar(weatherMachine, "unmoveable"))
	{
		removeObjVar(weatherMachine, "unmoveable");
	}
}

trigger OnDestroy()
{
	if(hasObjVar(self, "weather_machine_on"))
	{
		//a weather object exists in the world - delete it.
		if(hasObjVar(self, "weatherParticleId"))
		{
			obj_id particleToDelete = getObjIdObjVar(self, "weatherParticleId");
			if(!isIdNull(particleToDelete))
			{
				destroyObject(particleToDelete);
				//make sure it has been destroyed - if so, remove the objvar
				if(!exists(particleToDelete))
					cleanUpScriptsAndSuch(self);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

void checkRefreshParticle(obj_id weatherMachine)
{
	if(hasObjVar(weatherMachine, "weather_machine_on"))
	{
		stopWeatherParticle(weatherMachine);

		setObjVar(weatherMachine, "weather_machine_on", 1);
		setObjVar(weatherMachine, "unmoveable", 1);
		playWeatherParticle(weatherMachine);
	}
}

void stopWeatherParticle(obj_id weatherMachine)
{
	if(hasObjVar(weatherMachine, "weatherParticleId"))
	{
		obj_id particleToDelete = getObjIdObjVar(weatherMachine, "weatherParticleId");
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Stop Rain Particle: Turning off rain particle("+particleToDelete+","+getTemplateName(particleToDelete)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
		destroyObject(particleToDelete);
		
		//ensure the weather Object is destroyed before turning the machine off
		if(!exists(particleToDelete))
			cleanUpScriptsAndSuch(weatherMachine);
	}
}

void playWeatherParticle(obj_id weatherMachine)
{
	if(!isIdValid(weatherMachine))
	{
		return;
	}

	//no weather machine should have a particle ID before this point...
	if(hasObjVar(weatherMachine, "weatherParticleId"))
	{
		obj_id particleToDelete = getObjIdObjVar(weatherMachine, "weatherParticleId");
		if ( isIdValid(particleToDelete) && exists(particleToDelete) )
		{
			string templateName = getTemplateName(particleToDelete);

			//let's make sure this objId is still a weatherstorm -
			//don't delete someone's super-uber-flame-throw-of-death by accident.
			if( templateName != null && templateName.startsWith("object/static/particle/particle_rain_machine") )
			{
				CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Play Rain Particle: Prepping for new rain particle by cleaning up old rain particle("+particleToDelete+","+templateName+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
				destroyObject(particleToDelete);
				removeObjVar(weatherMachine, "weatherParticleId");
			}
		}
	}

	if(hasObjVar(weatherMachine, "weather_machine_on"))
	{
		if(hasObjVar(weatherMachine, "weatherMachine.storm1"))	//light
		{
			string particle = getStringObjVar(weatherMachine, OBJVAR_WEATHER_PARTICLE_01);
			obj_id weatherParticle = createObject(particle, getLocation(weatherMachine));
			setObjVar(weatherMachine, "weatherParticleId", weatherParticle);
			
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Play Rain Particle: Creating new rain particle("+weatherParticle+","+getTemplateName(weatherParticle)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
			return;
		}
		if(hasObjVar(weatherMachine, "weatherMachine.storm2"))	//medium
		{
			string particle = getStringObjVar(weatherMachine, OBJVAR_WEATHER_PARTICLE_02);
			obj_id weatherParticle = createObject(particle, getLocation(weatherMachine));
			setObjVar(weatherMachine, "weatherParticleId", weatherParticle);
			
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Play Weather Particle: Creating new rain particle("+weatherParticle+","+getTemplateName(weatherParticle)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
			return;
		}
		if(hasObjVar(weatherMachine, "weatherMachine.storm3"))	//heavy
		{
			string particle = getStringObjVar(weatherMachine, OBJVAR_WEATHER_PARTICLE_03);
			obj_id weatherParticle = createObject(particle, getLocation(weatherMachine));
			setObjVar(weatherMachine, "weatherParticleId", weatherParticle);
			
			CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Play Weather Particle: Creating new rain particle("+weatherParticle+","+getTemplateName(weatherParticle)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
			return;
		}

		//give them the default medium if they don't have intensity set.
		string particle = getStringObjVar(weatherMachine, OBJVAR_WEATHER_PARTICLE_02);
		obj_id weatherParticle = createObject(particle, getLocation(weatherMachine));
		setObjVar(weatherMachine, "weatherParticleId", weatherParticle);
		
		CustomerServiceLog(CS_TCG_5_RAIN_MACHINE_CATEGORY, "Play Weather Particle: Creating new rain particle("+weatherParticle+","+getTemplateName(weatherParticle)+")...rainMachine = ("+weatherMachine+","+getTemplateName(weatherMachine)+")");
	}
}

void removeStormObjVar(obj_id weatherMachine)
{
	if(hasObjVar(weatherMachine, "weatherMachine.storm1"))
		removeObjVar(weatherMachine, "weatherMachine.storm1");
	if(hasObjVar(weatherMachine, "weatherMachine.storm2"))
		removeObjVar(weatherMachine, "weatherMachine.storm2");
	if(hasObjVar(weatherMachine, "weatherMachine.storm3"))
		removeObjVar(weatherMachine, "weatherMachine.storm3");
}

