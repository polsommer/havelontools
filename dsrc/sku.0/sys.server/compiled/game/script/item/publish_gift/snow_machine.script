/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        item.publish_gift.snow_machine
 * Description:
 * @author       jmichener
 * @version      $Revision: 0$
 */

include library.player_structure;
include library.static_item;
include library.sui;
include library.utils;

const string_id SID_WHILE_DEAD							= new string_id("spam", "while_dead");
const string_id SID_HAS_SNOWBALL_ALREADY					= new string_id("spam", "has_snowball");
const string_id SID_SNOWBALL_VERY_HOT						= new string_id("spam", "snowball_hot_environment");
const string_id SID_TURN_ON 							= new string_id("spam", "snow_machine_on");
const string_id SID_TURN_OFF	 						= new string_id("spam", "snow_machine_off");
const string_id SID_STORM_INTENSITY 						= new string_id("spam", "snow_machine_intensity");
const string_id SID_MAKE_SNOWBALLS	 					= new string_id("spam", "make_snowballs");
const string_id SID_STORM_01	 						= new string_id("spam", "storm1");
const string_id SID_STORM_02	 						= new string_id("spam", "storm2");
const string_id SID_STORM_03	 						= new string_id("spam", "storm3");
const string SNOW_PARTICLE_01							= "object/static/particle/particle_snow_machine_light.iff";
const string SNOW_PARTICLE_02							= "object/static/particle/particle_snow_machine_medium.iff";
const string SNOW_PARTICLE_03							= "object/static/particle/particle_snow_machine_heavy.iff";

trigger OnInitialize()
{
	if(hasObjVar(self, "snow_machine_on"))
	{
		playSnowParticle(self);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	obj_id snowMachine = self;

	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}
	if(isDead(player) || isIncapacitated(player))
	{
		sendSystemMessage(player, SID_WHILE_DEAD);
		return SCRIPT_CONTINUE;
	}
		
	//it's in a house?
	if(utils.isInHouseCellSpace(snowMachine))
	{
		//House admin Check
		obj_id structure = getTopMostContainer(snowMachine);
		if (!player_structure.isAdmin(structure, player))
			return SCRIPT_CONTINUE;

		//power menu
		if(hasObjVar(snowMachine, "snow_machine_on"))
			int stormOnOff = mi.addRootMenu(menu_info_types.ITEM_USE, SID_TURN_OFF);
		else
			int stormOnOff = mi.addRootMenu(menu_info_types.ITEM_USE, SID_TURN_ON);

		//intensity menu
		int intensityMain = mi.addRootMenu(menu_info_types.SERVER_MENU2, SID_STORM_INTENSITY);
		//intensity sub-menus
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU3, SID_STORM_01);
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU4, SID_STORM_02);
		mi.addSubMenu(intensityMain, menu_info_types.SERVER_MENU5, SID_STORM_03);

		//update menus
		sendDirtyObjectMenuNotification(snowMachine);	
	}

	//the snow machine is in a player's inventory
	if(utils.isNestedWithinAPlayer(snowMachine))
	{
		menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if(mid != null)
		{
			mid.setLabel(new string_id("spam", "make_snowballs"));
			mid.setServerNotify(true);
		}
	}	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	//snow machine
	obj_id snowMachine = self;
	
	//player ID validation
	if(!isIdValid(player) || !isIdValid(snowMachine))
	{
		return SCRIPT_CONTINUE;
	}
	
	//not while dead or incapped
	if(isDead(player) || isIncapacitated(player) )
	{
		sendSystemMessage( player, SID_WHILE_DEAD );
		return SCRIPT_CONTINUE;
	}
	
	//snowMachine is in player's house
	if(utils.isInHouseCellSpace(snowMachine))
	{
		//we want to turn it on
		if(item == menu_info_types.ITEM_USE && !hasObjVar(snowMachine, "snow_machine_on"))
		{
			setObjVar(snowMachine, "snow_machine_on", 1);
			setObjVar(snowMachine, "unmoveable", 1);
						
			playSnowParticle(snowMachine);
			return SCRIPT_CONTINUE;
		}
		if(item == menu_info_types.ITEM_USE && hasObjVar(snowMachine, "snow_machine_on"))
		{
			stopSnowParticle(snowMachine);
			return SCRIPT_CONTINUE;
		}
	}
	//is in player's inventory - only give them snowballs.
	if(utils.isNestedWithinAPlayer(snowMachine))
	{
		if(item == menu_info_types.ITEM_USE)
		{
			if(!utils.playerHasStaticItemInBankOrInventory(player, "publish_gift_chapter_11_snow_balls_02_01"))
			{
				//tatooine and mustafar will decrease the lifespan of your snowballs
				string planetName = getCurrentSceneName();
				if(planetName.equals("mustafar") || planetName.equals("tatooine"))
				{
					sendSystemMessage(player, SID_SNOWBALL_VERY_HOT);
				}
				obj_id pInv = utils.getInventoryContainer(player);
				obj_id snowballs = static_item.createNewItemFunction("publish_gift_chapter_11_snow_balls_02_01", pInv);
			}
			else
			{	
				sendSystemMessage(player, SID_HAS_SNOWBALL_ALREADY);
			}	
		}
	}
	
	if(item == menu_info_types.SERVER_MENU3)
	{	
		removeStormObjVar(snowMachine);
		setObjVar(snowMachine, "snowMachine.storm1", 1);
		checkRefreshParticle(snowMachine);
	}
	if(item == menu_info_types.SERVER_MENU4)
	{
		removeStormObjVar(snowMachine);
		setObjVar(snowMachine, "snowMachine.storm2", 1);
		checkRefreshParticle(snowMachine);
	}
	if(item == menu_info_types.SERVER_MENU5)
	{
		removeStormObjVar(snowMachine);
		setObjVar(snowMachine, "snowMachine.storm3", 1);
		checkRefreshParticle(snowMachine);
	}
	
	return SCRIPT_CONTINUE;
}	


trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	if(hasObjVar(self, "snow_machine_on"))
	{
		//a snow object exists in the world - delete it.
		if(hasObjVar(self, "snowParticleId"))
		{
			obj_id particleToDelete = getObjIdObjVar(self, "snowParticleId");
			if(!isIdNull(particleToDelete))
			{
				destroyObject(particleToDelete);
				//make sure it has been destroyed - if so, remove the objvar
				if(!exists(particleToDelete))
					cleanUpScriptsAndSuch(self);
			}
		}
		
	}

	return SCRIPT_CONTINUE;
}

void cleanUpScriptsAndSuch(obj_id snowMachine)
{
	if(hasObjVar(snowMachine, "weatherParticleId"))
	{
		obj_id particle_id = getObjIdObjVar(snowMachine, "weatherParticleId");
		
		if(exists(particle_id))
		{
			destroyObject(particle_id);
			
			if(!exists(particle_id))
				removeObjVar(snowMachine, "weatherParticleId");
		}
		else
			removeObjVar(snowMachine, "weatherParticleId");
	}

	if(hasObjVar(snowMachine, "snow_machine_on"))
	{
		removeObjVar(snowMachine, "snow_machine_on");
	}
	if(hasObjVar(snowMachine, "unmoveable"))
	{
		removeObjVar(snowMachine, "unmoveable");
	}
}

trigger OnDestroy()
{
	if(hasObjVar(self, "snow_machine_on"))
	{
		//a snow object exists in the world - delete it.
		if(hasObjVar(self, "snowParticleId"))
		{
			obj_id particleToDelete = getObjIdObjVar(self, "snowParticleId");
			if(!isIdNull(particleToDelete))
			{
				destroyObject(particleToDelete);
				//make sure it has been destroyed - if so, remove the objvar
				if(!exists(particleToDelete))
					cleanUpScriptsAndSuch(self);
			}
		}		
	}
	return SCRIPT_CONTINUE;
}

void checkRefreshParticle(obj_id snowMachine)
{
	if(hasObjVar(snowMachine, "snow_machine_on"))
	{
		stopSnowParticle(snowMachine);
		
		setObjVar(snowMachine, "snow_machine_on", 1);
		setObjVar(snowMachine, "unmoveable", 1);
		playSnowParticle(snowMachine);
	}
}

void stopSnowParticle(obj_id snowMachine)
{	
	if(hasObjVar(snowMachine, "snowParticleId"))
	{
		obj_id particleToDelete = getObjIdObjVar(snowMachine, "snowParticleId");
		destroyObject(particleToDelete);
		//ensure the snow Object is destroyed before turning the machine off
		if(!exists(particleToDelete))
			cleanUpScriptsAndSuch(snowMachine);
	}
}

void playSnowParticle(obj_id snowMachine)
{
	if(!isIdValid(snowMachine))
	{
		return;
	}
	
	//no snow machine should have a particle ID before this point...
	if(hasObjVar(snowMachine, "snowParticleId"))
	{
		obj_id particleToDelete = getObjIdObjVar(snowMachine, "snowParticleId");
		string templateName = getTemplateName(particleToDelete);
		
		//let's make sure this objId is still a snowstorm - 
		//don't delete someone's super-uber-flame-throw-of-death by accident.
		if(templateName == null || templateName.startsWith("object/static/particle/particle_snow_machine"))
		{
			destroyObject(particleToDelete);
			removeObjVar(snowMachine, "snowParticleId");
		}
	}
	
	if(hasObjVar(snowMachine, "snow_machine_on"))
	{
		if(hasObjVar(snowMachine, "snowMachine.storm1"))	//light
		{
			obj_id snowParticle = createObject(SNOW_PARTICLE_01, getLocation(snowMachine));
			setObjVar(snowMachine, "snowParticleId", snowParticle);
			return;
		}
		if(hasObjVar(snowMachine, "snowMachine.storm2"))	//medium
		{
			obj_id snowParticle = createObject(SNOW_PARTICLE_02, getLocation(snowMachine));
			setObjVar(snowMachine, "snowParticleId", snowParticle);
			return;	
		}
		if(hasObjVar(snowMachine, "snowMachine.storm3"))	//heavy
		{
			obj_id snowParticle = createObject(SNOW_PARTICLE_03, getLocation(snowMachine));
			setObjVar(snowMachine, "snowParticleId", snowParticle);
			return;	
		}
		
		//give them the default medium if they don't have intensity set.
		obj_id snowParticle = createObject(SNOW_PARTICLE_02, getLocation(snowMachine));
		setObjVar(snowMachine, "snowParticleId", snowParticle);
	}
}

void removeStormObjVar(obj_id snowMachine)
{
	if(hasObjVar(snowMachine, "snowMachine.storm1"))
		removeObjVar(snowMachine, "snowMachine.storm1");
	if(hasObjVar(snowMachine, "snowMachine.storm2"))
		removeObjVar(snowMachine, "snowMachine.storm2");
	if(hasObjVar(snowMachine, "snowMachine.storm3"))
		removeObjVar(snowMachine, "snowMachine.storm3");
}

