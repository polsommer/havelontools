include library.static_item;
include library.utils;

const string_id SID_SYS_NO_MOUNT			= new string_id("spam","snowball_not_while_mounted");
const string_id SID_CANT_SEE_TARGET			= new string_id("spam","snowball_cant_see_target");
const string_id SID_TARGET_SITTING				= new string_id("spam","snowball_target_sitting");
	

trigger OnAttach()
{
	//tatooine and mustafar will decrease the lifespan of your snowballs
	string planetName = getCurrentSceneName();
	if(planetName.equals("mustafar"))
	{
		setObjVar(self, "item.lifespan", 60);
		return SCRIPT_CONTINUE;
	}
	if(planetName.equals("tatooine"))
	{
		setObjVar(self, "item.lifespan", 300);
		return SCRIPT_CONTINUE;
	}
	setObjVar(self, "item.lifespan", 900);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if(mid != null)
	{
		mid.setLabel(new string_id("spam", "throw_snowball"));
		mid.setServerNotify(true);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(getState(player, STATE_RIDING_MOUNT) == 1)
	{
		sendSystemMessage(player, SID_SYS_NO_MOUNT);
		return SCRIPT_CONTINUE;
	}
	//get the intended target of the player - this is who he will throw a snowball to
	obj_id myTarget = getIntendedTarget(player);
	
	//make sure the target is valid
	if(myTarget == null || !isIdValid(myTarget))
	{
		sendSystemMessage(player, new string_id("spam", "need_intended_target"));
		return SCRIPT_CONTINUE;
	}
	
	//you must have a niche - and not be a vehicle
	int targetNiche = getNiche(myTarget);
	if(targetNiche < 0 || targetNiche == 4)
	{
		sendSystemMessage(player, new string_id("spam", "invalid_target"));
		return SCRIPT_CONTINUE;
	}
	
	//do not interrupt dancers!
	if(hasScript(myTarget, "systems.skills.performance.active_dance") || hasScript(myTarget, "systems.skills.performance.active_music"))
	{
		sendSystemMessage(player, new string_id("spam", "ent_dancing"));
		return SCRIPT_CONTINUE;
	}
	
	//use chose "use" and object is in player's inventory
	if(item == menu_info_types.ITEM_USE && utils.isNestedWithinAPlayer(self))
	{
		//if I am my own target - bail!
		if(myTarget == player)
		{
			sendSystemMessage(player, new string_id("spam", "not_at_self"));
			return SCRIPT_CONTINUE;
		}
		else
		{
			throwMe(myTarget, player, self);
		}
	}
	else
	{
		//player must have the snowball in his inventory to use it.
		sendSystemMessage(player, new string_id("spam", "must_be_in_inventory"));
	}
	return SCRIPT_CONTINUE;
}

void throwMe(obj_id target, obj_id player, obj_id self)
{
	if(hasObjVar(self, "snowball_pause"))
	{
		sendSystemMessage(player, new string_id("spam", "snowball_not_ready"));	
		return;
	}

	if(getPosture(target) == POSTURE_SITTING)
	{
		sendSystemMessage(player, SID_TARGET_SITTING);
		return;
	}

	if(!canSee(player, target))
	{
		sendSystemMessage(player, SID_CANT_SEE_TARGET);
		return;
	}
	
	else
	{
		float travelDistance = getDistance(target, player);
		
		if(travelDistance > 30f)
		{
			sendSystemMessage(player, new string_id("spam", "out_of_snowball_range"));
			return;
		}
		
		/*
		To give snowball flight times a more realistic look, we have three ranges
		that will adjust the snowball's speed
		*/
		if(travelDistance <= 30f && travelDistance > 20f)
		{
			attacker_results cbtAttackerResults = makeDummyAttackerResults(player);
			defender_results[] cbtDefenderResults = makeDummyDefenderResults(target);
			
			doCombatResults("throw_snow_ball_long", cbtAttackerResults, cbtDefenderResults);
		}
		if(travelDistance <= 20f && travelDistance > 10f)
		{
			attacker_results cbtAttackerResults = makeDummyAttackerResults(player);
			defender_results[] cbtDefenderResults = makeDummyDefenderResults(target);

			doCombatResults("throw_snow_ball_medium", cbtAttackerResults, cbtDefenderResults);
		}
		if(travelDistance <= 10f && travelDistance > 0.0f)
		{
			attacker_results cbtAttackerResults = makeDummyAttackerResults(player);
			defender_results[] cbtDefenderResults = makeDummyDefenderResults(target);

			doCombatResults("throw_snow_ball_short", cbtAttackerResults, cbtDefenderResults);
		}
		
		setObjVar(self, "snowball_pause", 1);
		messageTo(self, "snowballDelay", null, 3.0f, false);
		decrementCount(self);
		
	}
}

messageHandler snowballDelay()
{
	if(hasObjVar(self, "snowball_pause"))
		removeObjVar(self, "snowball_pause");
	return SCRIPT_CONTINUE;
}

attacker_results makeDummyAttackerResults(obj_id objAttacker)
{
	attacker_results cbtAttackerResults = new attacker_results();
	cbtAttackerResults.id = objAttacker;
	
	obj_id snowWeapon = utils.getStaticItemInInventory(objAttacker, "publish_gift_chapter_11_snow_balls_02_01");
	cbtAttackerResults.weapon = snowWeapon;
	cbtAttackerResults.endPosture = getPosture(objAttacker);

	return cbtAttackerResults;
}

defender_results[] makeDummyDefenderResults(obj_id objDefender)
{
	defender_results[] cbtDefenderResults = new defender_results[1];
	cbtDefenderResults[0] = new defender_results();
	cbtDefenderResults[0].id = objDefender;
	cbtDefenderResults[0].endPosture=0;
	cbtDefenderResults[0].result = COMBAT_RESULT_HIT;
	cbtDefenderResults[0].damageAmount =0;
	cbtDefenderResults[0].hitLocation = 0;

	return cbtDefenderResults;
}
