/**
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        antagonist.script
 * Description:  antagonist object script: POI = factoryliberation
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

/*
	In the core scenario, the antagonist is a pirate captain at some form of illicit factory.
*/

//------------------------------------------------
// Includes
//------------------------------------------------

include library.npc;
include library.ai_lib;
include library.poi;
include library.scenario;
include library.utils;
include library.combat;
include library.chat;
include ai.ai_combat;

//-----------------------------------------------
// Inherits
//-----------------------------------------------

inherits poi.base.scenario_actor;

//------------------------------------------------
// Constants
//------------------------------------------------

const string SCRIPT_CONVERSE				= "npc.converse.npc_converse_menu";
const string LOG_NAME						= "poiFactoryLiberation Antagonist";

// Conversation states.
const int	CONV_GREET						= 0;
const int	CONV_INSULT						= 1;
const int	CONV_MAYBEHELP					= 2;
const int	CONV_CONSULTMEDIATOR			= 3;
const int	CONV_NOHELP						= 4;
const int	CONV_YESHELP					= 5;

//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
//  OnAttach
//------------------------------------------------

trigger OnAttach()
{
	attachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
//  OnInitialize
//------------------------------------------------

trigger OnInitialize()
{
	attachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnStartNpcConversation
//------------------------------------------------

trigger OnStartNpcConversation( obj_id speaker )
{
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get base object reference.
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Get conversation.
	string convo = scenario.getConvo();
	if ( convo.equals("") )
	{
		npcEndConversation ( speaker );
		return SCRIPT_CONTINUE;
	}

	// Look up our progress.
	int progress = scenario.getPlayerProgress( speaker );

	// Check to see if we are the leader.
	boolean isLeader = poi.isNpcTagged( self, scenario.ANTAGONIST + "_0" );

	//------------------------------------------------
	// Minion chatter.
	//------------------------------------------------

	if ( !isLeader )
	{
		// Handle normal minion chatter.
		minionChatter( self, convo, speaker, poiMaster );
		return SCRIPT_CONTINUE;
	}

	//------------------------------------------------
	// Antagonist chatter.
	//------------------------------------------------

	// Msg/response vars.
	string_id msg = new string_id( convo, "a_greet" );
	resizeable string_id[] responses = new string_id[0];

	// Say something based on our progress.
	switch ( progress )
	{
		// Antagonist has not spoken to anyone yet.
		case CONV_GREET:
			// Greet the player.
			msg = new string_id( convo, "a_greet" );
			responses = utils.addElement( responses, new string_id(convo, "r_greet_maybehelp") );
			responses = utils.addElement( responses, new string_id(convo, "r_greet_insult") );
			npcStartConversation( speaker, self, convo, msg, responses );

			// Add the player to the scenario.
			scenario.setPlayerProgress( speaker, 1 );
			break;

		// Antagonist was insulted, the player hasn't left, so he attacks.
		case CONV_INSULT:
			scenario.say( self, convo, "a_attackafterinsult", false );
			npcEndConversation( speaker );
			startCombat( self, speaker );
			return SCRIPT_CONTINUE;

		// Player asked antagonist if he could help.
		case CONV_MAYBEHELP:
			scenario.say( self, convo, "a_angryaftermaybehelp", false );
			npcEndConversation( speaker );

			// Next time we'll attack.
			scenario.setPlayerProgress( speaker, CONV_INSULT );
			break;

		// Player told the mediator he wouldn't help.
		case CONV_NOHELP:
			scenario.say( self, convo, "a_nohelp", false );
			npcEndConversation( speaker );

			// Next time we'll attack.
			scenario.setPlayerProgress( speaker, CONV_INSULT );
			break;

		// Player told the mediator he would help.
		case CONV_YESHELP:
			scenario.say( self, convo, "a_yeshelp", false );
			npcEndConversation( speaker );

			// Next time we'll attack.
			scenario.setPlayerProgress( speaker, CONV_INSULT );
			break;
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// minionChatter
//------------------------------------------------

void minionChatter( obj_id self, string convo, obj_id speaker, obj_id poiMaster )
{
	// Say some guard chatter.
	int idx = rand( 1, 4 );
	poi.quickSay( self, "a_minion_" + idx );

	// Cut off the convo (no responses).
	npcEndConversation( speaker );
}

//------------------------------------------------
// OnNpcConversationResponse
//------------------------------------------------

trigger OnNpcConversationResponse( string convoName, obj_id speaker, string_id response )
{
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get reference to conversation.
	string convo = scenario.getConvo();
	if ( convo.equals("") )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Validate our conversation.
	if ( !convoName.equals(convo) )
		return SCRIPT_CONTINUE;

	// Look up the player's progress.
	int progress = scenario.getPlayerProgress( speaker );

	// Check to see if we are the leader.
	boolean isLeader = poi.isNpcTagged( self, scenario.ANTAGONIST + "_0" );

	// Only the leader can chat.
	if ( !isLeader )
		return SCRIPT_CONTINUE;

	// Respond to the player's comment.
	string aId = response.getAsciiId();
	string_id[] responses = new string_id[0];

	// Zero out responses.
	npcSetConversationResponses( speaker, responses );

	// Maybe I can help?
	if ( ( aId.equals("r_greet_maybehelp")) )
	{
		// Reject help.
		npcSpeak( speaker, new string_id( convo, "a_rejecthelp" ) );

		scenario.setPlayerProgress( speaker, CONV_MAYBEHELP );
	}

	// Insult the antagonist.
	else if ( ( aId.equals("r_greet_insult")) )
	{
		// Insult him back.
		npcSpeak( speaker, new string_id( convo, "a_insult" ) );

		scenario.setPlayerProgress( speaker, CONV_INSULT );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// defendWall
//
// The leader will call the others to defend the wall.
//------------------------------------------------

messageHandler defendWall()
{
	// Call to others to defend the wall.
	poi.quickSay( self, chat.CHAT_SHOUT, chat.MOOD_ANGRY, "a_defendwall" );

	return SCRIPT_CONTINUE;
}
