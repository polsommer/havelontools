/**
 * Copyright (C)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        theater.script
 * Description:  script for creating a generic theater
 * @author       $Author: rpalacio $
 * @version      $Revision: $
 */

/***** INCLUDES ********************************************************/

include library.poi;
include library.theater;
include library.factions;

/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	setObjVar(self, theater.VAR_STAMP, getGameTime());
	
	if ( hasObjVar(self, factions.FACTION) )
		factions.setFaction(self, factions.getFaction(self));
	
	//theater.spawn(self);
	messageTo(self, theater.HANDLE_THEATER_SETUP, null, 5, false);
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	theater.cleanup(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{

	if ( self.isBuildoutObject() == false ) // <- don't run this code for POI theaters that have buildout object IDs!
	{
		int now = getGameTime();
		
		int stamp = getIntObjVar(self, theater.VAR_STAMP);
		int expireTime = stamp + theater.PERSIST_TIME;

		
		if ( hasObjVar(self, theater.VAR_PERSIST_TIME) )
		{
			int persistTime = getIntObjVar(self, theater.VAR_PERSIST_TIME);
			expireTime = stamp + persistTime;
		}
		
		if ( expireTime < now )
		{
			destroyObject(self);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	theater.cleanup(self);
	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS *******************************************************/

messageHandler startTheaterFromBuildout()
{

	removeObjVar( self, "intPrespawned" );
	removeObjVar( self, "theater.children" );
	removeObjVar( self, "theater.objMobSpawners" );
	removeObjVar( self, "theater.objObjectiveSpawners" );
	removeObjVar( self, "theater.persist" );
	removeObjVar( self, "theater.stamp" );
	
	theater.spawnDatatableOffsetQueued(self, 0);		
	return SCRIPT_CONTINUE;
}

messageHandler handleTheaterSetup()
{
	if ( hasObjVar(self, theater.VAR_THEATER_BASE) && !hasObjVar(self, theater.VAR_CHILDREN) )
	{
		theater.spawnDatatableOffsetQueued(self, 0);		
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler handleTheaterComplete()
{
	if ( hasObjVar(self, poi.POI_BASE) )
	{
		obj_id master = poi.getBaseObject(self);
		if ( (master == null) || (master == obj_id.NULL_ID) )
		{
		}
		else
		{
			params.put(theater.DICT_MASTER, self);
			messageTo(master, theater.HANDLE_THEATER_COMPLETE, params, 1, false);
		}
	}
		
	return SCRIPT_CONTINUE;
}

messageHandler theaterFinished()
{
	if ( hasObjVar(self, poi.POI_BASE) )
	{
		obj_id master = poi.getBaseObject(self);
		if ((master != null) && (master != obj_id.NULL_ID))
		{
			LOG("theater", master+": theater finished "+ self);
			dictionary dctParams = new dictionary();				
			dctParams.put("objTheater", self);
			messageTo(master, "theaterFinished", dctParams, 0, false);
		}
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler continueTheater()
{
	
	
	int intIndex = params.getInt("intIndex");
	//LOG("theater", "intIndex is "+intIndex);
	theater.spawnDatatableOffsetQueued(self, intIndex);
	return SCRIPT_CONTINUE;
	

}
