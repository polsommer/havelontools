/**
 * Copyright (C)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        hq_imperial_lrg.script
 * Description:  script for creating a large imperial hq scene
 * @author       $Author: rpalacio $
 * @version      $Revision: $
 */

/***** INCLUDES ********************************************************/

include library.ai_lib;
include library.utils;
include library.theater;
include library.create;

/***** CONSTANTS *******************************************************/

const boolean IS_PERSISTED						= true;

const string SENTINEL_GUARD 					= "stormtrooper";
const string[] SENTINEL		= {
								"world:3.0,0,24.5,0",
								"world:-3.0,0,24.5,0",
								"foyer1:12.3,1,22.5,-135",
								"foyer1:-12.3,1,22.5,135",
								"mainhall:17,1,10.25,180",
								"mainhall:-17,1,10.25,180",
								"mainhall:2,1,-15.5,0",
								"mainhall:-2,1,-15.5,0",
								"jailcell1:11,1,-16.75,180",
								"jailcell1:18,1,-16.75,180",
								"jailcell2:-11,1,-16.75,180",
								"jailcell2:-18,1,-16.75,180",
								"foyer2:7,7,13,180",
								"foyer2:13,7,13,180",
								"foyer2:7,7,6.6,0",
								"foyer2:13,7,6.6,0",
								"world:16,0,-27.5,90",
								"world:16,0,-32,90"
							  };

const string PATROL_GUARD 						= "stormtrooper";
const string[] PATROL		= {
								"world:21,7,21,45",
								"world:-21,7,21,-45",
								"world:21,7,-21,135",
								"world:-21,7,-21,-135",
								"world:0,0,-26,180"
							  };

const string[] REINFORCEMENTS	= {
									"imperial_drop_squad"
								  };

/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	if ( IS_PERSISTED )
	{
		persistObject(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	cleanupTheater(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( IS_PERSISTED )
	{
		setupTheater(self);
	}
	else
	{
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}

trigger OnUnloadedFromMemory()
{
	cleanupTheater(self);
	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS *******************************************************/
boolean setupTheater(obj_id self)
{
	LOG("imperial_lrg", "**************** SETUP: " + getGameTime() + " **************");

	if ( (self == null) || (self == obj_id.NULL_ID) )
	{
		self = getSelf();
	}

	resizeable obj_id[] children = new obj_id[0];

	location myLoc = getLocation(self);

	//add spawn stuff here
	//SENTINELS
	for ( int i = 0; i < SENTINEL.length; i++ )
	{
		obj_id child = spawn(self, SENTINEL_GUARD, SENTINEL[i], ai_lib.BEHAVIOR_SENTINEL);
		if ( (child == null) || (child == obj_id.NULL_ID) )
		{

		}
		else
		{
			children = utils.addElement(children, child);
			ai_lib.setDefaultCalmBehavior(child, ai_lib.BEHAVIOR_SENTINEL);
		}
	}

	//PATROLS
	for ( int i = 0; i < PATROL.length; i++ )
	{
		obj_id child = spawn(self, PATROL_GUARD, PATROL[i], ai_lib.BEHAVIOR_SENTINEL);
		//obj_id child = spawn(self, PATROL_GUARD, PATROL[i], ai_lib.BEHAVIOR_LOITER);
		if ( (child == null) || (child == obj_id.NULL_ID) )
		{

		}
		else
		{
			children = utils.addElement(children, child);
		}
	}

	if ( (children == null) || (children.length == 0) )
	{
		//debugSpeakMsg(self, "no children?!");
	}
	else
	{
		setObjVar(self, theater.VAR_CHILDREN, children);
		return true;
	}

	return false;
}

boolean cleanupTheater(obj_id self)
{
	if ( (self == null) || (self == obj_id.NULL_ID) )
	{
		self = getSelf();
	}

	obj_id[] children = getObjIdArrayObjVar(self, theater.VAR_CHILDREN);
	if ( (children == null) || (children.length == 0) )
	{
		return false;
	}
	else
	{
		for ( int i = 0; i < children.length; i++ )
		{
			obj_id child = children[i];
			if ( (child == null) || (child == obj_id.NULL_ID) )
			{

			}
			else
			{
				destroyObject(child);
			}
		}
	}

	return true;
}

/***** SUPPORT *******************************************************/
obj_id spawn(obj_id self, string type, string sLoc, int default_behavior)
{
	LOG("imperial_lrg", "******");

	if ( (self == null) || (self == obj_id.NULL_ID) )
	{
		self = getSelf();
	}

	if ( sLoc.equals("") || sLoc.indexOf(":") < 0 )
	{
		return null;
	}

	location myLoc = getLocation(self);
	float myYaw = getYaw(self);
	LOG("imperial_lrg", "structure yaw = " + myYaw);

	location spawnLoc = null;

	java.util.StringTokenizer st = new java.util.StringTokenizer(sLoc, ":");
	string cellName = st.nextToken();
	string coors = st.nextToken();

	st = new java.util.StringTokenizer(coors, ",");
	string sx = st.nextToken();
	string sy = st.nextToken();
	string sz = st.nextToken();
	string syaw = st.nextToken();

	float x = utils.stringToFloat(sx);
	float y = utils.stringToFloat(sy);
	float z = utils.stringToFloat(sz);
	float yaw = utils.stringToFloat(syaw);

	if ( (x == Float.NEGATIVE_INFINITY) || (y == Float.NEGATIVE_INFINITY) || (z == Float.NEGATIVE_INFINITY) )
	{
		LOG("imperial_lrg", "spawn @ " + sLoc + " parsed x/y/z as invalid");
		return null;
	}

	if ( yaw == Float.NEGATIVE_INFINITY )
	{
		LOG("imperial_lrg", "spawn @ " + sLoc + " parsed yaw as invalid");
		return null;
	}

	if ( cellName.equals("world") )
	{
		spawnLoc = new location(myLoc.x + x, 0, myLoc.z + z, myLoc.area, obj_id.NULL_ID);
		LOG("imperial_lrg", "world spawn: type = " + type);
		LOG("imperial_lrg", "world spawn: offset = " + sLoc);
		LOG("imperial_lrg", "world spawn: pre-spin spawnLoc = " + spawnLoc.toString());

		//adjust for hq yaw
		if ( myYaw != 0.0f )
		{
			float dist = utils.getDistance2D(myLoc, spawnLoc);
			LOG("imperial_lrg", "world spawn: distance = " + dist);

			spawnLoc = utils.rotatePointXZ(myLoc, spawnLoc, myYaw);
			//spawnLoc = utils.rotatePointXZ(myLoc, dist, myYaw);

			spawnLoc.y = myLoc.y + y;

			LOG("imperial_lrg", "world spawn: post-spin spawnLoc = " + spawnLoc.toString());
		}
	}
	else
	{
		obj_id cellId = getCellId(self, cellName);
		if ( (cellId == null) || (cellId == obj_id.NULL_ID) )
		{
			return null;
		}
		else
		{
			spawnLoc = new location(x, y, z, myLoc.area, cellId);
		}
	}

	obj_id npcId = create.object(type, spawnLoc);
	if ( (npcId == null) || (npcId == obj_id.NULL_ID) )
	{
		LOG("imperial_lrg", "unable to spawn " + type + " @ " + spawnLoc.toString());
		return null;
	}
	else
	{
		setYaw(npcId, yaw);
		ai_lib.setDefaultCalmBehavior(npcId, default_behavior);
		LOG("imperial_lrg", "spawned (" + npcId + ")" + getName(npcId) + " at " + getLocation(npcId).toString());
	}

	return npcId;
}
