/**
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        antagonist.script
 * Description:  antagonist object script: POI = family_feud
 * @author       $Author: rpalacio $
 * @version      $Revision: #1 $
 */

/***** INCLUDES ********************************************************/

include library.npc;
include library.scenario;
include library.poi;
include library.ai_lib;
include library.utils;
include ai.ai_combat;

/***** INHERITS ********************************************************/

inherits poi.base.scenario_actor;

/***** CONSTANTS *******************************************************/

const string SCRIPT_CONVERSE					= "npc.converse.npc_converse_menu";

const string VAR_EN_ROUTE						= scenario.VAR_SCENARIO_BASE + ".enRoute";

const string HANDLER_TIMER						= "handleTimer";
const string HANDLER_CADENCE					= "handleCadence";

const string DICT_LEADER_ID						= "leader";
const string DICT_TARGET_ID						= "target";
const string DICT_FACTION_ID					= "factionId";

const int TIME_WAIT								= 120;

const string MY_TARGET_LOCATION					= scenario.MEDIATOR + "_loc";

/***** TRIGGERS *******************************************************/

trigger OnAttach()
{
	attachScript(self, SCRIPT_CONVERSE);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	attachScript(self, SCRIPT_CONVERSE);
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	messageTo(self, scenario.HANDLER_INCAPACITATION, null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	messageTo(self, scenario.HANDLER_INCAPACITATION, null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( (convo == null) || (convo.equals("")) )
	{
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	if ( ai_lib.isInCombat(self) )
	{
		scenario.sayNoAct(self, convo, "a_incombat_" + rand(1,5));
		return SCRIPT_CONTINUE;
	}

	int cnt = getIntObjVar(poiMaster, scenario.VAR_MEDIATOR_COUNT);
	if ( cnt > 0 )
	{
		//not all dead!
	}
	else
	{
		if ( poi.isGrantedCredit(poiMaster, speaker) )
		{
			scenario.say(self, convo, "a_thank_combat");
		}
		else
		{
			scenario.say(self, convo, "a_brushoff");
		}

		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	boolean isLeader = false;
	obj_id leader = poi.findObject(scenario.ANTAGONIST + "_0");
	if ( (leader == null) || (leader == obj_id.NULL_ID) )
	{
		//hrmmm
	}
	else
	{
		if ( leader == self )
		{
			isLeader = true;
		}
	}

	boolean isLeaderEnRoute = getBooleanObjVar(leader, VAR_EN_ROUTE);


	if ( isLeader )
	{
		//debugSpeakMsg(self, "I am the antagonist leader...");

		if ( isLeaderEnRoute )
		{
			switch (rand(1,4))
			{
				case 1:
					obj_id[] members = scenario.getActorsWithNamePrefix(poiMaster, scenario.ANTAGONIST);
					if ( (members == null) || (members.length == 0) )
					{

					}
					else
					{
						scenario.sayNoAct(self, convo, "a_cadence");
						for ( int i = 0; i < members.length; i++ )
						{
							messageTo(members[i], HANDLER_CADENCE, null, 1, false);
						}
					}
					break;

				default:
					scenario.sayNoAct(self, convo, "a_enroute");
					break;
			}
			npcEndConversation (speaker);

			return SCRIPT_CONTINUE;
		}

		int progress = scenario.getPlayerProgress(speaker);

		string_id msg = new string_id(convo, "a_greet");
		resizeable string_id[] responses = new string_id[0];

		//debugSpeakMsg(self, "your progress = " + progress);

		switch (progress)
		{
			//hasnt spoken to anyone yet...
			case 0:

			//spoke with mediator
			case 2:		//answer = no
				responses = utils.addElement(responses, new string_id(convo, "response_yes"));
				responses = utils.addElement(responses, new string_id(convo, "response_no"));
				break;

			case 1:		//answer = yes
			case 5:		//lead mediators
				scenario.say(self, convo, "a_mad");
				npcEndConversation (speaker);
				scenario.groupAttack(self, speaker);
				return SCRIPT_CONTINUE;

			//spoke with antagonist
			case 3:		//answer = yes
				scenario.say(self, convo, "a_preparing");
				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;

			case 4:		//answer = no
				scenario.say(self, convo, "a_rejected");
				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;

			//lead antagonists
			case 6:
				scenario.say(self, convo, "a_runaround");
				npcEndConversation (speaker);
				scenario.groupAttack(self, speaker);
				break;
		}

		if ( (responses == null) || (responses.length == 0) )
		{
			//debugSpeakMsg(self, "I got here but have no responses to give the player... hrmm");
		}
		else
		{
			npcStartConversation(speaker, self, convo, msg, responses);
		}
	}
	else
	{
		//SELF = minion
		//debugSpeakMsg(self, "I am an antagonist minion...");

		int idx = rand(1,5);
		scenario.say(self, convo, "a_minion_" + idx);
		npcEndConversation (speaker);
	}

	return SCRIPT_CONTINUE;
}


trigger OnNpcConversationResponse (string convoName, obj_id speaker, string_id response)
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	if ( ai_lib.isInCombat(self) )
	{
		scenario.sayNoAct(self, convo, "a_incombat_" + rand(1,5));
		return SCRIPT_CONTINUE;
	}

	if ( !convoName.equals(convo) )
	{
		return SCRIPT_CONTINUE;
	}

	int progress = scenario.getPlayerProgress(speaker);

	if ( progress >= 0 && progress < 3 )
	{
		string aId = response.getAsciiId();

		//debugSpeakMsg(self, "your response = " + aId);

		string_id msg = new string_id();
		if (( aId.equals("response_yes"))) 		//yes, i will help you!
		{
			scenario.say(self, convo, "a_yes");
			npcEndConversation (speaker);
			scenario.setPlayerProgress(speaker, 3);

			dictionary d = new dictionary();
			d.put(scenario.DICT_OBJID, speaker);

			messageTo(self, scenario.HANDLER_PREP_TIMER, d, rand(10,25), false);
			return SCRIPT_CONTINUE;
		}
		else if (( aId.equals("response_no"))) 	//no, i will not help you
		{
			scenario.say(self, convo, "a_no");
			npcEndConversation (speaker);
			scenario.setPlayerProgress(speaker, 4);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string name)
{
	if ( name.equals(MY_TARGET_LOCATION) )
	{
		removeObjVar(self, VAR_EN_ROUTE);
		ai_lib.aiStopFollowing(self);

		obj_id poiMaster = poi.getBaseObject(self);
		if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
		{
			return SCRIPT_CONTINUE;
		}

		int enemyCount = getIntObjVar(poiMaster, scenario.VAR_MEDIATOR_COUNT);
		if ( enemyCount < 1 )
		{
			//EVERYONES DEAD!!
			queueCommand(self, ##"social", null, "scratch", COMMAND_PRIORITY_DEFAULT);
			return SCRIPT_CONTINUE;
		}


		obj_id target = obj_id.NULL_ID;

		obj_id[] npcsInRange = getNPCsInRange(getLocation(self), 50f);
		if ( (npcsInRange == null) || (npcsInRange.length == 0) )
		{
			//huh?
		}
		else
		{
			obj_id enemyLeader = poi.findObject(scenario.MEDIATOR + "_0");
			if ( (enemyLeader == null) || (enemyLeader == obj_id.NULL_ID) )
			{
			}
			else
			{
				int idx = utils.getElementPositionInArray(npcsInRange, enemyLeader);
				if ( idx > -1 )
				{
					target = enemyLeader;
				}
			}
		}

		if ( target == obj_id.NULL_ID )
		{
			obj_id[] enemies = scenario.getActorsWithNamePrefix(poiMaster, scenario.MEDIATOR);
			if ( (enemies == null) || (enemies.length == 0) )
			{

			}
			else
			{
				for ( int i = 0; i < enemies.length; i++ )
				{
					if ( target == obj_id.NULL_ID )
					{
						if ( utils.getElementPositionInArray(npcsInRange, enemies[i]) > -1 )
						{
							target = enemies[i];
						}
					}
				}
			}
		}

		if ( (target == null) || (target == obj_id.NULL_ID) )
		{
			//debugSpeakMsg(self, "unable to find target!!");
		}
		else
		{
			dictionary d = new dictionary();
			d.put(scenario.DICT_OBJID, target);
			messageTo(self, scenario.HANDLER_CHARGE, d, 0, false);
			//startCombat(self, target);
		}
	}

	return SCRIPT_CONTINUE;
}



/***** FUNCTIONS *******************************************************/

/***** MESSAGEHANDLER *******************************************************/
messageHandler handleIncapacitation()
{
	scenario.actorIncapacitated(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleCadence()
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	scenario.sayNoAct(self, convo, "a_cadence_response");
	return SCRIPT_CONTINUE;
}

messageHandler handleFollowTimer()
{
	obj_id player = params.getObjId(scenario.DICT_OBJID);
	if ( (player == null) || (player == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	location loc = getLocationObjVar(poiMaster, scenario.VAR_ANTAGONIST_LOC);
	pathTo(self, loc);

	return SCRIPT_CONTINUE;
}

messageHandler handlePrepTimer()
{
	obj_id player = params.getObjId(scenario.DICT_OBJID);
	if ( (player == null) || (player == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	scenario.groupFollow(self, player, scenario.ANTAGONIST);
	scenario.sayNoAct(self, convo, "a_rtg");

	scenario.setPlayerProgress(player, 8);

	//add target location here
	location loc = getLocationObjVar(poiMaster, scenario.VAR_MEDIATOR_LOC);
	if ( loc == null )
	{

	}
	else
	{
		addLocationTarget(MY_TARGET_LOCATION, loc, 25f);
	}

	messageTo(self, scenario.HANDLER_FOLLOW_TIMER, null, rand(600, 800), true);

	obj_id wp = createWaypointInDatapad(player, loc);
	if (isIdValid(wp))
	{
		setWaypointActive(wp, true);
		setWaypointVisible(wp, true);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleAttackTimer()
{
	if ( ai_lib.isInCombat(self) )
	{
		messageTo(self, "handleAttackTimer", params, 120, false);
		return SCRIPT_CONTINUE;
	}

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( (convo == null) || (convo.equals("")) )
	{
		return SCRIPT_CONTINUE;
	}

	scenario.groupFollow(self, self, scenario.ANTAGONIST);
	scenario.sayNoAct(self, convo, "a_rtg");

	//add target location here
	location loc = getLocationObjVar(poiMaster, scenario.VAR_MEDIATOR_LOC);
	if ( loc == null )
	{

	}
	else
	{
		addLocationTarget(MY_TARGET_LOCATION, loc, 25f);
	}

	//pathTo location
	pathTo(self, loc);
	return SCRIPT_CONTINUE;
}

messageHandler handleCharge()
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id[] members = scenario.getActorsWithNamePrefix(poiMaster, scenario.ANTAGONIST);
	if ( (members == null) || (members.length == 0) )
	{

	}
	else
	{
		for ( int i = 0; i < members.length; i++ )
		{
			ai_lib.aiStopFollowing(members[i]);
		}
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id target = params.getObjId(scenario.DICT_OBJID);
	if ( (target == null) || (target == obj_id.NULL_ID) )
	{
		queueCommand(self, ##"social", null, "scratch", COMMAND_PRIORITY_DEFAULT);
	}
	else
	{
		scenario.sayNoAct(self, convo, "a_charge");
		messageTo(target, scenario.HANDLER_ENEMY_ATTACK, null, 2, false);
		scenario.groupAttack(self, target);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleEnemyAttack()
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id target = poi.findObject(scenario.MEDIATOR + "_0");
	if ( (target == null) || (target == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		scenario.sayNoAct(self, convo, "a_enemy_attack");
		scenario.groupAttack(self, target);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleVictory()
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id leader = poi.findObject(scenario.ANTAGONIST + "_0");
	if ( (leader == null) || (leader == obj_id.NULL_ID) )
	{
		//hrmmm
	}
	else
	{
		if ( leader == self )
		{
			scenario.say(self, convo, "a_victory");
		}
		else
		{
			scenario.say(self, convo, "a_minion_victory_" + rand(1,5));
		}
	}

	return SCRIPT_CONTINUE;
}
