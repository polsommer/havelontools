/**
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        antagonist.script
 * Description:  antagonist object script: POI = twoliars
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

/*
	In the core scenario, the antagonist is a bounty hunter.
*/

//------------------------------------------------
// Includes
//------------------------------------------------

include library.npc;
include library.ai_lib;
include library.scenario;
include library.poi;
include library.utils;
include library.prose;
include library.group;
include library.badge;
include ai.ai_combat;

//-----------------------------------------------
// Inherits
//-----------------------------------------------

inherits poi.base.scenario_actor;

//------------------------------------------------
// Constants
//------------------------------------------------

const string SCRIPT_CONVERSE				= "npc.converse.npc_converse_menu";
const string LOG_NAME						= "poiTwoLiars Antagonist";

// Conversation states.
const int	CONV_GREET						= 0;	// Player hasn't spoken to anyone and needs a greeting.
const int	CONV_LOOKING					= 1;	// Player is looking for the mark.
const int	CONV_LOSS						= 2;	// Player guessed wrong.
const int	CONV_WIN						= 3;	// Player guessed right.

//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	attachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnInitialize
//------------------------------------------------

trigger OnInitialize()
{
	attachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnStartNpcConversation
//------------------------------------------------

trigger OnStartNpcConversation( obj_id speaker )
{
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get conversation.
	string convo = scenario.getConvo();
	if ( convo.equals("") )
	{
		npcEndConversation ( speaker );
		return SCRIPT_CONTINUE;
	}

	// Look up our progress.
	int progress = scenario.getPlayerProgress( speaker );

	//------------------------------------------------
	// Antagonist chatter.
	//------------------------------------------------

	// Msg/response vars.
	string_id msg = new string_id( convo, "a_greet" );
	resizeable string_id[] responses = new string_id[0];

	// Is scenario complete?
	if ( scenario.isComplete() )
	{
		// Chatter.
		int idx = rand( 1, 2 );
		poi.quickSay( self, "a_chatter_" + idx );

		// Cut off the convo (no responses).
		npcEndConversation( speaker );

		return SCRIPT_CONTINUE;
	}

	// Choose something to say based on this player's progrss.
	switch ( progress )
	{
		// Antagonist has not spoken to anyone yet.
		case CONV_GREET:
			// Greet the player.
			msg = new string_id( convo, "a_greet" );
			responses = utils.addElement( responses, new string_id(convo, "r_a_greet") );
			npcStartConversation( speaker, self, convo, msg, responses );
			break;

		case CONV_LOOKING:
			// Greet the player.
			msg = new string_id( convo, "a_whoisit" );
			responses = utils.addElement( responses, new string_id(convo, "r_a_ithinkso") );
			responses = utils.addElement( responses, new string_id(convo, "r_a_whoisit") );
			npcStartConversation( speaker, self, convo, msg, responses );
			break;

		case CONV_WIN:
			// Thanks!
			msg = new string_id( convo, "a_thanks" );
			npcStartConversation( speaker, self, convo, msg, responses );
			break;

		case CONV_LOSS:
			// No thanks!
			msg = new string_id( convo, "a_notrust" );
			npcStartConversation( speaker, self, convo, msg, responses );
			break;
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnNpcConversationResponse
//------------------------------------------------

trigger OnNpcConversationResponse( string convoName, obj_id speaker, string_id response )
{
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get reference to base.
	obj_id poiMaster = poi.getBaseObject( self );
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Get reference to conversation.
	string convo = scenario.getConvo();
	if ( convo.equals("") )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Validate our conversation.
	if ( !convoName.equals(convo) )
		return SCRIPT_CONTINUE;

	// Look up the player's progress.
	int progress = scenario.getPlayerProgress( speaker );

	// Respond to the player's comment.
	string aId = response.getAsciiId();
	resizeable string_id[] responses = new string_id[0];

	// Zero out responses.
	npcSetConversationResponses( speaker, responses );

	// Haven't seen 'em.
	if ( ( aId.equals("r_a_greet") ) )
	{
		// Tell our story.
		npcSpeak( speaker, new string_id( convo, "a_lookingformark" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_lookingformark") );
		npcSetConversationResponses( speaker, responses );
	}

	// So why don't you arrest him?
	else if ( (aId.equals("r_a_lookingformark") ) )
	{
		// Tell our story.
		npcSpeak( speaker, new string_id( convo, "a_thatstheproblem" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_thatstheproblem") );
		npcSetConversationResponses( speaker, responses );
	}

	// How can you not know which he is?
	else if ( ( aId.equals("r_a_thatstheproblem") ) )
	{
		// Tell our story.
		npcSpeak( speaker, new string_id( convo, "a_clues" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_clues") );
		npcSetConversationResponses( speaker, responses );
	}

	// So get him!
	else if ( ( aId.equals("r_a_clues") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_imnotdumb" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_imnotdumb") );
		npcSetConversationResponses( speaker, responses );
	}

	// Have you talked to them?
	else if ( ( aId.equals("r_a_imnotdumb") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_questioned" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_questioned") );
		npcSetConversationResponses( speaker, responses );
	}

	// But?
	else if ( ( aId.equals("r_a_questioned") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_questioned2" ) );

		// Set player responses.
		responses = utils.addElement( responses, new string_id(convo, "r_a_questioned2") );
		npcSetConversationResponses( speaker, responses );
	}

	// I'll do it.
	else if ( ( aId.equals("r_a_questioned2") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_goahead" ) );

		scenario.setPlayerProgress( speaker, CONV_LOOKING );
	}

	// Not yet.
	else if ( ( aId.equals("r_a_whoisit") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_keeplooking" ) );
	}

	// Not yet.
	else if ( ( aId.equals("r_a_ithinkso") ) )
	{
		npcSpeak( speaker, new string_id( convo, "a_greatwho" ) );

		// Get speaker scriptvars.
		deltadictionary dctScriptVars = speaker.getScriptVars();

		// Add names of possible criminals.
		prose_package ppa[] = new prose_package[6];
		int names[] = new int[6];
		for( int i=0; i<6; i++ )
		{
			names[i] = i;
		}
		int j = 0;
		for( int i=5; i>= 0; --i )
		{
			int index = rand( 0, i );
			int name = names[index];
			names[index] = names[i];
			names[i] = -1;

			// Get the liar's name.
			string liarName = getLiarName( poiMaster, name );

			// Store on the player, the name and index of the guess.
			dctScriptVars.put( "poiTwoLiars.liars." + (j+1), liarName );

			// Add this to the response list.
			string_id str = new string_id( convo, "prose_implicate_" + j );
			ppa[j++] = prose.getPackage( str, liarName );

		}
		npcSetConversationResponses( speaker, ppa );
	}

	// The name of a criminal.
	else
	{
		// Get speaker scriptvars.
		deltadictionary dctScriptVars = speaker.getScriptVars();

		for ( int i=0; i<6; i++ )
		{
			// Get this name.
			string name = getStringObjVar( poiMaster, "m_" + i );
			string res = getString(response);
			string index = res.substring( 0, 1 );

			// Get the name scriptvar.
			string liarName = dctScriptVars.getString( "poiTwoLiars.liars." + index );

			// Which one is it?
			if ( liarName.equals( name ) )
			{
				// Solution is 3.
				if ( i == 3 )
				{
					// Correct!
					npcSpeak( speaker, new string_id( convo, "a_rightanswer" ) );
					scenario.setPlayerProgress( speaker, CONV_WIN );

					// Reward his group.
					if ( group.isGroupObject(speaker) )
					{
						obj_id[] members = getGroupMemberIds( speaker );
						if ( (members == null) || (members.length == 0) )
						{
						}
						else
						{
							for ( int n = 0; n < members.length; n++ )
							{
								if ( !badge.hasBadge( members[n], "poi_twoliars" ) )
									badge.grantBadge( members[n], "poi_twoliars" );
								else
									badge.notifyHasBadge( members[n], "poi_twoliars" );
							}
						}
					}
					else
					{
						if ( !badge.hasBadge( speaker, "poi_twoliars" ) )
							badge.grantBadge( speaker, "poi_twoliars" );
						else
							badge.notifyHasBadge( speaker, "poi_twoliars" );
					}

					// Mark scenario complete.
					scenario.complete();

					return SCRIPT_CONTINUE;
				}
				else
				{
					// Wrong!  We don't trust this player anymore.
					npcSpeak( speaker, new string_id( convo, "a_wronganswer" ) );
					scenario.setPlayerProgress( speaker, CONV_LOSS );

					return SCRIPT_CONTINUE;
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// getLiarName
//------------------------------------------------

string getLiarName( obj_id poiMaster, int liarIndex )
{
	return getStringObjVar( poiMaster, "m_" + liarIndex );
}
