/**
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        antagonist.script
 * Description:  antagonist object script: POI = deliverance
 * @author       $Author: rpalacio $
 * @version      $Revision: #1 $
 */

/***** INCLUDES ********************************************************/

include library.npc;
include library.scenario;
include library.poi;
include library.ai_lib;
include library.utils;
include library.factions;
include library.combat;
include library.group;
include ai.ai_combat;

/***** INHERITS ********************************************************/

inherits theme_park.poi.base;

/***** CONSTANTS *******************************************************/

const string SCRIPT_CONVERSE					= "npc.converse.npc_converse_menu";

const string VAR_RESET_TIMER					= scenario.VAR_SCENARIO_BASE + ".resetTimer";

const string HANDLER_TIMER						= "handleTimer";
const string HANDLER_MEDIATOR_DEAD				= "handleMediatorDead";
const string HANDLER_FACE_CALL					= "handleFaceCall";

const string DICT_LEADER_ID						= "leader";
const string DICT_TARGET_ID						= "target";
const string DICT_FACTION_ID					= "factionId";

const int TIME_WAIT								= 120;

/***** TRIGGERS *******************************************************/

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	messageTo(self, scenario.HANDLER_MY_DEATH, null, 2, false);

	string myName = getStringObjVar(self, scenario.VAR_MY_NAME);

	if ( !myName.equals("") )
	{
		dictionary d = new dictionary();
		d.put(scenario.DICT_NAME, myName);
		d.put(scenario.DICT_OBJID, self);

		messageTo(poiMaster, scenario.HANDLER_ACTOR_DEATH, d, 0, false);
	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string locName)	//triggers for leader only
{
	LOG("poiDeliverance", "OnArrivedAtLocation: I arrived at location = " + locName);

	ai_lib.aiStopFollowing(self);

	messageTo(self, HANDLER_TIMER, null, TIME_WAIT, false);

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "OnArrivedAtLocation: unknown poi base object!");
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		LOG("poiDeliverance", "OnArrivedAtLocation: unknown convo file!");
		return SCRIPT_CONTINUE;
	}

	string desiredLocName = poiMaster.toString() + "_" + scenario.ANTAGONIST;

	if ( desiredLocName.equals(locName) )
	{
		obj_id target = poi.findObject(scenario.MEDIATOR);
		if ( (target == null) || (target == obj_id.NULL_ID) )
		{
			return SCRIPT_CONTINUE;
		}
		else
		{
			location myLoc = getLocation(self);
			location tLoc = getLocation(target);

			float dist = utils.getDistance2D(myLoc, tLoc);

			if ( dist < 12.5f )
			{
				faceTo(self, target);
				scenario.say(self, convo, "a_greet_m");
				messageTo(target, "handleAGreetM", null, 2, false);
			}
			else
			{
				LOG("poiDeliverance", "(" + target + ") mediator not at target location..");
				LOG("poiDeliverance", "(" + target + ") pathing to mediator current location..");

				locName = poiMaster.toString() + "_" + scenario.ANTAGONIST;
				scenario.requestAddTargetLocation(self, locName, tLoc, 7.5f);
				setObjVar(self, scenario.VAR_TARGET_LOCATION_NAME, locName);

				LOG("poiDeliverance", "(" + target + ") mediator loc = " + tLoc.toString());
				LOG("poiDeliverance", "(" + self + ") leader pathing to: " + tLoc.toString());
				ai_lib.aiPathTo(self, tLoc);

				return SCRIPT_CONTINUE;
			}
		}

		messageTo(self, HANDLER_TIMER, null, TIME_WAIT, false);
	}

	obj_var_list ovl = getObjVarList(poiMaster, POI_STRING_LIST);
	if ( (ovl == null) || (ovl.getNumItems() == 0) )
	{

	}
	else
	{
		for ( int i = 0; i < ovl.getNumItems(); i++ )
		{
			obj_var ov = ovl.getObjVar(i);
			string ovName = ov.getName();
			LOG("poiDeliverance", "checking script attach on " + ovName);
			if ( ovName.startsWith(scenario.ANTAGONIST + "_") )
			{
				obj_id ant = poi.findObject(ovName);
				if ( (ant == null) || (ant == obj_id.NULL_ID) )
				{
					LOG("poiDeliverance", "poi unable to locate object named: " + ovName);
				}
				else
				{
					attachScript(ant, SCRIPT_CONVERSE);
				}
			}
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	if ( ai_lib.isInCombat(self) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "I have no idea what object I belong to!");
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		LOG("poiDeliverance", "I have no idea what I am supposed to say");
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	boolean isLeader = false;
	obj_id leader = poi.findObject(scenario.ANTAGONIST + "_0");
	if ( (leader == null) || (leader == obj_id.NULL_ID) )
	{
		//hrmmm
	}
	else
	{
		if ( leader == self )
		{
			isLeader = true;
		}
	}

	if ( isLeader )
	{
		LOG("poiDeliverance", "I am the antagonist leader...");

		string[] dead = getStringArrayObjVar(poiMaster, scenario.VAR_SCENARIO_DEAD);
		if ( (dead == null) || (dead.length == 0) )
		{
			//not dead!
		}
		else
		{
			int idx = utils.getElementPositionInArray(dead, scenario.MEDIATOR);
			if ( idx < 0 )
			{
				//not dead!
			}
			else
			{
				if ( poi.isGrantedCredit(poiMaster, speaker) )
				{
					scenario.say(self, convo, "a_thank_combat");
				}
				else
				{
					scenario.say(self, convo, "a_brushoff");
				}

				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;
			}
		}

		int progress = scenario.getPlayerProgress(speaker);

		string_id msg = new string_id(convo, "a_greet");
		resizeable string_id[] responses = new string_id[0];

		LOG("poiDeliverance", "your progress = " + progress);

		switch (progress)
		{
			//hasnt spoken to anyone yet...
			case 0:
				scenario.say(self, convo, "a_no_progress");
				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;

			//spoke with mediator
			case 1:		//answer = no
			case 3:		//answer = maybe
				LOG("poiDeliverance", "comparing factions...");

				responses = utils.addElement(responses, new string_id(convo, "response_yes"));
				responses = utils.addElement(responses, new string_id(convo, "response_no"));
				responses = utils.addElement(responses, new string_id(convo, "response_maybe"));
				break;

			case 2:		//answer = yes to help mediator
				scenario.say(self, convo, "a_greet_mad");
				npcEndConversation (speaker);
				groupAttack(self, speaker);
				return SCRIPT_CONTINUE;

			//spoke with antagonist
			case 4:		//answer = no - question = allow antagonists to ruff up mediator?
				npcEndConversation (speaker);
				groupAttack(self, speaker);
				return SCRIPT_CONTINUE;

			case 5:		//answer = yes
			case 6:		//answer = maybe
				scenario.say(self, convo, "a_waiting");
				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;

			//negotiated with mediator
			case 7:		//negotiate fail
				scenario.say(self, convo, "a_negotiate_fail");
				npcEndConversation (speaker);
				groupAttack(self, speaker);
				return SCRIPT_CONTINUE;

			case 8:		//negotiate success
				scenario.say(self, convo, "a_thank_negotiate");
				npcEndConversation (speaker);
				scenario.setPlayerProgress(speaker, 9);

				scenario.complete(poi.getBaseObject(self));
				messageTo(self, HANDLER_MEDIATOR_DEAD, null, 0, false);
				return SCRIPT_CONTINUE;

			//completed negotiation with antagonist
			case 9:
				scenario.say(self, convo, "a_thank_negotiate_again");
				npcEndConversation (speaker);
				return SCRIPT_CONTINUE;
		}

		if ( (responses == null) || (responses.length == 0) )
		{
			LOG("poiDeliverance", "I got here but have no responses to give the player... hrmm");
		}
		else
		{
			npcStartConversation(speaker, self, convo, msg, responses);
		}
	}
	else
	{
		//SELF = minion
		LOG("poiDeliverance", "I am an antagonist minion...");

		int idx = rand(1,5);
		scenario.say(self, convo, "minion_" + idx);
		npcEndConversation (speaker);
	}

	return SCRIPT_CONTINUE;
}


trigger OnNpcConversationResponse (string convoName, obj_id speaker, string_id response)
{
	if ( ai_lib.isInCombat(self) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "I have no idea what object I belong to!");
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		LOG("poiDeliverance", "I have no idea what I am supposed to say");
		npcEndConversation (speaker);
		return SCRIPT_CONTINUE;
	}

	if ( !convoName.equals(convo) )
	{
		return SCRIPT_CONTINUE;
	}

	int progress = scenario.getPlayerProgress(speaker);

	if ( progress > 0 && progress < 4 )
	{
		string aId = response.getAsciiId();

		LOG("poiDeliverance", "your response = " + aId);

		string_id msg = new string_id();
		if (( aId.equals("response_yes"))) //  yes, you can do your desired task
		{
			scenario.say(self, convo, "a_yes");
			npcEndConversation (speaker);
			scenario.setPlayerProgress(speaker, 5);
			return SCRIPT_CONTINUE;
		}
		else if (( aId.equals("response_no"))) //  no, you cannot do your desired task
		{
			scenario.say(self, convo, "a_no");
			npcEndConversation (speaker);
			scenario.setPlayerProgress(speaker, 4);
			groupAttack(self, speaker);
			return SCRIPT_CONTINUE;
		}
		else if (( aId.equals("response_maybe"))) //  let me go talk with mediator boy
		{
			int roll = rand(1,3);
			switch ( roll )
			{
				case 1:
					scenario.say(self, convo, "a_no_negotiate");
					npcEndConversation (speaker);

					obj_id target = poi.findObject(scenario.MEDIATOR);
					if ( (target == null) || (target == obj_id.NULL_ID) )
					{
					}
					else
					{
						groupAttack(self, target);	//attack the mediator!
					}
					break;

				default:
					scenario.say(self, convo, "a_maybe");
					npcEndConversation (speaker);
					setObjVar(self, VAR_RESET_TIMER, true);
					break;
			}

			scenario.setPlayerProgress(speaker, 6);
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}


/***** FUNCTIONS *******************************************************/
void groupAttack(obj_id self, obj_id target)
{
	startCombat(self, target);

	obj_id m = poi.findObject(scenario.MEDIATOR);
	if ( (m == null) || (m == obj_id.NULL_ID) )
	{
		return;
	}
	else
	{
		startCombat(m, self);
	}
}

void groupFace(obj_id self, obj_id target)
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
	}
	else
	{
		obj_var_list stringList = getObjVarList(poiMaster, POI_STRING_LIST);
		if ( (stringList == null) || (stringList.getNumItems() < 1) )
		{

		}
		else
		{
			int numItems = stringList.getNumItems();
			for ( int i = 0; i < numItems; i++ )
			{
				obj_var tmp = stringList.getObjVar(i);
				string pathName = tmp.getName();
				if ( pathName.startsWith(POI_STRING_LIST + ".antagonist_") )
				{
					int idx = pathName.indexOf("antagonist_");
					string name = pathName.substring(idx);
					obj_id npc = poi.findObject(name);
					faceTo(npc, target);
				}
			}
		}
	}

	faceTo(self, target);
}

/***** MESSAGEHANDLER *******************************************************/
messageHandler handleAddTargetLocation()
{
	LOG("poiDeliverance", "handleAddTargetLocation: entered...");

	if ( params == null )
	{
		return SCRIPT_CONTINUE;
	}

	string locName = params.getString(scenario.DICT_LOC_NAME);
	location pathLoc = params.getLocation(scenario.DICT_LOCATION);
	float r = params.getFloat(scenario.DICT_RADIUS);

	addLocationTarget(locName, pathLoc, r);
	return SCRIPT_CONTINUE;
}

messageHandler handleTimer()
{
	if ( ai_lib.isInCombat(self) )
	{
		messageTo(self, HANDLER_TIMER, null, TIME_WAIT, false);
		return SCRIPT_CONTINUE;
	}

	LOG("poiDeliverance", "ANTAGONIST: handleTimer: entered...");

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "handleTimer: unknown poi base object!");
		return SCRIPT_CONTINUE;
	}

	if ( scenario.isComplete(poiMaster) )
	{
		return SCRIPT_CONTINUE;
	}

	if ( hasObjVar(self, VAR_RESET_TIMER) )
	{
		boolean resetTimer = getBooleanObjVar(self, VAR_RESET_TIMER);
		if ( resetTimer )
		{
			messageTo(self, HANDLER_TIMER, null, TIME_WAIT, false);
			removeObjVar(self, VAR_RESET_TIMER);
			return SCRIPT_CONTINUE;
		}
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		LOG("poiDeliverance", "handleTimer: unknown poi base object!");
		return SCRIPT_CONTINUE;
	}

	string[] dead = getStringArrayObjVar(poiMaster, scenario.VAR_SCENARIO_DEAD);
	if ( (dead == null) || (dead.length == 0) )
	{
		//not dead!
	}
	else
	{
		int idx = utils.getElementPositionInArray(dead, scenario.MEDIATOR);
		if ( idx < 0 )
		{
			//not dead!
		}
		else
		{
			messageTo(poiMaster, HANDLER_MEDIATOR_DEAD, null, 30, false);
			return SCRIPT_CONTINUE;
		}
	}

	scenario.say(self, convo, "a_tired_waiting");

	obj_id target = poi.findObject(scenario.MEDIATOR);
	if ( (target == null) || (target == obj_id.NULL_ID) )
	{

	}
	else
	{
		groupAttack(self, target);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleMyDeath()
{
	LOG("poiDeliverance","handleMyDeath: entered...");

	obj_id[] killers = getObjIdArrayObjVar(self, scenario.VAR_PRIMARY_KILLERS);
	if ( (killers == null) || (killers.length == 0) )
	{
		LOG("poiDeliverance", "handleMyDeath: no credit to grant!");
		return SCRIPT_CONTINUE;
	}
	else
	{
		for ( int i = 0; i < killers.length; i++ )
		{
			obj_id tmp = killers[i];
			if ( (tmp == null) || (tmp == obj_id.NULL_ID) )
			{

			}
			else
			{
				if ( group.isGroupObject(tmp) )
				{
					obj_id[] members = getGroupMemberIds(tmp);
					if ( (members == null) || (members.length == 0) )
					{

					}
					else
					{
						for ( int n = 0; n < members.length; n++ )
						{
							LOG("poiDeliverance","granting poi credit to (" + members[n] + ") " + getName(members[n]));
							poiGrantCredit(members[n]);
						}
					}
				}
				else
				{
					LOG("poiDeliverance","granting poi credit to (" + tmp + ") " + getName(tmp));
					poiGrantCredit(tmp);
				}
			}
		}
	}

	LOG("poiDeliverance","handleMyDeath: exiting...");
	return SCRIPT_CONTINUE;
}

messageHandler handleMediatorDead()
{
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "handleTimer: unknown poi base object!");
		return SCRIPT_CONTINUE;
	}
	else
	{
		messageTo(poiMaster, scenario.HANDLER_CLEANUP_SCENARIO, null, TIME_WAIT, false);
	}

	location loc = utils.getRandomLocationInRing(getLocation(self), 96f, 128f);
	pathTo(self, loc);
	return SCRIPT_CONTINUE;
}

messageHandler handleMGreetA()
{
	LOG("poiDeliverance", "handleMGreetA: entered...");

	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		LOG("poiDeliverance", "handleMGreetA: unknown poi base object!");
		return SCRIPT_CONTINUE;
	}

	string convo = getStringObjVar(poiMaster, scenario.VAR_SCENARIO_CONVO);
	if ( convo.equals("") )
	{
		LOG("poiDeliverance", "handleMGreetA: unknown convo file!");
		return SCRIPT_CONTINUE;
	}

	obj_id target = poi.findObject(scenario.MEDIATOR);
	if ( (target == null) || (target == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		scenario.say(self, convo, "a_respond_m_1");
		messageTo(target, "handleARespondM1", null, 2, false);
	}

	if ( ai_lib.isInCombat(target) )
	{
		messageTo(self, HANDLER_TIMER, null, 1, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleFaceCall()
{
	obj_id target = params.getObjId(DICT_TARGET_ID);
	if ( (target == null) || (target == obj_id.NULL_ID) )
	{
		return SCRIPT_CONTINUE;
	}

	faceTo(self, target);
	return SCRIPT_CONTINUE;
}
