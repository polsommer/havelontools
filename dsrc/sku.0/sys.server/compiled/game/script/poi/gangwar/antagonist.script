/**
 * Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        antagonist.script
 * Description:  antagonist object script: POI = gangwar
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.npc;
include library.combat;
include library.poi;
include library.scenario;
include library.ai_lib;
include library.pclib;
include ai.ai_combat;

//-----------------------------------------------
// Inherits
//-----------------------------------------------

inherits poi.base.scenario_actor;

//------------------------------------------------
// Constants
//------------------------------------------------

const string SCRIPT_CONVERSE				= "npc.converse.npc_converse_menu";

const string LOG_NAME						= "poiGangWar Antagonist";

const string ALERT_VOLUME_NAME 				= "alertTriggerVolume";

//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnAttach()
{
	// TEST: Arm weapon.
	messageTo( self, "armWeapon", null, 2, false );

	detachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// armWeapon
//------------------------------------------------

messageHandler armWeapon()
{
	aiEquipPrimaryWeapon( self );

 	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnInitialize
//------------------------------------------------

trigger OnInitialize()
{
	attachScript( self, SCRIPT_CONVERSE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnIncapacitated
//------------------------------------------------

trigger OnIncapacitated( obj_id killer )
{
	// Get reference to base.
	obj_id poiMaster = poi.getBaseObject( self );
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
		return SCRIPT_CONTINUE;
	messageTo( poiMaster, scenario.HANDLER_ACTOR_DEATH, null, 0, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnStartNpcConversation
//------------------------------------------------

trigger OnStartNpcConversation( obj_id speaker )
{
	/*
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get base object reference.
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Get conversation.
	string convo = getStringObjVar( poiMaster, scenario.VAR_SCENARIO_CONVO );
	if ( convo.equals("") )
	{
		npcEndConversation ( speaker );
		return SCRIPT_CONTINUE;
	}

	// Look up our progress.
	int progress = scenario.getProgress( poiMaster, speaker );

	// Check to see if we are the leader.
	boolean isLeader = poi.isNpcTagged( self, scenario.ANTAGONIST + "_0" );
	*/

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnNpcConversationResponse
//------------------------------------------------

trigger OnNpcConversationResponse( string convoName, obj_id speaker, string_id response )
{
	/*
	// Ignore conversation in combat.
	if ( ai_lib.isInCombat(self) )
		return SCRIPT_CONTINUE;

	// Get reference to base.
	obj_id poiMaster = poi.getBaseObject( self );
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Get reference to conversation.
	string convo = getStringObjVar( poiMaster, scenario.VAR_SCENARIO_CONVO );
	if ( convo.equals("") )
	{
		npcEndConversation( speaker );
		return SCRIPT_CONTINUE;
	}

	// Validate our conversation.
	if ( !convoName.equals(convo) )
		return SCRIPT_CONTINUE;

	// Look up the player's progress.
	int progress = scenario.getProgress( poiMaster, speaker );

	// Check to see if we are the leader.
	boolean isLeader = poi.isNpcTagged( self, scenario.ANTAGONIST + "_0" );

	// Only the leader can chat.
	if ( !isLeader )
		return SCRIPT_CONTINUE;

	// Respond to the player's comment.
	string aId = response.getAsciiId();
	string_id[] responses = new string_id[0];

	// Zero out responses.
	npcSetConversationResponses( speaker, responses );
*/
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnTriggerVolumeEntered
//------------------------------------------------

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( hasObjVar( breacher, "gm") )
		return SCRIPT_OVERRIDE;

	if ( ai_lib.isInCombat( self ) )
		return SCRIPT_OVERRIDE;

	if ( breacher == self )
		return SCRIPT_OVERRIDE;

	if ( isIncapacitated(self) )
		return SCRIPT_OVERRIDE;

	if ( !isMob( breacher ) )
		return SCRIPT_OVERRIDE;

	if ( ai_lib.isMonster( breacher ) )
		return SCRIPT_OVERRIDE;

	if ( volumeName == ALERT_VOLUME_NAME )
	{
		// Make sure we are the right guy.
		if ( !poi.isNpcTagged( self, "antagonist_0" ) )
			return SCRIPT_OVERRIDE;

		// We can only trigger once.
		if ( hasObjVar( self, "warStarted" ) )
			return SCRIPT_CONTINUE;
		setObjVar( self, "warStarted", true );

		// Check to see if mediator leader still exists and isn't in combat.
		obj_id m = poi.findObject( "mediator_0" );
		if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
			return SCRIPT_CONTINUE;

		// Store reference to breacher.
		setObjVar( self, "breacher", breacher );

		// Begin the gang war.
		messageTo( self, "firstInsult", null, 3, false );

		return SCRIPT_OVERRIDE;
	}
	return SCRIPT_OVERRIDE;
}

//------------------------------------------------
// firstInsult
//
// Antagonist leader makes an insult.
//------------------------------------------------

messageHandler firstInsult()
{
	// Begin trading insults.
	poi.quickSay( self, "a_insult1" );

	// Prepare for response.
	messageTo( self, "firstInsultResponse", null, 7, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// firstInsultResponse
//
// Mediator leader responds.
//------------------------------------------------

messageHandler firstInsultResponse()
{
	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Respond to the insult.
	poi.quickSay( m, "m_insult1_response" );

	// Prepare for next insult.
	messageTo( self, "secondInsult", null, 7, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// secondInsult
//
// Antagonist leader makes another insult.
//------------------------------------------------

messageHandler secondInsult()
{
	// Check to see if antagonist leader still exists and isn't in combat.
	obj_id a = poi.findObject( "antagonist_0" );
	if ( (a == null) || (a == obj_id.NULL_ID) || ai_lib.isInCombat( a ) )
		return SCRIPT_CONTINUE;

	// Another insult.
	poi.quickSay( self, "a_insult2" );

	// Prepare for response.
	messageTo( self, "secondInsultResponse", null, 7, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// secondInsultResponse
//
// Mediator leader responds.
//------------------------------------------------

messageHandler secondInsultResponse()
{
	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Respond to the insult.
	poi.quickSay( m, "m_insult2_response" );

	// Prepare for last insult.
	messageTo( self, "thirdInsult", null, 7, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// thirdInsult
//
// Antagonist leader makes another insult.
//------------------------------------------------

messageHandler thirdInsult()
{
	// Check to see if antagonist leader still exists and isn't in combat.
	obj_id a = poi.findObject( "antagonist_0" );
	if ( (a == null) || (a == obj_id.NULL_ID) || ai_lib.isInCombat( a ) )
		return SCRIPT_CONTINUE;

	// Another insult.
	poi.quickSay( self, "a_insult3" );

	// Prepare for response.
	messageTo( self, "thirdInsultResponse", null, 7, false );

	// Do associated social.
	string taunts = getStringObjVar( poi.getBaseObject( self ), "TAUNTS" );
	if ( taunts.equals( "true" ) )
		messageTo( self, "thirdInsultSocial", null, 3, false );

	return SCRIPT_CONTINUE;
}

messageHandler thirdInsultSocial()
{
	// Taunt.
	queueCommand( self, ##"social", null, "taunt", COMMAND_PRIORITY_DEFAULT );

	// Have another guy laugh.
	obj_id a = poi.findObject( "antagonist_3" );
	if ( (a == null) || (a == obj_id.NULL_ID) || ai_lib.isInCombat( a ) )
		return SCRIPT_CONTINUE;
	queueCommand( a, ##"social", null, "laugh", COMMAND_PRIORITY_DEFAULT );

	// Have another guy laugh.
	a = poi.findObject( "antagonist_1" );
	if ( (a == null) || (a == obj_id.NULL_ID) || ai_lib.isInCombat( a ) )
		return SCRIPT_CONTINUE;
	queueCommand( a, ##"social", null, "cackle", COMMAND_PRIORITY_DEFAULT );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// thirdInsultResponse
//
// Mediator leader responds.
//------------------------------------------------

messageHandler thirdInsultResponse()
{
	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Respond to the insult.
	poi.quickSay( m, "m_insult3_response" );

	// Prepare for last insult.
	messageTo( self, "lastInsult", null, 7, false );

	// Do associated social.
	messageTo( self, "thirdInsultResponseSocial", null, 3, false );

	return SCRIPT_CONTINUE;
}

messageHandler thirdInsultResponseSocial()
{
	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Taunt.
	queueCommand( m, ##"social", null, "snarl", COMMAND_PRIORITY_DEFAULT );

	return SCRIPT_CONTINUE;
}
//------------------------------------------------
// lastInsult
//
// Antagonist leader declares the attack.
//------------------------------------------------

messageHandler lastInsult()
{
	// Check to see if antagonist leader still exists and isn't in combat.
	obj_id a = poi.findObject( "antagonist_0" );
	if ( (a == null) || (a == obj_id.NULL_ID) || ai_lib.isInCombat( a ) )
		return SCRIPT_CONTINUE;

	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Another insult.
	poi.quickSay( self, "a_insult4" );

	// Prepare for attack.
	messageTo( self, "startAttack", null, 2, false );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// startAttack
//------------------------------------------------

messageHandler startAttack()
{
	// Check to see if mediator leader still exists and isn't in combat.
	obj_id m = poi.findObject( "mediator_0" );
	if ( (m == null) || (m == obj_id.NULL_ID) || ai_lib.isInCombat( m ) )
		return SCRIPT_CONTINUE;

	// Get breacher attacker.
	obj_id battacker = poi.findObject( "antagonist_6" );

	// Check to see if breacher is close.
	obj_id breacher = getObjIdObjVar( self, "breacher" );
	float dist = getDistance( self, battacker );
	boolean bclose = false;
	if ( dist < 20 )
		bclose = true;

	// Get all of our side to attack.
	int last = 7;
	if ( bclose )
		last = 6;
	for ( int i=0; i<last; i++ )
	{
		obj_id enemy = poi.findObject( "mediator_" + i );
		if ( (enemy == null) || (enemy == obj_id.NULL_ID) )
			continue;

		obj_id attacker = poi.findObject( "antagonist_" + /*(4-i)*/i );
		if ( (attacker == null) || (attacker == obj_id.NULL_ID) )
			continue;

		ai_lib.addToMentalStateToward( attacker, enemy, FEAR, 50f );
		startCombat( attacker, enemy );
		ai_lib.addToMentalStateToward( enemy, attacker, FEAR, 50f );
		startCombat( enemy, attacker );
	}

	// Get base object reference.
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
		return SCRIPT_CONTINUE;

	// Hate all of the other side.
	int k = 0;
	obj_id[] mediators = scenario.getTeamMembers( poiMaster, "mediator" );
	obj_id[] antagonists = scenario.getTeamMembers( poiMaster, "antagonists" );
	if ( (mediators != null) && (antagonists != null ) )
	{
		for ( int i=0; i<mediators.length; i++ )
		{
			if ( mediators[i] == null )
				continue;
			setObjVar( mediators[i], "attackedByElse", 1 );
			for ( int j=0; j<antagonists.length; j++ )
			{
				if ( antagonists[j] == null )
					continue;
				ai_lib.addToMentalStateToward( mediators[i], antagonists[j], FEAR, 50f );
				ai_lib.addToMentalStateToward( mediators[i], antagonists[j], ANGER, 100f );
				ai_lib.addToMentalStateToward( antagonists[j], mediators[i], FEAR, 50f );
				ai_lib.addToMentalStateToward( antagonists[j], mediators[i], ANGER, 100f );
				if ( k == 0 )
					setObjVar( antagonists[i], "attackedByElse", 1 );
			}
			k++;
		}
	}

	// Attack the breacher.
	if ( bclose )
	{
		poi.quickSay( battacker, "a_whoareyou" );
		ai_lib.addToMentalStateToward( battacker, breacher, FEAR, 50f );
		startCombat( battacker, breacher );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// vocalizeEndCombat
//
// Find a new target once ours is dead.
//------------------------------------------------

messageHandler vocalizeEndCombat()
{
	// Don't do this if dead or in combat.
	if ( ai_lib.isDead( self ) || ai_lib.isInCombat( self ))
		return SCRIPT_OVERRIDE;

	// Kill players that are down.
	obj_id[] players = getPlayerCreaturesInRange(self, 80f);
	for ( int i = 0; i < players.length; i++ )
	{
		if ( isIncapacitated( players[i] ) && getPosture( players[i] ) != POSTURE_DEAD )
		{
			pclib.coupDeGrace( players[i], self );
			return SCRIPT_OVERRIDE;
		}
	}

	// Get base object reference.
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
		return SCRIPT_CONTINUE;

	// Find a new target.
	obj_id[] mediators = scenario.getTeamMembers( poiMaster, "mediator" );
	for ( int i=0; i<mediators.length; i++ )
	{
		if ( isIncapacitated( mediators[i] ) || ai_lib.isDead( mediators[i] ) )
			continue;

		startCombat( self, mediators[i] );
		return SCRIPT_CONTINUE;
	}

	// Celebrate.
	if ( getPosture( self ) == POSTURE_UPRIGHT )
	{
		string skeleton = dataTableGetString("datatables/ai/species.iff", ai_lib.aiGetSpecies( self ), "Skeleton");
		if ( skeleton == "human" )
			doAnimationAction( self, "celebrate" );
		else
			doAnimationAction( self, "vocalize" );
	}
	messageTo( self, "postCombatPathHome", null, rand(10,20), false );

	// Allow us to loiter.
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_LOITER );

	return SCRIPT_OVERRIDE;
}

//------------------------------------------------
// OnTargeted
//------------------------------------------------

trigger OnTargeted( obj_id attacker )
{
	// Only do this once ever.
	if ( hasObjVar( self, "attackedByElse" ) )
		return SCRIPT_CONTINUE;
	setObjVar( self, "attackedByElse", 1 );

	// Get base object reference.
	obj_id poiMaster = poi.getBaseObject(self);
	if ( (poiMaster == null) || (poiMaster == obj_id.NULL_ID) )
		return SCRIPT_CONTINUE;

	// Check to see if we were targetted by a non-mediator.
	obj_id[] mediators = scenario.getTeamMembers( poiMaster, "mediator" );
	for ( int i=0; i<mediators.length; i++ )
	{
		if ( mediators[i] == attacker )
			return SCRIPT_CONTINUE;
	}

	// Say something!
	poi.quickSay( self, "a_whatthehell" );

	// We were targeted by a non mediator.  Start the attack!
	messageTo( self, "startAttack", null, 0, false );

	return SCRIPT_CONTINUE;
}
