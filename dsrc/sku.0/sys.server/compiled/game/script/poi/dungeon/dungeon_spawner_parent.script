include library.factions;
include library.create;
include library.hq;
include library.utils;
const float SPAWN_DELAY = 1.0f;

trigger OnInitialize()
{
	messageTo(self, "startWaves", null, 10, false);
	return SCRIPT_CONTINUE;

}
trigger OnAttach()
{
	messageTo(self, "startWaves", null, 1, false);
	return SCRIPT_CONTINUE;

}

messageHandler startWaves()

{

	// disable the spawners
	// SCRIPTVARS
	deltadictionary dctScriptVars = self.getScriptVars();
	obj_id[] objSpawners = getDungeonSpawners(self);
	for(int intI = 0; intI<objSpawners.length; intI++)
	{		
		detachScript(objSpawners[intI], "poi.interior_spawner.interior_spawner");	
	}
	dctScriptVars.put("objSpawners", objSpawners);
	string strDataTable = getStringObjVar(self, "strDataTable");
	strDataTable = "datatables/dungeon/"+strDataTable+".iff";
	
	LOG("dungeon", "strDataTable is "+strDataTable);
	dctScriptVars.put("intWave", 1);
	
	dictionary dctInfo = dataTableGetRow(strDataTable, 0);
	
	string strCompletionStringId = dctInfo.getString("strCompletionStringId");
	setObjVar(self, "strCompletionStringId", strCompletionStringId);
	int intMinWaveDelay =dctInfo.getInt("intMinWaveDelay");
	dctScriptVars.put("intMinWaveDelay", intMinWaveDelay);	
	
	int intMaxWaveDelay = dctInfo.getInt("intMaxWaveDelay"); 
	dctScriptVars.put("intMaxWaveDelay", intMaxWaveDelay);
	
	int intMinRecycleTime = dctInfo.getInt("intMinRecycleTime");
	dctScriptVars.put("intMinRecycleTime", intMinRecycleTime);
	
	
	int intMaxRecycleTime = dctInfo.getInt("intMaxRecycleTime");
	dctScriptVars.put("intMaxRecycleTime", intMaxRecycleTime);
	
	int intNumWaves = dctInfo.getInt("intNumWaves");
	dctScriptVars.put("intNumWaves", intNumWaves);	
	
	dctScriptVars.put( "strDataTable", strDataTable);	
	dctScriptVars.put("intIndex", 0);
	messageTo(self, "spawnWave", null, 1, false);

	return SCRIPT_CONTINUE;
	


}

messageHandler spawnWave()
{
	
	deltadictionary dctScriptVars = self.getScriptVars();
	int intWave = dctScriptVars.getInt("intWave"); // which wave
	int intIndex = dctScriptVars.getInt("intIndex");	
	
	string strDataTable = dctScriptVars.getString("strDataTable");		
	string[] strSpawns = dataTableGetStringColumnNoDefaults(strDataTable, "strWave"+intWave);	
	dctScriptVars.put("strSpawns", strSpawns);
	for(int intI = 0; intI<strSpawns.length; intI++)
	{
		LOG("dungeon", "strSpawns "+intI+" is "+strSpawns[intI]);
	
	}
	
	
	LOG("dungeon", "Wave is "+intWave+" and column name is strWave"+intWave);
	dctScriptVars.put("intWaveSize", strSpawns.length);
	LOG("dungeon", "Start intIndex is "+intIndex);
	location locSpawnLocation = getDungeonSpawnLocation(self);
	obj_id objMob = create.object(strSpawns[intIndex], locSpawnLocation);
	LOG("dungeon", "Spawning a "+strSpawns[intIndex]);
	attachScript(objMob, "poi.dungeon.dungeon_mob");	
	setObjVar(objMob, "objParent", self);
	
	intIndex = intIndex +1;
	
	LOG("dungeon", "spawns length is "+strSpawns.length);
	
	dctScriptVars.put("intIndex", intIndex);
	if(intIndex<strSpawns.length)
	{
		dctScriptVars.put("intIndex", intIndex);
		messageTo(self, "continueSpawns", null, SPAWN_DELAY, false);			
	}	
	
	return SCRIPT_CONTINUE;

}
messageHandler continueSpawns()
{

	
	deltadictionary dctScriptVars = self.getScriptVars();
	int intIndex = dctScriptVars.getInt("intIndex");	
	LOG("dungeon", "intIndex in continue spawns is  "+intIndex);
	
	string[] strSpawns = dctScriptVars.getStringArray("strSpawns");
	if ( strSpawns == null || strSpawns.length == 0 )
		return SCRIPT_CONTINUE;
	
	location locSpawnLocation = getDungeonSpawnLocation(self);
	if ( locSpawnLocation == null )
	{
		obj_id objMob = create.object(strSpawns[intIndex], locSpawnLocation);
		if ( isIdValid(objMob) )
		{
			attachScript(objMob, "poi.dungeon.dungeon_mob");	
			setObjVar(objMob, "objParent", self);
			LOG("dungeon", "continue spawn is spawnign a "+strSpawns[intIndex]);
			intIndex = intIndex +1;	
			dctScriptVars.put("intIndex", intIndex);

			LOG("dungeon", "intIndex is now "+intIndex+" and length is "+strSpawns.length);
			if(intIndex<strSpawns.length)
			{		
				messageTo(self, "continueSpawns", null, SPAWN_DELAY, false);			
			}	
		}
	}
	
	return SCRIPT_CONTINUE;

}

location getDungeonSpawnLocation(obj_id objParent)
{
	if ( !isIdValid(objParent) )
		return null;
		
	deltadictionary dctScriptVars = objParent.getScriptVars();
	
	obj_id[] objSpawners = dctScriptVars.getObjIdArray("objSpawners");
	if ( objSpawners == null || objSpawners.length == 0 )
		return null;
		
	location locSpawnLocation = getLocation(objSpawners[rand(0, objSpawners.length-1)]);
	if (locSpawnLocation == null)
		return null;

	locSpawnLocation.x = locSpawnLocation.x + rand(-1, 1);
	locSpawnLocation.z = locSpawnLocation.z + rand(-1, 1);
	return locSpawnLocation;


}

messageHandler elementDestroyed()
{
	deltadictionary dctScriptVars = self.getScriptVars();	
	int intWaveSize = dctScriptVars.getInt("intWaveSize");
	int intNumKilled = dctScriptVars.getInt("intNumKilled");
	LOG("dungeon", "ELEMENT DESTROUED");
	LOG("dungeon", "intWaveSize is "+intWaveSize);
	
	intNumKilled = intNumKilled +1;
	LOG("dungeon", "intKilled is "+intNumKilled);
	if(intNumKilled>=intWaveSize)
	{
		resetWave(self);
			
	}
	else
	{
		dctScriptVars.put("intNumKilled", intNumKilled);
	}
	return SCRIPT_CONTINUE;
}

void resetWave(obj_id objParent)
{
	deltadictionary dctScriptVars = objParent.getScriptVars();
	
	dctScriptVars.put("intIndex", 0);
	dctScriptVars.put("intNumKilled", 0);
	
	int intNumWaves = dctScriptVars.getInt("intNumWaves");
	
	int intWave = dctScriptVars.getInt("intWave");

	
	intWave = intWave+1;
	LOG("dungeon", "Intwave is "+intWave+" and intNumWaves is "+intNumWaves);
	if(intWave>intNumWaves)
	{
	
		
		int intMinRecycleTime = dctScriptVars.getInt("intMinRecycleTime");	
		int intMaxRecycleTime = dctScriptVars.getInt("intMaxRecycleTime");
		// long recycle and shut down
		dctScriptVars.put("intWave", 1);
		messageTo(objParent, "spawnWave", null, rand(intMinRecycleTime, intMaxRecycleTime), false);	
		
		string strCompletionStringId = getStringObjVar(objParent, "strCompletionStringId");
		if((strCompletionStringId!=null)&&(strCompletionStringId!=""))
		{
			string_id strSpam = utils.unpackString(strCompletionStringId);
			obj_id[] objPlayers = getAllPlayers(getLocation(objParent), 150);
			
			if((objPlayers!=null)&&(objPlayers.length!=0))
			{
				for(int intI = 0; intI<objPlayers.length; intI++)
				{
					sendSystemMessage(objPlayers[intI], strSpam);
				}
				
			}
			
			
		
		
		}
		
		
	
	}
	else
	{
		int intMinWaveDelay =dctScriptVars.getInt("intMinWaveDelay");	
		int intMaxWaveDelay = dctScriptVars.getInt("intMaxWaveDelay"); 
	
		dctScriptVars.put("intWave", intWave);
		// do another wave
		messageTo(objParent, "spawnWave", null, rand(intMinWaveDelay, intMaxWaveDelay), false);	
		
	}
	
	


}


obj_id[] getDungeonSpawners(obj_id objParent)
{
	resizeable obj_id[] objSpawners = new obj_id[0];
	obj_id[] objObjects = getAllObjectsWithObjVar(getLocation(objParent), 250, "type");
	
	for(int intI = 0; intI<objObjects.length; intI++)
	{
		
		obj_id[] objContents = getContents(objObjects[intI]);
		
		if(objContents!=null)
		{
			
			for(int intM = 0; intM<objContents.length; intM++)
			{
				
				if(hasObjVar(objContents[intM], "type"))
				{
					objSpawners = utils.addElement(objSpawners, objContents[intM]);
				
				}
			
			}		
		}
		else
		{		
			objSpawners = utils.addElement(objSpawners, objObjects[intI]);
		}			
	}
	return objSpawners;
	

}
