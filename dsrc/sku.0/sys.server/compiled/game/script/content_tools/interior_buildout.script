include library.utils;
include library.space_transition;
include library.prose;
include library.space_crafting;
include library.space_utils;
include library.space_combat;



trigger OnInitialize()
{
	dictionary dctParams = new dictionary();
	requestPreloadCompleteTrigger(self);

	return SCRIPT_CONTINUE;
}

trigger OnPreloadComplete()
{
	string strDataTable = "";
	if(hasObjVar(self, "strBuildout"))
	{
		strDataTable = "datatables/interior_buildouts/"+getStringObjVar(self, "strBuildout")+".iff";
	}
	else
	{
		setName(self, "FAILED TO BUILDOUT");
		return SCRIPT_CONTINUE;
	}
	
	
	
	if(dataTableOpen(strDataTable))
	{
		//LOG("space", "Openeed table of "+strDataTable);
		string[] strTemplates = dataTableGetStringColumn(strDataTable, "strTemplate");
		float[] fltJX = dataTableGetFloatColumn(strDataTable, "fltJX");
		float[] fltJY = dataTableGetFloatColumn(strDataTable, "fltJY");
		float[] fltJZ = dataTableGetFloatColumn(strDataTable, "fltJZ");
		float[] fltKX = dataTableGetFloatColumn(strDataTable, "fltKX");
		float[] fltKY = dataTableGetFloatColumn(strDataTable, "fltKY");
		float[] fltKZ = dataTableGetFloatColumn(strDataTable, "fltKZ");
		float[] fltPX = dataTableGetFloatColumn(strDataTable, "fltPX");
		float[] fltPY = dataTableGetFloatColumn(strDataTable, "fltPY");
		float[] fltPZ = dataTableGetFloatColumn(strDataTable, "fltPZ");
		string[] strCellName =dataTableGetStringColumn(strDataTable, "strCellName");
		string[] strObjVars = dataTableGetStringColumn(strDataTable, "strObjVars");
		string[] strScripts = dataTableGetStringColumn(strDataTable, "strScripts");

		string[] strLocationList = dataTableGetStringColumn(strDataTable, "strLocationList");
		int[] intNoCreate = dataTableGetIntColumn(strDataTable, "intNoCreate");
		for(int intI = 0; intI< strTemplates.length; intI++)
		{

			vector vctJ = new vector(fltJX[intI], fltJY[intI], fltJZ[intI]);
			vector vctK = new vector(fltKX[intI], fltKY[intI], fltKZ[intI]);
			vector vctP = new vector(fltPX[intI], fltPY[intI], fltPZ[intI]);
			transform tr= new transform(vctJ.cross(vctK), vctJ, vctK, vctP);
			obj_id objCell = getCellId(self, strCellName[intI]);
			
			if(intNoCreate[intI]>0)
			{
				
				if(strLocationList[intI]!="")
				{
					resizeable transform[] tranList= utils.getResizeableTransformArrayScriptVar(self, strLocationList[intI]);
					resizeable obj_id[] objCells = utils.getResizeableObjIdArrayScriptVar(self, strLocationList[intI]+"Cells");
					

					if((tranList==null)||(tranList.length==0))
					{

						
						resizeable transform[] tranTestList= new transform[0];
						resizeable obj_id[]  objTestCells = new obj_id[0];

						tranTestList= utils.addElement(tranTestList, tr);
						objTestCells = utils.addElement(objTestCells, objCell);

						utils.setScriptVar(self, strLocationList[intI], tranTestList);
						utils.setScriptVar(self, strLocationList[intI]+"Cells", objTestCells);
					}
					else
					{
						
						objCells = utils.addElement(objCells, objCell);
						tranList = utils.addElement(tranList, tr);
						utils.setScriptVar(self, strLocationList[intI], tranList);
						utils.setScriptVar(self, strLocationList[intI]+"Cells", objCells);
					}
				}
				if(!utils.checkConfigFlag("ScriptFlags","liveSpaceServer"))
				{
					obj_id objTest = createObject(strTemplates[intI], tr, objCell);
					if(strObjVars[intI]!="")
					{
						setPackedObjvars(objTest, strObjVars[intI]);
					}


					if(strScripts[intI]!="")
					{
						string[] strScriptArray = split(strScripts[intI], ',');
						for(int intJ = 0; intJ<strScriptArray.length; intJ++)
						{
							string script = strScriptArray[intJ];
							if ( script.indexOf( "script." ) > -1 )
							{
								script = script.substring( 7 );
							}
							if ( !hasScript( objTest, script ) )
								attachScript( objTest, script );
						}
					}
					attachScript(objTest, "space.ship.ship_interior_autocleanup"); // for cleanup later
				}
			}
			else
			{
				obj_id objTest = createObject(strTemplates[intI], tr, objCell);
				if(strObjVars[intI]!="")
				{
					setPackedObjvars(objTest, strObjVars[intI]);
				}

				if(strScripts[intI]!="")
				{
					string[] strScriptArray = split(strScripts[intI], ',');
					for(int intJ = 0; intJ<strScriptArray.length; intJ++)
					{
						string script = strScriptArray[intJ];
						if ( script.indexOf( "script." ) > -1 )
						{
							script = script.substring( 7 );
						}
						if ( !hasScript( objTest, script ) )
							attachScript( objTest, script );
					}
				}

			}

		}

	}
	return SCRIPT_CONTINUE;
}
