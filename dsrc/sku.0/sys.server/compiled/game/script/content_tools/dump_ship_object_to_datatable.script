// Ripping off the functionality of a space content tool for use in dumping content of a ship interior to a datatable.

include library.space_create;
include library.npe;
include library.sequencer;
include library.create;
include library.locations;
include library.space_transition;
include library.ship_ai;
include library.space_battlefield;
include library.space_crafting;
include library.player_structure;
include library.space_content;
include library.objvar_mangle;
include library.space_quest;
include library.sui;
include library.datatable;
include library.utils;
include library.hue;
include library.space_utils;


trigger OnSpeaking(string strText)
{
	if(!isGod(self))
		return SCRIPT_CONTINUE;


	string[] strCommands = split(strText, ' ' );
	
	if(strCommands[0] =="dumpShipContents")
	{

		location locTest = getLocation(self);
		obj_id objCell = locTest.cell;

		if(!isIdValid(objCell))
		{
			sendSystemMessageTestingOnly(self, "DONT USE THIS IF YOU'RE NOT IN A BUILDING!");
			return SCRIPT_CONTINUE;
		}
		obj_id objBuilding = getContainedBy(objCell);
		if(!isIdValid(objBuilding))
		{
			sendSystemMessageTestingOnly(self, "You are not in a building. Don't use this when not in a building");
			return SCRIPT_CONTINUE;
		}
//		string strBuildoutName = "";

//		if(strCommands.length>1)
//		{
//			strBuildoutName= strCommands[1];
//		}
//		else
//		{
//			if(hasObjVar(objBuilding, "strBuildout"))
//			{
//				strBuildoutName = getStringObjVar(objBuilding, "strBuildout");
//			}
//			else
//			{
//				sendSystemMessageTestingOnly(self, "Syntax is dumpBuildout <type> or set the strBuildout objvar");
//				return SCRIPT_CONTINUE;
//			}
//		}
//		sendSystemMessageTestingOnly(self, "for objbuilding "+objBuilding+" objvatr is "+strBuildoutName);

		string strArea = locTest.area;
		string strDataTable = "";
		strDataTable = "datatables/ship_interiors/shipObjectsTemp"+getGameTime()+".tab";
		LOG("space", "table name is "+strDataTable);

		string[] strHeaderTypes = { "s","f","f","f","f","f","f","f","f","f", "p", "s", "s", "i", "s"};
		string[] strHeaders = {"strTemplate","fltJX","fltJY","fltJZ","fltKX","fltKY","fltKZ","fltPX","fltPY","fltPZ", "strObjVars", "strScripts", "strCellName", "intNoCreate", "strLocationList"};

		boolean boolTest = datatable.createDataTable(strDataTable, strHeaders,strHeaderTypes);

		if(!boolTest)
		{
			sendSystemMessageTestingOnly(self, "No datatable made");
			return SCRIPT_CONTINUE;

		}

		obj_id[] objObjects = getBuildingContents(objBuilding);

		sendSystemMessageTestingOnly(self, "dumping contents of "+objBuilding);
		for(int intI = 0; intI<objObjects.length; intI++)
		{

			if(isDumpable(objObjects[intI]))
			{
				dictionary dctRow = new dictionary();

				int intNoCreate = 0;


				locTest = getLocation(objObjects[intI]);
				string strTemplate = getTemplateName(objObjects[intI]);
				float fltX = locTest.x;
				float fltY = locTest.y;
				float fltZ = locTest.z;
				string strCellName = space_utils.getCellName(objBuilding, locTest.cell);
				if(hasObjVar(objObjects[intI], "intNoCreate"))
				{
					intNoCreate = 1;
				}
				string strLocationList = "";
				if(hasObjVar(objObjects[intI], "strLocationList"))
				{
					strLocationList = getStringObjVar(objObjects[intI], "strLocationList");
				}
				dctRow.put("strLocationList", strLocationList);
				dctRow.put("intNoCreate", intNoCreate);

				transform vctTest = getTransform_o2p(objObjects[intI]);
				vector vctJ = vctTest.getLocalFrameJ_p();
				vector vctK = vctTest.getLocalFrameK_p();
				vector vctP = vctTest.getPosition_p();


				dctRow.put("fltJX", vctJ.x);
				dctRow.put("fltJY", vctJ.y);
				dctRow.put("fltJZ", vctJ.z);
				dctRow.put("fltKX", vctK.x);
				dctRow.put("fltKY", vctK.y);
				dctRow.put("fltKZ", vctK.z);
				dctRow.put("fltPX", vctP.x);
				dctRow.put("fltPY", vctP.y);
				dctRow.put("fltPZ", vctP.z);

				dctRow.put("strCellName", strCellName);
				dctRow.put("strTemplate", strTemplate);

				string strObjVars = getPackedObjvars(objObjects[intI]);
				dctRow.put("strObjVars", strObjVars);
				string strScripts = utils.getPackedScripts(objObjects[intI]);
				dctRow.put("strScripts", strScripts);
				//dataTableAddRow(strDataTable, dctRow);
				datatable.serverDataTableAddRow(strDataTable,dctRow);
			}
		}
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

boolean isDumpable(obj_id objObject)
{
	if(isPlayer(objObject))
	{
		return false;
	}

//	if (player_structure.isBuilding( objObject ) || player_structure.isInstallation( objObject ) )
//		return true;

//	if(space_utils.isPlayerControlledShip(objObject))
//	{
//		return false;
//	}

	string strName = getTemplateName(objObject);
	int intIndex = strName.indexOf("object/cell");

	if(intIndex>-1)
	{
		return false;

	}

	if(hasObjVar(objObject,"intNoDump"))
	{
		return false;
	}

	// is it in a building
//	location locTest = getLocation(objObject);
//	if(!boolDumpCells)
//	{
//		if(isIdValid(locTest.cell))
//		{
//			return false;
//		}
//	}

	if(hasScript(objObject, "systems.spawning.spawned_tracker"))
	{
		return false;
	}
	return true;
}

obj_id[] getBuildingContents(obj_id objObject)
{
	resizeable obj_id[] objContents = new obj_id[0];
	obj_id[] objCells = getContents(objObject);

	for(int intI = 0; intI< objCells.length; intI++)
	{
		obj_id[] objTestContents  = getContents(objCells[intI]);
		if((objTestContents!=null)&&(objTestContents.length>0))
		{
			for(int intJ = 0; intJ < objTestContents.length; intJ++)
			{
				objContents = utils.addElement(objContents, objTestContents[intJ]);
			}
		}
	}
	return objContents;
}