
include library.ai_lib;
include library.beast_lib;
include library.bio_engineer;
include library.create;
include library.hue;
include library.incubator;
include library.pet_lib;
include library.sui;
include library.utils;


const string MENU_FILE = "pet/pet_menu";
const string_id SID_CONVERT_PET_ITEM_TO_DNA		= new string_id("incubator", "convert_pet_item_to_dna");
const string_id SID_CONVERT_PROMPT			= new string_id("incubator", "convert_pet_item_prompt");
const string_id SID_CONVERT_TITLE			= new string_id("incubator", "convert_pet_item_title");
const string_id SID_REPORT_PET_CONVERSION_FAIL		= new string_id("incubator", "report_pet_conversion_fail");


trigger OnInitialize()
{
	float scaleAdjust = 1;
	if (hasObjVar(self, "creature_attribs.scale"))
	{
		scaleAdjust = getFloatObjVar(self, "creature_attribs.scale");
	}

	float baseScale = getScale( self );
	float realScale = baseScale * scaleAdjust;
	setScale( self, realScale );

	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(utils.isNestedWithinAPlayer(self))
	{
		if(beast_lib.isBeastMaster(player))
			int management_root = mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_CONVERT_PET_ITEM_TO_DNA);
			
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.SERVER_MENU1 && utils.isNestedWithinAPlayer(self))
	{
		if(beast_lib.isBeastMaster(player))
		{
			int pid = sui.msgbox(self, player, "@" + SID_CONVERT_PROMPT, sui.YES_NO, "@" + SID_CONVERT_TITLE, "handlerSuiConvertPetItemToDna");
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

//sui for converting pet item into a DNA core
messageHandler handlerSuiConvertPetItemToDna ()
{
	//chec params
	if(params == null || params.isEmpty())
	{
		return SCRIPT_CONTINUE;
	}
	//get button pressed
	int bp = sui.getIntButtonPressed(params);
	
	//if they pressed cancel then we bail out and do nothing
	if ( bp == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	//get players id
	obj_id player = sui.getPlayerId(params);
	
	//set self to petItem id
	obj_id petItem = self;
	
	//check again if the player is beast master
	if(beast_lib.isBeastMaster(player))
	{
		//attempt to convert the pet item into a dna core
		if(incubator.convertDeedIntoPetItem(player, self))
		{
			if(incubator.convertPetItemToDna(player, petItem))
			{
				//tell cs we were a success
				CustomerServiceLog("BeastPetConversion: ", "petItem (" + petItem + ")"+ " was converted into a dna object, for player " + getFirstName(player) + "(" + player + "). PetItem(" + petItem + ") will now be destroyed.");
				destroyObject(petItem);
				return SCRIPT_CONTINUE;
			}
			else
			{
				//tell cs we failed
				CustomerServiceLog("BeastPetConversion: ", "petItem (" + petItem + ")"+ " was NOT converted into a dna object, for player " + getFirstName(player) + "(" + player + "). PetItem(" + petItem + ") will NOT be destroyed.");
				//tell the player we failed
				sendSystemMessage(player, SID_REPORT_PET_CONVERSION_FAIL);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

