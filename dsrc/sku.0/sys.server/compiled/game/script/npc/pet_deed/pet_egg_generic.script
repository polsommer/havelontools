include library.callable;
include library.groundquests;
include library.money;
include library.create;
include library.pet_lib;
include library.utils;

const string STF						= "pet/pet_menu";
const string_id HATCH_EGG				= new string_id(STF, "hatch_egg");
const string_id EGG_HATCHED				= new string_id(STF, "egg_hatched");

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int menu = mi.addRootMenu( menu_info_types.ITEM_USE, HATCH_EGG );
		return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect( obj_id player, int item )
{
	if ( item == menu_info_types.ITEM_USE )
	{
		string creatureName = getStringObjVar(self, "creature_attribs.type");
		string templateFromCreaturesTab = utils.dataTableGetString(create.CREATURE_TABLE, creatureName, "template" );
		//null catch
		if(templateFromCreaturesTab == null || templateFromCreaturesTab == "")
		{
			LOG("create", "CREATE PET EGG:Returned a NULL from Creatures Tab looking for " +creatureName);
			return SCRIPT_CONTINUE;
		}
		
		string controlTemplate = "object/intangible/pet/" + templateFromCreaturesTab;		
		
		obj_id datapad = utils.getPlayerDatapad( player );
		obj_id petControlDevice = createObject( controlTemplate, datapad, "");
		string_id nameId = new string_id(create.CREATURE_NAME_FILE, creatureName);
		int petType = pet_lib.PET_TYPE_NON_AGGRO;
		
		setObjVar( petControlDevice, "pet.creatureName", creatureName);
		attachScript( petControlDevice, "ai.pet_control_device" );
		setName( petControlDevice, nameId );
		setObjVar( petControlDevice, "ai.pet.type", petType );
		setObjVar( petControlDevice, "ai.petAdvance.growthStage", 1);
		
		//this doesnt set levels but sets the amount of abilities it gets, to make a variable level create you need a new creature tab entry
		int level = create.calcCreatureLevel(creatureName);
		if (hasObjVar(self, "creature_attribs.level"))
		{
			level = getIntObjVar(self, "creature_attribs.level");
		}	
		
		setObjVar(petControlDevice, "ai.petAbility.toBeEarned", pet_lib.getMaxAbilitySlots(level));
		setObjVar(petControlDevice, "ai.petAbility.available", 0);

		sendSystemMessage(player, EGG_HATCHED);
		
		//make the pet
		pet_lib.createPetFromData(petControlDevice);
				
		obj_id pet = callable.getCDCallable(petControlDevice);
		if(!exists(pet) || !isIdValid(pet))
		{
			return SCRIPT_CONTINUE;
		}
		// add basic commands to pet
		dictionary petCommandList = utils.getDictionaryScriptVar(pet, "ai.pet.commandList");
		
		if(petCommandList == null)
		{
			petCommandList = new dictionary();
		}
		
		setObjVar( petControlDevice, "ai.pet.command."+pet_lib.COMMAND_FOLLOW, "follow");
		petCommandList.put("follow", pet_lib.COMMAND_FOLLOW);
		
		setObjVar( petControlDevice, "ai.pet.command."+pet_lib.COMMAND_STAY, "stay");
		petCommandList.put("stay", pet_lib.COMMAND_STAY);
		
		setObjVar( petControlDevice, "ai.pet.command."+pet_lib.COMMAND_ATTACK, "attack");
		petCommandList.put("attack", pet_lib.COMMAND_ATTACK);
		
		setObjVar( petControlDevice, "ai.pet.command."+pet_lib.COMMAND_TRANSFER, "transfer");
		petCommandList.put("transfer", pet_lib.COMMAND_TRANSFER);
		
		utils.setScriptVar(pet, "ai.pet.commandList", petCommandList);

		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}