include library.utils;
include library.sui;
include library.trial;
include library.static_item;
include library.chat;
include library.factions;

/*
* We want to:
* Count the tokens in the players inventory and heroic box
* Verify that we have more tokens than the cost of the selected item
* Decrement the number of tokens and give the item to the player
*/

messageHandler buySpaceDutyItem()
{
	if(params == null)
	{
		return SCRIPT_CONTINUE;
	}
	obj_id player = params.getObjId("player");
	int level = params.getInt("level");
	string component = params.getString("component");
	processItemPurchase(player, level, component);
	
	return SCRIPT_CONTINUE;

}



void processItemPurchase(obj_id player, int level, string component)
{
	
	if(level < 1 || level > 10 || !isIdValid(player) || !exists(player) || component == null || component.length() <= 0)
	{
		return;
	}
	int price = trial.getSpaceDutyTokenPrice(level);

	obj_id inventory = utils.getInventoryContainer(player);
	string table = "datatables/item/vendor/space_duty/"+component+".iff";
	
	string col = "level"+level;
	string[] compList = dataTableGetStringColumn(table, col);	

	if(compList == null)
	{	
		return;
	}
	
	int realLength = 0;
	for(int i = 0; i < compList.length; i++)
	{
		if(compList[i] != null && compList[i].length() > 0)
		{
	
			realLength++;
		}
	}
	


	if(price > trial.getTokenTotal(player, trial.SPACE_DUTY_TOKEN))
	{
		sendSystemMessage(player, "Not enough tokens detected.", null);
		return;
	
	}	
	
	
	int comp = rand(0, realLength -1);
	obj_id item = createObject(compList[comp], inventory, "");
	if(!isIdValid(item))
	{
		return;
	}
	//If the payment fails, destroy the item
	if(!trial.purchaseTokenItem(player, price, trial.SPACE_DUTY_TOKEN))
	{
		destroyObject(item);
	}
	
}



