/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        shuttle extract
 * Description:  Attaches to the shuttle extract order object to handle the
 *		 the transport process.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.factions;
include library.prose;
include library.utils;

/***** CONSTANTS *******************************************************/
const string SCRIPT_PLAYER_SHUTTLE_EXTRACT	= "npc.faction_recruiter.player_shuttle_extract";

const string VAR_FACTION			= "faction_recruiter.faction";
const string VAR_EXTRACTION_LOCATION		= "faction_recruiter.extraction_location";

const string_id SID_SHUTTLE_EXTRACT		= new string_id("faction_recruiter", "order_shuttle_extract");
const string_id SID_SHUTTLE_INITIATED		= new string_id("faction_recruiter", "shuttle_initiated");
const string_id SID_SHUTTLE_INITIATED_GROUP	= new string_id("faction_recruiter", "shuttle_initiated_group");
const string_id SID_NOT_OUTSIDE			= new string_id("faction_recruiter", "not_outside");
const string_id SID_EXTRACTION_POINT		= new string_id("faction_recruiter", "shuttle_extraction_point");
const string_id SID_ALREADY_REQUEST_SHUTTLE	= new string_id("faction_recruiter", "already_request_shuttle");

const int ARRIVAL_TIME				= 60;


/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	mi.addRootMenu (menu_info_types.ITEM_USE, SID_SHUTTLE_EXTRACT);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		// Check to make certain that the player is authorized to use the order.
		int faction_id = pvpGetAlignedFaction(player);
		string faction = factions.getFactionNameByHashCode(faction_id);
		if (faction == null || pvpGetType( player ) == PVPTYPE_NEUTRAL )
			return SCRIPT_CONTINUE;

		string order_faction = getStringObjVar(self, VAR_FACTION);
		if (order_faction == null)
		{
			LOG("LOG_CHANNEL", "shuttle_extract::OnObjectMenuSelect(USE) -- " + self + "'s faction is null.");
			return SCRIPT_CONTINUE;
		}

		if (order_faction.equals(faction))
		{
			if (hasObjVar(player, VAR_EXTRACTION_LOCATION))
			{
				sendSystemMessage(self, SID_ALREADY_REQUEST_SHUTTLE);
				return SCRIPT_CONTINUE;
			}

			// Check to make sure the player is outside.
			location loc = getLocation(player);
			obj_id structure = getTopMostContainer(loc.cell);
			if (structure == null || structure == obj_id.NULL_ID)
			{
				// Orders are one use each, so destroy it now.
				destroyObject(self);

				if (!hasScript(player, SCRIPT_PLAYER_SHUTTLE_EXTRACT))
					attachScript(player, SCRIPT_PLAYER_SHUTTLE_EXTRACT);

				setObjVar(player, VAR_EXTRACTION_LOCATION, loc);

				// Set a waypoint to mark the extraction site.
				createExtractionWaypoint(player, loc);

				// Send the activation message to the player.
				prose_package pp = prose.getPackage(SID_SHUTTLE_INITIATED, ARRIVAL_TIME);
				sendSystemMessageProse(player, pp);

				// Alert group members if the player is the leader.
				obj_id group = getGroupObject(player);
				if (group != null && group != obj_id.NULL_ID)
				{
					if (player == getGroupLeaderId(group))
					{
						obj_id[] group_members = getGroupMemberIds(group);
						if (group_members == null)
						{
							LOG("LOG_CHANNEL", "shuttle_extract::OnObjectMenuSelect(Use) -- group_members is null for group " + group);
							return SCRIPT_CONTINUE;
						}

						for (int i = 0; i < group_members.length; i++)
						{
							if (group_members[i] != player)
							{
								createExtractionWaypoint(group_members[i], loc);
								pp = prose.getPackage(SID_SHUTTLE_INITIATED_GROUP, player, null, ARRIVAL_TIME);
								sendSystemMessageProse(group_members[i], pp);
							}
						}
					}
				}

				// !!! Add code for shuttle creation/movement.
				messageTo(player, "msgExtractionShuttleArrival", null, ARRIVAL_TIME, false);
			}
			else
				sendSystemMessage(player, SID_NOT_OUTSIDE);
		}
	}

	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
boolean createExtractionWaypoint(obj_id player, location loc)
{
	obj_id waypoint = createWaypointInDatapad(player, loc);
	if (!isIdValid(waypoint))
	{
		LOG("LOG_CHANNEL", "shuttle_extract::createExtractionWaypoint -- unable to create a waypoint for " + player);
		return false;
	}
	setWaypointVisible(waypoint, true);
	setWaypointActive(waypoint, true);
	setName(waypoint, SID_EXTRACTION_POINT);
	return true;
}

