/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        faction_recruiter
 * Description:  makes any npc a faction recruiter
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.faction_perk;
include library.factions;
include library.chat;
include library.gcw;
include library.prose;
include library.utils;
include library.money;
include library.sui;
include library.badge;
include library.xp;
include java.util.Vector;
include java.util.Arrays;

/***** CONSTANTS *******************************************************/



// Datatables
const string DATATABLE_ALLOWED_XP_TYPES		= "datatables/npc/faction_recruiter/allowed_xp_types.iff";

// Conversations/String ID's
const string CONVERSE_FACTION_PERKS		= "faction_perks";
const string_id SID_GREETING			= new string_id("faction_recruiter", "greeting");
const string_id SID_GREETING_PROSE		= new string_id("faction_recruiter", "greeting_prose");
const string_id SID_GREETING_MEMBER		= new string_id("faction_recruiter", "greeting_member");
const string_id SID_GREETING_HATE		= new string_id("faction_recruiter", "greeting_hate");
const string_id SID_NOT_MEMBER			= new string_id("faction_recruiter", "not_member");
const string_id SID_INVALID_RESPONSE		= new string_id("faction_recruiter", "invalid_response");
const string_id SID_JOIN_FACTION_CONFIRM	= new string_id("faction_recruiter", "join_faction_confirm");
const string_id SID_JOIN_FACTION_DENIED		= new string_id("faction_recruiter", "join_faction_denied");
const string_id SID_JOIN_FACTION_PLAYER_NO      = new string_id("faction_recruiter", "join_faction_player_no");
const string_id SID_WELCOME_TO_FACTION		= new string_id("faction_recruiter", "welcome_to_faction");
const string_id SID_SHOW_OPTIONS		= new string_id("faction_recruiter", "show_options");
const string_id SID_RESIGN_FACTION_CONFIRM	= new string_id("faction_recruiter", "resign_faction_confirm");
const string_id SID_RESIGN_FACTION_NO		= new string_id("faction_recruiter", "resign_faction_no");
const string_id SID_RESIGN_FACTION_YES		= new string_id("faction_recruiter", "resign_faction_yes");
const string_id SID_GO_DECLARED_CONFIRM		= new string_id("faction_recruiter", "go_declared_confirm");
const string_id SID_GO_COVERT_CONFIRM		= new string_id("faction_recruiter", "go_covert_confirm");
const string_id SID_GO_DECLARED_YES		= new string_id("faction_recruiter", "go_declared_yes");
const string_id SID_GO_COVERT_YES		= new string_id("faction_recruiter", "go_covert_yes");
const string_id SID_SKILL_TRAINING_SELECT	= new string_id("faction_recruiter", "skill_training_select");
const string_id SID_SHOW_ITEM_CATEGORIES	= new string_id("faction_recruiter", "show_item_categories");
const string_id SID_SHOW_ITEMS			= new string_id("faction_recruiter", "show_items");
const string_id SID_NO_ITEMS_AVAILABLE		= new string_id("faction_recruiter", "no_items_available");
const string_id SID_NOT_ENOUGH_FOR_PROMOTION    = new string_id("faction_recruiter", "not_enough_for_promotion");
const string_id SID_PROMOTION_CONFIRM	        = new string_id("faction_recruiter", "promotion_confirm");
const string_id SID_PROMOTION_MAX_RANK	        = new string_id("faction_recruiter", "promotion_max_rank");
const string_id SID_RESIGNATION_RECINDED	        = new string_id("faction_recruiter", "resignation_recinded");
const string_id SID_ENEMY_PILOT	        = new string_id("faction_recruiter", "enemy_pilot");

// Responses
const string_id	SID_JOIN_FACTION		= new string_id("faction_recruiter", "response_join_faction");
const string_id SID_CHANGE_FACTION		= new string_id("faction_recruiter", "response_change_faction");
const string_id SID_NOTHING			= new string_id("faction_recruiter", "response_nothing");
const string_id SID_YES_TO_JOIN			= new string_id("faction_recruiter", "response_yes_to_join");
const string_id SID_NO_TO_JOIN			= new string_id("faction_recruiter", "response_no_to_join");
const string_id SID_YES_TO_SEE_OPTIONS		= new string_id("faction_recruiter", "response_yes_to_see_options");
const string_id SID_NO_TO_SEE_OPTIONS		= new string_id("faction_recruiter", "response_no_to_see_options");
const string_id SID_YES_TO_RESIGN 		= new string_id("faction_recruiter", "response_yes_to_resign");
const string_id SID_NO_TO_RESIGN 		= new string_id("faction_recruiter", "response_no_to_resign");
const string_id SID_YES_TO_GO_DECLARED 		= new string_id("faction_recruiter", "response_yes_to_go_declared");
const string_id SID_NO_TO_GO_DECLARED 		= new string_id("faction_recruiter", "response_no_to_go_declared");
const string_id SID_YES_TO_GO_COVERT 		= new string_id("faction_recruiter", "response_yes_to_go_covert");
const string_id SID_NO_TO_GO_COVERT 		= new string_id("faction_recruiter", "response_no_to_go_covert");
const string_id SID_YES_TO_PROMOTION 		= new string_id("faction_recruiter", "response_yes_to_promotion");
const string_id SID_NO_TO_PROMOTION 		= new string_id("faction_recruiter", "response_no_to_promotion");
const string_id SID_PROMOTION_COMPLETE 		= new string_id("faction_recruiter", "response_promotion_complete");


// Smuggler Options
const string_id SID_SELL_SECRETS			= new string_id("faction_recruiter", "sell_secrets");
const string_id SID_NO_SECRETS[]			= { new string_id("faction_recruiter", "no_secrets_1"),
												new string_id("faction_recruiter", "no_secrets_2"),
												new string_id("faction_recruiter", "no_secrets_3") };
const string_id SID_INTERESTED_SECRETS_REB[]= { new string_id("faction_recruiter", "interested_secrets_reb_1"),
												new string_id("faction_recruiter", "interested_secrets_reb_2"),
												new string_id("faction_recruiter", "interested_secrets_reb_3") };
const string_id SID_INTERESTED_SECRETS_IMP[]= { new string_id("faction_recruiter", "interested_secrets_imp_1"),
												new string_id("faction_recruiter", "interested_secrets_imp_2"),
												new string_id("faction_recruiter", "interested_secrets_imp_3") };
const string_id SID_NEVERMIND				= new string_id("faction_recruiter", "nevermind");
const string_id SID_HERE_YOU_GO				= new string_id("faction_recruiter", "here_you_go");
const string_id SID_GET_LOST				= new string_id("faction_recruiter", "get_lost");
const string_id SID_GOOD_STUFF[]			= { new string_id("faction_recruiter", "good_stuff_1"),
												new string_id("faction_recruiter", "good_stuff_2"),
												new string_id("faction_recruiter", "good_stuff_3") };
const string_id SID_BAD_STUFF[]				= { new string_id("faction_recruiter", "bad_stuff_1"),
												new string_id("faction_recruiter", "bad_stuff_2") };
const string_id SID_BUY_FACTION				= new string_id("faction_recruiter", "buy_faction");
const string_id SID_NO_FACTION_REB				= new string_id("faction_recruiter", "no_faction_reb");
const string_id SID_NO_FACTION_IMP				= new string_id("faction_recruiter", "no_faction_imp");
const string_id SID_NO_FACTION				= new string_id("faction_recruiter", "no_faction");
const string_id SID_YES_FACTION[]			= { new string_id("faction_recruiter", "yes_faction_onek"),
												new string_id("faction_recruiter", "yes_faction_tenk") };
const string_id SID_INTERESTED_FACTION_REB	= new string_id("faction_recruiter", "interested_faction_reb");
const string_id SID_INTERESTED_FACTION_IMP	= new string_id("faction_recruiter", "interested_faction_imp");
const string_id SID_GET_LOST_FACTION		= new string_id("faction_recruiter", "get_lost_faction");
const string_id SID_TOO_MUCH_FACTION		= new string_id("faction_recruiter", "too_much_faction");
const string_id SID_CHECKING_CREDIT			= new string_id("faction_recruiter", "checking_credit");
const string_id SID_BRIBE_FAIL				= new string_id("faction_recruiter", "bribe_fail");
const string_id SID_BRIBE_SUCCESS			= new string_id("faction_recruiter", "bribe_success");


// Faction Options
const string_id SID_RESIGN_FROM_FACTION		= new string_id("faction_recruiter", "option_resign_from_faction");
const string_id SID_RESCIND_RESIGNATION		= new string_id("faction_recruiter", "option_recind_resignation");

const string_id SID_GO_DECLARED			= new string_id("faction_recruiter", "option_go_declared");
const string_id SID_GO_COVERT			= new string_id("faction_recruiter", "option_go_covert");
const string_id SID_SKILL_TRAINING		= new string_id("faction_recruiter", "option_skill_training");
const string_id SID_PURCHASE_ITEMS 		= new string_id("faction_recruiter", "option_purchase_items");
const string_id SID_PURCHASE_FURNITURE 		= new string_id("faction_recruiter", "option_purchase_furniture");
const string_id SID_PURCHASE_UNIFORMS 		= new string_id("faction_recruiter", "option_purchase_uniforms");
const string_id SID_PURCHASE_WEAPONS_ARMOR 	= new string_id("faction_recruiter", "option_purchase_weapons_armor");
const string_id SID_PURCHASE_INSTALLATION 	= new string_id("faction_recruiter", "option_purchase_installation");
const string_id SID_PURCHASE_SCHEMATICS 	= new string_id("faction_recruiter", "option_purchase_schematics");
const string_id SID_HIRELINGS 			= new string_id("faction_recruiter", "option_hirelings");
const string_id SID_FACTION_ORDERS		= new string_id("faction_recruiter", "option_faction_orders");
const string_id SID_PROMOTION			= new string_id("faction_recruiter", "option_promotion");

const string_id PROSE_REWARD			= new string_id("faction_recruiter", "prose_reward" );

const string_id SID_YOU_LACK_FACTION		= new string_id("faction_recruiter", "you_lack_faction");
const string_id SID_ALREADY_AT_CAP			= new string_id("faction_recruiter", "already_at_cap");

const string_id SID_SUI_EXPERIENCE_TRAINING_TITLE	= new string_id("faction_recruiter", "sui_experience_training_title");
const string_id SID_SUI_EXPERIENCE_TRAINING_PROMPT	= new string_id("faction_recruiter", "sui_experience_training_prompt");
const string_id SID_SUI_EXPERIENCE_TRAINING_HEADER	= new string_id("faction_recruiter", "sui_experience_training_header");

// ObjVars
const string VAR_FACTION			= "faction_recruiter.faction";
const string VAR_PROGRESS			= "faction_recruiter.progress";

const string VAR_GOING_COVERT			= "faction_recruiter.going_covert";
const string VAR_AVAILABLE_ITEMS		= "faction_recruiter.available_items";
const string VAR_GOING_OVERT_FACTION_ID = "faction_recruiter.factionId";

// System Values
// Conversation key
// 1 -> Player is given offer to join.
// 2 -> Player is not of recruiter's faction.
// 3 -> Player is of recruiter's faction. Give faction options.
// 4 -> Player to confirm decision to join faction.
// 5 -> Player just joined faction.
// 6 -> Player to confirm decision to leave faction.
// 7 -> Player to confirm decision to go declared.
// 8 -> Player to confirm decision to go covert.
// 9 -> Player asks about items to purchase.



/***** TRIGGERS ********************************************************/
trigger OnAttach()
{


	if (hasObjVar(self, VAR_FACTION))
	{

		if(!hasScript(self, "systems.gcw.gcw_data_updater"))
		{
			attachScript(self, "systems.gcw.gcw_data_updater");
		}	
		if(hasScript(self, "conversation.faction_recruiter_general"))
		{
			detachScript(self, "conversation.faction_recruiter_general");	
		}
		
				
		string faction = getStringObjVar(self, VAR_FACTION);
		
		// what's my script
		string strScript = "conversation.faction_recruiter_"+toLower(faction);
		if(!hasScript(self, strScript))
		{
			attachScript(self, strScript);			
		}
		
		int faction_id = getFactionId(faction);

		if (faction_id == 0)
		{
			LOG("LOG_CHANNEL", "faction_recruiter::OnAttach (" + self + ") -- an NPC with no faction cannot be a recruiter");
			detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
		}
		else if (faction_id != getFactionId(factions.FACTION_REBEL) && faction_id != getFactionId(factions.FACTION_IMPERIAL))
		{
			LOG("LOG_CHANNEL", "faction_recruiter::OnAttach (" + self + ") -- a faction recruiter must be either of Rebel or Imperial faction.");
			detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
		}
		else
		{
			pvpSetAlignedFaction(self, faction_id);
			pvpMakeDeclared(self);
			if(isInvulnerable(self))
			{
				if(faction_id == getFactionId(factions.FACTION_REBEL))
				{
					setObjVar(self, "item.vendor.vendor_table", "gcw_rebel_recruiter_vendor");
					attachScript(self, "npc.vendor.vendor");			
				}
				else if(faction_id == getFactionId(factions.FACTION_IMPERIAL))
				{
					setObjVar(self, "item.vendor.vendor_table", "gcw_imperial_recruiter_vendor");
					attachScript(self, "npc.vendor.vendor");			
				}
			}
		}
	}
	requestPreloadCompleteTrigger(self);
	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if(!hasScript(self, "systems.gcw.gcw_data_updater"))
	{
		attachScript(self, "systems.gcw.gcw_data_updater");
	}
	if(hasScript(self, "conversation.faction_recruiter_general"))
	{
		detachScript(self, "conversation.faction_recruiter_general");	
	}
	string faction = getStringObjVar(self, VAR_FACTION);	
	
	
	if ( (!isMob(self)) || (isPlayer(self)) )
	{
		detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
	}
	// what's my script
	string strScript = "conversation.faction_recruiter_"+toLower(faction);
	if(!hasScript(self, strScript))
	{
		attachScript(self, strScript);			
	}
		

	int rec_faction_id = pvpGetAlignedFaction(self);
	if (rec_faction_id == 0)
	{
		if (hasObjVar(self, VAR_FACTION))
		{			
			int faction_id = getFactionId(faction);

			if (faction_id == 0)
			{
				LOG("LOG_CHANNEL", "faction_recruiter::OnInitialize (" + self + ") -- an NPC with no faction cannot be a recruiter");
				detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
			}
			else if (faction_id != getFactionId(factions.FACTION_REBEL) && faction_id != getFactionId(factions.FACTION_IMPERIAL))
			{
				LOG("LOG_CHANNEL", "faction_recruiter::OnInitialize (" + self + ") -- a faction recruiter must be either of Rebel or Imperial faction.");
				detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
			}
			else
			{
				pvpSetAlignedFaction(self, faction_id);
				pvpMakeDeclared(self);
			}
		}
		else
			detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);
	}
	
	requestPreloadCompleteTrigger(self);

	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	detachScript(self, faction_perk.SCRIPT_FACTION_RECRUITER);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int mnu = mi.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data mdata = mi.getMenuItemById(mnu);
	mdata.setServerNotify(false);
	return SCRIPT_CONTINUE;
}

messageHandler payBribe()
{
	int rec_faction_id = pvpGetAlignedFaction(self);
	string rec_faction = factions.getFactionNameByHashCode(rec_faction_id);

	obj_id player = params.getObjId( money.DICT_PLAYER_ID );
	int code = params.getInt( money.DICT_CODE );
	int amt = params.getInt( money.DICT_AMOUNT );
	if ( code == money.RET_FAIL )
	{
		chat.chat( self, chat.CHAT_SAY, chat.MOOD_ANGRY, SID_BRIBE_FAIL );
	}
	else
	{
		chat.chat( self, chat.CHAT_SAY, chat.MOOD_HAPPY, SID_BRIBE_SUCCESS );

		// Grant some faction.
		if ( amt == 20000 )
		{
			factions.addFactionStanding( player, rec_faction, 250.f );
		}
		else
		{
			factions.addFactionStanding( player, rec_faction, 1250.f );
		}
	}

	obj_id topMost = getTopMostContainer(self);
	if ( isIdValid(topMost) )
	{
		int topGOT = getGameObjectType(topMost);
		if ( topGOT == GOT_building_factional )
			money.bankTo(self, topMost, amt);
	}
	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
prose_package createProsePackage(string_id sid, obj_id actor, obj_id target, string str, int number)
{
	prose_package pp = new prose_package();
	pp.stringId = sid;
	pp.actor.set(actor);   // %TU
	pp.target.set(target); // %TT
	pp.other.set(str);     // %TO
	pp.digitInteger = number; // %DI

	return pp;
}

int getFactionId(string faction)
{
	if (faction == null)
		return -1;

	int faction_num = factions.getFactionNumber(faction);
	if (faction_num == -1)
		return 0;

	int faction_id = dataTableGetInt("datatables/faction/faction.iff", faction_num, "pvpFaction");

	return faction_id;
}

string getProgressObjVarName(obj_id player)
{
	if ( !isIdValid(player) )
		return null;

	return VAR_PROGRESS + "." + player.toString();
}

string_id[] getConversationResponses(obj_id player, obj_id npc, int progress)
{
	LOG("LOG_CHANNEL", "faction_recruiter::getConversationResponses -- " + progress);

	resizeable string_id[] responses = new string_id[0];
	int pvp_type = pvpGetType(player);

	obj_id self = getSelf();
	int faction_id = pvpGetAlignedFaction(self);
	string faction = factions.getFactionNameByHashCode(faction_id);

	if ( pvpGetAlignedFaction(player) == pvpGetAlignedFaction(npc) && hasObjVar(player, factions.VAR_RESIGNING) )
	{
		responses = utils.addElement(null, SID_RESCIND_RESIGNATION);
		return responses;
	}

	if ( pvpGetType( player ) == PVPTYPE_NEUTRAL && progress == 3 )
		progress = 1;

	switch (progress)
	{
		case 1:
			// Player has no faction, or is neutral
			responses = utils.addElement(responses, SID_JOIN_FACTION);
			break;

		case 3:
			// Player is of recruiter's faction. Show member options.

			// Get a promotion
			responses = utils.addElement(responses, SID_PROMOTION);

			if (pvp_type == PVPTYPE_COVERT)
			{
				// Go Declared
				responses = utils.addElement(responses, SID_GO_DECLARED);
			}
			else if (pvp_type == PVPTYPE_DECLARED)
			{
				// Go Covert
				if (!hasObjVar(player, VAR_GOING_COVERT))
					responses = utils.addElement(responses, SID_GO_COVERT);

				// Acquire Hirelings
				responses = utils.addElement(responses, SID_HIRELINGS);

				// Purchase faction orders
				//responses = utils.addElement(responses, SID_FACTION_ORDERS);
			}

			// Buy faction items
			responses = utils.addElement(responses, SID_PURCHASE_ITEMS);

			// Train
			responses = utils.addElement(responses, SID_SKILL_TRAINING);

			// Resign
			responses = utils.addElement(responses, SID_RESIGN_FROM_FACTION);

			break;

		case 4:
			// Player to confirm decision to join faction.
			responses = utils.addElement(responses, SID_YES_TO_JOIN);
			responses = utils.addElement(responses, SID_NO_TO_JOIN);
			break;

		case 5:
			// Player just joined faction.
			responses = utils.addElement(responses, SID_YES_TO_SEE_OPTIONS);
			responses = utils.addElement(responses, SID_NO_TO_SEE_OPTIONS);
			break;

		case 6:
			// Player to confirm decision to leave faction.
			responses = utils.addElement(responses, SID_YES_TO_RESIGN);
			responses = utils.addElement(responses, SID_NO_TO_RESIGN);
			break;

		case 7:
			// Player to confirm decision to go declared.
			responses = utils.addElement(responses, SID_YES_TO_GO_DECLARED);
			responses = utils.addElement(responses, SID_NO_TO_GO_DECLARED);
			break;

		case 8:
			// Player to confirm decision to go covert.
			responses = utils.addElement(responses, SID_YES_TO_GO_COVERT);
			responses = utils.addElement(responses, SID_NO_TO_GO_COVERT);
			break;

		case 9:
			// Player asks about items to purchase.
			responses = utils.addElement(responses, SID_PURCHASE_FURNITURE);
			responses = utils.addElement(responses, SID_PURCHASE_WEAPONS_ARMOR);
			responses = utils.addElement(responses, SID_PURCHASE_SCHEMATICS);

			if (pvp_type == PVPTYPE_DECLARED)
			{
				responses = utils.addElement(responses, SID_PURCHASE_INSTALLATION);

				if ( !toLower(faction).equals("rebel") )
					responses = utils.addElement(responses, SID_PURCHASE_UNIFORMS);
			}

			break;

		case 10:
			// Player to confirm a promotion.
			responses = utils.addElement(responses, SID_YES_TO_PROMOTION);
			responses = utils.addElement(responses, SID_NO_TO_PROMOTION);
			break;

		default:
			responses = utils.addElement(responses, SID_NOTHING);
			break;
	}

	// If the player is a smuggler, they might be able to sell faction secrets.
	if ( hasSkill( player, "class_smuggler_phase3_novice" ) )
	{
		responses = utils.addElement( responses, SID_SELL_SECRETS );
	}
	if ( hasSkill( player, "class_smuggler_phase4_novice" ) )
	{
		responses = utils.addElement( responses, SID_BUY_FACTION );
	}

	return responses;
}

prose_package[] getProseConversationResponses(obj_id player, obj_id npc, string prose_string, int prose_digit, int progress)
{
	LOG("LOG_CHANNEL", "faction_recruiter::getProseConversationResponses -- " + progress);

	prose_package[] responses = new prose_package[0];

	switch(progress)
	{
		case 2:
			// Player is not of recruiter's faction.
			int faction_id = pvpGetAlignedFaction(npc);
			string faction = factions.getFactionNameByHashCode(faction_id);
			prose_package pp = prose.getPackage(SID_CHANGE_FACTION, faction);
			responses = assemblePackageArray(responses, pp);
			break;
	}

	return responses;
}

prose_package[] assemblePackageArray(prose_package[] array, prose_package element)
{
	if ( element == null )
		return new prose_package[0];

	if ( array == null )
		return assemblePackageArray(new prose_package[0], element);

	Vector vector = new Vector(Arrays.asList(array));
	vector.add(element);

	array = new prose_package[vector.size()];
	vector.toArray(array);
	return array;
}

int[] convertSecondsTime(int time)
{
	if (time < 1)
		return null;

	int mod_day = time % 86400;
	int mod_hour = mod_day % 3600;

	int days = time / 86400;
	int hours = mod_day / 3600;
	int minutes = mod_hour / 60;
	int seconds = mod_hour % 60;

	int[] converted_time = {days, hours, minutes, seconds};

	return converted_time;
}

void invalidResponse(obj_id player)
{
	if ( !isIdValid(player) )
	{
		LOG("LOG_CHANNEL", "faction_recruiter::isFactionMember -- player is null");
		return;
	}

	string_id[] responses = new string_id[0];
	npcSpeak(player, SID_INVALID_RESPONSE);
	npcSetConversationResponses(player, responses);

	return;
}

boolean displayTrainingSUI(obj_id player)
{
	if ( !isIdValid(player) )
	{
		LOG("LOG_CHANNEL", "faction_recruiter::displayTrainingSUI -- player is null");
		return false;
	}

	obj_id self = getSelf();

	if ( utils.hasScriptVar(self, player + ".training.pid") )
	{
		int oldpid = utils.getIntScriptVar(self, player + ".training.pid");
		sui.closeSUI(player, oldpid);
		utils.removeScriptVarTree(self, player+".training");
	}

	string[] xp_types = dataTableGetStringColumn(DATATABLE_ALLOWED_XP_TYPES, "xp_type");
	if ( xp_types == null || xp_types.length == 0 )
		return false;

	resizeable string[] names = new string[0];
	for ( int i = 0; i < xp_types.length; i++ )
		names = utils.addElement(names, "@exp_n:"+xp_types[i]);

	if ( names == null || names.length == 0 )
		return false;

	int pid = sui.listbox(self, player, "@faction_recruiter:select_skill_type", sui.OK_CANCEL, "@faction_recruiter:faction_training", names, "msgFactionTrainingTypeSelected");
	if ( pid > 0 )
	{
		utils.setScriptVar(self, player + ".training.pid", pid);
	}

	return true;
}

messageHandler msgFactionItemPurchaseSelected()
{
	//make sure the player is within 10 meters of the recruiter
	obj_id player = sui.getPlayerId(params);
	if(!sui.outOfRange(self , player, 10.0f, true))
		faction_perk.factionItemPurchased(params);
	return SCRIPT_CONTINUE;
}

messageHandler msgFactionItemRankSelected()
{	
	if ( (params == null) || (params.isEmpty()) )
	{
		//cleanScriptVars(player);
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	
	string scriptvar_path = "recruiter.item_rank." + player;
	string oldPidVar = scriptvar_path + ".pid";
	string ranksVar = scriptvar_path + ".ranks";

	// clean up string vars
	if ( utils.hasScriptVar(self, oldPidVar) )
	{
		utils.removeScriptVar(self, oldPidVar);
	}

	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
		
	int rankSelected = pvpGetCurrentGcwRank(player) - idx;

	int playerFactionId = pvpGetAlignedFaction(player);
	string playerGcwFaction = factions.getFactionNameByHashCode(playerFactionId);
	faction_perk.displayItemPurchaseSUI(player, rankSelected, playerGcwFaction, self);
	
	return SCRIPT_CONTINUE;
}


//------------------------------------------------
// OnGiveItem
//------------------------------------------------

trigger OnGiveItem( obj_id item, obj_id player )
{
	if ( hasScript( item, "systems.encoded_disk.base.message_assembled" ) )
	{
		string entryName = getStringObjVar( item, "scenarioName" );
		int faction_id = pvpGetAlignedFaction(self);
		string faction = toLower(factions.getFactionNameByHashCode(faction_id));
		//string faction = toLower( factions.getFaction( self ) );
		string entry = "response_" + entryName + "_" + faction;
		string_id res = new string_id( "encoded_disk/message_fragment", entry );
		string response = getString( res );
		if ( response == null || response == "" )
		{
			return SCRIPT_CONTINUE;
		}

		// Say something about it.
		chat.chat( self, chat.CHAT_SAY, chat.MOOD_DISCREET, res );

		// Put reward money in our bank.
		int amt = rand( 500, 1500 );
		dictionary outparams = new dictionary();
		outparams.put( "amt", amt );
		outparams.put( "player", player );
		transferBankCreditsFromNamedAccount( money.ACCT_NPC_LOOT, self, amt, "fromAccountPass", "xferFail", outparams );
		utils.moneyInMetric(self, money.ACCT_NPC_LOOT, amt);

		// Check for a badge gated reward.
		int badgeIndex = getIntObjVar( item, "badgeIndex" );
		string badgeName = getCollectionSlotName(badgeIndex);
		if ( (badgeIndex > 0) && (badgeName != null) && (badgeName.length() > 0) )
		{
			if ( !badge.hasBadge( player, badgeName ) )
			{
				// Check for a faction reward index.
				int factionReward = getIntObjVar( item, "factionReward" );
				if ( factionReward > 0 )
				{
					// Grant the player faction.
					factions.awardFactionStanding( player, factions.getFactionNameByHashCode(faction_id), factionReward );
				}

				// Reward the badge.
				badge.grantBadge( player, badgeName );

				// Log this event.
				logBalance( "eventReward;" + faction + ";" + player + ";" + entryName );
			}
		}

		return SCRIPT_OVERRIDE;
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// xferFail
//------------------------------------------------

messageHandler xferFail()
{
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// fromAccountPass
//------------------------------------------------

messageHandler fromAccountPass()
{
	// Withdraw the cash.
	int amt = params.getInt( "amt" );
	if ( amt > 0 )
		withdrawCashFromBank( self, amt, "xferPass", "xferFail", params );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// xferPass
//------------------------------------------------

messageHandler xferPass()
{
	// Called when our cash is withdrawn.
	int cash = getCashBalance( self );
	if ( cash <= 0 )
		return SCRIPT_CONTINUE;

	// Give cash to player.
	obj_id player = params.getObjId( "player" );
	transferCashTo( self, player, cash, "gaveReward", "xferFail", params );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// gaveReward
//------------------------------------------------

messageHandler gaveReward()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	obj_id player = params.getObjId( "player" );
	int amt = params.getInt( "amt" );
	prose_package pp = prose.getPackage( PROSE_REWARD, self, player, amt );
	sendSystemMessageProse( player, pp );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// FP->XP faction training conversion handlers
//------------------------------------------------

messageHandler msgFactionTrainingTypeSelected()
{
	obj_id player = sui.getPlayerId(params);
	if ( !isIdValid(player) )
		return SCRIPT_CONTINUE;

	utils.removeScriptVar(self, player + ".training.pid");

	int bp = sui.getIntButtonPressed(params);
	if ( bp == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	int idx = sui.getListboxSelectedRow(params);
	if ( idx < 0 )
		return SCRIPT_CONTINUE;

	dictionary row = dataTableGetRow(factions.DATATABLE_ALLOWED_XP_TYPES, idx);
	if ( row == null || row.isEmpty() )
	{
		sendSystemMessage(player, factions.SID_INVALID_TRAINING_TYPE);
		return SCRIPT_CONTINUE;
	}

	string faction = factions.getFaction(self);

	int available = factions.getAvailableFactionPoints(player, faction);
	if ( available < 1 )
	{
		sendSystemMessage(player, SID_YOU_LACK_FACTION);
		return SCRIPT_CONTINUE;
	}

	string xp_type = row.getString("xp_type");
	if ( xp_type == null || xp_type.equals("") )
		return SCRIPT_CONTINUE;

	string_id xp_name = new string_id("exp_n",xp_type);
	if ( xp_name == null )
		return SCRIPT_CONTINUE;

	/*
	int curXp = getExperiencePoints(player, xp_type);
	int xpCap = getExperienceCap(player, xp_type);
	if ( curXp >= xpCap )
	{
		debugSpeakMsg(player, xp_name + " xp cap = " + xpCap);
		sendSystemMessageTestingOnly(player, "You are already at your cap for "+xp_name+" experience. Aborting training...");
		return SCRIPT_CONTINUE;
	}
	*/

	int ratioFrom = row.getInt("ratioFrom");
	int ratioTo = row.getInt("ratioTo");
	if ( ratioFrom <= 0 || ratioTo <= 0 )
		return SCRIPT_CONTINUE;

	string title = utils.packStringId(SID_SUI_EXPERIENCE_TRAINING_TITLE);
	prose_package ppSuiExpTrain = prose.getPackage(SID_SUI_EXPERIENCE_TRAINING_PROMPT);
	prose.setTT(ppSuiExpTrain, xp_name);
	prose.setDI(ppSuiExpTrain, ratioFrom);
	if (ratioTo == 1)
		prose.setTO(ppSuiExpTrain, "");
	else
		prose.setTO(ppSuiExpTrain, "" + ratioTo);
	string prompt = " \0" + packOutOfBandProsePackage(null, ppSuiExpTrain);

	int pid = sui.transfer(self, player, prompt, title, utils.packStringId(SID_SUI_EXPERIENCE_TRAINING_HEADER), available, "Experience", 0, "msgFactionTrainingAmountSelected", ratioFrom, ratioTo);
	if ( pid > -1 )
	{
		utils.setScriptVar(self, player + ".training.pid", pid);
		utils.setScriptVar(self, player + ".training.idx", idx);

		float ratio = ratioFrom/ratioTo;
		utils.setScriptVar(self, player + ".training.ratio", ratio);
	}

	return SCRIPT_CONTINUE;
}

messageHandler msgFactionTrainingAmountSelected()
{
	obj_id player = sui.getPlayerId(params);
	if ( !isIdValid(player) )
		return SCRIPT_CONTINUE;

	int idx = utils.getIntScriptVar(self, player + ".training.idx");
	float ratio = utils.getFloatScriptVar(self, player+".training.ratio");
	utils.removeScriptVarTree(self, player + ".training");

	int bp = sui.getIntButtonPressed(params);
	if ( bp == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	int amt = sui.getTransferInputTo(params);
	if ( amt < 1 )
		return SCRIPT_CONTINUE;

	string xp_type = dataTableGetString(factions.DATATABLE_ALLOWED_XP_TYPES, idx, "xp_type");
	if ( xp_type == null || xp_type.equals("") )
		return SCRIPT_CONTINUE;

	string faction = factions.getFaction(self);

	int cost = Math.round(amt/ratio);
	int available = factions.getAvailableFactionPoints(player, faction);
	if ( cost > available )
	{
		prose_package pp = prose.getPackage(factions.SID_NOT_ENOUGH_STANDING_SPEND, faction, (int)factions.FACTION_RATING_DECLARABLE_MIN);
		sendSystemMessageProse(player, pp);
		return SCRIPT_CONTINUE;
	}

	CustomerServiceLog("faction_perk", "(" + player + ")" + getName(player) + " is attempting to purchase " + amt + " " + xp_type + " xp @ cost of " + cost + " " + faction + " fp");

	dictionary resultData = new dictionary();
	resultData.put("player", player);
	resultData.put("xp_type", xp_type);
	resultData.put("amt", amt);
	resultData.put("ratio", ratio);
	resultData.put("faction", faction);
	if (!xp.grantUnmodifiedExperience(player, xp_type, amt, "msgFactionTrainingAmountSelectedXpResult", resultData))
	{
		CustomerServiceLog("faction_perk", "(" + player + ")" + getName(player) + " xp purchase aborted! already at xp cap for type: " + xp_type +"!");

		string_id xp_name = new string_id("exp_n",xp_type);
		if ( xp_name == null )
			return SCRIPT_CONTINUE;
		prose_package ppAtCap = prose.getPackage(SID_ALREADY_AT_CAP);
		prose.setTO(ppAtCap, xp_name);
		sendSystemMessageProse(player, ppAtCap);
	}
	return SCRIPT_CONTINUE;
}

messageHandler msgFactionTrainingAmountSelectedXpResult()
{
	int granted = params.getInt(xp.GRANT_XP_RESULT_VALUE);
	dictionary data = params.getDictionary(xp.GRANT_XP_RETURN_DATA);
	obj_id player = data.getObjId("player");
	string xp_type = data.getString("xp_type");
	int amt = data.getInt("amt");
	float ratio = data.getFloat("ratio");
	string faction = data.getString("faction");

	if ( granted <= 0 )
	{
		CustomerServiceLog("faction_perk", "(" + player + ")" + getName(player) + " xp purchase aborted! already at xp cap for type: " + xp_type +"!");

		string_id xp_name = new string_id("exp_n",xp_type);
		if ( xp_name == null )
			return SCRIPT_CONTINUE;
		prose_package ppAtCap = prose.getPackage(SID_ALREADY_AT_CAP);
		prose.setTO(ppAtCap, xp_name);
		sendSystemMessageProse(player, ppAtCap);
		return SCRIPT_CONTINUE;
	}

	int cost = Math.round(amt/ratio);
	if ( granted != amt )
	{
		//granted xp is off! modify cost
		cost = Math.round(granted/ratio);
	}

	if ( factions.addFactionStanding(player, faction, -cost) )
	{
		CustomerServiceLog("faction_perk", "(" + player + ")" + getName(player) + " fp->xp purchase complete: "+cost+"fp->"+granted+"xp of "+xp_type);
	}
	else
	{
		CustomerServiceLog("faction_perk", "(" + player + ")" + getName(player) + " fp->xp purchase failed! revoking xp");
		grantExperiencePoints(player, xp_type, -amt);
	}
	return SCRIPT_CONTINUE;
}
