/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        faction_item
 * Description:  script that goes on all faction items that can only
 *		 be used while declared.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.factions;
include library.utils;


/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
//	LOG("LOG_CHANNEL", "transferer ->" + transferer + " destContainer ->" + destContainer);

	if (isPlayer(destContainer))
	{
		if ( !factions.canUseFactionItem(destContainer, self) )
		{
			return SCRIPT_OVERRIDE;
		}
	}
	
	if ( isAPlayerAppearanceInventoryContainer(destContainer) )
	{
		obj_id owner = getContainedBy(destContainer);
		if(!isIdValid(owner))
		   return SCRIPT_OVERRIDE;
		   
		if ( !factions.canUseFactionItem(owner, self) )
		{
			return SCRIPT_OVERRIDE;
		}	      
	}
	
	return SCRIPT_CONTINUE;
}
trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if ( isIdValid(self) && exists(self) )
	{
		int idx = utils.getValidAttributeIndex(names);
		if (idx == -1)
			return SCRIPT_CONTINUE;

		if(hasObjVar(self, "faction_recruiter.faction"))
		{
			names[idx] = "faction_restriction";
			string attrib = getStringObjVar(self, "faction_recruiter.faction");
			attribs[idx] = attrib;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}



/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
