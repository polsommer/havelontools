include library.quests;
include library.ai_lib;
include library.chat;
include library.utils;
include ai.ai_combat;
include library.money;
include library.create;

const string FACETO_VOLUME_NAME = "faceToTriggerVolume";

trigger OnAttach()
{
	messageTo (self, "setupSelf", null, 4, true);
	createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	if (hasObjVar (speaker, questID + ".vip"))
	{
		obj_id courier = getObjIdObjVar (speaker, questID + ".vip");
		if (courier == self)
		{
			if (type == "rescue" || type == "escort" || type == "arrest")
			{
				string reward = "npc_takeme_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				dictionary parms = new dictionary();
				parms.put ("player", speaker);
				messageTo (self, "followPlayer", parms, 2, true);
				messageTo (speaker, "finishRandomQuest", null, 2, true);
				messageTo (self, "spawnExtras", null, 2, true);
				return SCRIPT_OVERRIDE;
			}
			else if (type == "smuggle" || type == "deliver")
			{
				obj_id playerInv = utils.getInventoryContainer(speaker);
				if (checkForItem(playerInv, speaker, questNum) == true)
				{
					string reward = "npc_smuggle_" + questNum;
					string_id message = new string_id (CONVO, reward);
					chat.chat (self, message);
					messageTo (speaker, "finishRandomQuest", null, 2, true);
					return SCRIPT_OVERRIDE;
				}
				else
				{
					string_id work = new string_id(CONVO, "gotowork");
					chat.chat (self, work);
					return SCRIPT_CONTINUE;
				}
			}
			return SCRIPT_CONTINUE;
		}
		else
		{
			string_id work = new string_id(CONVO, "otherescort");
			chat.chat (self, work);
			return SCRIPT_CONTINUE;
		}
	}
	else
	{
		string_id blah = new string_id (CONVO, "dontknowyou");
		chat.chat (self, blah);
		return SCRIPT_CONTINUE;
	}
}

trigger OnIncapacitated (obj_id killer)
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (type == "destroy")
	{
		messageTo (player, "finishRandomQuest", null, 2, true);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
		messageTo (player, "finishRandomQuest", null, 2, true);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}

messageHandler followPlayer()
{
	obj_id player = params.getObjId ("player");
	ai_lib.aiFollow(self, player);
	return SCRIPT_CONTINUE;
}

messageHandler stopFollowing()
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/theme_park/" + datatable + ".iff";
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	debugSpeakMsg (self, "Thanks for bringing me back.");
	obj_id player = params.getObjId ("player");
	ai_lib.aiStopFollowing (self);
	detachScript (player, playerScript);
	if (questID != null && questID != "")
	{
		if (questID != null && questID != "")
		{
			setObjVar (player, questID + ".done", 1);
			messageTo (self, "cleanUp", null, 30, true);
		}			
	}		
	return SCRIPT_CONTINUE;
}


messageHandler setupSelf ()
{
	setWantSawAttackTriggers( self, false );
	string datatable = getStringObjVar (self, "quest_table");
	if (datatable == null)
	{
		setObjVar (self, "NO SCRIPT", 1);
		return SCRIPT_OVERRIDE;
	}
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	if (type == "rescue" || type == "smuggle" || type == "deliver" || type == "arrest" || type == "escort")
	{
		attachScript (self, "npc.converse.npc_converse_menu");
	}
	return SCRIPT_CONTINUE;
}

messageHandler saySomething()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");

	string something = "npc_breech_" + questNum;
	string_id message = new string_id (CONVO, something);
	chat.chat (self, message);

	if (type == "destroy" || type == "fetch")
	{
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}

messageHandler giveReward()
{
	obj_id player = params.getObjId ("player");
	string datatable = getStringObjVar (player, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string reward = dataTableGetString (datatable, questNum, "reward");

	if (reward == "credits")
	{
		money.bankTo(money.ACCT_JABBA, player, 100);
	}
	else
	{
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
	}
	if (questID != null && questID != "")
	{
		if (questID != null && questID != "")
		{
			setObjVar (player, questID + ".done", 1);
			messageTo (player, "finishRandomQuest", null, 2, true);
			detachScript (player, playerScript);
		}			
	}		
	return SCRIPT_CONTINUE;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable, questNum, "deliver_object");
	boolean hadIt = false;

	obj_id[] contents = getContents(inv);
	for ( int i = 0; i < contents.length; i++ )
	{
		string itemInInventory = getTemplateName (contents[i]);
		if (itemInInventory == giveMe)
		{
			destroyObject (contents[i]);
			hadIt = true;
		}
	}
	return hadIt;
}

messageHandler spawnExtras()
{
	obj_id player = getObjIdObjVar (self, "player");
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	location here = getLocation (self);


	string spawn = dataTableGetString (datatable, questNum, "extra_npc");
	string spawn2 = dataTableGetString (datatable, questNum, "extra_npc2");
	string spawn3 = dataTableGetString (datatable, questNum, "extra_npc3");
	string spawn4 = dataTableGetString (datatable, questNum, "extra_npc4");

	if (spawn != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra = create.object (spawn, here);
		string disposition = dataTableGetString (datatable, questNum, "extra_npc_disposition");
		if (disposition == "aggro")
		{
			startCombat(extra, player);
		}
	}

	if (spawn2 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra2 = create.object (spawn2, here);
		string disposition2 = dataTableGetString (datatable, questNum, "extra_npc2_disposition");
		if (disposition2 == "aggro")
		{
			startCombat(extra2, player);
		}
	}

	if (spawn3 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra3 = create.object (spawn3, here);
		string disposition3 = dataTableGetString (datatable, questNum, "extra_npc3_disposition");
		if (disposition3 == "aggro")
		{
			startCombat(extra3, player);
		}
	}

	if (spawn4 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra4 = create.object (spawn4, here);
		string disposition4 = dataTableGetString (datatable, questNum, "extra_npc4_disposition");
		if (disposition4 == "aggro")
		{
			startCombat(extra4, player);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}

//const string FACETO_VOLUME_NAME = "faceToTriggerVolume";
//createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( !isPlayer( breacher ) )
	{
		//debugSpeakMsg( self, "you are not a player" );
		return SCRIPT_CONTINUE;
	}

	if ( volumeName != FACETO_VOLUME_NAME )
		return SCRIPT_CONTINUE;

	if ( isInNpcConversation(self) )
		return SCRIPT_CONTINUE;

	if ( canSee( self, breacher ) )
		faceTo( self, breacher );

	return SCRIPT_CONTINUE;
}

