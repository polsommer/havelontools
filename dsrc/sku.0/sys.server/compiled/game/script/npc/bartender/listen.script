
include library.chat;

const string SCRIPT_LISTEN							= "npc.bartender.list";

const string VAR_LISTEN_BASE						= "bartender.listen";
const string VAR_LISTEN_VALUE						= "bartender.listen.value";
const string VAR_LISTEN_SPEAKER						= "bartender.listen.speaker";
const string VAR_LISTEN_TEXT						= "bartender.listen.text";


const string TBL_KEYWORDS							= "datatables/npc/bartender/keyword.iff";

trigger OnAttach()
{
	//chat.chat(self, "I am listening...");
	messageTo(self, "handleListenStop", null, rand(60,180), false);
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	//chat.chat(self, "I am stopping listening...");
	removeObjVar(self, VAR_LISTEN_BASE);
	messageTo(self, "handleListen", null, rand(600, 1200), false);
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	//LOG("bartender","** OnHearSpeech(): speaker = " + speaker);
	//LOG("bartender","** OnHearSpeech(): text = " + text);
	
	if ( isPlayer(speaker) )
	{
		if ( text.length() > 40 && text.length() < 100 )
		{
			//LOG("bartender","** OnHearSpeech(): searching for keywords...");
			//search for keywords
			
			int max = getIntObjVar(self, VAR_LISTEN_VALUE);
			
			string[] keywords = dataTableGetStringColumn(TBL_KEYWORDS, "keyword");
			if ( keywords != null && keywords.length > 0 )
			{
				int total = 1;
				for ( int i = 0; i < keywords.length; i++ )
				{
					if ( toLower(text).indexOf(toLower(keywords[i])) > -1 )
					{
						total += dataTableGetInt(TBL_KEYWORDS, i, "value");
					}
				}
				
				if ( total > max )
				{
					setObjVar(self, VAR_LISTEN_VALUE, total);
					setObjVar(self, VAR_LISTEN_SPEAKER, getAssignedName(speaker));
					setObjVar(self, VAR_LISTEN_TEXT, text);
					
					//chat.chat(self, "I'm going to have to remember that...");
				}
			}
		}
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler handleListenStop()
{
	string speaker = getStringObjVar(self, VAR_LISTEN_SPEAKER);
	string text = getStringObjVar(self, VAR_LISTEN_TEXT);
	if ( speaker != null && !speaker.equals("") && text != null && !text.equals("") )
	{
		dictionary d = new dictionary();
		d.put("speaker",speaker);
		d.put("text", text);

		messageTo(self, "handleNewRumor", d, 0, false);
	}
	
	detachScript(self, SCRIPT_LISTEN);
	return SCRIPT_CONTINUE;
}