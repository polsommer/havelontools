include library.quests;
include library.ai_lib;
include library.chat;
include library.utils;
include ai.ai_combat;
include library.money;
include library.create;

const string FACETO_VOLUME_NAME = "faceToTriggerVolume";

trigger OnAttach()
{
	messageTo (self, "setupSelf", null, 4, true);
	createTriggerVolume( FACETO_VOLUME_NAME, 15.0f, true );
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string convoType = dataTableGetString (datatable, questNum, "quest_npc_convo");
	convoType = "terse"; //HackityHackHackHack.  Until we can fix all the datatables, everybody speaks terse.

	faceTo( self, speaker );

	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	if (hasObjVar (speaker, questID + ".vip"))
	{
		obj_id courier = getObjIdObjVar (speaker, questID + ".vip");
		if (courier == self)
		{
			if (type == "escort" || type == "arrest" || type == "rescue")
			{
				string reward = "npc_takeme_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				dictionary parms = new dictionary();
				parms.put ("player", speaker);
				messageTo (self, "followPlayer", parms, 0, true);
				if (convoType == "terse")
				{
					if (!hasObjVar (self, "SentFinishMsg"))
					{
						messageTo (speaker, "finishStaticQuest", null, 0, true);
						setObjVar (self, "SentFinishMsg", 1);
					}
				}

				if (convoType == "normal")
				{
					string npcGreet = "npc_takeme_" + questNum;
					string response1 = "player_more_1_" + questNum;

					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [1];
					response[0] = new string_id (CONVO, response1);
					if (!hasObjVar (self, "SentFinishMsg"))
					{
						messageTo (speaker, "finishStaticQuest", null, 0, true);
						setObjVar (self, "SentFinishMsg", 1);
					}
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}

				else if (convoType == "extended")
				{
					string npcGreet = "npc_takeme_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;

					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [2];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
					if (!hasObjVar (self, "SentFinishMsg"))
					{
						messageTo (speaker, "finishStaticQuest", null, 0, true);
						setObjVar (self, "SentFinishMsg", 1);
					}
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}
				else if (convoType == "verbose")
				{
					string npcGreet = "npc_1_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;
					string response3 = "player_more_3_" + questNum;
					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [3];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
					response[2] = new string_id (CONVO, response3);
					if (!hasObjVar (self, "SentFinishMsg"))
					{
						messageTo (speaker, "finishStaticQuest", null, 0, true);
						setObjVar (self, "SentFinishMsg", 1);
					}
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}

				else
				{

					return SCRIPT_OVERRIDE;
				}
			}
			else if (type == "smuggle" || type == "deliver")
			{
				obj_id playerInv = utils.getInventoryContainer(speaker);
				if (checkForItem(playerInv, speaker, questNum) == true || hasObjVar (speaker, questID + ".done"))
				{
					if (!hasObjVar (speaker, questID + ".done"))
					{
						messageTo (speaker, "finishStaticQuest", null, 0, true);
						setObjVar (self, "SentFinishMsg", 1);
					}

					if (convoType == "terse")
					{
						string_id npcGreet = new string_id (CONVO, "npc_smuggle_" + questNum);
						chat.chat (self, npcGreet);
						return SCRIPT_CONTINUE;
					}

					if (convoType == "normal")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;

						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [1];
						response[0] = new string_id (CONVO, response1);

						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}

					else if (convoType == "extended")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;
						string response2 = "player_more_2_" + questNum;

						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [2];
						response[0] = new string_id (CONVO, response1);
						response[1] = new string_id (CONVO, response2);

						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}
					else if (convoType == "verbose")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;
						string response2 = "player_more_2_" + questNum;
						string response3 = "player_more_3_" + questNum;
						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [3];
						response[0] = new string_id (CONVO, response1);
						response[1] = new string_id (CONVO, response2);
						response[2] = new string_id (CONVO, response3);
						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}
				}
				else
				{
					string_id work = new string_id(CONVO, "gotowork");
					string working = getString (work);

					if (working == null || working == "")
					{
						work = new string_id (CONVO, "gotowork_" + questNum);
					}

					chat.chat (self, work);
					return SCRIPT_CONTINUE;

				}
			}
			else if (type == "retrieve")
			{
				obj_id playerInv = utils.getInventoryContainer(speaker);
				if (!hasObjVar (speaker, questID + ".done"))
				{
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					setObjVar (self, "SentFinishMsg", 1);
					string pickup = dataTableGetString (datatable, questNum, "retrieve_object");
					if (pickup == null)
					{
						pickup = "none";
					}
					if (pickup != "none")
					{
						obj_id cargo = createObject (pickup, playerInv, "");
						setObjVar (speaker, questID + ".deliver", cargo);
					}




					if (convoType == "terse")
					{
						string npcGreet = "npc_smuggle_" + questNum;

						string_id greeting = new string_id (CONVO, npcGreet);
						chat.chat (self, greeting);
						npcEndConversation(speaker);
					}


					if (convoType == "normal")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;

						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [1];
						response[0] = new string_id (CONVO, response1);

						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}

					else if (convoType == "extended")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;
						string response2 = "player_more_2_" + questNum;

						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [2];
						response[0] = new string_id (CONVO, response1);
						response[1] = new string_id (CONVO, response2);

						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}
					else if (convoType == "verbose")
					{
						string npcGreet = "npc_smuggle_" + questNum;
						string response1 = "player_more_1_" + questNum;
						string response2 = "player_more_2_" + questNum;
						string response3 = "player_more_3_" + questNum;
						string_id greeting = new string_id (CONVO,npcGreet);

						string_id response[] = new string_id [3];
						response[0] = new string_id (CONVO, response1);
						response[1] = new string_id (CONVO, response2);
						response[2] = new string_id (CONVO, response3);
						npcStartConversation (speaker, self, "questConvo", greeting, response);
					}
				}
				else
				{
					string_id work = new string_id(CONVO, "gotowork");
					string working = getString (work);

					if (working == null || working == "")
					{
						work = new string_id (CONVO, "gotowork_" + questNum);
					}

					chat.chat (self, work);
					return SCRIPT_CONTINUE;

				}
			}

			else if (type == "rescue")
			{
				string reward = "npc_takeme_" + questNum;
				string_id message = new string_id (CONVO, reward);
				chat.chat (self, message);
				if (convoType == "terse")
				{
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					setObjVar (self, "SentFinishMsg", 1);
				}

				if (convoType == "normal")
				{
					string npcGreet = "npc_takeme_" + questNum;
					string response1 = "player_more_1_" + questNum;

					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [1];
					response[0] = new string_id (CONVO, response1);
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					setObjVar (self, "SentFinishMsg", 1);
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}

				else if (convoType == "extended")
				{
					string npcGreet = "npc_takeme_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;

					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [2];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					setObjVar (self, "SentFinishMsg", 1);
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}
				else if (convoType == "verbose")
				{
					string npcGreet = "npc_1_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;
					string response3 = "player_more_3_" + questNum;
					string_id greeting = new string_id (CONVO,npcGreet);

					string_id response[] = new string_id [3];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
					response[2] = new string_id (CONVO, response3);
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					setObjVar (self, "SentFinishMsg", 1);
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}
			}
			return SCRIPT_CONTINUE;
		}
		else
		{
			string_id work = new string_id(CONVO, "otherescort");
			chat.chat (self, work);
			return SCRIPT_CONTINUE;
		}
	}
	else
	{
		string_id blah = new string_id (CONVO, "dontknowyou_" + questNum);
		chat.chat (self, blah);
		return SCRIPT_CONTINUE;
	}
}

trigger OnNpcConversationResponse (string convo, obj_id player, string_id response)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string convoStyle = dataTableGetString (datatable, questNum, "quest_giver_convo");

	string response1 = "player_more_1_" + questNum;
	string response2 = "player_more_2_" + questNum;
	string response3 = "player_more_3_" + questNum;

	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	if ( response.getAsciiId().equals(response1)) //
 	{
 		string npcAnswer1 = "npc_more_1_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer1);//
 		npcSpeak(player, message);
		npcRemoveConversationResponse (player, new string_id (CONVO, response1));
		return SCRIPT_CONTINUE;
	}
 	if ( response.getAsciiId().equals(response2) ) //
 	{
 		string npcAnswer2 = "npc_more_2_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer2);//
 		npcSpeak(player, message);
		npcRemoveConversationResponse (player, new string_id (CONVO, response2));
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response3) )
	{
 		string npcAnswer3 = "npc_more_3_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer3);//
 		npcSpeak(player, message);
 		if (type == "info")
 		{
 			messageTo (player, "finishStaticQuest", null, 0, true);
 			setObjVar (self, "SentFinishMsg", 1);
		}
		npcRemoveConversationResponse (player, new string_id (CONVO, response3));
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;


}
trigger OnIncapacitated (obj_id killer)
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");

	if (type == "destroy")
	{
		messageTo (player, "finishStaticQuest", null, 0, true);
		setObjVar (self, "SentFinishMsg", 1);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");
		obj_id playerInv = utils.getInventoryContainer(player);
		obj_id cargo = createObjectOverloaded (reward, playerInv);
		setObjVar (player, questID + ".deliver", cargo);
		messageTo (player, "finishStaticQuest", null, 0, true);
		setObjVar (self, "SentFinishMsg", 1);
		return SCRIPT_CONTINUE;
	}
	else if (type == "rescue" || type == "escort" || type == "arrest" || type == "retrieve")
	{
		if (questID != null && questID != "")
		{
			setObjVar(player, questID + ".failed", 1);
			string_id failed = new string_id ("theme_park/messages", "generic_fail_message");
			string failure = getString (failed);
			sendSystemMessage (self, failure, null);

		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler followPlayer()
{
	obj_id player = params.getObjId ("player");
	setMaster (self, player);
	ai_lib.aiFollow(self, player);
	return SCRIPT_CONTINUE;
}

messageHandler stopFollowing()
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	int questNum = getIntObjVar (self, "questNum");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	debugSpeakMsg (self, "So, this is it...");
	obj_id player = params.getObjId ("player");
	ai_lib.aiStopFollowing (self);
	detachScript (player, playerScript);
	setInvulnerable (self, true );
	messageTo (self, "cleanUp", null, 30, true);
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
	}
	return SCRIPT_CONTINUE;
}


messageHandler setupSelf ()
{
	setWantSawAttackTriggers( self, false );
	string datatable = getStringObjVar (self, "quest_table");
	if (datatable == null)
	{
		setObjVar (self, "NO SCRIPT", 1);
		return SCRIPT_OVERRIDE;
	}
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );

	if (type == "info" || type == "rescue" || type == "smuggle" || type == "deliver" || type == "arrest" || type == "escort" || type == "retrieve")
	{
		attachScript (self, "npc.converse.npc_converse_menu");
		setCondition(self, CONDITION_INTERESTING);
		setInvulnerable(self, true );
	}
	messageTo (self, "spawnExtras", null, 0, true);
	return SCRIPT_CONTINUE;
}

messageHandler saySomething()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");

	string something = "npc_breech_" + questNum;
	string_id message = new string_id (CONVO, something);

	string check = getString (message);

	if (check != null)
	{
		if (check != "")
		{
			if (ai_lib.isNpc(self))
			{
				chat.chat (self, message);
			}
		}
	}

	if (type == "destroy" || type == "fetch")
	{
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}

messageHandler giveReward()
{
	obj_id player = params.getObjId ("player");
	string datatable = getStringObjVar (player, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string reward = dataTableGetString (datatable, questNum, "reward");

	if (reward == "credits")
	{
		money.bankTo(money.ACCT_JABBA, player, 100);
	}
	else
	{
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
	}
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
		messageTo (player, "finishStaticQuest", null, 0, true);
		setObjVar (self, "SentFinishMsg", 1);
		detachScript (player, playerScript);
	}
	return SCRIPT_CONTINUE;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable,  questNum, "deliver_object");
	boolean hadIt = false;

	obj_id[] contents = getContents(inv);
	for ( int i = 0; i < contents.length; i++ )
	{
		string itemInInventory = getTemplateName (contents[i]);
		if (itemInInventory == giveMe)
		{
			destroyObject (contents[i]);
			hadIt = true;
		}
	}
	return hadIt;
}

messageHandler spawnExtras()
{
	obj_id player = getObjIdObjVar (self, "player");
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	location here = getLocation (self);


	string spawn = dataTableGetString (datatable, questNum, "extra_npc");
	string spawn2 = dataTableGetString (datatable, questNum, "extra_npc2");
	string spawn3 = dataTableGetString (datatable, questNum, "extra_npc3");
	string spawn4 = dataTableGetString (datatable, questNum, "extra_npc4");

	if (spawn != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra = create.object (spawn, here);
		string disposition = dataTableGetString (datatable, questNum, "extra_npc_disposition");
		if (disposition == "aggro")
		{
			startCombat(extra, player);
		}
	}

	if (spawn2 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra2 = create.object (spawn2, here);
		string disposition2 = dataTableGetString (datatable, questNum, "extra_npc2_disposition");
		if (disposition2 == "aggro")
		{
			startCombat(extra2, player);
		}
	}

	if (spawn3 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra3 = create.object (spawn3, here);
		string disposition3 = dataTableGetString (datatable, questNum, "extra_npc3_disposition");
		if (disposition3 == "aggro")
		{
			startCombat(extra3, player);
		}
	}

	if (spawn4 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra4 = create.object (spawn4, here);
		string disposition4 = dataTableGetString (datatable, questNum, "extra_npc4_disposition");
		if (disposition4 == "aggro")
		{
			startCombat(extra4, player);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( !isPlayer( breacher ) )
	{
		//debugSpeakMsg( self, "you are not a player" );
		return SCRIPT_CONTINUE;
	}

	if ( volumeName != FACETO_VOLUME_NAME )
		return SCRIPT_CONTINUE;

	if ( isInNpcConversation(self) )
		return SCRIPT_CONTINUE;

	if ( canSee( self, breacher ) )
	{
		removeTriggerVolume(FACETO_VOLUME_NAME);
		faceTo( self, breacher );
	}

	return SCRIPT_CONTINUE;
}


