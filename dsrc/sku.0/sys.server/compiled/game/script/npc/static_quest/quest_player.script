include library.locations;
include library.quests;
include library.create;
include ai.ai_combat;

trigger OnAttach ()
{
	string datatable = getStringObjVar (self, "quest_table");
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");

	string_id waypointName = new string_id (CONVO, "waypoint_name_" + questNum);
	string target = getString (waypointName);

	if (target == null || target == "")
	{
		target = dataTableGetString (datatable, questNum, "npc_name" );
		if (target == null || target == "")
		{
			target = dataTableGetString (datatable, questNum, "npc_type");

			if ( target == null || target == "")
			{
				target = "Quest Waypoint";
			}
		}
	}

	string_id waypointDesc = new string_id (CONVO, "waypoint_description_" + questNum);
	string entry = getString (waypointDesc);

	if (entry == null || entry == "")
	{
		entry = "npc_1_" + questNum;
	}
	else
	{
		entry = "waypoint_description_" + questNum;
	}

	location questLoc = getLocationObjVar (self, questID + ".questLoc");
	obj_id waypoint = quests.addThemeParkWaypoint( self, questID, "quest", questLoc, 20, target, CONVO, entry);
	if (questID != null && questID != "")
	{
		setObjVar (self, questID + ".waypoint", waypoint);
		addLocationTarget ("spawnGuy", questLoc, 100);
	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation( string name )
{
	string datatable = getStringObjVar (self, "quest_table");
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (self, gatingString);
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (type == null)
	{
		type = "missing";
	}

	if (name == "quest")
	{
		obj_id vip = getObjIdObjVar (self, questID + ".vip");
		if (!hasObjVar (self, questID + ".waypointhome"))
		{
			messageTo (vip, "saySomething", null, 1, true);
		}
	}

	if (name == "spawnGuy")
	{
		if (type == "go")
		{
			messageTo (self, "finishStaticGoQuest", null, 2, true);
			return SCRIPT_OVERRIDE;
		}
		location spawn = getLocationObjVar (self, questID + ".questLoc");
		string npcToSpawn = dataTableGetString (datatable, questNum, "npc_type");
		if (npcToSpawn == null)
		{
			string_id badNpc = new string_id ("theme_park/messages", "bad_npc_message");
			string nospawn = getString (badNpc);
			sendSystemMessage (self, nospawn, null);

			if (questID != null && questID != "")
			{
				setObjVar (self, questID + ".noloc", 1);
			}
			return SCRIPT_OVERRIDE;
		}
		string npcName = dataTableGetString (datatable, questNum, "npc_name");
		string npcScript = dataTableGetString (datatable, questNum, "npc_script");
		obj_id npc = create.object (npcToSpawn, spawn);
		if (questID != null && questID != "")
		{
			setObjVar (npc, "player", self);
			setObjVar (self, questID + ".vip", npc);
			setObjVar (npc, "quest_table", datatable);
			setObjVar (npc, "questNum", questNum);
			setObjVar (self, questID + ".arrived", 1);
			attachScript (npc, npcScript);
		}
		if (npcName != null && npcName != "")
		{
			setName (npc, npcName);
		}
		spawnExtras(self, spawn, questID);
	}

	if (name == "home")
	{
		obj_id waypoint = getObjIdObjVar (self, questID + ".waypointhome");
		if (waypoint != null)
		{
			destroyWaypointInDatapad(waypoint, self);
		}

		quests.clearQuestLocationTarget (self, null, name);
	}
	return SCRIPT_CONTINUE;
}

messageHandler finishStaticQuest()
{
	string datatable = getStringObjVar (self, "quest_table");
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");

	string file = dataTableGetString (datatable, 1, "convo");

	string_id waypointName = new string_id (file, "return_waypoint_name_" + questNum);
	string target = getString (waypointName);

	if (target == null || target == "")
	{
		target = "Finish Quest";
	}

	string_id waypointDesc = new string_id (file, "return_waypoint_description_" + questNum);
	string entry = getString (waypointDesc);

	if (entry == null || entry == "")
	{
		entry = "npc_reward_" + questNum;
	}
	else
	{
		entry = "return_waypoint_description_" + questNum;
	}

	setObjVar (self, "GotFinishMessage", 1);
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (self, gatingString);

	obj_id waypoint = getObjIdObjVar (self, questID + ".waypoint");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, self);
	}
	location home = getLocationObjVar (self, questID + ".home");
	string type = dataTableGetString (datatable, questNum, "quest_type");

	if (type == null)
	{
		type == "missing";
	}

	if (!hasObjVar (self, questID + ".failed"))
	{
		if (type == "go")
		{
			string_id goMsg = new string_id ("theme_park/messages", "go_message");
			string going = getString (goMsg);
			sendSystemMessage (self, going, null);

			messageTo(self, "removeQuestInfo", null, 2, true);
		}
		else
		{
			string_id done = new string_id ("theme_park/messages", "static_completion_message");
			string finished = getString (done);
			sendSystemMessage (self, finished, null);
		}
	}

	if (questID != null && questID != "" && type != "go")
	{
		setObjVar (self, questID + ".done", 1);
		obj_id waypointhome = quests.addThemeParkWaypoint( self, questID, "quest", home, 15, target, file, entry );
		setObjVar (self, questID + ".waypointhome", waypointhome);
	}
	return SCRIPT_CONTINUE;
}

messageHandler finishStaticGoQuest()
{
	string datatable = getStringObjVar (self, "quest_table");
	string questID = dataTableGetString (datatable, 1, "temp_objvar");
	int questNum = getIntObjVar (self, questID + ".questNum");

	string file = dataTableGetString (datatable, 1, "convo");

	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (self, gatingString);

	obj_id waypoint = getObjIdObjVar (self, questID + ".waypoint");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, self);
	}

	string_id goMsg = new string_id ("theme_park/messages", "go_message");
	string going = getString (goMsg);
	sendSystemMessage (self, going, null);

	messageTo(self, "removeQuestInfo", null, 2, true);

	return SCRIPT_CONTINUE;
}

void spawnExtras(obj_id self, location spawn, string questID)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	location here = getLocationObjVar (self, questID + ".questLoc");

	string spawn1 = dataTableGetString (datatable, questNum, "extra_npc");
	if(spawn1==null)
	{
		spawn1="none";
	}
	string spawn2 = dataTableGetString (datatable, questNum, "extra_npc2");
	if(spawn2==null)
	{
		spawn2="none";
	}
	string spawn3 = dataTableGetString (datatable, questNum, "extra_npc3");
	if(spawn3==null)
	{
		spawn3="none";
	}

	string spawn4 = dataTableGetString (datatable, questNum, "extra_npc4");
	if(spawn4==null)
	{
		spawn4="none";
	}
	if (here == null)
	{
		here = getLocation(self);
	}

	if (spawn1 == "")
	{
		spawn1 = "none";
	}

	if (spawn2 == "")
	{
		spawn2 = "none";
	}

	if (spawn3 == "")
	{
		spawn3 = "none";
	}

	if (spawn4 == "")
	{
		spawn4 = "none";
	}

	if (spawn1 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra = create.object (spawn1, here);
		if(extra!=null)
		{
			string disposition = dataTableGetString (datatable, questNum, "extra_npc_disposition");

			if (disposition == null)
			{
				disposition = "none";
			}

			if (disposition == "aggro")
			{
				dictionary enemies = new dictionary();
				enemies.put ("npc", extra);
				enemies.put ("player", self);
				messageTo (self, "makeEnemyAttack", enemies, 3, true);
			}
		}
	}

	if (spawn2 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra2 = create.object (spawn2, here);
		if(extra2!=null)
		{
			string disposition2 = dataTableGetString (datatable, questNum, "extra_npc2_disposition");

			if (disposition2 == null)
			{
				disposition2 = "none";
			}

			if (disposition2 == "aggro")
			{
				startCombat(extra2, self);
			}
		}
	}

	if (spawn3 != "none")
	{
		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra3 = create.object (spawn3, here);
		if(extra3!=null)
		{
			string disposition3 = dataTableGetString (datatable, questNum, "extra_npc3_disposition");

			if (disposition3 == null)
			{
				disposition3 = "none";
			}

			if (disposition3 == "aggro")
			{
				startCombat(extra3, self);
			}
		}
	}

	if (spawn4 != "none")
	{

		here.x = here.x + rand(3,10);
		here.z = here.z + rand(3,10);
		obj_id extra4 = create.object (spawn4, here);
		if(extra4!=null)
		{
			string disposition4 = dataTableGetString (datatable, questNum, "extra_npc4_disposition");
			if (disposition4 == null)
			{
				disposition4 = "none";
			}

			if (disposition4 == "aggro")
			{
				startCombat(extra4, self);
			}
		}
	}
	return;
}

messageHandler removeQuestInfo()
{
	string questID = params.getString ("questID");
	if (questID == null)
	{
		questID = "none";
	}
	int questNum = getIntObjVar (self, questID + ".questNum");
	string datatable = getStringObjVar (self, "quest_table");
	if(datatable==null)
	{
		return SCRIPT_OVERRIDE;
	}
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	string selfScript = dataTableGetString (datatable, questNum, "player_script");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	obj_id waypoint = getObjIdObjVar (self, questID + ".waypoint");
	if(type==null)
	{
		type="";

	}
	if (waypoint != null)
	{

		destroyWaypointInDatapad(waypoint, self);
	}

	if (hasObjVar (self, questID + ".vip"))
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		if (type != null)
		{
			if (type == "rescue" || type == "arrest" || type == "escort")
			{
				obj_id vip = getObjIdObjVar (self, questID + ".vip");
				messageTo (vip, "stopFollowing", null, 0, true);
			}
		}

		removeObjVar (self, questID);
		removeObjVar (self, "questID");
		removeObjVar (self, "quest_table");
		removeObjVar (self, "questNum");
		removeObjVar (self, "boss");

		if (hasScript (self, selfScript))
		{
			detachScript (self, selfScript);
		}
		return SCRIPT_CONTINUE;
	}
}

trigger OnWaypointGetAttributes (obj_id waypoint, obj_id player, string[] names, string[] attribs)
{
	string questId = getStringObjVar (player, "questID");
	string file = getStringObjVar (player, questId + ".file");
	string entry = getStringObjVar (player, questId + ".entry");

	obj_id wp = getObjIdObjVar (player, questId + ".waypoint");
	obj_id wph = getObjIdObjVar (player, questId + ".waypointhome");

	if (waypoint != wp && waypoint != wph)
	{
		return SCRIPT_OVERRIDE;
	}

	string_id detail = new string_id (file, entry);
	string questDetails = "@"+detail.toString();
	int idx = 0;
	while (idx >= 0)
	{
		string currentName = names[idx];
		if (names[idx] == null)
		{
			names[idx] = "quest_details";
			attribs[idx] = questDetails;
			idx = -1;
		}
		else
		{
			idx = idx + 1;
		}
	}


	return SCRIPT_CONTINUE;
}

trigger OnWaypointDestroyed(obj_id waypoint)
{
	string questID = getStringObjVar (self, "questID");

	if (questID == null)
	{
		questID = "none";
	}

	obj_id questWaypoint = getObjIdObjVar (self, questID + ".waypoint");

	if (questWaypoint != null)
	{
		if (questWaypoint == waypoint)
		{
			dictionary questBook = new dictionary();
			questBook.put( "questID", questID);
			messageTo (self, "removeQuestInfo", questBook, 2, true);
		}
	}

	return SCRIPT_CONTINUE;
}