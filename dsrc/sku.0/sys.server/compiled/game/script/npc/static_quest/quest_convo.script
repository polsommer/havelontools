include library.factions;
include library.chat;
include library.utils;
include library.ai_lib;
include library.locations;
include library.money;
include library.quests;
include library.skill;
include library.weapons;

const string FACETO_VOLUME_NAME = "faceToTriggerVolume";

const string[] NPC_DEACTIVATE_LIST 	= 
{										
	"tato_valarian_kavas_urdano",
	"tato_valarian_ind",
	"hedon_istee",
	"igbi_freemo"
};

trigger OnAttach()
{
	string exclusion = getStringObjVar (self, "quest_table");

	// IF THIS IS AN NPC WHO'S BEING UPDATED, WE'RE REMOVING THE QUEST CONVO
	// SCRIPT AND NOT MAKING HIM INTERESTING.
	if(exclusion==null)
	{
		exclusion="";
	}
	if (NPC_DEACTIVATE_LIST != null && NPC_DEACTIVATE_LIST.length > 0)
	{
		for (int i = 0; i < NPC_DEACTIVATE_LIST.length; ++i)
		{
			if (exclusion.equals(NPC_DEACTIVATE_LIST[i]))
			{
				detachScript (self, "npc.static_quest.quest_convo");
				return SCRIPT_CONTINUE;
			}
		}
	}

	messageTo(self, "handleStaticQuestNpcAttach", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleStaticQuestNpcAttach()
{
	string creatureName = getCreatureName(self);
	if (creatureName == null || creatureName.length() <=0)
	{
		return SCRIPT_CONTINUE;
	}
	
	if (creatureName.startsWith("vana_sage") || creatureName.startsWith("tekil_barje") || creatureName.startsWith("ikka_gesul"))
	{
		detachScript (self, "npc.static_quest.quest_convo");
		return SCRIPT_CONTINUE;
	}
		
	if ( hasScript(self, "conversation.faction_recruiter_imperial") || hasScript(self, "conversation.faction_recruiter_rebel") )
	{
		detachScript (self, "npc.static_quest.quest_convo");
		return SCRIPT_CONTINUE;
	}
	
	attachScript (self, "npc.converse.npc_converse_menu");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	setInvulnerable (self, true);
	createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
	return SCRIPT_CONTINUE;
}


trigger OnStartNpcConversation (obj_id speaker)
{
	//Gets the datatable from his objvars.
	string datatable = getStringObjVar (self, "quest_table");
	string exclusion = datatable;
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";

	//The gating string tells us if he's ever done work for this NPC before, and if so, what mission he's on.
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");
	int gating = getIntObjVar (speaker, gatingString);
	if (gating == 0)
	{
		boolean noMatch = true;
		if(NPC_DEACTIVATE_LIST != null && NPC_DEACTIVATE_LIST.length > 0)
		{
			for(int i = 0; i < NPC_DEACTIVATE_LIST.length; i++)
			{
				if(exclusion.equals(NPC_DEACTIVATE_LIST[i]))
					noMatch = false;
			}
		}

		if(noMatch)
		{
			//He's never worked for this NPC so he's on mission 1
			setObjVar(speaker, gatingString, 1);
			gating = 1;
		}
	}

	//the number of rows in the datatable is the total # of missions this NPC can give out.
	int maxGating = dataTableGetNumRows(datatable);
	maxGating = maxGating - 1;
	int questNum = gating;

	//All from the datatable
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string ALT_CONVO = "static_npc/default_dialog";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string convoType = dataTableGetString (datatable, questNum, "quest_giver_convo");
	string questType = dataTableGetString (datatable, questNum, "quest_type");

	// This means that the starting of this quest has been deactivated
	if(questNum == 0)
	{
		string_id deactivated = new string_id(ALT_CONVO, "deactivated");
		chat.chat(self, deactivated);
		return SCRIPT_CONTINUE;
	}

	//This is to prevent a player from doing both a "light" and a "dark" side quest.
	if (dataTableHasColumn (datatable, "opposing_objvar"))
	{
		string opposing = dataTableGetString (datatable, questNum, "opposing_objvar");
		if (hasObjVar (speaker, opposing))
		{
			int value = getIntObjVar (speaker, opposing);
			if (value > 1)
			{
				string_id leave = new string_id (CONVO, "go_away");
				chat.chat (self, leave);
				npcEndConversation(speaker);
				return SCRIPT_CONTINUE;
			}
		}
	}

	if (gating > maxGating)
	{
		CONVO = dataTableGetString (datatable, 1, "convo");
		string_id next = new string_id(CONVO, "next" );
		chat.chat (self, next);
		return SCRIPT_OVERRIDE;
	}

	// Is this NPC Rebel Only, or Imperial Only?  We'll find out below.
	if (dataTableHasColumn(datatable, "gating_faction"))
	{
		string gatingFaction = dataTableGetString(datatable, questNum, "gating_faction");
		if (gatingFaction == null)
		{
			gatingFaction = "none";
		}
		string faction = factions.getFaction(speaker);

		if (gatingFaction == "Rebel" || gatingFaction == "Imperial")
		{
			if (gatingFaction == "Imperial" && !factions.isImperial (speaker))
			{
				string_id notyet = new string_id(CONVO, "notyet" );
				chat.chat (self, notyet);
				return SCRIPT_OVERRIDE;
			}

			else if (gatingFaction == "Rebel" && !factions.isRebel(speaker))
			{
				string_id notyet = new string_id(CONVO, "notyet" );
				chat.chat (self, notyet);
				return SCRIPT_OVERRIDE;
			}

			else
			{
				if (factions.isOnLeave (speaker))
				{
					string_id notyet = new string_id (CONVO, "notyet");
					chat.chat(self, notyet);
					return SCRIPT_OVERRIDE;
				}
			}
		}
		else
		{
			if (gatingFaction != "none")
			{
				float playerFaction = getFloatObjVar (speaker, "faction." + gatingFaction);
				int neededFaction = dataTableGetInt(datatable, questNum, "gating_faction_amt");
				if (playerFaction < neededFaction)
				{
					string_id notyet = new string_id (CONVO, "notyet");
					chat.chat(self, notyet);
					return SCRIPT_OVERRIDE;
				}
			}
		}
	}

	// Is this Quest not for Jedi's?
	if (dataTableHasColumn(datatable, "gating_jedi"))
	{
		string gatingJedi = dataTableGetString(datatable, questNum, "gating_jedi");
		if (gatingJedi == null)
		{
			gatingJedi = "none";
		}
		if (gatingJedi == "yes")
		{
			if(isJedi(speaker))
			{
				string_id jedi = new string_id(CONVO, "jedi" );
				chat.chat (self, jedi);
				return SCRIPT_OVERRIDE;
			}
		}
	}


	if (dataTableHasColumn(datatable, "gating_object"))
	{
		string gatingObject = dataTableGetString(datatable, questNum, "gating_object");
		if (gatingObject == null)
		{
			gatingObject = "none";
		}
		if (gatingObject != "none")
		{
			obj_id playerInv = utils.getInventoryContainer(speaker);
			if (checkForGatingItem(playerInv, speaker, questNum, datatable) != true)
			{
				string_id rewardMessage = new string_id (CONVO, "notyet");
				chat.chat (self, rewardMessage);
				return SCRIPT_OVERRIDE;
			}
		}
	}

	string gatingObjVar = dataTableGetString (datatable, 1, "gating_objvar");

	if (gatingObjVar != null)
	{
		if (gatingObjVar != "" && gatingObjVar != "none")
		{
			if (!hasObjVar (speaker, gatingObjVar))
			{
				string_id notyet = new string_id (CONVO, "notyet");
				chat.chat (self, notyet);
				return SCRIPT_OVERRIDE;
			}
			else
			{
				int gatingAmt = dataTableGetInt (datatable, questNum, "gating_objvar_amt");
				int playerGate = getIntObjVar (speaker, gatingObjVar);
				if (playerGate < gatingAmt)
				{
					string_id notyet = new string_id (CONVO, "notyet");
					chat.chat (self, notyet);
					return SCRIPT_OVERRIDE;
				}
			}
		}
	}


	//If the convotype is null then something is wrong with the datatable and we'll exit gracefully from this script.
	if (convoType == null)
	{
		debugSpeakMsg (self, "For some reason I'm stuck with nothing to say.");
		return SCRIPT_OVERRIDE;
	}

	// If the NPC is busy fighting, or the player for that matter, well then they shouldn't be talking about quests
	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	// If you've done all this guys missions he uses the "next" line to tell you.
	else if (questNum > maxGating)
	{
		string_id next = new string_id(CONVO, "next" );
		chat.chat (self, next);
		return SCRIPT_OVERRIDE;
	}

	// Now we're getting into it.  This means you've failed his mission and you've come back for punishment.
	else if (hasObjVar (speaker, questID + ".failed"))
	{
		string_id failMessage = new string_id (CONVO, "npc_failure_" + questNum);

		string failSafe = getString (failMessage);

		if (failSafe == null || failSafe == "")
		{
			failMessage = new string_id (CONVO, "npc_failure");
		}

		chat.chat (self, failMessage);
		missionFailure(self,speaker,questNum);
		return SCRIPT_OVERRIDE;
	}

	// This is where the NPC can't find a good location to spawn an NPC or an NPC wasn't able to spawn because
	// of a typo or some other problem.  This is the graceful conclusion of such a problem.
	else if (hasObjVar (speaker, questID + ".noloc"))
	{
		string_id noLocMessage = new string_id (CONVO, "npc_noloc_" + questNum);
		chat.chat (self, noLocMessage);
		resetPlayer(self, speaker, questNum);
		return SCRIPT_OVERRIDE;
	}

	// You've finished this guys mission and you're back for your reward(s).
	else if (hasObjVar (speaker, questID + ".done"))
	{
		if (questType == "fetch" || questType == "retrieve")
		{
			obj_id playerInv = utils.getInventoryContainer(speaker);
			if (checkForItem(playerInv, speaker, questNum) == true)
			{
				string_id rewardMessage = new string_id (CONVO, "npc_reward_" + questNum);
				chat.chat (self, rewardMessage);
				obj_id retrieveObject = getObjIdObjVar (speaker, questID + ".deliver");
				destroyObject (retrieveObject);
				giveReward(self, speaker, questNum);
				return SCRIPT_OVERRIDE;
			}
			else
			{
				string notit = "notit_" + questNum;
				string response1 = "player_reset_" + questNum;
				string response2 = "player_sorry_" + questNum;

				string_id greeting = new string_id (CONVO,notit);

				string_id response[] = new string_id [2];
				response[0] = new string_id (CONVO, response1);

				string answer = getString (response[0]);

				if (answer == null || answer == "")
				{
					response1 = "player_reset";
					response[0] = new string_id (CONVO, response1);
				}

				response[1] = new string_id (CONVO, response2);

				string answer2 = getString (response[0]);

				if (answer == null || answer == "")
				{
					response2 = "player_sorry";
					response[1] = new string_id (CONVO, response2);
				}

				npcStartConversation (speaker, self, "questConvo", greeting, response);

				return SCRIPT_CONTINUE;
			}
		}
		else if (questType == "escort" || questType == "arrest" || questType == "rescue")
		{
			location alaska = getLocation (self);
			obj_id[] creatures = getObjectsInRange 	(alaska, 20);
			obj_id theVip = getObjIdObjVar (speaker, questID + ".vip");

			boolean goodEscort = false;

			int numCreature = creatures.length;
			int x = 0;
			while (x < numCreature)
			{
				if (creatures[x] != null)
				{
					obj_id thisOne = creatures[x];
					if (theVip == thisOne)
					{
						goodEscort = true;
					}
					x = x + 1;
				}
			}

			if (goodEscort = true)
			{
				string_id reward = new string_id(CONVO, "npc_reward_" + questNum);
				chat.chat (self, reward);
				giveReward(self, speaker, questNum);
				return SCRIPT_CONTINUE;
			}
			else
			{
				string_id didnt = new string_id (CONVO, "npc_failure_" + questNum);
				chat.chat (self, didnt);
				return SCRIPT_CONTINUE;
			}
		}
		else
		{

			string_id reward = new string_id(CONVO, "npc_reward_" + questNum);
			chat.chat (self, reward);
			giveReward(self, speaker, questNum);
			return SCRIPT_CONTINUE;
		}
	}

	//Assuming you had none of the above objvars you may be on a quest for someone else.  This is where
	//we get slick and let you quit out other quests from any quest NPC (just in case).
	else if (isOnQuest(speaker))
	{
		// Whenever an NPC gives a player a quest he puts his datatable on the PC until it's done
		// so that other NPC's can see it (like a brand) and say, "Hey you're busy."
		string player_quest_table = getStringObjVar (speaker, "quest_table");

		// This inidcates an issue, but is here for safety valve purposes
		if (player_quest_table == null)
		{
			player_quest_table = "empty";
		}

		// If the players table matches the NPC's table, then he's on a mission for this NPC, but doesn't
		// have any objvars.  This indicates that he's in the middle of a quest and the NPC gives him the
		// option to quit out of the quest or continue on.
		if (player_quest_table == datatable)
		{
			string npcGreet = "npc_work_" + questNum;
			string response1 = "player_reset_" + questNum;
			string response2 = "player_sorry_" + questNum;

			string_id greeting = new string_id (CONVO,npcGreet);

			string_id response[] = new string_id [2];
			response[0] = new string_id (CONVO, response1);

			string answer = getString (response[0]);

			if (answer == null || answer == "")
			{
				response1 = "player_reset";
				response[0] = new string_id (CONVO, response1);
			}
			response[1] = new string_id (CONVO, response2);

			string answer2 = getString (response[0]);

			if (answer == null || answer == "")
			{
				response2 = "player_sorry";
				response[1] = new string_id (CONVO, response2);
			}


			npcStartConversation (speaker, self, "questConvo", greeting, response);
		}
		// Otherwise the player may want to quit out of somebody else's quests to take this guy's quest
		else
		{
			string npcGreet = "quit_quest";
			string response1 = "player_quit";
			string response2 = "player_continue";

			string_id greeting = new string_id ("static_npc/default_dialog",npcGreet);

			string_id response[] = new string_id [2];
			response[0] = new string_id ("static_npc/default_dialog", response1);
			response[1] = new string_id ("static_npc/default_dialog", response2);

			npcStartConversation (speaker, self, "questConvo", greeting, response);
		}

		return SCRIPT_CONTINUE;
	}

	else if (dataTableHasColumn (datatable, "gating_level_amt"))
	{
		int playerLevel = getLevel( speaker );
		int npcLevel = dataTableGetInt (datatable, questNum, "gating_level_amt");

		if (playerLevel < (npcLevel))
		{
			string tooWeak = "too_weak";

			string_id greeting = new string_id (ALT_CONVO,tooWeak);

			chat.chat (self, greeting);

		}

		else if (playerLevel > (npcLevel + 5))
		{
			string tooStrong = "too_strong";
			string response1 = "its_ok";

			string_id greeting = new string_id (ALT_CONVO,tooStrong);

			string_id response[] = new string_id [1];
			response[0] = new string_id (ALT_CONVO, response1);

			npcStartConversation (speaker, self, "questConvo", greeting, response);
		}
		else
		{
			string npcGreet = "npc_1_" + questNum;
			string response1 = "player_1_" + questNum;
			string response2 = "player_2_" + questNum;
			string response3 = "player_3_" + questNum;

			string_id greeting = new string_id (CONVO,npcGreet);

			string_id response[] = new string_id [3];
			response[0] = new string_id (CONVO, response1);
			response[1] = new string_id (CONVO, response2);
			response[2] = new string_id (CONVO, response3);

			npcStartConversation (speaker, self, "questConvo", greeting, response);
		}

	}

	else if (convoType == "terse")
	{
		string npcGreet = "npc_1_" + questNum;
		string response1 = "player_1_" + questNum;
		string response2 = "player_2_" + questNum;

		string_id greeting = new string_id (CONVO,npcGreet);

		string_id response[] = new string_id [2];
		response[0] = new string_id (CONVO, response1);
		response[1] = new string_id (CONVO, response2);

		npcStartConversation (speaker, self, "questConvo", greeting, response);
	}

	else if (convoType == "long")
	{
		string npcGreet = "npc_1_" + questNum;
		string response1 = "player_1_" + questNum;
		string response2 = "player_2_" + questNum;
		string response3 = "player_3_" + questNum;
		string response4 = "player_4_" + questNum;

		string_id greeting = new string_id (CONVO,npcGreet);

		string_id response[] = new string_id [4];
		response[0] = new string_id (CONVO, response1);
		response[1] = new string_id (CONVO, response2);
		response[2] = new string_id (CONVO, response3);
		response[3] = new string_id (CONVO, response4);
		npcStartConversation (speaker, self, "questConvo", greeting, response);
	}

	else if (convoType == "verbose")
	{
		string npcGreet = "npc_1_" + questNum;
		string response1 = "player_1_" + questNum;
		string response2 = "player_2_" + questNum;
		string response3 = "player_3_" + questNum;
		string response4 = "player_4_" + questNum;
		string response5 = "player_5_" + questNum;

		string_id greeting = new string_id (CONVO,npcGreet);

		string_id response[] = new string_id [5];
		response[0] = new string_id (CONVO, response1);
		response[1] = new string_id (CONVO, response2);
		response[2] = new string_id (CONVO, response3);
		response[3] = new string_id (CONVO, response4);
		response[4] = new string_id (CONVO, response5);
		npcStartConversation (speaker, self, "questConvo", greeting, response);
	}
	else
	{
		string npcGreet = "npc_1_" + questNum;
		string response1 = "player_1_" + questNum;
		string response2 = "player_2_" + questNum;
		string response3 = "player_3_" + questNum;

		string_id greeting = new string_id (CONVO,npcGreet);

		string_id response[] = new string_id [3];
		response[0] = new string_id (CONVO, response1);
		response[1] = new string_id (CONVO, response2);
		response[2] = new string_id (CONVO, response3);

		npcStartConversation (speaker, self, "questConvo", greeting, response);
	}
	return SCRIPT_CONTINUE;
}

trigger OnNpcConversationResponse (string convo, obj_id player, string_id response)
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	string gatingString = dataTableGetString (datatable, 1, "overall_objvar");

	int gating = getIntObjVar (player, gatingString);
	int questNum = gating;
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string ALT_CONVO = "static_npc/default_dialog";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string convoStyle = dataTableGetString (datatable, questNum, "quest_giver_convo");

	location home = new location();
	obj_id npcOrBldg = getTopMostContainer (self);
	if (npcOrBldg == self)
	{
		home = getLocation(self);
	}
	else
	{
		home = getLocation (npcOrBldg);
	}

	string response1 = "player_1_" + questNum;
	string response2 = "player_2_" + questNum;
	string response3 = "player_3_" + questNum;
	string response4 = "player_4_" + questNum;
	string response5 = "player_5_" + questNum;
	string response6 = "player_sorry_" + questNum;
	string response7 = "player_reset_" + questNum;
	string response8 = "player_quit";
	string response9 = "player_continue";
	string response10 = "player_sorry";
	string response11 = "player_reset";
	string response12 = "its_ok";

	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	if ( response.getAsciiId().equals(response1)) //
 	{
 		int xCoord = dataTableGetInt (datatable, questNum, "quest_x_loc");
 		if (xCoord != 0)
 		{
 			int yCoord = dataTableGetInt (datatable, questNum, "quest_y_loc");
 			int zCoord = dataTableGetInt (datatable, questNum, "quest_z_loc");
 			string planet = dataTableGetString (datatable, questNum, "quest_planet_loc");

			location questLoc = new location (xCoord, yCoord, zCoord, planet, null);
			string npcAnswer1 = "npc_2_" + questNum;
			string_id message = new string_id (CONVO, npcAnswer1);
			npcSpeak(player, message);
			npcEndConversation (player);
			if (questID != null && questID != "")
			{
				setObjVar (player, questID + ".questLoc", questLoc);
				setObjVar(player, questID + ".questNum", questNum);
				setObjVar(player, questID + ".home", home);
				setObjVar (player, "quest_table", datatable);
				attachScript(player, playerScript);
			}
			else
			{
				debugSpeakMsg (self, "Sorry, I can't give you a job right now...");
				return SCRIPT_OVERRIDE;
			}

			if (type == "smuggle" || type == "deliver")
			{
				obj_id playerInv = utils.getInventoryContainer(player);
				string itemToDeliver = dataTableGetString (datatable, questNum, "deliver_object");
				obj_id cargo = createObjectOverloaded(itemToDeliver, playerInv);
				if (!isIdValid(cargo))
				{
					destroyObject (cargo);
					string_id come_back = new string_id ("generic_convo", "inv_full");
					npcSpeak (player, come_back);
					npcEndConversation (player);
					resetPlayer (self, player, questNum);
					return SCRIPT_OVERRIDE;
				}
			}
 		}
 		else
 		{
			location target = quests.getThemeParkLocation (self);
			if (target == null)
			{
				string noLoc = "npc_noloc_" + questNum;
				string_id message = new string_id (CONVO, noLoc);
				chat.chat (self, message);
				npcEndConversation(player);
				return SCRIPT_CONTINUE;
			}
			else
			{
				if (questID != null && questID != "")
				{

					setObjVar (player, questID + ".questLoc", target);
					setObjVar(player, questID + ".questNum", questNum);
					setObjVar(player, questID + ".home", home);
					setObjVar (player, "quest_table", datatable);
					attachScript(player, playerScript);
				}
				else
				{
					debugSpeakMsg (self, "Sorry, I can't give you a job right now...");
					return SCRIPT_OVERRIDE;
				}

				if (type == "smuggle" || type == "deliver")
				{
					obj_id playerInv = utils.getInventoryContainer(player);
					string itemToDeliver = dataTableGetString (datatable, questNum, "deliver_object");
					obj_id cargo = createObjectOverloaded (itemToDeliver, playerInv);
					if (!isIdValid(cargo))
					{
						destroyObject (cargo);
						string_id come_back = new string_id ("generic_convo", "inv_full");
						npcSpeak (player, come_back);
						npcEndConversation (player);
						resetPlayer (self, player, questNum);
						return SCRIPT_OVERRIDE;
					}
				}
			}
			string npcAnswer1 = "npc_2_" + questNum;
			string_id message = new string_id (CONVO, npcAnswer1);
			npcSpeak(player, message);
			npcEndConversation (player);

		}
		return SCRIPT_CONTINUE;
 	}

 	if ( response.getAsciiId().equals(response2) ) //
 	{
 		string npcAnswer2 = "npc_3_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer2);//
 		npcSpeak(player, message);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response3) )
	{
		npcRemoveConversationResponse ( player, new string_id (CONVO, response3)); //
		string npcAnswer3 = "npc_4_" + questNum;
		string_id message = new string_id (CONVO, npcAnswer3);//
		npcSpeak (player, message);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response4) )
	{
		npcRemoveConversationResponse ( player, new string_id (CONVO, response4)); //
		string npcAnswer4 = "npc_5_" + questNum;
		string_id message = new string_id (CONVO, npcAnswer4);//
		npcSpeak (player, message);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response5) )
	{
		npcRemoveConversationResponse ( player, new string_id (CONVO, response5)); //
		string npcAnswer5 = "npc_6_" + questNum;
		string_id message = new string_id (CONVO, npcAnswer5);//
		npcSpeak (player, message);
		return SCRIPT_CONTINUE;
	}


 	if ( response.getAsciiId().equals(response6) ) //
 	{
 		string npcAnswer4 = "npc_backtowork_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer4);//
 		npcSpeak(player, message);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response7) ) //
	{
		string npcAnswer5 = "npc_reset_" + questNum;
		string_id message = new string_id (CONVO, npcAnswer5);//
		npcSpeak(player, message);
		resetPlayer(self, player, questNum);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response8) ) //
	{
		string npcAnswer6 = "npc_quit";
		string_id message = new string_id ("static_npc/default_dialog", npcAnswer6);//
		npcSpeak(player, message);
		resetOtherQuest(self, player);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response9) ) //
	{
		string npcAnswer7 = "npc_continue";
		string_id message = new string_id ("static_npc/default_dialog", npcAnswer7);//
		npcSpeak(player, message);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

 	if ( response.getAsciiId().equals(response10) ) //
 	{
 		string npcAnswer4 = "npc_backtowork_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer4);//
 		npcSpeak(player, message);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

	if ( response.getAsciiId().equals(response11) ) //
	{
		string npcAnswer5 = "npc_reset_" + questNum;
		string_id message = new string_id (CONVO, npcAnswer5);//

		string answer = getString(message);

		if (answer == null || answer == "")
		{
			npcAnswer5 = "npc_reset";
			message = new string_id (CONVO, npcAnswer5);
		}

		npcSpeak(player, message);
		resetPlayer(self, player, questNum);
		npcEndConversation (player);
		return SCRIPT_CONTINUE;
	}

 	if ( response.getAsciiId().equals(response12) ) //
 	{
		string convoType = dataTableGetString (datatable, questNum, "quest_giver_convo");

		if (convoType == "terse")
		{

			string_id message = new string_id (CONVO, "npc_1_" + questNum);

			npcSpeak(player, message);
			npcRemoveConversationResponse ( player, new string_id (ALT_CONVO, response12));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_1_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_2_" + questNum));
			return SCRIPT_CONTINUE;
		}

		else if (convoType == "long")
		{
			string_id message = new string_id (CONVO, "npc_1_" + questNum);

			npcSpeak(player, message);
			npcRemoveConversationResponse ( player, new string_id (ALT_CONVO, response12));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_1_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_2_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_3_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_4_" + questNum));

			return SCRIPT_CONTINUE;

		}

		else if (convoType == "verbose")
		{

			string_id message = new string_id (CONVO, "npc_1_" + questNum);

			npcSpeak(player, message);
			npcRemoveConversationResponse ( player, new string_id (ALT_CONVO, response12));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_1_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_2_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_3_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_4_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_5_" + questNum));
			return SCRIPT_CONTINUE;
		}

		else
		{
			string_id message = new string_id (CONVO, "npc_1_" + questNum);

			npcSpeak(player, message);
			npcRemoveConversationResponse ( player, new string_id (ALT_CONVO, response12));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_1_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_2_" + questNum));
			npcAddConversationResponse ( player, new string_id (CONVO, "player_3_" + questNum));
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;

}

void giveReward (obj_id self, obj_id player, int questNum)
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string gatingString = dataTableGetString (datatable, questNum, "overall_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	int gating = getIntObjVar (player, gatingString);
	gating = gating + 1;
	setObjVar (player, gatingString, gating);

	string type = dataTableGetString (datatable, questNum, "quest_type");
	if (type == "arrest" || type == "escort" || type == "rescue")
	{
		obj_id vip = getObjIdObjVar (player, questID + ".vip");
		messageTo (vip, "stopFollowing", null, 0, true);
	}

	obj_id playerInv = utils.getInventoryContainer(player);

	string reward = dataTableGetString (datatable, questNum, "reward");
	string reward2 = dataTableGetString (datatable, questNum, "reward2");
	string reward3 = dataTableGetString (datatable, questNum, "reward3");
	string reward4 = dataTableGetString (datatable, questNum, "reward4");

	if (reward != null && reward != "" && reward != "none")
	{
		obj_id rewardObject = null;
		if(reward.startsWith("object/weapon/"))
		{
			rewardObject = weapons.createWeapon(reward, playerInv, rand(0.5f, 0.85f));
		}
		else
		{
			rewardObject = createObjectOverloaded (reward, playerInv);
		}

		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar = dataTableGetString (datatable, questNum, "reward_objvar");
		int value = dataTableGetInt (datatable, questNum, "reward_objvar_value");
		if (objvar != null)
		{
			setObjVar (rewardObject, objvar, value);
		}
	}

	if (reward2 != null && reward2 != "" && reward2 != "none")
	{
		obj_id rewardObject2 = null;
		if(reward.startsWith("object/weapon/"))
		{
			rewardObject2 = weapons.createWeapon(reward2, playerInv, rand(0.5f, 0.85f));
		}
		else
		{
			rewardObject2 = createObjectOverloaded (reward2, playerInv);
		}

		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar2 = dataTableGetString (datatable, questNum, "reward2_objvar");
		int value2 = dataTableGetInt (datatable, questNum, "reward2_objvar_value");
		if (objvar2 != null)
		{
			setObjVar (rewardObject2, objvar2, value2);
		}
	}

	if (reward3 != null && reward3 != "" && reward3 != "none")
	{
		obj_id rewardObject3 = null;
		if(reward.startsWith("object/weapon/"))
		{
			rewardObject3 = weapons.createWeapon(reward3, playerInv, rand(0.5f, 0.85f));
		}
		else
		{
			rewardObject3 = createObjectOverloaded (reward3, playerInv);
		}

		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar3 = dataTableGetString (datatable, questNum, "reward3_objvar");
		int value3 = dataTableGetInt (datatable, questNum, "reward3_objvar_value");
		if (objvar3 != null)
		{
			setObjVar (rewardObject3, objvar3, value3);
		}
	}

	if (reward4 != null && reward4 != "" && reward4 != "none")
	{
		obj_id rewardObject4 = null;
		if(reward.startsWith("object/weapon/"))
		{
			rewardObject4 = weapons.createWeapon(reward4, playerInv, rand(0.5f, 0.85f));
		}
		else
		{
			rewardObject4 = createObjectOverloaded (reward4, playerInv);
		}

		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar4 = dataTableGetString (datatable, questNum, "reward4_objvar");
		int value4 = dataTableGetInt (datatable, questNum, "reward4_objvar_value");
		if (objvar4 != null)
		{
			setObjVar (rewardObject4, objvar4, value4);
		}
	}

	int credits = dataTableGetInt (datatable, questNum, "credits");
	if (credits != 0)
	{
		money.bankTo(money.ACCT_JABBA, player, credits);
		sendSystemMessage (player, credits + " credits have been deposited in your bank account.", null);
	}

	string factionReward = dataTableGetString (datatable, questNum, "faction reward");
	string factionReward2 = dataTableGetString (datatable, questNum, "faction_reward2");
	string factionReward3 = dataTableGetString (datatable, questNum, "faction_reward3");
	string factionReward4 = dataTableGetString (datatable, questNum, "faction_reward4");

	if (factionReward != "none")
	{
		int factionAmt = dataTableGetInt (datatable, questNum, "faction_reward_amount");
		if (factionAmt != 0)
		{
			factions.addFactionStanding(player,factionReward,factionAmt);
		}
	}

	if (factionReward2 != "none")
	{
		int factionAmt2 = dataTableGetInt (datatable, questNum, "faction_reward2_amount");
		if (factionAmt2 != 0)
		{
			factions.addFactionStanding(player,factionReward2,factionAmt2);
		}
	}

	if (factionReward3 != "none")
	{
		int factionAmt3 = dataTableGetInt (datatable, questNum, "faction_reward3_amount");
		if (factionAmt3 != 0)
		{
			factions.addFactionStanding(player,factionReward3,factionAmt3);
		}
	}

	if (factionReward4 != "none")
	{
		int factionAmt4 = dataTableGetInt (datatable, questNum, "faction_reward4_amount");
		if (factionAmt4 != 0)
		{
			factions.addFactionStanding(player,factionReward4,factionAmt4);
		}
	}

	obj_id waypoint = getObjIdObjVar (player, questID + ".waypointhome");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, player);
	}

	removeObjVar (player, questID);
	removeObjVar (player, "quest_table");
	removeObjVar (player, "questNum");

	if (hasScript (player, playerScript))
	{
		detachScript (player, playerScript);
	}
	return;
}

void resetPlayer (obj_id self, obj_id player, int questNum)
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string gatingString = dataTableGetString (datatable, questNum, "overall_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	//DO SOMETHING WITH GATING HERE, IF IT'S 1 REMOVE IT, OTHER WISE MAKE SURE IT'S RIGHT

	obj_id waypoint = getObjIdObjVar (player, questID + ".waypoint");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, player);
	}

	string type = dataTableGetString (datatable, questNum, "quest_type");
	if (type == "escort" || type == "arrest")
	{
		obj_id vip = getObjIdObjVar (player, questID + ".vip");
		messageTo (vip, "stopFollowing", null, 0, true);
	}

	removeObjVar (player, questID);
	removeObjVar (player, "quest_table");
	removeObjVar (player, "questNum");

	if (hasScript (player, playerScript))
	{
		detachScript (player, playerScript);
	}

	return;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable,  questNum, "retrieve_object");
	boolean hadIt = false;

	hadIt = utils.playerHasItemByTemplate(player, giveMe);

	return hadIt;
}

boolean checkForGatingItem (obj_id inv, obj_id player, int questNum, string datatable)
{
	string giveMe = dataTableGetString (datatable,  questNum, "gating_object");
	boolean hadIt = false;

	hadIt = utils.playerHasItemByTemplate(player, giveMe);

	return hadIt;
}


void missionFailure (obj_id self, obj_id player, int questNum)
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string gatingString = dataTableGetString (datatable, questNum, "overall_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");

	obj_id waypoint = getObjIdObjVar (player, questID + ".waypointhome");
	if (waypoint != null)
	{
		destroyWaypointInDatapad(waypoint, player);
	}

	string type = dataTableGetString (datatable, questNum, "quest_type");
	if (type == "escort" || type == "arrest")
	{
		obj_id vip = getObjIdObjVar (player, questID + ".vip");
		messageTo (vip, "stopFollowing", null, 0, true);
	}

	removeObjVar (player, questID);
	removeObjVar (player, "quest_table");
	removeObjVar (player, "questNum");

	if (hasScript (player, playerScript))
	{
		detachScript (player, playerScript);
	}
	return;
}

//const string FACETO_VOLUME_NAME = "faceToTriggerVolume";
//createTriggerVolume( FACETO_VOLUME_NAME, 8.0f, true );
trigger OnTriggerVolumeEntered( string volumeName, obj_id breacher )
{
	if ( !isPlayer( breacher ) )
	{
		//debugSpeakMsg( self, "you are not a player" );
		return SCRIPT_CONTINUE;
	}

	if ( volumeName != FACETO_VOLUME_NAME )
		return SCRIPT_CONTINUE;

	if ( isInNpcConversation(self) )
		return SCRIPT_CONTINUE;

	if ( canSee( self, breacher ) )
		faceTo( self, breacher );

	return SCRIPT_CONTINUE;
}

void resetOtherQuest (obj_id self, obj_id player)
{
	string datatable = "datatables/npc/static_quest/all_quest_names.iff";
	string[] questIDs = dataTableGetStringColumnNoDefaults (datatable, "quest_ids");

	if (questIDs == null)
	{
		return;
	}

	for ( int i = 0; i < questIDs.length; ++i )
	{
		if ( hasObjVar (player, questIDs[i] + ".waypoint"))
		{
			obj_id waypoint = getObjIdObjVar (player, questIDs[i] + ".waypoint");

			if (waypoint != null)
			{
				destroyWaypointInDatapad(waypoint, player);
			}

			obj_id waypointhome = getObjIdObjVar (player, questIDs[i] + ".waypointhome");

			if (waypointhome != null)
			{
				destroyWaypointInDatapad(waypointhome, player);
			}

		}

		if (hasObjVar (player, questIDs[i] + ".escort"))
		{
			obj_id vip = getObjIdObjVar (player, questIDs[i] + ".escort");
			messageTo (vip, "stopFollowing", null, 2, true);
		}

		if (hasObjVar (player, questIDs[i]))
		{
			removeObjVar (player, questIDs[i]);
		}
	}

	string[] questScripts = dataTableGetStringColumnNoDefaults (datatable, "quest_scripts");

	if (questScripts == null)
	{
		return;
	}

	for (int x = 0; x < questScripts.length; ++x )
	{
		if (hasScript (player, questScripts[x]))
		{
			detachScript (player, questScripts[x]);
		}
	}

	removeObjVar (player, "quest_table");
	removeObjVar (player, "questNum");
	return;
}

boolean isOnQuest (obj_id player)
{
	if (hasScript (player, "npc.static_quest.quest_player"))
	{
		return true;
	}

	if (hasScript (player, "npc.random_quest.quest_player"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.imperial.quest_player"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.rebel.quest_player"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.jabba.quest_player"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.jabba.quest_bldg"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.jabba.quest_rantok"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.rebel.quest_bldg"))
	{
		return true;
	}

	if (hasScript (player, "theme_park.imperial.quest_bldg"))
	{
		return true;
	}
	else
	{
		return false;
	}
}
