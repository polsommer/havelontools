include library.quests;
include library.ai_lib;
include library.chat;
include library.utils;
include ai.ai_combat;
include library.money;
include library.create;
include library.factions;

trigger OnAttach()
{
	messageTo (self, "setupSelf", null, 4, true);
	return SCRIPT_CONTINUE;
}	

trigger OnStartNpcConversation (obj_id speaker)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string CONVO = dataTableGetString (datatable, questNum, "convo");	
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string convoType = dataTableGetString (datatable, questNum, "quest_npc_convo");
	
	if (ai_lib.isInCombat(self) || ai_lib.isInCombat(speaker))
		return SCRIPT_OVERRIDE;

	if (hasObjVar (speaker, questID + ".vip"))
	{
		if (type == "rescue" || type == "escort" || type == "arrest")
		{
			string restart = "I'm sorry, could you say that one more time?";
			chat.chat (self, restart);
			attachScript (self, "npc.static_npc.quest_npc");
			detachScript (self, "npc.static_npc.quest_finish");
			return SCRIPT_OVERRIDE;
		}			
		else if (type == "smuggle" || type == "deliver")
		{
			obj_id playerInv = utils.getInventoryContainer(speaker);
			if (checkForItem(playerInv, speaker, questNum) == true || hasObjVar (speaker, questID + ".done"))
			{
				if (!hasObjVar (speaker, questID + ".done"))
				{
					messageTo (speaker, "finishStaticQuest", null, 0, true);
					giveReward(self, speaker, questNum);
				}
				
				if (convoType == "normal")
				{
					string npcGreet = "npc_smuggle_" + questNum;
					string response1 = "player_more_1_" + questNum;
					
					string_id greeting = new string_id (CONVO,npcGreet);
					
					string_id response[] = new string_id [1];
					response[0] = new string_id (CONVO, response1);
					
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}

				else if (convoType == "extended")
				{
					string npcGreet = "npc_smuggle_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;
					string_id greeting = new string_id (CONVO,npcGreet);
					string_id response[] = new string_id [2];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
	
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}
				else if (convoType == "verbose")
				{
					string npcGreet = "npc_smuggle_" + questNum;
					string response1 = "player_more_1_" + questNum;
					string response2 = "player_more_2_" + questNum;
					string response3 = "player_more_3_" + questNum;
					string_id greeting = new string_id (CONVO,npcGreet);
		
					string_id response[] = new string_id [3];
					response[0] = new string_id (CONVO, response1);
					response[1] = new string_id (CONVO, response2);
					response[2] = new string_id (CONVO, response3);
					npcStartConversation (speaker, self, "questConvo", greeting, response);
				}
			}	
			else
			{
				string_id work = new string_id(CONVO, "gotowork");
				chat.chat (self, work);
				return SCRIPT_CONTINUE;	
			
			}					
		}					
		return SCRIPT_CONTINUE;
	}			
	else 
	{
		string_id work = new string_id(CONVO, "otherescort");
		chat.chat (self, work);
		return SCRIPT_CONTINUE;
	}				
}

trigger OnNpcConversationResponse (string convo, obj_id player, string_id response)
{
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");
	string convoStyle = dataTableGetString (datatable, questNum, "quest_giver_convo");
		
	string response1 = "player_more_1_" + questNum;
	string response2 = "player_more_2_" + questNum;
	string response3 = "player_more_3_" + questNum;
		
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
		
	if ( response.getAsciiId().equals(response1)) // 
 	{
 		string npcAnswer1 = "npc_more_1_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer1);// 
 		npcSpeak(player, message);
		npcRemoveConversationResponse (player, new string_id (CONVO, response1));
		return SCRIPT_CONTINUE;
	}
 	if ( response.getAsciiId().equals(response2) ) //
 	{
 		string npcAnswer2 = "npc_more_2_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer2);// 
 		npcSpeak(player, message);
		npcRemoveConversationResponse (player, new string_id (CONVO, response2));
		return SCRIPT_CONTINUE;
	}
	
	if ( response.getAsciiId().equals(response3) )
	{
 		string npcAnswer3 = "npc_more_3_" + questNum;
 		string_id message = new string_id (CONVO, npcAnswer3);// 
 		npcSpeak(player, message);
 		if (type == "info")
 		{
 			messageTo (player, "finishStaticQuest", null, 0, true);
 			giveReward(self, player, questNum);
		} 			
		npcRemoveConversationResponse (player, new string_id (CONVO, response3));
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;


}
trigger OnIncapacitated (obj_id killer)
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	
	if (type == "destroy")
	{
		messageTo (player, "finishStaticQuest", null, 0, true);
		giveReward(self, player, questNum);
		return SCRIPT_CONTINUE;
	}
	else if (type == "fetch")
	{
		string reward = dataTableGetString (datatable, questNum, "retrieve_object");	
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
		messageTo (player, "finishStaticQuest", null, 0, true);
		giveReward(self, player, questNum);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}	

messageHandler followPlayer()
{
	obj_id player = params.getObjId ("player");
	ai_lib.aiFollow(self, player);
	return SCRIPT_CONTINUE;
}

messageHandler stopFollowing()
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	int questNum = getIntObjVar (self, "questNum");	
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");	
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	
	debugSpeakMsg (self, "Thanks for bringing me back.");
	obj_id player = params.getObjId ("player");
	ai_lib.aiStopFollowing (self);
	detachScript (player, playerScript);
	
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
	}
	else
	{
		debugSpeakMsg (player, "This mission didn't get completed...");
		return SCRIPT_OVERRIDE;
	}		
	messageTo (self, "cleanUp", null, 30, true);
	return SCRIPT_CONTINUE;
}	


messageHandler setupSelf ()
{
	string datatable = getStringObjVar (self, "quest_table");
	if (datatable == null)
	{
		setObjVar (self, "NO SCRIPT", 1);
		return SCRIPT_OVERRIDE;
	}		
	int questNum = getIntObjVar (self, "questNum");
	string type = dataTableGetString (datatable, questNum, "quest_type");
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	
	if (type == "rescue" || type == "smuggle" || type == "deliver" || type == "arrest" || type == "escort")
	{
		attachScript (self, "npc.converse.npc_converse_menu");
	}		
	messageTo (self, "spawnExtras", null, 0, true);
	return SCRIPT_CONTINUE;
}	

messageHandler saySomething()
{
	string datatable = getStringObjVar (self, "quest_table");
	obj_id player = getObjIdObjVar (self, "player");
	int questNum = getIntObjVar (self, "questNum");		
	string type = dataTableGetString (datatable, questNum, "quest_type");
	string CONVO = dataTableGetString (datatable, questNum, "convo");	
		
	string something = "npc_breech_" + questNum;
	string_id message = new string_id (CONVO, something);
	chat.chat (self, message);
	
	if (type == "destroy" || type == "fetch")
	{
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}	

messageHandler giveReward()
{
	obj_id player = params.getObjId ("player");
	string datatable = getStringObjVar (player, "quest_table");
	int questNum = getIntObjVar (self, "quest");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string reward = dataTableGetString (datatable, questNum, "reward");
	
	if (reward == "credits")
	{
		money.bankTo(money.ACCT_JABBA, player, 100);		
	}
	else
	{
		obj_id playerInv = utils.getInventoryContainer(player);
		createObject (reward, playerInv, "");
	}		
	if (questID != null && questID != "")
	{
		setObjVar (player, questID + ".done", 1);
	}		
	messageTo (player, "finishStaticQuest", null, 0, true);
	detachScript (player, playerScript);
	return SCRIPT_CONTINUE;
}

boolean checkForItem (obj_id inv, obj_id player, int questNum)
{
	string datatable = getStringObjVar (player, "quest_table");
	string giveMe = dataTableGetString (datatable,  questNum, "deliver_object");
	boolean hadIt = false;

	obj_id[] contents = getContents(inv);
	for ( int i = 0; i < contents.length; i++ )
	{
		string itemInInventory = getTemplateName (contents[i]);
		if (itemInInventory == giveMe)
		{
			destroyObject (contents[i]);
			hadIt = true;
		}			
	}
	return hadIt;
}	

messageHandler spawnExtras()
{
	obj_id player = getObjIdObjVar (self, "player");
	string datatable = getStringObjVar (self, "quest_table");
	int questNum = getIntObjVar (self, "questNum");
	location here = getLocation (self);
	
	
	string spawn = dataTableGetString (datatable, questNum, "extra_npc");
	string spawn2 = dataTableGetString (datatable, questNum, "extra_npc2");
	string spawn3 = dataTableGetString (datatable, questNum, "extra_npc3");
	string spawn4 = dataTableGetString (datatable, questNum, "extra_npc4");
		
	if (spawn != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra = create.object (spawn, here);
		string disposition = dataTableGetString (datatable, questNum, "extra_npc_disposition");
		if (disposition == "aggro")
		{
			startCombat(extra, player);
		}		
	}		
	
	if (spawn2 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra2 = create.object (spawn2, here);
		string disposition2 = dataTableGetString (datatable, questNum, "extra_npc2_disposition");
		if (disposition2 == "aggro")
		{
			startCombat(extra2, player);
		}		
	}
	
	if (spawn3 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra3 = create.object (spawn3, here);
		string disposition3 = dataTableGetString (datatable, questNum, "extra_npc3_disposition");
		if (disposition3 == "aggro")
		{
			startCombat(extra3, player);
		}		
	}
	
	if (spawn4 != "none")
	{
		here.x = here.x + rand(5,20);
		here.z = here.z + rand(5,20);
		obj_id extra4 = create.object (spawn4, here);
		string disposition4 = dataTableGetString (datatable, questNum, "extra_npc4_disposition");
		if (disposition4 == "aggro")
		{
			startCombat(extra4, player);
		}		
	}
	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}	

void giveReward (obj_id self, obj_id player, int questNum)
{
	string datatable = getStringObjVar (self, "quest_table");
	datatable = "datatables/spawning/static_npc/" + datatable + ".iff";
	string questID = dataTableGetString (datatable, questNum, "temp_objvar");
	string gatingString = dataTableGetString (datatable, questNum, "overall_objvar");
	string playerScript = dataTableGetString (datatable, questNum, "player_script");
	int gating = getIntObjVar (player, gatingString);
	gating = gating + 1;
	setObjVar (player, gatingString, gating);
	
	string type = dataTableGetString (datatable, questNum, "quest_type");
	if (type == "rescue" || type == "arrest" || type == "escort")
	{
		obj_id vip = getObjIdObjVar (player, questID + ".vip");
		messageTo (vip, "stopFollowing", null, 0, true);
	}		
	
	obj_id playerInv = utils.getInventoryContainer(player);
	
	string reward = dataTableGetString (datatable, questNum, "reward");
	string reward2 = dataTableGetString (datatable, questNum, "reward2");
	string reward3 = dataTableGetString (datatable, questNum, "reward3");
	string reward4 = dataTableGetString (datatable, questNum, "reward4");
	
	if (reward != null)
	{
		obj_id rewardObject = createObject (reward, playerInv, "");
		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar = dataTableGetString (datatable, questNum, "reward_objvar");
		int value = dataTableGetInt (datatable, questNum, "reward_objvar_value");
		if (objvar != null)
		{
			setObjVar (rewardObject, objvar, value);
		}	
	}
	
	if (reward2 != null)	
	{
		obj_id rewardObject2 = createObject (reward2, playerInv, "");
		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar2 = dataTableGetString (datatable, questNum, "reward2_objvar");
		int value2 = dataTableGetInt (datatable, questNum, "reward2_objvar_value");
		if (objvar2 != null)
		{
			setObjVar (rewardObject2, objvar2, value2);
		}	
	}
	
	if (reward3 != null)
	{
		obj_id rewardObject3 = createObject (reward3, playerInv, "");
		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar3 = dataTableGetString (datatable, questNum, "reward3_objvar");
		int value3 = dataTableGetInt (datatable, questNum, "reward3_objvar_value");
		if (objvar3 != null)
		{
			setObjVar (rewardObject3, objvar3, value3);
		}	
	}
	
	if (reward4 != null)
	{
		obj_id rewardObject4 = createObject (reward4, playerInv, "");
		sendSystemMessage (player, "A gift has been placed in your inventory for completing this task.", null);
		string objvar4 = dataTableGetString (datatable, questNum, "reward4_objvar");
		int value4 = dataTableGetInt (datatable, questNum, "reward4_objvar_value");
		if (objvar4 != null)
		{
			setObjVar (rewardObject4, objvar4, value4);
		}			
	}
	
	
	int credits = dataTableGetInt (datatable, questNum, "credits");
	if (credits != 0)
	{	
		money.bankTo(money.ACCT_JABBA, player, credits);		
		sendSystemMessage (player, credits + " credits have been deposited in your bank account.", null);
	}
	
	string factionReward = dataTableGetString (datatable, questNum, "faction reward");
	string factionReward2 = dataTableGetString (datatable, questNum, "faction_reward2");
	string factionReward3 = dataTableGetString (datatable, questNum, "faction_reward3");
	string factionReward4 = dataTableGetString (datatable, questNum, "faction_reward4");
	
	if (factionReward != "none")
	{
		int factionAmt = dataTableGetInt (datatable, questNum, "faction_reward_amount");
		if (factionAmt != 0)
		{
			factions.addFactionStanding(player,factionReward,factionAmt);		
		}
	}		
	
	if (factionReward2 != "none")
	{
		int factionAmt2 = dataTableGetInt (datatable, questNum, "faction_reward2_amount");
		if (factionAmt2 != 0)
		{
			factions.addFactionStanding(player,factionReward2,factionAmt2);		
		}
	}		

	if (factionReward3 != "none")
	{
		int factionAmt3 = dataTableGetInt (datatable, questNum, "faction_reward3_amount");
		if (factionAmt3 != 0)
		{
			factions.addFactionStanding(player,factionReward3,factionAmt3);		
		}
	}		

	if (factionReward4 != "none")
	{
		int factionAmt4 = dataTableGetInt (datatable, questNum, "faction_reward4_amount");
		if (factionAmt4 != 0)
		{
			factions.addFactionStanding(player,factionReward4,factionAmt4);		
		}
	}		
	
	removeObjVar (player, questID);
	removeObjVar (player, "quest_table");
	removeObjVar (player, "questNum");
	
	if (hasScript (player, playerScript))
	{
		detachScript (player, playerScript);
	}		
	return;
}	
