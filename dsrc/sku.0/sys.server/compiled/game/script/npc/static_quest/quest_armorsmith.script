/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        <title>
 * Description:  <description>
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.utils;
include library.prose;
include library.money;
include library.chat;

/***** CONSTANTS *******************************************************/
// Scripts
const string SCRIPT_QUEST_ARMORSMITH		= "npc.static_quest.quest_armorsmith";

// Datatables
const string DATATABLE_ARMORSMITH_ITEMS		= "datatables/npc/static_quest/armorsmith.iff";

// System constants
const int QUEST_COST				= 50000;

// ObjVars
const string VAR_QUEST_ROOT_ARMORSMITH		= "profession_quest_status.armorsmith";

// Conversations/String ID's
const string CONVERSE_ARMORSMITH_QUEST		= "armorsmith_quest";
const string_id SID_GREETING			= new string_id("quest_armorsmith", "greeting");
const string_id SID_GREETING_COMPLETE		= new string_id("quest_armorsmith", "greeting");
const string_id SID_QUEST_1_START		= new string_id("quest_armorsmith", "quest_1_start");
const string_id SID_QUEST_1_START_NO		= new string_id("quest_armorsmith", "quest_1_start_no");
const string_id SID_QUEST_1_START_YES		= new string_id("quest_armorsmith", "quest_1_start_yes");
const string_id SID_QUEST_1_DESCRIPTION		= new string_id("quest_armorsmith", "quest_1_description");
const string_id SID_QUEST_2_QUERY		= new string_id("quest_armorsmith", "quest_2_query");
const string_id SID_QUEST_2_COMPLETE		= new string_id("quest_armorsmith", "quest_2_complete");
const string_id SID_QUEST_2_INCOMPLETE		= new string_id("quest_armorsmith", "quest_2_incomplete");
const string_id SID_QUEST_3_START		= new string_id("quest_armorsmith", "quest_3_start");
const string_id SID_QUEST_3_START_NO		= new string_id("quest_armorsmith", "quest_3_start_no");
const string_id SID_QUEST_4_QUERY		= new string_id("quest_armorsmith", "quest_4_query");
const string_id SID_QUEST_4_COMPLETE		= new string_id("quest_armorsmith", "quest_4_complete");
const string_id SID_QUEST_4_INCOMPLETE		= new string_id("quest_armorsmith", "quest_4_incomplete");
const string_id SID_ILLEGAL_RESPONSE		= new string_id("quest_armorsmith", "illegal_response");
const string_id SID_QUEST_5_START		= new string_id("quest_armorsmith", "quest_5_start");
const string_id SID_QUEST_5_START_NO		= new string_id("quest_armorsmith", "quest_5_start_no");
const string_id SID_QUEST_6_QUERY		= new string_id("quest_armorsmith", "quest_6_query");
const string_id SID_QUEST_6_COMPLETE		= new string_id("quest_armorsmith", "quest_6_complete");
const string_id SID_QUEST_6_INCOMPLETE		= new string_id("quest_armorsmith", "quest_6_incomplete");
const string_id SID_NOT_ENOUGH_MONEY		= new string_id("quest_armorsmith", "not_enough_money");
const string_id SID_CONVERSION			= new string_id("quest_armorsmith", "conversion_done");

// Responses
const string_id SID_YES_TO_QUEST_1_START	= new string_id("quest_armorsmith", "yes_to_quest_1_start");
const string_id SID_NO_TO_QUEST_1_START		= new string_id("quest_armorsmith", "no_to_quest_1_start");
const string_id SID_YES_TO_QUEST_2_QUERY	= new string_id("quest_armorsmith", "yes_to_quest_2_query");
const string_id SID_NO_TO_QUEST_2_QUERY		= new string_id("quest_armorsmith", "no_to_quest_2_query");
const string_id SID_YES_TO_QUEST_3_START	= new string_id("quest_armorsmith", "yes_to_quest_3_start");
const string_id SID_NO_TO_QUEST_3_START 	= new string_id("quest_armorsmith", "no_to_quest_3_start");
const string_id SID_YES_TO_QUEST_4_QUERY	= new string_id("quest_armorsmith", "yes_to_quest_4_query");
const string_id SID_NO_TO_QUEST_4_QUERY		= new string_id("quest_armorsmith", "no_to_quest_4_query");
const string_id SID_YES_TO_QUEST_5_START	= new string_id("quest_armorsmith", "yes_to_quest_5_start");
const string_id SID_NO_TO_QUEST_5_START 	= new string_id("quest_armorsmith", "no_to_quest_5_start");
const string_id SID_YES_TO_QUEST_6_QUERY	= new string_id("quest_armorsmith", "yes_to_quest_6_query");
const string_id SID_NO_TO_QUEST_6_QUERY		= new string_id("quest_armorsmith", "no_to_quest_6_query");

const string_id SID_YES				= new string_id("quest_armorsmith", "yes");
const string_id SID_NO				= new string_id("quest_armorsmith", "no");

/***** TRIGGERS ********************************************************/
trigger OnIncapacitated(obj_id killer)
{
	detachScript(self, SCRIPT_QUEST_ARMORSMITH);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int mnu = mi.addRootMenu (menu_info_types.CONVERSE_START, null);
	menu_info_data mdata = mi.getMenuItemById(mnu);
	mdata.setServerNotify(false);
	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{
	string_id[] valid_responses = new string_id[0];
	prose_package[] prose_responses = new prose_package[0];
	int stage = getArmorsmithQuestStage(speaker);
	prose_package pp;
	string name;
	//conversion script to see if players have completed scipt before or were partially through it
	if (hasOldRisBoot(speaker))
	{
		
		if (hasOldRisChest(speaker))
			fullSchematicConversion(speaker);
		else
			bootSchematicConversion(speaker);
		chat.chat(self, SID_CONVERSION);
		npcEndConversation(speaker);
		return SCRIPT_CONTINUE;		
	}
	
	
	switch (stage)
	{
		/*case -1:
			string_id message = new string_id("quest_armorsmith", "no_skill");
			chat.chat (self, message);
			break;*/
		case 0:
			// The armorsmith has yet to start the quest.
			pp = prose.getPackage(SID_QUEST_1_START, QUEST_COST);
			valid_responses = getConversationResponses(speaker, self, 1);
			npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, null, pp, valid_responses);
			break;
			
		case 1:
			// The armorsmith has paid the fee, but hasn't gotten the segment schematic.
			npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, SID_QUEST_1_DESCRIPTION, valid_responses);
			grantSchematic(speaker, "object/draft_schematic/armor/armor_segment_ris.iff");
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 2);
			break;
			
		case 2:
			// The armorsmith needs to return a crafted RIS armor segement.
			name = getArmorsmithQuestItemName(stage);
			if (name != null)
			{
				pp = prose.getPackage(SID_QUEST_2_QUERY, name);
				valid_responses = getConversationResponses(speaker, self, 3);
				npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, null, pp, valid_responses);
			}
			break;
			
		case 3:
			// The player has completed the segment quest, but has not started the layer quest.
			npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, SID_QUEST_3_START, valid_responses);
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 4);
			grantSchematic(speaker, "object/draft_schematic/armor/component/armor_layer_ris.iff");
			break;
		
		case 4:
			// The armorsmith needs to return a crafting RIS armor layer.
			name = getArmorsmithQuestItemName(stage);
			if (name != null)
			{
				pp = prose.getPackage(SID_QUEST_4_QUERY, name);
				valid_responses = getConversationResponses(speaker, self, 5);
				npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, null, pp, valid_responses);
			}
			break;
			
		case 5:
			// The armorsmith has completed the layer quest, but has not started the boot quest.
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 6);
			npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, SID_QUEST_5_START, valid_responses);
			grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_boots.iff");
			break;
		
		case 6:
			// The armorsmith needs to return the R.I.S. boots.
			name = getArmorsmithQuestItemName(stage);
			if (name != null)
			{
				pp = prose.getPackage(SID_QUEST_6_QUERY, name);
				valid_responses = getConversationResponses(speaker, self, 7);
				npcStartConversation(speaker, self, CONVERSE_ARMORSMITH_QUEST, null, pp, valid_responses);
			}
			break;
		
		case 7:
			// The quest is complete. There is nothing left to do.
			npcSpeak(speaker, SID_GREETING_COMPLETE);
			npcEndConversation(speaker);
			
		default:
			// Player is not eligable for the quest. Must be a master armorsmith.
			//npcSpeak
			chat.chat(self, SID_GREETING);
			npcEndConversation(speaker);
			break;
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnNpcConversationResponse (string convoName, obj_id speaker, string_id response)
{
	string_id[] valid_responses = new string_id[0];
	prose_package[] prose_responses = new prose_package[0];
	int stage = getArmorsmithQuestStage(speaker);
	prose_package pp;
	
	LOG("LOG_CHANNEL", "response ->" + response);
	
	if (stage == -1)
	{
		npcSpeak(speaker, SID_GREETING);
		npcEndConversation(speaker);
		return SCRIPT_CONTINUE;
	}

	if (response.equals(SID_NO_TO_QUEST_1_START))
	{
		npcSpeak(speaker, SID_QUEST_1_START_NO);
		npcEndConversation(speaker);
	}
	else if (response.equals(SID_YES_TO_QUEST_1_START))
	{
		if (stage == 0)
		{
			dictionary d = new dictionary();
			int total_money = getTotalMoney(speaker);
			if (total_money < QUEST_COST)
				npcSpeak(speaker, SID_NOT_ENOUGH_MONEY);
			else
			{
				d.put("player", speaker);
				money.requestPayment(speaker, self, QUEST_COST, "armorsmithQuestPayment", d, true);
			}
			npcEndConversation(speaker);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES))
	{
		if (stage == 1)
		{
			grantSchematic(speaker, "object/draft_schematic/armor/armor_segment_ris.iff");
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 2);
			npcSpeak(speaker, SID_QUEST_1_DESCRIPTION);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES_TO_QUEST_2_QUERY))
	{
		if (stage == 2)
		{
			obj_id segment = verifyQuestItem(speaker);
			if (isIdValid(segment))
			{
				destroyObject(segment);
				setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 3);
				npcSpeak(speaker, SID_QUEST_2_COMPLETE);
				valid_responses = getConversationResponses(speaker, self, 4);
				npcSetConversationResponses(speaker, valid_responses);
				return SCRIPT_CONTINUE;
			}
		}
	}
	else if (response.equals(SID_NO_TO_QUEST_2_QUERY))
	{
		if (stage == 2)
		{
			npcSpeak(speaker, SID_QUEST_2_INCOMPLETE);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES_TO_QUEST_3_START))
	{
		if (stage == 3)
		{
			grantSchematic(speaker, "object/draft_schematic/armor/component/armor_layer_ris.iff");
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 4);
			npcSpeak(speaker, SID_QUEST_3_START);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_NO_TO_QUEST_3_START))
	{
		if (stage == 3)
		{
			npcSpeak(speaker, SID_QUEST_3_START_NO);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES_TO_QUEST_4_QUERY))
	{
		if (stage == 4)
		{
			obj_id segment = verifyQuestItem(speaker);
			if (isIdValid(segment))
			{
				destroyObject(segment);
				setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 5);
				npcSpeak(speaker, SID_QUEST_4_COMPLETE);
				valid_responses = getConversationResponses(speaker, self, 6);
				npcSetConversationResponses(speaker, valid_responses);
				return SCRIPT_CONTINUE;
			}
		}
	}
	else if (response.equals(SID_NO_TO_QUEST_4_QUERY))
	{
		if (stage == 4)
		{
			npcSpeak(speaker, SID_QUEST_4_INCOMPLETE);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES_TO_QUEST_5_START))
	{
		if (stage == 5)
		{
			grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_boots.iff");
			setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 6);
			npcSpeak(speaker, SID_QUEST_5_START);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_NO_TO_QUEST_5_START))
	{
		if (stage == 5)
		{
			npcSpeak(speaker, SID_QUEST_5_START_NO);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	else if (response.equals(SID_YES_TO_QUEST_6_QUERY))
	{
		if (stage == 6)
		{
			obj_id segment = verifyQuestItem(speaker);
			if (isIdValid(segment))
			{
				destroyObject(segment);
				
				// The mission is over. Remove the segment,layer and boots and grant the new appearance schematics
				revokeSchematic(speaker, "object/draft_schematic/armor/component/armor_layer_ris.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_enhancement_feather.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bicep_l.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bicep_r.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bracer_l.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bracer_r.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_chest.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_gloves.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_helmet.iff");
				grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_leggings.iff");
				setObjVar(speaker, VAR_QUEST_ROOT_ARMORSMITH, 7);
				npcSpeak(speaker, SID_QUEST_6_COMPLETE);
				npcSetConversationResponses(speaker, valid_responses);
				return SCRIPT_CONTINUE;
			}
		}
	}
	else if (response.equals(SID_NO_TO_QUEST_6_QUERY))
	{
		if (stage == 6)
		{
			npcSpeak(speaker, SID_QUEST_6_INCOMPLETE);
			npcSetConversationResponses(speaker, valid_responses);
			return SCRIPT_CONTINUE;
		}
	}
	
	npcSpeak(speaker, SID_ILLEGAL_RESPONSE);
	npcEndConversation(speaker);
	
	return SCRIPT_CONTINUE;
}


/***** MESSAGEHANDLERS *************************************************/
messageHandler armorsmithQuestPayment()
{
	// Check to see if the payment was sucessful
	if (params.containsKey(money.DICT_CODE))
	{
		int return_code = params.getInt(money.DICT_CODE);
		if (return_code == money.RET_FAIL)
		{
			chat.chat(self, SID_NOT_ENOUGH_MONEY);
			return SCRIPT_CONTINUE;
		}
	}
	
	// On a successful payment, start the quest
	obj_id player = params.getObjId("player");
	LOG("LOG_CHANNEL", "player ->" + player);
	if (!isIdValid(player))
	{
		LOG("LOG_CHANNEL", "quest_armorsmith::handlePayment -- player is not valid");
		return SCRIPT_CONTINUE;
	}
	
	setObjVar(player, VAR_QUEST_ROOT_ARMORSMITH, 1);
	
	string_id[] valid_responses = getConversationResponses(player, self, 2);
	npcStartConversation(player, self, CONVERSE_ARMORSMITH_QUEST, SID_QUEST_1_START_YES, valid_responses);	
	//npcSetConversationResponses(player, self, valid_responses);
	//npcSpeak(player, SID_QUEST_1_START_YES);
	
	// Transfer the money from the npc to a named account for tracking.
	money.bankTo(self, money.ACCT_SKILL_TRAINING, QUEST_COST);
	
	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
string_id[] getConversationResponses(obj_id player, obj_id npc, int progress)
{
	LOG("LOG_CHANNEL", "faction_recruiter::getConversationResponses -- " + progress);

	resizeable string_id[] responses = new string_id[0];
	
	switch (progress)
	{
		case 1:
			// Player is eligable to start the quest.
			responses = utils.addElement(responses, SID_YES_TO_QUEST_1_START);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_1_START);
			break;
		
		case 2:
			responses = utils.addElement(responses, SID_YES);
			break;
			
		case 3:
			if (verifyQuestItem(player) != null)
				responses = utils.addElement(responses, SID_YES_TO_QUEST_2_QUERY);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_2_QUERY);
			break;
			
		case 4:
			responses = utils.addElement(responses, SID_YES_TO_QUEST_3_START);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_3_START);
			break;
		
		case 5:
			if (verifyQuestItem(player) != null)
				responses = utils.addElement(responses, SID_YES_TO_QUEST_4_QUERY);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_4_QUERY);
			break;
		
		case 6:
			responses = utils.addElement(responses, SID_YES_TO_QUEST_5_START);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_5_START);
			break;
		
		case 7:
			if (verifyQuestItem(player) != null)
				responses = utils.addElement(responses, SID_YES_TO_QUEST_6_QUERY);
			responses = utils.addElement(responses, SID_NO_TO_QUEST_6_QUERY);
			break;
			
		default:
			//responses = utils.addElement(responses, SID_NOTHING);
			
	}
	
	return responses;
}

prose_package[] getProseConversationResponses(obj_id player, obj_id npc, string prose_string, int prose_digit, int progress)
{
	LOG("LOG_CHANNEL", "faction_recruiter::getProseConversationResponses -- " + progress);

	prose_package[] responses = new prose_package[0];
	prose_package pp;
	int stage = getArmorsmithQuestStage(player);	

	switch(progress)
	{
		case 3:
			// Player is asked if he has the armor segment
			LOG("LOG_CHANNEL", "name ->" + prose_string);
			
			pp = prose.getPackage(SID_YES_TO_QUEST_2_QUERY, prose_string);
			responses = assemblePackageArray(responses, pp);
			pp = prose.getPackage(SID_NO_TO_QUEST_2_QUERY, prose_string);
			responses = assemblePackageArray(responses, pp);
			break;
	}

	LOG("LOG_CHANNEL", "responses ->" + responses.length);
	return responses;
}

prose_package[] assemblePackageArray(prose_package[] array, prose_package element)
{
	if ( element == null )
		return new prose_package[0];

	if ( array == null )
		return assemblePackageArray(new prose_package[0], element);

	Vector vector = new Vector(Arrays.asList(array));
	vector.add(element);

	array = new prose_package[vector.size()];
	vector.toArray(array);
	return array;
}

int getArmorsmithQuestStage(obj_id player)
{
	if (!isIdValid(player))
		return -1;
	
	if (/*!hasSkill(player, "crafting_armorsmith_master")*/ !hasSkill(player, "class_munitions_phase4_master") )
		return -1;
	
	if (hasObjVar(player, VAR_QUEST_ROOT_ARMORSMITH))
		return getIntObjVar(player, VAR_QUEST_ROOT_ARMORSMITH);
	else
		return 0;
}

string getArmorsmithQuestItem(int stage)
{
	if (stage < 0)
		return null;
	
	int idx = dataTableSearchColumnForInt(stage, "stage", DATATABLE_ARMORSMITH_ITEMS);
	if (idx == -1)
		return null;
	else
		return dataTableGetString(DATATABLE_ARMORSMITH_ITEMS, idx, "template");
}

string getArmorsmithQuestItemName(int stage)
{
	if (stage < 0)
		return null;
	
	int idx = dataTableSearchColumnForInt(stage, "stage", DATATABLE_ARMORSMITH_ITEMS);
	if (idx == -1)
		return null;
	else
	{
		string name_str = dataTableGetString(DATATABLE_ARMORSMITH_ITEMS, idx, "name");
		if (name_str != null)
		{
			string_id name_str_id = utils.unpackString(name_str);
			return localize(name_str_id);
		}
	}
	
	return null;
}

obj_id verifyQuestItem(obj_id player)
{
	if (!isIdValid(player))
		return null;
	
	int stage = getArmorsmithQuestStage(player);
	if (stage == -1)
		return null;
	
	string template = getArmorsmithQuestItem(stage);
	if (template == null)
		return null;
	
	obj_id inventory = getObjectInSlot(player, "inventory");
	if (inventory == null)
	{
		LOG("LOG_CHANNEL", "healing::findHealWoundMedicine -- " + player + "'s inventory is null.");
		return null;
	}
	obj_id[] inv_contents = utils.getContents(inventory, false);
	for (int i = 0; i < inv_contents.length; i++)
	{
		if (template.equals(getTemplateName(inv_contents[i])))
		{
			// Check to see that it was crafted by the player.
			obj_id creator = getCrafter(inv_contents[i]);
			if (isIdValid(creator))
			{
				if (creator == player)
					return inv_contents[i];
			}
		}
	}
	
	return null;
}


trigger OnAttach ()
{
	setName (self, "Mol Ni'mai");
	attachScript (self, "npc.converse.npc_converse_menu");
	setCondition (self, CONDITION_INTERESTING);
	return SCRIPT_CONTINUE;
}


//conversion process if player has the old chest schematic we give them all the new schematics
boolean hasOldRisChest(obj_id player)
{
	return (hasSchematic(player, "object/draft_schematic/clothing/clothing_armor_ris_chest_plate.iff"));
	
}
//conversion process if player has the old boot schematic, we give them new one so they can finish quest
boolean hasOldRisBoot(obj_id player)
{
	return (hasSchematic(player, "object/draft_schematic/clothing/clothing_armor_ris_boots.iff"));
	
}

void fullSchematicConversion(obj_id speaker)
{
	revokeSchematic(speaker, "object/draft_schematic/armor/component/armor_layer_ris.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_bicep_l.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_bicep_r.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_bracer_l.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_bracer_r.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_chest_plate.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_gloves.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_helmet.iff");
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_leggings.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_enhancement_feather.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bicep_l.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bicep_r.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bracer_l.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_bracer_r.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_chest.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_gloves.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_helmet.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_leggings.iff");
	return;
}

void bootSchematicConversion(obj_id speaker)
{
	revokeSchematic(speaker, "object/draft_schematic/clothing/clothing_armor_ris_boots.iff");
	grantSchematic(speaker, "object/draft_schematic/armor/armor_appearance_ris_boots.iff");
	return;
}	