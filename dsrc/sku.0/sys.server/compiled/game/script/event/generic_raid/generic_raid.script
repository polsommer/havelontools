include library.utils;
include library.create;
include library.locations;
include library.skill;
include library.chat;
include library.badge;
include java.util.StringTokenizer;
include library.gcw;

const string DATATABLE = "datatables/event/generic_raid/city_data.iff";

trigger OnInitialize()
{
	string setting = getConfigSetting("EventTeam", "genericRaids");

	if(setting == null || setting == "" || setting != "true")
		return SCRIPT_CONTINUE;

	location here = getLocation(self);
	string myCity = locations.getGuardSpawnerRegionName(here);
	int numEntries = dataTableGetNumRows(DATATABLE);

	if(myCity == null || myCity == "")
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "auto_invasion.reference_number") )
	{
		for(int i = 0; i < numEntries; i++)
		{
			string thisCity = dataTableGetString(DATATABLE, i, "CITY");
			if(thisCity.equals(myCity))
			{
				setObjVar(self, "auto_invasion.reference_number", i);	
			}
		}
	}


	if(!hasObjVar(self, "auto_invasion.reference_number") )
		return SCRIPT_CONTINUE;

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");
	float minInvasionTime = dataTableGetFloat(DATATABLE, referenceNumber, "MINTIME");
	float timeChunkSize = dataTableGetFloat(DATATABLE, referenceNumber, "TIMECHUNKSIZE");
	int numTimeChunk = dataTableGetInt(DATATABLE, referenceNumber, "NUMTIMECHUNK");
	float rightNow = getGameTime();

	if(!hasObjVar(self, "auto_invasion.next_invasion_time") )
	{
		float nextInvasionTime = ( rand(1, numTimeChunk) * timeChunkSize ) + minInvasionTime + rightNow;
		setObjVar(self, "auto_invasion.next_invasion_time", nextInvasionTime);
	}

	setObjVar(self, "auto_invasion.invasion_active", 0);

	messageTo(self, "invasionTimerPing", null, 30, false);
	messageTo(self, "endInvasion", null, 1, false);

	return SCRIPT_CONTINUE;
}

messageHandler invasionTimerPing()
{
	float rightNow = getGameTime();
	float nextInvasionTime = getFloatObjVar(self, "auto_invasion.next_invasion_time");
	int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");

	if(invasionActive == 1)
	{
		return SCRIPT_CONTINUE;
	}
	
	if(rightNow > nextInvasionTime && invasionActive == 0)
	{
		// Raid or a cheerleader?
		int roll = rand(0, 100);
		if(roll < 50)
			messageTo(self, "startCheerleaderEvent", null, 1, false);
		else
			messageTo(self, "startInvasion", null, 1, false);

		setObjVar(self, "auto_invasion.invasion_active", 1);
		return SCRIPT_CONTINUE;	
	}

	else
	{
		messageTo(self, "invasionTimerPing", null, 3600, false);	//******** SHOULD BE 1 HOUR ON FINAL
	}

	return SCRIPT_CONTINUE;
}

messageHandler startInvasion()
{

	if(!hasObjVar(self, "auto_invasion.reference_number") )
		return SCRIPT_CONTINUE;

	removeObjVar(self, "auto_invasion.next_invasion_time");

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");

// Pick invasion from the pool
	int numInvasions = dataTableGetInt(DATATABLE, referenceNumber, "NUMINV");
	int randInv = rand(1, numInvasions);

	string invasionTable = dataTableGetString(DATATABLE, referenceNumber, "INV" + randInv);

	if(invasionTable == null || invasionTable == "")
		return SCRIPT_CONTINUE;

// Get spawn locs

	string locTable = dataTableGetString(DATATABLE, referenceNumber, "LOCS");
	string destTable = dataTableGetString(DATATABLE, referenceNumber, "DEST");
	int locTableLength = dataTableGetNumRows(locTable);
	int destTableLength = dataTableGetNumRows(destTable);
	setObjVar(self, "auto_invasion.loc_table_length", locTableLength);
	setObjVar(self, "auto_invasion.dest_table_length", destTableLength);

	for(int i = 0; i < locTableLength; i++)
	{
		location loc = getLocation(self);
		loc.x = dataTableGetFloat(locTable, i, "SPAWN_X");
		loc.y = dataTableGetFloat(locTable, i, "SPAWN_Y");
		loc.z = dataTableGetFloat(locTable, i, "SPAWN_Z");
		setObjVar(self, "auto_invasion.spawn_loc_" + i, loc);
	}

// Get spawn destinations

	for(int i = 0; i < destTableLength; i++)
	{
		location dest = getLocation(self);
		dest.x = dataTableGetFloat(destTable, i, "DEST_X");
		dest.y = dataTableGetFloat(destTable, i, "DEST_Y");
		dest.z = dataTableGetFloat(destTable, i, "DEST_Z");
		setObjVar(self, "auto_invasion.dest_off_" + i, dataTableGetFloat(destTable, i, "DEST_OFF") );
		setObjVar(self, "auto_invasion.spawn_dest_" + i, dest);
	}


	int maxWaves = dataTableGetInt(invasionTable, 0, "NUMWAVES");
	int spawnDelay = dataTableGetInt(invasionTable, 0, "SPAWNDELAY");
	int badgeAwarded = dataTableGetInt(invasionTable, 0, "BADGE");

	setObjVar(self, "auto_invasion.badge_awarded", badgeAwarded);
	setObjVar(self, "auto_invasion.spawn_delay", spawnDelay);
	setObjVar(self, "auto_invasion.invasion_table", invasionTable);
	setObjVar(self, "auto_invasion.max_waves", maxWaves);
	setObjVar(self, "auto_invasion.current_wave", 0);
	setObjVar(self, "auto_invasion.spawn_number", 1);
	setObjVar(self, "auto_invasion.dest_table", destTable);
//	setObjVar(self, "auto_invasion.mob_min_index", mobMin);
//	setObjVar(self, "auto_invasion.mob_max_index", mobMax);

	messageTo(self, "launchWave", null, 1, false);

	return SCRIPT_CONTINUE;
}

messageHandler launchWave()
{
	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");
	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int maxWaves = getIntObjVar(self, "auto_invasion.max_waves");
	int numberDead = 0;
	string startMessage = dataTableGetString(invasionTable, 0, "SYSMESSTART");
	string endMessage = dataTableGetString(invasionTable, 0, "SYSMESEND");

	if(currentWave == maxWaves)
	{
		announceStatusToPlayers(self, endMessage);
		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;	
	}

	if(currentWave == 0)
	{
		announceStatusToPlayers(self, startMessage);
	}

	currentWave ++;
	setObjVar(self, "auto_invasion.current_wave", currentWave);
	setObjVar(self, "auto_invasion.spawn_number", 1);
	setObjVar(self, "auto_invasion.done_spawning", 0);
	setObjVar(self, "auto_invasion.number_dead", numberDead);

	messageTo(self, "startSpawning", null, 1, false);

	return SCRIPT_CONTINUE;
}

messageHandler startSpawning()
{
	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");

	if(invasionTable == "null" || invasionTable == "")
	{
		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;
	}

	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");	
	int spawnDelay = dataTableGetInt(invasionTable, 0, "SPAWNDELAY");
	int maxWaveTimeMinutes = dataTableGetInt(invasionTable, 0, "MAXWAVETIME");
	int maxWaveTime = maxWaveTimeMinutes * 60;
//	int mobMinIndex = getIntObjVar(self, "auto_invasion.mob_min_index");
//	int mobMaxIndex = getIntObjVar(self, "auto_invasion.mob_max_index");
	int doneSpawning = getIntObjVar(self, "auto_invasion.done_spawning");
	string script = dataTableGetString(invasionTable, 0, "SCRIPT");

	if(doneSpawning == 1)
	{
		return SCRIPT_CONTINUE;
	}

// Pick spawn point and destination

	int locTableLength = getIntObjVar(self, "auto_invasion.loc_table_length") - 1;
	int locIndex = rand(0, locTableLength);
	location spawnLoc = getLocationObjVar(self, "auto_invasion.spawn_loc_" + locIndex);

	int destTableLength = getIntObjVar(self, "auto_invasion.dest_table_length") - 1;
	int destIndex = rand(0, destTableLength);
	location dest = getLocationObjVar(self, "auto_invasion.spawn_dest_" + destIndex);
	float destOff = getFloatObjVar(self, "auto_invasion.dest_off_" + destIndex);
	
	if(spawnLoc == null)
		spawnLoc = getLocationObjVar(self, "auto_invasion.spawn_loc_0");

	if(dest == null)
		dest = getLocationObjVar(self, "auto_invasion.spawn_dest_0");

	if(destOff == -1)
		destOff = getFloatObjVar(self, "auto_invasion.dest_off_" + destIndex);

//	int mobIndex = rand(mobMinIndex, mobMaxIndex);
	int mobIndex = 0;

	string spawnType = dataTableGetString(invasionTable, mobIndex, "SPAWN");
	setObjVar(self, "test.spawnType", spawnType);
	
	obj_id spawn = create.object(spawnType, spawnLoc);
	
	if(isIdValid(spawn) )
	{
		setObjVar(spawn, "auto_invasion.dest_offset", destOff);
		setObjVar(spawn, "auto_invasion.target", dest);
		setObjVar(spawn, "event.gcwraids.myId", spawnNum);
		setObjVar(spawn, "auto_invasion.mom", self);

		attachScript(spawn, script);
		setObjVar(self, "auto_invasion.spawn" + spawnNum, spawn);
		spawnNum ++;
	}

	setObjVar(self, "auto_invasion.spawn_number", spawnNum);

	if(spawnNum > 19)
	{
		params.put("currentWave", currentWave);
		messageTo(self, "waveTimeLimitCheck", params, maxWaveTime, false);
		setObjVar(self, "auto_invasion.done_spawning", 1);
		
		return SCRIPT_CONTINUE;
	}
	else
	{
		messageTo(self, "startSpawning", null, spawnDelay, false);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler invaderDied()
{
	obj_id deadGuy = params.getObjId("deadGuy");
	int myNumber = params.getInt("myNumber");
	removeObjVar(self, "auto_invasion.spawn" + myNumber);
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");
	int numberDead = 0;
	int doneSpawning = getIntObjVar(self, "auto_invasion.done_spawning");
	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");
	int timeBetweenWaves = dataTableGetInt(invasionTable, 0, "TIMEBETWEENWAVES");

	if(doneSpawning == 1)
	{
		for(int i = 1; i <= spawnNum; i++)
		{
			obj_id possibleInvader = getObjIdObjVar(self, "auto_invasion.spawn" + i);
	
			if(!isIdValid(possibleInvader) )
			{
				numberDead++;
				setObjVar(self, "auto_invasion.number_dead", numberDead);
			}
		}
	}
	
	if(doneSpawning == 1 && numberDead >= spawnNum)
	{
		messageTo(self, "launchWave", null, timeBetweenWaves * 60, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler waveTimeLimitCheck()
{
	int lastWave = params.getInt("currentWave");
	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");
	int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");

	if(lastWave == currentWave)	//Wave didn't advance. Kill any creatures left and advance.
	{
		for(int i = 1; i <= spawnNum; i++)
		{
			obj_id spawn = getObjIdObjVar(self, "auto_invasion.spawn" + i);
			
			if(isIdValid(spawn) )
			{
				messageTo(spawn, "goDie", null, 1, false);
			}		

			removeObjVar(self, "auto_invasion.spawn" + i);
		}

		if(invasionActive == 1)
			messageTo(self, "launchWave", null, 1, false);
	}

	return SCRIPT_CONTINUE;
}


messageHandler endInvasion()
{
	setObjVar(self, "auto_invasion.invasion_active", 0);

// Kill off stragglers and their references
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_num");

	for(int i = 1; i <= 20; i++)
	{
		obj_id spawn = getObjIdObjVar(self, "auto_invasion.spawn" + i);
		
		if(isIdValid(spawn) )
		{
			messageTo(spawn, "goDie", null, 1, false);
		}		

		removeObjVar(self, "auto_invasion.spawn" + i);
	}

//Award badge if applicable

	int badgeAwarded = getIntObjVar(self, "auto_invasion.badge_awarded");
	string badgeName = getCollectionSlotName(badgeAwarded);
	
	if((badgeAwarded > 0) && (badgeName != null) && (badgeName.length() > 0))
	{
		obj_id[] objPlayers = getPlayerCreaturesInRange(self, 255);

		if (objPlayers != null && objPlayers.length>0)
		{
			for(int i = 0; i < objPlayers.length; i++)
			{
				badge.grantBadge(objPlayers[i], badgeName);
			}
		}		
	}


// Killing objvars set during startInvasion and launchWave

	removeObjVar(self, "auto_invasion.spawn_delay");
	removeObjVar(self, "auto_invasion.max_waves");
	removeObjVar(self, "auto_invasion.current_wave");
	removeObjVar(self, "auto_invasion.spawn_number");
//	removeObjVar(self, "auto_invasion.mob_min_index");
//	removeObjVar(self, "auto_invasion.mob_max_index");
	removeObjVar(self, "auto_invasion.done_spawning");
	removeObjVar(self, "auto_invasion.number_dead");

// Deactivating invasion and setting next invasion time

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");
	float minInvasionTime = dataTableGetFloat(DATATABLE, referenceNumber, "MINTIME");
	float timeChunkSize = dataTableGetFloat(DATATABLE, referenceNumber, "TIMECHUNKSIZE");
	int numTimeChunk = dataTableGetInt(DATATABLE, referenceNumber, "NUMTIMECHUNK");
	float rightNow = getGameTime();

	if(!hasObjVar(self, "auto_invasion.next_invasion_time") )
	{
		float nextInvasionTime = ( rand(1, numTimeChunk) * timeChunkSize ) + minInvasionTime + rightNow;
		setObjVar(self, "auto_invasion.next_invasion_time", nextInvasionTime);
	}

	setObjVar(self, "auto_invasion.testing_multiplier", 1);
	messageTo(self, "invasionTimerPing", null, 2700, false);	//********* SHOULD BE 45 MINUTES ON FINAL
	
	return SCRIPT_CONTINUE;
}

void announceStatusToPlayers(obj_id self, string messageId)
{
	obj_id[] objPlayers = getPlayerCreaturesInRange(self, 256.0f);	
	
	if (objPlayers != null && objPlayers.length>0)
	{
		for(int i = 0; i < objPlayers.length; i++)
		{
			sendSystemMessage(objPlayers[i], new string_id("auto_invasion", messageId));
		}
	}	

}

trigger OnHearSpeech(obj_id objSpeaker, string strText)	// Added for testing
{

	if(isGod(objSpeaker))
	{
		if(toLower(strText).startsWith("forcegenericraid") )
		{

			int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");

			if(invasionActive == 0)
			{
				messageTo(self, "startInvasion", null, 1, false);
				setObjVar(self, "auto_invasion.invasion_active", 1);
			}
		}

		if(toLower(strText).startsWith("endinvasionnow") )
		{
			messageTo(self, "endInvasion", null, 1, false);
		}

	}

	return SCRIPT_CONTINUE;
}