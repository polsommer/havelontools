/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        lifeday gift xmas 2005
 * Description:  Grants holiday items to the player and unpacks them
 * @author       Thomas Blair
 * @version      1.0
 */

/***** INCLUDES ********************************************************/


/***** INCLUDES ********************************************************/
include library.utils;
include library.static_item;
include java.util.HashSet;

/***** CONSTANTS *******************************************************/

const string_id CRATE_USED			= new string_id("spam", "opened_crate");
const string_id GIVE_AWAY			= new string_id("spam", "give_away");
const string_id OUTSIDE				= new string_id("spam", "must_be_outside");



const string[] GIFTS_SELF 		= {
  								"item_lifeday_wreath_01_01",
								"item_lifeday_mini_tree_01_01"
  								};

const string[] GIFTS_RANDOM		= {
 								"item_lifeday_bunting_01_01",
								"item_lifeday_incense_burner_01_01",
								"item_lifeday_painting_01_01_01",
								"item_lifeday_painting_02_01_01",
								"item_lifeday_painting_03_01_01",
								"item_lifeday_painting_04_01_01",
								"item_lifeday_painting_05_01_01"
   								};


trigger OnInitialize()
{	
	if (hasScript (self, "event.lifeday.lifeday_gift_06"))
	{
		attachScript (self, "event.lifeday.lifeday_gift");
		detachScript (self, "event.lifeday.lifeday_gift_06");
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (canManipulate(player, self, true, true, 15, true))
	{
		if (utils.isNestedWithinAPlayer(self))
		{
			menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
			if ( mid != null )
				mid.setServerNotify(true);
			else
				mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("ui_radial", "item_use"));
		}
	}

	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(utils.getContainingPlayer(self) != player )
		return SCRIPT_CONTINUE;

	if (item == menu_info_types.ITEM_USE)
	{
		if(hasObjVar(self, "lifeday.other"))
		{
			obj_id owner = getObjIdObjVar(self , "lifeday.owner");

			if(owner != player)
			{
				string[] items = new string[1];
				items[0] = GIFTS_RANDOM[rand(0, GIFTS_RANDOM.length-1)];

				if(grantReward(player, items))
				{
					destroyObject(self);
					sendSystemMessage (player, CRATE_USED);
					return SCRIPT_CONTINUE;
				}
			}
			else
			{
				sendSystemMessage (player, GIVE_AWAY);
				return SCRIPT_CONTINUE;
			}
		}
		else
		{
			string[] items = new string[(GIFTS_SELF.length + 1)];

			for(int i = 0; i < GIFTS_SELF.length; i++)
			{
				items[i] = GIFTS_SELF[i];
			}

			items[GIFTS_SELF.length] = GIFTS_RANDOM[rand(0, GIFTS_RANDOM.length-1)];

			if(grantReward(player, items))
			{
				destroyObject(self);
				sendSystemMessage (player, CRATE_USED);
				return SCRIPT_CONTINUE;
			}
		}
	}
	return SCRIPT_CONTINUE;
}

boolean grantReward (obj_id player, string[] items)
{
	if (getTopMostContainer(player) != player)
	{
		sendSystemMessage (player, OUTSIDE);
		return false;
	}

	if(isIdValid(player))
	{
		obj_id pInv = utils.getInventoryContainer(player);
		if (isIdValid(pInv) && (items != null && items.length > 0))
		{
			HashSet theSet = new HashSet();

			for(int i = 0; i < items.length; i++)
			{
				theSet.add(static_item.createNewItemFunction(items[i], pInv));
			}

			obj_id[] gift = new obj_id[theSet.size()];
			theSet.toArray(gift);
			showLootBox(player, gift);

			playMusic( player, "sound/music_celebration_a.snd");
			playClientEffectObj(player, "clienteffect/pt_lifeday.cef", player, "");

			return true;
		}
	}

	return false;
}
