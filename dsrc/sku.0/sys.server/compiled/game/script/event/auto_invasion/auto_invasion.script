include library.utils;
include library.create;
include library.locations;
include library.skill;
include library.chat;
include library.badge;
include java.util.StringTokenizer;

const string DATATABLE = "datatables/event/invasion/city_data.iff";
const string LEVEL_TABLE = "datatables/event/invasion/level_threshold.iff";

const float THIRTY_SIX_HOURS = 60 * 60 * 36;	//**** April Fool's Only
//const float THIRTY_SIX_HOURS = 60 * 15;	//**** TEST

/*******************************
trigger OnAttach()
{
	// APRIL FOOL's ONLY
	float rightNow = getGameTime();
	float invasionRunTime = rightNow + THIRTY_SIX_HOURS;
	setObjVar(self, "auto_invasion.invasion_run_time", invasionRunTime);

	// APRIL FOOL's ONLY

	return SCRIPT_CONTINUE;
}
********************************/

trigger OnInitialize()
{

	location here = getLocation(self);
	string myRegion = locations.getGuardSpawnerRegionName(here);

	if(myRegion.equals("@tatooine_region_names:mos_eisley") )
	{
		removeObjVar(self, "event");
		removeObjVar(self, "auto_invasion");
		messageTo(self, "repurposeToTuskenRaid", null, 30, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler repurposeToTuskenRaid()
{

	attachScript(self, "event.generic_raid.generic_raid");
	messageTo(self, "detachAutoInvasionScript", null, 30, false);

	return SCRIPT_CONTINUE;
}

messageHandler detachAutoInvasionScript()
{
	
	detachScript(self, "event.auto_invasion.auto_invasion");

	return SCRIPT_CONTINUE;
}

/***************** REPURPOSING to Mos Eisley Tusken Raids **************************
	string setting = getConfigSetting("EventTeam", "aprilfools");

	if(setting == null || setting == "" || setting != "true")
		return SCRIPT_CONTINUE;

	// Nerfing Theed only
	location here = getLocation(self);
	string myRegion = locations.getGuardSpawnerRegionName(here);

	if(myRegion.equals("@naboo_region_names:theed") )
		return SCRIPT_CONTINUE;

	// APRIL FOOL's ONLY
	if(!hasObjVar(self, "auto_invasion.invasion_run_time") )
	{
		float rightNow = getGameTime();
		float invasionRunTime = rightNow + THIRTY_SIX_HOURS;
		setObjVar(self, "auto_invasion.invasion_run_time", invasionRunTime);	
	}
	// APRIL FOOL's ONLY	

//	location here = getLocation(self);
	string myCity = locations.getGuardSpawnerRegionName(here);
	int numEntries = dataTableGetNumRows(DATATABLE);

	if(myCity == null || myCity == "")
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, "auto_invasion.reference_number") )
	{
		for(int i = 0; i < numEntries; i++)
		{
			string thisCity = dataTableGetString(DATATABLE, i, "CITY");
			if(thisCity.equals(myCity))
			{
				setObjVar(self, "auto_invasion.reference_number", i);	
			}
		}
	}


	if(!hasObjVar(self, "auto_invasion.reference_number") )
		return SCRIPT_CONTINUE;

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");
	float minInvasionTime = dataTableGetFloat(DATATABLE, referenceNumber, "MINTIME");
	float timeChunkSize = dataTableGetFloat(DATATABLE, referenceNumber, "TIMECHUNKSIZE");
	int numTimeChunk = dataTableGetInt(DATATABLE, referenceNumber, "NUMTIMECHUNK");
	float rightNow = getGameTime();

	float nextInvasionTime = ( rand(1, numTimeChunk) * timeChunkSize ) + minInvasionTime + rightNow;

	setObjVar(self, "auto_invasion.next_invasion_time", nextInvasionTime);
	setObjVar(self, "auto_invasion.invasion_active", 0);
	setObjVar(self, "auto_invasion.testing_multiplier", 1);

	messageTo(self, "invasionTimerPing", null, 30, false);

	messageTo(self, "endInvasion", null, 1, false);

	return SCRIPT_CONTINUE;

}


messageHandler invasionTimerPing()
{
	float rightNow = getGameTime();
	float nextInvasionTime = getFloatObjVar(self, "auto_invasion.next_invasion_time");
	int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");

	// APRIL FOOL's ONLY
	float invasionRunTime = getFloatObjVar(self, "auto_invasion.invasion_run_time");

	if(rightNow > invasionRunTime)
	{
		return SCRIPT_CONTINUE;
	}
	// APRIL FOOL's ONLY

	if(invasionActive == 1)
	{
		return SCRIPT_CONTINUE;
	}
	
	if(rightNow > nextInvasionTime && invasionActive == 0)
	{
		messageTo(self, "startInvasion", null, 1, false);
//		setObjVar(self, "auto_invasion.invasion_active", 1);

		return SCRIPT_CONTINUE;	
	}

	else
	{
		messageTo(self, "invasionTimerPing", null, 900, false);	//******** SHOULD BE 15 MINUTES ON FINAL
	}

	return SCRIPT_CONTINUE;
}

messageHandler startInvasion()
{

	if(!hasObjVar(self, "auto_invasion.reference_number") )
		return SCRIPT_CONTINUE;

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");
	int totalInvasions = dataTableGetInt(DATATABLE, referenceNumber, "NUMINV");
	int invasionNumber = 1;

	if(totalInvasions > 1)
		invasionNumber = rand(1, totalInvasions);

	string invasionTable = dataTableGetString(DATATABLE, referenceNumber, "INV" + invasionNumber);

	if(invasionTable == null || invasionTable == "")
		return SCRIPT_CONTINUE;

	float destinationOffset = dataTableGetFloat(DATATABLE, referenceNumber, "DESTOFF");
	int maxWaves = dataTableGetInt(invasionTable, 0, "NUMWAVES");
	int spawnDelay = dataTableGetInt(invasionTable, 0, "SPAWNDELAY");
	float minRadius = dataTableGetFloat(invasionTable, 0, "MINRADIUS");
	float maxRadius = dataTableGetFloat(invasionTable, 0, "MAXRADIUS");
	int badgeAwarded = dataTableGetInt(invasionTable, 0, "BADGE");

	setObjVar(self, "auto_invasion.badge_awarded", badgeAwarded);
	setObjVar(self, "auto_invasion.spawn_delay", spawnDelay);
	setObjVar(self, "auto_invasion.min_radius", minRadius);
	setObjVar(self, "auto_invasion.max_radius", maxRadius);
	setObjVar(self, "auto_invasion.invasion_table", invasionTable);
	setObjVar(self, "auto_invasion.dest_offset", destinationOffset);
	setObjVar(self, "auto_invasion.max_waves", maxWaves);
	setObjVar(self, "auto_invasion.current_wave", 0);
	setObjVar(self, "auto_invasion.spawn_number", 1);

	messageTo(self, "launchWave", null, 1, false);

	return SCRIPT_CONTINUE;
}

messageHandler launchWave()
{
	removeObjVar(self, "auto_invasion.mob_min_index");
	removeObjVar(self, "auto_invasion.mob_max_index");

	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");
	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int maxWaves = getIntObjVar(self, "auto_invasion.max_waves");
	int totalPlayerCombatDifficulty = 0;
	int totalPlayers = 0;
	int levelThreshold = 0;
	int numberDead = 0;
	string startMessage = dataTableGetString(invasionTable, 0, "SYSMESSTART");
	string endMessage = dataTableGetString(invasionTable, 0, "SYSMESEND");

	obj_id[] objPlayers = getPlayerCreaturesInRange(self, 256.0f);

	if(currentWave == maxWaves)
	{
		announceStatusToPlayers(self, endMessage);
		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;	
	}

// Get total combat difficulty
	if (objPlayers != null && objPlayers.length>0)		
	{
		for(int i = 0; i < objPlayers.length; i++)
		{
			totalPlayerCombatDifficulty += getLevel(objPlayers[i]);
			totalPlayers ++;
		}
	}

//**** TEMP FOR TESTING: INFLATED PLAYER LEVEL ****
//
//	totalPlayerCombatDifficulty = totalPlayerCombatDifficulty * 5;
//
//**** TEMP FOR TESTING: INFLATED PLAYER LEVEL ****

	if(hasObjVar(self, "auto_invasion.test_mode") )
	{
		int testingMultiplier = getIntObjVar(self, "auto_invasion.testing_multiplier");
		totalPlayerCombatDifficulty = totalPlayerCombatDifficulty * testingMultiplier;
	}

	if(totalPlayerCombatDifficulty > 1200)
		totalPlayerCombatDifficulty = 1200;

	setObjVar(self, "auto_invasion.player_difficulty", totalPlayerCombatDifficulty);

// Abort if flash crowd develops
	if(totalPlayers > 100)
	{
		if(currentWave > 1)
			announceStatusToPlayers(self, endMessage);

		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;
	}

// What's the level threshold
	int numEntries = dataTableGetNumRows(LEVEL_TABLE); 

	for(int i = 0; i < numEntries; i++)
	{
		int combatMin = dataTableGetInt(LEVEL_TABLE, i, "CBTMIN");
		int combatMax = dataTableGetInt(LEVEL_TABLE, i, "CBTMAX");

		if(totalPlayerCombatDifficulty >= combatMin && totalPlayerCombatDifficulty <= combatMax)
		{
			setObjVar(self, "auto_invasion.level_threshold", i);
		}
	
	}

// Get proper ranges of creatures to spawn
	int invasionTableLength = dataTableGetNumRows(invasionTable);
	int invasionThreshold = getIntObjVar(self, "auto_invasion.level_threshold");
	int mobMin = dataTableGetInt(LEVEL_TABLE, invasionThreshold, "MOBMIN");
	int mobMax = dataTableGetInt(LEVEL_TABLE, invasionThreshold, "MOBMAX");

	for(int i = 0; i < invasionTableLength; i++)
	{
		int mobLevel = dataTableGetInt(invasionTable, i, "LEVEL");

		if(!hasObjVar(self, "auto_invasion.mob_min_index") && mobLevel >= mobMin)
		{
			setObjVar(self, "auto_invasion.mob_min_index", i);
		}

		if(!hasObjVar(self, "auto_invasion.mob_max_index") && mobLevel > mobMax)
		{
			setObjVar(self, "auto_invasion.mob_max_index", i - 1);
		}

	}

// If mob max index is -1 then the event is too high level

	int mobMaxIndex = getIntObjVar(self, "auto_invasion.mob_max_index");

	if(mobMaxIndex == -1)
	{
		removeObjVar(self, "auto_invasion.mob_min_index");
		removeObjVar(self, "auto_invasion.mob_max_index");
	}

// If we don't have a valid mob level range, abort the event

	if(!hasObjVar(self, "auto_invasion.mob_min_index") || !hasObjVar(self, "auto_invasion.mob_max_index") )
	{
		if(currentWave > 1)
			announceStatusToPlayers(self, endMessage);

		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;
	}

	if(currentWave == 0)
	{
		announceStatusToPlayers(self, startMessage);
	}

	currentWave ++;
	setObjVar(self, "auto_invasion.current_wave", currentWave);
	setObjVar(self, "auto_invasion.current_wave_difficulty", 0);
	setObjVar(self, "auto_invasion.spawn_number", 1);
	setObjVar(self, "auto_invasion.done_spawning", 0);
	setObjVar(self, "auto_invasion.number_dead", numberDead);
	setObjVar(self, "auto_invasion.invasion_active", 1);

	messageTo(self, "startSpawning", null, 1, false);

	return SCRIPT_CONTINUE;
}

messageHandler startSpawning()
{
	float minRadius = getFloatObjVar(self, "auto_invasion.min_radius");
	float maxRadius = getFloatObjVar(self, "auto_invasion.max_radius");
	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");

	if(invasionTable == "null" || invasionTable == "")
	{
		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;
	}

	float destinationOffset = getFloatObjVar(self, "auto_invasion.dest_offset");
	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");	
	int playerDifficulty = getIntObjVar(self, "auto_invasion.player_difficulty");
	int currentWaveDifficulty = getIntObjVar(self, "auto_invasion.current_wave_difficulty");
	int spawnDelay = dataTableGetInt(invasionTable, 0, "SPAWNDELAY");
	int maxWaveTimeMinutes = dataTableGetInt(invasionTable, 0, "MAXWAVETIME");
	int maxWaveTime = maxWaveTimeMinutes * 60;
	int mobMinIndex = getIntObjVar(self, "auto_invasion.mob_min_index");
	int mobMaxIndex = getIntObjVar(self, "auto_invasion.mob_max_index");
	int doneSpawning = getIntObjVar(self, "auto_invasion.done_spawning");
	string script = dataTableGetString(invasionTable, 0, "SCRIPT");

	if(doneSpawning == 1)
	{
		return SCRIPT_CONTINUE;
	}
	
	location here = getLocation(self);

	location spawnLoc = null;
	int x = 0;

	while (x < 10)
	{
		location loc = utils.getRandomLocationInRing(here, minRadius, maxRadius);
		spawnLoc = locations.getGoodLocationAroundLocation(loc, 5f, 5f, 50f, 50f);
	
		if (spawnLoc != null) 
			break;
	
		x++;
	}

	int mobIndex = rand(mobMinIndex, mobMaxIndex);

	if(mobIndex == -1)
	{
		messageTo(self, "endInvasion", null, 1, false);
		return SCRIPT_CONTINUE;
	}

	string spawnType = dataTableGetString(invasionTable, mobIndex, "SPAWN");
	int level = dataTableGetInt(invasionTable, mobIndex, "LEVEL");
	
	obj_id spawn = create.object(spawnType, spawnLoc);
	
	if(isIdValid(spawn) )
	{
		setObjVar(spawn, "auto_invasion.dest_offset", destinationOffset);
		setObjVar(spawn, "auto_invasion.target", self);
		setObjVar(spawn, "auto_invasion.my_number", spawnNum);

		attachScript(spawn, script);
		setObjVar(self, "auto_invasion.spawn" + spawnNum, spawn);
		spawnNum ++;
		currentWaveDifficulty += level;
	}

	setObjVar(self, "auto_invasion.spawn_number", spawnNum);
	setObjVar(self, "auto_invasion.current_wave_difficulty", currentWaveDifficulty);

	if(currentWaveDifficulty > playerDifficulty || spawnNum > 40)
	{

		// MAKE ONE LAST "BOSS"
		int maxWaves = getIntObjVar(self, "auto_invasion.max_waves");
		if(currentWave == maxWaves)
		{
			obj_id boss = create.object(spawnType, here);
			int bossBuffLevel = getIntObjVar(self, "auto_invasion.level_threshold");
			setObjVar(boss, "auto_invasion.teh_uber", "!!1one!1");
			setObjVar(boss, "auto_invasion.boss_buff_level", bossBuffLevel);
			setObjVar(boss, "auto_invasion.dest_offset", destinationOffset);
			setObjVar(boss, "auto_invasion.target", self);
			setObjVar(boss, "auto_invasion.my_number", spawnNum);
			attachScript(boss, script);
			setObjVar(self, "auto_invasion.spawn" + spawnNum, boss);
			spawnNum ++;
			setObjVar(self, "auto_invasion.spawn_number", spawnNum);
		}
		// MAKE ONE LAST "BOSS"
	
		params.put("currentWave", currentWave);
		messageTo(self, "waveTimeLimitCheck", params, maxWaveTime, false);
		setObjVar(self, "auto_invasion.done_spawning", 1);
		
		return SCRIPT_CONTINUE;
	}
	else
	{
		messageTo(self, "startSpawning", null, spawnDelay, false);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler invaderDied()
{
	obj_id deadGuy = params.getObjId("deadGuy");
	int myNumber = params.getInt("myNumber");
	removeObjVar(self, "auto_invasion.spawn" + myNumber);
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");
	int numberDead = 0;
	int doneSpawning = getIntObjVar(self, "auto_invasion.done_spawning");
	string invasionTable = getStringObjVar(self, "auto_invasion.invasion_table");
	int timeBetweenWaves = dataTableGetInt(invasionTable, 0, "TIMEBETWEENWAVES");

	if(doneSpawning == 1)
	{
		for(int i = 1; i <= spawnNum; i++)
		{
			obj_id possibleInvader = getObjIdObjVar(self, "auto_invasion.spawn" + i);
	
			if(!isIdValid(possibleInvader) )
			{
				numberDead++;
				setObjVar(self, "auto_invasion.number_dead", numberDead);
			}
		}
	}
	
	if(doneSpawning == 1 && numberDead >= spawnNum)
	{
		messageTo(self, "launchWave", null, timeBetweenWaves * 60, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler waveTimeLimitCheck()
{
	int lastWave = params.getInt("currentWave");
	int currentWave = getIntObjVar(self, "auto_invasion.current_wave");
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_number");
	int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");

	if(lastWave == currentWave)	//Wave didn't advance. Kill any creatures left and advance.
	{
		for(int i = 1; i <= spawnNum; i++)
		{
			obj_id spawn = getObjIdObjVar(self, "auto_invasion.spawn" + i);
			
			if(isIdValid(spawn) )
			{
				messageTo(spawn, "goDie", null, 1, false);
			}		

			removeObjVar(self, "auto_invasion.spawn" + i);
		}

//		currentWave++;
//		setObjVar(self, "auto_invasion.current_wave", currentWave);

		if(invasionActive == 1)
			messageTo(self, "launchWave", null, 1, false);
	}

	return SCRIPT_CONTINUE;
}


messageHandler endInvasion()
{
	int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");
	
	if(invasionActive == 1)
	{
		//Award badge if applicable

		int badgeAwarded = getIntObjVar(self, "auto_invasion.badge_awarded");
		string badgeName = getCollectionSlotName(badgeAwarded);

		if((badgeAwarded > 0) && (badgeName != null) && (badgeName.length() > 0))
		{
			obj_id[] objPlayers = getPlayerCreaturesInRange(self, 255);
	
			if (objPlayers != null && objPlayers.length>0)
			{
				for(int i = 0; i < objPlayers.length; i++)
				{
					badge.grantBadge(objPlayers[i], badgeName);
				}
			}		
		}
	
	}

	setObjVar(self, "auto_invasion.invasion_active", 0);

// Kill off stragglers and their references
	int spawnNum = getIntObjVar(self, "auto_invasion.spawn_num");

	for(int i = 1; i <= 40; i++)
	{
		obj_id spawn = getObjIdObjVar(self, "auto_invasion.spawn" + i);
		
		if(isIdValid(spawn) )
		{
			messageTo(spawn, "goDie", null, 1, false);
		}		

		removeObjVar(self, "auto_invasion.spawn" + i);
	}

// Killing objvars set during startInvasion and launchWave

	removeObjVar(self, "auto_invasion.spawn_delay");
	removeObjVar(self, "auto_invasion.min_radius");
	removeObjVar(self, "auto_invasion.max_radius");
	removeObjVar(self, "auto_invasion.max_waves");
	removeObjVar(self, "auto_invasion.current_wave");
	removeObjVar(self, "auto_invasion.spawn_number");
	removeObjVar(self, "auto_invasion.player_difficulty");
	removeObjVar(self, "auto_invasion.level_threshold");
	removeObjVar(self, "auto_invasion.mob_min_index");
	removeObjVar(self, "auto_invasion.mob_max_index");
	removeObjVar(self, "auto_invasion.current_wave_difficulty");
	removeObjVar(self, "auto_invasion.done_spawning");
	removeObjVar(self, "auto_invasion.number_dead");
	removeObjVar(self, "auto_invasion.test_mode");

// Deactivating invasion and setting next invasion time

	int referenceNumber = getIntObjVar(self, "auto_invasion.reference_number");
	float minInvasionTime = dataTableGetFloat(DATATABLE, referenceNumber, "MINTIME");
	float timeChunkSize = dataTableGetFloat(DATATABLE, referenceNumber, "TIMECHUNKSIZE");
	int numTimeChunk = dataTableGetInt(DATATABLE, referenceNumber, "NUMTIMECHUNK");
	float rightNow = getGameTime();

	float nextInvasionTime = ( rand(1, numTimeChunk) * timeChunkSize ) + minInvasionTime + rightNow;

	setObjVar(self, "auto_invasion.next_invasion_time", nextInvasionTime);
	setObjVar(self, "auto_invasion.testing_multiplier", 1);
	messageTo(self, "invasionTimerPing", null, 2700, false);	//********* SHOULD BE 45 MINUTES ON FINAL
	
	return SCRIPT_CONTINUE;
}

void announceStatusToPlayers(obj_id self, string messageId)
{
	obj_id[] objPlayers = getPlayerCreaturesInRange(self, 256.0f);	
	
	if (objPlayers != null && objPlayers.length>0)
	{
		for(int i = 0; i < objPlayers.length; i++)
		{
			sendSystemMessage(objPlayers[i], new string_id("auto_invasion", messageId));
		}
	}	

}

trigger OnHearSpeech(obj_id objSpeaker, string strText)	// Added for testing
{

	if(isGod(objSpeaker))
	{
		if(toLower(strText).startsWith("forceinvasionevent") )
		{

			int invasionActive = getIntObjVar(self, "auto_invasion.invasion_active");
			StringTokenizer st = new StringTokenizer(strText);

			if(st.countTokens() > 2)
				return SCRIPT_CONTINUE;

			if(st.countTokens() == 2 && invasionActive == 0)
			{
				string command = st.nextToken();
				string testingMultiplierStr = st.nextToken();
				int testingMultiplier = utils.stringToInt(testingMultiplierStr);

				if(testingMultiplier <= 0)
					return SCRIPT_CONTINUE;

				setObjVar(self, "auto_invasion.testing_multiplier", testingMultiplier);
				messageTo(self, "startInvasion", null, 1, false);
				setObjVar(self, "auto_invasion.invasion_active", 1);
				setObjVar(self, "auto_invasion.test_mode", 1);
				
				return SCRIPT_CONTINUE;
			}

			if(invasionActive == 0)
			{
				messageTo(self, "startInvasion", null, 1, false);
				setObjVar(self, "auto_invasion.invasion_active", 1);
				setObjVar(self, "auto_invasion.test_mode", 1);
			}
		}
	}

	return SCRIPT_CONTINUE;
}

*************************/