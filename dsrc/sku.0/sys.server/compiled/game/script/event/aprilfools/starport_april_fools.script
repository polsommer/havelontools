include library.ai_lib;
include library.create;
include library.utils;

const string CITY_OBJVAR = "aprilFools.city";
const string LAST_SPAWN = "aprilFools.lastSpawn";
const string CREATURE_LIST = "aprilFools.creatures";

const string SPAWN_DATATABLE = "datatables/event/aprilfools/aprilfools09.iff";

trigger OnInitialize()
{
	setObjVar(self, LAST_SPAWN, 0);
	messageTo(self, "heartbeat", null, 60.0f, false);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	setObjVar(self, LAST_SPAWN, 0);
	messageTo(self, "heartbeat", null, 60.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler heartbeat()
{
	//LOG("AprilFools", "Heartbeat called.");
	string foolsDayRunning = getConfigSetting("GameServer", "foolsDay");

	if (foolsDayRunning == null || foolsDayRunning.length() <= 0)
	{
		//LOG("AprilFools", "Failed config check.");
		messageTo(self, "heartbeat", null, 60.0f, false);
		return SCRIPT_CONTINUE;
	}


	int currentTime = getCalendarTime();
	int midnightOnAprilFoolsDay = getCalendarTime(2010, 4, 1, 0, 0, 0);
	int midnightOnDayAfterAprilFools = getCalendarTime(2010, 4, 2, 0, 0, 0);

	string forceAprilFools = getConfigSetting("GameServer", "forceFoolsDay");

	if(forceAprilFools == null || forceAprilFools.length () <= 0)
	{
		if(currentTime < midnightOnAprilFoolsDay || currentTime > midnightOnDayAfterAprilFools)
		{
			//LOG("AprilFools", "Failed time check.");
			messageTo(self, "cleanupCreatures", null, 0.0f, false);
			messageTo(self, "heartbeat", null, 60.0f, false);
			return SCRIPT_CONTINUE;
		}

	}

	if(!hasObjVar(self, CITY_OBJVAR))
	{
		LOG("AprilFools", "No City ObjVar, bailing.");
		messageTo(self, "heartbeat", null, 60.0f, false);
		return SCRIPT_CONTINUE;
	}

	string cityName = getStringObjVar(self, CITY_OBJVAR);

	string spawnDatatable = SPAWN_DATATABLE;
	if(!dataTableOpen(spawnDatatable))
	{
		LOG("AprilFools", "Failed to open table " + spawnDatatable);
		return SCRIPT_CONTINUE;
	}

	int spawnTime = 60 * 60; //one hour
	int configTime = utils.stringToInt(getConfigSetting("GameServer", "foolsDayTimer"));

	if(configTime >= 0)
		spawnTime = configTime * 60;


	int lastSpawnTime = getIntObjVar(self, LAST_SPAWN);

	if(currentTime - lastSpawnTime < spawnTime)
	{
		//LOG("AprilFools", "Not time to spawn yet, time till next spawn: " + ((currentTime - lastSpawnTime)/60));
		messageTo(self, "heartbeat", null, 60.0f, false);
		return SCRIPT_CONTINUE;
	}

	string planetName = getCurrentSceneName();
	resizeable obj_id [] creatureList = new obj_id[0];
	int numRows = dataTableGetNumRows(spawnDatatable);
	//LOG("AprilFools", "Datatable had " + numRows + " number of rows.");
	for(int i = 0; i < numRows; ++i)
	{


		string dtPlanetName = dataTableGetString(spawnDatatable, i, 0);
		string dtCityName = dataTableGetString(spawnDatatable, i, 1);

		if(planetName.equals(dtPlanetName) == false || cityName.equals(dtCityName) == false)
			continue;

		int maxCreatures = dataTableGetInt(spawnDatatable, i, 6);

		int totalCreatures = 0;

		if(hasObjVar(self, CREATURE_LIST))
		{
			obj_id [] currentCreatures = getObjIdArrayObjVar(self, CREATURE_LIST);

			if(currentCreatures != null && currentCreatures.length > 0)
			{
				for(int j = 0; j < currentCreatures.length; ++j)
				{
					if(isIdValid(currentCreatures[j]) && exists(currentCreatures[j]) && !isDead(currentCreatures[j]))
					{
						++totalCreatures;
						utils.addElement(creatureList, currentCreatures[j]);
					}

				}

			}

		}

		//LOG("AprilFools", "Max Creatures = " + maxCreatures + " Total Creatures = " + totalCreatures);

		if(totalCreatures == maxCreatures)
		{
			setObjVar(self, CREATURE_LIST, creatureList);

			messageTo(self, "heartbeat", null, 60.0f, false);

			return SCRIPT_CONTINUE;

		}

		string templateName = dataTableGetString(spawnDatatable, i, 2);
		float cx = dataTableGetFloat(spawnDatatable, i, 3);
		float cy = dataTableGetFloat(spawnDatatable, i, 4);
		float cz = dataTableGetFloat(spawnDatatable, i, 5);

		location currentLoc = getLocation(self);

		currentLoc.x = cx;
		currentLoc.y = cy;
		currentLoc.z = cz;

		//LOG("AprilFools", "Spawning " + templateName + " at " + currentLoc.x + " " + currentLoc.y + " " + currentLoc.z);

		for(int j = totalCreatures; j < maxCreatures; ++j)
		{
			currentLoc.x += (10 * j);
			obj_id newCreature = create.object(templateName, currentLoc);

			//LOG("AprilFools", "New Creature = " + newCreature);

			utils.addElement(creatureList, newCreature);
		}

		setObjVar(self, CREATURE_LIST, creatureList);

		setObjVar(self, LAST_SPAWN, getCalendarTime());
	}


	messageTo(self, "heartbeat", null, 60.0f, false);

	return SCRIPT_CONTINUE;

}

messageHandler cleanupCreatures()
{
	if(hasObjVar(self, CREATURE_LIST))
	{
		obj_id [] currentCreatures = getObjIdArrayObjVar(self, CREATURE_LIST);

		if(currentCreatures != null && currentCreatures.length > 0)
		{
			for(int j = 0; j < currentCreatures.length; ++j)
			{
				if(isIdValid(currentCreatures[j]) && exists(currentCreatures[j]) && !isDead(currentCreatures[j]))
				{
					if(ai_lib.isInCombat(currentCreatures[j]))
					{
						if(!utils.hasScriptVar(self, "destroyDelay"))
						{
							//Postpone the inevitable by another hour.
							utils.setScriptVar(self, "destroyDelay", 1);
							return SCRIPT_CONTINUE;
						}

						destroyObject(currentCreatures[j]);
					}

				}

			}

		}

	}

	return SCRIPT_CONTINUE;
}