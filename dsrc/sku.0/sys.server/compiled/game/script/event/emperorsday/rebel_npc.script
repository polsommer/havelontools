
/***** INCLUDES ********************************************************/

include library.ai_lib;
include library.anims;
include library.chat;
include library.colors;
include library.factions;
include library.holiday;
include library.pclib;
include library.prose;
include library.stealth;
include library.utils;

/***** FUNCTIONS ********************************************************/

trigger OnAttach()
{
	string npcType = getStringObjVar (self, "emperorsday.npcType");
	if (npcType != null)
	{
		obj_id masterObject = holiday.masterObjectObjId(self);
		if (isIdValid(masterObject))
		{
			dictionary params = new dictionary();
			params.put("type", npcType);
			params.put("npcObjId", self);
			
			messageTo(masterObject, "npcTypeList", params, 3.0f, false);
		}
	}
	
	return SCRIPT_CONTINUE;
}
//Checking if Leia has arrived either in front of the officer or back at the Falcon.
trigger OnMovePathComplete()
{
	obj_id masterObject = holiday.masterObjectObjId(self);
	
	if(hasObjVar (self, "leia"))
	{
		CustomerServiceLog("holidayEvent", "imperial_npc.OnMovePathComplete: Leia has come to a stop at a location.");				

		obj_id spawnPoint = holiday.getEmpireDayWaypointObjectObjId(self, "spawnCeleb", holiday.OBJECT_NEAR_CHECK_RANGE_2M);
		obj_id pathPoint = holiday.getEmpireDayWaypointObjectObjId(self, "pathLeia", holiday.OBJECT_NEAR_CHECK_RANGE_2M);
		
		if (isIdValid(pathPoint) && exists(pathPoint))
		{
			if (isIdValid(masterObject))
			{
				messageTo(masterObject, "startConversation", null, 3.0f, false);
				setYaw (self, -180.0f);
			}
		}
		if (isIdValid(spawnPoint) && exists(spawnPoint))
		{
			if (isIdValid(masterObject))
			{
				//Removing sound object
				obj_id oldSoundObject = utils.getObjIdScriptVar(self, "musicObject");

				if ((isIdValid(oldSoundObject)) && (exists(oldSoundObject)))
					destroyObject(oldSoundObject);
					
				messageTo(masterObject, "destroyParade", null, 5.0f, false);
			}
		}		
		
	}
	
	else if (hasObjVar(self, "han"))
	{
		CustomerServiceLog("holidayEvent", "imperial_npc.OnMovePathComplete: Han has come to a stop at a location.");				
	
		obj_id spawnPoint = holiday.getEmpireDayWaypointObjectObjId(self, "spawnCeleb", holiday.OBJECT_NEAR_CHECK_RANGE_2M);
		obj_id pathPoint = holiday.getEmpireDayWaypointObjectObjId(self, "pathHan", holiday.OBJECT_NEAR_CHECK_RANGE_2M);

		if (isIdValid(spawnPoint) && exists(spawnPoint))
		{
			if (isIdValid(masterObject))
			{
				if (hasObjVar(self, "han"))
				{
					destroyObject(self);
					if (utils.hasScriptVar(masterObject, "solo"))
						utils.removeScriptVar(masterObject, "solo");
				}
			}
		}
		if (isIdValid(pathPoint) && exists(pathPoint))
		{
			CustomerServiceLog("holidayEvent", "imperial_npc.OnMovePathComplete: Han has a valid pathPoint.");						
			setYaw (self, -140.0f);
		}
	}
	
	else if (hasObjVar(self, "chewie"))
	{
		CustomerServiceLog("holidayEvent", "imperial_npc.OnMovePathComplete: Chewie has come to a stop at a location.");				
	
		obj_id spawnPoint = holiday.getEmpireDayWaypointObjectObjId(self, "spawnCeleb", holiday.OBJECT_NEAR_CHECK_RANGE_2M);
		obj_id pathPoint = holiday.getEmpireDayWaypointObjectObjId(self, "pathChewie", holiday.OBJECT_NEAR_CHECK_RANGE_2M);

		if (isIdValid(spawnPoint) && exists(spawnPoint))
		{
			if (isIdValid(masterObject))
			{
				if (hasObjVar(self, "chewie"))
				{
					destroyObject(self);
					if (utils.hasScriptVar(masterObject, "chewbacca"))
						utils.removeScriptVar(masterObject, "chewbacca");
				}
			}
		}
		if (isIdValid(pathPoint) && exists(pathPoint))
		{
			CustomerServiceLog("holidayEvent", "imperial_npc.OnMovePathComplete: Chewie has a valid pathPoint.");						
			setYaw (self, -140.0f);
		}
	}
	
	else if(hasObjVar(self, "soldier"))
	{
		int soldierNumber = getIntObjVar(self, "soldier");
		if (soldierNumber != 0)
		{
			obj_id spawnPoint = holiday.getEmpireDayWaypointObjectObjId(self, "spawnsoldier"+soldierNumber, holiday.OBJECT_NEAR_CHECK_RANGE_2M);
			obj_id pathPoint = holiday.getEmpireDayWaypointObjectObjId(self, "pathsoldier"+soldierNumber, holiday.OBJECT_NEAR_CHECK_RANGE_2M);

			if (isIdValid(pathPoint) && exists(pathPoint))
			{
				location exactLoc = getLocation(pathPoint);
				pathTo(self, exactLoc);
				float pointYaw = getYaw (pathPoint);
				setYaw(self, pointYaw);
				ai_lib.setMood (self, "npc_imperial");
			}
			if (isIdValid(spawnPoint) && exists(spawnPoint))
			{
				float pointYaw = getYaw (spawnPoint);
				setYaw(self, pointYaw);
				
				dictionary params = new dictionary();
				params.put("objvarValue", soldierNumber);
				params.put("soldierObjId", self);
				
				messageTo(masterObject, "setOriginalMood", params, 2.0f, false);
			}
		}
	}
	return SCRIPT_CONTINUE;
}
//Badge giving process.
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!isIdValid(player) || ai_lib.isInCombat(player) || isIncapacitated(player) || isDead(player))
		return SCRIPT_CONTINUE;

	if(hasObjVar(self, "leia") && hasObjVar(self, "readyForBadge") && utils.hasScriptVar(player, "emperorsDayBadge"))
	{
		mi.addRootMenu(menu_info_types.ITEM_USE, holiday.BOW);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!isIdValid(player) || ai_lib.isInCombat(player) || isIncapacitated(player) || isDead(player))
		return SCRIPT_CONTINUE;

	if(hasObjVar(self, "leia") && hasObjVar(self, "readyForBadge") && utils.hasScriptVar(player, "emperorsDayBadge"))
	{
		obj_id[] listOfWinners = getObjIdArrayObjVar(self, "listOfWinners");
		if(listOfWinners == null || listOfWinners.length <= 0)
		{
			CustomerServiceLog("holidayEvent", "imperial_npc.OnObjectMenuSelect: THE LIST OF WINNERS WASNT FOUND ON VADER. Vader cannot give the player his badge.");				
			return SCRIPT_CONTINUE;
		}

		boolean playerReward = false;
		for(int i = 0;i < listOfWinners.length; i++)
		{
			if(player != listOfWinners[i])
				continue;

			playerReward = true;
			break;
		}

		if(!playerReward)
			return SCRIPT_CONTINUE;

		holiday.grantEmperorDayBadge(player, self, listOfWinners, holiday.REBEL_PLAYER);
	}
	return SCRIPT_CONTINUE;
}

trigger OnSawEmote(obj_id emoteSayer, string emotein)
{
	if(!isValidId(emoteSayer) || !exists(emoteSayer))
		return SCRIPT_CONTINUE;

	if(emotein == null || emotein.length() <= 0)
		return SCRIPT_CONTINUE;
	obj_id emotetarget = getLookAtTarget(emoteSayer);
	if(!isIdValid(emotetarget) || ai_lib.isInCombat(self) || ai_lib.isInCombat(emoteSayer) || isIncapacitated(self) || isDead(self))
		return SCRIPT_CONTINUE;

	if(factions.isImperial(emoteSayer) && emotetarget == self)
	{
		if(hasObjVar(self, "leia"))
		{
			obj_id honorGuard = holiday.getEmpireDayWaypointObjectObjId(self, "soldier", 1);
			if(isValidId(honorGuard))
			{
				holiday.slapPlayerDownForBeingRude(honorGuard, emoteSayer);
			}
		}
		else
		{
			holiday.slapPlayerDownForBeingRude(self, emoteSayer);
		}
		CustomerServiceLog("holidayEvent", "imperial_npc.OnObjectMenuSelect: Player: "+emoteSayer+" was rude to an NPC at the ceremony and will now be punished.");	
	}

	if(hasObjVar(self, "leia") 
	&& hasObjVar(self, "readyForBadge") 
	&& utils.hasScriptVar(emoteSayer, "emperorsDayBadge")
	&& emotetarget == self)
	{
		//Making sure master object is still around
		obj_id masterObject = holiday.masterObjectObjId(self);

		if (!isIdValid(masterObject) && !exists(masterObject))
			return SCRIPT_CONTINUE;

		if (factions.isRebel(emoteSayer))
		{
			switch (holiday.getEmoteBeligerence(emotein))
			{

			case 2:
				// Ignores this
				break;

			case 1:
				// Unacceptable, leaves.
				doAnimationAction(self, "shake_head_no");
				utils.removeScriptVar(emoteSayer, "emperorsDayBadge");
				factions.addFactionStanding(emoteSayer, factions.FACTION_REBEL, -250);

				prose_package pp = prose.getPackage(holiday.LEIA_BADGE_2);
				prose.setTT (pp, emoteSayer);
				chat.chat(self, emoteSayer, pp);

				dictionary params = new dictionary();
				params.put("rudePlayer", emoteSayer);
				messageTo(masterObject, "hanAngry", params, 2.0f, false);

				break;

			case 0:
				// Ignores this
				break;

			default:

				break;
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler playerKnockedOut()
{
	obj_id player = params.getObjId("myTarget");
	if(!isValidId(player) && !exists(player))
		return SCRIPT_CONTINUE;

	CustomerServiceLog("holidayEvent", "rebel_npc.playerKnockedOut: The player: "+player+" was knocked down by an Empire Day Ceremony NPC.");			
	damage(player, DAMAGE_KINETIC, HIT_LOCATION_BODY, 100);
	setPosture(player, POSTURE_INCAPACITATED);
	if(factions.isImperial(player))
		holiday.giveCeremonyAreaMobsHate(player, holiday.NPC_ATTACK_RANGE);
		
	return SCRIPT_CONTINUE;
}

// END END END END END END END END END END END END END END END END END END END END END END END END END