/***** INCLUDES ********************************************************/
include library.buff;
include library.collection;
include library.create;
include library.factions;
include library.groundquests;
include library.holiday;
include library.pet_lib;
include library.static_item;
include library.stealth;
include library.sui;
include library.trial;
include library.utils;

/***** CONSTANTS *******************************************************/

const string EMPIREDAY				= "event/empire_day";
const string LIFEDAY				= "event/life_day";

const string_id SID_COLLECTION_NOT_FLAGGED	= new string_id(EMPIREDAY, "imp_collection_not_flagged");
const string_id SID_WRONG_FACTION		= new string_id(EMPIREDAY, "wrong_faction");
const string_id SID_MNU_DRESS			= new string_id(EMPIREDAY, "destroy_resistance_sign");
const string_id SID_ZIP_DRESSING		= new string_id(EMPIREDAY, "destroy_zip_bar_text");
const string_id SID_PICK_PATH			= new string_id(EMPIREDAY, "pick_path");
const string_id SID_MOUNTED			= new string_id(LIFEDAY, "mounted");

const int COUNTDOWN_TIMER			= 3;

/***** TRIGGERS ********************************************************/

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!getTemplateName(self).equals(holiday.IMPERIAL_NONPLAYER_RESISTANCE_KIOSK))
		return SCRIPT_CONTINUE;

	if(factions.isRebel(player))
	{
		//sendSystemMessage(player, SID_WRONG_FACTION);
		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(player, holiday.PLAYER_EMPIRE_DAY_NEUTRAL + holiday.PLANET_VAR_PLAYER_FACTION_IMP) && !factions.isImperial(player))
	{
		//sendSystemMessage(player, SID_WRONG_FACTION);
		return SCRIPT_CONTINUE;
	}
	
	/*
	If the player doesn't have the collection flagged, they cannot participate
	*/
	if(!hasCompletedCollectionSlotPrereq(player, holiday.IMPERIAL_ANTIPROP_COUNTER_SLOT))
	{	
		//sendSystemMessage(player, SID_COLLECTION_NOT_FLAGGED);
		return SCRIPT_CONTINUE;
	}
	
	if(!buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_COMBATANT) && !buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_SF))
	{
		//TODO: MESSAGE HERE
		return SCRIPT_CONTINUE;
	}

	if(hasObjVar(self, holiday.EMPIRE_DAY_PROPAGANDA_LOCKED_OUT))
	{
		//TODO: MESSAGE HERE
		return SCRIPT_CONTINUE;
	}
	
	menu_info_data data = mi.getMenuItemByType (menu_info_types.ITEM_USE);
	mi.addRootMenu(menu_info_types.ITEM_USE, SID_MNU_DRESS);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(isDead(player) || isIncapacitated(player))
		return SCRIPT_CONTINUE;

	if(!getTemplateName(self).equals(holiday.IMPERIAL_NONPLAYER_RESISTANCE_KIOSK))
		return SCRIPT_CONTINUE;

	if(factions.isRebel(player))
	{
		//sendSystemMessage(player, SID_WRONG_FACTION);
		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(player, holiday.PLAYER_EMPIRE_DAY_NEUTRAL + holiday.PLANET_VAR_PLAYER_FACTION_IMP) && !factions.isImperial(player))
	{
		//sendSystemMessage(player, SID_WRONG_FACTION);
		return SCRIPT_CONTINUE;
	}
	/*
	If the player doesn't have the collection flagged, they cannot participate
	*/

	if(!hasCompletedCollectionSlotPrereq(player, holiday.IMPERIAL_ANTIPROP_COUNTER_SLOT))
	{
		sendSystemMessage(player, SID_COLLECTION_NOT_FLAGGED);
		return SCRIPT_CONTINUE;
	}
	
	if(!buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_COMBATANT) && !buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_SF))
	{
		//TODO: MESSAGE HERE
		return SCRIPT_CONTINUE;
	}
	if(hasObjVar(self, holiday.EMPIRE_DAY_PROPAGANDA_LOCKED_OUT))
	{
		//TODO: MESSAGE HERE
		return SCRIPT_CONTINUE;
	}

	if(pet_lib.isMounted(player))
	{
		sendSystemMessage(player, holiday.SID_NOT_WHILE_MOUNTED);
		return SCRIPT_CONTINUE;
	}
		
	int startTime = 0;
	int range = 3;
	int flags = 0;

	flags |= sui.CD_EVENT_INCAPACITATE;
	flags |= sui.CD_EVENT_DAMAGED;

	stealth.testInvisNonCombatAction(player, self);
	int countdownSui = sui.smartCountdownTimerSUI(self, player, "quest_countdown_timer", SID_ZIP_DRESSING, startTime, COUNTDOWN_TIMER, "handleObjectSwapTimer", range, flags);
	doAnimationAction(player, "manipulate_high");
	return SCRIPT_CONTINUE;
}		

/***** MESSAGE HANDLERS ************************************************/

//Handling the count down timer for dressing a tree and stomping presents.
messageHandler handleObjectSwapTimer()
{
	if(params == null || params.equals(""))
		return SCRIPT_CONTINUE;
	
 	int pid = params.getInt("id");
	obj_id player = params.getObjId("player");
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;

	int bp = sui.getIntButtonPressed(params);

	// Cancel button is sent when player manually closes the countdown window,
	// or when he/she moves out of range.
	if(bp == sui.BP_CANCEL)
	{
		detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);
		return SCRIPT_CONTINUE;
	}
	
	else if(bp == sui.BP_REVERT)
	{
		// Gets the reason why the timer was aborted
		int event = params.getInt("event");

		// You can handle the situation differently depending on the reason
		if(event == sui.CD_EVENT_LOCOMOTION)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_locomotion"));
		}
		else if(event == sui.CD_EVENT_INCAPACITATE)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_incapacitated"));
		}
		else if(event == sui.CD_EVENT_DAMAGED)
		{
			sendSystemMessage(player, new string_id("quest/groundquests", "countdown_interrupted_damaged"));
		}

		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR))
		return SCRIPT_CONTINUE;

	int test_pid = getIntObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR);

	if(pid != test_pid)
	{
		return SCRIPT_CONTINUE;
	}

	forceCloseSUIPage(pid);
	detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);

	if(buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_SF) && !factions.isDeclared(player))
	{
		sendSystemMessage(player, holiday.SID_NOT_SF);
	
		//CUSTOMER SERVICE LOG
		return SCRIPT_CONTINUE;
	}

	if(!holiday.replaceEventObject(self, player, holiday.IMPERIAL_PLAYER_DEFACED_KIOSK))
	{
		//CUSTOMER SERVICE LOG
		return SCRIPT_CONTINUE;
	}
	else
	{	
	
		string parentBuffName = "";

		if(buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_COMBATANT))
		{
			parentBuffName = holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_COMBATANT; 
		}
		else if(buff.hasBuff(player, holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_SF))
		{
			parentBuffName = holiday.BUFF_IMP_EMPIREDAY_ANTIPROP_SF; 
		}
		
		if(parentBuffName == null || parentBuffName.equals(""))
		{
			//CUSTOMER SERVICE LOG
			return SCRIPT_CONTINUE;
		}
		if(!holiday.rewardEmpireDayPlayer(player, holiday.IMPERIAL_PLAYER, parentBuffName, holiday.BUFF_IMPERIAL_ANTIPROPAGANDA_COUNTER, holiday.IMPERIAL_ANTIPROP_COUNTER_SLOT, holiday.EMPIRE_DAY_PROPAGANDA_LOCKED_OUT))
		{
			//CUSTOMER SERVICE LOG
			return SCRIPT_CONTINUE;
		}
		//holiday.setEventLockOutTimeStamp(player, holiday.EMPIRE_DAY_PROPAGANDA_TIMESTAMP);
	}
	return SCRIPT_CONTINUE;
}

//Destroying dressed tree or stomped presents.
messageHandler destroySelf()
{
	destroyObject(self);
	//CUSTOMER SERVICE LOG
	return SCRIPT_CONTINUE;
}