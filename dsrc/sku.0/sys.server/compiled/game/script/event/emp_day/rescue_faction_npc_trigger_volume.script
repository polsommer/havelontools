include library.chat;
include library.create;
include library.factions;
include library.groundquests;
include library.holiday;
include library.prose;
include library.stealth;
include library.utils;

const boolean LOGGING_ON			= false; 
const string MEATLUMP_LOG			= "empire_day_trigger";

trigger OnInitialize()
{
	//on init add trig volume
	createTriggerVolume(holiday.VOL_TRIGGER_NAME_PREFIX + self, holiday.VOL_TRIGGER_RADIUS, true);
	//no attribs because we only want players
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{
	blog("OnTriggerVolumeEntered INIT: "+whoTriggeredMe);

	if(!isPlayer(whoTriggeredMe))
		return SCRIPT_CONTINUE;
	
	blog("Spawner: "+getIntObjVar(self, "spawner"));

	//the spawner_creature is a creature from creature table
	if(!hasObjVar(self, "spawn_creature"))
		return SCRIPT_CONTINUE;

	blog("spawn_creature received!");
	
	//the active quest is the quest the trigger is looking for
	if(!hasObjVar(self, "active_quest"))
		return SCRIPT_CONTINUE;

	blog("active_quest received!");
		
	//the active task is the task that the trigger is looking for
	if(!hasObjVar(self, "active_task"))
		return SCRIPT_CONTINUE;

	blog("active_task received!");

	//the signal is the quest signal the trigger will send when the NPC is created.
	if(!hasObjVar(self, "signal_to_send"))
		return SCRIPT_CONTINUE;		

	blog("signal_to_send received!");
		
	string creatureSpawn = getStringObjVar(self, "spawn_creature");		
	if(creatureSpawn == null || creatureSpawn.length() <= 0)
		return SCRIPT_CONTINUE;

	string activeQuest = getStringObjVar(self, "active_quest");		
	if(activeQuest == null || activeQuest.length() <= 0)
		return SCRIPT_CONTINUE;
		
	string activeTask = getStringObjVar(self, "active_task");		
	if(activeTask == null || activeTask.length() <= 0)
		return SCRIPT_CONTINUE;
		
	string sendSignal = getStringObjVar(self, "signal_to_send");		
	if(sendSignal == null || sendSignal.length() <= 0)
		return SCRIPT_CONTINUE;		

	if(!groundquests.isQuestActive(whoTriggeredMe, activeQuest))
		return SCRIPT_CONTINUE;
	blog("Ground Quest Found!");

	if(!groundquests.isTaskActive(whoTriggeredMe, activeQuest, activeTask))
		return SCRIPT_CONTINUE;
	blog("Ground Task Found!");

	//If not combatant, send comm message
	if(factions.isOnLeave(whoTriggeredMe) && (factions.isRebel(whoTriggeredMe) || factions.isImperial(whoTriggeredMe)))
	{
		if(!utils.hasScriptVar(whoTriggeredMe, "commPlayerOnLeave"))
		{
			string npc = "object/mobile/mara_jade_empire_day.iff";
			string sound = "sound/sys_comm_rebel_female.snd";
			
			if(factions.isRebel(whoTriggeredMe))
			{
				npc = "object/mobile/wedge_antilles_remembrance_day.iff";
				sound = "sound/sys_comm_rebel_male.snd";
			}
			prose_package pp = new prose_package();
			prose.setStringId(pp, new string_id("event/empire_day", "rescue_onleave_notgood"));
			commPlayers(whoTriggeredMe, npc, sound, 10f, whoTriggeredMe, pp);
			//set scriptvar so the comm only happens once
			utils.setScriptVar(whoTriggeredMe, "commPlayerOnLeave", true);
		}
		return SCRIPT_CONTINUE;
	}
	
	//if player invis, make visible
	string invis = stealth.getInvisBuff(whoTriggeredMe);
	if(invis != null)
		stealth.checkForAndMakeVisibleNoRecourse(self);

	blog("Sending Signal!");
	//send the signal and spawn the NPC.
	groundquests.sendSignal(whoTriggeredMe, sendSignal);

	blog("Signal Sent!");
	location curLoc = getLocation(self);
	//spawn the meatlump mob
	
	blog("Creating Mob");
	obj_id mob = create.object(creatureSpawn, curLoc, 100);
	if(!isValidId(mob) || !exists(mob))
		return SCRIPT_CONTINUE;
	
	blog("Mob created Sent!");

	setObjVar(mob, "rescuerQuest", activeQuest);
	setObjVar(mob, "rescuer", whoTriggeredMe);
	blog("I set: "+whoTriggeredMe+" rescuer. Getting player location");

	location playerLoc = getLocation(whoTriggeredMe);
	if(playerLoc != null)
	{
		blog("player location found");
		pathTo(mob, playerLoc);
	}

	blog("saying something");
	
	prose_package pp = prose.getPackage(new string_id("event/empire_day", "rescue_me_breacher"), whoTriggeredMe);
	chat.publicChat(mob, whoTriggeredMe, null, null, pp);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id whoTriggeredMe)
{
	blog("Exited trigger volume: "+whoTriggeredMe);
	return SCRIPT_CONTINUE;
}

boolean blog(string msg)
{
	if(LOGGING_ON)
		LOG(MEATLUMP_LOG,msg);
	return true;
}
