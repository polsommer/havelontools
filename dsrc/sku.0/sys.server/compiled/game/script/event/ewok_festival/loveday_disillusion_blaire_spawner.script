
/**************************************************************************/

include library.ai_lib;
include library.create;
include library.holiday;
include library.utils;

/*************************************************************************/

trigger OnAttach()
{	
	messageTo(self, "spawnDisillusionedCupid", null, 4, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{	
	messageTo(self, "spawnDisillusionedCupid", null, 9, false);
	return SCRIPT_CONTINUE;
}

messageHandler spawnDisillusionedCupid()
{
	if ( !utils.hasScriptVar(self, "spawnedDisillusionedCupid") )
	{
		location spawnerLoc = getLocation(self);
		float spawnerYaw = getYaw(self);
		
		boolean spawnBlaire = false;
		string lovedayRunning = getConfigSetting("GameServer", "loveday");
		
		if (  lovedayRunning != null && lovedayRunning.length() > 0 ) 
		{
			if ( lovedayRunning.equals("true") || lovedayRunning.equals("1") )
			{
				spawnBlaire = true;
			}
		}
		
		if ( spawnBlaire )
		{
			// The Festival of Love is active...spawn the Disillusioned Cupid
			obj_id blaire = create.object("loveday_ewok_disillusion_blaire", spawnerLoc);
			if( isIdValid(blaire) )
			{
				ai_lib.setDefaultCalmBehavior(blaire, ai_lib.BEHAVIOR_SENTINEL);
				setYaw(blaire, spawnerYaw);
				
				setName(self, "Disillusion Spawner (Benjamin)");
			}
		}
		else
		{
			// The Festival of Love is inactive...spawn the Disillusioned Cupid's crossbow
			obj_id crossbow = createObject("object/tangible/quest/content/holiday_loveday_disillusion_crossbow.iff", spawnerLoc);
			if ( isIdValid(crossbow) )
			{
				setYaw(crossbow, spawnerYaw);
				
				setName(self, "Disillusion Spawner: (Crossbow)");
			}
		}
		
		utils.setScriptVar(self, "spawnedDisillusionedCupid", true);
	}
	return SCRIPT_CONTINUE;
}

void areaDebugMessaging(obj_id self, string message)
{
	obj_id[] players = getAllPlayers(getLocation(getTopMostContainer(self)), 35.0f);
	if ( players != null && players.length > 0 )
	{
		for( int i=0; i<players.length; i++ )
			sendSystemMessage(players[i], message, "");
	}
}


//God Mode Testing
trigger OnHearSpeech(obj_id speaker, string text)
{
	if ( !isGod(speaker) || !hasObjVar(speaker, "cupidTestingAuthorized") )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( text.equals("cupid_testing_spawner") )
	{
		utils.removeScriptVar(self, "spawnedDisillusionedCupid");
		messageTo(self, "spawnDisillusionedCupid", null, 1, false);
	}	
	return SCRIPT_CONTINUE;
}
