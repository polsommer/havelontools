
/**************************************************************************/

include library.ai_lib;
include library.create;
include library.holiday;
include library.utils;

/*************************************************************************/

const int CUPID_APPEARANCE_LENGTH = 900;


/*************************************************************************/

trigger OnAttach()
{	
	messageTo(self, "registerLovedayCupidSpawner", null, 4, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{	
	messageTo(self, "registerLovedayCupidSpawner", null, 9, false);
	return SCRIPT_CONTINUE;
}

messageHandler registerLovedayCupidSpawner()
{
	registerCupidSpawner(self);
	return SCRIPT_CONTINUE;
}

void registerCupidSpawner(obj_id self)
{
	string lovedayLoc = getStringObjVar(self, holiday.LOVEDAY_CUPID_SPAWNER_CITY_VAR);
	string spawnerId = holiday.LOVEDAY_CUPID_ELEMENT_NAME + lovedayLoc;

	getClusterWideData(holiday.LOVEDAY_CUPID_MANAGER_NAME, spawnerId, true, self);
	return;
}

trigger OnClusterWideDataResponse(string manage_name, string name, int request_id, string[] element_name_list, dictionary[] data, int lock_key)
{
	if (manage_name.equals(holiday.LOVEDAY_CUPID_MANAGER_NAME) )
	{
		if ( !utils.hasScriptVar(self, "alreadyRegisteredCupidSpawner") )
		{
			if ( hasObjVar(self, holiday.LOVEDAY_CUPID_SPAWNER_CITY_VAR) )
			{
				string lovedayLoc = getStringObjVar(self, holiday.LOVEDAY_CUPID_SPAWNER_CITY_VAR);
				string spawnerId = holiday.LOVEDAY_CUPID_ELEMENT_NAME + lovedayLoc;

				dictionary webster = new dictionary();
				webster.put(spawnerId, self);
				replaceClusterWideData(manage_name, spawnerId, webster, true, lock_key);
				
				utils.setScriptVar(self, "alreadyRegisteredCupidSpawner", true);
			}
		}
	}

	releaseClusterWideDataLock(manage_name, lock_key);
	return SCRIPT_CONTINUE;
}

messageHandler spawnHourlyCupidNPCs()
{
	if ( hasObjVar(self, holiday.LOVEDAY_CUPID_SPAWNER_CITY_VAR) )
	{
		string lovedayLoc = getStringObjVar(self, holiday.LOVEDAY_CUPID_SPAWNER_CITY_VAR);
		resizeable obj_id[] theSpawned = new obj_id[0];
		
		location here = getLocation(self);
		
		if ( !utils.hasScriptVar(self, "cupidSpawned") )
		{
			obj_id herald = create.object("loveday_ewok_cupid_herald", here);
			if( isIdValid(herald) )
			{
				ai_lib.setDefaultCalmBehavior(herald, ai_lib.BEHAVIOR_SENTINEL);
				setYaw(herald, getYaw(self));
				
				utils.addElement(theSpawned, herald);
			}
			
			if ( params != null && !params.isEmpty() )
			{
				boolean locChosen = params.getBoolean("chosen_"+lovedayLoc);
				if ( locChosen )
				{
					string datatable = "datatables/spawning/holiday/love_day_cupid_"+lovedayLoc+".iff";
					int numRows = dataTableGetNumRows(datatable);
					int chosenRow = rand(0, numRows - 1);
					
					dictionary cupidData = dataTableGetRow(datatable, chosenRow);
					float x = cupidData.getFloat("loc_x");
					float y = cupidData.getFloat("loc_y");
					float z = cupidData.getFloat("loc_z");
					float yaw = cupidData.getFloat("yaw");

					location spawnLoc = new location(x, y, z, here.area, null);
					obj_id cupid = create.object("loveday_ewok_cupid", spawnLoc);
					if( isIdValid(cupid) )
					{
						ai_lib.setDefaultCalmBehavior(cupid, ai_lib.BEHAVIOR_SENTINEL);
						setYaw(cupid, yaw);

						utils.addElement(theSpawned, cupid);
					}
				}
			}
			if ( theSpawned.length > 0 )
			{
				utils.setScriptVar(self, "cupidSpawned", theSpawned);
				messageTo(self, "despawnHourlyCupidNPCs", null, CUPID_APPEARANCE_LENGTH, false);
			}
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler despawnHourlyCupidNPCs()
{
	if ( utils.hasScriptVar(self, "cupidSpawned") )
	{
		resizeable obj_id[] theSpawned = utils.getResizeableObjIdArrayScriptVar(self, "cupidSpawned");
		if ( theSpawned != null && theSpawned.length > 0 )
		{
			for ( int i = 0; i < theSpawned.length; i++ )
			{
				obj_id spawnedNpc = theSpawned[i];
				if ( isIdValid(spawnedNpc) && exists(spawnedNpc) )
				{
					messageTo(spawnedNpc, "prepareForDespawn", null, 1, false);
				}
			}
		}
		
		utils.removeScriptVar(self, "cupidSpawned");
	}
	
	return SCRIPT_CONTINUE;
}

//God Mode Testing
trigger OnHearSpeech(obj_id speaker, string text)
{
	if ( !isGod(speaker) || !hasObjVar(speaker, "cupidTestingAuthorized") )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( text.equals("cupid_testing_spawner") )
	{
		utils.removeScriptVar(self, "alreadyRegisteredCupidSpawner");
		registerCupidSpawner(self);
	}
	
	if ( text.equals("cupid_spawner_cleanup") )
	{
		messageTo(self, "despawnHourlyCupidNPCs", null, 1, false);
	}
	
	return SCRIPT_CONTINUE;
}
