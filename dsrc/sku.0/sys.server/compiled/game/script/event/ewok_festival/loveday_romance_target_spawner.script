
/**************************************************************************/

include library.ai_lib;
include library.create;
include library.holiday;
include library.utils;

/*************************************************************************/

trigger OnAttach()
{	
	messageTo(self, "spawnRomanceTargetNpcs", null, 120, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{	
	messageTo(self, "spawnRomanceTargetNpcs", null, 180, false);
	return SCRIPT_CONTINUE;
}

messageHandler spawnRomanceTargetNpcs()
{
	if ( !utils.hasScriptVar(self, "spawnedRomanceTargetNpcs") )
	{
		location here = getLocation(self);
		string planet = here.area;
		
		// spawn male targets
		string maleDatatable = "datatables/spawning/holiday/love_day_romance_target_male_"+planet+".iff";
		spawnRomanceTargets(maleDatatable, self, planet, "loveday_romance_target_male");

		// spawn female targets
		string femaleDatatable = "datatables/spawning/holiday/love_day_romance_target_female_"+planet+".iff";
		spawnRomanceTargets(femaleDatatable, self, planet, "loveday_romance_target_female");
		
		utils.setScriptVar(self, "spawnedRomanceTargetNpcs", true);
	}
	return SCRIPT_CONTINUE;
}

void areaDebugMessaging(obj_id self, string message)
{
	obj_id[] players = getAllPlayers(getLocation(getTopMostContainer(self)), 35.0f);
	if ( players != null && players.length > 0 )
	{
		for( int i=0; i<players.length; i++ )
			sendSystemMessage(players[i], message, "");
	}
}

void spawnRomanceTargets(string datatable, obj_id self, string planet, string spawnName)
{	
	int numSets = holiday.getNumRomanticTraitsSets();
	resizeable int[] traitSets = new int[0];
	for( int j = 0; j < numSets; j++ )
	{
		// 15 traits and 30 match targets, 
		// so each trait is added to the list twice in order to have 30 in the list.
		utils.addElement(traitSets, j);
		utils.addElement(traitSets, j);
	}

	int numRows = dataTableGetNumRows(datatable);

	for ( int i = 0; i < numRows; i++ )
	{
		if ( traitSets == null || traitSets.length < 1 )
		{
			break;
		}
		
		dictionary cupidData = dataTableGetRow(datatable, i);
		float x = cupidData.getFloat("loc_x");
		float y = cupidData.getFloat("loc_y");
		float z = cupidData.getFloat("loc_z");
		float yaw = cupidData.getFloat("yaw");

		location spawnLoc = new location(x, y, z, planet, null);
		obj_id target = create.object(spawnName, spawnLoc);
		if( isIdValid(target) )
		{
			ai_lib.setDefaultCalmBehavior(target, ai_lib.BEHAVIOR_SENTINEL);
			setYaw(target, yaw);
			
			int traitSetIndex = rand(0, traitSets.length - 1);

			int traitSet = traitSets[traitSetIndex];

			holiday.setRomanticTraits(target, traitSet);
			
			utils.removeElementAt(traitSets, traitSetIndex);
			
			utils.setScriptVar(self, spawnName+"_"+i, target);
		}
	}
	
	return;
}

//God Mode Testing
trigger OnHearSpeech(obj_id speaker, string text)
{
	if ( !isGod(speaker) || !hasObjVar(speaker, "cupidTestingAuthorized") )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( text.equals("cupid_testing_spawner") )
	{
		utils.removeScriptVar(self, "spawnedRomanceTargetNpcs");
		messageTo(self, "spawnRomanceTargetNpcs", null, 1, false);
	}	
	return SCRIPT_CONTINUE;
}
