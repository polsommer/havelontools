include library.ai_lib;
include library.buff;
include library.chat;
include library.groundquests;
include library.prose;
include library.trial;
include library.utils;

trigger OnAttach()
{
	messageTo(self, "handleFarlesFaceTo", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler handleFarlesFaceTo()
{
	ai_lib.setMood(self, chat.MOOD_ANGRY);
	chat.setChatMood(self, chat.MOOD_ANGRY);
	
	obj_id player = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if ( isIdValid(player))
	{
		faceTo(self, player);
		startCombat(self, player);
	}
	return SCRIPT_CONTINUE;
}

trigger OnSawEmote(obj_id emoteSayer, string emoteSeen)
{
	checkForTheLove(self, emoteSayer, emoteSeen);
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	checkForTheLove(self, speaker, text);
	return SCRIPT_CONTINUE;
}

void checkForTheLove(obj_id self, obj_id player, string text)
{
	if ( !isPlayer(player) || isIncapacitated(player) || isDead(player) )
	{
		return;
	}
	
	if ( !groundquests.isQuestActive(player, "loveday_disillusion_mr_hate_v2") && !groundquests.isQuestActive(player, "loveday_disillusion_mr_hate_v2_noloot") )
	{
		return;
	}
	
	obj_id emoteTarget = getIntendedTarget(player);
	if( !isIdValid(emoteTarget) )
	{
		return;
	}
	
	obj_id eventPlayer = utils.getObjIdScriptVar(self, "waveEventPlayer");
	if ( !isIdValid(eventPlayer))
	{
		messageTo(self, "handleDestroySelf", null, 30, false);
		return;
	}

	if ( emoteTarget == self && player == eventPlayer )
	{
		//debugSpeakMsg(self, "I was emoted to! emote = " + text);
		if ( isInvulnerable(self) )
		{
			return;
		}
		
		string theLove = toLower(text);
		
		if ( theLove.equals("love") || theLove.indexOf("i love you") > -1 )
		{
			int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
			setAttrib(self, HEALTH, maxHealth);
			setInvulnerable(self, true);
			
			ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

			detachScript(self, "ai.creature_combat");
			attachScript(self, "conversation.loveday_disillusion_mr_hate");
			
			groundquests.sendSignal(player, "loveday_disillusion_mr_hate_02");
			
			faceTo(self, player);
			
			prose_package pp = new prose_package ();
			pp.stringId = new string_id("event/love_day","disillusion_mr_hate_loved");
			string emoterName = getName(player);
			prose.setTO(pp, emoterName);
			chat.publicChat(self, player, null, null, pp);
			
			doAnimationAction(self, "taken_aback");

			messageTo(self, "makeNpcStopCombat", null, 1, false);
		}
		else
		{
			
		}
	}
	
	return;
}


messageHandler makeNpcStopCombat()
{
	utils.removeScriptVar( self, "ai.combat.isInCombat");
	setCombatTarget(self, null);
	stopCombat(self);
	clearHateList(self);
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	buff.removeAllBuffs(self);
	
	return SCRIPT_CONTINUE;
}

trigger OnCreatureDamaged(obj_id attacker, obj_id wpn, int[] damage)
{
	int maxHealth = getUnmodifiedMaxAttrib(self, HEALTH);
	setAttrib(self, HEALTH, maxHealth);
	return SCRIPT_CONTINUE;
}

messageHandler handleDestroySelf()
{
	stopCombat(self);
	clearHateList(self);
	
	obj_id[] players = getPlayerCreaturesInRange(getLocation(self), 20f);
	if ( players != null && players.length > 0 )
	{
		for ( int i = 0; i < players.length; i++ )
		{
			npcEndConversation(players[i]);
		}
	}
	
	obj_id parent = trial.getParent(self);
	dictionary webster = trial.getSessionDict(parent);
	messageTo(parent, "defaultEventReset", webster, 0.25f, false);
	return SCRIPT_CONTINUE;
}

