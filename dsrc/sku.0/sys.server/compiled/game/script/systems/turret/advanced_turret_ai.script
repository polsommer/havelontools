// Advanced Turret AI
inherits systems.combat.combat_base;

include library.advanced_turret;
include library.utils;

const int INTERVAL_MAX	= 10;
const int FARTHEST_TRIGGER = INTERVAL_MAX - 1;


trigger OnInitialize()
{
	advanced_turret.activateTurret(self);
	
	return SCRIPT_CONTINUE;
}
trigger OnTriggerVolumeEntered( string volumeName, obj_id who )
{	
	if(isGod(who))
	{
		return SCRIPT_CONTINUE;
	}

	doLogging("OnTriggerEnt", ""+getName(who)+" has entered volume "+volumeName+" which is a valid volume name: "+volumeName.startsWith(advanced_turret.ALERT_VOLUME_NAME ));
	if(volumeName.startsWith(advanced_turret.ALERT_VOLUME_NAME ) && who != self)
	{
		advanced_turret.addTarget(self, who); // this method does all the necessary target checks		
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited( string volumeName, obj_id who )
{
	//Only remove when leaving the farthest trigger volume. Else they are leaving an in range trigger so reacquire.
	doLogging("OnTriggerExit", ""+getName(who)+" has exited volume name "+volumeName+" which is the farthest: "+volumeName.endsWith(advanced_turret.ALERT_VOLUME_NAME+FARTHEST_TRIGGER ));

	if(volumeName.endsWith(advanced_turret.ALERT_VOLUME_NAME+FARTHEST_TRIGGER ) && who != self)
	{
		advanced_turret.removeTarget(self, who);		
	}
	else
		advanced_turret.addTarget(self, who);
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectDamaged(obj_id attacker, obj_id weapon, int damage)
{
	if (!advanced_turret.handleTurretDamage(self, attacker, weapon, damage))
	{
		//TEF'd players can attack a turret while on leave.
		int maxCondition = getMaxHitpoints(self);
		setHitpoints(self, maxCondition);		
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler effectManager()
{
	utils.removeScriptVar(self, "playingEffect");
	
	return SCRIPT_CONTINUE;
}

messageHandler handleDestroyTurret()
{
	destroyObject(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler createTriggerVolume()
{
	if(params == null)
	{
		advanced_turret.explodeTurret(self, self);
		return SCRIPT_CONTINUE;
	}
	
	float range = advanced_turret.DEFAULT_TURRET_RANGE;
	if(params.containsKey("range"))
	{
		range = params.getFloat("range");
	}
	
	float interval = range / (float)INTERVAL_MAX;
	
	for (int i=0;i<INTERVAL_MAX;i++)
	{
		createTriggerVolume(advanced_turret.ALERT_VOLUME_NAME+i, interval*(i+1), true );
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler turretShot()
{
	if(params != null && isIdValid(self) && exists(self))
	{
		obj_id target = params.getObjId("target");
		
		if(!combatStandardAction("turretShot", self, target, advanced_turret.getTurretWeapon(self),  "", null, true))
		{
			advanced_turret.removeTarget(self, target);
		}
		
		advanced_turret.attackPulse(self);
	}
	
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	//LOG("doLogging/advanced_turret_ai/"+section, message);
}


















