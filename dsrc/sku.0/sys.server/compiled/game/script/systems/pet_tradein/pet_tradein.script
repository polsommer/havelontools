include library.ai_lib;
include library.callable;
include library.pet_lib;
include library.utils;
include library.chat;
include library.create;


const string CREATURE_TRADEIN = "creature_tradein";
const string TRADE_DATA = "datatables/dispenser/creature_trade_in.iff";
const string CREATURE_TABLE = "datatables/mob/creatures.iff";
const string CREATURE_NAME_FILE	= "mob/creature_names";


trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnGiveItem(obj_id pet, obj_id player)
{
	string oldPet = getStringObjVar( pet, "pet.creatureName");

	if(callable.hasAnyCallable(player))
	{
		string_id sysmessage = new string_id(CREATURE_TRADEIN, "store");
		sendSystemMessage( player, sysmessage);
		return SCRIPT_CONTINUE;
	}
	else
	{
		if (oldPet == null)
		{
			string_id sysmessage = new string_id(CREATURE_TRADEIN, "notacreature");
			sendSystemMessage(player, sysmessage);
			return SCRIPT_CONTINUE;
		}
		else
		{
			if (hasSkill(player, "outdoors_creaturehandler_novice") == true)
			{
				string_id sysmessage = new string_id(CREATURE_TRADEIN, "cant");
				sendSystemMessage( player, sysmessage);
				return SCRIPT_CONTINUE;
			}

			else
			{

				if (dataTableGetString( TRADE_DATA, oldPet, "trade") != null)
				{
					boolean isMount = false;
					
					if (getIntObjVar(pet, "ai.pet.trainedMount") == 1)
					{
						isMount = true;
					}

					tradePet(pet, player, isMount);
					return SCRIPT_CONTINUE;
				}

				else
				{
					string_id message = new string_id (CREATURE_TRADEIN, "invalid"); //Pet is not level 11-15
					chat.chat(self, message);
					return SCRIPT_CONTINUE;
				}
			}
		}
	}
}

void tradePet(obj_id trade, obj_id player, boolean isMount)
{


	string oldPet = getStringObjVar( trade, "pet.creatureName");
	string newPet = dataTableGetString(TRADE_DATA, oldPet, "trade");
	location spawnLoc = getLocation( player );
		spawnLoc.x += 2;
		spawnLoc.z += 2;
	string oldName = getName( trade );
	string_id oldRealName = new string_id (CREATURE_NAME_FILE, oldPet);
	string_id newRealName = new string_id (CREATURE_NAME_FILE, newPet);
	obj_id pet = create.createCreature( newPet, spawnLoc, true );
	pet_lib.makePet ( pet, player );
	//copy any commands from old pet
	copyObjVar ( trade, pet, "ai.pet.commands");


	destroyObject(trade);

	dictionary params = new dictionary();
	params.put( "pet", pet );
	params.put( "master", player );
	params.put( "isMount", isMount);
	messageTo (pet, "handlePetTradeInStore", params, 3, false);

	if (oldName.equals(getString(oldRealName)) || oldName.equals(getString(oldRealName) + "(baby)") || oldName.equals(getString(oldRealName) + " (baby)"))
	{
		setName ( pet, newRealName);
	}
	else
	{
		setName (pet, oldName);
	}





}






