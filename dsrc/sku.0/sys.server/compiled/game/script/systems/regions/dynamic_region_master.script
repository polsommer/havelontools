include library.ai_lib;
include library.create;
include library.regions;
include library.utils;

const string BIRTH = "dynamic_region.birth";
const string PLANET = "dynamic_region.planet";
const string NAME = "dynamic_region.name";
const string DURATION = "dynamic_region.duration";
const string MAX_DURATION = "dynamic_region.maxDuration";
const string CREATURE_LIST = "dynamic_region.creatureList";

trigger OnInitialize()
{
	if(hasObjVar(self, BIRTH))
		messageTo(self, "destroySelf", null, 0.0f, false);
	
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	messageTo(self, "heartbeat", null, 60.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	int currentEpoch = getCalendarTime();
	int birth = getIntObjVar(self, BIRTH);
	int maxDuration = getIntObjVar(self, MAX_DURATION);

	obj_id [] myCreatures = getObjIdArrayObjVar(self, CREATURE_LIST);
	if(currentEpoch < (birth + maxDuration * 60) && myCreatures != null && myCreatures.length > 0)
	{
		for(int i = 0; i < myCreatures.length; ++i)
		{
			if(isIdValid(myCreatures[i]) && ai_lib.isInCombat(myCreatures[i]))
			{
				// Someone is still fighting a creature, give them a bit more time.
				messageTo(self, "destroySelf", null, 60.0f,false);
				return SCRIPT_CONTINUE;
			}
		}
	}
	
	// Clean up any left over monsters.
	if(myCreatures != null && myCreatures.length > 0)
	{
		for(int i = 0; i < myCreatures.length; ++i)
		{
			if(isIdValid(myCreatures[i]))
			{
				destroyObject(myCreatures[i]);
			}
		}
	}
	
	string regionName;
	string regionPlanet;
	
	regionName = getStringObjVar(self, NAME);
	regionPlanet = getStringObjVar(self, PLANET);
	
	region regionSelf = getRegion(regionPlanet, regionName);
	
	deleteRegion(regionSelf);
	
	return SCRIPT_CONTINUE;
}

messageHandler heartbeat()
{
	if(!hasObjVar(self, DURATION))
		messageTo(self, "destroySelf", null, 0.0f, false);
	
	int duration = getIntObjVar(self, DURATION);
	int birth = getIntObjVar(self, BIRTH);
	
	if(duration == 0 || birth == 0)
		messageTo(self, "destroySelf", null, 0.0f, false);
		
	int currentEpoch = getCalendarTime();
	
	if(currentEpoch > (birth + (duration * 60)))
		messageTo(self, "destroySelf", null, 0.0f, false);
	else
	{
		int totalTimeSecondsLeft = (birth + (duration * 60)) - currentEpoch;
		if(totalTimeSecondsLeft > 60)
			messageTo(self, "heartbeat", null, 60.0f, false);
		else
			messageTo(self, "heartbeat", null, totalTimeSecondsLeft, false);
	}
		
	return SCRIPT_CONTINUE;
}

trigger OnDynamicSpawnRegionCreated(obj_id regionObject, string spawnDatatable, float x, float y, float z)
{
	LOG("DynamicSpawn", "Hit OnDynamicSpawnRegionCreated with paramers: " + regionObject + " " + spawnDatatable + " " + x + " " + y + " " + z);
	
	if(spawnDatatable == null || spawnDatatable == "")
	{
		LOG("DynamicSpawn", "Spawn table was empty");
		return SCRIPT_CONTINUE;
	}
	
	if(!dataTableOpen(spawnDatatable))
	{
		LOG("DynamicSpawn", "Failed to open table " + spawnDatatable);
		return SCRIPT_CONTINUE;
	}
	
	resizeable obj_id [] creatureList = new obj_id[0];
	int numRows = dataTableGetNumRows(spawnDatatable);
	LOG("DynamicSpawn", "Datatable had " + numRows + " number of rows.");
	for(int i = 0; i < numRows; ++i)
	{
		string templateName = dataTableGetString(spawnDatatable, i, 0);
		float cx = dataTableGetFloat(spawnDatatable, i, 1);
		float cy = dataTableGetFloat(spawnDatatable, i, 2);
		float cz = dataTableGetFloat(spawnDatatable, i, 3);
		
	
		location creatureLoc = new location();
		creatureLoc.x = x + cx;
		creatureLoc.y = y + cy;
		creatureLoc.z = z + cz;
		
		obj_id newCreature = create.object(templateName, creatureLoc);
		
		utils.addElement(creatureList, newCreature);
	}
	
	setObjVar(self, CREATURE_LIST, creatureList);
	
	return SCRIPT_CONTINUE;
}