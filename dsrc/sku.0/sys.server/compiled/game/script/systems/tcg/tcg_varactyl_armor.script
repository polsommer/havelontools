include library.create;
include library.utils;
include library.player_structure;
include library.sui;
include library.static_item;
include library.sui;
inherits terminal.base.base_terminal;

const string_id SID_VAC_ARMOR = new string_id("tcg", "start_statue");
const string_id SID_NOT_IN_HOUSE = new string_id("tcg", "not_in_house");
const string_id SID_NO_VARACYL_IN_DP = new string_id("tcg", "no_varactyl_in_dp");
const string_id SID_VAC_ARMOR_ADDED = new string_id("tcg", "armor_added");
const string_id SID_VAC_ARMOR_REMOVED = new string_id("tcg", "armor_removed");

/***** TRIGGERS ********************************************************/

//When opening the radial menu on the statue, the player will get the armor swap option if he passes the location check
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	
	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(checkLocation(self, player))
	{
		int startArmorSwap = mi.addRootMenu(menu_info_types.ITEM_USE, SID_VAC_ARMOR);
	}
	return SCRIPT_CONTINUE;
}

//If the armor swap option is called from the radial, check location again and get a list of varactyle mounts in the 
//players datapad. If no varactyles in the data pad, exit and tell teh player why
trigger OnObjectMenuSelect(obj_id player, int item)
{

	if(item == menu_info_types.ITEM_USE && isIdValid(player))
	{
		if(!checkLocation(self, player))
		{
			sendSystemMessage(player, SID_NOT_IN_HOUSE);
			return SCRIPT_CONTINUE;
		}
		
		obj_id[] varMounts = getVaractylMountList(player);
		
		if(varMounts.length > 0)
		{
			
			startArmorSwap(player, varMounts);
			return SCRIPT_CONTINUE;
		}
		
		sendSystemMessage(player, SID_NO_VARACYL_IN_DP);	
	}
	
	return SCRIPT_CONTINUE;
}

//This method ensures that the player is inside a player structure and that the player is the owner of the player structure
boolean checkLocation(obj_id item, obj_id player)
{
	
	if(!isIdValid(item))
	{
		return false;
	}

	if(!utils.isInHouseCellSpace(item))
	{
		return false;
	}
	
	if(!utils.isNestedWithinAPlayer(item))
	{
		obj_id house = getTopMostContainer(item);
		if(isIdValid(house) && player_structure.isBuilding(house) && player_structure.isOwner(house, player))
		{
			return true;
		}
	}
	return false;
}

//Gets the content of the players datapad and returns an array of all elements in the datapad that has the pet.creaturename
//ep3_mount_varactyl or tcg_armored_mount_varactyl
obj_id[] getVaractylMountList(obj_id player)
{

	obj_id dataPad = utils.getPlayerDatapad(player);
	resizeable obj_id[] data = getResizeableContents(dataPad);
	resizeable obj_id[] varMounts = new Vector();
	for(int i = 0; i < data.length; i++)
	{
		if(utils.hasObjVar(data[i], "pet.creatureName"))
		{
			string cName = utils.getStringObjVar(data[i], "pet.creatureName");
			if(cName == "ep3_mount_varactyl" || cName == "tcg_armored_mount_varactyl" || cName == "ep3_qst_reward_varactyl")
			{
				varMounts.addElement(data[i]);
			}
		}
	}
	obj_id[] mountsArray = new obj_id[varMounts.size()];
	varMounts.toArray(mountsArray);
	Arrays.sort(mountsArray);
	
	return mountsArray;
}

//Generates the SUI window that lists the varactyl mounts in the players datapad. It then generates the SUI window
void startArmorSwap(obj_id player, obj_id[] playerVarMounts)
{


	//utils.setScriptVar(player, "mountList", playerVarMounts);
	String[] mountNameList = new string[playerVarMounts.length];
	string mountName;
	string mountType;
	for(int i = 0; i < playerVarMounts.length; i++)
	{
		if(utils.hasObjVar(playerVarMounts[i], "pet.mountName"))
		{
			 mountName = getStringObjVar(playerVarMounts[i], "pet.mountName");
		}
		
		else
		{
			mountName = "Varactyl";
		}
		
		mountType = utils.getStringObjVar(playerVarMounts[i], "pet.creatureName");
		
		if(mountType == "ep3_mount_varactyl" || mountType == "ep3_qst_reward_varactyl")
		{
			mountName = mountName+" - Unarmored - Add Armor to the Mount";
		}
		
		else if(mountType == "tcg_armored_mount_varactyl")
		{
			mountName = mountName+" - Armored - Remove Armor from the Mount";
		}
		
		mountNameList[i] = mountName;
	
	}

	obj_id self = getSelf();
	stageMenu(self, player, "Please select a Varactyle mount.", "Armored Varactyle Statue", mountNameList, "mountChoice", true, "choice", "mountList.mountNames");
}

messageHandler mountChoice()
{
	obj_id container = getTopMostContainer(getSelf());
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

			
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	if(!isIdValid(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(!isIdValid(container))
	{
		return SCRIPT_CONTINUE;
	}
	

	obj_id[] varMounts = getVaractylMountList(player);
	obj_id mount = varMounts[idx];

	if(utils.hasObjVar(mount, "pet.creatureName"))
	{
		string mountType = utils.getStringObjVar(mount, "pet.creatureName");
		if(mountType == "ep3_mount_varactyl" || mountType == "ep3_qst_reward_varactyl")
		{
			setObjVar(mount, "pet.creatureName", "tcg_armored_mount_varactyl");
			sendSystemMessage(player, SID_VAC_ARMOR_ADDED);
		}

		if(mountType == "tcg_armored_mount_varactyl")
		{			
			setObjVar(mount, "pet.creatureName", "ep3_mount_varactyl");
			sendSystemMessage(player, SID_VAC_ARMOR_REMOVED);			

		}
	}

	return SCRIPT_CONTINUE;
}

/********************************** SUI  Methods*************************/
// This method handles the creation of the SUI window

void stageMenu(obj_id self, obj_id player, string prompt, string title, string[] options, string myHandler, boolean cancel, string PIDVar, string scriptVar)
{
	closeOldWindow(player, scriptVar);
	int pid = sui.listbox(self, player, prompt, sui.OK_CANCEL, title, options, myHandler, false, false);
	//sui.listboxUseOtherButton(pid, "Back");
	sui.showSUIPage(pid);
	setWindowPid(player, pid, PIDVar);
	utils.setScriptVar(player, scriptVar, options );
}

void closeOldWindow(obj_id player, string scriptVar)
{
	if ( utils.hasScriptVar(player, scriptVar))
	{
		int oldpid = utils.getIntScriptVar(player, scriptVar);
		forceCloseSUIPage (oldpid);
		utils.removeScriptVarTree(player, scriptVar);
	}
}

void setWindowPid(obj_id player, int pid, string scriptVar)
{
	if (pid > -1)
	{
		utils.setScriptVar(player, scriptVar, pid);
	}
}
