include library.create;
include library.static_item;
include library.target_dummy;
include library.utils;
include java.util.Enumeration;

const int PERIODIC_PURGE_CHECK = 600;

trigger OnAttach()
{
	messageTo(self, "handlePeriodicallyPurgeData", null, PERIODIC_PURGE_CHECK, false);
	
	target_dummy.setTargetDummyOwner(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{	
	messageTo(self, "handlePeriodicallyPurgeData", null, PERIODIC_PURGE_CHECK, false);
	
	// remove old combat data objvar that would have destroyed the entire game
	if ( hasObjVar(self, target_dummy.BASE_TARGET_DUMMY_VAR) )
	{
		removeObjVar(self, target_dummy.BASE_TARGET_DUMMY_VAR);
	}
	
	// check to make sure an owner has been set
	obj_id owner = target_dummy.getTargetDummyOwnerFromController(self);
	if ( !isIdValid(owner) )
	{
		owner = target_dummy.setTargetDummyOwner(self);
	}
	
	// check to see if we chould automatically recreate the target creature when initialized
	if ( hasObjVar(self, target_dummy.TARGET_DUMMY_ID_OBJVAR) )
	{
		obj_id previousTargetDummy = getObjIdObjVar(self, target_dummy.TARGET_DUMMY_ID_OBJVAR);
		if ( isIdValid(previousTargetDummy) )
		{
			if ( !exists(previousTargetDummy) )
			{
				target_dummy.removeTargetDummyFromPermissionsViaController(self, previousTargetDummy);
				
				if ( target_dummy.controllerContainmentCheck(self) )
				{
					target_dummy.recreateTargetDummy(self, owner);
					return SCRIPT_CONTINUE;
				}
				else
				{
					removeObjVar(self, target_dummy.TARGET_DUMMY_ID_OBJVAR);
				}
			}
		}
		else
		{
			removeObjVar(self, target_dummy.TARGET_DUMMY_ID_OBJVAR);
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(isInWorldCell(self) || isInWorldCell(player))
		return SCRIPT_CONTINUE;

	obj_id owner = target_dummy.getTargetDummyOwnerFromController(self);
	if ( isIdValid(owner) && player == owner )
	{
		if ( target_dummy.controllerContainmentCheck(self) )
		{
			string creatureName = getStringObjVar(self, target_dummy.CREATURE_NAME_OBJVAR);
			if(creatureName == null || creatureName.equals(""))
				return SCRIPT_CONTINUE;
			
			if ( hasObjVar(self, target_dummy.TARGET_DUMMY_ID_OBJVAR) )
			{
				int menuPlacement = mi.addRootMenu (menu_info_types.SERVER_MENU2, new string_id("target_dummy", "menu_cleanup_"+creatureName));
			}
			else
			{
				int menuPlacement = mi.addRootMenu (menu_info_types.SERVER_MENU1, new string_id("target_dummy", "menu_place_"+creatureName));
			}
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(isInWorldCell(self) || isInWorldCell(player))
		return SCRIPT_CONTINUE;

	obj_id owner = target_dummy.getTargetDummyOwnerFromController(self);
	if ( isIdValid(owner) && player == owner )
	{
		if ( item == menu_info_types.SERVER_MENU1 )
		{
			if ( target_dummy.controllerContainmentCheck(self) )
			{
				if ( target_dummy.createTargetDummy(self, player) == null )
				{
					if ( exists(player) )
						sendSystemMessage(player, new string_id("target_dummy", "failed_to_create_npc"));
				}
				else
				{
					sendDirtyObjectMenuNotification(self);
				}
			}
		}
		else if ( item == menu_info_types.SERVER_MENU2 )
		{
			obj_id targetDummy = target_dummy.getTargetDummyId(self);
			if ( isIdValid(targetDummy) )
			{
				target_dummy.cleanupTargetDummy(self, targetDummy);
				sendDirtyObjectMenuNotification(self);
			}
		}
	}
	sendDirtyObjectMenuNotification(self);
	
	return SCRIPT_CONTINUE;
}

trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	//to avoid stack trace when player deletes
	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;
		
	if ( !target_dummy.controllerContainmentCheck(self) )
	{
		obj_id targetDummy = target_dummy.getTargetDummyId(self);
		if ( isIdValid(targetDummy) )
		{
			target_dummy.cleanupTargetDummy(self, targetDummy);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler OnPack()
{	
	obj_id targetDummy = target_dummy.getTargetDummyId(self);
	if ( isIdValid(targetDummy) )
	{
		target_dummy.cleanupTargetDummy(self, targetDummy);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handlePeriodicallyPurgeData()
{	
	messageTo(self, "handlePeriodicallyPurgeData", null, PERIODIC_PURGE_CHECK, false);
	
	deltadictionary vars = self.getScriptVars();
	Enumeration keys = vars.keys();
	while ( keys.hasMoreElements() )
	{
		string key = (string)(keys.nextElement());
		int stringCheck = key.indexOf(target_dummy.LAST_ATTACK_TIME_VAR);
		if ( stringCheck > -1 )
		{
			int elapsedTime = getGameTime() - utils.getIntScriptVar(self, key);
			if ( elapsedTime > target_dummy.PURGE_DATA_INTERVAL )
			{
				string[] data = split(key, '.');
				// data[0] = target_dummy
				// data[1] = player obj_id
				// data[2] = attack type
				utils.removeScriptVarTree(self, data[0]+"."+data[1]);
			}
		}
	}
	return SCRIPT_CONTINUE;
}
