// Author: Brandon Reinhart

//------------------------------------------------
// Includes
//------------------------------------------------

include library.buff;
include library.utils;
include library.resource;

//------------------------------------------------
// Constants
//------------------------------------------------
const boolean LOGGING_ON			= false;
const string LOGGING_CATEGORY			= "lair_interactivity";

const string LAIR_SEARCHED = "lair.searched";
const int LAIR_BUFF_INCREASE = 2;

const string_id	SID_SEARCH_LAIR			= new string_id("lair_n", "search_lair");
const string_id	SID_FOUND_NOTHING		= new string_id("lair_n", "found_nothing");
const string_id	SID_INVENTORY_FULL		= new string_id("lair_n", "inventory_full");
const string_id	SID_FOUND_EGGS			= new string_id("lair_n", "found_eggs");
const string_id	SID_FOUND_BUGS			= new string_id("lair_n", "found_bugs");

const string[]	BUG_SAMPLE_OBJECTS =  { "object/tangible/bug_jar/sample_bats.iff",
										"object/tangible/bug_jar/sample_bees.iff",
										"object/tangible/bug_jar/sample_butterflies.iff",
										"object/tangible/bug_jar/sample_flies.iff",
										"object/tangible/bug_jar/sample_glowzees.iff",
										"object/tangible/bug_jar/sample_moths.iff" };

const string[] RARE_BUG_SAMPLE_OBJECTS =
{
	"object/tangible/fishing/bait/bait_grub.iff",
	"object/tangible/fishing/bait/bait_worm.iff",
	"object/tangible/fishing/bait/bait_insect.iff"};

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	// Only allow us to exist on creature lairs.
	if ( !hasObjVar( self, "npc_lair.isCreatureLair" ) )
	{
		detachScript( self, "systems.npc_lair.lair_interactivity" );
		return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// searchLair
//------------------------------------------------

messageHandler searchLair()
{
	if( params == null )
		return SCRIPT_CONTINUE;

	obj_id player = params.getObjId( "player" );
	searchLair(self, player);
	return SCRIPT_CONTINUE;
}

void searchLair( obj_id self, obj_id player )
{
	// Stop searching the lair.
	if ( utils.hasScriptVar( self, LAIR_SEARCHED ) )
		return;


	int searchagain = rand(0,2);
	// give a 66% change of being able to search the lair again.
	if( searchagain == 0 )
		utils.setScriptVar(self, LAIR_SEARCHED, 1); //if player is using qa scriptvar, this won't be set allowing repeated egg gathering. 

	// Get the player's inventory.
	obj_id pInv = utils.getInventoryContainer(player);
	if (!isValidId(pInv) || !exists(pInv))
		return;


	if (getVolumeFree(pInv) <= 0)
	{
		sendSystemMessage(player, SID_INVENTORY_FULL);	
		return;
	}
	
	// We want the player to find bug samples and sometimes eggs.
	// Let's make this datatable driven later.  (Next time we add something to it.)
	int searchRoll = rand( 1, 100 );

	if(searchRoll < 10)
	{
		// Nothing.
		sendSystemMessage( player, SID_FOUND_NOTHING );
	}
	else if ( searchRoll < 90 )
	{
	
		// Eggs.
		sendSystemMessage( player, SID_FOUND_EGGS );

		// Create an egg crate and give it to the player.
		int amt = rand( 10, 20 );
		
		if(buff.hasBuff(player, "lair_egg_buff"))
		{
			amt = amt * LAIR_BUFF_INCREASE;
		}
		
		obj_id[] resourceList = resource.createRandom( "meat_egg_"+getCurrentSceneName(), amt, getLocation(self), pInv, player, 2 );
		if(resourceList == null)
		{
			blog("ai.handleMilking: cannot get resource data from resource.createRandom function");
			CustomerServiceLog("milking_and_lair_search", "handleMilking: Player: "+getName(player)+" OID: "+player+" attempted to milk but could not resource data from resource.createRandom function while milking " + self + " "+getName(self));
			return;
		}
		
		//used in loop below for proper stacking of the 
		//Eggs in player inventory
		location curloc = getLocation(player);
		if(curloc == null)
		{
			blog("ai.handleMilking: cannot get resource data from getLocation cpp");
			CustomerServiceLog("milking_and_lair_search", "handleMilking: Player: "+getName(player)+" OID: "+player+" attempted to milk but could not retrieve location data while milking " + self + " "+getName(self));
			return;
		}
		
		//This is for proper stacking of the Eggs in player inventory
		for (int i = 0; i < resourceList.length; i++)
		{
			//this makes the resource auto stack in player inventory
			blog(""+resourceList[i]);
			setLocation(resourceList[i], curloc);
			putIn(resourceList[i], pInv, player);			
		}
	}
	else // searchRoll >= 90, 11% chance
	{
	
		// Bug sample.
		sendSystemMessage( player, SID_FOUND_BUGS );

		// Create a bug sample and give it to the player.
		if(rand(1, 100) < 50)
		{
			createObject(RARE_BUG_SAMPLE_OBJECTS[rand(0,RARE_BUG_SAMPLE_OBJECTS.length-1)], pInv, "");
		}
		else
		{
			createObject(BUG_SAMPLE_OBJECTS[rand(0,BUG_SAMPLE_OBJECTS.length-1)], pInv, "");
		}
	}
}

boolean blog(string msg)
{
	if(LOGGING_ON && !msg.equals(""))
		LOG(LOGGING_CATEGORY, msg);
	return true;
}