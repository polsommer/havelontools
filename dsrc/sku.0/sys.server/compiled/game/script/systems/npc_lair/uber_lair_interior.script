include library.create;
include library.ai_lib;
include library.player_structure;
// this handles interior spawns for uber lairs


trigger OnAttach()
{

	messageTo(self, "spawnStuff", null, 20, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	
	return SCRIPT_CONTINUE;
}

messageHandler spawnStuff()
{

	const int MAX_SPAWNS_PER_FRAME = 3;
	
	location locTest = getLocation(self);
	
	string strArea = locTest.area;
	string strLocations = getStringObjVar(self, "uberlair.locations");
	string strSpawns = getStringObjVar(self, "uberlair.spawnType");
	string strLocationsFile = "datatables/uberlair/locations/"+strLocations+".iff";
	string strSpawnFile = "datatables/uberlair/interior_spawns/"+strSpawns+".iff";
	
	LOG("interior", "strSPawnFine is "+strSpawnFile);
	LOG("interior", "strLocations is "+strLocationsFile);
	float[] fltX = dataTableGetFloatColumn(strLocationsFile, "fltX");
	float[] fltY = dataTableGetFloatColumn(strLocationsFile, "fltX");
	float[] fltZ = dataTableGetFloatColumn(strLocationsFile, "fltX");
	float[] fltYaw = dataTableGetFloatColumn(strLocationsFile, "fltX");
	string[] strCell = dataTableGetStringColumn(strLocationsFile, "strCell");
	
	string[] strMobs = dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobs");
	string[] strMobScripts = dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobScripts");

	string[] strBoss= dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobs");
	string[] strBossScripts = dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobScripts");

	string[] strObjective = dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobs");
	string[] strobjectiveScript = dataTableGetStringColumnNoDefaults(strSpawnFile, "strMobScripts");
	
	int intSpawnIndex = getIntObjVar(self, "intSpawnIndex");
	int intCounter = 0;
	for(int intI = 0; intI<fltX.length-2; intI++) // last 2 are special uber spawns
	{
		if(intCounter>MAX_SPAWNS_PER_FRAME)
		{
			setObjVar(self, "intSpawnIndex", intI);
			messageTo(self, "spawnMobiles", null, 3, false);
			return SCRIPT_CONTINUE; // no more spawns for you
		
		}
		location locSpawnLocation = new location();
		locSpawnLocation.area = strArea;
		locSpawnLocation.cell = getCellId(self, strCell[intI]);
		locSpawnLocation.x = fltX[intI];
		locSpawnLocation.y = fltY[intI];
		locSpawnLocation.z = fltZ[intI];
		int intRoll = rand(0, strMobs.length-1);
		string strMob = strMobs[intRoll];		
		obj_id objMob = create.object(strMob, locSpawnLocation);		
		if(objMob!=null)
		{
			ai_lib.setDefaultCalmBehavior(objMob, ai_lib.BEHAVIOR_SENTINEL);  		
		
		
		}
		else
		{
		
		
		}
	}
	/// we make our bosses down here
	location locSpawnLocation = new location();
	locSpawnLocation.area = strArea;
	locSpawnLocation.cell = getCellId(self, strCell[strCell.length-2]);
	locSpawnLocation.x = fltX[strCell.length-2];
	locSpawnLocation.y = fltY[strCell.length-2];
	locSpawnLocation.z = fltZ[strCell.length-2];
	create.object(strBoss[rand(0, strBoss.length-1)], locSpawnLocation);
	
	locSpawnLocation = new location();
	locSpawnLocation.area = strArea;
	locSpawnLocation.cell = getCellId(self, strCell[strCell.length-1]);
	locSpawnLocation.x = fltX[strCell.length-1];
	locSpawnLocation.y = fltY[strCell.length-1];
	locSpawnLocation.z = fltZ[strCell.length-1];
	obj_id objObjective = create.object(strObjective[rand(0, strObjective.length-1)], locSpawnLocation);
	attachScript(objObjective, "npc_lair.uber_lair_objective");
	return SCRIPT_CONTINUE;



}

trigger OnDestroy()
{
	
	boolean boolDestroy = true;
	obj_id[] objStuff = player_structure.getObjectsInBuilding(self);
	for(int intI = 0; intI<objStuff.length; intI++)
	{
		
		if(isPlayer(objStuff[intI]))
		{
			boolDestroy = false; // PLAYER IN BLDG!			
			expelFromBuilding(objStuff[intI]); // CHANGE THIS LATER		
		}
		else if((getGameObjectType(objStuff[intI])==GOT_corpse))
		{
			boolDestroy = false; // PLAYER IN BLDG!			
			expelFromBuilding(objStuff[intI]); // CHANGE THIS LATER			
		}
		
	}
	if(boolDestroy)
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		messageTo(self, "reDestroySelf", null, 1, false);
		return SCRIPT_OVERRIDE;
	}
	

}

messageHandler reDestroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}
