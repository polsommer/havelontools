/**
 * Copyright (c) ©2000-2003 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        treasure_guard.script
 * Description:  treasure_guard logic
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.ai_lib;
include library.anims;
include library.chat;
include library.create;
include library.group;
include library.prose;
include library.utils;
include ai.ai_combat;

//------------------------------------------------
// CONSTANTS
//------------------------------------------------

const string RARE_CHAT = "rare_elite_chat";

//------------------------------------------------
// OnAttach
//------------------------------------------------

trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	if(!ai_lib.isAttackable(self))
	{
		CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
			+ " is NOT ATTACKABLE to: " + attacker
			+ " Mob location: " + getLocation(self) 
			+". [ OnCreatureDamaged() ]");
	}
	
	if (getBehavior(self) != BEHAVIOR_CALM && getBehavior(self) != BEHAVIOR_ATTACK)
	{
		CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
			+ " is being attacked by: " + attacker
			+ " at location: " + getLocation(self) 
			+" with a behavior int: " + getBehavior(self)
			+". [ OnCreatureDamaged() ]");
	}

	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	// Set a destroy callback to 10 minutes.
	messageTo( self, "cleanUpGuard", null, 1000, true );

	// Attack!
	messageTo( self, "attackThief", null, 1, false );

	// Remove default convo.
	detachScript( self, "npc.converse.npc_convo" );
	detachScript( self, "npc.converse.npc_converse_menu" );

	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{ 	
 	CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
		+ " died at the hands of: " + killer
		+ " at location: " + getLocation(self) 
		+". [ OnDeath() ]");
	
 	//This is QA test variable
 	if(utils.hasObjVar(self, "glow"))
 	{
 		messageTo(self, "glow", null, 2, false );
 		return SCRIPT_CONTINUE;	
 	}
 	
 	obj_id fake_chest = getObjIdObjVar(self, "fake_chest");
 	if(isValidId(fake_chest) && exists(fake_chest))
 	{
 		//recalculate the enemy list on fake chest
 		//debugSpeakMsg(self, "I am sending message to: "+fake_chest);
 		messageTo(fake_chest, "recalculateGuardArray", null, 0, false );
 	}
 	
 	boolean wookieeNPC = isWookiee(self);	
	if(wookieeNPC)
	 	return SCRIPT_CONTINUE;

	int combatLevel = getIntObjVar(self, "intCombatDifficulty");
	if(combatLevel < 88)
	 	return SCRIPT_CONTINUE;
	 	
 	int glow = rand(1,100);
	if(glow == 50 || glow == 100)
	{
	 	messageTo(self, "glow", null, 2, false );	
	}
 	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	obj_id glowingMob = getObjIdObjVar(self, "glowing_mob");
	if(!isValidId(glowingMob) || !exists(glowingMob))
		return SCRIPT_CONTINUE;
	
	destroyObject(glowingMob);
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// cleanUpGuard
//------------------------------------------------

messageHandler cleanUpGuard()
{
	// Clean us up.
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// MESSAGE HANDLERS
//------------------------------------------------

messageHandler attackThief()
{
	// Get player ref.
	obj_id player = getObjIdObjVar( self, "player" );
	if(!isValidId(player) || !exists(player))
		return SCRIPT_CONTINUE;
		
	//see if player is in group
	if (!group.isGrouped(player))
	{
		startCombat(self, player);
		return SCRIPT_CONTINUE;
	}
	else
	{
		// Find someone other than the map owner to attack.
		obj_id groupObj = getGroupObject(player);
		if(!isValidId(groupObj) || !exists(groupObj))
			return SCRIPT_CONTINUE;
		
		obj_id[] members = getGroupMemberIds(groupObj);
		if ((members == null) || (members.length == 0))
			return SCRIPT_CONTINUE;	
			
		// Attack a random member of the group if close enough, otherwise player.
		boolean success = getRandomGroupMember(self, player, members);
		// If the above fails and the group is mid to large, try again
		if(!success && members.length >= 4)
		{
			boolean secondTry = getRandomGroupMember(self, player, members);
			if(!secondTry)
			{
				startCombat(self, player);
				CustomerServiceLog("treasureMap", "TREASURE MAP ERROR: Mob: " + self + " " + getName(self)
					+ " is attacking: " + player + " " + getName(player)
					+ " by default. This means the function failed to have the mob attach a group member"
					+ " [ attackThief() ]");
			}
		}
		else
		{
			startCombat(self, player);
			
			CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
				+ " is attacking: " + player + " " + getName(player)
				+ ". [ attackThief() ]");
		}
	}			
	
	return SCRIPT_CONTINUE;
}


messageHandler glow()
{
	//get the primary killer list
	obj_id[] primaryKillers = getObjIdArrayObjVar(self, "scenario.primaryKillers");
	if ( (primaryKillers == null) || (primaryKillers.length == 0) )
		return SCRIPT_CONTINUE;
	
	//get the primary killer of mob
	obj_id priKiller = primaryKillers[0];
	if(!isValidId(priKiller) || !exists(priKiller))
		return SCRIPT_CONTINUE;
	
	//get the mob template
	string mobTemplate = getTemplateName(self);
	if(mobTemplate == "")
		return SCRIPT_CONTINUE;
		
	//get the mob corpse location
	location glowLocation = getLocation(self);
	if(glowLocation == null)
		return SCRIPT_CONTINUE;
		
	//create the mobile with AI at the corpse location using the corpe template
	obj_id glowingMob = create.object( mobTemplate, glowLocation, 1, true, false );
	if(!isValidId(glowingMob) || !exists(glowingMob))
		return SCRIPT_CONTINUE;

	//set the Glowing Jedi variables
	setObjVar(self, "glowing_mob", glowingMob);
	setInvulnerable(glowingMob, true);
	setState(glowingMob, STATE_GLOWING_JEDI, true);
	setName(glowingMob, "Force Apparition");
	//Face the player
	faceTo(glowingMob, priKiller);
	//Say Something Mean
	chat.chat(glowingMob, chat.CHAT_SHOUT, chat.MOOD_ANGRY, new string_id("treasure_map/treasure_map", RARE_CHAT));
	
	//Express yourself
	messageTo( self, "expression_fist", null, 1, true );
	messageTo( self, "expression_disappear", null, 6, true );
	
	//Disappear without a trace
	messageTo( self, "cleanUpGlowie", null, 10, true );
	return SCRIPT_CONTINUE;
}

messageHandler expression_fist()
{
	obj_id glowingMob = getObjIdObjVar(self, "glowing_mob");
	if(!isValidId(glowingMob) || !exists(glowingMob))
		return SCRIPT_CONTINUE;
	doAnimationAction (glowingMob, anims.PLAYER_POUND_FIST_PALM);	

	return SCRIPT_CONTINUE;
}

messageHandler expression_disappear()
{
	obj_id glowingMob = getObjIdObjVar(self, "glowing_mob");
	if(!isValidId(glowingMob) || !exists(glowingMob))
		return SCRIPT_CONTINUE;
	
	doAnimationAction (glowingMob, anims.PLAYER_FORCE_ILLUSION);	

	return SCRIPT_CONTINUE;
}

messageHandler cleanUpGlowie()
{
	obj_id glowingMob = getObjIdObjVar(self, "glowing_mob");
	if(!isValidId(glowingMob) || !exists(glowingMob))
		return SCRIPT_CONTINUE;

	destroyObject(glowingMob);

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// FUNCTIONS
//------------------------------------------------

boolean getRandomGroupMember(obj_id self, obj_id player, obj_id[] members)
{
	if(!isValidId(player) || !exists(player))
		return false;

	if ((members == null) || (members.length == 0))
		return false;
		
	int j = rand(0, members.length-1);
	if (getDistance(getLocation(self), getLocation(members[j])) < 100 )
	{
		startCombat(self, members[j]);

		CustomerServiceLog("treasureMap", "Mob: " + self + " " + getName(self)
			+ " is attacking: " + members[j] + " " + getName(members[j])
			+ " located: "+ getLocation(members[j]) 
			+". [ getRandomGroupMember() ]");
		
		//debugSpeakMsg(self, "I am attacking: "+members[j]);
		return true;
	}
	return false;
}

boolean isWookiee(obj_id playerOrMob)
{
	int species = getSpecies(playerOrMob);
	if(species == SPECIES_WOOKIEE)
		return true;

	return false;
}

//------------------------------------------------
// barkAttack
//------------------------------------------------

messageHandler barkAttack()
{
	obj_id guard = self;
	if ( params == null )
		return SCRIPT_CONTINUE;
		
	boolean wookieeNPC = isWookiee(guard);	

	if(!wookieeNPC)
	{
		string type = params.getString("type");
		chat.chat(self, chat.CHAT_SHOUT, chat.MOOD_ANGRY, new string_id("treasure_map/treasure_map", "bark_"+type));
	}
	else
	{
		chat.chat(self, chat.CHAT_SHOUT, chat.MOOD_ANGRY, new string_id("treasure_map/treasure_map", "bark_wookiee"));
	}

	return SCRIPT_CONTINUE;
}
