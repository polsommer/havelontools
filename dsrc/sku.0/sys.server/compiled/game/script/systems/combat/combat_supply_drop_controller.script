include library.callable;
include library.static_item;
include library.utils;
include library.pet_lib;
include library.ai_lib;
include library.create;
include library.prose;

const string_id SID_ACQUIRE_HIRELING		= new string_id("spam", "officer_pet_success");
const string_id SID_TOO_MANY_HIRELINGS		= new string_id("spam", "officer_too_many_pets");

const string FOOD_TABLE				= "datatables/loot/officer_supply_drop.iff";
const string FOOD_LOW				= "low";
const string FOOD_MID				= "mid";
const string FOOD_HIGH				= "high";


const int FOOD_ITEMS			= 2;
const int GROUP_SIZE			= 8;

const int LEVEL_LOW_CAP			= 45;
const int LEVEL_MID_CAP			= 75;

messageHandler startLandingSequence()
{
	obj_id owner = params.getObjId("owner");
	int supplyId = params.getInt("supplyId");

	queueCommand(self, ##"prone", self, "", COMMAND_PRIORITY_FRONT);
	setPosture(self, POSTURE_PRONE);

	dictionary d = new dictionary();
	d.put("owner", owner);
	d.put("supplyId", supplyId);

	if(supplyId < 13)
		messageTo(self, "dropSupplies", d, 22.0f, false);
	else
		messageTo(self, "dropReinforcements", d, 22.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler dropReinforcements()
{
	obj_id owner = params.getObjId("owner");
	int supplyId = params.getInt("supplyId");

	location loc = getLocation(self);

	string itemString = "";

	switch(supplyId)
	{
		case 13: //of_reinforcements_1
			itemString = "officer_reinforcement_1";
			break;

		case 14: //of_reinforcements_2
			itemString = "officer_reinforcement_2";
			break;

		case 15: //of_reinforcements_3
			itemString = "officer_reinforcement_3";
			break;

		case 16: //of_reinforcements_4
			itemString = "officer_reinforcement_4";
			break;

		case 17: //of_reinforcements_5
			itemString = "officer_reinforcement_5";
			break;
	}

	if(supplyId > 12 && supplyId <= 17 && (itemString != null  || !itemString.equals("") ) )
	{
		summonOfficerPet(owner, itemString, loc);
	}

	dictionary d = new dictionary();
	d.put("owner", owner);

	messageTo(self, "startTakeOffSequence", d, 2.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler dropSupplies()
{
	obj_id owner = params.getObjId("owner");
	int supplyId = params.getInt("supplyId");
	int level = getLevel(owner);

	location loc = getLocation(self);

	obj_id crate = createObject("object/tangible/container/drum/supply_drop_crate.iff", loc);
	utils.setScriptVar(crate, "supply_drop.crateOwner", owner);
	attachScript(crate, "systems.combat.combat_supply_drop_crate");


	string itemString = "";

	switch(supplyId)
	{
		case 0:
			static_item.createNewItemFunction("item_stimpack_a_02_01", crate);
			static_item.createNewItemFunction("item_stimpack_a_02_01", crate);
			static_item.createNewItemFunction("weapon_npe_grenade_frag_02_01", crate);
			
			string foodList = "";
			
			if(level <= LEVEL_LOW_CAP)
			{
				foodList = FOOD_LOW;
			}
			else if (level <= LEVEL_MID_CAP)
			{
				foodList = FOOD_MID;
			}
			else
			{
				foodList = FOOD_HIGH;
			}
			
			string[] foodItems = dataTableGetStringColumn(FOOD_TABLE, foodList);

			for(int i = 0; i < FOOD_ITEMS; i++)
			{
				int r = rand(0, (foodItems.length - 1) );

				static_item.createNewItemFunction(foodItems[r], crate);
			}
			break;

		case 1: //of_medical_sup_1
			itemString = "item_off_temp_stimpack_02_01";
			break;

		case 2: //of_medical_sup_2
			itemString = "item_off_temp_stimpack_02_02";
			break;

		case 3: //of_medical_sup_3
			itemString = "item_off_temp_stimpack_02_03";
			break;

		case 4: //of_medical_sup_4
			itemString = "item_off_temp_stimpack_02_04";
			break;

		case 5: //of_medical_sup_5
			itemString = "item_off_temp_stimpack_02_05";
			break;

		case 6: //of_medical_sup_6
			itemString = "item_off_temp_stimpack_02_06";
			break;

		case 7: //of_tactical_sup_1
			itemString = "item_off_temp_tactical_buff_02_01";
			break;

		case 8: //of_tactical_sup_2
			itemString = "item_off_temp_tactical_buff_02_02";
			break;

		case 9: //of_tactical_sup_3
			itemString = "item_off_temp_tactical_buff_02_03";
			break;

		case 10: //of_tactical_sup_4
			itemString = "item_off_temp_tactical_buff_02_04";
			break;

		case 11: //of_tactical_sup_5
			itemString = "item_off_temp_tactical_buff_02_05";
			break;

		case 12: //of_tactical_sup_6
			itemString = "item_off_temp_tactical_buff_02_06";
			break;
	}

	if(supplyId > 0 && supplyId <= 12 && (itemString != null  || !itemString.equals("") ) )
	{
		for(int i = 0; i < GROUP_SIZE; i++)
		{
			static_item.createNewItemFunction(itemString, crate);
		}
	}

	dictionary d = new dictionary();
	d.put("owner", owner);

	messageTo(self, "startTakeOffSequence", d, 2.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler startTakeOffSequence()
{
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	setPosture(self, POSTURE_UPRIGHT);

	messageTo(self, "cleanUp", null, 20.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler cleanUp()
{
	destroyObject(self);

	return SCRIPT_CONTINUE;
}

void summonOfficerPet(obj_id owner, string itemString, location spawnPoint)
{
	if(!pet_lib.hasMaxPets(owner, pet_lib.PET_TYPE_NPC) && !pet_lib.hasMaxStoredPetsOfType(owner, pet_lib.PET_TYPE_NPC))
	{
		obj_id hireling = create.createCreature(itemString, spawnPoint, true);
		
		if(!isIdValid(hireling))
		{
			return;
		}

		setObjVar(hireling, "pet.petRestriction", 1); // I hereby declare 1 to mean no transfering, limited commands and permadeath. Verily.
		
		obj_id petControlDevice = pet_lib.makeControlDevice(owner, hireling);
		
		callable.setCallableCD(hireling, petControlDevice);

		pet_lib.makePet(hireling, owner);
		pet_lib.setupOfficerPetCommands(hireling);
		ai_lib.setDefaultCalmBehavior(hireling, ai_lib.BEHAVIOR_STOP);
		
		callable.setCallableLinks(owner, petControlDevice, hireling);
		
		dictionary params = new dictionary();

		params.put("pet", hireling);
		params.put("master", owner);
		params.put("controlDevice", petControlDevice);
		
		messageTo(hireling, "handleAddMaster", params, 0, false);

	}

	return;
}