inherits systems.combat.combat_base;
include library.utils;
include library.combat;
include library.utils;
include library.attrib;

// this is used for all delayed combat actions
// objOwner is the player who is attacking

trigger OnInitialize()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}



messageHandler handleDelayedAttack()
{
	obj_id objOwner = utils.getObjIdScriptVar(self, "objOwner");
	if(!exists(objOwner))
	{
		//LOG("meh", "Delay attack couldnt find owner. destroying egg.");
		destroyObject(self);
		return SCRIPT_CONTINUE; // NADA YOU ARE GONE
	}

	if(isDead(objOwner) || utils.hasScriptVar(self, combat.DIED_RECENTLY))
	{
		//LOG("meh", "Owner has died. destroying egg.");
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}


	dictionary actionDataDictionary = utils.getDictionaryScriptVar(self, "combatDataDict");
	combat_data actionData = combat_engine.getCombatDataFromDictionary(actionDataDictionary);
	if(actionData == null)
	{
		//LOG("meh", "Delay attack couldnt find combat data. destroying egg. " + strCommand);
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}

	obj_id objTarget = params.getObjId("objTarget");
	boolean boolCleanup = params.getBoolean("boolCleanup");
	string strEffect = params.getString("strEffect");
	
	if(strEffect!=null)
	{
		playClientEffectLoc(objOwner, strEffect, getLocation(self), 0);
	}

	//LOG("npe", "Doing attack "+strCommand);
	combatStandardAction(actionData.actionName, objOwner, objTarget, self, "", actionData, true );
	if(utils.hasScriptVar(self, "intLoopsLeft"))
	{
		int intLoopsLeft = utils.getIntScriptVar(self, "intLoopsLeft");
		intLoopsLeft = intLoopsLeft - 1;
		if(intLoopsLeft>0)
		{
			utils.setScriptVar(self, "intLoopsLeft", intLoopsLeft);
			actionData.delayAttackLoopsDone = actionData.delayAttackLoops - intLoopsLeft;
			//sendSystemMessageTestingOnly(objOwner, "delayAttackLoopsDone= " + actionData.delayAttackLoopsDone);
			doStandardDelayedAction(self, objTarget, actionData.actionName, actionData, false);
		}
	}
	if(boolCleanup)
	{
		messageTo(objOwner, "eggDetonated", null, 1, false);
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleDelayedParticle()
{

	obj_id objOwner = utils.getObjIdScriptVar(self, "objOwner");
	if(!exists(objOwner))
	{
		destroyObject(self);
		return SCRIPT_CONTINUE; // NADA YOU ARE GONE
	}

	string strEffect = params.getString("strEffect");
	if(strEffect!=null && strEffect.length() > 0)
	{
		//sendSystemMessageTestingOnly(objOwner, "Playing effect: " + strEffect);
		playClientEffectLoc(objOwner, strEffect, getLocation(self), 0);
	}
	boolean boolCleanup = params.getBoolean("boolCleanup");
	if(boolCleanup)
	{
		utils.removeObjVar(self, "objOwner");
		destroyObject(self);
	}
	return SCRIPT_CONTINUE;
}

