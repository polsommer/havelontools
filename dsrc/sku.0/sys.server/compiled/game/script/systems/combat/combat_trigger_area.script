include library.attrib;
include library.buff;
include library.combat;
include library.group;
include library.utils;


trigger OnInitialize()
{
	//we shouldnt still be around
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	//need to pull all relevent data
	string buffName = utils.getStringScriptVar(self, "triggerBuff");
	string prtName = utils.getStringScriptVar(self, "triggerPrt");
	obj_id owner = utils.getObjIdScriptVar(self, "objOwner");
	
	//have to make a single element array since that is the only way to remove the looping particle
	obj_id[] singleGroupMember = {owner};
	
	//time to expire the egg
	int expireTime = utils.getIntScriptVar(self, "triggerDuration");
	
	//create our dynamic trigger volume based on the owner and the buff
	createTriggerVolume("trigger_" + buffName + "_" + owner, combat.EGG_AURA_TRIGGER_MIN_RANGE, true);
	
	setAttributeInterested(self, attrib.ALL);
	setAttributeInterested(self, attrib.BEAST);
	
	//if we are grouped we draw the particle for the group
	if(group.isGrouped(owner))
	{
		obj_id groupId = getGroupObject(owner);
		obj_id[] groupMembers = getGroupMemberIds(groupId);
		playClientEffectLoc(groupMembers, prtName, getLocation(self), 0f, buffName + "_" + prtName + "_" + owner);
	}
	//otherwise we draw it just for ourselves
	else
	{
		playClientEffectLoc(singleGroupMember, prtName, getLocation(self), 0f, buffName + "_" + prtName + "_" + owner);
	}
	
	//send off message to kill egg
	messageTo(self, "cleanUpTriggerBuff", null, expireTime, false);
	
	return SCRIPT_CONTINUE;
}


trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{

	//find out what buff to give
	string buffName = utils.getStringScriptVar(self, "triggerBuff");
	//find out who owns the egg
	obj_id owner = utils.getObjIdScriptVar(self, "objOwner");
	
	//make sure we breached the correct trigger
	if(!volumeName.equals("trigger_" + buffName + "_" + owner))
		return SCRIPT_CONTINUE;
	
	//only buff group members
	if(group.inSameGroup(owner, whoTriggeredMe))
	{
		buff.applyBuff(whoTriggeredMe, self, buffName);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id whoTriggeredMe)
{
	//find out what buff to give
	string buffName = utils.getStringScriptVar(self, "triggerBuff");
	//find out who owns the egg
	obj_id owner = utils.getObjIdScriptVar(self, "objOwner");
	
	//make sure we breached the correct trigger
	if(!volumeName.equals("trigger_" + buffName + "_" + owner))
		return SCRIPT_CONTINUE;

	//remove the buff if you are in the group of the guy dropping the egg.
	if(buff.hasBuff(whoTriggeredMe, buffName) && buff.getBuffCaster(whoTriggeredMe, buffName) == self)
	{
		buff.removeBuff(whoTriggeredMe, buffName);
	}
	
	return SCRIPT_CONTINUE;
}



messageHandler cleanUpTriggerBuff()
{
	//get all the data
	string buffName = utils.getStringScriptVar(self, "triggerBuff");
	string prtName = utils.getStringScriptVar(self, "triggerPrt");
	obj_id owner = utils.getObjIdScriptVar(self, "objOwner");	
	string triggerName = "trigger_" + buffName + "_" + owner;

	//have to make a single element array since that is the only way to remove the looping particle
	obj_id[] singleGroupMember = {owner};
	
	//get everything in the trigger volume
	obj_id[] contents = getTriggerVolumeContents(self, triggerName);
	
	//loop thru them all
	for(int i = 0; i < contents.length; ++i)
	{
		//if we have the buff
		if(buff.hasBuff(contents[i], buffName))
		{
			//and the caster is the egg
			if(self == buff.getBuffCaster(contents[i], buffName))
			{
				//remove it
				buff.removeBuff(contents[i], buffName);
			}
		}
	}
	//need to remove particle from group
	if(group.isGrouped(owner))
	{
		obj_id groupId = getGroupObject(owner);
		obj_id[] groupMembers = getGroupMemberIds(groupId);
		stopClientEffectObjByLabel(groupMembers, self, buffName + "_" + prtName + "_" + owner, false);
	}
	else
	{
		//remove it from the caster if they are not in a group
		stopClientEffectObjByLabel(singleGroupMember, self, buffName + "_" + prtName + "_" + owner, false);
	}
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}
