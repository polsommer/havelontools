include library.spawning;
include library.utils;

const string dataTable					= "datatables/combat/npc_landmines.iff";

//Change to false to stop logging
const boolean doLogging					= false;

trigger OnAttach()
{
	
	if (canSpawnByConfigSetting())
		messageTo(self, "handleSpawnMines", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if (canSpawnByConfigSetting())
		messageTo(self, "handleSpawnMines", null, 10, false);

	return SCRIPT_CONTINUE;
}

messageHandler handleSpawnMines()
{
	if (!canSpawnNewMine(self))
		return SCRIPT_CONTINUE;

	string mineType = getStringObjVar(self, "mineField.mineType");
	float spawnRadius = getFloatObjVar(self, "mineField.fieldRadius");
	location spawnPoint = spawning.getRandomLocationInCircle(getLocation(self), spawnRadius);
	obj_id mine = createMine(mineType, spawnPoint);	
	
	doLogging("handleSpawnMines", "Spawned Mine("+getName(mine)+"/"+mine+")");
	doLogging("handleSpawnMines", "Current count is "+getCurrentMineCount(self));
	
	messageTo(self, "handleSpawnMines", null, getRespawn(self), false);
	return SCRIPT_CONTINUE;
}

boolean canSpawnNewMine(obj_id self)
{
	return (getCurrentMineCount(self) < getIntObjVar(self, "mineField.mineCount"));
}

int getRespawn(obj_id self)
{
	return getIntObjVar(self, "mineField.mineRespawn");
}

obj_id createMine(string mineType, location spawnPoint)
{
	string mineTemplate = dataTableGetString(dataTable, mineType, "mineTemplate");
	obj_id mine = createObject(mineTemplate, spawnPoint);
	removeAllObjVars(mine);
	detachAllScripts(mine);
	setObjVar(mine, "mineType", mineType);
	attachScript(mine, "systems.combat.combat_mine");
	setObjVar(mine, "parentSpawner", getSelf());
	setObjVar(mine, "targetFlag", "targetFlag.playerAndPet");
	incrimentMineCount(getSelf());
	return mine;
}

int getCurrentMineCount(obj_id self)
{
	if(utils.hasScriptVar(self, "currentMineCount"))
		return utils.getIntScriptVar(self, "currentMineCount");
	else
		return 0;
}

int incrimentMineCount(obj_id self)
{
	int current = getCurrentMineCount(self);
	current += 1;
	utils.setScriptVar(self, "currentMineCount", current);
	return getCurrentMineCount(self);
}

int decrimentMineCount(obj_id self)
{
	int current = getCurrentMineCount(self);
	if (current > 0) // don't go negative
		current -= 1;
	utils.setScriptVar(self, "currentMineCount", current);
	return getCurrentMineCount(self);
}

messageHandler handleMineRespawn()
{
	doLogging("handleMineRespawn", "Mine respawn call recieved");
	decrimentMineCount(self);
	messageTo(self, "handleSpawnMines", null, getRespawn(self), false);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (doLogging)
		LOG("debug/combat_mine_spawner/"+section, message);
}

boolean canSpawnByConfigSetting()
{
	string disableSpawners = getConfigSetting("GameServer", "disableMineFields");
	if (disableSpawners == null)
		return true;
		
	if (disableSpawners.equals("true") || disableSpawners.equals("1"))
		return false;
		
	return true;		
}