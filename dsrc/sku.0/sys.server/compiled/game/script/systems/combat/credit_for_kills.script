/********************************************************************************************
 * Copyright (c) 2000,2001 Sony Online Entertainment Inc.
 * All Rights Reserved
 ********************************************************************************************
 * Title:        credit_for_kills
 *
 * Description:  Once attached to a creature, this builds a list of all players that have
 * 				 attacked the creature and the total damage they have inflicted as value
 *               pairs.  Once the creature has been killed, each player in the list's percent
 *               of damage is calculated and if they are not a primary killer, the ratio of
 *               damage compared with the top player is then calculated and that new value
 *               is then the percentage of the creature's XP that they receive.
 *
 *               Adjuster Knobs for balancing:
 * 				 	PRIM_KILL_PERCENT
 *               	PERCENT_ADJUSTER
 *               	PLAYER_RATIO_ADJUST
 * 					MAX_PLAYERS
 * 					MAX_DISTANCE
 *
 * @author       $Author: Matthew Kwid$
 * @version      $Revision: $
 ********************************************************************************************
/***** INCLUDES *****************************************************************************/
include java.util.*;
include library.xp;
include library.bounty_hunter;

/***** INHERITS *****************************************************************************/


/***** CONSTANTS ****************************************************************************/

const string	VERSION					= "v1.00.00";

/***** TRIGGERS ****************************************************************************/
trigger OnAttach()
{
	xp.setupCreditForKills();
	return SCRIPT_CONTINUE;
}//OnAttach

trigger OnDetach()
{
	xp.cleanupCreditForKills();
	return SCRIPT_CONTINUE;

}//OnDetach

// XP tracking now handled in the combat system
/*
trigger OnCreatureDamaged(obj_id attacker, obj_id weapon, int[] damage)
{
	//LOG("credit_for_kills", "OnCreatureDamaged -> enter");
	if ( !isIdValid(attacker) || !isIdValid(weapon) )
		return SCRIPT_CONTINUE;

	if ( (damage == null) || (damage.length == 0) )
		return SCRIPT_CONTINUE;

	long totalDamage = 0;
	for ( int i = 0; i < 3; i++ )
	{
		int idx = i * 2;	//only interested in pool values
		int dam = damage[idx];
		//LOG("credit_for_kills", "Damage[" + idx + "] = " + dam);
		totalDamage += (long)dam;
	}

	//LOG("credit_for_kills", "Damage done to me, damage was "+totalDamage+" done by "+attacker);

	//LOG("credit_for_kills", "updating attacker list...");
	if ( totalDamage > Integer.MAX_VALUE )
		totalDamage = Integer.MAX_VALUE;

	xp.updateCombatXpList(self, attacker, weapon, (int)totalDamage);

	//LOG("credit_for_kills", "OnCreatureDamaged -> exit");

	return SCRIPT_CONTINUE;
}//OnCreatureDamaged
*/

/*
trigger OnObjectDamaged(obj_id attacker, obj_id weapon, int damage)
{
	//LOG("credit_for_kills", "OnObjectDamaged -> enter");

	if ( !isIdValid(attacker) || !isIdValid(weapon) )
		return SCRIPT_CONTINUE;

	//LOG("credit_for_kills", "Damage done to me, damage was "+damage+" done by "+attacker);

	//LOG("credit_for_kills", "updating attacker list...");
	xp.updateCombatXpList(self, attacker, weapon, damage);

	//LOG("credit_for_kills", "OnObjectDamaged -> exit");

	return SCRIPT_CONTINUE;
}//OnObjectDamaged
*/



trigger OnDeath(obj_id killer, obj_id corpseId)
{
	xp.assessCombatResults(self);
	messageTo(self, xp.HANDLER_XP_DELEGATED, null, 0.1f, false);
	xp.applyHealingCredit(self);
	obj_id attacker = getObjIdObjVar(self, xp.VAR_TOP_GROUP);
	if(hasObjVar(self, "bountyCheckPayBracket"))
		bounty_hunter.payBountyCheckReward(attacker, self);
		
	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled(obj_id killer)
{
	xp.assessCombatResults(self);
	messageTo(self, xp.HANDLER_XP_DELEGATED, null, 0.1f, false);
	xp.applyHealingCredit(self);
	return SCRIPT_CONTINUE;
}

messageHandler addEnemyHealer()
{
	if(params != null)
	{
		obj_id healer = params.getObjId("healer");
		if(isIdValid(healer))
		{
			deltadictionary scriptVars = self.getScriptVars();
			Vector healers = scriptVars.getResizeableObjIdArray("healers");
			if(healers == null)
			{
				healers = new Vector();
			}
			if(! healers.contains(healer))
			{
				healers.add(healer);
				scriptVars.put("healers", healers);
			}
		}
	}
	return SCRIPT_CONTINUE;
}
