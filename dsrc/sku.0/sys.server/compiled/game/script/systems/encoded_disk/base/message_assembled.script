/**
 * Copyright (c) ©2000-2003 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        message_assembled.script
 * Description:  message_assembled base logic
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.sui;
include library.locations;
include library.utils;
include library.scenario;
include library.create;
include library.ai_lib;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id SID_SYS_NOT_IN_INV		= new string_id("encoded_disk/message_fragment", "sys_not_in_inv");
const string_id SID_USE					= new string_id("treasure_map/treasure_map", "use");
const string    SID_CLOSE				= "@treasure_map/treasure_map:close";
const string	MESSAGE_TABLE			= "datatables/encoded_disk/message_fragment.iff";

//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
// OnInitialize
//------------------------------------------------

trigger OnInitialize()
{
	// Set our title.
	string scenarioName = getStringObjVar( self, "scenarioName" );
	string_id nameId = new string_id( "encoded_disk/message_fragment", "title_" + scenarioName );
	setName( self, nameId );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	// Add option to read the message.
	mi.addRootMenu( menu_info_types.SERVER_MENU1, SID_USE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	// Display info dialog.
	if ( item == menu_info_types.SERVER_MENU1 )
		displayDialog( self, player );

	return SCRIPT_OVERRIDE;
}

//------------------------------------------------
// displayDialog
//------------------------------------------------

void displayDialog( obj_id self, obj_id player )
{
	// Make sure we are in the player's inventory.
	obj_id inventory = getObjectInSlot( player, "inventory" );
	if ( !contains( inventory, self ) )
	{
		sendSystemMessage( player, SID_SYS_NOT_IN_INV );
		return;
	}

	// Get string ids.
	string entryName = getStringObjVar( self, "scenarioName" );
//	string text = "@encoded_disk/message_fragment:complete_" + entryName;
//	string title = "@encoded_disk/message_fragment:title_" + entryName;

	// Get string ids.
	string_id textID = new string_id( "encoded_disk/message_fragment", "complete_" + entryName );
	string text = localize( textID );
	string_id titleID = new string_id( "encoded_disk/message_fragment", "name_" + entryName );
	string title = localize( titleID );

	// Check for a readable fragment. (Project Dead Eye Event)
	if ( hasObjVar( self, "specString" ) )
	{
		string_id fragID = new string_id( "encoded_disk/message_fragment", "frag_" + entryName + "_" + getIntObjVar( self, "specString" ) );
		string frag = localize( fragID );
		text += "\n" + frag;
	}

	// Display the dialog.
	createDialog( self, player, text, title );
}

//------------------------------------------------
// createDialog
//------------------------------------------------

int createDialog( obj_id self, obj_id player, string text, string title )
{
	if ( player == null )
		return -1;

	// Create the dialog page.
	int pid = sui.createSUIPage( sui.SUI_MSGBOX, self, player, "handleDialogInput" );

	// Add elements text.
	sui.setSUIProperty( pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, text );
	sui.setSUIProperty (pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title );

	// Add buttons.
	sui.msgboxButtonSetup( pid, sui.OK_ONLY );
	sui.setSUIProperty( pid, sui.MSGBOX_BTN_OK, sui.PROP_TEXT, SID_CLOSE );

	// Show dialog.
	sui.showSUIPage( pid );

	return pid;
}
