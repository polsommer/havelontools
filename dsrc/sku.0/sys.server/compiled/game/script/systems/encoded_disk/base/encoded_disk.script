/**
 * Copyright (c) ©2000-2003 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        encoded_disk.script
 * Description:  encoded_disk base logic
 * @author       $Author: breinhart $
 * @version      $Revision: #1 $
 */

//------------------------------------------------
// Includes
//------------------------------------------------

include library.sui;
include library.locations;
include library.utils;
include library.scenario;
include library.create;
include library.ai_lib;

//------------------------------------------------
// Constants
//------------------------------------------------

const string_id SID_DECODE				= new string_id("treasure_map/treasure_map", "decode");
const string_id SID_SYS_DECODE_SUCCESS	= new string_id("treasure_map/treasure_map", "sys_decode_success");
const string_id SID_SYS_INVENTROY_FULL	= new string_id("treasure_map/treasure_map", "sys_inventory_full");

const int		DISK_TREASURE_MAP		= 1;
const int		DISK_MESSAGE_FRAGMENT	= 2;
const int		DISK_UNCRACKABLE		= 3;

const string	TREASURE_MAP			= "object/tangible/treasure_map/treasure_map_base.iff";
const string	MESSAGE_FRAGMENT		= "object/tangible/encoded_disk/message_fragment_base.iff";

//------------------------------------------------
// Methods
//------------------------------------------------

//------------------------------------------------
// OnObjectMenuRequest
//------------------------------------------------

trigger OnObjectMenuRequest( obj_id player, menu_info mi )
{
	// If we are encrypted add the option to decode.
	mi.addRootMenu( menu_info_types.SERVER_MENU1, SID_DECODE );

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// OnObjectMenuSelect
//------------------------------------------------

trigger OnObjectMenuSelect( obj_id player, int item )
{
	// Item was used.
	if ( item == menu_info_types.SERVER_MENU1 )
	{
		// Decode the disk.
		decodeDisk( self, player );
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// decodeDisk
//------------------------------------------------

void decodeDisk( obj_id self, obj_id player )
{
	// Could add slicing skill check here.

	// Replace us with something decoded.
	obj_id container = null;
	int type = rand( 1, 2 );
	switch( type )
	{
		case DISK_TREASURE_MAP:
			container = getContainedBy( self );
			if ( container == null )
			{
			}
			else
			{
				obj_id tmp = createObject( TREASURE_MAP, container, "" );
				if (isIdValid(tmp))
				{
					sendSystemMessage( player, SID_SYS_DECODE_SUCCESS );
					destroyObject( self );
				}
				else
				{
					sendSystemMessage( player, SID_SYS_INVENTROY_FULL );
				}
			}
			break;
		case DISK_MESSAGE_FRAGMENT:
			container = getContainedBy( self );
			if ( container == null )
			{
			}
			else
			{
				obj_id tmp = createObject( MESSAGE_FRAGMENT, container, "" );
				if (isIdValid(tmp))
				{
					sendSystemMessage( player, SID_SYS_DECODE_SUCCESS );
					destroyObject( self );
				}
				else
				{
					sendSystemMessage( player, SID_SYS_INVENTROY_FULL );
				}
			}
			break;
	}
}