include library.space_dungeon;

trigger OnInitialize() 
{
	getClusterWideData("public_instances", getStringObjVar(self, "instance_name")+"_"+ self, true, self);
	doLogging("OnInitialize", "Requested cluster wide data for "+getStringObjVar(self, "instance_name")+"_"+self);
	return SCRIPT_CONTINUE;
}

trigger OnClusterWideDataResponse(string manage_name, string name, int request_id, string[] element_name_list, dictionary[] data, int lock_key)
{
	int playersInZone = space_dungeon.pollZoneOccupantsForInstancePopulation(self);
	dictionary info = new dictionary();
	info.put("building_id", self);
	info.put("population", playersInZone);
	doLogging("OnCWDResponse", "Put into info my ID: "+self);
	replaceClusterWideData(manage_name, name, info, true, lock_key);
	releaseClusterWideDataLock(manage_name, lock_key);
	return SCRIPT_CONTINUE;
}

messageHandler getTargetCoordinates()
{
	obj_id target = params.getObjId("return_address");
	obj_id player = params.getObjId("player");
	dictionary dict = new dictionary();
	dict.put("location", getLocation(self));
	dict.put("player", player);
	doLogging("getTargetCoordinates", "Got return address and player, sending my location: "+target+", "+player+", "+getLocation(self));
	messageTo (target, "recievedTargetCoordinates", dict, 1, false);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	//LOG("debug/public_instance_setup/"+section, message);
}