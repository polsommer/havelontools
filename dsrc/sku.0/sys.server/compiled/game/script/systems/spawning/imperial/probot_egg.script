include library.attrib;
include library.utils;
include library.create;
include library.pet_lib;

const float VOL_SPAWN_RANGE = 80f;
const string VOL_SPAWN	= "volSpawnProbot";

const float VOL_EFFECT_RANGE = 100f;
const string VOL_EFFECT	= "volEffect";


trigger OnAttach()
{
	createTriggerVolume(VOL_EFFECT, VOL_EFFECT_RANGE, true);
	createTriggerVolume(VOL_SPAWN, VOL_SPAWN_RANGE, true);
	setAttributeInterested(self, attrib.ALL);
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volName, obj_id who)
{
	if ( who == self )
		return SCRIPT_CONTINUE;
		
	if ( pet_lib.isPet(who) )
	{
		obj_id master = getMaster(who);
		if ( isIdValid(master) )
			who = master;
	}
	
	if ( isPlayer(who) )
	{
		if ( volName.equals(VOL_EFFECT) && !utils.hasScriptVar(self, "playedEffect") )
		{
			utils.setScriptVar(self, "playedEffect", true);
			playClientEffectLoc(who, "clienteffect/probot_delivery.cef", getLocation(self), 0f);		
			//playClientEffectObj(who, "clienteffect/probot_delivery.cef", self, "");
			removeTriggerVolume(VOL_EFFECT);

			messageTo(self, "handleSpawnDebris", null, 3f, false);
		}
		else if ( volName.equals(VOL_SPAWN) )
		{
			dictionary params = new dictionary();
			params.put("target", who);
			messageTo(self, "handleSpawnProbot", params, 1f, false);
		}
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler handleSpawnProbot()
{
	if ( !utils.hasScriptVar(self, "spawnedDebris") )
	{
		int numCycle = params.getInt("cycle");
		if ( numCycle > 5 )
		{
			destroyObject(self);
			return SCRIPT_CONTINUE;
		}
		
		params.put("cycle", ++numCycle);
		messageTo(self, "handleSpawnProbot", params, 1f, false);
		return SCRIPT_CONTINUE;
	}
	
	//int x = rand(0,10);
	int x = 0; //for debug
	if ( x <= 6 )
	{
		obj_id probot = create.object("imperial_probot_drone", getLocation(self));
		if ( isIdValid(probot) )
		{
			attachScript(probot, "ai.override_behavior.scout");
			messageTo(probot, "handleTargetAssignment", params, 1f, false);
		}
	}
	else if ( x <= 9 )
	{
		//do nothing
	}
	else	//x = 10
	{
		//spawn treasure like a chest or something
	}
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleSpawnDebris()
{
	utils.setScriptVar(self, "spawnedDebris", true);
	return SCRIPT_CONTINUE;
}
