
// Includes
include library.buff;
include library.craftinglib;
include library.create;
include library.datatable;
include library.group;
include library.locations;
include library.regions;
include library.skill;
include library.space_utils;
include library.spawning;
include library.sui;
include library.utils;

const int DEFAULT_SEARCH_RADIUS		= 100;

trigger OnInitialize()
{
	messageTo(self, "findNode", null, 3, false);
	return SCRIPT_CONTINUE;
}

messageHandler findNode()
{
	CustomerServiceLog("outbreak_themepark", "spawner_find_node.findNode() Master Object: "+self+" is looking for its node");
	if(hasObjVar(self, "node"))
	{
		obj_id node = getObjIdObjVar(self, "node");
		if(isValidId(node) && exists(node))
			return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(self, "nodeSearchObjVar") || getStringObjVar(self, "nodeSearchObjVar").length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "spawner_find_node.findNode() Master Object didn't have objvar to search for. Aborting.");
		return SCRIPT_CONTINUE;
	}

	string nodeSearchObjVar = getStringObjVar(self, "nodeSearchObjVar");
	if(nodeSearchObjVar == null || nodeSearchObjVar.length() <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "spawner_find_node.findNode() Master Object failed validation for node objvar. Aborting.");
		return SCRIPT_CONTINUE;
	}
	
	int radius = DEFAULT_SEARCH_RADIUS;
	if(hasObjVar(self, "nodeSearchRadius") && getIntObjVar(self, "nodeSearchRadius") > 0)
		radius = getIntObjVar(self, "nodeSearchRadius");

	obj_id[] nodeList = getAllObjectsWithObjVar(getLocation(self), radius, nodeSearchObjVar);
	if(nodeList == null || nodeList.length <= 0)
	{
		CustomerServiceLog("outbreak_themepark", "spawner_find_node.findNode() the nodeList for the master spawner was null or could not find a node");
		return SCRIPT_CONTINUE;
	}
	//for now it just sets the first one found.
	setObjVar(self, "parentNode", nodeList[0]);
	return SCRIPT_CONTINUE;
}