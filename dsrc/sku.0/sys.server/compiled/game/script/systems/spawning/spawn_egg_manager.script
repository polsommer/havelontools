include library.space_create;
include library.ship_ai;
include library.locations;
include library.utils;
// this makes EVERYTHING in the zone!


const string_id SID_MUST_BE_IN_CITY	= new string_id("city/city", "must_be_in_city");


trigger OnInitialize()
{
	requestPreloadCompleteTrigger(self);
	return SCRIPT_CONTINUE;
}
trigger OnAttach()
{
	requestPreloadCompleteTrigger(self);
	return SCRIPT_CONTINUE;
}

trigger OnPreloadComplete()
{

	LOG("spawn", "Spawning stuff");
	setObjVar(self, "intNoDump", 1);
	// we make our things
	// where are we
	location locTest = getLocation(self);
	
	string strArea = locTest.area;
	string strDataTable = "";
	string strName = locations.getCityName(locTest);
	if(strName!=null)
	{		
		strDataTable = "datatables/spawning/city_layout/"+locTest.area+"_"+strName+".iff";
	}
	if(strDataTable=="")
	{
		LOG("spawn", "Did not open datatable 2 "+strDataTable);		
		sendSystemMessage(self, SID_MUST_BE_IN_CITY);
		return SCRIPT_CONTINUE;
	}			
	if (!dataTableOpen(strDataTable))
	{
		LOG("spawn", "Did not open datatable "+strDataTable);
		return SCRIPT_CONTINUE;
	}
	string[] strObject = dataTableGetStringColumn(strDataTable, "strObject");
	float[] fltJX = dataTableGetFloatColumn(strDataTable, "fltJX");
	float[] fltJY = dataTableGetFloatColumn(strDataTable, "fltJY");
	float[] fltJZ = dataTableGetFloatColumn(strDataTable, "fltJZ");
	float[] fltKX = dataTableGetFloatColumn(strDataTable, "fltKX");
	float[] fltKY = dataTableGetFloatColumn(strDataTable, "fltKY");
	float[] fltKZ = dataTableGetFloatColumn(strDataTable, "fltKZ");
	float[] fltPX = dataTableGetFloatColumn(strDataTable, "fltPX");
	float[] fltPY = dataTableGetFloatColumn(strDataTable, "fltPY");
	float[] fltPZ = dataTableGetFloatColumn(strDataTable, "fltPZ");
	string[] strObjVars = dataTableGetStringColumn(strDataTable, "strObjVars");
	string[] strScripts = dataTableGetStringColumn(strDataTable, "strScripts");	

	
	for(int intI = 0; intI<strObject.length; intI++)
	{
		//LOG("space", "intI is "+intI+" and objVars are "+strObjVars[intI]);
		vector vctK = new vector(fltKX[intI], fltKY[intI], fltKZ[intI]);
		vctK = vctK.normalize();			
		vector vctJ = new vector(fltJX[intI], fltJY[intI], fltJZ[intI]);					
		vector vctI = vctJ.cross(vctK);
		vctJ = vctK.cross(vctI);			
		vector vctP = new vector(fltPX[intI], fltPY[intI], fltPZ[intI]);
		
		//LOG("space", "Making "+strObject[intI]);
		transform tranCreation = new transform();
		try
		{
			tranCreation= new transform(vctI, vctJ, vctK, vctP);		
		}
		catch (Throwable err)
		{
			//LOG("space", "CATASTROPHE!@!@! BAD VECTOR AT "+intI+" object is "+strObject[intI]+" position is "+vctP);
			// resetting rotation
			
			vctJ = vector.unitY;
			vctK = vector.unitZ;
			vctI = vector.unitX;
			tranCreation= new transform(vctI, vctJ, vctK, vctP);		
		}
		tranCreation = tranCreation.reorthonormalize();
		if(strObject[intI]!="")
		{
			obj_id objTest = createObject(strObject[intI], tranCreation, null);
			if((!isIdValid(objTest))||(!objTest.isLoaded()))
			{

				//LOG("DESIGNER_FATAL", "For datatable "+strDataTable+" entry "+intI+" and string "+strObject[intI]+" No object could be created");
				// do we destroy the object and clean up?
			}
			else
			{
				
				if(strObjVars[intI]!="")
				{
					if((isIdValid(objTest))&&(objTest.isLoaded()))
					{
						//LOG("space", "adding objVars");
						setPackedObjvars(objTest, strObjVars[intI]);
					}
				}
				

				if(strScripts[intI]!="")
				{
					string[] strScriptArray = split(strScripts[intI], ',');
					for(int intJ = 0; intJ<strScriptArray.length; intJ++)
					{
						if((isIdValid(objTest))&&(objTest.isLoaded()))
						{
							//LOG("space", "adding scripts");
							string script = strScriptArray[intJ];
							if ( script.indexOf( "script." ) > -1 )
							{
								script = script.substring( 7 );
							}
							if(script!="")
							{
								if ( !hasScript( objTest, script ) )
									attachScript( objTest, script );
							}
						}

					}
				}				
			}
		}

	}	
	LOG("spawn","DONE");		
	return SCRIPT_CONTINUE;
}



