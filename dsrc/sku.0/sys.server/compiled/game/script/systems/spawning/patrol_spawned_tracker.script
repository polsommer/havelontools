include library.ai_lib;
include library.utils;

const boolean LOGGING				= false;

trigger OnDestroy()
{
	if(hasObjVar(self, "respawnAfterDestroy"))
	{
		obj_id objParent = utils.getObjIdScriptVar(self, "parent");
		
		float fltRespawnTime = utils.getFloatScriptVar(self, "fltRespawnTime");
		messageTo(objParent, "spawnDestroyed", null, fltRespawnTime, false);
	}
	return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id objAttacker)
{
	if(!hasObjVar(self, "intCleaningUp"))
	{
		obj_id objParent = utils.getObjIdScriptVar(self, "parent");
		
		float fltRespawnTime = utils.getFloatScriptVar(self, "fltRespawnTime");
		messageTo(objParent, "spawnDestroyed", null, fltRespawnTime, false);

	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	messageTo (self, "pathToNextPoint", null, 5, false);
	return SCRIPT_CONTINUE;
}


messageHandler pathToNextPoint()
{
	location[] patrolPoints = utils.getLocationArrayScriptVar(self, "patrolPoints");
	string patrolType = utils.getStringScriptVar(self, "patrolPathType");
	int pointNum = utils.getIntScriptVar(self, "startingPoint");
	
	if (patrolType.equals("cycle"))
		ai_lib.setPatrolPath(self, patrolPoints, pointNum);
	else
		ai_lib.setPatrolFlipPath(self, patrolPoints, pointNum);
	return SCRIPT_CONTINUE;
}

void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("logging/patrol_spawned_tracker/"+section, message);	
}
