include library.create;
include library.utils;

inherits systems.spawning.dropship.base; //This script just removes unneeded scripts from the flying creature


//-----------------LOGGING
const boolean LOGGING_ON		= true;
const string LOGGING_CATEGORY		= "empireday";

trigger OnAttach()
{
	blog("emperorsday_lambda.OnAttach: Init");

	messageTo(self, "handleAttachDelay", null, 2f, false);
	setHibernationDelay(self, 600.0f);
	return SCRIPT_CONTINUE;
}

messageHandler handleAttachDelay()
{
	blog("emperorsday_lambda.handleAttachDelay: Init");

	stop (self);
	//setName (self, "Stormtrooper Transport");
	setPosture(self, POSTURE_PRONE);
	messageTo(self, "takeOff", null, 600f, true);	
	queueCommand(self, ##"stand", self, "", COMMAND_PRIORITY_FRONT);
	return SCRIPT_CONTINUE;
}

messageHandler changePosture()
{
	blog("emperorsday_lambda.changePosture: Init");

	setPosture(self, POSTURE_UPRIGHT);
	location ownLocation = getLocation(self);
	location behind = ownLocation;
	behind.z = ownLocation.z-20.0f;
	faceTo(self, behind);
	messageTo(self, "selfCleanUp", null, 60f, false);
	return SCRIPT_CONTINUE;
}

messageHandler takeOff()
{
	blog("emperorsday_lambda.takeOff: Init");

	obj_id exitPoint = getObjIdObjVar(self, "exitpoint");
	if(isValidId(exitPoint))
	{
		blog("emperorsday_lambda.changePosture: Facing to exit location");

		location exitLocation = getLocation(exitPoint);
		faceTo(self, exitLocation);
		
		messageTo(self, "moveToExitPoint", null, 2, false);
		return SCRIPT_CONTINUE;
	}

	messageTo (self, "changePosture", null, 10, false);	
	return SCRIPT_CONTINUE;
}

messageHandler moveToExitPoint()
{
	blog("emperorsday_lambda.moveToExitPoint init");

	obj_id exitPoint = getObjIdObjVar(self, "exitpoint");
	if(!isValidId(exitPoint))
	{
		messageTo (self, "changePosture", null, 1, false);	
		return SCRIPT_CONTINUE;
	}

	setMovementPercent(self, 16);
	blog("emperorsday_lambda.moveToExitPoint exit point valid");
	location loc = getLocation(exitPoint);
	pathTo(self, loc);
	messageTo(self, "correctTakeOffThenCleanUp", null, 10, false);
	return SCRIPT_CONTINUE;
}

messageHandler correctTakeOffThenCleanUp()
{
	blog("emperorsday_lambda.correctTakeOffThenCleanUp init");
	setPosture(self, POSTURE_UPRIGHT);
	blog("emperorsday_lambda.correctTakeOffThenCleanUp changePosture");
	messageTo(self, "selfCleanUp", null, 60f, false);

	return SCRIPT_CONTINUE;
}

messageHandler selfCleanUp ()
{
	if (isIdValid(self))
	{
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}
	return SCRIPT_CONTINUE;
}


boolean blog(string msg)
{
	if(LOGGING_ON && msg != null && !msg.equals(""))
		LOG(LOGGING_CATEGORY, msg);
	return true;
}

