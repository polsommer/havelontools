include library.utils;
include library.sui;
include library.prose;

trigger OnAttach()
{
	if ( !hasObjVar(self, "storytellerid") )
	{
		messageTo(self, "cleanupProp", null, 1, false);
		return SCRIPT_CONTINUE;
	}
	
	setObjVar(self, "event_perk.scavenger.initialized", 0);
	setObjVar(self, "event_perk.scavenger.item_count", 1);
	string[] itemTemplateList = {"Default"};
	string[] itemNameList = {"Default"};
	int[] nameTypeList = {0};
	setObjVar(self, "event_perk.scavenger.item_template_list", itemTemplateList);
	setObjVar(self, "event_perk.scavenger.item_name_list", itemNameList);
	setObjVar(self, "event_perk.scavenger.name_type_list", nameTypeList);
	setObjVar(self, "event_perk.scavenger.leader_name", "Nobody");
	setObjVar(self, "event_perk.scavenger.top_score", 0);

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if ( !hasObjVar(self, "storytellerid") )
	{
		messageTo(self, "cleanupProp", null, 3, false);
		return SCRIPT_CONTINUE;
	}
	
	
	if(!hasObjVar(self, "event_perk.scavenger.patched") )
	{
		setObjVar(self, "event_perk.scavenger.patched", 030105);
		resetList(self, self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnGiveItem(obj_id item, obj_id player)
{
	int initialized = getIntObjVar(self, "event_perk.scavenger.initialized");
	int itemCount = getIntObjVar(self, "event_perk.scavenger.item_count");
	obj_id owner = getObjIdObjVar(self, "storytellerid");
	string[] itemTemplateList = getStringArrayObjVar(self, "event_perk.scavenger.item_template_list");
	string[] itemNameList = getStringArrayObjVar(self, "event_perk.scavenger.item_name_list");
	int[] nameTypeList = getIntArrayObjVar(self, "event_perk.scavenger.name_type_list");


	if(initialized == 0 && player == owner)
	{

		if(itemCount > 10) // Max items
		{
			sendSystemMessage(player, new string_id("event_perk", "scavenger_max_items"));
			return SCRIPT_CONTINUE;
		}

		string itemTemplate = getTemplateName(item);	
		string itemName = getName(item);

		// Is this in the list already?
		if(itemTemplateList != null || itemTemplateList.length != 0)
		{
			for(int i = 0; i < itemTemplateList.length; i++)
			{
				if(itemTemplateList[i] == itemTemplate)
				{
					sendSystemMessage(player, new string_id("event_perk", "scavenger_already_added"));
					return SCRIPT_CONTINUE;
				}
			}
		}
		
		// Add the item to the list.
		string[] newItemTemplateList = new string[itemCount+1];
		string[] newItemNameList = new string[itemCount+1];
		int[] newNameTypeList = new int[itemCount+1];
		newItemTemplateList[itemCount] = itemTemplate;
		newItemNameList[itemCount] = itemName;

		if(	(hasObjVar(item, "crafting.source_schematic") && !itemTemplate.startsWith("object/tangible/component") ) || 
			itemTemplate.startsWith("object/resource_container") ||
			hasScript(item, "name.name") ||
			hasScript(item, "theme_park.utils.datapad_text") 	)

				newNameTypeList[itemCount] = 1;
		else
			newNameTypeList[itemCount] = 0;

		for(int i = 0; i < itemTemplateList.length; i++)
		{
			newItemTemplateList[i] = itemTemplateList[i];
			newItemNameList[i] = itemNameList[i];
			newNameTypeList[i] = nameTypeList[i];
		}
		
		itemCount++;		

		setObjVar(self, "event_perk.scavenger.item_template_list", newItemTemplateList);
		setObjVar(self, "event_perk.scavenger.item_name_list", newItemNameList);
		setObjVar(self, "event_perk.scavenger.name_type_list", newNameTypeList);
		setObjVar(self, "event_perk.scavenger.item_count", itemCount);

		if(	(hasObjVar(item, "crafting.source_schematic") && !itemTemplate.startsWith("object/tangible/component") ) || 
			itemTemplate.startsWith("object/resource_container") ||
			hasScript(item, "name.name") ||
			hasScript(item, "theme_park.utils.datapad_text") 	)

				sendSystemMessage(player, itemName, null);

		else
		{
			string_id itemNameSID = parseNameToStringId(itemName, player);
			sendSystemMessage(player, itemNameSID);
		}
		
	}

	if(initialized == 1)
	{
		if(!hasScript(player, "systems.event_perk.scavenger_player"))
			attachScript(player, "systems.event_perk.scavenger_player");

		if(!hasObjVar(player, "event_perk.scavenger.items_found"))
		{
			int[] itemsFound = new int[itemNameList.length];
			for(int i = 0; i < itemsFound.length; i++)
				itemsFound[i] = 0;

			setObjVar(player, "event_perk.scavenger.items_found", itemsFound);
		}
		
		dictionary params = new dictionary();
		
		string itemTemplate = getTemplateName(item);	
		string itemName = getName(item);

		if(	(hasObjVar(item, "crafting.source_schematic") && !itemTemplate.startsWith("object/tangible/component") ) || 
			itemTemplate.startsWith("object/resource_container") ||
			hasScript(item, "name.name") ||
			hasScript(item, "theme_park.utils.datapad_text") 	)

			{
				sendSystemMessage(player, new string_id("event_perk", "scavenger_you_showed_me"));
				sendSystemMessage(player, itemName, null);
			}
		else
		{
			string_id itemNameSID = parseNameToStringId(itemName, player);
			sendSystemMessage(player, new string_id("event_perk", "scavenger_you_showed_me"));
			sendSystemMessage(player, itemNameSID);
		}
		
		if(itemTemplateList != null || itemTemplateList.length != 0)
		{
			for(int i = 0; i < itemTemplateList.length; i++)
			{
				// Score
				if(itemTemplateList[i] == itemTemplate)
				{
					params.put("itemIndex", i);
					params.put("droid", self);

					messageTo(player, "checkForPossibleScore", params, 0.5f, false);
				}
			}
		}

	}

	if(initialized == 2)
		return SCRIPT_CONTINUE;

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int initialized = getIntObjVar(self, "event_perk.scavenger.initialized");
	obj_id owner = getObjIdObjVar(self, "storytellerid");
	
	if(initialized == 0 && owner == player)
	{
		int menu1 = mi.addRootMenu(menu_info_types.SERVER_MENU3, new string_id("event_perk", "scavenger_instruction"));
		int menu2 = mi.addRootMenu(menu_info_types.SERVER_MENU4, new string_id("event_perk", "scavenger_list_items"));
		int menu3 = mi.addRootMenu(menu_info_types.SERVER_MENU5, new string_id("event_perk", "scavenger_reset_list"));
		int menu4 = mi.addRootMenu(menu_info_types.SERVER_MENU6, new string_id("event_perk", "scavenger_start"));
	}	

	if(initialized == 1)
	{
		int menu5 = mi.addRootMenu(menu_info_types.SERVER_MENU4, new string_id("event_perk", "scavenger_list_items"));	
		int menu6 = mi.addRootMenu(menu_info_types.SERVER_MENU8, new string_id("event_perk", "scavenger_instruction"));
		int menu8 = mi.addRootMenu(menu_info_types.SERVER_MENU7, new string_id("event_perk", "scavenger_list_leader"));
	}

	if(initialized == 2)
	{
		int menu7 = mi.addRootMenu(menu_info_types.SERVER_MENU9, new string_id("event_perk", "scavenger_show_winner"));

	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	int initialized = getIntObjVar(self, "event_perk.scavenger.initialized");

	// Setup Instruction 0
	if(item == menu_info_types.SERVER_MENU3)
	{
		if(initialized == 1 || initialized == 2)
			return SCRIPT_CONTINUE;

		showSetupInstructions(self, player);

	}

	// List Items 0
	if(item == menu_info_types.SERVER_MENU4)
	{
		if(initialized == 2)
			return SCRIPT_CONTINUE;

		string[] itemNameList = getStringArrayObjVar(self, "event_perk.scavenger.item_name_list");
		string[] itemNameSui = new string[itemNameList.length];
		int[] nameTypeList = getIntArrayObjVar(self, "event_perk.scavenger.name_type_list");

		if(itemNameSui == null || itemNameSui.length == 0 || itemNameSui.length == 1)
		{
			sendSystemMessage(player, new string_id("event_perk", "scavenger_no_items"));	

			return SCRIPT_CONTINUE;
		}


		for (int i = 1; i<itemNameList.length; i++ )
		{
			if(nameTypeList[i] == 0)
				itemNameSui[i-1] = "@" + itemNameList[i];

			if(nameTypeList[i] == 1)
				itemNameSui[i-1] = itemNameList[i];
		}
		sui.listbox(self, player, "@event_perk:scavenger_list_d", sui.OK_ONLY, "@event_perk:scavenger_list_t", itemNameSui, "absolutelyWorthlessSuiHandler", true);
	}

	// Reset List 0
	if(item == menu_info_types.SERVER_MENU5)
	{
		if(initialized == 1 || initialized == 2)
			return SCRIPT_CONTINUE;
		
		resetList(self, player);
	}

	// Initialize and start game 0
	if(item == menu_info_types.SERVER_MENU6)
	{
		if(initialized == 1 || initialized == 2)
			return SCRIPT_CONTINUE;

		string[] itemNameList = getStringArrayObjVar(self, "event_perk.scavenger.item_name_list");
		string[] itemNameSui = new string[itemNameList.length];

		if(itemNameSui == null || itemNameSui.length == 0 || itemNameSui.length == 1)
		{
			sendSystemMessage(player, new string_id("event_perk", "scavenger_no_items"));	

			return SCRIPT_CONTINUE;
		}

		float rightNow = getGameTime();
		setObjVar(self, "event_perk.scavenger.game_start_time", rightNow);
		setObjVar(self, "event_perk.scavenger.initialized", 1);
		announceStatusToPlayers(self, "scavenger_game_start");
		CustomerServiceLog("EventPerk", "(Scavenger Droid - [" + self +"] was initialized for play by player [" + player + "].");
	}


	// Game Instructions 1
	if(item == menu_info_types.SERVER_MENU8)
	{
		if(initialized == 0 || initialized == 2)
			return SCRIPT_CONTINUE;
		
		showGameInstructions(self, player);
	}

	// Display Current Leader 1
	if(item == menu_info_types.SERVER_MENU7)
	{
		if(initialized == 0 || initialized == 2)
			return SCRIPT_CONTINUE;

		string leaderName = getStringObjVar(self, "event_perk.scavenger.leader_name");
		prose_package showLeader = new prose_package();
		showLeader = prose.getPackage(new string_id("event_perk", "scavenger_show_current_leader"), leaderName);
		sendSystemMessageProse(player, showLeader);
	}

	// Display Winner 2
	if(item == menu_info_types.SERVER_MENU9)
	{
		if(initialized == 1 || initialized == 0)
			return SCRIPT_CONTINUE;

		int winnerTime = getIntObjVar(self, "event_perk.scavenger.winner_time");

		string leaderName = getStringObjVar(self, "event_perk.scavenger.leader_name");
		prose_package showWinner = new prose_package();
		showWinner = prose.getPackage(new string_id("event_perk", "scavenger_show_leader"), leaderName, winnerTime);
		sendSystemMessageProse(player, showWinner);
		messageTo(player, "handleScavengerCleanup", null, 1, false);
	}
	
	return SCRIPT_CONTINUE;
}


messageHandler updateMasterScoreCard()
{
	obj_id player = params.getObjId("player");
	string leaderName = getStringObjVar(self, "event_perk.scavenger.leader_name");
	string playerName = getName(player);
	int itemCount = getIntObjVar(self, "event_perk.scavenger.item_count");
	int maxScore = itemCount - 1;
	int topScore = getIntObjVar(self, "event_perk.scavenger.top_score");
	int playerScore = getIntObjVar(player, "event_perk.scavenger.my_score");

	// Player won, game over
	if(playerScore == maxScore)
	{
		float rightNow = getGameTime();
		float gameStartTime = getFloatObjVar(self, "event_perk.scavenger.game_start_time");
		float rawTimeToWin = rightNow - gameStartTime;
		float timeToWinMinutesFloat = rawTimeToWin/60;
		int timeToWinMinutes = (int)timeToWinMinutesFloat;
		setObjVar(self, "event_perk.scavenger.winner_time", timeToWinMinutes);
		setObjVar(self, "event_perk.scavenger.initialized", 2);
		setObjVar(self, "event_perk.scavenger.leader_name", playerName);
		sendSystemMessage(player, new string_id("event_perk", "scavenger_you_win"));
		announceStatusToPlayers(self, "scavenger_winner");
		
		return SCRIPT_CONTINUE;	
	}

	// Player Tied or beat leader
	if(playerScore >= topScore)
	{
		setObjVar(self, "event_perk.scavenger.leader_name", playerName);
		setObjVar(self, "event_perk.scavenger.top_score", playerScore);
		sendSystemMessage(player, new string_id("event_perk", "scavenger_you_lead"));
		return SCRIPT_CONTINUE;
	}
	
	// Player did not beat score
	if(playerScore < topScore)
	{
		prose_package notLeader = new prose_package();
		notLeader = prose.getPackage(new string_id("event_perk", "scavenger_not_leader"), leaderName);
		sendSystemMessageProse(player, notLeader);
		return SCRIPT_CONTINUE;	
	}

	return SCRIPT_CONTINUE;
}

string_id parseNameToStringId(string itemName, obj_id player)
{
	string[] parsedString = split(itemName, ':');

	string_id itemNameSID;

	if(parsedString.length > 1)
	{
		string stfFile = parsedString[0];
		string reference = parsedString[1];
		itemNameSID = new string_id(stfFile, reference);
	}
	else	// It's a resource or some other non-localized crap!
	{
		string stfFile = parsedString[0];
		itemNameSID = new string_id(stfFile, " ");
	}

	return itemNameSID;

}

int showSetupInstructions(obj_id pcd, obj_id player)
{
	string_id textMsg = new string_id("event_perk", "scavenger_setup_instruction");
	string prompt = getString(textMsg);
	string_id titleMsg = new string_id("event_perk", "scavenger_instruction");
	string title = getString(titleMsg);

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, pcd, player, "");

	setSUIProperty(pid, "", "Size", "250,250");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, prompt);

	sui.msgboxButtonSetup(pid, sui.OK_ONLY);
	sui.showSUIPage(pid);
	
	return pid;
}

int showGameInstructions(obj_id pcd, obj_id player)
{
	string_id textMsg = new string_id("event_perk", "scavenger_game_instruction");
	string prompt = getString(textMsg);
	string_id titleMsg = new string_id("event_perk", "scavenger_instruction");
	string title = getString(titleMsg);

	int pid = sui.createSUIPage( sui.SUI_MSGBOX, pcd, player, "");

	setSUIProperty(pid, "", "Size", "250,250");
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, title);
	setSUIProperty(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, prompt);

	sui.msgboxButtonSetup(pid, sui.OK_ONLY);
	sui.showSUIPage(pid);
	
	return pid;
}

void resetList(obj_id self, obj_id player)
{
	setObjVar(self, "event_perk.scavenger.item_count", 1);
	string[] itemTemplateList = {"Default"};
	string[] itemNameList = {"Default"};
	int[] nameTypeList = {0};
	setObjVar(self, "event_perk.scavenger.item_template_list", itemTemplateList);
	setObjVar(self, "event_perk.scavenger.item_name_list", itemNameList);
	setObjVar(self, "event_perk.scavenger.name_type_list", nameTypeList);

	sendSystemMessage(player, new string_id("event_perk", "scavenger_list_reset_msg"));

	return;
}

void announceStatusToPlayers(obj_id self, string messageId)
{
	obj_id[] objPlayers = getPlayerCreaturesInRange(self, 256.0f);	
	
	if (objPlayers != null && objPlayers.length>0)
	{
		for(int i = 0; i < objPlayers.length; i++)
		{
			sendSystemMessage(objPlayers[i], new string_id("event_perk", messageId));
		}
	}	

}