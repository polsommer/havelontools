include library.ai_lib;
include library.beast_lib;
include library.buff;
include library.chat;
include library.factions;
include library.utils;
include library.trial;
include library.create;
include library.restuss_event;

const string PATH				= "patrol_path";
const string MOVETO				= "moveTo";

const boolean LOGGING					= true;

trigger OnHearSpeech(obj_id objSpeaker, string strText)
{
	if(!isGod(objSpeaker))
	{
		return SCRIPT_CONTINUE;
	}

	if(strText.equals("gcwpath"))
	{
		if(hasObjVar(self, "patrol_path"))
		{
			dictionary dict = new dictionary();
			dict.put("pathAction", PATH);
			dict.put("pathName", getStringObjVar(self, "patrol_path"));
			messageTo(self, "doPathAction", dict, 1.0f, false);
		}
	}

	return SCRIPT_CONTINUE;
}
trigger OnAttach()
{
	if(!isIdValid(self) || !exists(self))
	{
		return SCRIPT_CONTINUE;
	}

	if(hasObjVar(self, "ai_controller.behavior"))
	{
		//can set the objvar to a specific behaviro in the table
		// BEHAVIOR_WANDER = 0
		// BEHAVIOR_SENTINEL = 1;
		// BEHAVIOR_LOITER = 2;

		ai_lib.setDefaultCalmBehavior(self, getIntObjVar(self, "ai_controller.behavior"));
	}
	else
		ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	trial.setInterest(self);

	//Perform default pathing option if available.
	if (hasObjVar(self, "patrol_path"))
	{
		dictionary dict = new dictionary();
		dict.put("pathAction", PATH);
		dict.put("pathName", getStringObjVar(self, "patrol_path"));
		messageTo(self, "doPathAction", dict, 1.0f, false);
	}

	if (hasObjVar(self, "moveTo"))
	{
		dictionary dict = new dictionary();
		dict.put("pathAction", MOVETO);
		dict.put("pathName", getStringObjVar(self, "moveTo"));
		messageTo(self, "doPathAction", dict, 1.0f, false);
	}

	if (hasObjVar(self, "posture"))
	{
		string posture = getStringObjVar(self, "posture");

		if (posture.equals("prone"))
			setPosture(self, POSTURE_PRONE);

		if (posture.equals("kneeling"))
			setPosture(self, POSTURE_CROUCHED);
	}

	if (hasObjVar(self, "name"))
	{
		string name = getStringObjVar(self, "name");

		setName(self, name);
	}

	if (hasObjVar(self, "passive"))
	{
		removeTriggerVolume(ai_lib.ALERT_VOLUME_NAME);
		removeTriggerVolume(ai_lib.AGGRO_VOLUME_NAME);

	}

	if (hasObjVar(self, "equip"))
	{
		aiEquipPrimaryWeapon(self);
	}

	if ( hasObjVar(self, "faction") )
	{
		string factionName = getStringObjVar(self, "faction");

		if(factionName != null && factionName.length() > 0 && (factionName.equals("Imperial") || factionName.equals("Rebel")))
		{
			factions.setFaction(self, factionName, true, 0);
		}
	}

	if ( hasObjVar(self, "buff") )
	{
		string buffName = getStringObjVar(self, "buff");
		if ( buffName != null && buffName.length() > 0 )
			buff.applyBuff(self, self, buffName);
	}

	if (hasObjVar(self, "hp_value"))
	{
		trial.setHp(self, getIntObjVar(self, "hp_value"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnRemovingFromWorld()
{
	dictionary dict = new dictionary();
	dict.put("object", self);
	string spawn_id = hasObjVar(self, "spawn_id") ? getStringObjVar(self, "spawn_id") : "none";
	dict.put("spawn_id", spawn_id);
	messageTo(trial.getParent(self), "unregisterObjectWithSequencer", dict, 0.0f, false);
	return SCRIPT_CONTINUE;
}


trigger OnAiTetherStart()
{
	messageTo(self, "tether_delay", null, 3.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler tether_delay()
{
	if (aiIsTethered(self))
	{
		messageTo(self, "resumeDefaultCalmBehavior", null, 3.0f, false);
	}

	return SCRIPT_CONTINUE;
}

void resetSequenceMovement()
{
	obj_id self = getSelf();

	if (!isIdValid(self) || !exists(self))
		return;

	if(ai_lib.isInCombat(self))
	{
		setMovementPercent(self, 1.0f);
	}

	if(hasObjVar(self, "run"))
	{
		int testInt = getIntObjVar(self, "run");
		float testFloat = getFloatObjVar(self, "run");

		if (testInt != 0)
		{
			float newMove = (1.0f + (float)testInt);

			setMovementPercent(self, newMove);
		}

		if (testFloat != 0)
		{
			float newMove = 1.0f + testFloat;

			setMovementPercent(self, newMove);
		}
	}
}

trigger OnMoveMoving()
{
	resetSequenceMovement();

	return SCRIPT_CONTINUE;
}


messageHandler resumeDefaultCalmBehavior()
{
	if (!isIdValid(self))
		return SCRIPT_CONTINUE;

	if (hasObjVar(self, "patrol_path"))
	{
		dictionary dict = new dictionary();
		dict.put("pathAction", PATH);
		dict.put("pathName", getStringObjVar(self, "patrol_path"));
		messageTo(self, "doPathAction", dict, 1.0f, false);
	}

	return SCRIPT_CONTINUE;
}

messageHandler doPathAction()
{
	string pathAction = params.getString("pathAction");
	string pathName = params.getString("pathName");


	if (pathAction == PATH)
	{
		beginPathRoutine(self, pathName);
	}

	if (pathAction == MOVETO)
	{
		pathToPoint(self, pathName);
	}

	return SCRIPT_CONTINUE;
}
messageHandler destroySelf()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler wsDoAnimation()
{
	string anim = params.getString("animation");
	doAnimationAction(self, anim);
	return SCRIPT_CONTINUE;
}

messageHandler wsPlayEmote()
{

	return SCRIPT_CONTINUE;
}

messageHandler wsSignalMaster()
{
	return SCRIPT_CONTINUE;
}

messageHandler wsDespawn()
{
	messageTo(self, "destroySelf", null, 5.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler wsToggleInvulnerability()
{
	//Custom Signal Here
	boolean toggleVulnerable = !isInvulnerable(self);

	// Atat's were wigging out looking for null targets with a bad hate list, after being set invulnerable.
	if(toggleVulnerable)
	{
		clearHateList(self);
		stopCombat(self);
	}

	setInvulnerable(self, toggleVulnerable);
	return SCRIPT_CONTINUE;
}

messageHandler customSignal()
{
	string signalName = params.getString("triggerName");

	if (signalName == null)
		return SCRIPT_CONTINUE;

	if (utils.hasScriptVar(self, restuss_event.TRIG_CUSTOMSIGNAL))
	{
		resizeable string[] customTrigger = utils.getResizeableStringArrayScriptVar(self, restuss_event.TRIG_CUSTOMSIGNAL);

		if (customTrigger != null && customTrigger.length > 0)
		{
			for (int i=0;i<customTrigger.length; i++)
			{
				if (customTrigger[i].startsWith(signalName))
					executeTriggerData(self, customTrigger[i].substring(signalName.length() + 1, customTrigger[i].length()));
			}
		}
 	}

 	return SCRIPT_CONTINUE;
 }

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	handleDeathTrigger(self, killer);

 	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled(obj_id killer)
{
	handleDeathTrigger(self, killer);
	return SCRIPT_CONTINUE;
}

void handleDeathTrigger(obj_id self, obj_id killer)
{
	if (utils.hasScriptVar(self, restuss_event.TRIG_ONDEATH))
	{
		resizeable string[] deathTriggers = utils.getResizeableStringArrayScriptVar(self, restuss_event.TRIG_ONDEATH);

		if (deathTriggers != null && deathTriggers.length > 0)
		{
			for (int i=0;i<deathTriggers.length; i++)
			{
				executeTriggerData(self, deathTriggers[i].concat(":"+killer));
			}
		}
 	}

 	reportDeath(self, killer);

 	if ( hasObjVar(self, "explosion_cleanup_on_death") )
 	{
		location death = getLocation( self );
		playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
		playClientEffectLoc(killer, "clienteffect/combat_explosion_lair_large.cef", death, 0);

		setInvulnerable( self, true );
		messageTo( self, "handleDelayedCleanup", null, 1f, false );
 	}

 	return;
}

trigger OnEnteredCombat()
{
	resetSequenceMovement();

	if (utils.hasScriptVar(self, restuss_event.TRIG_ENTERCOMBAT))
	{
		resizeable string[] combatTriggers = utils.getResizeableStringArrayScriptVar(self, restuss_event.TRIG_ENTERCOMBAT);

		if (combatTriggers != null && combatTriggers.length > 0)
		{
			for (int i=0;i<combatTriggers.length; i++)
			{
				executeTriggerData(self, combatTriggers[i]);
			}
		}
 	}

	return SCRIPT_CONTINUE;
}

trigger OnExitedCombat()
{
	if (ai_lib.isDead(self))
		return SCRIPT_CONTINUE;

	resetSequenceMovement();

	if (utils.hasScriptVar(self, restuss_event.TRIG_EXITCOMBAT))
	{
		resizeable string[] combatTriggers = utils.getResizeableStringArrayScriptVar(self, restuss_event.TRIG_EXITCOMBAT);

		if (combatTriggers != null && combatTriggers.length > 0)
		{
			for (int i=0;i<combatTriggers.length; i++)
			{
				executeTriggerData(self, combatTriggers[i]);
			}
		}
 	}

	return SCRIPT_CONTINUE;
}

trigger OnArrivedAtLocation(string location)
{

	boolean executedAction = false;
	
	if (location.equals("remove_path"))
	{
		removeObjVar(self, "patrol_path");
	}

	if (utils.hasScriptVar(self, restuss_event.TRIG_ARRIVELOCATION))
	{
		resizeable string[] arriveTrigger = utils.getResizeableStringArrayScriptVar(self, restuss_event.TRIG_ARRIVELOCATION);

		if (arriveTrigger != null && arriveTrigger.length > 0)
		{
			for (int i=0;i<arriveTrigger.length; i++)
			{
				if (arriveTrigger[i].endsWith(location))
				{
					dictionary dict = new dictionary();
					dict.put("triggerData", arriveTrigger[i]);
					dict.put("suspend", true);
					messageTo(self, "handleTriggerData", dict, 1.0f, false);
					executedAction = true;
				}
			}
		}
 	}

	if (hasObjVar(self, "delete_on_arrive") && executedAction)
	{
		messageTo(self, "handleDelayedCleanup", null, 3.0f, false);
	}

	if (hasObjVar(self, "gcw.entertainer_rally"))
	{
		messageTo(self, "handleSetDefaultBehavior", null, 1, false);
		loiterLocation(self, getLocation(self), 1f, 5f, 2f, 8f);
	}
	
	
	return SCRIPT_CONTINUE;
}

messageHandler handleDelayedCleanup()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

void executeTriggerData(obj_id self, string triggerData)
{
	executeTriggerData(self, triggerData, false);
}

messageHandler handleTriggerData()
{
	string triggerData = params.getString("triggerData");
	boolean suspend = params.getBoolean("suspend");

	executeTriggerData(self, triggerData, suspend);
	return SCRIPT_CONTINUE;
}

void executeTriggerData(obj_id self, string triggerData, boolean suspend)
{
	string[] parse = split(triggerData, ':');

	if (false/*suspend*/)
	{
		suspendMovement(self);
		messageTo(self, "resumeMovement", null, 5.0f, false);
	}

	if (triggerData.startsWith("playEmote"))
	{
		executeEmoteTrigger(self, parse);
	}

	if (triggerData.startsWith("signalMaster"))
	{
		executeSignalMasterTrigger(self, parse);
	}

	if (triggerData.startsWith("signalKiller"))
	{

	}

	if (triggerData.startsWith("doAnimationAction"))
	{
		executeAnimationTrigger(self, parse);
	}

	if (triggerData.startsWith("toggleInvulnerable"))
	{
		messageTo(self, "wsToggleInvulnerability", null, 0.0f, false);
	}

	if (triggerData.startsWith("broadcastMessage"))
	{

	}

	if (triggerData.startsWith("faceTo"))
	{
		executeFacingTrigger(self, parse);
	}

	if (triggerData.startsWith("messageSelf"))
	{
		executeMessageSelfTrigger(self, parse);
	}

	if (triggerData.startsWith("triggerId"))
	{
		executeIdTrigger(self, parse);
	}

	if (triggerData.startsWith("signalComplete"))
	{
		executeSignalCompleteMessage(self, parse);
	}
}

void executeEmoteTrigger(obj_id self, string[] parse)
{
	string chatType = parse[1];
	string chatMessage = parse[2];

	chat.chat(self, chatType, new string_id("sequencer_spam", chatMessage));

}

void executeSignalCompleteMessage(obj_id self, string[] parse)
{
	dictionary dict = trial.getSessionDict(trial.getParent(self), "wfc_signal");
	dict.put("waitForComplete", parse[1]);

	messageTo(trial.getParent(self), "waitForComplete", dict, 0.0f, false);

}

void executeSignalMasterTrigger(obj_id self, string[] parse)
{
	string handlerName = parse[1];
	dictionary dict = trial.getSessionDict(trial.getParent(self));

	if (!parse[2].equals("none"))
	{
		string[] valueSplit = split(parse[2], '=');

		if (valueSplit[0] == "int")
			dict.put(parse[1], utils.stringToInt(valueSplit[1]));
		if (valueSplit[0] == "float")
			dict.put(parse[1], utils.stringToFloat(valueSplit[1]));
		else
			dict.put(parse[1], valueSplit[1]);
	}

	messageTo(trial.getParent(self), handlerName, dict, 0.0f, false);
}

void executeAnimationTrigger(obj_id self, string[] parse)
{
	string animation = parse[1];
	dictionary dict = new dictionary();
	dict.put("animation", animation);
	messageTo(self, "wsDoAnimation", dict, 1.0f, false);
}

void executeFacingTrigger(obj_id self, string[] parse)
{
	string target = parse[1];
	string condition = parse[2];
	float yaw = 0.0f;

	if (target.equals("player"))
	{
		if (condition.equals("nearest"))
		{
			obj_id player = getClosestPlayer(getLocation(self));
			if (isIdValid(player))
				faceTo(self, player);
		}
	}
	else if (target.equals("spawn_id"))
	{
		resizeable obj_id[] children = new obj_id[0];

		if (utils.hasResizeableObjIdBatchScriptVar(trial.getParent(self), trial.PROT_CHILD_ARRAY))
			children = utils.getResizeableObjIdBatchScriptVar(trial.getParent(self), trial.PROT_CHILD_ARRAY);

		obj_id[] list = children;

		obj_id[] spawnId = trial.getObjectsInListWithObjVar(list, "spawn_id");

		if(spawnId != null)
		{
			obj_id intended = getSpawnIdFromList(spawnId, condition);

			if(isIdValid(intended) && exists(intended))
			{
				faceTo(self, intended);
			}
		}
	}
	else if(target.equals("yaw"))
	{
		if (condition.equals("default"))
		{
			yaw = getFloatObjVar(self, "yaw");
			setYaw(self, yaw);
		}
		if (condition.equals("previous"))
		{
			if (utils.hasScriptVar(self, "rec_yaw"))
			{
				yaw = utils.getFloatScriptVar(self, "rec_yaw");
				setYaw(self, yaw);
			}
		}
		if (condition.equals("random"))
		{
			yaw = rand(-180, 180);
			setYaw(self, yaw);
		}
	}

	utils.setScriptVar(self, "rec_yaw", yaw);
}

void executeMessageSelfTrigger(obj_id self, string[] parse)
{
	string handlerName = parse[1];
	dictionary dict = new dictionary();

	if (!parse[2].equals("none"))
	{
		string[] valueSplit = split(parse[3], '=');

		if (valueSplit[0] == "int")
			dict.put(parse[2], utils.stringToInt(valueSplit[1]));
		if (valueSplit[0] == "float")
			dict.put(parse[2], utils.stringToFloat(valueSplit[1]));
		else
			dict.put(parse[2], valueSplit[1]);
	}

	messageTo(self, handlerName, dict, 5.0f, false);
}

void executeIdTrigger(obj_id self, string[] parse)
{
	dictionary dict = trial.getSessionDict(trial.getParent(self));
	dict.put("triggerName", parse[1]);
	dict.put("triggerType", "triggerId");

	messageTo(trial.getParent(self), "triggerFired", dict, 0.0f, false);
}

messageHandler resumeMovement()
{
	if (hasSuspendedMovement(self))
		resumeMovement(self);

	return SCRIPT_CONTINUE;
}

void pathToPoint(obj_id self, string pointName)
{
	location toPoint = getPointLocation(pointName);
	pathTo(self, toPoint);
	return;
}

void calculatePathPoint(obj_id self, string pointName)
{
	//obj_id[] ppl = trial.
	//obj_id closest = trial.getClosestObject(self, ppl);
}

void beginPathRoutine(obj_id self, string pathName)
{
	setObjVar(self, "patrol_path", pathName);

	if(ai_lib.isInCombat(self))
	{
		return;
	}

	ai_lib.clearPatrolPath(self);

	dictionary pathInfo = utils.getDictionaryScriptVar(self, trial.SEQUENCER_PATH_DATA);

	if (pathInfo == null || pathInfo.isEmpty())
		return;

	string[] pathPointNameArray = pathInfo.getStringArray("pathPointNameArray");
	location[] pathPointLocationArray = pathInfo.getLocationArray("pathPointLocationArray");
	string[] patrolNameMaster = pathInfo.getStringArray("patrolNameMaster");
	string[] patrolTypeMaster = pathInfo.getStringArray("patrolTypeMaster");
	string[] patrolListMaster = pathInfo.getStringArray("patrolListMaster");

	int idx = utils.getElementPositionInArray(patrolNameMaster, pathName);

	if(idx < 0 || idx >= patrolTypeMaster.length)
	{
		doLogging("beginPathRoutine", "Bad idx: " + idx + " patrolTypeMaster.length: " + patrolTypeMaster.length + " pathName: " + pathName);
		return;
	}

	string patrolType = patrolTypeMaster[idx];


	if(idx < 0 || idx >= patrolListMaster.length)
	{
		doLogging("beginPathRoutine", "Bad idx: " + idx + " patrolListMaster.length: " + patrolListMaster.length + " pathName: " + pathName);
		return;
	}

	string[] pathPointList = filterRandomPoints(patrolListMaster[idx]);
	location[] pathPointLocationList = getLocationListFromPointList(pathPointList);

	initiatePatrol(self, patrolType	, pathPointLocationList);

	// doLogging("beginPathRoutine", "end patrolType: " + patrolType + " pathPointLocationList: " + pathPointLocationList[0]);
}

string[] filterRandomPoints(string patrolListString)
{
	string[] thisList = split(patrolListString, ',');

	for (int i=0;i<thisList.length;i++)
	{
		string[] parse = split(thisList[i], '|');
		thisList[i] = parse[rand(0, parse.length - 1)];
	}

	return thisList;
}

location[] getLocationListFromPointList(string[] pointList)
{
	location[] locList = new location[pointList.length];

	for (int i=0;i<pointList.length;i++)
	{
		locList[i] = getPointLocation(pointList[i]);
	}

	return locList;
}

location[] getPatrolPathData(string patrolData)
{
	debugSpeakMsg(getSelf(), patrolData);
	return null;
}

void initiatePatrol(obj_id self, string patrolType, location[] patrolPoints)
{
	location[] ppl = getPplForNpc(self, patrolType, patrolPoints);

	if (patrolType.equals("patrol"))
	{
		ai_lib.setPatrolPath(self, ppl);
	}
	if (patrolType.equals("patrolOnce"))
	{
		ai_lib.setPatrolOncePath(self, ppl);
		addLocationTarget("remove_path", ppl[ppl.length -1], 1f);
	}
	if (patrolType.equals("patrolFlip"))
	{
		ai_lib.setPatrolFlipPath(self, ppl);
	}
	if (patrolType.equals("patrolFlipOnce"))
	{
		ai_lib.setPatrolFlipOncePath(self, ppl);
		addLocationTarget("remove_path", ppl[ppl.length -1], 1f);
	}
	if (patrolType.equals("patrolRandom"))
	{
		ai_lib.setPatrolRandomPath(self, ppl);
	}
	if (patrolType.equals("patrolRandomOnce"))
	{
		ai_lib.setPatrolRandomOncePath(self, ppl);
	}

	return;
}

/*********
// Adding Index is a parameter of the base class code, but it doesn't work.
// So I do this instead.
**/

messageHandler 	setLocationTarget()
{
	string wp_name = params.getString("wp_name");
	location spawnLoc = params.getLocation("loc");

	addLocationTarget(wp_name, spawnLoc, 1.0f);

	return SCRIPT_CONTINUE;
}

void reportDeath(obj_id self, obj_id killer)
{
	int row = getIntObjVar(self, "row");

	string spawn_id = "none";
	if (hasObjVar(self, "spawn_id"))
		spawn_id = getStringObjVar(self, "spawn_id");

	int respawn = getIntObjVar(self, "respawn");

	dictionary dict = trial.getSessionDict(trial.getParent(self));
	dict.put("object", self);
	dict.put("row", row);
	dict.put("spawn_id", spawn_id);
	dict.put("respawn", respawn);
	dict.put("killer", killer);

	messageTo(trial.getParent(self), "terminationCallback", dict, 0.0f, false);
}

obj_id getSpawnIdFromList(obj_id[] list, string spawn)
{
	for (int i=0;i<list.length;i++)
	{
		if (getStringObjVar(list[i], "spawn_id").equals(spawn))
			return list[i];
	}

	return null;
}

location getPointLocation(string pointName)
{
	obj_id self = getSelf();
	
	dictionary dict = utils.getDictionaryScriptVar(self, trial.SEQUENCER_PATH_DATA);

	if (dict == null || dict.isEmpty())
		return null;

	string[] pointList = dict.getStringArray("pathPointNameArray");
	location[] locationList = dict.getLocationArray("pathPointLocationArray");

	if(pointList == null || pointList.length <= 0)
	{
		doLogging("getPointLocation", "pointList null or empty.  pointName: " + pointName + " [" + self + "] - " + getName(self));
		return null;
	}

	if(locationList == null || locationList.length <= 0)
	{
		doLogging("getPointLocation", "locationList null or empty.  pointName: " + pointName + " [" + self + "] - " + getName(self));
		return null;
	}

	int idx = utils.getElementPositionInArray(pointList, pointName);

	if(idx < 0 || idx > pointList.length - 1)
	{
		doLogging("getPointLocation", "Failed to get good index: " + idx + " for point: " + pointName + " [" + self + "] - " + getName(self));
		return null;
	}

	return locationList[idx];
}

location[] getPplForNpc(obj_id sender, string patrolType, location[] patrolPoints)
{
	int idx = getNearestPatrolPointIndex(sender, patrolPoints);
	patrolPoints = trial.shuffleByIndex(patrolType, patrolPoints, idx);
	return patrolPoints;
}

int getNearestPatrolPointIndex(obj_id sender, location[] patrolLoc)
{

	float distance = 2000.0f;
	int idx = 0;

	for (int i=0;i<patrolLoc.length;i++)
	{
		//if (!canSee(sender, patrolLoc[i]))
		//	continue;

		float thisDistance = getDistance(sender, patrolLoc[i]);

		if (thisDistance < 0.0f)
			continue;

		if (thisDistance < distance )
		{
			idx = i;
			distance = thisDistance;
		}
	}
	return idx;

}


void doLogging(string section, string message)
{
	if (LOGGING)
		LOG("doLogging/ai_controller/"+section, message);
}