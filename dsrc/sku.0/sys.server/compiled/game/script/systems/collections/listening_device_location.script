/*
systems.collections.camera_locations_object.script
This script is attached to an item placed at locations where a player must be in order to successfully
take a picture to update his/her collection.
Authors: James Michener
*/

//libraries
include library.collection;
include library.sui;
include library.utils;

//constants
const float UPDATE_RADIUS 			= 5f;
const string_id SID_ENTERED_GOOD_LOCATION	= new string_id("collection", "entered_good_location");

trigger OnInitialize()
{
	//Create the trigger volume
	createTriggerVolume("listening_device_object", UPDATE_RADIUS, true); 
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volName, obj_id breecher)
{
	obj_id triggerVolumeObject = self;
	
	if(!isIdValid(breecher) || !exists(breecher))
	{
		return SCRIPT_CONTINUE;
	}
	if (!isPlayer(breecher))
	{
		return SCRIPT_CONTINUE;
	}
	//see if the player has the 'bug' devices in his inventory.
	obj_id playerDevice = utils.getStaticItemInInventory(breecher, "col_listening_device_02_01");
	if(!isIdValid(playerDevice) || !exists(playerDevice))
	{
		return SCRIPT_CONTINUE;
	}
	//has not completed the collection - and is on the collection (has item in inventory)
	if(!hasCompletedCollection(breecher, "col_meatlump_eavesdrop"))
	{
		sendSystemMessage(breecher, SID_ENTERED_GOOD_LOCATION);
		//activate the device
		utils.setScriptVar(playerDevice, "device_active", 1);
		//get the location number from the trigger volume object
		int triggerLocation = getIntObjVar(triggerVolumeObject, "device_location");
		//set the trigger volume location number on the player's device 
		utils.setScriptVar(playerDevice, "device_location", triggerLocation);
		
	}
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volName, obj_id exitingPlayer)
{
	if(!isIdValid(exitingPlayer) || !exists(exitingPlayer))
	{
		return SCRIPT_CONTINUE;
	}
	//get the item from the player's backpack and remove the scriptVar.
	obj_id playerDevice = utils.getStaticItemInInventory(exitingPlayer, "col_listening_device_02_01");
	if(!isIdValid(playerDevice) || !exists(playerDevice))
	{
		return SCRIPT_CONTINUE;
	}
	//remove scriptVars from the playerDevice
	if(utils.hasScriptVar(playerDevice, "device_active"))
	{
		utils.removeScriptVar(playerDevice, "device_active");
	}
	if(utils.hasScriptVar(playerDevice, "device_location"))
	{
		utils.removeScriptVar(playerDevice, "device_location");
	}
	
	return SCRIPT_CONTINUE;
}


