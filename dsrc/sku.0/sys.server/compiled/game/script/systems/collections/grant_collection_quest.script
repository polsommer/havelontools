include library.collection;
include library.groundquests;
include library.sui;
include library.utils;

const boolean LOGGING_ENABLED = true;

const string STF				= "som/som_quest";
const string_id EXAMINE				= new string_id(STF, "blistmok_heart_examine");
const string_id DESTROY				= new string_id(STF, "blistmok_heart_destroy");
const string_id ALREADY				= new string_id(STF, "blistmok_heart_already");
const string_id UNABLE				= new string_id(STF, "unable_to_examine");
const string_id DECLINE				= new string_id(STF, "quest_decline");

const string QUEST_OBJVAR 				= "collection.quest"; 

//@TODO get the quest off of the objvar

//used for logging.

void blog (string identifier, string text)
{
	if(LOGGING_ENABLED)
	{
		LOG(identifier, text);
	}
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;

	if (utils.getContainingPlayer(self) == null)
		return SCRIPT_CONTINUE;
	
	blog("COLLECTIONS", "Menu Request ");
		
	int menu = mi.addRootMenu(menu_info_types.ITEM_USE, EXAMINE);

	menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
	if(mid == null)
	{
		return SCRIPT_CONTINUE;
	}

	mid.setServerNotify(true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	blog("COLLECTIONS", "OnObjectMenuSelect");

	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;

	if(item != menu_info_types.ITEM_USE)
		return SCRIPT_CONTINUE;	

	if(utils.getContainingPlayer(self) == null)
		return SCRIPT_CONTINUE;	

	blog("COLLECTIONS", "initial checks done");

	//get string objvar off of the object.
	string quest = getStringObjVar(self, QUEST_OBJVAR);
	if(quest == null || quest.equals(""))
		return SCRIPT_CONTINUE;	

	blog("COLLECTIONS", "obj objvar: "+quest);

	if(!groundquests.isQuestActive(player, quest))
	{
		collection.activateQuestAcceptSUI(player, self);
	}
	else
	{
		sendSystemMessage(player, ALREADY);
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleQuestOfferResponse()
{
	blog("COLLECTIONS", "handleQuestOfferResponse");

	if((params == null) || (params.isEmpty()))
		return SCRIPT_CONTINUE;
		
	obj_id player = sui.getPlayerId(params);
	int bp = sui.getIntButtonPressed(params);

	string quest = getStringObjVar(self, QUEST_OBJVAR);
	if(quest == null || quest.equals(""))
		return SCRIPT_CONTINUE;	
	blog("COLLECTIONS", "handleQuestOfferResponse " + quest);
	blog("COLLECTIONS", "player: " + player);

	switch(bp)
	{
		case sui.BP_OK:	// "Accept"
			groundquests.grantQuest(player, quest);
			sendSystemMessage(player, DESTROY);
			destroyObject(self);
			break;
		case sui.BP_CANCEL: // "Decline"
			sendSystemMessage(player, DECLINE);
			break;
	}
	return SCRIPT_CONTINUE;
}
