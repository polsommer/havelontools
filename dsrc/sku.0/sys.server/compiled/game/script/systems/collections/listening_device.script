/*
systems.collections.listening_device.script
This script is attached to the items a player has in his/her inventory.  This monitors to see if the player
is inside of a trigger volume, if so - he/she can use the item...otherwise, the player can not.
Authors: James Michener
*/

//libraries
include library.collection;
include library.stealth;
include library.sui;
include library.utils;

//constants
const string_id SID_USE_DEVICE				= new string_id("collection", "use_device");
const string_id NOT_WHILE_INCAPPED			= new string_id ("quest/ground/util/quest_giver_object", "not_while_incapped");
const string_id SID_NOT_WHILE_IN_COMBAT			= new string_id("base_player", "not_while_in_combat");
const string_id MUST_DISMOUNT				= new string_id ("collection", "must_dismount");
const string_id SID_NEED_TO_ACTIVATE_COLLECTION		= new string_id("collection", "need_to_activate_collection");
const string EAVESDROP_COLLECTION_NAME			= "eavesdrop_location_";

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	//validate the player
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;
		
	//set self
	obj_id listening_device = self;
	
	//can only consume if you have it picked up
	if(utils.isNestedWithinAPlayer(listening_device))
	{
		mi.addRootMenu(menu_info_types.ITEM_USE, SID_USE_DEVICE);
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	//validate the player
	if(!isIdValid(player) || !exists(player))
		return SCRIPT_CONTINUE;
	
	sendDirtyObjectMenuNotification(self);
	obj_id listening_device = self;
	
	// checks for combat
	if(getState(player, STATE_COMBAT) > 0)
	{
		sendSystemMessage(player, SID_NOT_WHILE_IN_COMBAT);
		return SCRIPT_CONTINUE;
	}
	// checks for mount
	if(getState(player, STATE_RIDING_MOUNT) == 1)
	{
		sendSystemMessage(player, MUST_DISMOUNT);
		return SCRIPT_CONTINUE;
	}
	// checks for death/incap
	if(isDead(player) || isIncapacitated(player))
	{
		sendSystemMessage(player, NOT_WHILE_INCAPPED);
		return SCRIPT_CONTINUE;
	}
	
	if(utils.hasScriptVar(listening_device, "device_active"))
	{
		placeListeningDevice(player, listening_device);
	}
	
	return SCRIPT_CONTINUE;
}

boolean placeListeningDevice(obj_id player, obj_id listening_device)
{
	int triggerLocation = 0;
	if(!isIdValid(player) || !exists(player))
		return false;	
	if(!isIdValid(listening_device) || !exists(listening_device))
		return false;	
	//ensure the player is inside the triggerVolume
	if(!utils.hasScriptVar(listening_device, "device_active"))
	{
		return false;	
	}
	if(utils.hasScriptVar(listening_device, "device_location"))
	{
		triggerLocation = utils.getIntScriptVar(listening_device, "device_location");
		updateCollection(player, triggerLocation);
		return true;
	}
	return false;
}

boolean updateCollection(obj_id player, int triggerLocation)
{
	if(!isIdValid(player) || !exists(player))
		return false;	
		
	string slotToUpdate = EAVESDROP_COLLECTION_NAME + triggerLocation;

	if(!hasCompletedCollectionSlot(player, slotToUpdate))
	{
		modifyCollectionSlotValue(player, slotToUpdate, 1);
		return true;
	}
	else
	{
		sendSystemMessage(player, SID_NEED_TO_ACTIVATE_COLLECTION);
		return false;
	}
}



