/*
systems.collections.no_consume_badge_grant.script
Used to trigger a collection update when double clicked
Authors: Jesse Benjamin
*/

//libraries
include library.badge;
include library.collection;
include library.prose;
include library.sui;
include library.utils;

//constants

const string PID_NAME					= "collectionConsume";
const string OBJVAR_BADGE_GRANTED			= "badgeGrantedTo";

const string_id SID_CONSUME_PROMPT			= new string_id("collection", "non_consume_badge_prompt");
const string_id SID_CONSUME_TITLE			= new string_id("collection", "non_consume_badge_title");
const string_id SID_CONSUME_ITEM			= new string_id("collection", "non_consume_badge_use");
const string_id SID_REPORT_CONSUME_ITEM_FAIL		= new string_id("collection", "report_consume_item_fail");
const string_id SID_ALREADY_HAVE_SLOT			= new string_id("collection", "already_have_slot");
const string_id SID_ALREADY_FINISHED_COLLECTION		= new string_id("collection", "already_finished_collection");



trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	//set collectionItem to self
	obj_id collectionItem = self;

	//can only consume if you have it picked up
	if(utils.isNestedWithinAPlayer(collectionItem))
	{
		string slotName = getStringObjVar(self, collection.OBJVAR_SLOT_NAME);

		if(!hasCompletedCollectionSlot(player, slotName) && !hasObjVar(collectionItem, OBJVAR_BADGE_GRANTED))
			mi.addRootMenu (menu_info_types.SERVER_MENU3, SID_CONSUME_ITEM);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	sendDirtyObjectMenuNotification(self);
	//set collectionItem to self
	obj_id collectionItem = self;

	if (item == menu_info_types.SERVER_MENU3  && utils.isNestedWithinAPlayer(collectionItem))
	{
		if(sui.hasPid(player, PID_NAME))
		{
			int pid = sui.getPid(player, PID_NAME);
			forceCloseSUIPage(pid);
		}

		string slotName = getStringObjVar(self, collection.OBJVAR_SLOT_NAME);

		if(!hasCompletedCollectionSlot(player, slotName) && !hasObjVar(collectionItem, OBJVAR_BADGE_GRANTED))
		{
			int pid = sui.msgbox(self, player, "@" + SID_CONSUME_PROMPT, sui.YES_NO, "@" + SID_CONSUME_TITLE, "handlerSuiAddBadge");
			sui.setPid(player, pid, PID_NAME);
			return SCRIPT_CONTINUE;
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	if(!exists(self))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, collection.OBJVAR_SLOT_NAME))
		return SCRIPT_CONTINUE;

	string slotName = getStringObjVar(self, collection.OBJVAR_SLOT_NAME);
	names[idx] = "badge_granted";
	attribs[idx] = "@collection_n:"+slotName;
	idx++;

	if(hasObjVar(self, OBJVAR_BADGE_GRANTED))
	{
		names[idx] = "player_badge_granted";
		attribs[idx] = getPlayerName(getObjIdObjVar(self, OBJVAR_BADGE_GRANTED));
		idx++;
	}


	return SCRIPT_CONTINUE;
}


//messageHandlers
messageHandler handlerSuiAddBadge()
{
	if(params == null || params.isEmpty())
		return SCRIPT_CONTINUE;

	//set collectionItem to self
	obj_id collectionItem = self;

	//get players id
	obj_id player = sui.getPlayerId(params);

	if(!isIdValid(player))
		return SCRIPT_CONTINUE;

	//get button pressed
	int bp = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

	//if they pressed cancel then we bail out and do nothing
	if ( bp == sui.BP_CANCEL )
	{
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}

	//double check that this is the only SUI window open
	if(!sui.hasPid(player, PID_NAME))
		return SCRIPT_CONTINUE;

	if(!utils.isNestedWithin(self, player))
	{
		sui.removePid(player, PID_NAME);
		CustomerServiceLog("CollectionConsume: ", "collectionItem (" + collectionItem + ")"+ " was NOT consumed into a collection, for player " + getFirstName(player) + "(" + player + "). collectionItem(" + collectionItem + "). Player attempted to collect an item that was not in their inventory.");
		return SCRIPT_CONTINUE;
	}

	string slotName = getStringObjVar(collectionItem, collection.OBJVAR_SLOT_NAME);

	//check to see if they already have this slot completed
	if(!hasCompletedCollectionSlot(player, slotName) && !slotName.equals(""))
	{
		//Update the player with the slot
		if(badge.grantBadge(player, slotName))
		{
			setObjVar(collectionItem, OBJVAR_BADGE_GRANTED, player);
			CustomerServiceLog("CollectionConsume: ", "BadgeGrantItem (" + collectionItem + ")"+ " was used to grant a badge, for player " + getFirstName(player) + "(" + player + "). Item now has the objvar " + OBJVAR_BADGE_GRANTED + " with the value of the player's ID.");
		}
		else
		{
			//tell cs we failed
			CustomerServiceLog("CollectionConsume: ", "BadgeGrantItem (" + collectionItem + ")"+ " was NOT used to grant a badge, for player " + getFirstName(player) + "(" + player + ").");
			//tell the player we failed
			sendSystemMessage(player, SID_REPORT_CONSUME_ITEM_FAIL);
		}
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}
	else
	{
		//tell the player They have already finished the collection
		sendSystemMessage(player, SID_ALREADY_HAVE_SLOT);
		sui.removePid(player, PID_NAME);
		return SCRIPT_CONTINUE;
	}
}
