/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        image_designer_response
 * Description:  handles the triggers sent back from the result of image designing
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.buff;
include library.prose;
include library.utils;
include library.xp;

/***** CONSTANTS *******************************************************/
const string DATATABLE_CUSTOMIZATION			= "datatables/customization/customization_skill_mods.iff";
const string DATATABLE_HAIR_STYLE_MODS			= "datatables/customization/hair_assets_skill_mods.iff";

const string SCRIPT_IMAGE_DESIGNER_RESPONSE		= "systems.image_designer.image_designer_response";
const string SCRIPT_HOLO_EMOTE				= "systems.image_designer.holoemote";
const string SCRIPT_IMAGE_DESIGNER_CANCEL		= "systems.image_designer.image_designer_cancel";

const string VAR_IMAGE_DESIGN_CONFIRM			= "image_designer.confirm";
const string VAR_IMAGE_DESIGN_LD			= "image_designer.linkdeath";
const string VAR_IMAGE_DESIGN_TIMESTAMP			= "image_designer.time_stamp";

const string_id SID_NO_TARGET            	 	= new string_id("image_designer", "no_target");
const string_id SID_NOT_A_PLAYER         	 	= new string_id("image_designer", "not_a_player");
const string_id SID_NO_IMAGE_SELF        	 	= new string_id("image_designer", "no_image_self");
const string_id SID_TARGET_DEAD          	 	= new string_id("image_designer", "target_dead");
const string_id SID_OUT_OF_RANGE         	 	= new string_id("image_designer", "out_of_range");
const string_id SID_NOT_IN_SAME_GROUP    	 	= new string_id("image_designer", "not_in_same_group");
const string_id SID_NOT_AN_IMAGE_DESIGNER	 	= new string_id("image_designer", "not_an_image_designer");
const string_id SID_ILLEGAL_SELECTION	 		= new string_id("image_designer", "illegal_selection");
const string_id SID_INSUFFICIENT_SKILL	 		= new string_id("image_designer", "insufficient_skill");
const string_id SID_INSUFFICIENT_ACTION	 		= new string_id("image_designer", "insufficient_action");
const string_id SID_IMAGE_DESIGN_COMPLETE_DESIGNER	= new string_id("image_designer", "image_design_complete_designer");
const string_id SID_IMAGE_DESIGN_COMPLETE_TARGET	= new string_id("image_designer", "image_design_complete_target");
const string_id SID_EXPERIENCE_GRANTED			= new string_id("image_designer", "experience_granted");
const string_id SID_OUTSTANDING_OFFER			= new string_id("image_designer", "outstanding_offer");
const string_id SID_OUT_OF_RANGE_DESIGNER      	 	= new string_id("image_designer", "out_of_range_designer");
const string_id SID_OUT_OF_RANGE_TARGET        	 	= new string_id("image_designer", "out_of_range_target");
const string_id SID_OFFER_DECLINED        	 	= new string_id("image_designer", "offer_declined");
const string_id SID_OFFER_TIMEOUT        	 	= new string_id("image_designer", "offer_timeout");
const string_id SID_OFFER_TIMEOUT_TARGET       	 	= new string_id("image_designer", "offer_timeout_target");

const string STF_FILE 				= "image_designer";

const float IMAGE_DESIGN_RANGE			= 8.0f;
const int IMAGE_DESIGN_COST_BASE		= 65;
const int IMAGE_DESIGN_EXPERIENCE_COSMETIC	= 100;
const int IMAGE_DESIGN_EXPERIENCE_PHYSICAL	= 300;
const int IMAGE_DESIGN_EXPERIENCE_STAT_MIG	= 2000;

/***** TRIGGERS ********************************************************/
trigger OnInitialize()
{
	if (hasScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE))
		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);

	if (isIdValid(self))
		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_CONFIRM);

	return SCRIPT_CONTINUE;
}

trigger OnLogin()
{
	if (hasScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE))
		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);

	if (isIdValid(self))
		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_CONFIRM);

	return SCRIPT_CONTINUE;
}

trigger OnImmediateLogout()
{
	if (hasScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE))
		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);

	if (isIdValid(self))
		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_CONFIRM);

	obj_id ldTarget = null;

	if (utils.hasScriptVar(self, VAR_IMAGE_DESIGN_LD))
	{
		ldTarget = utils.getObjIdScriptVar(self, VAR_IMAGE_DESIGN_LD);
	}

	if (hasScript(ldTarget, SCRIPT_IMAGE_DESIGNER_CANCEL))
		detachScript(ldTarget, SCRIPT_IMAGE_DESIGNER_CANCEL);

	if (isIdValid(ldTarget))
		utils.removeScriptVar(ldTarget, VAR_IMAGE_DESIGN_CONFIRM);

	if (isIdValid(ldTarget))
		utils.removeScriptVar(ldTarget, VAR_IMAGE_DESIGN_LD);


	return SCRIPT_CONTINUE;
}

trigger OnImageDesignValidate(obj_id designerId, obj_id target, obj_id terminalId, int startingTime, int designType, boolean newHairSet, String newHairAsset, String hairCustomizationData, int designerRequiredCredits, int recipientPaidCredits, boolean accepted, String[] morphChangesKeys, float[] morphChangesValues, String[] indexChangesKeys, int[] indexChangesValues, String holoEmote)
{
	//LOG("LOG_CHANNEL", "OnImageDesignValidate: target ->" + target + " customization ->" + customization + " value ->" + value);  // TODO: Fix this logging to included all changes.

	if (!accepted)
	{
		LOG("LOG_CHANNEL", self + " ->" + getFirstName(target) + " has refused your image design offer.");
		prose_package pp = prose.getPackage(SID_OFFER_DECLINED, target);
		sendSystemMessageProse(self, pp);

		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_TIMESTAMP);
		if (isIdValid(target))
			utils.removeScriptVar(target, VAR_IMAGE_DESIGN_CONFIRM);

		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);
		return SCRIPT_CONTINUE;
	}

	// Check to see that target is still in range.
	float distance = getLocation(self).distance(getLocation(target));
	if (distance > IMAGE_DESIGN_RANGE)
	{
		LOG("LOG_CHANNEL", self + " ->Your target has moved too far away.");
		sendSystemMessage(self, SID_OUT_OF_RANGE);
		LOG("LOG_CHANNEL", target + " ->You are now too far away from the image designer.");
		sendSystemMessage(target, SID_OUT_OF_RANGE_TARGET);

		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_TIMESTAMP);
		if (isIdValid(target))
			utils.removeScriptVar(target, VAR_IMAGE_DESIGN_CONFIRM);

		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);
		return SCRIPT_CONTINUE;
	}

	// Make sure the Image designer and target are still inside the tent.
	obj_id closestTerminal = null;
	obj_id structure = getTopMostContainer(self);
	obj_id targetStructure = getTopMostContainer(target);

	// Make sure the designer is in a salon
	if((structure != self) && utils.hasObjVar(structure, "salon"))
	{
		// Make sure the recipient is in a salon
		if((targetStructure != target) && utils.hasObjVar(targetStructure, "salon"))
		{
			// Make sure they are the same salon
			if (structure == targetStructure)
			{
				// Make sure its the same salon they started with
				if (terminalId != structure)
				{
					accepted = false;
				}
			}
			else
			{
				accepted = false;
			}
		}
		else
		{
			accepted = false;
		}
	}
	// Make sure the recipient isn't in a building since the designer is not.
	else if((targetStructure != self) && utils.hasObjVar(targetStructure, "salon"))
	{
		accepted = false;
	}
	// If they are in non-salon buildings, make sure it's the same building.
	else if (structure != self && targetStructure != self && structure != targetStructure)
	{
		accepted = false;
	}

	// Subtract the costs for the action.
	int cost = IMAGE_DESIGN_COST_BASE * designType;
	int action = getAttrib(self, ACTION);
	LOG("LOG_CHANNEL", "cost ->" + cost + " action ->" + action);
	if (cost > action)
	{
		LOG("LOG_CHANNEL", self + " ->You don't have enough mind to do that.");
		sendSystemMessage(self, SID_INSUFFICIENT_ACTION);

		utils.removeScriptVar(self, VAR_IMAGE_DESIGN_TIMESTAMP);
		if (isIdValid(target))
			utils.removeScriptVar(target, VAR_IMAGE_DESIGN_CONFIRM);

		detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);
		return SCRIPT_CONTINUE;
	}
	drainAttributes(self, cost, 0);

	if(holoEmote != "")
	{
		utils.setObjVar(target, "holoEmote", holoEmote);

		int numCharges = 20;
		if(buff.hasBuff(designerId, "entertainer_inspiration"))
			numCharges = 50;

		utils.setObjVar(target, "holoEmoteCharges", numCharges);
		attachScript(target, SCRIPT_HOLO_EMOTE);
	}

	imagedesignValidated(designerId, target, terminalId, startingTime, designType, newHairSet, newHairAsset, hairCustomizationData, designerRequiredCredits, recipientPaidCredits, accepted, morphChangesKeys, morphChangesValues, indexChangesKeys, indexChangesValues, holoEmote);
 	return SCRIPT_CONTINUE;
}

trigger OnImageDesignCompleted(obj_id designerId, obj_id target, obj_id terminalId, int startingTime, int designType, boolean newHairSet, String newHairAsset, String hairCustomizationData, int designerRequiredCredits, int recipientPaidCredits, boolean accepted, String[] morphChangesKeys, float[] morphChangesValues, String[] indexChangesKeys, int[] indexChangesValues, String holoEmote)
{
	//LOG("LOG_CHANNEL", "OnImageDesignCompleted: target ->" + target + " customization ->" + customization + " value ->" + value);

	utils.removeScriptVar(self, VAR_IMAGE_DESIGN_TIMESTAMP);
	if (isIdValid(target))
		utils.removeScriptVar(target, VAR_IMAGE_DESIGN_CONFIRM);

	if ( hasScript(self, "theme_park.new_player.new_player") )
	{
		dictionary webster = new dictionary();
		webster.put("target", target);
		webster.put("hairStyled", newHairSet);
		messageTo(self, "handleNewPlayerEntertainerAction", webster, 1, false);
	}

	if( !holoEmote.equals("") )
	{
		utils.setObjVar(target, "holoEmote", holoEmote);

		int numCharges = 20;
		if(buff.hasBuff(designerId, "entertainer_inspiration"))
			numCharges = 50;

		utils.setObjVar(target, "holoEmoteCharges", numCharges);
		attachScript(target, SCRIPT_HOLO_EMOTE);
		sendSystemMessage(target, new string_id(STF_FILE, "new_holoemote"));
	}

	// check to see if experience was gained
	if ( newHairSet || !holoEmote.equals("") || morphChangesKeys.length != 0 || indexChangesKeys.length != 0 )
	{

		int experience = 0;

		// figure experience
		if (designType == 2)
		{
			experience = IMAGE_DESIGN_EXPERIENCE_STAT_MIG;

			// grant 1/2 xp if the designer changes themself
			if(target == self)
			{
				experience = (int) (experience / 2);
			}

		}
		else if (designType == 1)
		{
				experience = IMAGE_DESIGN_EXPERIENCE_PHYSICAL;

				// grant 1/2 xp if the designer changes themself
				if(target == self)
				{
					experience = (int) (experience / 2);
				}
		}
		else
		{
				experience = IMAGE_DESIGN_EXPERIENCE_COSMETIC;

				// grant 1/2 xp if the designer changes themself
				if(target == self)
				{
					experience = (int) (experience / 2);
				}
		}

		// assign experience.
		xp.grantSocialStyleXp(self, xp.IMAGEDESIGNER, experience);
	}

	detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);
 	return SCRIPT_CONTINUE;

}

trigger OnImageDesignCanceled()
{

	utils.removeScriptVar(self, VAR_IMAGE_DESIGN_CONFIRM);

	detachScript(self, SCRIPT_IMAGE_DESIGNER_RESPONSE);

	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/

/***** FUNCTIONS *******************************************************/
