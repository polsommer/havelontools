
include library.utils;
include library.jedi;
include library.ai_lib;


const string_id SID_SABER_NOT_CRYSTAL			= new string_id ("jedi_spam", "saber_not_crystal");
const string_id SID_SABER_NOT_WHILE_EQUIP		= new string_id ("jedi_spam", "saber_not_while_equpped");
const string_id SID_SABER_CRYSTAL_NOT_TUNED		= new string_id ("jedi_spam", "saber_crystal_not_tuned");
const string_id SID_SABER_CRYSTAL_NOT_OWNER		= new string_id ("jedi_spam", "saber_crystal_not_owner");
const string_id SID_SABER_ALREADY_HAS_COLOR		= new string_id ("jedi_spam", "saber_already_has_color");



trigger OnInitialize()
{
	obj_id saber = getContainedBy(self);

	jedi.resetSaberStats(saber);
	
	return SCRIPT_CONTINUE;
}

trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	obj_id saber = getContainedBy(self);
	obj_id container = getContainedBy(saber);

	if (!isGameObjectTypeOf(item, GOT_component_saber_crystal))
	{
		sendSystemMessage(transferer, SID_SABER_NOT_CRYSTAL);
		return SCRIPT_OVERRIDE;
	}
	
	if (isPlayer(container))
	{
		sendSystemMessage(transferer, SID_SABER_NOT_WHILE_EQUIP);
		return SCRIPT_OVERRIDE;
	}

	// Check if crystal is tuned and disallow if not.
	if (!jedi.isCrystalTuned(item))
	{
		sendSystemMessage(transferer, SID_SABER_CRYSTAL_NOT_TUNED);
		return SCRIPT_OVERRIDE;
	}
	
	// Check to see if the player is tuned to this crystal	
	// note: if transferer is invalid, it would be CTS moving the crystal into the saber. allow it.
	if ((isIdValid(transferer) && !jedi.isCrystalOwner(transferer, item)) || !jedi.doesCrystalMatchSaber(saber, item))
	{
		sendSystemMessage(transferer, SID_SABER_CRYSTAL_NOT_OWNER);
		return SCRIPT_OVERRIDE;
	}
	
	if (jedi.isColorCrystal(item) && jedi.hasColorCrystal(saber))
	{
		sendSystemMessage(transferer, SID_SABER_ALREADY_HAS_COLOR);
		return SCRIPT_OVERRIDE;
	}
	
 	return SCRIPT_CONTINUE;
}

trigger OnReceivedItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	//sendSystemMessageTestingOnly(transferer, "Compatible Force crystal detected.  Adding Force crystal to this lightsaber.");
	
	obj_id saber = getContainedBy(self);
	if (!isDisabled(item))
		jedi.addCrystalStats(saber, item);
	
	return SCRIPT_CONTINUE;
}

trigger OnAboutToLoseItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	obj_id saber = getContainedBy(self);
	obj_id container = getContainedBy(saber);
	
	if (isPlayer(container))
	{
		sendSystemMessage(transferer, SID_SABER_NOT_WHILE_EQUIP);
		return SCRIPT_OVERRIDE;
	}
	
 	return SCRIPT_CONTINUE;
}

trigger OnLostItem(obj_id destContainer, obj_id transferer, obj_id item)
{
	//sendSystemMessageTestingOnly(transferer, "Removing Force crystal from this lightsaber.");

	obj_id saber = getContainedBy(self);
	if (!isDisabled(item))
		jedi.removeCrystalStats(saber, item);
	
 	return SCRIPT_CONTINUE;
}

