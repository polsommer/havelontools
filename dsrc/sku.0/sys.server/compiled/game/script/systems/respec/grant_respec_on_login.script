/**********************************************************************
 * Copyright (c)2005 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        grant_respec_on_login.script
 * Description:  Starts the respec process on a player
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/

include library.respec;
include library.utils;

// This old form of respec has been disabled.
trigger OnLogin()
{
	detachScript(self, respec.SCRIPT_GRANT_ON_LOGIN);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	detachScript(self, respec.SCRIPT_GRANT_ON_LOGIN);
	return SCRIPT_CONTINUE;
}

/*
trigger OnInitialize()
{
	// This will be a null op if it's already on there
	attachScript( self, respec.SCRIPT_CHECK_INFORM);
	if( !hasObjVar( self, respec.OBJVAR_TIMESTAMP) )
 	{
 		setObjVar( self, respec.OBJVAR_TIMESTAMP, getGameTime() );
		setObjVar( self, respec.OBJVAR_RESPEC, 1 );
		setObjVar( self, respec.OBJVAR_RESPEC_COUNT, 0 );
		setObjVar( self, respec.OBJVAR_LAST_TIMESTAMP, 0 );
		messageTo( self, respec.MESSAGE_ON_GRANT, null, 90.0f, false);
		CustomerServiceLog("respec", "Player (%TU) was granted a respec credit, timestamp ("+getGameTime()+")", self);
	}
	else
	{
		int duration;
		String s = getConfigSetting("GameServer", "respecDurationAllowedInSeconds");
		if(s == null)
			duration = 60 * 60 * 24 * 14; // 2 weeks
		else
			duration = Integer.parseInt(s);

		int timestamp = getIntObjVar( self, respec.OBJVAR_TIMESTAMP );
		int now = getGameTime();

		int respecCount = getIntObjVar( self, respec.OBJVAR_RESPEC_COUNT );
		int maxRespecCount = utils.getIntConfigSetting("GameServer", "maxRespecCount");

		if(!hasObjVar( self, respec.OBJVAR_RESPEC ))
			setObjVar( self, respec.OBJVAR_RESPEC, 1 );			
		if(!hasObjVar( self, respec.OBJVAR_LAST_TIMESTAMP ))
			setObjVar( self, respec.OBJVAR_LAST_TIMESTAMP, 0 );
		if(!hasObjVar( self, respec.OBJVAR_RESPEC_COUNT ) )
			setObjVar( self, respec.OBJVAR_RESPEC_COUNT, 0 );
		int respecAuth = getIntObjVar( self, respec.OBJVAR_RESPEC );
		//Cleanup old "never remind me" value
		if(respecAuth == 2)
		{
			respecAuth = 1;
			setObjVar( self, respec.OBJVAR_RESPEC, 1 );
		}
		if( (now - timestamp) > duration)
		{
			// Player has expired, generate message
			messageTo( self, respec.MESSAGE_ON_EXPIRE, null, 90.0f, false );
			setObjVar( self, respec.OBJVAR_LAST_TIMESTAMP, 0 );
			setObjVar( self, respec.OBJVAR_REMOVE_ON_LOGOUT, 1 );
			CustomerServiceLog("respec", "Player (%TU) is being asked to expire themselves: " + now + " , " + timestamp + " , " + duration, self);
		}
		else if (respecAuth == 1 && ((maxRespecCount == 0) || (respecCount < maxRespecCount)) )
		{
			messageTo( self, respec.MESSAGE_ON_GRANT, null, 90.0f, false);
		}
				
		if( (now-timestamp) > (duration + 60 * 60 * 24 * 7))
		{
			CustomerServiceLog("respec", "Player (%TU) seems to have been on respec for more than one week past their end date: " + now + " , " + timestamp, self);
		}
	}
	return SCRIPT_CONTINUE;
}

trigger OnLogout()
{
	String s = getConfigSetting("GameServer", "respecDurationAllowedInSeconds");
	int duration;
	if(s == null)
		duration = 60 * 60 * 24 * 14; // 2 weeks
	else
		duration = Integer.parseInt(s);
		
	int timestamp = getIntObjVar( self, respec.OBJVAR_TIMESTAMP );
	int now = getGameTime();

	int respecCount = getIntObjVar( self, respec.OBJVAR_RESPEC_COUNT );
	int maxRespecCount = utils.getIntConfigSetting("GameServer", "maxRespecCount");

	if ( ((maxRespecCount != 0) && (respecCount >= maxRespecCount)) ||
	     hasObjVar(self, respec.OBJVAR_REMOVE_ON_LOGOUT) )
	{
		// Player has expired
		if ( now - timestamp > duration )
			CustomerServiceLog("respec", "Player (%TU) had their respec credit expire, timestamp ("+getGameTime()+")", self);
		else
			CustomerServiceLog("respec", "Player (%TU) had their respec count maxxed, count = "+respecCount+" out of "+maxRespecCount, self);
		removeObjVar( self, respec.OBJVAR_RESPEC_ROOT);
		detachScript( self, respec.SCRIPT_GRANT_ON_LOGIN);
		detachScript( self, respec.SCRIPT_CHECK_INFORM);
	}
	return SCRIPT_CONTINUE;
}
*/