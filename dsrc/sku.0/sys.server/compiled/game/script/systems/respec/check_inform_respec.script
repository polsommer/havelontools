/**********************************************************************
 * Copyright (c)2005 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        check_inform_respec.script
 * Description:  Utility functions for the respec system
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/

include library.respec;
include library.sui;
include library.utils;

const string_id POPUP_RESPEC_HAS_TOKEN_PROMPT = new string_id("ui_respec", "server_inform_respec_token");
const string_id POPUP_RESPEC_AUTHORIZED_PROMPT = new string_id("ui_respec", "server_inform_respec_authorized");
const string_id POPUP_RESPEC_AUTHORIZED_NO_COUNT_PROMPT = new string_id("ui_respec", "server_inform_respec_authorized_no_count");
const string_id POPUP_RESPEC_EXPIRING_PROMPT = new string_id("ui_respec", "server_inform_respec_expire");
const string_id POPUP_RESPEC_JEDI_PROMPT = new string_id("ui_respec", "server_inform_respec_jedi");
const string POPUP_LATER = "@ui_respec:later";
const string POPUP_TITLE = "@ui_respec:title";
const string POPUP_YES = "@ui:yes";
const string HANDLER_ON_AUTHORIZED = "onAuthorized";
const string HANDLER_ON_STAT_AUTHORIZED = "onStatAuthorized";
const string EVENT_WIDGET_NAME = "eventWidgetName";
const string EVENT_TYPE = "eventType";
const string EVENT_TYPE_ON_CLOSED_OK = "onClosedOk";
const string EVENT_TYPE_ON_CLOSED_CANCEL = "onClosedCancel";
const string PROPERTY_SIZE = "Size";
const string VALUE_SIZE = "450,375";
const string SKILLS_RESPEC_ACTION = "/ui action skillsRespec";

// This old form of respec has been disabled.
trigger OnLogin()
{
	detachScript(self, respec.SCRIPT_CHECK_INFORM);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	detachScript(self, respec.SCRIPT_CHECK_INFORM);
	return SCRIPT_CONTINUE;
}

/*
int doMsgBox(obj_id owner, obj_id target, prose_package prompt, int buttons, string box_title, int style, string suiHandler)
{
	int pid = createSUIPage(sui.SUI_MSGBOX, owner, target, suiHandler);

	string oob = packOutOfBandProsePackage(null, prompt);
	setSUIPropertyOOB(pid, sui.MSGBOX_PROMPT, sui.PROP_TEXT, oob);
	setSUIProperty(pid, sui.MSGBOX_TITLE, sui.PROP_TEXT, box_title);

	sui.msgboxButtonSetup(pid, buttons);

	return pid;
}

messageHandler onRespecGrant()
{
	int respecAllowed = getIntObjVar( self, respec.OBJVAR_RESPEC );
	if(respecAllowed == 1)
	{
		prose_package prompt = new prose_package();
		if( hasSkill(self, "force_rank_light_novice") || hasSkill(self, "force_rank_dark_novice"))
			prompt.stringId = POPUP_RESPEC_JEDI_PROMPT;
		else
		{
			prompt.stringId = POPUP_RESPEC_AUTHORIZED_PROMPT;
		}
		// check the respec count
		int respecCount = getIntObjVar( self, respec.OBJVAR_RESPEC_COUNT );
		int maxRespecCount = utils.getIntConfigSetting("GameServer", "maxRespecCount");
		if(maxRespecCount == 0)
		{
			prompt.stringId = POPUP_RESPEC_AUTHORIZED_NO_COUNT_PROMPT;
		}
		else
		{
			prompt.digitInteger = maxRespecCount - respecCount;
			if ( prompt.digitInteger <= 0 )
			{
				// WTF?! Detach the script
				CustomerServiceLog("respec", "Player (%TU) has had onGrant called, but has a respec count " + respecCount + " out of " + maxRespecCount, self);
				detachScript(self, respec.SCRIPT_CHECK_INFORM);
				return SCRIPT_CONTINUE;
			}
		}
		int pid = doMsgBox( self, self, prompt, sui.YES_NO, POPUP_TITLE, sui.MSG_INFORMATION, HANDLER_ON_AUTHORIZED);

		subscribeToSUIEvent(pid, sui_event_type.SET_onButton, sui.BTN_OK, HANDLER_ON_AUTHORIZED);
		subscribeToSUIEvent(pid, sui_event_type.SET_onButton, sui.BTN_CANCEL, HANDLER_ON_AUTHORIZED);

		setSUIProperty(pid, sui.BTN_CANCEL, sui.PROP_TEXT, POPUP_LATER);
		
		setSUIProperty(pid, "", PROPERTY_SIZE, VALUE_SIZE);

		showSUIPage(pid);
	}
	else
	{
		//They don't need us anymore, sniff, sniff
		detachScript(self, respec.SCRIPT_CHECK_INFORM);
	}
	return SCRIPT_CONTINUE;
}

messageHandler onRespecExpire()
{
	int respecAllowed = getIntObjVar( self, respec.OBJVAR_RESPEC );
	if(respecAllowed == 1)
	{
		prose_package prompt = new prose_package();
		prompt.stringId = POPUP_RESPEC_EXPIRING_PROMPT;
		int pid = doMsgBox( self, self, prompt, sui.OK_ONLY, POPUP_TITLE, sui.MSG_INFORMATION, HANDLER_ON_AUTHORIZED);

		subscribeToSUIEvent(pid, sui_event_type.SET_onButton, sui.BTN_OK, HANDLER_ON_AUTHORIZED);		
		
		setSUIProperty(pid, sui.BTN_OK, sui.PROP_TEXT, POPUP_YES);
		
		setSUIProperty(pid, "", PROPERTY_SIZE, VALUE_SIZE);

		showSUIPage(pid);
	}
	else
	{
		//They don't need us anymore, sniff, sniff
		detachScript(self, respec.SCRIPT_CHECK_INFORM);
	}
	return SCRIPT_CONTINUE;
}

messageHandler onRespecHasToken()
{	
	prose_package prompt = new prose_package();
	
	prompt.stringId = POPUP_RESPEC_HAS_TOKEN_PROMPT;
	
	int pid = doMsgBox( self, self, prompt, sui.YES_NO, POPUP_TITLE, sui.MSG_INFORMATION, HANDLER_ON_AUTHORIZED);

	subscribeToSUIEvent(pid, sui_event_type.SET_onButton, sui.BTN_OK, HANDLER_ON_AUTHORIZED);
	subscribeToSUIEvent(pid, sui_event_type.SET_onButton, sui.BTN_CANCEL, HANDLER_ON_AUTHORIZED);

	setSUIProperty(pid, sui.BTN_CANCEL, sui.PROP_TEXT, POPUP_LATER);

	setSUIProperty(pid, "", PROPERTY_SIZE, VALUE_SIZE);

	showSUIPage(pid);

	return SCRIPT_CONTINUE;
}

messageHandler onAuthorized()
{
	String widgetName = params.getString(EVENT_WIDGET_NAME);
	String eventType = params.getString(EVENT_TYPE);

	if(eventType.equalsIgnoreCase(EVENT_TYPE_ON_CLOSED_OK))
	{
		sendConsoleCommand(SKILLS_RESPEC_ACTION, self);
	}
	else if(eventType.equalsIgnoreCase(EVENT_TYPE_ON_CLOSED_CANCEL))
	{
		//do nothing, they'll be reminded again on next login
		forceCloseSUIPage(params.getInt("pageId"));
	}
	else if(widgetName.equalsIgnoreCase(sui.BTN_CANCEL))
	{
		//do nothing, they'll be reminded again on next login
		forceCloseSUIPage(params.getInt("pageId"));
	}
	else
	{
		//Assume it's the close button
		forceCloseSUIPage(params.getInt("pageId"));
	}

	return SCRIPT_CONTINUE;
}
*/