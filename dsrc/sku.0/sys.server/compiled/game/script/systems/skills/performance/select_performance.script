/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        select_performance.script
 * Description:  script is attached to the player when he is to select
 *		 a dance or song to perfom.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.performance;
include library.sui;

/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnInitialize()
{
	detachScript(self, performance.PERFORMANCE_SELECT);
	
	return SCRIPT_CONTINUE;
}

trigger OnDetach()
{
	if (hasObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES))
		removeObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
	
	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/


/***** MESSAGEHANDLERS *************************************************/
messageHandler msgSongSelected()
{
	LOG("LOG_CHANNEL", "performCommands::msgSongSelected");
	
	string[] available_music;
	if (hasObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES))
	{
		available_music = getStringArrayObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
		removeObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
	}
	else
	{
		performance.performanceMessageToSelf(self, null, performance.SID_MUSIC_LACK_SKILL_INSTRUMENT);
		detachScript(self, performance.PERFORMANCE_SELECT);
		return SCRIPT_CONTINUE;
	}
	detachScript(self, performance.PERFORMANCE_SELECT);
	
	string button = params.getString("buttonPressed");
	if (button.equals("Cancel") || button.equals("No"))		
		return SCRIPT_CONTINUE;
	
	int row_selected = sui.getListboxSelectedRow(params);
	if (row_selected == -1)			
		return SCRIPT_CONTINUE;
	
	if (row_selected >= available_music.length)
	{
		performance.performanceMessageToSelf(self, null, performance.SID_MUSIC_INVALID_SONG);
		return SCRIPT_CONTINUE;
	}
	
	string selected_music = available_music[row_selected];

	boolean band = getBooleanObjVar(self, performance.VAR_SELECT_MUSIC_BAND);
	boolean changeMusic = getBooleanObjVar(self, performance.VAR_SELECT_MUSIC_CHANGE);

	removeObjVar(self, performance.VAR_SELECT_MUSIC_BAND);
	removeObjVar(self, performance.VAR_SELECT_MUSIC_CHANGE);

	if (changeMusic)
	{
		if (band)
			queueCommand(self, ##"changeBandMusic", null, selected_music, COMMAND_PRIORITY_DEFAULT);
		else
			queueCommand(self, ##"changeMusic", null, selected_music, COMMAND_PRIORITY_DEFAULT);
	}
	else
	{
		if (band)
			queueCommand(self, ##"startBand", null, selected_music, COMMAND_PRIORITY_DEFAULT);
		else
			queueCommand(self, ##"startMusic", null, selected_music, COMMAND_PRIORITY_DEFAULT);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler msgDanceSelected()
{
	LOG("LOG_CHANNEL", "performCommands::msgDanceSelected");
	
	string[] available_dances;
	if (hasObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES))
	{
		available_dances = getStringArrayObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
		removeObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
	}
	else
	{
		performance.performanceMessageToSelf(self, null, performance.SID_DANCE_UNKNOWN_SELF);
		detachScript(self, performance.PERFORMANCE_SELECT);
		return SCRIPT_CONTINUE;
	}
	detachScript(self, performance.PERFORMANCE_SELECT);
	
	string button = params.getString("buttonPressed");
	if (button.equals("Cancel") || button.equals("No"))		
		return SCRIPT_CONTINUE;
	
	int row_selected = sui.getListboxSelectedRow(params);
	if (row_selected == -1)			
		return SCRIPT_CONTINUE;
	
	if (row_selected >= available_dances.length)
	{
		performance.performanceMessageToSelf(self, null, performance.SID_DANCE_UNKNOWN_SELF);
		return SCRIPT_CONTINUE;
	}
	
	string selected_dance = available_dances[row_selected];
	if (hasObjVar(self, performance.VAR_SELECT_DANCE_CHANGE))
	{
		removeObjVar(self, performance.VAR_SELECT_DANCE_CHANGE);
		queueCommand(self, ##"changeDance", null, selected_dance, COMMAND_PRIORITY_DEFAULT);
	}
	else
	{
		queueCommand(self, ##"startDance", null, selected_dance, COMMAND_PRIORITY_DEFAULT);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler msgJuggleSelected()
{
	LOG("LOG_CHANNEL", "performCommands::msgJuggleSelected");
	
	string[] available_juggles;
	if (hasObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES))
	{
		available_juggles = getStringArrayObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
		removeObjVar(self, performance.VAR_AVAILABLE_PERFORMANCES);
	}
	else
	{
		performance.performanceMessageToSelf(self, null, performance.SID_JUGGLE_UNKNOWN_SELF);
		detachScript(self, performance.PERFORMANCE_SELECT);
		return SCRIPT_CONTINUE;
	}
	detachScript(self, performance.PERFORMANCE_SELECT);
	
	if ( available_juggles == null || available_juggles.length == 0 )
		return SCRIPT_CONTINUE;
	
	int bp = sui.getIntButtonPressed(params);
	if (  bp == sui.BP_CANCEL )		
		return SCRIPT_CONTINUE;
	
	int row_selected = sui.getListboxSelectedRow(params);
	if (row_selected == -1)			
		return SCRIPT_CONTINUE;
	
	if (row_selected >= available_juggles.length)
	{
		performance.performanceMessageToSelf(self, null, performance.SID_JUGGLE_UNKNOWN_SELF);
		return SCRIPT_CONTINUE;
	}
	
	string selected_juggle = available_juggles[row_selected];
	if (hasObjVar(self, performance.VAR_SELECT_JUGGLE_CHANGE))
	{
		removeObjVar(self, performance.VAR_SELECT_JUGGLE_CHANGE);
		queueCommand(self, ##"changeJuggle", null, selected_juggle, COMMAND_PRIORITY_DEFAULT);
	}
	else
	{
		queueCommand(self, ##"startJuggling", null, selected_juggle, COMMAND_PRIORITY_DEFAULT);
	}
	
	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/

