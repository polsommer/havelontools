include library.utils;
include library.stealth;
include library.prose;

const java.text.NumberFormat floatFormat = new java.text.DecimalFormat("###.##");

trigger OnAttach()
{
	setCount(self, 5);
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int free = getFirstFreeIndex(names);
	if (free == -1)
	{
		return SCRIPT_CONTINUE;
	}
	
	names[free] = "effectiveness";
	attribs[free++] = "" + floatFormat.format((float)getIntObjVar(self, stealth.DETECT_EFFECTIVENESS) / 10) + "%";

	float flareDistance = stealth.CHAFF_FLARE_DISTANCE;	
	names[free] = "trap_radius";
	attribs[free++] = "" + flareDistance;
	
	utils.addClassRequirementAttributes(player, self, names, attribs, free, "");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!utils.isNestedWithin(self, player))
	{
		return SCRIPT_OVERRIDE;
	}	

	if(!utils.testItemClassRequirements(player, self, true, ""))
	{		
		return SCRIPT_OVERRIDE;
	}
	
	if(!utils.testItemLevelRequirements(player, self, true, ""))
	{
		return SCRIPT_OVERRIDE;
	}

	menu_info_data mid2 = mi.getMenuItemByType(menu_info_types.ITEM_USE);
  	if(mid2 != null )
  	{
   		mid2.setServerNotify(true);
  	}
 		
 	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(item == menu_info_types.ITEM_USE) 
	{
		if(!utils.isNestedWithin(self, player))
		{
			return SCRIPT_OVERRIDE;
		}	

		if(!utils.testItemClassRequirements(player, self, false, ""))
		{
			return SCRIPT_OVERRIDE;
		}

		if(!utils.testItemLevelRequirements(player, self, false, ""))
		{
			return SCRIPT_OVERRIDE;
		}

		stealth.doChaffFlareEffect(player, self);
		int count = getCount(self);
		count--;		
		if(count < 1)
		{
			destroyObject(self);
		}
		else
		{			
			setCount(self, count);
		}
	}
	
	return SCRIPT_CONTINUE;
}