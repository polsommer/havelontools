include library.performance;
include library.utils;

const string_id SID_NO_PROP_SKILL	= new string_id("error_message", "prop_no_prop_skill");
const string_id SID_NO_DUAL_SKILL	= new string_id("error_message", "prop_no_dual_skill");
const string_id SID_NOT_IN_COMBAT	= new string_id("error_message", "prop_not_in_combat");

const string PROP_DATATABLE		= "datatables/tangible/prop_datatable.iff";
const string TEMPLATE_COLUMN		= "template";
const string COMMAND_COLUMN		= "command";
const string HAND_COLUMN		= "hand";

trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	if(!isIdValid(destContainer) || !isPlayer(destContainer))
		return SCRIPT_CONTINUE;

	// props cannot be equiped while the player is in combat
	if (getState(destContainer, STATE_COMBAT) == 1)
	{
		sendSystemMessage(destContainer, SID_NOT_IN_COMBAT);
		return SCRIPT_OVERRIDE;
	}

	string template = getTemplateName(self);
	
	int row = dataTableSearchColumnForString(template, TEMPLATE_COLUMN, PROP_DATATABLE);
	
	if(row < 0)
	{
		//prop is not in table
		return SCRIPT_OVERRIDE;
	}
	
	dictionary dict = dataTableGetRow (PROP_DATATABLE, row);
	
	string command = dict.getString(COMMAND_COLUMN);
	string hand = dict.getString(HAND_COLUMN);
		
	

	if(!hasCommand(destContainer, command) && !performance.hasInspirationDancePropUseBuff(destContainer, command))
	{
		if(!utils.isProfession(destContainer, utils.ENTERTAINER) && !hasObjVar(self, "allProfs"))
		{
			sendSystemMessage(destContainer, SID_NO_PROP_SKILL);
			return SCRIPT_OVERRIDE;
		}
			
		if(!hasObjVar(self, "nocert") && !hasCommand(destContainer, command))
		{
			sendSystemMessage(destContainer, SID_NO_PROP_SKILL);
			return SCRIPT_OVERRIDE;
		}
	}

	string otherHand = "hold_l";
	if(hand.equals("l"))
		otherHand = "hold_r";

	obj_id otherHandObj = getObjectInSlot(destContainer, otherHand);
	if(isIdValid(otherHandObj))
	{
		if(!hasCommand(destContainer, "prop_dual_wield"))
		{
			sendSystemMessage(destContainer, SID_NO_DUAL_SKILL);
			return SCRIPT_OVERRIDE;
		}
	}

	return SCRIPT_CONTINUE;
}
