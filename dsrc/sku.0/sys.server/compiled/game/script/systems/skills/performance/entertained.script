

include library.performance;

const int ENTERTAINED_CHECK_TIME = 10;

trigger OnAttach()
{
	messageTo(self, "OnEntertainedCheck", null, ENTERTAINED_CHECK_TIME, false);
	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	if (performance.checkPlayerEntertained(self, "both"))
	{
		messageTo(self, "OnEntertainedCheck", null, ENTERTAINED_CHECK_TIME, false);
	}
	
	return SCRIPT_CONTINUE;
}

messageHandler OnEntertainedCheck()
{
	LOG ("performance_entertained", "OnEntertainedCheck");
	if (performance.checkPlayerEntertained(self, "both"))	
	{
		LOG ("performance_entertained", "Still being entertained.");
		messageTo(self, "OnEntertainedCheck", null, ENTERTAINED_CHECK_TIME, false);
	}
	else
	{
		LOG ("performance_entertained", "No longer entertained.");
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited(string volumeName, obj_id target)
{
/*
hnguyen - commented out for now to help track down the "too far away"
entertainer problem; we'll rely on the range check in
performance.checkPlayerEntertained() do handle stopping
watching/listening if the watcher/listener is too far away
from the entertainer

	LOG ("performance_entertained", "Exiting trigger volume");
	
	if (volumeName.equals("performance_watch_volume"))
	{
		obj_id watchTarget = getPerformanceWatchTarget(self);

		if (watchTarget == target)
		{
			performance.performanceMessageToSelf(self, target, performance.SID_DANCE_WATCH_OUT_OF_RANGE);
			performance.stopWatch(self);
		}
	}
	
	if (volumeName.equals("performance_listen_volume"))
	{
		obj_id listenTarget = getPerformanceListenTarget(self);

		if (listenTarget == target)
		{
			performance.performanceMessageToSelf(self, target, performance.SID_MUSIC_LISTEN_OUT_OF_RANGE);
			performance.stopListen(self);
		}
	}
*/
	
	return SCRIPT_CONTINUE;
}

messageHandler handlePerformerStopPerforming()
{
	LOG ("performance_entertained", "Received stop performing message");
	
	obj_id target = params.getObjId("performer");
	string check = params.getString("check");
	
	stopListeningToMessage(target, "handlePerformerStopPerforming");
	listenToMessage(target, "handlePerformerStartPerforming");

	performance.checkPlayerEntertained(self, check);
	
	return SCRIPT_CONTINUE;
}

messageHandler handlePerformerStartPerforming()
{
	LOG ("performance_entertained", "Received start performing message");
	
	obj_id target = params.getObjId("performer");
	
	stopListeningToMessage(target, "handlePerformerStartPerforming");
	listenToMessage(target, "handlePerformerStopPerforming");

	performance.startEntertainingPlayer(self);
	
	return SCRIPT_CONTINUE;
}

