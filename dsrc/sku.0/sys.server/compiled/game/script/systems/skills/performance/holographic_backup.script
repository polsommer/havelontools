include library.performance;

trigger OnAttach()
{
	obj_id master = getMaster(self);

	if(isIdValid(master))
		listenToMessage(master, "handleHologramPerformanceCommand");
	
	createTriggerVolume( "performanceRange", 64.0f, true );
	messageTo(self, "handleCleanup", null, 10800, false);  // This is a safeguard in case the cleanup code doesnt work 
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeExited( string volumeName, obj_id breacher )
{
	if ( !isMob( self ) )
		return SCRIPT_CONTINUE;

	if ( volumeName == "performanceRange" && breacher == getMaster( self ) )
	{
		messageTo(breacher, "handlePerformanceBreach", null, 1, false); 
	}
	return SCRIPT_CONTINUE;
}

// This is a safeguard destroy - this should be handled by the entertainer 3 hour maximum 
// in case that doesnt work for whatever reason after 3 hours delete self
messageHandler handleCleanup()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}	

messageHandler handleGroupInvitation()
{
	queueCommand(self, ##"join", null, "", COMMAND_PRIORITY_DEFAULT);

	return SCRIPT_CONTINUE;
}

messageHandler handleHologramPerformanceCommand()
{
	int command = params.getInt("commandType");

	string songName = "";
	string danceName = "";

	switch(command)
	{
		case performance.HOLOGRAM_COMMAND_START_SONG:	songName = params.getString("songName");
														performance.startMusic(self, songName);
														break;
		case performance.HOLOGRAM_COMMAND_CHANGE_SONG:	songName = params.getString("songName");
														performance.changeMusic(self, songName);
														break;
		case performance.HOLOGRAM_COMMAND_STOP_SONG:	performance.stopMusicNow(self);
														break;
		case performance.HOLOGRAM_COMMAND_START_DANCE:	danceName = params.getString("danceName");
														performance.startDance(self, danceName);
														break;
		case performance.HOLOGRAM_COMMAND_CHANGE_DANCE:	danceName = params.getString("danceName");
														performance.changeDance(self, danceName);
														break;
		case performance.HOLOGRAM_COMMAND_STOP_DANCE:	performance.stopDance(self);
														break;
	}

	return SCRIPT_CONTINUE;
}