// -----------------------------------------------------------------------
// Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
// All Rights Reserved
// -----------------------------------------------------------------------
// This is the structure base functionality. It contains all required functions and messagehandlers for structures


include library.utils;

// *******************LISTENER FUNCTIONS*****************************************8

// The structure for a listener list is an array of obj_id's
// this means that removal of an element requires rebuilding the list without the removed element.
// the advantage is that we can parse through the list easily

messageHandler addListener()
{


	// this adds a listener object id to the listener list
	// we'll simply append to the end of the list
	// this means making a new array with oldArrayLength+1

	obj_id objListener = params.getObjId("objListener");
	if(!hasObjVar(self, "objListeners"))
	{
		debugServerConsoleMsg(self, "no listener objvar");
		// we need to make a new array since this structure doesnt have any listeners


		obj_id[] objListeners = new obj_id[1]; // we just need 1 element
		objListeners[0] =  objListener;

		setObjVar(self, "objListeners", objListeners);		// Suppress linting - We know that this array will always be at least one element long
		params.put("boolListenerStatus", true);


	}
	else
	{


		debugServerConsoleMsg(self, "listener objVar found");

		obj_id[] objListeners = getObjIdArrayObjVar(self, "objListeners"); // we need the old list

		debugServerConsoleMsg(self, "got objListeners array");
		if (objListeners==null)
		{
			debugServerConsoleMsg(self, "NULL OBJLISTENRES");


		}

		debugServerConsoleMsg(self, "objListeners is "+objListeners[0].toString());
		debugServerConsoleMsg(self, "objListeners Length is "+objListeners.length);

		obj_id[] objNewListeners = new obj_id[objListeners.length+1];
		if(!utils.isObjIdInArray(objListeners, objListener))
		{
			debugServerConsoleMsg(self, "Not isInArray");
			// listener is not already in the list
			// we have to copy the array
			objNewListeners = utils.copyObjIdArray(objListeners, objNewListeners);
			objNewListeners[objNewListeners.length-1] = objListener; // length is the number of elements, but count starts at 0
			setObjVar(self, "objListeners", objNewListeners);
			params.put("boolListenerStatus", true);
		}
		else
		{
	 		debugServerConsoleMsg(self, "Already in Array");
	 		params.put("boolListenerStatus", false); // Listener already in the list, we don't need to do anything


		}


	}

	// because this is asynchronous, we need to notify the owner that the message has been received


	messageTo(self, "listener_Attached", params, 0, true);
	//messageTo(objListener, "listener_Attached", params, 0, true);


	return SCRIPT_CONTINUE;

}



messageHandler removeListener()
{
// this removes a listener from the listing
// we'll make a new array with oldArrayLength-1, and copy everything except the obj_id being removed
	if(!hasObjVar(self, "objListeners"))
	{
		return SCRIPT_CONTINUE; // No array, kick back out


	}
	else
	{
		obj_id objListener = params.getObjId("objListener");
		obj_id[] objListeners = getObjIdArrayObjVar(self, "objListeners");
		boolean boolIsInArray;
		boolIsInArray = utils.isObjIdInArray(objListeners, objListener);

		if(objListeners.length>1)
		{
			obj_id[] objNewListeners = new obj_id[objListeners.length-1]; // shrink it by 1
		        // dont shrink it to 0. If the data is valid, we'll simply remove the listeners array objvar

			if(!boolIsInArray)
			{
				return SCRIPT_CONTINUE; // listener trying to deregister without being in the array

			}
			else
			{
				debugServerConsoleMsg(self, "objListeners.length = "+objListeners.length);
				int intI = 0;
				int intNewCount = 0; // we're seperating the count out just in case the target obj_id is in the array multiple times
				// theoretically that shouldnt happen, but just in case

				while (intI<objListeners.length)
				{
					debugServerConsoleMsg(self, "objListener is "+objListener.toString());
					debugServerConsoleMsg(self, "objListeners ["+intI+"] is "+objListeners[intI].toString());
					if(!(objListeners[intI] ==objListener))
					{
						// copy it into the new listeners array
						objNewListeners[intNewCount] = objListeners[intI];
						intNewCount = intNewCount+1;

					}
					// otherwise do nothing


					intI = intI+1;
				}

				if(objNewListeners.length > 0) {

					setObjVar(self, "objListeners", objNewListeners);

				} else {

					if(hasObjVar(self, "objListeners")) {

						removeObjVar(self, "objListeners");
					}
				}

			}
		}
		else if(boolIsInArray)
		{
			removeObjVar(self, "objListeners"); // objListener is the only array element. Remove it


		}



	}

	return SCRIPT_CONTINUE;


}

