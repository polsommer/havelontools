include library.chat;
inherits systems.missions.base.mission_dynamic_base;


trigger OnInitialize ()
{
	if (!hasScript (self, "systems.missions.base.mission_cleanup_tracker"))
	{
		attachScript (self, "systems.missions.base.mission_cleanup_tracker");
	}
	return SCRIPT_CONTINUE;
}

messageHandler OnStartMission()
{

	obj_id objMissionData = getMissionData(self);

	location locSpawnLocation = getMissionStartLocation(objMissionData);


	if(!hasObjVar(objMissionData, "intTargetPickedUp"))
	{
		setupSpawn(self, locSpawnLocation);	// setup the trigger spawn volumes for target creation. In this case its the escortee
		updateMissionWaypoint(self, locSpawnLocation);

	}
	else
	{
		// creator is the npc to pickup and stuff.

		obj_id objMissionCreator = getObjIdObjVar(self, "objOwner");
		dictionary dctParams = new dictionary();
		dctParams.put("objMission", self);

		messageTo(objMissionCreator, "escort_Accepted", dctParams,  0, true);


	}



	return SCRIPT_CONTINUE;


}
messageHandler abortMission()
{
	sendEscortIncomplete(self);
	return SCRIPT_CONTINUE;



}

messageHandler escort_Pickup()
{
	// change waypoints

	obj_id objMissionData = getMissionData(self);

	location locDeliverLocation = getMissionEndLocation(objMissionData);

	updateMissionWaypoint(self, locDeliverLocation);


	return SCRIPT_CONTINUE;
}


messageHandler escortIncomplete()
{
	obj_id objPlayer = getMissionHolder(self);

	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "incomplete");
	sendSystemMessage(objPlayer, strMessage);

	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler escortFailure()
{

	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "failed");
	sendSystemMessage(objPlayer, strMessage);


	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler escortSuccess()
{
	if(!hasObjVar(self, "intCompleted"))
	{
		setObjVar(self, "intCompleted", 1);

		obj_id objPlayer = getMissionHolder(self);
		obj_id objEscortTarget = getObjIdObjVar(self, "objEscortTarget");
		if(!hasObjVar(self, "intMissionComplete"))
		{
			obj_id objMissionData = getMissionData(self);
			setObjVar(self, "intMissionComplete", 1);
			obj_id objEscorter = getObjIdObjVar(self, "objEscorter");

			string_id strResponse = getNPCEscortDropoffId(objMissionData);
			chat.chat(objEscortTarget, strResponse);
			return SCRIPT_CONTINUE;

		}


		playMusic(objPlayer, "sound/music_mission_complete.snd");
		messageTo(objEscortTarget, "destroySelf", null, 600, true);



		deliverReward(self);
		endMission(self);
	}
	return SCRIPT_CONTINUE;

}



messageHandler OnEndMission()
{

	return SCRIPT_CONTINUE;


}

messageHandler onArrivedAtLocation()
{
// generic onArrivedAtLocation messagehandler for mission objects. Triggered by mission_dynamic_player.
	obj_id objPlayer = getMissionHolder(self);
	dictionary dctParams = new dictionary();

	dctParams.put("objMission", self);

	messageTo(objPlayer, "escort_Arrival", dctParams, 0, true);



	return SCRIPT_CONTINUE;
}
