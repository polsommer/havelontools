// -----------------------------------------------------------------------
// Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
// All Rights Reserved
// -----------------------------------------------------------------------
// $File: //depot/swg/current/dsrc/sku.0/sys.server/plt.shared/loc.shared/compiled/game/script/systems.missions/dynamic/mission_escort_destination.script $
// $Change: 16929 $
// $Author: drubenfield $
// $Revision: #11 $

include library.utils;

inherits systems.missions.base.mission_dynamic_base;

trigger OnInitialize ()
{
	if (!hasScript (self, "systems.missions.base.mission_cleanup_tracker"))
	{
		attachScript (self, "systems.missions.base.mission_cleanup_tracker");
	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{


	return SCRIPT_CONTINUE;


}

messageHandler onArrivedAtLocation()
{
	obj_id objPlayer = getMissionHolder(self);
	debugServerConsoleMsg(self, "gotArrivedMessage");
	if(!hasObjVar(self, "intTargetCreated"))
	{

		dictionary dctParams = new dictionary();

		dctParams.put("objMission", self);
		messageTo(objPlayer, "recon_Arrival", dctParams, 0, true);
	}
	else
	{
		if(hasObjVar(self, "intTerminal"))
		{
			sendReconSuccess(self);
			return SCRIPT_CONTINUE;


		}
		setObjVar(self, "intMissionComplete", 1);

		string_id strSpam = new string_id("mission/mission_generic", "recon_return");

		sendSystemMessage(objPlayer, strSpam);
		obj_id objMissionData = getMissionData(self);
		location locCreatorLocation = getLocationObjVar(objMissionData, "locCreatorLocation");

		updateMissionWaypoint(self, locCreatorLocation);


	}



	return SCRIPT_CONTINUE;
}
messageHandler abortMission()
{

	sendReconIncomplete(self);
	return SCRIPT_CONTINUE;



}

messageHandler OnStartMission()
{




	string strContext;
	obj_id objMissionData = getMissionData(self);
	debugServerConsoleMsg(self, "objMissionData is "+objMissionData);
	obj_id objPlayer = getMissionHolder(self);

	int intStringId = getIntObjVar(objMissionData, "intStringId");


	setupSpawn(self, getMissionStartLocation(objMissionData));




	location locSpawnLocation = getMissionStartLocation(objMissionData);
	if(locSpawnLocation==null)
	{

		debugServerConsoleMsg(self, "locSpawnLocaiton is NULL");
		return SCRIPT_CONTINUE;



	}
	updateMissionWaypoint(self, locSpawnLocation);
	activateMissionWaypoint(self);
	dictionary dctParams = new dictionary();
	//messageTo(self, "reconIncomplete", dctParams, intMissionExpirationTime, true);

	return SCRIPT_CONTINUE;


}



messageHandler reconIncomplete()
{
	obj_id objPlayer = getMissionHolder(self);
	string strTitleString = MISSION_INCOMPLETE_PERSISTENT_MESSAGE;
	obj_id objMissionData = getMissionData(self);
	int intStringId = getIntObjVar(objMissionData, "intStringId");
	string strMessageString = "m"+intStringId+"d"; // description
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "incomplete");
	sendSystemMessage(objPlayer, strMessage);





	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler reconFailure()
{

	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "failed");
	sendSystemMessage(objPlayer, strMessage);

	string strTitleString = MISSION_FAILURE_PERSISTENT_MESSAGE;

	obj_id objMissionData = getMissionData(self);
	int intStringId = getIntObjVar(objMissionData, "intStringId");
	string strMessageString = "m"+intStringId+"d"; // description




	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler reconSuccess()
{
	if(!hasObjVar(self, "intFinished"))
	{
		setObjVar(self, "intFinished", 1);
		obj_id objMissionData = getMissionData(self);
		obj_id objPlayer = getMissionHolder(self);
		deliverReward(self);
		playMusic(objPlayer, "sound/music_mission_complete.snd");
		endMission(self);
	}
	return SCRIPT_CONTINUE;

}


messageHandler OnEndMission()
{
	debugServerConsoleMsg(self, "Ending mission");
	// cleanup goes here
	cleanupObjects(self);
	cleanupLocationTargets(self);
	debugServerConsoleMsg(self, "cleaned up locationt argets, getting objwaypoint objvars");

	return SCRIPT_CONTINUE;


}
