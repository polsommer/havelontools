include library.ai_lib;
inherits systems.missions.base.mission_dynamic_base;


trigger OnAttach()
{
	
	ai_lib.setDefaultCalmBehavior( self, ai_lib.BEHAVIOR_SENTINEL );
	messageTo (self, "pathRandom", null, rand(1,5), false);
	return SCRIPT_CONTINUE;
}

trigger OnAddedToWorld()
{

	return SCRIPT_CONTINUE;

}

trigger OnIncapacitated(obj_id objKiller)
{
	
	setObjVar(self, "intKilled", 1); // so we can trigger the success event correctly
	obj_id objDestroyer = getObjIdObjVar(self, "objDestroyer");
	sendAssassinSuccess(getObjIdObjVar(self, "objMission"));
	setObjVar(self, "intKilled", 1);
	return SCRIPT_CONTINUE;

}


messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}

messageHandler pathRandom()
{
	string waypoint = pickDestination();
	pathTo (self, waypoint);
	return SCRIPT_OVERRIDE;
}

trigger OnLoiterMoving()
{
	stop( self );
	messageTo (self, "pathRandom", null, 2, false);
	return SCRIPT_CONTINUE;
}

string pickDestination()
{
	string waypoint = "exit";
	int whichWay = rand (1, 6);
	switch (whichWay)
	{
		case 1:
			waypoint = "city1";
			break;
		case 2:
			waypoint = "city2";
			break;
		case 3:
			waypoint = "city3";
			break;
		case 4:
			waypoint = "city4";
			break;
		case 5:
			waypoint = "city5";
			break;
		case 6:
			waypoint = "city6";
			break;

	}
	return waypoint;
}


messageHandler resumeDefaultCalmBehavior()
{
	messageTo (self, "pathRandom", null, rand(30,60), false);
	return SCRIPT_OVERRIDE;
}

trigger OnMovePathComplete()
{
	messageTo (self, "pathRandom", null, rand(30,60), false);
	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{
	messageTo (self, "pathRandom", null, rand(30,60), false);
	return SCRIPT_CONTINUE;
}


