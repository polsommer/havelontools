// -----------------------------------------------------------------------
// Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
// All Rights Reserved
// -----------------------------------------------------------------------




inherits systems.missions.base.mission_dynamic_base;


void playerDestructionIncomplete(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS INCOMPLETE!");
	messageTo(objMission, "destructionIncomplete", dctParams, 0, true);  // spawner timer has started	
	return;
	
}


void playerDestructionFail(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS FAILED!");
	messageTo(objMission, "destructionFail", dctParams, 0, true);  // spawner timer has started	
	return;
	
}

void playerDestructionSuccess(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	//debugSpeakMsg(objPlayer, "MISSION IS SUCCESFUL!"); 
	
	
	messageTo(objMission, "destructionSuccess", dctParams, 0, true);  // spawner timer has started	
	return;
	


}

void playerDeliverSuccess(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS SUCCESFUL!"); 
	messageTo(objMission, "deliverSuccess", dctParams, 0, true);  // spawner timer has started	
	return;



}


void playerDeliverFail(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS FAILED!!"); 
	messageTo(objMission, "deliverFail", dctParams, 0, true);  // spawner timer has started	
	return;



}


void playerDeliverIncomplete(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS Incomplete!"); 
	messageTo(objMission, "deliverIncomplete", dctParams, 0, true);  // spawner timer has started	
	return;



}

void playerFetchSuccess(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS SUCCESFUL!"); 
	messageTo(objMission, "fetchSuccess", dctParams, 0, true);  // spawner timer has started	
	return;



}


void playerFetchFail(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS FAILED!!"); 
	messageTo(objMission, "fetchFail", dctParams, 0, true);  // spawner timer has started	
	return;



}


void playerFetchIncomplete(obj_id objMission)
{
	dictionary dctParams = new dictionary();
	
	obj_id objPlayer = getMissionHolder(objMission);
	debugSpeakMsg(objPlayer, "MISSION IS Incomplete!"); 
	messageTo(objMission, "fetchIncomplete", dctParams, 0, true);  // spawner timer has started	
	return;



}


void returnAllCredits(obj_id objMission)
{
	// sends all rewards and bonds back to where they belong
/*
	int intBond;
	int intReward;
	
	obj_id objMissionData = getMissionData(objMission);
	obj_id objMissionCreator = getMissionCreator(objMissionData);
	dictionary dctParams = new dictionary();
	intReward = getIntObjVar(objMission, "intReward");
	
	transferBankCreditsTo(objMission, objMissionCreator, intReward, "testSuccess", "testFail", dctParams); // send the reward back to where it goes
	
	debugSpeakMsg(objMissionCreator, "I received my "+intReward+" Reward back from an incomplete mission");
	

	if(hasObjVar(objMission, "intBond"))
	{
	
		obj_id objPlayer = getMissionHolder(objMission);
		intBond = getIntObjVar(objMission, "intBond");
		transferBankCreditsTo(objMission, objPlayer, intBond, "testSuccess", "testFail", dctParams);
		debugSpeakMsg(objPlayer, "I received my "+intBond+" Bond back from an incomplete mission");
	}
	*/
	return;
	
}




void setupDeliverObjects(obj_id objMission)
{
	// depracated
	return ;

}


void cleanupDeliverObjects(obj_id objMission)
{
	// depracated
	

	return;

}




// hack

