include library.ai_lib;
include library.chat;
include library.factions;
include library.utils;
include library.anims;
include library.missions;

inherits systems.missions.base.mission_dynamic_base;


trigger OnAttach()
{
	attachScript(self, "npc.converse.npc_converse_menu");
	debugServerConsoleMsg(self, "deliver dropoff script attached");


	factions.setFaction(self, "Unattackable");

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	//LOG("mission", "Dropoff npc is at "+getLocation(self));
	return SCRIPT_CONTINUE;


}

trigger OnInitialize ()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}


trigger OnRemovingFromWorld()
{
	// make sure to notify the mission object so we can reset the spawn event!
	// we only reset the spawn event if mission state is STATE_FETCH_PICKUP!

	if(!hasObjVar(self, "intKilled"))
	{
		obj_id objMission = getObjIdObjVar(self, "objMission");
		int intState = getIntObjVar(objMission, "intState");
		if(intState==missions.STATE_DYNAMIC_PICKUP)
		{
			setupSpawn(getObjIdObjVar(self, "objMission"), getLocation(self)); // tell my master that i'm gone and the respawn event has to be reset
		}

		//destroyObject(self); // HACK WILL BE REMOVED AFTER WE GET NONPERSISTANCE FLAG!
	}

	return SCRIPT_CONTINUE;




}





trigger OnStartNpcConversation (obj_id speaker)
{

	obj_id objMission = getObjIdObjVar(self, "objMission");

	obj_id objMissionHolder = getObjIdObjVar(self, "objPlayer");

	int intState = getIntObjVar(objMission, "intState");

	obj_id objPlayer = getObjIdObjVar(self, "objPlayer");
	if(speaker!=objMissionHolder)
	{
		doIncorrectPlayerBlurb(self);
		return SCRIPT_CONTINUE;

	}
	if (intState==missions.STATE_DYNAMIC_PICKUP) // good state, we can give the items
	{


		// we're good to go.. let's make all of our items in the player's inventory, and grant the schematic..
		grantMissionSchematic(speaker, objMission);

		obj_id objMissionData = getMissionData(objMission);
		string[] strComponents = getStringArrayObjVar(objMissionData, "strComponents");
		int intI =0;

		obj_id objInventory = utils.getInventoryContainer(speaker);
		while(intI<strComponents.length)
		{
			obj_id objComponent = createObjectOverloaded(strComponents[intI], objInventory);
			setCraftedId(objComponent, objComponent);
			intI = intI+1;
		}

		setObjVar(objMission, "intState", missions.STATE_DYNAMIC_DROPOFF);
		int intStringId = getIntObjVar(objMissionData, "intStringId");
		//string strMessageString = "m"+intStringId+"d"; // description
		//string strTitleString = "m"+intStringId+"t";
		string strIdFileName = getStringObjVar(objMissionData, "strIdFileName");

		string_id strConvo = new string_id(strIdFileName, "m"+intStringId+"p");
		setObjVar(objMissionData, "strIdFileName", strIdFileName);

		//LOG("mission_spam", "strConvo is "+strConvo);
		string strSpeakString = getString(strConvo);
		chat.chat(self, strSpeakString);
		string_id strSpam = new string_id("mission/mission_generic", "crafting_components_received");
		sendSystemMessage(speaker, strSpam);
		//npcStartConversation (speaker, self, null, strConvo, null);
/*
		string_id strTitleId = new string_id("mission/mission_generic", "deliver_received_data");
		string_id strMissionTitleId = new string_id(strIdFileName, "m"+intStringId+"t"); // mission name id
		string strMissionTitle = getString(strMissionTitleId); // mission name string
		string strSystemMessage = getString(strTitleId);
		strSystemMessage = strSystemMessage + " " +strMissionTitle;
		sendSystemMessageTestingOnly(speaker, strSystemMessage);
		*/

		dictionary dctParams = new dictionary();
		messageTo(objMission, "pickup_event", dctParams, 0, true);


		location locDropoffLocation = getMissionEndLocation(objMissionData);
		//debugSpeakMsg(self, "Take this item to "+locDropoffLocation.toString());


		debugServerConsoleMsg(self, "objMissionData for npc pickup is "+objMissionData);
		setupSpawn(objMission, locDropoffLocation);
		updateMissionWaypoint(objMission, locDropoffLocation);

		//LOG("mission", "objMission is "+objMission);
		//LOG("mission", "LocDropoffLocation = "+locDropoffLocation.toString());


		messageTo(self, "destroySelf", null, 120, true);

	}
	else
	{
		string_id message = new string_id ("mission/mission_generic", "crafting_already_picked_up"); //
		chat.chat(self, message);
		doAnimationAction(self, anims.PLAYER_POINT_FORWARD);
		//debugServerConsoleMsg(self, "intState was not fetch_pickup");
		return SCRIPT_CONTINUE;


	}
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}
