// -----------------------------------------------------------------------
// Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
// All Rights Reserved
// -----------------------------------------------------------------------
// $File: //depot/swg/current/dsrc/sku.0/sys.server/plt.shared/loc.shared/compiled/game/script/systems.missions/dynamic/mission_escort_destination.script $
// $Change: 16929 $
// $Author: drubenfield $
// $Revision: #11 $

include library.utils;

inherits systems.missions.base.mission_dynamic_base;

trigger OnInitialize ()
{
	if (!hasScript (self, "systems.missions.base.mission_cleanup_tracker"))
	{
		attachScript (self, "systems.missions.base.mission_cleanup_tracker");
	}
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{


	return SCRIPT_CONTINUE;


}

messageHandler onArrivedAtLocation()
{
	obj_id objPlayer = getMissionHolder(self);
	dictionary dctParams = new dictionary();

	dctParams.put("objMission", self);
	messageTo(objPlayer, "destruction_Arrival", dctParams, 0, true);



	return SCRIPT_CONTINUE;
}
messageHandler abortMission()
{

	LOG("mission", "ABORT MISSION RECEIVED!");
	sendDestructionIncomplete(self);
	return SCRIPT_CONTINUE;



}

messageHandler OnStartMission()
{


	LOG("mission", "Received start mission message");

	string strContext;
	obj_id objMissionData = getMissionData(self);
	LOG("mission", "objMissionData is "+objMissionData);
	obj_id objPlayer = getMissionHolder(self);






	//debugSpeakMsg(objPlayer, "Received start mission message, starting the mission");
	LOG("mission", "Right above AttachScript");

	LOG("mission", "Right above setupDestructionMissionObject");

	setupDestructionMissionObject(self);


	LOG("mission", "Right above setupSpawn");


	setupSpawn(self, getMissionStartLocation(objMissionData));
	//debugSpeakMsg(objPlayer, "Destruction Mission Started");



	location locSpawnLocation = getMissionStartLocation(objMissionData);
	if(locSpawnLocation==null)
	{

		LOG("mission", "locSpawnLocaiton is NULL");
		return SCRIPT_CONTINUE;



	}

	updateMissionWaypoint(self, locSpawnLocation);
	//setWaypointVisible(objTargetWaypoint, true);
	//setWaypointActive(objTargetWaypoint, true);

	// setup the callback for expiration



	dictionary dctParams = new dictionary();
	//messageTo(self, "destructionIncomplete", dctParams, intMissionExpirationTime, true);

	return SCRIPT_CONTINUE;


}



messageHandler destructionIncomplete()
{
	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "incomplete");
	sendSystemMessage(objPlayer, strMessage);
	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler destructionFailure()
{

	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "failed");
	sendSystemMessage(objPlayer, strMessage);

	string strTitleString = MISSION_FAILURE_PERSISTENT_MESSAGE;

	obj_id objMissionData = getMissionData(self);
	int intStringId = getIntObjVar(objMissionData, "intStringId");
	string strMessageString = "m"+intStringId+"d"; // description


//	sendMissionPersistentMessage(self, "fail");

	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler destructionSuccess()
{
	if(!hasObjVar(self, "intFinished"))
	{


		obj_id objMissionData = getMissionData(self);
		if(hasObjVar(objMissionData, "locCreatorLocation"))
		{
			setObjVar(self, "intNPC", 1); // npc mission
			setObjVar(self, "intMissionComplete", 1);
			location locCreatorLocation = getLocationObjVar(objMissionData, "locCreatorLocation");
			removeObjVar(objMissionData, "locCreatorLocation");
			updateMissionWaypoint(self, locCreatorLocation);
			string_id strSpam = new string_id("mission/mission_generic", "destroy_return");
			sendSystemMessage(getMissionHolder(self), strSpam);

			return SCRIPT_CONTINUE;

		}
		setObjVar(self, "intFinished", 1);
		if(!hasObjVar(self, "intNPC"))
		{
	//		sendMissionPersistentMessage(self, "success");
		}
		deliverReward(self);


		obj_id objPlayer = getMissionHolder(self);

		playMusic(objPlayer, "sound/music_mission_complete.snd");

	}
	endMission(self);
	return SCRIPT_CONTINUE;

}


messageHandler OnEndMission()
{

	// cleanup goes here
	cleanupLocationTargets(self);
	cleanupObjects(self);


	return SCRIPT_CONTINUE;


}

