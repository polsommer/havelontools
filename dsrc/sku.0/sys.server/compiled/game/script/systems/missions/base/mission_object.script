include library.utils;
inherits systems.missions.base.mission_dynamic_base;

trigger OnAttach()
{
	LOG("mission_spam", "Mission data is live, obj_id is "+self);
	return SCRIPT_CONTINUE;
}


trigger OnInitialize()
{
	if(hasObjVar(self, "isPlayerCreated"))
	{
		removeObjVar(self, "isPlayerCreated");
	}
	return SCRIPT_CONTINUE;
}


trigger OnDestroy()
{
	obj_id player = getMissionHolder(self);
	if(player != null)
	{
		dictionary msgData = new dictionary();
		msgData.put("missionId", self);
		messageTo(player, "missionObjectDestroyed", msgData, 0, false);
	}
	return SCRIPT_CONTINUE;
}


trigger OnGrantMission(obj_id target)
{
	debugServerConsoleMsg(self, "Assigning mission to " + target.toString());
	assignMission(self, target);

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if ( player == null || names == null || attribs == null || names.length != attribs.length )
		return SCRIPT_CONTINUE;

	int i = getFirstFreeIndex(names);

	string target = getMissionTargetName(self);
	if ( target != null && target.length() > 0 )
	{
		names[i] = "@" + new string_id("ui_mission", "attribs_target");
		attribs[i] = target;
		++i;
	}

	names[i] = "@" + new string_id("ui_mission", "attribs_creator");
	attribs[i] = getMissionCreator(self);
	++i;
	names[i] = "@" + new string_id("ui_mission", "attribs_reward");
	attribs[i] = "" + getMissionReward(self);
	++i;

	int difficulty = getMissionDifficulty(self);
	if ( difficulty > 0 )
	{
		names[i] = "@" + new string_id("ui_mission", "attribs_difficulty");
		attribs[i] = "" + difficulty;
		++i;
	}

	return SCRIPT_CONTINUE;
}

messageHandler OnMissionAssigned()
{
	return SCRIPT_CONTINUE;
}


messageHandler objectCreated()
{
	LOG("missions", "Got message");
	obj_id objObject = params.getObjId("objObject");
	resizeable obj_id[] objObjects = getResizeableObjIdArrayObjVar(self, "objObjects");
	objObjects = utils.addElement(objObjects, objObject);

	if(objObjects != null && objObjects.length > 0) {

		setObjVar(self, "objObjects", objObjects);
	}

	return SCRIPT_CONTINUE;
}
