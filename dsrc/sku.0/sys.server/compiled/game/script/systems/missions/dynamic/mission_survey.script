include library.utils;

inherits systems.missions.base.mission_dynamic_base;

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if ( player == null || names == null || attribs == null || names.length != attribs.length )
		return SCRIPT_CONTINUE;

	int i = getFirstFreeIndex(names);

	string resource = getStringObjVar(self, OBJVAR_SURVEY_MISSION_RESOURCE);

	names[i] = "@" + new string_id("ui_mission", "attribs_resource");
	attribs[i] = "@" + new string_id(SID_SURVEY_RESOURCE_NAMES_TABLE, resource);
	++i;
	names[i] = "@" + new string_id("ui_mission", "attribs_efficiency");
	attribs[i] = "" + getIntObjVar(self, OBJVAR_SURVEY_MISSION_EFFECIENCY);
	++i;

	return SCRIPT_CONTINUE;
}

messageHandler abortMission()
{
	sendSurveyIncomplete(self);
	return SCRIPT_CONTINUE;
}

messageHandler OnStartMission()
{
// holocron stuff
	setupInvisibleWaypoint(self);
	obj_id objPlayer = getMissionHolder(self);
	dictionary dctParams = new dictionary();
	dctParams.put("eventName","SurveyMissionGranted");
	messageTo(objPlayer, "handleHolocronEvent", dctParams, 0, false);
	string_id strSpam = new string_id("mission/mission_generic", "survey_start");
	sendSystemMessage(objPlayer, strSpam);

	return SCRIPT_CONTINUE;
}

messageHandler surveySuccess()
{
	if(!hasObjVar(self, "intCompleted"))
	{
		setObjVar(self, "intCompleted", 1);

		obj_id objPlayer = getMissionHolder(self);
		playMusic(objPlayer, "sound/music_mission_complete.snd");

		deliverReward(self);
		endMission(self);
	}

	return SCRIPT_CONTINUE;
}

messageHandler surveyFail()
{
//	sendMissionPersistentMessage(self, "fail");
	endMission(self);
	return SCRIPT_CONTINUE;
}

messageHandler surveyIncomplete()
{
//	sendMissionPersistentMessage(self, "incomplete");
	endMission(self);
	return SCRIPT_CONTINUE;
}


messageHandler OnEndMission()
{
	return SCRIPT_CONTINUE;
}

messageHandler surveyEvent()
{
	return SCRIPT_CONTINUE;
}


