include library.ai_lib;
include library.anims;
include library.factions;
include library.chat;
include library.utils;
// what kind of informant are we goin
inherits systems.missions.base.mission_dynamic_base;


trigger OnAddedToWorld()
{
	// register with planet object in scriptvars.
	// bleh

	// if we die, replace ourselves in the array

	//registerBountyInformant(self);

	// Calling setWantSawAttackTriggers from OnAddedToWorld is causing script exceptions (invalid object).
	// I don't believe that this function is necessary in this trigger.
	// This function call in the OnAttach trigger should take care of it.
	//
	// if(isIdValid(self)) {
	//
	//	setWantSawAttackTriggers(self, false);
	// }

	return SCRIPT_CONTINUE;

}


trigger OnInitialize()
{
	//Removing SpyNets from World - JAB 06/14/06
	messageTo(self, "removeInformant", null, 3.0f, false);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	setWantSawAttackTriggers(self, false);


	// register with master spawner object
	// something on par with <city>
	//setPersistent(self);
	persistObject(self);
	attachScript(self, "npc.converse.npc_converse_menu");
	factions.setFaction(self, "Unattackable");

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	return SCRIPT_CONTINUE;


}




trigger OnStartNpcConversation (obj_id speaker)
{

	if(!hasSkill(speaker, "class_bountyhunter_phase1_novice"))
	{
		doAnimationAction(self, anims.PLAYER_RUB_CHIN_THOUGHTFUL);
		string_id strResponse = new string_id("mission/mission_generic", "informant_not_bounty_hunter");
		chat.chat(self, strResponse);

		return SCRIPT_CONTINUE;
	}



	obj_id objMission= getBountyMission(speaker);
	if(objMission==null)
	{

		doAnimationAction(self, anims.PLAYER_RUB_CHIN_THOUGHTFUL);
		string_id strResponse = new string_id("mission/mission_generic", "informant_no_bounty_mission");
		chat.chat(self, strResponse);


		return SCRIPT_CONTINUE;

	}





	obj_id objMissionHolder = getMissionHolder(objMission);

	obj_id objMissionData = getMissionData(objMission);
	int intInformantLevel = getIntObjVar(objMissionData, "intInformantLevel");

	dictionary dctParams = new dictionary();

	int intState = getIntObjVar(objMission, "intState");

	if(intState!=STATE_BOUNTY_INFORMANT)
	{


		doIncorrectPlayerBlurb(self);
		return SCRIPT_CONTINUE;

	}
	if(!hasObjVar(objMissionData, "intPlayerMission"))
	{


		int intIndex= rand(1, 5);
		int intMyDifficulty = getIntObjVar(self, "intInformantLevel");

		if(intInformantLevel!=intMyDifficulty)
		{
			if(intMyDifficulty>intInformantLevel)
			{
				// i'm the wrong informant for you!
				string_id strResponse = new string_id("mission/mission_bounty_informant", "informant_find_easier");
				chat.chat(self, strResponse);
				return SCRIPT_CONTINUE;
			}
			else if(intMyDifficulty<intInformantLevel)
			{
				// i'm the wrong informant for you!
				string_id strResponse = new string_id("mission/mission_bounty_informant", "informant_find_harder");
				chat.chat(self, strResponse);
				return SCRIPT_CONTINUE;


			}


			return SCRIPT_CONTINUE;


		}


		if(intInformantLevel==INFORMANT_EASY)
		{
			string_id strResponse = new string_id("mission/mission_bounty_informant", "target_easy_"+intIndex);
			chat.chat(self, strResponse);
			updateMissionWaypoint(objMission, getLocationObjVar(objMission, "locSpawnLocation"));
			// now we setup the waypoint to the target
			strResponse = new string_id("mission/mission_bounty_informant", "target_location_received");
			sendSystemMessage(speaker, strResponse);
			setObjVar(objMission, "intState", STATE_BOUNTY_PROBE);
		}
		else if (intInformantLevel==INFORMANT_MEDIUM)
		{
			string_id strResponse = new string_id("mission/mission_bounty_informant", "target_medium_"+intIndex);
			chat.chat(self, strResponse);
			location locSpawnLocation = getMissionStartLocation(objMissionData);
			string strPlanet = locSpawnLocation.area;
			string strPlanetResponse = "target_hard_"+strPlanet+"_"+intIndex;
			strResponse= new string_id("mission/mission_bounty_informant", strPlanetResponse);
			strResponse = new string_id("mission/mission_bounty_informant", "target_biological_signature"); // needs prose package
			sendSystemMessage(speaker, strResponse);
			setObjVar(objMission, "intState", STATE_BOUNTY_PROBE);

			// Don't move the target for non-dynamic missions.
			if (hasObjVar(objMission, "intMissionDynamic"))
			{
				// flag the mission so it knows it should have a moveTarget loop going
				setObjVar(objMission, "movingTarget", 1);
				dctParams.put("moveTargetSequence", utils.getIntScriptVar(self, "moveTargetSequence"));
				messageTo(objMission, "moveTarget", dctParams, rand(30, 60), false);
			}

			// setup the waypoint

		}
		else if(intInformantLevel==INFORMANT_HARD)
		{
			string_id strResponse = new string_id("mission/mission_bounty_informant", "target_hard_"+intIndex);
			chat.chat(self, strResponse);
			strResponse = new string_id("mission/mission_bounty_informant", "target_biological_signature");
			sendSystemMessage(speaker, strResponse);
			setObjVar(objMission, "intState", STATE_BOUNTY_PROBE);

			// Don't move the target for non-dynamic missions.
			if (hasObjVar(objMission, "intMissionDynamic"))
			{
				// flag the mission so it knows it should have a moveTarget loop going
				setObjVar(objMission, "movingTarget", 1);
				dctParams.put("moveTargetSequence", utils.getIntScriptVar(self, "moveTargetSequence"));
				messageTo(objMission, "moveTarget", dctParams, rand(30, 60), false);
			}
			// now what planet.


		}
		else
		{



		}
	}
	else
	{

		// nada
	}



	return SCRIPT_CONTINUE;
}


messageHandler removeInformant ()
{
	if(isValidId(self) && !isPlayer(self))
		destroyObject(self);
	return SCRIPT_CONTINUE;
}



/*
trigger OnDestroy()
{
	obj_id objParent = getObjIdObjVar(self, "objParent");

	dictionary dctParams = new dictionary();
	messageTo(objParent, "remakeInformant", dctParams, 5, true);

	return SCRIPT_CONTINUE;

}
*/