include library.factions;
include library.force_rank;
include library.gcw;
include library.group;
include library.jedi;
include library.missions;
include library.money;
include library.prose;
include library.utils;
include library.xp;

const string MISSION_SUCCESS_PERSISTENT_MESSAGE = "success";
const string MISSION_FAILURE_PERSISTENT_MESSAGE = "failure";
const string MISSION_INCOMPLETE_PERSISTENT_MESSAGE = "incomplete";
const string MISSION_TIMED_OUT_PERSISTENT_MESSAGE = "timed_out";
const string GENERIC_MISSION_MESSAGE_STRING_FILE = "mission/mission_generic";


const int MAX_MISSIONS = 2;

const string BOUNTY_MISSION_LISTENERS = "mission.objBountyListeners";
const int BOUNTY_DIFFICULTY_BASIC = 1;
const int BOUNTY_DIFFICULTY_ADVANCED = 2;
const int BOUNTY_DIFFICULTY_EXPERT = 3;

const int BOUNTY_TRACK_SPEED = 120;// defaults
const int BOUNTY_FIND_SPEED = 100; // default
const int DROID_PROBOT = 1;
const int DROID_SEEKER = 2;

const int DROID_TRACK_TARGET = 1;
const int DROID_FIND_TARGET = 2;

const int FACTION_NONE = 0;

const float BOUNTY_REWARD_MODIFIER = 0.75f;

const int MISSION_SPAWN_TRIGGER_RANGE = 256; // how big is the spawn range to create destrcution targets

const int STATE_BOUNTY_INFORMANT = 0; // talk to the informants
const int STATE_BOUNTY_PROBE = 1; // use probe droids

const int INFORMANT_EASY = 1;
const int INFORMANT_MEDIUM = 2;
const int INFORMANT_HARD = 3;


const float SPAWN_OVERLOAD_DIFFICULTY_MODIFIER = .50f;

location findRandomLocation(location locCenter, int intVariance)
{
	int intMin;
	int intMax;

	intMin = 0-intVariance;
	intMax = 0+intVariance;

	locCenter.x = locCenter.x + rand(intMin, intMax);
	locCenter.z = locCenter.x + rand(intMin, intMax);
	return locCenter;
	// VIOLA!

}

obj_id getMissionData(obj_id objMission)
{
	return objMission;

}


void addListener(obj_id objListener, obj_id objTarget)
{
	// MOVED TO UTILS.
	return;


}
int getMissionBondAmount(obj_id objMission)
{
	if(hasObjVar(objMission, "intBond"))
	{
		int intBond = getIntObjVar(objMission, "intBond");
		return intBond;

	}
	return 0;

}


void removeListener(obj_id objListener, obj_id objTarget)
{
// MOVED TO UTILS.
	return;

}


void messageListeners(obj_id objOwner, string strMessageName, dictionary dctParams)
{


	return;



}

void deliverReward(obj_id objMission)
{


	obj_id objPlayer = getMissionHolder(objMission);
	obj_id objMissionData = getMissionData(objMission);
	//playerdifficulty is mission level
	int intPlayerDifficulty = getIntObjVar(objMissionData, "intPlayerDifficulty");

	obj_id objGroup = getGroupObject(objPlayer);
	string_id strMessage = new string_id();
	boolean boolGroup = false;
	if(isIdValid(objGroup))
	{
		boolGroup = true;
		strMessage = new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "group_success");


	}
	else
	{
		strMessage = new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "success");

	}


	dictionary dctParams = new dictionary();
	// we transfer the bond and the reward to the accepting player's bank account

	int intBond = getMissionBondAmount(objMissionData);
	if(intBond>0)
	{
		transferBankCreditsTo(objMissionData, objPlayer, intBond, "testSuccess", "testFail", dctParams);
		//debugSpeakMsg(objPlayer, "I got my "+intBond+" credit bond back");
		// transfer the bond back
	}
	
	int intReward = getMissionReward(objMissionData);

	//yay Jedi, add in extra bonus amount based on Jedi level
	int jediBonusReward = 0;
	if (hasObjVar(objMissionData, "jediBonusReward"))
	{
		jediBonusReward = getIntObjVar(objMissionData, "jediBonusReward");
		intReward = intReward + jediBonusReward;
		
		if  (jediBonusReward >= 0)
		{
			//sendSystemMessage(objPlayer, new string_id("mission/mission_generic", "bonus_reward"));
			string msg = utils.packStringId(new string_id("mission/mission_generic", "bonus_reward"));
			msg += " "+jediBonusReward;
			sendSystemMessage(objPlayer, msg, null);
		}
			
		else
			sendSystemMessage(objPlayer, new string_id("mission/mission_generic", "easy_reward"));
	}
	
	if(hasObjVar(objMissionData, "intIncomplete"))
	{
		intReward = intReward / 2; // do stuff here

	}
	int originalGroupSize = 0;
	if (hasObjVar(objMissionData, "originalGroupSize"))
	{
		originalGroupSize = getIntObjVar(objMissionData, "originalGroupSize");
	}
	
	string strMissionType = getMissionType(objMissionData);
	if(strMissionType=="bounty")
	{
		//increase BH kill counter by one
		missions.increaseBountyJediKillTracking(objPlayer, missions.WINS);
		
		obj_id objTarget = getObjIdObjVar(objMissionData, "objTarget");
		if (isIdValid(objTarget) && exists(objTarget) && isPlayer(objTarget) && isJedi(objTarget))
		{
			xp.grant(objTarget, xp.JEDI_GENERAL, (intReward * -2));
		}

		if(isPlayer(objTarget) && isJedi(objTarget))
		{
			//xp.grant(objPlayer, xp.BOUNTYHUNTER, intReward/30);

			boolean isForceRanked = force_rank.isForceRanked(objTarget);
			if((isForceRanked && intReward > jedi.MIN_FR_JEDI_BOUNTY) || (!isForceRanked && intReward > jedi.MIN_NON_FR_JEDI_BOUNTY))
			{
				messageTo(objTarget, "updateBHKillData", dctParams, 0, true);
			}
		}
		else
		{
			//xp.grant(objPlayer, xp.BOUNTYHUNTER, intReward/50);
		}
	}

	//LOG("mission_spam", "delivering "+intReward+" to "+objPlayer);
	//LOG("mission_spam", "My Bank Balance is "+ getBankBalance(objMissionData));
	// check if in group here
	// getgroupobject

	if ( hasObjVar(objMission, "hq") )
	{
		obj_id objHq = getObjIdObjVar(objMission, "hq");
		if ( isIdValid(objHq) )
		{
			int hqReward = Math.round(intReward/20f);
			transferBankCreditsFromNamedAccount(money.ACCT_MISSION_DYNAMIC, objHq, hqReward, "noHandler", "noHandler",new dictionary());
		}
	}

	//solo rewards
	if(!boolGroup)
	{
		//trial players can only have a total of 50000 credits, so reduce the rewards accordingly.
		intReward = group.getSafeDifference(objPlayer, intReward);

		if (originalGroupSize > 0 && !strMissionType.equals("destroy"))
		{
			intReward = intReward / originalGroupSize;
		}
		
		//scale solo rewards based on Daily numbers
		float divisor = missions.alterMissionPayoutDivisorDaily(objPlayer);
		intReward = intReward / (int)divisor;
		
		//lets do some xp rewards for solo
		if(missions.canEarnDailyMissionXp(objPlayer) && missions.isDestroyMission(objMissionData))
			xp.grantMissionXp(objPlayer, intPlayerDifficulty);
		
		//LOG("NewMission", "soloPayout: " +intReward);
		
		transferBankCreditsFromNamedAccount(money.ACCT_MISSION_DYNAMIC ,objPlayer, intReward, "testSuccess", "testFail",dctParams);
		utils.moneyInMetric(objPlayer, money.ACCT_MISSION_DYNAMIC, intReward);
		prose_package successProse = prose.getPackage(new string_id("mission/mission_generic","success_w_amount"), intReward);
		sendSystemMessageProse(objPlayer, successProse);
		
		//increment daily count for solo player
		missions.incrementDaily(objPlayer);
		
		
	}
	else
	{
		int currentGroupSize = getPCGroupSize(objGroup);
		if (originalGroupSize < 0)
			originalGroupSize = 0;
		int missionDivisor = originalGroupSize;
		//LOG("NewMission", "missionDivisorOrig: " + missionDivisor);
	
		strMessage = new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "group_success");
		
		if (!strMissionType.equals("destroy"))
		{
			if (currentGroupSize > originalGroupSize)
			{
				missionDivisor = currentGroupSize;
				strMessage = new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "group_expanded");
			}
		}
		else
		{
			
			missionDivisor = 1;
			//level of mission, should be int 1-92
			dctParams.put("intPlayerDifficulty", intPlayerDifficulty);
			
			//lets do some xp rewards on a destroy mission for groups if they are allowed to
			group.distributeMissionXpToGroup(objPlayer, group.SPLIT_RANGE, objMissionData);
			
			//LOG("NewMission", "intPlayerDifficulty: " + intPlayerDifficulty);
			//LOG("NewMission", "missionDivisorElse: " + missionDivisor);
		}
		//("NewMission", "missionDivisorNew: " + missionDivisor);
		
		//increment the group members daily count happens in the payout code
		group.systemPayoutToGroupInternal(money.ACCT_MISSION_DYNAMIC, objPlayer, intReward, null, strMessage, "test", (float)missionDivisor, dctParams, objMissionData);
	}

	string strTitleString = MISSION_SUCCESS_PERSISTENT_MESSAGE; // EMAIL STUFF
	int intStringId = getIntObjVar(objMissionData, "intStringId");
	string strMessageString = "m"+intStringId+"d"; // description

	if(hasObjVar(objMissionData, "strFaction"))
	{
		string strFaction = getStringObjVar(objMissionData, "strFaction");
		int intFactionReward = getIntObjVar(objMissionData, "intFactionReward");
		int intGCWPoints = getIntObjVar(objMissionData, "intGCWPoints");

		if(hasObjVar(objMission, "hq") )
		{
			intFactionReward = Math.round(intFactionReward*1.05f);
		}

		if(!boolGroup)
		{
			factions.awardFactionStanding(objPlayer, strFaction, intFactionReward);

			if((factions.isImperial(objPlayer) || factions.isRebel(objPlayer)) && !factions.isOnLeave(objPlayer) && intGCWPoints > 0)
			{
				gcw._grantGcwPoints(null, objPlayer, intGCWPoints, false, gcw.GCW_POINT_TYPE_GROUND_PVE, "mission terminal");
			}
		}
		else
		{

			factions.awardFactionStanding(objPlayer, strFaction, intFactionReward);

			if(strMissionType != "deliver")
			{
				obj_id[] objGroupMembers = getGroupMemberIds(objGroup);

				int intNewReward = 0;
				if(objGroupMembers.length<1)
				{
					LOG("DESIGNER_FATAL", "Group object "+objGroup+" with player "+objPlayer+" is a zero length group!!!");
				}
				else
				{

					intNewReward = intFactionReward/objGroupMembers.length;
				}


				if(intNewReward>0)
				{
					location locOwnerLocation = getLocation(objPlayer);

					if(locOwnerLocation != null) {

						string strOwnerPlanet = locOwnerLocation.area;
						float fltDistance = 0;

						for(int intI = 0; intI < objGroupMembers.length; intI++)
						{
							location locMemberLocation = getLocation(objGroupMembers[intI]);

							if(locMemberLocation == null)
							{
								fltDistance = 100000;
							}
							else
							{
								string strMemberPlanet = locMemberLocation.area;

								if(strMemberPlanet != strOwnerPlanet)
								{
									fltDistance = 100000;
								}
								else
								{
									fltDistance = getDistance(objPlayer, objGroupMembers[intI]);
								}
							}

							if(fltDistance < 80 && objGroupMembers[intI] != objPlayer)
							{
								factions.awardFactionStanding(objGroupMembers[intI], strFaction, intNewReward);

								if(intGCWPoints > 0)
								{
									gcw._grantGcwPoints(null, objGroupMembers[intI], intGCWPoints, false, gcw.GCW_POINT_TYPE_GROUND_PVE, "mission terminal");
								}
							}
						}
					}
				}
			}
		}
	}

	return;
}

obj_id getValidPayTarget(obj_id player, int money)
{

	resizeable obj_id[] targets = group.getPCMembersInRange(player, 200);
	obj_id mostMoney = player;

	if (group.getSafeDifference(player, money) == money)
	{
		//If the player can hold the full ammount return them.
		return player;
	}

	for (int i=0;i<targets.length;i++)
	{
		if (!utils.isFreeTrial(targets[i]) && !hasScript(targets[i], "ai.pet"))
		{
			//If not a trial player or pet, they can hold the full ammount.
			return targets[i];
		}
		if (utils.isFreeTrial(targets[i]))
		{
			if (group.getSafeDifference(targets[i], money) == money)
			{
				//If a trial member, but can hold the full ammount, return them.
				return targets[i];
			}
		}
		if (!hasScript(targets[i],"ai.pet"))
		{
			//If I can hold more of the reward than you, set me to be primary.
			if (group.getSafeDifference(targets[i], money) > group.getSafeDifference(mostMoney, money))
				mostMoney = targets[i];
		}

	}

	//If nobody can hold the full ammount, return the best case scenario. Default is player.
	return mostMoney;
}


void setupBountyMissionObject(obj_id objMission)
{
/*
	obj_id objMissionData = getMissionData(objMission);
	dictionary dctParams = new dictionary();

	dctParams.put("objBountyHunter", getMissionHolder(objMission));
	dctParams.put("objMission", objMission);

	//messageTo(objTarget, "setupBountyHunterMission", dctParams, 0, true);
*/
	return;

}
void cleanupBountyMission(obj_id objMission)
{
	return;
}


void returnReward(obj_id objMission)
{
	// sends all rewards and bonds back to where they belong
	return;
}

int getBountyDifficulty(obj_id objPlayer)
{
	int intBountyLevel = getSkillStatisticModifier(objPlayer, "bounty_mission_level");
	LOG("missions", "bounty level is "+intBountyLevel);
	if(intBountyLevel<1)
	{
		LOG("DESIGNER_FATAL", "Bounty hunter id "+objPlayer+" has a bounty difficulty of less than 1");
		return 1;
	}
	return intBountyLevel;
}



obj_id cleanMissionObject(obj_id objMissionObject)
{

	removeAllObjVars(objMissionObject);
	detachAllScripts(objMissionObject);
	attachScript(objMissionObject, "systems.missions.base.mission_object");
	attachScript (objMissionObject, "systems.missions.base.mission_cleanup_tracker");
	return objMissionObject;

}


