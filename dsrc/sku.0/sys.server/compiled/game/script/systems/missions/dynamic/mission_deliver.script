// -----------------------------------------------------------------------
// Copyright (c) ©2000,2001 Sony Online Entertainment Inc.
// All Rights Reserved
// -----------------------------------------------------------------------
// $File: //depot/swg/current/dsrc/sku.0/sys.server/plt.shared/loc.shared/compiled/game/script/systems.missions/dynamic/mission_escort_destination.script $
// $Change: 16929 $
// $Author: drubenfield $
// $Revision: #11 $
// This is the escort mission script that lives on the mission object.



// mission flow goes


// pickup -> go to pickup NPC and get item
// dropoff -> go to dropoff npc and deliver the item

// pickup = who has the item
// dropoff  = who receives it when you're done





include library.utils;
include library.missions;

inherits systems.missions.base.mission_dynamic_base;

trigger OnInitialize ()
{
	if (!hasScript (self, "systems.missions.base.mission_cleanup_tracker"))
	{
		attachScript (self, "systems.missions.base.mission_cleanup_tracker");
	}
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{


	return SCRIPT_CONTINUE;


}

messageHandler abortMission()
{
	sendDeliverIncomplete(self);
	return SCRIPT_CONTINUE;



}

messageHandler OnStartMission()
{

	debugServerConsoleMsg(self, "Setting up mission data in mission object for DELIVER mission");

	setupFetchMissionObject(self); // depracatde
	obj_id objMissionData = getMissionData(self);

	location locStartLocation = getMissionStartLocation(objMissionData);


	setObjVar(self, "intState", missions.STATE_DYNAMIC_PICKUP);
	updateMissionWaypoint(self, locStartLocation);

	int intStringId = getIntObjVar(objMissionData, "intStringId");
	string strMessageString = "m"+intStringId+"d"; // description
	string strTitleString = "m"+intStringId+"t";
	LOG("mission", "strMessagebeing sent is "+strMessageString);
	LOG("mission", "strTitle sent is "+strTitleString);


	activateMissionWaypoint(self);


	//int intMissionDifficulty = getIntObjVar(objMissionData, "intMissionDifficulty");


	/*if(intMissionDifficulty==DELIVER_DIFFICULTY_MEDIUM)
	{
		//we get between 1 and 2 interest npc's
		int intInterest= rand(1, 2);
		setObjVar(self, "intInterest", intInterest);

	}
*/


	return SCRIPT_CONTINUE;


}


messageHandler deliverSuccess()
{

	if(!hasObjVar(self, "intCompleted"))
	{
		setObjVar(self, "intCompleted", 1);

		obj_id objPlayer = getMissionHolder(self);
		playMusic(self, "sound/music_mission_complete.snd");

		deliverReward(self);
		endMission(self);
	}

	return SCRIPT_CONTINUE;

}

messageHandler deliverFail()
{
	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "failed");
	sendSystemMessage(objPlayer, strMessage);

//	sendMissionPersistentMessage(self, "fail");
	endMission(self);
	return SCRIPT_CONTINUE;

}

messageHandler deliverIncomplete()
{

	obj_id objPlayer = getMissionHolder(self);
	string_id strMessage= new string_id(GENERIC_MISSION_MESSAGE_STRING_FILE, "incomplete");
	sendSystemMessage(objPlayer, strMessage);
	playMusic(objPlayer, "sound/music_mission_complete.snd");
	endMission(self);
	return SCRIPT_CONTINUE;



}


messageHandler OnEndMission()
{
	cleanupObjects(self);
	cleanupLocationTargets(self);
	obj_id objMissionData = getMissionData(self);
	cleanupObjects(self);
	obj_id objWaypoint = getObjIdObjVar(self, "objWaypoint");

	setWaypointActive(objWaypoint, false);
	setWaypointVisible(objWaypoint, false);

	destroyObject(objWaypoint);

	return SCRIPT_CONTINUE;


}

messageHandler onArrivedAtLocation()
{
	// we've got a state based onArrivedAtLocation.
	// each onArrivedAtLocation is unique
	// when the mission object receives onArrived, it checks status variables
	// and acts accordingly!

	obj_id objPlayer = getMissionHolder(self);

	dictionary dctParams = new dictionary();
	dctParams.put("objMission", self);

	//messageTo(objPlayer, "deliver_Arrival", dctParams, 0, true);




	return SCRIPT_CONTINUE;
}
messageHandler pickup_event()
{


	//int intDelay = rand(DELIVERY_INTEREST_MIN_DELAY, DELIVERY_INTEREST_MAX_DELAY);
	//dictionary dctParams = new dictionary();
	//messageTo(self, "deliver_Interest_Tracker", dctParams, intDelay, true);
	return SCRIPT_CONTINUE;
}


/*
messageHandler deliver_Interest_Tracker()
{

	if(!hasObjVar(self, "intInterest"))
	{

		return SCRIPT_CONTINUE; /// no more interest
	}



	if(hasObjVar(self, "intInterestActive"))
	{
		int intDelay = rand(DELIVERY_INTEREST_MIN_DELAY, DELIVERY_INTEREST_MAX_DELAY);
		dictionary dctParams = new dictionary();
		messageTo(self, "deliver_Interest_Tracker", dctParams, intDelay, true);
		return SCRIPT_CONTINUE;

	}


	obj_id objMissionData = getMissionData(self);
	obj_id objPlayer = getMissionHolder(self);


	int intMissionDifficulty = getIntObjVar(objMissionData, "intMissionDifficulty");
	//setObjVar(objMissionData, "intMissionDifficulty", DELIVER_DIFFICULTY_HARD);

	if(intMissionDifficulty==DELIVER_DIFFICULTY_MEDIUM)
	{
		createDeliverNPC(self);


		// let's make guys to attack us

	}



	int intDelay = rand(DELIVERY_INTEREST_MIN_DELAY, DELIVERY_INTEREST_MAX_DELAY);
	dictionary dctParams = new dictionary();
	messageTo(self, "deliver_Interest_Tracker", dctParams, intDelay, true);
	return SCRIPT_CONTINUE;


}

messageHandler remove_Interest()
{

	removeObjVar(self, "intInterest");
	return SCRIPT_CONTINUE;

}
*/
