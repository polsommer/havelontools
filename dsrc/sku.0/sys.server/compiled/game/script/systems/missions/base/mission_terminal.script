/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        base terminal.script
 * Description:  script for handling basic terminal functions
 * @author       $Author:$
 * @version      $Revision:$
 */

/***** INCLUDES ********************************************************/

include library.structure;
include library.factions;
include library.utils;
include library.loot;
include library.sui;
include library.slicing;
include library.prose;
include library.xp;

/***** CONSTANTS *******************************************************/

const string_id SID_MNU_REDEEM					= new string_id("sui","mnu_redeem");

const string_id SID_REDEEM_PROMPT				= new string_id("sui","redeem_data_item_prompt");
const string_id SID_REDEEM_TITLE				= new string_id("sui","redeem_data_item_title");

const string_id SID_SLICE						= new string_id("slicing/slicing", "slice");
const string_id SID_FAIL_SLICE					= new string_id("slicing/slicing", "terminal_fail");
const string_id SID_SUCCESS_SLICE				= new string_id("slicing/slicing", "terminal_success");
const string_id SID_NOT_YET						= new string_id("slicing/slicing", "not_yet");


/***** TRIGGERS ********************************************************/
trigger OnInitialize()
{
	if ( hasObjVar(self, structure.VAR_TERMINAL_HEADING) )
	{
		setYaw(self, getFloatObjVar(self, structure.VAR_TERMINAL_HEADING));
	}
	removeObjVar( self, "slice_start" );
	removeObjVar( self, "sliced_by" );
	attachScript(self, "planet_map.map_loc_attach");
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	int mnu = -1;

	// Smuggler terminal hacking.
	if ( hasSkill( player, "class_smuggler_phase1_novice" ) )
		mi.addRootMenu( menu_info_types.SERVER_MENU2, SID_SLICE );

	menu_info_data mid = mi.getMenuItemByType(menu_info_types.MISSION_TERMINAL_LIST);
	if ( mid == null )
	{
		mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid == null && (!isDead(player) && !isIncapacitated(player)))
		{
			mnu = mi.addRootMenu(menu_info_types.MISSION_TERMINAL_LIST, new string_id("",""));
		}
	}

	/*
	if ( hasObjVar(self, factions.FACTION) )
	{
		string myFaction = getStringObjVar(self, factions.FACTION);

		boolean addRedeemMenu = false;

		obj_id dp = utils.getPlayerDatapad(player);
		if ( (dp == null) || (dp == obj_id.NULL_ID) )
		{
			return SCRIPT_CONTINUE;
		}
		else
		{
			obj_id[] dataItems = utils.getContainedGOTObjects(dp, GOT_data_fictional);
			if ( (dataItems == null) || (dataItems.length == 0) )
			{

			}
			else
			{
				addRedeemMenu = true;
			}
		}

		if ( addRedeemMenu )
		{
			int sub = mi.addSubMenu(mnu, menu_info_types.SERVER_MENU1, SID_MNU_REDEEM);
		}
	}
	*/

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.SERVER_MENU1 ) //redeem data items
	{
		/*
		obj_id dp = utils.getPlayerDatapad(player);
		if ( (dp == null) || (dp == obj_id.NULL_ID) )
		{
			return SCRIPT_CONTINUE;
		}

		utils.requestContainerOpen(player, dp);

		obj_id[] dataItems = utils.getContainedGOTObjects(dp, GOT_data_fictional);
		if ( (dataItems == null) || (dataItems.length == 0) )
		{
			//system message player that they have no fictional data items
		}
		else
		{
			string title = utils.packStringId(SID_REDEEM_TITLE);
			string prompt = utils.packStringId(SID_REDEEM_PROMPT);

			string[] names = utils.makeNameList(dataItems);

			string[] entries = new string[dataItems.length];
			for ( int i = 0; i < dataItems.length; i++ )
			{
				entries[i] = "[" + loot.getFactionCouponValue(self, dataItems[i]) + "] " + names[i];
			}
			sui.listbox(self, player, prompt, title, entries);

			obj_id myDp = getObjectInSlot(self, "datapad");
			if ( (myDp == null) || (myDp == obj_id.NULL_ID) )
			{
				return SCRIPT_CONTINUE;
			}
			else
			{
				utils.requestContainerOpen(player, myDp);
			}

			return SCRIPT_CONTINUE;
		}
		*/
	}
	else if ( item == menu_info_types.SERVER_MENU2 )
	{
		// You can only slice this if you have the correct skill.
		if ( !hasSkill( player, "class_smuggler_phase1_novice"  ) )
			return SCRIPT_CONTINUE;

		// Check our terminal time.
		if ( utils.hasScriptVar( player, "slicing.terminal_time" ) )
		{
			int lastHackTime = utils.getIntScriptVar( player, "slicing.terminal_time" );
			int curTime = getGameTime();
			if ( curTime < lastHackTime + 120 )
			{
				// Not enough time has passed.
				int timeDiff = (lastHackTime + 120) - curTime;
				prose_package pp = prose.getPackage( SID_NOT_YET, timeDiff );
				sendSystemMessageProse( player, pp );
				return SCRIPT_CONTINUE;
			}
			else
			{
				utils.removeScriptVar( player, "slicing.terminal_time" );
			}
		}

		// Begin the slicing game.
		slicing.startSlicing( player, self, "finishSlicing", "terminal" );
	}
	return SCRIPT_CONTINUE;
}

messageHandler finishSlicing()
{
	if ( params == null )
		return SCRIPT_CONTINUE;

	int success = params.getInt( "success" );
	obj_id player = params.getObjId( "player" );
	if ( success == 1 )
	{
		// Successful terminal hack.
		sendSystemMessage( player, SID_SUCCESS_SLICE );

		// Indicate that we can get an improved reward at this terminal.
		utils.setScriptVar( player, "slicing.terminal", self );
		utils.setScriptVar( player, "slicing.terminal_bonus", 1.5f );

		// Grant xp. No more slicing xp
		//xp.grant( player, xp.SLICING, 100 );
	}
	else
	{
		// Failed terminal hack.
		sendSystemMessage( player, SID_FAIL_SLICE );
	}
	utils.setScriptVar( player, "slicing.terminal_time", getGameTime() );

	return SCRIPT_CONTINUE;
}


/***** FUNCTIONS *******************************************************/


/***** MESSAGEHANDLERS *************************************************/
