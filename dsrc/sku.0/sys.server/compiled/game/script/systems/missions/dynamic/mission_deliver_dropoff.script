include library.ai_lib;
include library.chat;
include library.factions;
include library.anims;
include library.missions;

inherits systems.missions.base.mission_dynamic_base;

trigger OnAttach()
{
	attachScript(self, "npc.converse.npc_converse_menu");
	debugServerConsoleMsg(self, "deliver dropoff script attached");
	factions.setFaction(self, "Unattackable");

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	//LOG("mission", "Dropoff npc is at "+getLocation(self));
	return SCRIPT_CONTINUE;


}


trigger OnInitialize ()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}


trigger OnStartNpcConversation (obj_id speaker)
{

	obj_id objMission = getObjIdObjVar(self, "objMission");
	obj_id objMissionHolder = getObjIdObjVar(self, "objPlayer");

	int intState = getIntObjVar(objMission, "intState");



	if(speaker!=objMissionHolder)
	{
		doIncorrectPlayerBlurb(self);
		return SCRIPT_CONTINUE;

	}
	if (intState==missions.STATE_DYNAMIC_DROPOFF) // good state, we can give the items
	{


		obj_id objMissionData = getMissionData(objMission);
		int intStringId = getIntObjVar(objMissionData, "intStringId");
		//string strMessageString = "m"+intStringId+"d"; // description
		//string strTitleString = "m"+intStringId+"t";
		string strIdFileName = getStringObjVar(objMissionData, "strIdFileName");

		string_id strConvo = new string_id(strIdFileName, "m"+intStringId+"r");
		setObjVar(objMissionData, "strIdFileName", strIdFileName);

		//LOG("mission_spam", "strConvo is "+strConvo);
		string strSpeakString = getString(strConvo);
		chat.chat(self, strSpeakString);
		//npcStartConversation (speaker, self, null, strConvo, null);

		obj_id objDeliveryItem = getObjIdObjVar(self, "objDeliveryItem");


		dictionary dctParams = new dictionary();
		messageTo(objMission, "pickup_event", dctParams, 0, true);
		sendDeliverSuccess(getObjIdObjVar(self, "objMission"));
		messageTo(self, "destroySelf", null, 120, true);

	}
	else
	{
		string_id message = new string_id ("mission/mission_generic", "deliver_already_dropped_off"); //
		chat.chat(self, message);
		doAnimationAction(self, anims.PLAYER_WAVE_ON_DISMISSING);
		return SCRIPT_CONTINUE;


	}
	return SCRIPT_CONTINUE;
}

/*
trigger OnRemovingFromWorld()
{
	// make sure to notify the mission object so we can reset the spawn event!

	if(!hasObjVar(self, "intKilled"))
	{

		// we need to see what state we're in

		obj_id objMission = getObjIdObjVar(self, "objMission");

		int intState = getIntObjVar(objMission, "intState");
		if(intState==missions.STATE_DYNAMIC_DROPOFF)
		{
			setupSpawn(getObjIdObjVar(self, "objMission"), getLocation(self)); // tell my master that i'm gone and the respawn event has to be reset
		}

		destroyObject(self); // HACK WILL BE REMOVED AFTER WE GET NONPERSISTANCE FLAG!

	}

	return SCRIPT_CONTINUE;


}

*/
messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}
