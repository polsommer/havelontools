include library.ai_lib;
include library.chat;
include library.factions;
include library.anims;
include library.missions;

inherits systems.missions.base.mission_dynamic_base;

trigger OnInitialize ()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	attachScript(self, "npc.converse.npc_converse_menu");
	debugServerConsoleMsg(self, "deliver dropoff script attached");

	factions.setFaction(self, "Unattackable");

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	//LOG("mission", "Dropoff npc is at "+getLocation(self));
	return SCRIPT_CONTINUE;


}
trigger OnGiveItem(obj_id objItem, obj_id objPlayer)
{

	return SCRIPT_CONTINUE;
}

trigger OnStartNpcConversation (obj_id speaker)
{

	obj_id objMission = getObjIdObjVar(self, "objMission");
	obj_id objMissionHolder = getMissionHolder(objMission);

	int intState = getIntObjVar(objMission, "intState");

	obj_id objPlayer = getObjIdObjVar(self, "objPlayer");

	if (intState==missions.STATE_DYNAMIC_DROPOFF) // good state, we can give the items
	{
		if(speaker!=objMissionHolder)
		{
			doIncorrectPlayerBlurb(self);
			return SCRIPT_CONTINUE;
		}

		// i take the item

		obj_id objMissionData = getMissionData(objMission);

		string strItemToMake = getStringObjVar(objMissionData, "strItemToMake");

		if(hasCraftingMissionItem(speaker, strItemToMake))
		{

			revokeMissionSchematic(objPlayer, objMission);
			int intStringId = getIntObjVar(objMissionData, "intStringId");
			//string strMessageString = "m"+intStringId+"d"; // description
			//string strTitleString = "m"+intStringId+"t";
			string strIdFileName = getStringObjVar(objMissionData, "strIdFileName");
			string_id strConvo = new string_id(strIdFileName, "m"+intStringId+"r");
			setObjVar(objMissionData, "strIdFileName", strIdFileName);
			//LOG("mission_spam", "strConvo is "+strConvo);
			string strSpeakString = getString(strConvo);
			chat.chat(self, strSpeakString);
			//npcStartConversation (speaker, self, null, strConvo, null);
			dictionary dctParams = new dictionary();
			sendCraftingSuccess(getObjIdObjVar(self, "objMission"));
			messageTo(self, "destroySelf", null, 120, true);
			return SCRIPT_OVERRIDE; // winner!
		}
		else
		{
			string_id strSpam = new string_id("mission/mission_generic", "wrong_item");
			chat.chat(self, strSpam);
			return SCRIPT_CONTINUE;
		}

	}
	else
	{
		string_id message = new string_id ("mission/mission_generic", "crafting_already_dropped_off"); //
		chat.chat(self, message);
		doAnimationAction(self, anims.PLAYER_WAVE_ON_DISMISSING);

	}


	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}
