include library.ai_lib;
include library.chat;
include library.factions;
include library.anims;
include library.missions;

inherits systems.missions.base.mission_dynamic_base;

trigger OnInitialize ()
{
	destroyObject (self);
	return SCRIPT_CONTINUE;
}


trigger OnAttach()
{
	attachScript(self, "npc.converse.npc_converse_menu");
	debugServerConsoleMsg(self, "deliver dropoff script attached");


	factions.setFaction(self, "Unattackable");

	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);

	//LOG("mission", "Dropoff npc is at "+getLocation(self));
	return SCRIPT_CONTINUE;


}


trigger OnRemovingFromWorld()
{
	// make sure to notify the mission object so we can reset the spawn event!
	// we only reset the spawn event if mission state is STATE_FETCH_PICKUP!

	if(!hasObjVar(self, "intKilled"))
	{
		obj_id objMission = getObjIdObjVar(self, "objMission");
		int intState = getIntObjVar(objMission, "intState");
		if(intState==missions.STATE_DYNAMIC_PICKUP)
		{
			setupSpawn(getObjIdObjVar(self, "objMission"), getLocation(self)); // tell my master that i'm gone and the respawn event has to be reset
		}

		//destroyObject(self); // HACK WILL BE REMOVED AFTER WE GET NONPERSISTANCE FLAG!
	}

	return SCRIPT_CONTINUE;




}





trigger OnStartNpcConversation (obj_id speaker)
{

	obj_id objMission = getObjIdObjVar(self, "objMission");
	obj_id objMissionHolder = getObjIdObjVar(self, "objPlayer");

	int intState = getIntObjVar(objMission, "intState");



	if(speaker!=objMissionHolder)
	{
		doIncorrectPlayerBlurb(self);
		return SCRIPT_CONTINUE;

	}

	if (intState==missions.STATE_DYNAMIC_PICKUP) // good state, we can give the items
	{

		obj_id objMissionData = getMissionData(objMission);
		int intStringId = getIntObjVar(objMissionData, "intStringId");
		//string strMessageString = "m"+intStringId+"d"; // description
		//string strTitleString = "m"+intStringId+"t";
		string strIdFileName = getStringObjVar(objMissionData, "strIdFileName");

		string_id strConvo = new string_id(strIdFileName, "m"+intStringId+"p");
		setObjVar(objMissionData, "strIdFileName", strIdFileName);

		//LOG("mission_spam", "strConvo is "+strConvo);
		//string strSpeakString = getString(strConvo);
		chat.chat(self, strConvo);
		//npcStartConversation (speaker, self, null, strConvo, null);

		obj_id objDeliveryItem = getObjIdObjVar(self, "objDeliveryItem");



		string_id strTitleId = new string_id("mission/mission_generic", "deliver_received_data");
		string_id strMissionTitleId = new string_id(strIdFileName, "m"+intStringId+"t"); // mission name id
		string strMissionTitle = getString(strMissionTitleId); // mission name string
		string strSystemMessage = getString(strTitleId);
		strSystemMessage = strSystemMessage + " " +strMissionTitle;
		sendSystemMessageTestingOnly(speaker, strSystemMessage);

		dictionary dctParams = new dictionary();
		messageTo(objMission, "pickup_event", dctParams, 0, true);

		setObjVar(objMission, "intState", missions.STATE_DYNAMIC_DROPOFF);
		location locDropoffLocation = getMissionEndLocation(objMissionData);
		//debugSpeakMsg(self, "Take this item to "+locDropoffLocation.toString());

		setObjVar(objMission, "objDeliveryItem", objDeliveryItem); // for validation
		debugServerConsoleMsg(self, "objMissionData for npc pickup is "+objMissionData);

		if(hasObjVar(objMissionData, "objEndNPC"))
		{

			// we create NOTHING!
			setObjVar(objMission, "intMissionComplete", 1);

		}
		else
		{
			setupSpawn(objMission, locDropoffLocation);
		}

		updateMissionWaypoint(objMission, locDropoffLocation);


		//LOG("mission", "objMission is "+objMission);
		//LOG("mission", "LocDropoffLocation = "+locDropoffLocation.toString());


		messageTo(self, "destroySelf", null, 120, true);

	}
	else
	{
		string_id message = new string_id ("mission/mission_generic", "deliver_already_picked_up"); //
		chat.chat(self, message);
		doAnimationAction(self, anims.PLAYER_POINT_AWAY);
		return SCRIPT_CONTINUE;


	}
	return SCRIPT_CONTINUE;
}

messageHandler destroySelf()
{
	destroyObject(self);
	return SCRIPT_CONTINUE;

}
