include library.utils;

inherits systems.missions.base.mission_dynamic_base;

trigger OnAttach()
{
	setInvulnerable(self, true);
	messageTo(self, "destroySelf", null, 180, true); // countdown for cleanup

	if(!hasScript(self, "conversation.bounty_probot") )
		attachScript(self, "conversation.bounty_probot");

	return SCRIPT_CONTINUE;


}


messageHandler setup_Droid()
{

	obj_id objWaypoint = params.getObjId("objWaypoint");
	obj_id objPlayer = params.getObjId("objPlayer");
	obj_id objMission = params.getObjId("objMission");
	int intTrackType = params.getInt("intTrackType");
	int intDroidType = params.getInt("intDroidType");
	setObjVar(self, "objPlayer", objPlayer);
	setObjVar(self, "objMission", objMission);
	setObjVar(self, "intTrackType", intTrackType);
	setObjVar(self, "intDroidType", intDroidType);
	setObjVar(self, "objWaypoint", objWaypoint);
	return SCRIPT_CONTINUE;

}


messageHandler destroySelf()
{

	obj_id[] objPlayers= getAllPlayers(getLocation(self), 64);

	if(objPlayers != null && objPlayers.length > 0)
	{
		playClientEffectLoc(objPlayers[0], "clienteffect/combat_explosion_lair_large.cef", getLocation(self),  0);
	}

	obj_id objMission = getObjIdObjVar(self, "objMission");
	messageTo(objMission, "stopTracking", null, 0, true);
	messageTo(self, "delete_Self", null, 0, true);

	return SCRIPT_CONTINUE;

}


/**** This stuff is now handled in a conversation (conversation.bounty_probot) in order to NPE-ify bounty probots ****

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(hasObjVar(self, "intDone"))
	{
		return SCRIPT_CONTINUE;

	}
	int intRootMenu;
	obj_id objPlayer = getObjIdObjVar(self, "objPlayer");
	if(player!=objPlayer)
	{

		return SCRIPT_CONTINUE;


	}
	string_id strProgramId = new string_id("mission/mission_generic", "probe_droid_program");
	intRootMenu = mi.addRootMenu(menu_info_types.SERVER_PROBE_DROID_PROGRAM, strProgramId);
  	return SCRIPT_CONTINUE;
}


trigger OnObjectMenuSelect(obj_id player, int item)
{


	obj_id objPlayer = getObjIdObjVar(self, "objPlayer");
	if(player!=objPlayer)
	{

		return SCRIPT_CONTINUE;
	}

	obj_id objBountyMission = getBountyMission(player);
	if(objBountyMission==null)
	{

		return SCRIPT_CONTINUE;

	}
	obj_id objMission = getObjIdObjVar(self, "objMission");
	if(objMission!=objBountyMission)
	{

		return SCRIPT_CONTINUE;

	}

	int intState = getIntObjVar(objMission, "intState");
	if(intState!=STATE_BOUNTY_PROBE)
	{
		string_id strSpam = new string_id("mission/mission_generic", "bounty_no_signature");
		sendSystemMessage(player, strSpam);
		return SCRIPT_CONTINUE;
	}
	dictionary dctParams = new dictionary();



	if(item==menu_info_types.SERVER_PROBE_DROID_PROGRAM)
	{
		setObjVar(self, "intDone", 1);
		string_id strResponse = new string_id("mission/mission_generic", "probe_droid_takeoff");
		sendSystemMessage(player, strResponse);

		doAnimationAction( self, "sp_13");
		messageTo(self, "take_Off", null, 9, true);

	}

	return SCRIPT_CONTINUE;
}
***************** see conversation.bounty_probot ******************/
messageHandler delete_Self()
{

	obj_id objWaypoint = getObjIdObjVar(self, "objWaypoint");
	destroyObject(objWaypoint);

	destroyObject(self);
	return SCRIPT_CONTINUE;
}


messageHandler take_Off()
{
	doAnimationAction(self, "sp_13");
	dictionary dctParams = new dictionary();
	obj_id objMission = getObjIdObjVar(self, "objMission");
	int intTrackType = getIntObjVar(self, "intTrackType");
	int intDroidType = getIntObjVar(self, "intDroidType");
	dctParams.put("intDroidType", intDroidType);
	dctParams.put("intTrackType", DROID_FIND_TARGET);
	messageTo(objMission, "findTarget", dctParams, 10, true);
	utils.sendPostureChange(self, POSTURE_SITTING);
	messageTo(self, "delete_Self", null, 10, true);

	return SCRIPT_CONTINUE;

}