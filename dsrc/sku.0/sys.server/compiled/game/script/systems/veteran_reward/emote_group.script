/**
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        systems/veteran_reward/emote_group.script
 * Description:  Gives a player access to a group of emotes. This occurs when the object this
 * 				 script is attached to is placed in the player's inventory.
 * @author       $Author:$
 * @version      $Revision:$
 */

include library.veteran_deprecated;


/***** CONSTANTS *******************************************************/

const string OBJVAR_GROUP_GAINED   = "group";
const string OBJVAR_GROUP_REWARDED = "rewarded";


/***** TRIGGERS ********************************************************/

/**
 * If we're being put in a player's inventory, flags the player as being able to perform a group of emotes.
 */
trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
	// see if we've already rewarded our emotes
	if ( hasObjVar(self, OBJVAR_GROUP_REWARDED) )
		return SCRIPT_CONTINUE;

	// see if we're being transferred to a player
	obj_id destParent = getContainedBy(destContainer);
	if ( destParent != null && isPlayer(destParent) )
	{
		// add our group to the list of emote groups the player can do
		int group = getIntObjVar(self, OBJVAR_GROUP_GAINED);
		if ( group > 0 )
		{
			int[] emoteGroups = getIntArrayObjVar(destParent, veteran_deprecated.OBJVAR_VETERAN_EMOTES);
			int[] newGroups;
			if ( emoteGroups != null)
			{
				newGroups = new int[emoteGroups.length + 1];
				for ( int i = 0; i < emoteGroups.length; ++i )
					newGroups[i] = emoteGroups[i];
			}
			else
			{
				newGroups = new int[1];
			}
			newGroups[newGroups.length - 1] = group;
			setObjVar(destParent, veteran_deprecated.OBJVAR_VETERAN_EMOTES, newGroups);
			setObjVar(self, OBJVAR_GROUP_REWARDED, true);
		}
		else
		{
			CustomerServiceLog("veteran", "WARNING: Emote reward object " + self + " does not have a group objvar");
		}
	}

 	return SCRIPT_CONTINUE;
}

/**
 * Lists the emotes the player can perform.
 */
trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if ( player == null || names == null || attribs == null || names.length != attribs.length )
		return SCRIPT_CONTINUE;

	int group = getIntObjVar(self, OBJVAR_GROUP_GAINED);
	if ( group > 0 )
	{
		int[] emotes = dataTableGetIntColumn(veteran_deprecated.EMOTES_DATATABLE, veteran_deprecated.EMOTES_COLUMN_EMOTE);
		int[] groups = dataTableGetIntColumn(veteran_deprecated.EMOTES_DATATABLE, veteran_deprecated.EMOTES_COLUMN_GROUP);
		if ( emotes != null && groups != null && emotes.length == groups.length )
		{
			int index = getFirstFreeIndex(names);
			for ( int i = 0; i < groups.length; ++i )
			{
				if ( groups[i] == group )
				{
					String emoteName = getEmoteFromCrc(emotes[i]);
					if ( emoteName != null )
					{
						names[index] = "@ui_text_color:emote";
						attribs[index++] = emoteName;
					}
					else
						CustomerServiceLog("veteran", "WARNING: emotes OnGetAttributes, can't get emote string for crc " + emotes[i]);
				}
			}
		}
		else
			CustomerServiceLog("veteran", "WARNING: emotes OnGetAttributes, bad datatable " + veteran_deprecated.EMOTES_DATATABLE);
	}
	return SCRIPT_CONTINUE;
}

