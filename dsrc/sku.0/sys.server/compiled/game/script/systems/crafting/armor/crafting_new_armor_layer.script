/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_new_armor_layer_base.script
 * Description:  base script for crafting new armor layers
 * @author       $Author: Steve Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.armor;
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v0.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
  	// some values need to be inverted before writing to the object
  	for ( int i = 0; i < itemAttributes.length; ++i )
  	{
	  	if (itemAttributes[i] == null)
	  		continue;
	}

	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	// get which special protections are affected via the objvars on the manf schematic
	obj_id self = getSelf();
	if ( !hasObjVar(self, "layer") )
	{
		CustomerServiceLog("crafting", "WARNING: armor layer draft schematic " + getDraftSchematic(self) + " has no layer objvar set");
		return;
	}
	int layer = getIntObjVar(self, "layer");

	// we need to convert the armor data from the specific armor layer row to the layer reference row
	int layerRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_LAYER_ROW + layer), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	int referenceRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_LAYER_REFERENCE_ROW), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	if ( layerRow < 0 || referenceRow < 0 )
	{
		CustomerServiceLog("crafting", "WARNING: armor datatable " + armor.DATATABLE_ARMOR + " has missing layer or reference row (" +
			layerRow + "," + referenceRow + ")");
		return;
	}

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			if (itemAttributes[i].currentValue < itemAttributes[i].minValue)
				itemAttributes[i].currentValue = itemAttributes[i].minValue;
			else if (itemAttributes[i].currentValue > itemAttributes[i].maxValue)
				itemAttributes[i].currentValue = itemAttributes[i].maxValue;
			float newValue = armor.rescaleArmorData(itemAttributes[i].name.getAsciiId(), layerRow, referenceRow, itemAttributes[i].currentValue);
			if ( newValue == Float.MIN_VALUE )
				newValue = itemAttributes[i].currentValue;
			if ( itemAttributes[i].name.equals("special_protection") )
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + armor.OBJVAR_LAYER_PREFIX + layer, newValue);
			}
			else
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), newValue);
			}
		}
	}
}





