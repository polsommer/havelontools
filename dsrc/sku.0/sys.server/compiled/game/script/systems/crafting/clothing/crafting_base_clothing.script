/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.bio_engineer;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";

/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
  	// some values need to be inverted before writing to the object
  	for ( int i = 0; i < itemAttributes.length; ++i )
  	{
	  	if (itemAttributes[i] == null)
	  		continue;
	}
  	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	LOG("LOG_CHANNEL", "crafting_base_clothing -- " + prototype);
	// Bio-engineer bonus properties
	obj_id self = getSelf();
	string root = craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + craftinglib.TISSUE_SKILL_MODS + ".";
	int[] mod_idx = getIntArrayObjVar(self, root + craftinglib.TISSUE_SKILL_INDEX);
	int[] mod_val = getIntArrayObjVar(self, root + craftinglib.TISSUE_SKILL_VALUE);

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		//LOG ("clothing_crafting", "Processing Attribute: "+itemAttributes[i].name.getAsciiId()+" ("+(int)(itemAttributes[i].currentValue)+")");

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			if ( itemAttributes[i].name.getAsciiId().startsWith("mod_idx") ||
				 itemAttributes[i].name.getAsciiId().startsWith("mod_val"))
			{
				// old attributes not used anymore.  Don't store.
			}
			else
			{
				if ( itemAttributes[i].name.getAsciiId().equals("armor_rating"))
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), (int)itemAttributes[i].currentValue );
				else if ( itemAttributes[i].name.getAsciiId().equals("armor_health_encumbrance"))
				{
					float encum_value = (itemAttributes[i].maxValue + itemAttributes[i].minValue) - itemAttributes[i].currentValue;
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), encum_value);
				}
				else if ( itemAttributes[i].name.getAsciiId().equals("armor_action_encumbrance"))
				{
					float encum_value = (itemAttributes[i].maxValue + itemAttributes[i].minValue) - itemAttributes[i].currentValue;
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), encum_value);
				}
				else if ( itemAttributes[i].name.getAsciiId().equals("armor_mind_encumbrance"))
				{
					float encum_value = (itemAttributes[i].maxValue + itemAttributes[i].minValue) - itemAttributes[i].currentValue;
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), encum_value);
				}
				else
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue );
			}
		}
	}

	// Check the bio-engineer properties and save out the skill_mod adjustments accordingly
	int type = getGameObjectType( prototype );
	if ( !isGameObjectTypeOf( type, GOT_armor ) )
	{
		if (mod_idx != null && mod_idx.length > 0)
		{
			for (int i = 0; i < 6; i++)
			{
				if (mod_idx[i] > bio_engineer.BIO_COMP_EFFECT_CLOTHING)
				{
					string skill_mod = bio_engineer.BIO_COMP_EFFECT_SKILL_MODS[(mod_idx[i] - (bio_engineer.BIO_COMP_EFFECT_CLOTHING + 1))];
					//LOG ("clothing_crafting", "Setting Clothing Skill Mod: " + skill_mod + " (" + mod_val[i] + ")");

					setSkillModBonus(prototype, skill_mod, mod_val[i]);
					setCondition(prototype, CONDITION_MAGIC_ITEM);
				}
			}
		}
	}
}

