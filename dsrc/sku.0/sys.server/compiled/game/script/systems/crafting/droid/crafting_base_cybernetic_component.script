
/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties(obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary)
{
	super.calcAndSetPrototypeProperties(prototype, itemAttributes, craftingValuesDictionary);
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties(obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	//debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	int[] attribBonus = new int[NUM_ATTRIBUTES];
	
	for(int i = 0; i < itemAttributes.length; ++i) // go through all attributes
	{
		if(itemAttributes[i] == null)
			continue;

		if(!calcAndSetPrototypeProperty(prototype, itemAttributes[i]))
		{
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_health"))
			{
				obj_id self = getSelf();
				//setAttributes
				attribBonus[0] = (int)itemAttributes[i].currentValue;
				//set attributes on the prototype
				setAttributeBonuses(prototype, attribBonus);
				//set attributes on the possible manufacturing schematic - otherwise stats get over-written.
				setAttributeBonuses(self, attribBonus);
			}
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_action"))
			{
				obj_id self = getSelf();
				//setAttributes
				attribBonus[2] = (int)itemAttributes[i].currentValue;
				//set attributes on the prototype
				setAttributeBonuses(prototype, attribBonus);
				//set attributes on the possible manufacturing schematic - otherwise stats get over-written.
				setAttributeBonuses(self, attribBonus);
			}
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_electrical_resist_module"))
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".cybernetic_electrical_resist_module", itemAttributes[i].currentValue);
				//display the stat to the player by setting type and value
				if(hasObjVar(prototype, "cybernetic.special_protection"))
				{
					setObjVar(prototype, "cybernetic.special_protection.type", getIntObjVar(prototype, "cybernetic.special_protection"));
					setObjVar(prototype, "cybernetic.special_protection.value", itemAttributes[i].currentValue);
				}
			}
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_acid_resist_module"))
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".cybernetic_electrical_resist_module", itemAttributes[i].currentValue);
				//display the stat to the player by setting type and value
				if(hasObjVar(prototype, "cybernetic.special_protection"))
				{
					setObjVar(prototype, "cybernetic.special_protection.type", getIntObjVar(prototype, "cybernetic.special_protection"));
					setObjVar(prototype, "cybernetic.special_protection.value", itemAttributes[i].currentValue);
				}
			}
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_heat_resist_module"))
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".cybernetic_electrical_resist_module", itemAttributes[i].currentValue);
				//display the stat to the player by setting type and value
				if(hasObjVar(prototype, "cybernetic.special_protection"))
				{
					setObjVar(prototype, "cybernetic.special_protection.type", getIntObjVar(prototype, "cybernetic.special_protection"));
					setObjVar(prototype, "cybernetic.special_protection.value", itemAttributes[i].currentValue);
				}
			}
			if(itemAttributes[i].name.getAsciiId().equals("cybernetic_cold_resist_module"))
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".cybernetic_electrical_resist_module", itemAttributes[i].currentValue);
				//display the stat to the player by setting type and value
				if(hasObjVar(prototype, "cybernetic.special_protection"))
				{
					setObjVar(prototype, "cybernetic.special_protection.type", getIntObjVar(prototype, "cybernetic.special_protection"));
					setObjVar(prototype, "cybernetic.special_protection.value", itemAttributes[i].currentValue);
				}
			}
			/*
			if(itemAttributes[i].name.getAsciiId().equals("mechanism_quality"))
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".mechanism_quality", itemAttributes[i].currentValue);
			}
			else if(itemAttributes[i].name.getAsciiId().equals("arc_projector") && itemAttributes[i].currentValue > 0)
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".arc_projector", itemAttributes[i].currentValue); // Float
				
				obj_id player = utils.getContainingPlayer(prototype);
				
				if(!isIdValid(player))
				{
					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".electrical_shock_level", 1);
				}
				else
				{
					int stickyFuelExpertise = (int)getSkillStatisticModifier(player, "expertise_engineering_varied_voltage");

					int level = 1 + stickyFuelExpertise;

					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".electrical_shock_level", level);
				}
			}
			else if(itemAttributes[i].name.getAsciiId().equals("shield_heatsink") && itemAttributes[i].currentValue > 0)
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".shield_heatsink", itemAttributes[i].currentValue); // Float
				
				obj_id player = utils.getContainingPlayer(prototype);
				
				if(!isIdValid(player))
				{
					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".droideka_shield_level", 1);
				}
				else
				{
					int stickyFuelExpertise = (int)getSkillStatisticModifier(player, "expertise_engineering_shield_expansion");

					int level = 1 + stickyFuelExpertise;

					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".droideka_shield_level", level);
				}
			}
			else if(itemAttributes[i].name.getAsciiId().equals("pain_inducer") && itemAttributes[i].currentValue > 0)
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".pain_inducer", itemAttributes[i].currentValue); // Float
				
				obj_id player = utils.getContainingPlayer(prototype);
				
				if(!isIdValid(player))
				{
					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".torturous_needle_level", 1);
				}
				else
				{
					int stickyFuelExpertise = (int)getSkillStatisticModifier(player, "expertise_engineering_noxious_spray");

					int level = 1 + stickyFuelExpertise;

					setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".torturous_needle_level", level);
				}
			}
			else if(itemAttributes[i].name.getAsciiId().equals("quickset_metal") && itemAttributes[i].currentValue > 0)
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".quickset_metal", itemAttributes[i].currentValue); // Float
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".regenerative_plating_level", 3);
			}
			else if(itemAttributes[i].name.getAsciiId().equals("dump_capacitors") && itemAttributes[i].currentValue > 0)
			{
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".dump_capacitors", itemAttributes[i].currentValue); // Float
				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".battery_dump_level", 3);
			}
			else if(itemAttributes[i].name.getAsciiId().equals("flame_jet_level") && itemAttributes[i].currentValue > 0)
			{
			}
			*/
		}
	}
}