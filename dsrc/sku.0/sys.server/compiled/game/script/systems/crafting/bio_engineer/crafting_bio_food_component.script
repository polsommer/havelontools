/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.debug;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_chef_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"food_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"food_experimentation"
};

// skill mod names - these skill mods will affect the customization part of the crafting session if the player has them
const string[] CUSTOMIZATION_SKILL_MODS = {
	"bio_engineer_customization"
};

const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("add_filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("add_flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("add_nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("add_quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	)
};

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("add_filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("add_flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("add_nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("add_quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	)
};

string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

void calcAndSetPrototypeProperties( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	float secret_bonus = 1.f;
	int filling = 0;
	int flavor = 0;
	int nutrition = 0;
	int quantity = 0;
	int faction = 0;

	// Check to see if we have secrets.
	obj_id self = getSelf();
	if ( hasObjVar( self, "crafting_components.secrets" ) )
	{
		secret_bonus = getFloatObjVar( self, "crafting_components.secrets.secret_bonus" );
		faction = getIntObjVar( self, "crafting_components.secrets.faction" );
	}

	// Get attributes.
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
		if ( itemAttributes[i] == null )
			continue;

		if ( !calcAndSetPrototypeProperty( prototype, itemAttributes[i] ) )
		{
			if ( itemAttributes[i].name.getAsciiId().equals( "add_filling" ) )
			{
				filling = (int) itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals( "add_flavor" ) )
			{
				flavor = (int) itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals( "add_nutrition" ) )
			{
				nutrition = (int) itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals( "add_quantity" ) )
			{
				quantity = (int) itemAttributes[i].currentValue;
			}
		}
	}

	if ( faction != 0 )
		setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_faction", faction );
	if ( filling != 0 )
		setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_filling", (int) (filling * secret_bonus) );
	if ( flavor != 0 )
		setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_flavor", (int) (flavor * secret_bonus) );
	if ( nutrition != 0 )
		setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_nutrition", (int) (nutrition * secret_bonus) );
	if ( quantity != 0 )
		setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_quantity", (int) (quantity * secret_bonus) );
}

