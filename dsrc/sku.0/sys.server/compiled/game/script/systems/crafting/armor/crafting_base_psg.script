/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_base_shield.script
 * Description:  base crafting script used by all personal shield generators
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.armor;
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";

/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
  	for ( int i = 0; i < itemAttributes.length; ++i )
  	{
	  	if (itemAttributes[i] == null)
	  		continue;
	}
  	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties(obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");

	int armorLevel = getIntObjVar(prototype, armor.OBJVAR_ARMOR_BASE + "." + armor.OBJVAR_ARMOR_LEVEL);
	int psgRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_PSG_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	if ( psgRow < 0 )
	{
		CustomerServiceLog("crafting", "WARNING: armor datatable " + armor.DATATABLE_ARMOR + " has missing psg row " + psgRow + ")");
		return;
	}

	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if ( !calcAndSetPrototypeProperty(prototype, itemAttributes[i]) )
		{
			if (itemAttributes[i].currentValue < itemAttributes[i].minValue)
				itemAttributes[i].currentValue = itemAttributes[i].minValue;
			else if (itemAttributes[i].currentValue > itemAttributes[i].maxValue)
				itemAttributes[i].currentValue = itemAttributes[i].maxValue;

			if ( itemAttributes[i].name.equals("special_protection") )
			{
				float realValue = armor.getAbsoluteArmorAttribute(itemAttributes[i].currentValue, psgRow, armor.DATATABLE_MIN_SPEC_PROT_COL);
				armor.setAbsoluteArmorSpecialProtection(prototype, armor.DATATABLE_PSG_LAYER, (int)(realValue + 0.5f));
			}
			else
				setObjVar(prototype, armor.OBJVAR_ARMOR_BASE + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);

			if ( itemAttributes[i].name.equals(armor.OBJVAR_CONDITION) )
			{
				// save the absolute hp value to the prototype
				float hp = armor.getAbsoluteArmorAttribute(itemAttributes[i].currentValue, psgRow, armor.DATATABLE_MIN_CONDITION_COL);
				if ( hp != Float.MIN_VALUE )
				{
					if ( hasObjVar(getSelf(), armor.OBJVAR_CONDITION_MULTIPLIER) )
					{
						float multiplier = getFloatObjVar(getSelf(), armor.OBJVAR_CONDITION_MULTIPLIER);
						if ( multiplier > 0 )
							hp *= multiplier;
						else
						{
							CustomerServiceLog("crafting", "Armor schematic " + getDraftSchematic(getSelf()) +
								" has an invalid condition multiplier " + multiplier);
						}
					}
					setMaxHitpoints(prototype, (int)hp);
				}
			}
		}
	}
	// save any scaled data to the prototype
	armor.saveScaledDataToPrototype(getSelf(), prototype, itemAttributes, armor.OBJVAR_ARMOR_BASE);
}

trigger OnManufactureObject(obj_id player, obj_id newObject, draft_schematic schematic, boolean isPrototype, boolean isRealObject)
{
	// send a message to initialize the psg's scriptvars after the psg has been created
	messageTo(newObject, "handleInitializePsg", null, 0.5f, false);
	return SCRIPT_CONTINUE;
}

