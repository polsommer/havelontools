/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			if(itemAttributes[i].currentValue == 0.0f)
				continue;

			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if ( itemAttributes[i].name.getAsciiId().equals("lifetime"))
			{
				setObjVar (prototype, "modules.lifetime", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("shuttle_beacon"))
			{
				setObjVar (prototype, "modules.shuttle_beacon", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("cloning_tube"))
			{
				setObjVar (prototype, "modules.cloning_tube", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("entertainer"))
			{
				setObjVar (prototype, "modules.entertainer", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("junk_dealer"))
			{
				setObjVar (prototype, "modules.junk_dealer", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("clothing_station"))
			{
				setObjVar (prototype, "modules.clothing_station", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("weapon_station"))
			{
				setObjVar (prototype, "modules.weapon_station", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("structure_station"))
			{
				setObjVar (prototype, "modules.structure_station", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("ship_station"))
			{
				setObjVar (prototype, "modules.ship_station", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("food_station"))
			{
				setObjVar (prototype, "modules.food_station", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("xp_bonus"))
			{
				setObjVar (prototype, "modules.xp_bonus", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("rebel"))
			{
				setObjVar (prototype, "modules.rebel", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("imperial"))
			{
				setObjVar (prototype, "modules.imperial", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("extra_life"))
			{
				setObjVar (prototype, "modules.extra_life", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("holonet"))
			{
				setObjVar (prototype, "modules.holonet", itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("vehicle_repair"))
			{
				setObjVar (prototype, "modules.vehicle_repair", itemAttributes[i].currentValue);
			}
			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(),
					itemAttributes[i].currentValue);
			}
		}
	}
}



