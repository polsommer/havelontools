/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.hue;
include library.jedi;
include library.weapons;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


const string SABER_BLADE_INDEX                        = "private/index_color_blade";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	// some of the component values need to be inverted before being added to the object's attribs
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
	  	if (itemAttributes[i] == null)
	  		continue;

		if ( itemAttributes[i].name.getAsciiId().equals("attackSpeed"))
		{
			itemAttributes[i].currentValue = (itemAttributes[i].minValue + itemAttributes[i].maxValue) - itemAttributes[i].currentValue;
		}
	}
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	//int colorIndex = 0;
	//int colorIndexNew = 0;
	//int colorChanged = 0;
	float weaponMinDamage = 0f;
	float weaponMaxDamage = 0f;
	float weaponAttackSpeed = 0f;
	float weaponWoundChance = 0f;
	float weaponForceCost = 0f;
	int   attackCost = 0;
	int   accuracy = 0;
	//initialize storage for weapon range data
	base_class.range_info rangeData = new base_class.range_info();
	rangeData.minRange = 0.0f;
	rangeData.maxRange = 5.0f;

	// HERE we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting for CRAFTING_BASE_LIGHTSABER");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))	//unlike other crafting, lightSabers MUST HAVE ALL ATTRIBUTES STORED AS OBJVARS IN ADDITION TO ATTRIBUTE MEMBER VARIABLES
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if ( itemAttributes[i].name.getAsciiId().equals("minDamage") )
			{
				weaponMinDamage = (int)(itemAttributes[i].currentValue);
				if ( weaponMinDamage < 1 ) weaponMinDamage = 1;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("maxDamage") )
			{
				weaponMaxDamage = (int)(itemAttributes[i].currentValue);
				if ( weaponMaxDamage < 2 ) weaponMaxDamage = 2;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("attackSpeed") )  // invert when writing to object
			{
				weaponAttackSpeed = (itemAttributes[i].currentValue / 100.0f); // weapon speed is stored in the schematic template as 10 times the actual value, so we scale it back down here
			  	if ( weaponAttackSpeed < 0.25f ) weaponAttackSpeed = 0.25f;

				setWeaponAttackSpeed (prototype, weaponAttackSpeed);
			}
			/*
			else if ( itemAttributes[i].name.getAsciiId().equals("woundChance") )
			{
				weaponWoundChance = itemAttributes[i].currentValue;
				if ( weaponWoundChance < 1.0f) weaponWoundChance = 1.0f;

				setWeaponWoundChance (prototype, weaponWoundChance);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("forceCost"))
			{
				if ( itemAttributes[i].currentValue < 0 )
				{
					itemAttributes[i].currentValue = 0;
				}
				weaponForceCost = itemAttributes[i].currentValue;
				setObjVar (prototype, jedi.VAR_SABER_BASE + "." + jedi.VAR_FORCE, itemAttributes[i].currentValue);
				setObjVar (prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_FORCE, itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("attackCost"))
			{
			   	attackCost = (int) itemAttributes[i].currentValue;
			}
			// Accuracy
			else if ( itemAttributes[i].name.getAsciiId().equals("accuracy"))
			{
				accuracy = (int)(itemAttributes[i].currentValue);
			}
			*/
			else
			{
				LOG("saberscrafting", "Error. Unknown Attribute Read in. Attribute was " + itemAttributes[i].name + ".");
				debugServerConsoleMsg(null, "Error. Unknown Attribute Read in. Attribute was " + itemAttributes[i].name + ".");
			}
		}
	}

/*
	LOG("saberscrafting", "------------------------------------");
	LOG("saberscrafting", "weaponMinDamage=" + weaponMinDamage);
	LOG("saberscrafting", "weaponMaxDamage=" + weaponMaxDamage);
	LOG("saberscrafting", "weaponAttackSpeed=" + weaponAttackSpeed);
	LOG("saberscrafting", "weaponWoundChance=" + weaponWoundChance);
	LOG("saberscrafting", "weaponForceCost=" + weaponForceCost);
	LOG("saberscrafting", "attackCost=" + attackCost);
	LOG("saberscrafting", "accuracy=" + accuracy);
	LOG("saberscrafting", "------------------------------------");
*/	
	if ( weaponMinDamage >= weaponMaxDamage )
		weaponMinDamage -= 1;

	setWeaponMinDamage (prototype, (int)(weaponMinDamage));
	setWeaponMaxDamage (prototype, (int)(weaponMaxDamage));

	setWeaponRangeInfo(prototype, rangeData);
	setWeaponAccuracy(prototype, accuracy);
	setWeaponAttackCost(prototype, attackCost);
	setWeaponDamageType(prototype, DAMAGE_ENERGY);
	//this will ensure the conversion code doesnt mess with new crafted objects
	setConversionId(prototype,weapons.CONVERSION_VERSION);
	weapons.setWeaponData(prototype);

	// Bore us out some new fangled sockets provided we have some minimal skill.
	obj_id player = getOwner(prototype);
	int[] mods = getEnhancedSkillStatisticModifiers(player, getExperimentSkillMods());
	if ( mods != null )
	{
		int sockets = 0;
		int experimentModTotal = 0;
		for ( int j = 0; j < mods.length; ++j )
			experimentModTotal += mods[j];
		if ( experimentModTotal > craftinglib.socketThreshold )
		{

			int chances = 1 + (experimentModTotal - craftinglib.socketThreshold) / craftinglib.socketDelta;
			for ( int j = 0; j < chances; ++j )
			{
				if ( rand(1, 100) > craftinglib.socketChance )
					++sockets;
			}
			if ( sockets > craftinglib.maxSockets )
				sockets = craftinglib.maxSockets;

			if ( sockets > 0 )
				setCondition(prototype, CONDITION_MAGIC_ITEM);
		}

		setSkillModSockets(prototype, sockets);
	}

	
	// Save saber default stats
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_ELEMENTAL_DAM_TYPE, DAMAGE_NONE);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_ELEMENTAL_DAM_AMNT, 0);

	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_MIN_DMG, (int)weaponMinDamage);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_MAX_DMG, (int)weaponMaxDamage);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_SPEED, weaponAttackSpeed);

	range_info ri	= getWeaponRangeInfo(prototype);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_WOUND, weaponWoundChance);

	float radius = getWeaponDamageRadius(prototype);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_RADIUS, radius);

	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_ATTACK_COST, attackCost);
	setObjVar(prototype, jedi.VAR_SABER_DEFAULT_STATS + "." + jedi.VAR_ACCURACY, accuracy);
}

