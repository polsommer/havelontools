/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.weapons;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	// some of the component values need to be negated before being added to the object's attribs
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
	  	if (itemAttributes[i] == null)
	  		continue;

		if ( itemAttributes[i].name.getAsciiId().equals("attackSpeed") ||
			 itemAttributes[i].name.getAsciiId().equals("attackCost"))
		{
			itemAttributes[i].currentValue = (itemAttributes[i].minValue + itemAttributes[i].maxValue) - itemAttributes[i].currentValue;
		}
	}
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	//initialize storage for weapon cost
	int attackCost = 0;
	int accuracy = 0;

	//initialize storage for weapon range data
	base_class.range_info rangeData = new base_class.range_info();

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if ( itemAttributes[i].name.getAsciiId().equals("minDamage") )
			{
				setWeaponMinDamage (prototype, (int)itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("maxDamage") )
			{
				setWeaponMaxDamage (prototype, (int)itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("attackSpeed") )  // invert when writing to object
			{
				// weapon speed is stored in the schematic template as 10 times the actual value, so we scale it back down here
				float speed = itemAttributes[i].currentValue;
				if(speed >= 1000) // conversion fix hack
				{
					speed /= 100;
				}
				else
				{
					speed /= 10;
				}
				
				setWeaponAttackSpeed (prototype, speed);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("woundChance") )
			{
				setWeaponWoundChance (prototype, itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("minRange"))
			{
				rangeData.minRange = itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("maxRange"))
			{
				rangeData.maxRange = itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("accuracy"))
			{
				accuracy = (int)itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("reuseTimer"))
			{
				setObjVar( prototype, "reuseTimer", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("attackCost"))
			{
				attackCost = (int) itemAttributes[i].currentValue;
			}
			
			else if ( itemAttributes[i].name.getAsciiId().equals("blindDuration"))
			{
				setObjVar( prototype, "blindDuration", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("blindChance"))
			{
				setObjVar( prototype, "blindChance", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("slowDuration"))
			{
				setObjVar( prototype, "slowDuration", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("slowIntensity"))
			{
				setObjVar( prototype, "slowIntensity", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("burnDuration"))
			{
				setObjVar( prototype, "burnDuration", (int)itemAttributes[i].currentValue );
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("burnIntensity"))
			{
				setObjVar( prototype, "burnIntensity", (int)itemAttributes[i].currentValue );
			}

			else
			{
				debugServerConsoleMsg(null, "Error. Unknown Attribute Read in. Attribute was " + itemAttributes[i].name + ".");
			}
		}
	}

	setWeaponRangeInfo(prototype, rangeData);
	setWeaponAttackCost(prototype, attackCost);
	setWeaponAccuracy(prototype, accuracy);
	weapons.setWeaponData(prototype);
}

