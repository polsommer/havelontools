include library.utils;
include library.craftinglib;
include library.consumable;

inherits systems.crafting.food.crafting_base_food_new;

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_chef_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"food_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"food_experimentation"
};

string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

void fillStomach( obj_id prototype, int filling )
{
	int[] stomach = { filling, 0, 0 };
	setObjVar( prototype, consumable.VAR_CONSUMABLE_STOMACH_VALUES, stomach );	// Suppress linting - We know this array will always be at least three elements long
}

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1)
		}
	),
	new resource_weight("flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1)
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST,		1),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1)
		}
	),
	new resource_weight("flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1)
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST,		3),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		3),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	)
};
/* @} End constants */

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

