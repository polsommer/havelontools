/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}



/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	int[] effect_type = { 0, 0, 0, 0, 0, 0 };
	int[] effect_mod = { 0, 0, 0, 0, 0, 0 };

	// Set properties.
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if ( !calcAndSetPrototypeProperty( prototype, itemAttributes[i]) )
		{
			if ( itemAttributes[i].name.getAsciiId().startsWith("mod_idx"))
			{
				if (itemAttributes[i].name.getAsciiId().endsWith("one"))
					effect_type[0] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("two"))
					effect_type[1] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("three"))
					effect_type[2] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("four"))
					effect_type[3] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("five"))
					effect_type[4] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("six"))
					effect_type[5] = (int)itemAttributes[i].currentValue;
			}
			else if ( itemAttributes[i].name.getAsciiId().startsWith("mod_val"))
			{
				if (itemAttributes[i].name.getAsciiId().endsWith("one"))
					effect_mod[0] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("two"))
					effect_mod[1] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("three"))
					effect_mod[2] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("four"))
					effect_mod[3] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("five"))
					effect_mod[4] = (int)itemAttributes[i].currentValue;
				else if (itemAttributes[i].name.getAsciiId().endsWith("six"))
					effect_mod[5] = (int)itemAttributes[i].currentValue;
			}
			else
			{
				if (itemAttributes[i].minValue == itemAttributes[i].maxValue)
				{
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), (int)itemAttributes[i].currentValue );
				}
				else
				{
					setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), (float)itemAttributes[i].currentValue );
				}
			}
		}
	}

	for (int i = 5; i >= 0; i--)
	{
		if (effect_type[i] != 0)
		{
			for (int j = 0; j < i; j++)
			{
				if (effect_type[j] == 0)
				{
					effect_type[j] = effect_type[i];
					effect_mod[j] = effect_mod[i];
					effect_type[i] = 0;
					effect_mod[i] = 0;
				}
			}
		}
	}

	string root = craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + craftinglib.TISSUE_SKILL_MODS + ".";
	setObjVar ( prototype, root + craftinglib.TISSUE_SKILL_INDEX, effect_type );		// Suppress linting - We know that these two arrays will
	setObjVar ( prototype, root + craftinglib.TISSUE_SKILL_VALUE, effect_mod );			// Suppress linting - always be at least six elements long
}

