/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_new_armor_core.script
 * Description:  base script for crafting new armor cores
 * @author       $Author: Steve Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */

include library.armor;
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v0.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	if ( !hasObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL) )
	{
		CustomerServiceLog("crafting", "WARNING: armor core draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			armor.OBJVAR_ARMOR_LEVEL + " objvar set");
		return;
	}
	if ( !hasObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY) )
	{
		CustomerServiceLog("crafting", "WARNING: armor core draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			armor.OBJVAR_ARMOR_CATEGORY + " objvar set");
		return;
	}

	int armorLevel = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL);
	int armorCategory = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY);
	int coreRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_CORE_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	int segmentRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_SEGMENT_ROW), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	if ( coreRow < 0 || segmentRow < 0)
	{
		CustomerServiceLog("crafting", "WARNING: armor datatable " + armor.DATATABLE_ARMOR + " has missing segment or core row (" +
			segmentRow + "," + coreRow + ")");
		return;
	}

	obj_var_list componentData = getObjVarList(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME);
	if ( componentData != null )
		armor.rescaleComponentData(getSelf(), componentData, segmentRow, coreRow);

	armor.updateItemAttributes(getSelf(), itemAttributes, coreRow);

  	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");

	if ( !hasObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL) )
	{
		CustomerServiceLog("crafting", "WARNING: armor core draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			armor.OBJVAR_ARMOR_LEVEL + " objvar set");
		return;
	}
	if ( !hasObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY) )
	{
		CustomerServiceLog("crafting", "WARNING: armor core draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			armor.OBJVAR_ARMOR_CATEGORY + " objvar set");
		return;
	}
	int armorLevel = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL);
	int armorCategory = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY);
	int coreRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_CORE_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_LEVEL, armorLevel);
	setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_CATEGORY, armorCategory);

	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			if (itemAttributes[i].currentValue < itemAttributes[i].minValue)
				itemAttributes[i].currentValue = itemAttributes[i].minValue;
			else if (itemAttributes[i].currentValue > itemAttributes[i].maxValue)
				itemAttributes[i].currentValue = itemAttributes[i].maxValue;
			setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);

			if ( itemAttributes[i].name.equals(armor.OBJVAR_CONDITION))
			{
				// save the absolute hp value to the prototype
				float hp = armor.getAbsoluteArmorAttribute(itemAttributes[i].currentValue, coreRow, armor.DATATABLE_MIN_CONDITION_COL);
				if ( hp != Float.MIN_VALUE )
					setMaxHitpoints(prototype, (int)hp);
			}
		}
	}

	// recon and assault cores get a special armor layer attached to them
	if ( armorCategory == AC_reconnaissance )
	{
		armor.setArmorSpecialProtectionPercent(prototype, armor.DATATABLE_RECON_LAYER, 1.0f);
	}
	else if ( armorCategory == AC_assault )
	{
		armor.setArmorSpecialProtectionPercent(prototype, armor.DATATABLE_ASSAULT_LAYER, 1.0f);
	}

	// save any scaled data to the prototype
	armor.saveScaledDataToPrototype(getSelf(), prototype, itemAttributes, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME);
}





