/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.clothing.crafting_base_clothing;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_tailor_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"clothing_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"clothing_experimentation",
	"clothing_complexity"
};

// skill mod names - these skill mods will affect the customization part of the crafting session if the player has them
const string[] CUSTOMIZATION_SKILL_MODS = {
	"clothing_customization"
};


const string[] APPEARANCES = {
	"object/tangible/wearables/pants/shared_pants_s02.iff",
	"object/tangible/wearables/pants/shared_pants_s17.iff",
	"object/tangible/wearables/pants/shared_pants_s18.iff",
	"object/tangible/wearables/pants/shared_pants_s26.iff",
	"object/tangible/wearables/pants/shared_pants_s27.iff",
	"object/tangible/wearables/pants/shared_pants_s32.iff"
};

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_COLD_RESIST,  1),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_HEAT_RESIST,  1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_COLD_RESIST,  1),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST, 4),
		new resource_weight.weight(craftinglib.RESOURCE_HEAT_RESIST,  1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	)
};
/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

string[] getCustomizationSkillMods()
{
	return CUSTOMIZATION_SKILL_MODS;
}


string[] getAppearances(obj_id player, draft_schematic.slot[] slots)
{
	return APPEARANCES;
}

draft_schematic.custom[] getCustomizations(obj_id player, draft_schematic.custom[] customizations)
{
	if (  customizations == null || customizations.length == 0 )
	{
		return null;
	}
	//figure out player's customization skillmods
	string[] skills = getCustomizationSkillMods();
	float playerCustomizationMod = 0;
	// grab skillMod values for selected skillMods
	if ( skills != null )
	{
		int[] mods = getEnhancedSkillStatisticModifiers(player, skills);
		for ( int i = 0; i < mods.length; ++i )
		{
			playerCustomizationMod += mods[i];
		}
	}
	if ( playerCustomizationMod > 255 )
	{
		playerCustomizationMod = 255;
	}
	for ( int i = 0; i < customizations.length; ++i )
	{
		customizations[i].maxValue = (int)(playerCustomizationMod);
	}
	if ( customizations.length > 0 && playerCustomizationMod < 101 )
	{
		for ( int i = 1; i < customizations.length; ++i )
		{
			customizations[i] = null;
		}
	}
	else if ( customizations.length > 0 && playerCustomizationMod < 201 )
	{
		for ( int i = 2; i < customizations.length; ++i )
		{
			customizations[i] = null;
		}
	}
	return customizations;
}


resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

