/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:
 * Description:
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_artisan_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"general_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"general_experimentation"
};

/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

trigger OnFinalizeSchematic(obj_id player, obj_id prototype, draft_schematic schematic)
{
	draft_schematic.slot[] schslots = schematic.getSlots();
	int type = 0;
	for ( int i=0; i<schslots.length; i++ )
	{
		if ( schslots[i] != null )
		{
			for ( int j=0; j<schslots[i].ingredients.length; j++ )
			{
				if ( hasObjVar( schslots[i].ingredients[j].ingredient, "bugsample" ) )
				{
					type = getIntObjVar( schslots[i].ingredients[j].ingredient, "bugsample" );
					setObjVar( prototype, "bugsample", type );
				}
			}
		}
	}
	string_id nameid = getNameStringId( prototype );
	string name = localize( nameid );
	switch ( type )
	{
		case 1:
			name = name + " (Bats)";
			break;
		case 2:
			name = name + " (Bees)";
			break;
		case 3:
			name = name + " (Butterflies)";
			break;
		case 4:
			name = name + " (Flies)";
			break;
		case 5:
			name = name + " (Glowzees)";
			break;
		case 6:
			name = name + " (Moths)";
			break;
	}
	setName( prototype, name );

	draft_schematic.attribute[] objectAttribs = schematic.getAttribs();
	dictionary craftingValuesDictionary = new dictionary();

	calcAndSetPrototypeProperties (prototype, objectAttribs, craftingValuesDictionary);
	setSchematicAttributes(self, objectAttribs);

	// clean up unneeded objvars
	removeObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME);

	return SCRIPT_CONTINUE;
}


/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
};
/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

