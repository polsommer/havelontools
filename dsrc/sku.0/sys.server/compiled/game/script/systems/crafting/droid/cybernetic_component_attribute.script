/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        <title>
 * Description:  <description>
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.craftinglib;
include library.utils;
include library.pet_lib;


/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if(!isIdValid(self) || !exists(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;
	

	if(hasObjVar(self, "cybernetic.special_protection.value") && hasObjVar(self, "cybernetic.special_protection.type"))
	{
		//get the string of the special protection
		int protectionType = getIntObjVar(self, "cybernetic.special_protection.type");
		string protectionString = getSpecialProtectionString(protectionType);
		
		names[idx] = "special_protection_type" + "_" + protectionString;
		//let's make the value readable for the player - multiply by 100
		float preAttrib = getFloatObjVar(self, "cybernetic.special_protection.value");
		preAttrib *= 100.0f;
		int attrib = (int)preAttrib;
		attribs[idx] = " " + attrib;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	/*
	if (hasObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME +".crafting_module"))
	{
		int craftingModuleValue = (int)getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME +".crafting_module");
		if (( craftingModuleValue > 0) && ( craftingModuleValue < 100000))
		{
			names[idx] = "crafting_station";
			attribs[idx] = " installed";
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;

			if ( craftingModuleValue >= 10000 )
			{
				names[idx] = "crafting_station_space";
				attribs[idx] = " installed";
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
				craftingModuleValue = (craftingModuleValue - ((craftingModuleValue/10000)*10000));
			}
			if ( craftingModuleValue >= 1000 )
			{
				names[idx] = "crafting_station_structure";
				attribs[idx] = " installed";
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
				craftingModuleValue = (craftingModuleValue - ((craftingModuleValue/1000)*1000));
			}
			if  (craftingModuleValue >= 100)
			{
				names[idx] = "crafting_station_clothing";
				attribs[idx] = " installed";
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
				craftingModuleValue = (craftingModuleValue - ((craftingModuleValue/100)*100));
			}
			if  (craftingModuleValue >= 10)
			{
				names[idx] = "crafting_station_food";
				attribs[idx] = " installed";
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
				craftingModuleValue = (craftingModuleValue - ((craftingModuleValue/10)*10));
			}
			if  (craftingModuleValue >= 1)
			{
				names[idx] = "crafting_station_weapon";
				attribs[idx] = " installed";
				idx++;
				if (idx >= names.length)
					return SCRIPT_CONTINUE;
			}
		}
	}
	if (hasObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".trap_bonus"))
	{
		names[idx] = "trap_bonus";
		int trapBonus = (int)getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME +".trap_bonus");
		attribs[idx] = " " + trapBonus;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	if (hasObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME +".entertainer_effects"))
	{
		int raw_effects = (int)getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME +".entertainer_effects");
		if(raw_effects > 0)
		{
			int i = 1;
			resizeable string[] available_effects = new string[0];
			while(i <= pet_lib.LIGHTING_EFFECTS.length)
			{
				// Effects are decimal packed.
				int result = (int)((raw_effects % Math.pow(10, i)) / Math.pow(10, i - 1));
				if (result >= 1)
					available_effects = utils.addElement(available_effects, pet_lib.LIGHTING_EFFECTS[i - 1]);
				i++;
			}

			if(available_effects.length > 0)
			{
				for(int j = 0; j < available_effects.length; j++)
				{
					names[idx] = (String)available_effects.get(j);
					attribs[idx] = " installed";
					idx++;
					if (idx >= names.length)
						return SCRIPT_CONTINUE;
				}
			}
		}
	}
	*/
	
	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
string getSpecialProtectionString(int protectionType)
{
	switch(protectionType)
	{
		case 0:
			return "kinetic";
		case 1:
			return "energy";
		case 2: 
			return "electricity";
		case 4:
			return "heat";
		case 5:
			return "cold";
		case 6: 
			return "acid";
		default:
			return "unknown";
	}
}