/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"science_medic_crafting_01"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"medicine_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"medicine_experimentation",
	"medicine_complexity"
};

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("power", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,  2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      4)
		}
	),
	new resource_weight("charges", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,  2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      4)
		}
	),
	new resource_weight("duration", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,  3),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      2)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS, 2)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("power", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,  2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      4)
		}
	),
	new resource_weight("charges", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,  2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      4)
		}
	),
	new resource_weight("duration", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,  3),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      2)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS, 2)
		}
	)
};
/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	//initialize storage for power
	int power = 0;
	int charges = 0;
	float duration = 0;

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if ( itemAttributes[i].name.getAsciiId().equals("power"))
			{
				power = (int) (itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("charges"))
			{
				charges = (int) (itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("duration"))
			{
				duration = (float) (itemAttributes[i].currentValue);
			}
			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(),
					itemAttributes[i].currentValue);
			}
		}
	}

	setObjVar(prototype, "deadeye_eff", power);
	setObjVar(prototype, "deadeye_dur", duration);
	setCount( prototype, charges );
}

