/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.bio_engineer.crafting_base_bio_component_armor;

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"outdoors_bio_engineer_master"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"medicine_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"medicine_experimentation",
	"medicine_complexity"
};

// skill mod names - these skill mods will affect the customization part of the crafting session if the player has them
const string[] CUSTOMIZATION_SKILL_MODS = {
	"bio_engineer_customization"
};


/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("mod_val_one", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mod_val_two", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mod_val_three", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mod_val_four", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mod_val_five", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mod_val_six", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,		1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("mod_val_one", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("mod_val_two", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("mod_val_three", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("mod_val_four", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("mod_val_five", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("mod_val_six", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,			2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,		5),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,		5)
		}
	)
};
/* @} End constants */


string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

