/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.food.crafting_base_ingredient;

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("health_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("health_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("str_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("str_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("con_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("con_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("action_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("action_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("quick_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("quick_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("stam_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("stam_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mind_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("mind_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("focus_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("focus_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("will_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("will_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		1),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    		1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("health_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("health_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("str_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("str_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("con_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("con_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("action_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("action_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("quick_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("quick_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("stam_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("stam_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("mind_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("mind_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("focus_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("focus_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("will_e", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			3),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	4),
		}
	),
	new resource_weight("will_dur", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				4),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      		2),
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    		1)
		}
	)
};
/* @} End constants */

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

