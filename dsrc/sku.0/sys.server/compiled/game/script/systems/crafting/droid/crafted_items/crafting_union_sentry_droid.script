/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:
 * Description:
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.droid.crafting_base_droid;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_droidengineer_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"droid_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"droid_experimentation"
};


// skill mod names - these skill mods will affect the customization part of the crafting session if the player has them
const string[] CUSTOMIZATION_SKILL_MODS = {
	"droid_customization"
};

const string   CREATURE_NAME = "union_sentry_droid_crafted";

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("armorEffectiveness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("armor_toughness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("mechanism_quality", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("power_level", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1)
		}
	),
	new resource_weight("storage_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("data_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("personality_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("medical_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("crafting_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("repair_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("decayRate", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("cmbt_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("armor_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("armorEffectiveness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("armor_toughness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("mechanism_quality", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("power_level", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1)
		}
	),
	new resource_weight("storage_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("data_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("personality_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("medical_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("crafting_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("repair_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("decayRate", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("cmbt_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	),
	new resource_weight("armor_module", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1),
		new resource_weight.weight(craftinglib.RESOURCE_TOUGHNESS,    1)
		}
	)
};
/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}


string[] getCustomizationSkillMods()
{
	return CUSTOMIZATION_SKILL_MODS;
}

/*
string[] getAppearances(obj_id player, draft_schematic.slot[] slots)
{
	return APPEARANCES;
}
*/

string getCreatureName ()
{
	return CREATURE_NAME;
}


draft_schematic.custom[] getCustomizations(obj_id player, draft_schematic.custom[] customizations)
{
	if (  customizations == null || customizations.length == 0 )
	{
		return null;
	}
	//figure out player's customization skillmods
	string[] skills = getCustomizationSkillMods();
	float playerCustomizationMod = 0;
	// grab skillMod values for selected skillMods
	if ( skills != null )
	{
		int[] mods = getSkillStatisticModifiers(player, skills);
		for ( int i = 0; i < mods.length; ++i )
		{
			playerCustomizationMod += mods[i];
		}
	}
	if ( playerCustomizationMod < 32 )
	{
		playerCustomizationMod = 32;
	}
	if ( playerCustomizationMod > 64 )
	{
		playerCustomizationMod = 64;
	}
	for ( int i = 0; i < customizations.length; ++i )
	{
		customizations[i].maxValue = (int)(playerCustomizationMod);
	}
	return customizations;
}



resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

