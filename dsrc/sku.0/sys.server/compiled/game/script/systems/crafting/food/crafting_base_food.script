/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.consumable;
include library.player_stomach;
include library.bio_engineer;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	// some of the component values need to be negated before being added to the object's attribs
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
		if (itemAttributes[i] == null)
	  		continue;

		if ( itemAttributes[i].name.getAsciiId().equals("filling"))
		{
			itemAttributes[i].currentValue = (itemAttributes[i].minValue + itemAttributes[i].maxValue) - itemAttributes[i].currentValue;
		}
	}
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}



/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	// Storage for properties.
	int filling = 0;
	int health_e = 0, health_dur = 0;
	int con_e = 0, con_dur = 0;
	int action_e = 0, action_dur = 0;
	int stam_e = 0, stam_dur = 0;

	// Bio-engineer bonus properties
	obj_id self = getSelf();
	string root = craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + craftinglib.TISSUE_SKILL_MODS + ".";
	int[] effect_type = getIntArrayObjVar(self, root + craftinglib.TISSUE_SKILL_INDEX);
	int[] effect_mod = getIntArrayObjVar(self, root + craftinglib.TISSUE_SKILL_VALUE);

	// Try a work around to get old food crates to work.
	// This may break old manufacturing schematics.
	obj_var_list attributeList = getObjVarList( self, "crafting_attributes" );
	if ( attributeList != null )
	{
		for ( int i=0; i<attributeList.getNumItems(); i++ )
		{
			obj_var objVar = attributeList.getObjVar( i );
			string name = objVar.getName();
			int value = (int) objVar.getFloatData();

			if ( name.equals("crafting:filling") )
			{
				filling = value;
			}
			else if ( name.equals("crafting:health_e") )
			{
				health_e = value;
			}
			else if ( name.equals("crafting:health_dur") )
			{
				health_dur = value;
			}
			else if ( name.equals("crafting:con_e") )
			{
				con_e = value;
			}
			else if ( name.equals("crafting:con_dur") )
			{
				con_dur = value;
			}
			else if ( name.equals("crafting:action_e") )
			{
				action_e = value;
			}
			else if ( name.equals("crafting:action_dur") )
			{
				action_dur = value;
			}
			else if ( name.equals("crafting:stam_e") )
			{
				stam_e = value;
			}
			else if ( name.equals("crafting:stam_dur") )
			{
				stam_dur = value;
			}
			else if ( name.equals( "crafting:quantity" ) )
			{
				setCount( prototype, value );
			}
		}
	}

	// Check the bio-engineer properties and adjust the mods accordingly
	if ( effect_type != null && effect_mod != null && effect_mod.length == effect_type.length)
	{
		for (int i = 0; i < effect_type.length; i++)
		{
			switch (effect_type[i])
			{
				case bio_engineer.BIO_COMP_EFFECT_DURATION:
					health_dur += (int) ((health_dur * effect_mod[i]) / 100);
					con_dur += (int) ((con_dur * effect_mod[i]) / 100);
					action_dur += (int) ((action_dur * effect_mod[i]) / 100);
					stam_dur += (int) ((stam_dur * effect_mod[i]) / 100);
					break;

				case bio_engineer.BIO_COMP_EFFECT_FLAVOR:
					health_e += (int) ((health_e * effect_mod[i]) / 100);
					con_e += (int) ((con_e * effect_mod[i]) / 100);
					action_e += (int) ((action_e * effect_mod[i]) / 100);
					stam_e += (int) ((stam_e * effect_mod[i]) / 100);
					break;

				case bio_engineer.BIO_COMP_EFFECT_HEALTH_MOD:
					health_e += effect_mod[i];
					break;

				case bio_engineer.BIO_COMP_EFFECT_CON_MOD:
					con_e += effect_mod[i];
					break;

				case bio_engineer.BIO_COMP_EFFECT_ACTION_MOD:
					action_e += effect_mod[i];
					break;

				case bio_engineer.BIO_COMP_EFFECT_STAM_MOD:
					stam_e += effect_mod[i];
					break;
			}
		}
	}

	// Create the stat mods.
	resizeable attrib_mod[] am = new attrib_mod[0];
	if ( (health_e != 0) && (health_dur != 0) )
	{
		attrib_mod new_am = new attrib_mod( HEALTH, health_e, (float) health_dur, 0.0f, 0.0f );
		am = utils.addElement( am, new_am );
	}
	if ( (con_e != 0) && (con_dur != 0) )
	{
		attrib_mod new_am = new attrib_mod( CONSTITUTION, con_e, (float) con_dur, 0.0f, 0.0f );
		am = utils.addElement( am, new_am );
	}
	if ( (action_e != 0) && (action_dur != 0) )
	{
		attrib_mod new_am = new attrib_mod( ACTION, action_e, (float) action_dur, 0.0f, 0.0f );
		am = utils.addElement( am, new_am );
	}
	if ( (stam_e != 0) && (stam_dur != 0) )
	{
		attrib_mod new_am = new attrib_mod( STAMINA, stam_e, (float) stam_dur, 0.0f, 0.0f );
		am = utils.addElement( am, new_am );
	}
	if ( (am != null) && (am.length > 0) )
		setObjVar( prototype, consumable.VAR_CONSUMABLE_MODS, am );

	// Set all stomach filling value.
	fillStomach( prototype, filling );
}

void fillStomach( obj_id prototype, int filling )
{
}
