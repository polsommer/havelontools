/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_base_chassis.script
 * Description:  base crafting script used by all chasses
 * @author       $Author: wwallace (orig. script by RThornton)$
 * @version      $Revision: 0$
 */

include library.utils;
include library.craftinglib;
include library.space_crafting;

inherits systems.crafting.crafting_base;

/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
		if (itemAttributes[i] == null)
			 continue;

		if ( itemAttributes[i].name.getAsciiId().equals("energy_maintenance") ||
			 itemAttributes[i].name.getAsciiId().equals("energy_per_shot") ||
			 itemAttributes[i].name.getAsciiId().equals("mass") ||
			 itemAttributes[i].name.getAsciiId().equals("refire_rate"))
		{
			itemAttributes[i].currentValue = (itemAttributes[i].minValue + itemAttributes[i].maxValue) - itemAttributes[i].currentValue;
		}

		if ( itemAttributes[i].name.getAsciiId().equals("refire_rate") ||
			 itemAttributes[i].name.getAsciiId().equals("effective_shields") ||
			 itemAttributes[i].name.getAsciiId().equals("effective_armor"))

		{
			itemAttributes[i].currentValue = (itemAttributes[i].currentValue * 0.001f);
		}


	}
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}



/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");

	attachScript(prototype, "space.crafting.subcomponent");

	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object

			if ( itemAttributes[i].name.getAsciiId().equals("damage_max"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".damage_max", itemAttributes[i].currentValue);
			}
			if ( itemAttributes[i].name.getAsciiId().equals("damage_min"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".damage_min", itemAttributes[i].currentValue);
			}
			if ( itemAttributes[i].name.getAsciiId().equals("effective_shields"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".effective_shields", itemAttributes[i].currentValue);
			}
			if ( itemAttributes[i].name.getAsciiId().equals("effective_armor"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".effective_armor", itemAttributes[i].currentValue);
			}
			if ( itemAttributes[i].name.getAsciiId().equals("energy_per_shot"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".energy_per_shot", itemAttributes[i].currentValue);
			}
			if ( itemAttributes[i].name.getAsciiId().equals("refire_rate"))
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".refire_rate", itemAttributes[i].currentValue);
			}

			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(),
					itemAttributes[i].currentValue);
			}
		}
	}
}