/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

include library.utils;
include library.craftinglib;
include library.consumable;
include library.player_stomach;
include library.bio_engineer;

include library.debug;

inherits systems.crafting.crafting_base;

const string VERSION = "v1.00.00";
const string FOOD_DATA = "datatables/food/food_data.iff";

const string[] REQUIRED_SKILLS = {
	"crafting_artisan_novice"
};

const string[] ASSEMBLY_SKILL_MODS = {
	"general_assembly"
};

const string[] EXPERIMENT_SKILL_MODS = {
	"general_experimentation"
};

string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1)
		}
	),
	new resource_weight("flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				1),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,  		1)
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	1),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	)
};

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("nutrition", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	2),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,			1)
		}
	),
	new resource_weight("flavor", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_FLAVOR,				2),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,  		1)
		}
	),
	new resource_weight("quantity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_POTENTIAL_ENERGY,	3),
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		1)
		}
	),
	new resource_weight("filling", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_DECAY_RESIST,		3),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,    		1)
		}
	)
};

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

void calcAndSetPrototypeProperties( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if ( !calcAndSetPrototypeProperty ( prototype, itemAttributes[i]) )
		{
		}
	}

	obj_id self = getSelf();
	if ( hasObjVar( self, "crafting_components.bio_component" ) )
	{
		if ( hasObjVar( self, "crafting_components.bio_component.add_faction" ) )
			setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_faction", getIntObjVar( self, "crafting_components.bio_component.add_faction" ) );

		if ( hasObjVar( self, "crafting_components.bio_component.add_filling" ) )
			setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_filling", getIntObjVar( self, "crafting_components.bio_component.add_filling" ) );

		if ( hasObjVar( self, "crafting_components.bio_component.add_flavor" ) )
			setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_flavor", getIntObjVar( self, "crafting_components.bio_component.add_flavor" ) );

		if ( hasObjVar( self, "crafting_components.bio_component.add_nutrition" ) )
			setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_nutrition", getIntObjVar( self, "crafting_components.bio_component.add_nutrition" ) );

		if ( hasObjVar( self, "crafting_components.bio_component.add_quantity" ) )
			setObjVar( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".add_quantity", getIntObjVar( self, "crafting_components.bio_component.add_quantity" ) );
	}
}
