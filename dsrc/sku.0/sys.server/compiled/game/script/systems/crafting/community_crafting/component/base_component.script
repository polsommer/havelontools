/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        systems.crafting.community_crafting.component.base_component.script
 * Description:  base script for community crafting project components
 * @author       $Author: Steve Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );

	// make sure the attributes don't go above their max
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
		if ( itemAttributes[i].currentValue > itemAttributes[i].maxValue )
			itemAttributes[i].currentValue = itemAttributes[i].maxValue;
		else if ( itemAttributes[i].currentValue < itemAttributes[i].minValue )
			itemAttributes[i].currentValue = itemAttributes[i].minValue;
	}
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(),
				itemAttributes[i].currentValue);
		}
	}
}



