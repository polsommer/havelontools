/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.powerup;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";

// *** All knobs are epxressed in positive values - negation is handled by the code where appropriate

// Barrel knobs
const float MAX_BARREL_DAMAGE_BONUS 		= 0.35f; // 30% Damage increase
const float MAX_BARREL_SPEED_PENALTY 		= 0.25f; // 25% Speed decrease

// Coupler knobs
const float MAX_COUPLER_ELEMENTAL_BONUS 	= 0.35f; // 35% Elemental damage increase
const float MAX_COUPLER_DAMAGE_PENALTY 		= 0.35f; // 30% Normal damage decrease

// Grip knobs
const float MAX_GRIP_SPEED_BONUS 			= 0.35f; // 30% Speed increase
const float MAX_GRIP_ACCURACY_PENALTY 		= 75.0f;// 30 point Accuracy penalty

// Muzzle knobs
const float MAX_MUZZLE_WOUND_BONUS 			= 0.35f; // 30% Wound Increase
const float MAX_MUZZLE_ACTION_PENALTY 		= 0.35f; // 30% Action cost increase

// Scope knobs
const float MAX_SCOPE_ACCURACY_BONUS 		= 75.0f;// 30 point Accuracy Increase
const float MAX_SCOPE_SPEED_PENALTY 		= 0.3f; // 30% Speed decrease

// Stock knobs
const float MAX_STOCK_ACTION_BONUS 			= 0.3f; // 30% Action cost decrease
const float MAX_STOCK_ACCURACY_PENALTY 		= 30.0f;// 30 point Accuracy penalty

/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{			
	float effectVal = 0.0f;
	float efficiencyVal = 0.0f;
	
	for(int i = 0; i < itemAttributes.length; ++i) // go through all attributes
	{
		if(itemAttributes[i] == null)
		{
			continue;
		}

		if(!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{			
			if (itemAttributes[i].name.getAsciiId().equals("effect"))
			{
				effectVal = itemAttributes[i].currentValue;
			}
			else if(itemAttributes[i].name.getAsciiId().equals("efficiency"))
			{
				efficiencyVal = itemAttributes[i].currentValue;
			}				
			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);
			}
		}
	}
	
	setObjVar(prototype, powerup.VAR_POWERUP_EFFECT, effectVal);
	setObjVar(prototype, powerup.VAR_POWERUP_EFFICIENCY, efficiencyVal);
	
	string template = getTemplateName(prototype);
	LOG("powerup", "Template = " + template);
	if(
		template.equals("object/tangible/powerup/weapon/ranged_barrel.iff") ||
		template.equals("object/tangible/powerup/weapon/melee_inertial_fluctuator.iff") ||
		template.equals("object/tangible/powerup/weapon/mine_explosive.iff") ||
		template.equals("object/tangible/powerup/weapon/thrown_explosive.iff")
	  )
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_BARREL_DAMAGE_BONUS, powerup.VAR_POWERUP_DAMAGE, efficiencyVal, MAX_BARREL_SPEED_PENALTY, powerup.VAR_POWERUP_SPEED);
	}
	else if
		(
			template.equals("object/tangible/powerup/weapon/ranged_power.iff") ||
			template.equals("object/tangible/powerup/weapon/melee_element_dispursal_tuner.iff")
		)
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_COUPLER_ELEMENTAL_BONUS, powerup.VAR_POWERUP_ELEMENTAL_DAMAGE, efficiencyVal, MAX_COUPLER_DAMAGE_PENALTY, powerup.VAR_POWERUP_DAMAGE);
	}
	else if
		(
			template.equals("object/tangible/powerup/weapon/ranged_grip.iff") ||
			template.equals("object/tangible/powerup/weapon/melee_tactical_grip_modifier.iff") ||
			template.equals("object/tangible/powerup/weapon/thrown_wiring.iff")
		)
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_GRIP_SPEED_BONUS, powerup.VAR_POWERUP_SPEED, efficiencyVal, MAX_GRIP_ACCURACY_PENALTY, powerup.VAR_POWERUP_ACCURACY);
	}
	else if
		(
			template.equals("object/tangible/powerup/weapon/ranged_muzzle.iff") ||
			template.equals("object/tangible/powerup/weapon/melee_surface_serration_kit.iff")
		)
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_MUZZLE_WOUND_BONUS, powerup.VAR_POWERUP_WOUND, efficiencyVal, MAX_MUZZLE_ACTION_PENALTY, powerup.VAR_POWERUP_ACTION);
	}
	else if
		(
			template.equals("object/tangible/powerup/weapon/ranged_scope.iff") ||
			template.equals("object/tangible/powerup/weapon/melee_balancing_weights.iff")
		)
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_SCOPE_ACCURACY_BONUS, powerup.VAR_POWERUP_ACCURACY, efficiencyVal, MAX_SCOPE_SPEED_PENALTY, powerup.VAR_POWERUP_SPEED);
	}
	else if
		(
			template.equals("object/tangible/powerup/weapon/ranged_stock.iff") ||
			template.equals("object/tangible/powerup/weapon/melee_hilt_reinforcement_kit.iff")
		)
	{
		calculateBonusAndPenalty(prototype, effectVal, MAX_STOCK_ACTION_BONUS, powerup.VAR_POWERUP_ACTION, efficiencyVal, MAX_STOCK_ACCURACY_PENALTY, powerup.VAR_POWERUP_ACCURACY);
	}
	
	setObjVar(prototype, "converted", 1);
}

void calculateBonusAndPenalty(obj_id weapon, float effectVal, float maxBonus, string bonusObjVarName, float efficiencyVal, float maxPenalty, string penaltyObjVarName)
{
	float bonus = 0;
	float penalty = 0;
	
	// Get the damage bonus based on the effectiveness value
	if(effectVal > 0)
	{
		bonus = (effectVal/100.0f) * maxBonus;
	}
	
	// determine speed penalty based on the ratio of actual damage bonus achieved to max damage bonus attainable
	penalty = (bonus/maxBonus) * maxPenalty;
	
	// determine what percent of the penalty we can mitigate
	if(efficiencyVal > 0)
	{
		float efficiencyRatio = efficiencyVal/100f;
		penalty -= (penalty * efficiencyRatio);
		setObjVar(weapon, powerup.VAR_POWERUP_USES_LEFT, Math.round(powerup.DEFAULT_USE_COUNT * efficiencyRatio));
	}
	else
	{
		setObjVar(weapon, powerup.VAR_POWERUP_USES_LEFT, powerup.DEFAULT_USE_COUNT);
	}
	
	if(bonusObjVarName.equals(powerup.VAR_POWERUP_ACCURACY))
	{
		bonus = (float)Math.ceil(bonus);
	}
	
	if(bonusObjVarName.equals(powerup.VAR_POWERUP_SPEED) || bonusObjVarName.equals(powerup.VAR_POWERUP_ACTION) )
	{
		// speed and action bonuses are negative
		bonus *= -1;
	}
	
	if(penaltyObjVarName.equals(powerup.VAR_POWERUP_ACCURACY))
	{
		penalty = (float)Math.floor(penalty);
	}
	
	if(!penaltyObjVarName.equals(powerup.VAR_POWERUP_SPEED) && !penaltyObjVarName.equals(powerup.VAR_POWERUP_ACTION))
	{
		// penalties for everything except speed and actioncost are negative
		penalty *= -1; 	
	}
		
	// write the data to the powerup
	setObjVar(weapon, bonusObjVarName, bonus);
	
	if(!getTemplateName(weapon).equals("object/tangible/powerup/weapon/mine_explosive.iff") &&
	   !getTemplateName(weapon).startsWith("object/tangible/powerup/weapon/thrown")) // grenades don't have a penalty
	{
		setObjVar(weapon, penaltyObjVarName, penalty);	
	}	
}

//this stops a server exception when we removed power ups
trigger OnManufactureObject(obj_id player, obj_id newObject, draft_schematic schematic, boolean isPrototype, boolean isRealObject)
{
	return SCRIPT_OVERRIDE;
}


