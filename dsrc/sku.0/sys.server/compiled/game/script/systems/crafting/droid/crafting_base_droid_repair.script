/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
include library.utils;
include library.craftinglib;
include library.consumable;
include library.player_stomach;
include library.healing;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties(obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary) {

	super.calcAndSetPrototypeProperties(prototype, itemAttributes, craftingValuesDictionary);
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties(obj_id prototype, draft_schematic.attribute[] itemAttributes) {

	//initialize storage for power
	int tempPower = 0;
	int[] skill_value = {0};

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");

	for(int i = 0; i < itemAttributes.length; ++i) {

		if(itemAttributes[i] == null)
			continue;

		if(!calcAndSetPrototypeProperty(prototype, itemAttributes[i])) {

			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if(itemAttributes[i].name.getAsciiId().equals("power"))	{

				tempPower = (int)(itemAttributes[i].currentValue);

			} else if(itemAttributes[i].name.getAsciiId().equals("charges")) {

				setCount(prototype, (int)itemAttributes[i].currentValue );

			} else if(itemAttributes[i].name.getAsciiId().equals("energy")) {

				setObjVar(prototype, "consumable.energy", (int) itemAttributes[i].currentValue);

			} else {

				setObjVar(prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);
			}
		}
	}

	attrib_mod[] am = createDroidMedicineMod(prototype, tempPower);
	setObjVar(prototype, consumable.VAR_CONSUMABLE_MODS, am);									// Suppress linting - We know that this array will
																								// always be at least one element long
	// Set all stomachs to zero since we aren't currently using the stomach for medicine
	int[] stomach = {0, 0, 0};
	setObjVar(prototype, consumable.VAR_CONSUMABLE_STOMACH_VALUES, stomach);					// Suppress linting - We know that this array will
}																								// always be at least three elements long



/***** FUNCTIONS *************************************************/
attrib_mod[] createDroidMedicineMod(obj_id prototype, int power) {

	attrib_mod[] am = new attrib_mod[1];

	int value = power;
	float attack = healing.AM_HEAL_WOUND;
	float decay = 0.0f;

	if(hasObjVar(prototype, "consumable.energy")) {

		value = getIntObjVar(prototype, "consumable.energy");
		attack = 0.0f;
		decay = MOD_POOL;
	}

	am[0] = utils.createAttribMod(0, value, 0.0f, attack, decay);

	return am;
}
