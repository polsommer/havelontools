/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_new_weapon_final.script
 * Description:  base script for crafting new weapon
 * @author       $Author: $
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */

include library.craftinglib;
include library.utils;
include library.weapons;


inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v0.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	obj_var_list componentData = getObjVarList(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME);


	string[] componentDataNames = componentData.getAllObjVarNames();

	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{

		if ( itemAttributes[i].name.getAsciiId().equals("appearanceBonusLow") )
		{
			float appBonus = itemAttributes[i].currentValue;
			CustomerServiceLog("new_weapon_crafting", "appearanceBonusLow pre-division on prototype " +prototype + "("+getTemplateName(prototype)+") is " + appBonus);
			appBonus /= weapons.NEW_COMPONENT_MODIFIER;
			CustomerServiceLog("new_weapon_crafting", "setting appearanceBonusLow on prototype " +prototype + "("+getTemplateName(prototype)+") to " + appBonus);
			setObjVar(prototype, weapons.OBJVAR_MODIFIER_APPEARANCE_BONUS_MIN, appBonus);
		}
		if ( itemAttributes[i].name.getAsciiId().equals("appearanceBonusHigh") )
		{
			float appBonus = itemAttributes[i].currentValue;
			CustomerServiceLog("new_weapon_crafting", "appearanceBonusHigh pre-division on prototype " +prototype + "("+getTemplateName(prototype)+") is " + appBonus);
			appBonus /= weapons.NEW_COMPONENT_MODIFIER;
			CustomerServiceLog("new_weapon_crafting", "setting appearanceBonusHigh on prototype " +prototype + "("+getTemplateName(prototype)+") to " + appBonus);
			setObjVar(prototype, weapons.OBJVAR_MODIFIER_APPEARANCE_BONUS_MAX, appBonus);
		}
	}

	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	obj_id self = getSelf();
	weapons.setSchematicVariablesFromProtoType(self, prototype);
	base_class.range_info rangeData = new base_class.range_info();

	int coreLevel = weapons.getCoreLevel(prototype);
	CustomerServiceLog("new_weapon_crafting", "core level " + coreLevel);

	dictionary weaponCoreDat = weapons.getWeaponCoreData(coreLevel);

	if(weaponCoreDat == null)
	{
		CustomerServiceLog("weaponsCraftingError", "Unable to load master weapon data for object " + prototype + "(" + getTemplateName(prototype) + "). Aborting crafting process.");
		return;
	}

	int damageType = 0 ;
	int elementalType = 0;
	int elementalValue = 0;
	int accuracy = 0;

	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{

		//LOG("weapons", "Attribute: " + itemAttributes[i].name.getAsciiId());
		if ( itemAttributes[i] == null )
			continue;


		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object

			// Minimum Damage
			if ( itemAttributes[i].name.getAsciiId().equals("minDamage") )
			{
				float craftedBonus = weapons.getWeaponCoreQualityMin(prototype);
				CustomerServiceLog("new_weapon_crafting", "craftedBonus preComponentBonusMin on prototype " + prototype + "("+getTemplateName(prototype)+") " + craftedBonus);

				//gather all our component bonuses
				craftedBonus += weapons.getWeaponComponentBonusesMinDamage(prototype);
				CustomerServiceLog("new_weapon_crafting", "craftedBonus postComponentBonusMin on prototype " + prototype + "("+getTemplateName(prototype)+") " + craftedBonus);

				int tableMin = weapons.getCoreMinDamage(prototype, weaponCoreDat);
				CustomerServiceLog("new_weapon_crafting", "tableMinDamage on prototype " + prototype + "("+getTemplateName(prototype)+") " + tableMin);

				float minDamage = tableMin * craftedBonus;
				CustomerServiceLog("new_weapon_crafting", "minDamage pre-VerifyDamageRangeMin on prototype " + prototype + "("+getTemplateName(prototype)+") " + minDamage);

				//verify our damage is in range of the table
				minDamage = weapons.verifyDamageRangeMin(prototype, minDamage, weaponCoreDat);
				CustomerServiceLog("new_weapon_crafting", "minDamage post-VerifyDamageRangeMin on prototype " + prototype + "("+getTemplateName(prototype)+") " + minDamage);
				//set damage
				setWeaponMinDamage(prototype, (int)minDamage);
			}

			// Maximum Damage
			else if ( itemAttributes[i].name.getAsciiId().equals("maxDamage") )
			{
				float craftedBonus = weapons.getWeaponCoreQualityMax(prototype);
				CustomerServiceLog("new_weapon_crafting", "craftedBonus preComponentBonusMax on prototype " + prototype + "("+getTemplateName(prototype)+") " + craftedBonus);

				//gather all our component bonuses
				craftedBonus += weapons.getWeaponComponentBonusesMaxDamage(prototype);
				CustomerServiceLog("new_weapon_crafting", "craftedBonus postComponentBonusMax on prototype " + prototype + "("+getTemplateName(prototype)+") " + craftedBonus);

				int tableMax = weapons.getCoreMaxDamage(prototype, weaponCoreDat);
				CustomerServiceLog("new_weapon_crafting", "tableMaxDamage on prototype " + prototype + "("+getTemplateName(prototype)+") " + tableMax);

				float maxDamage = tableMax * craftedBonus;
				CustomerServiceLog("new_weapon_crafting", "maxDamage  pre-VerifyDamageRangeMax on prototype " + prototype + "("+getTemplateName(prototype)+") " + maxDamage);

				//verify our damage is in range of the table
				maxDamage = weapons.verifyDamageRangeMax(prototype, maxDamage, weaponCoreDat);
				CustomerServiceLog("new_weapon_crafting", "minDamage post-VerifyDamageRangeMax on prototype " + prototype + "("+getTemplateName(prototype)+") " + maxDamage);

				setWeaponMaxDamage (prototype, (int)maxDamage);
			}

			// Attack Speed
			else if ( itemAttributes[i].name.getAsciiId().equals("attackSpeed") )  // invert when writing to object
			{
				// weapon speed is stored in the schematic template as 10 times the actual value, so we scale it back down here
				setWeaponAttackSpeed (prototype, weapons.getWeaponSpeed(prototype) / 100.0f);
			}

			// Wound Chance
			else if ( itemAttributes[i].name.getAsciiId().equals("woundChance") )
			{
				setWeaponWoundChance (prototype, weapons.getNewWeaponWoundChance(prototype));
			}

			// Accuracy
			else if ( itemAttributes[i].name.getAsciiId().equals("accuracy"))
			{
				accuracy = weapons.getNewWeaponAccuracy(prototype);
				//LOG("weapons", "Rounded Accuracy=" + accuracy);
			}

			// Charges
			else if ( itemAttributes[i].name.getAsciiId().equals("charges"))
			{
				setCount( prototype, (int) itemAttributes[i].currentValue );
			}

			// Attack Cost
			else if ( itemAttributes[i].name.getAsciiId().equals("attackCost"))	// invert when writing to object
			{
				setWeaponAttackCost(prototype, weapons.getNewWeaponAttackCost(prototype));
			}

			// Damage Type
			else if ( itemAttributes[i].name.getAsciiId().equals("damageType"))
			{
				damageType = weapons.getNewWeaponDamageType(prototype);
			}

			// Elemental Type
			else if ( itemAttributes[i].name.getAsciiId().equals("elementalType"))
			{
				int tableElementalType = weapons.getNewWeaponTableElementType(prototype);
				CustomerServiceLog("new_weapon_crafting", "tableElementalType for prototype " + prototype + "("+getTemplateName(prototype)+") " + tableElementalType);
				elementalType = (int)weapons.getNewWeaponElementalType(prototype);
				CustomerServiceLog("new_weapon_crafting", "elementalType on prototype " + prototype + "("+getTemplateName(prototype)+") " + elementalType);

				if(tableElementalType != -1)
				{
					CustomerServiceLog("new_weapon_crafting", "tableElementalType is defiened, so we take it over what is passed in from components on prototype " + prototype + "("+getTemplateName(prototype)+")");
					elementalType = tableElementalType;
				}
			}
			// Elemental Value
			else if ( itemAttributes[i].name.getAsciiId().equals("elementalValue") )
			{

				float craftedBonus = weapons.getNewWeaponElementalValue(prototype);
				CustomerServiceLog("new_weapon_crafting", "craftedBonus for elementalValue on prototype " + prototype + "("+getTemplateName(prototype)+") " + craftedBonus);

				int tableValue = weapons.getNewWeaponTableElementalValue(prototype, weaponCoreDat);
				CustomerServiceLog("new_weapon_crafting", "tableElementalValue for prototype " + prototype + "("+getTemplateName(prototype)+") " + tableValue);

				elementalValue = (int)(tableValue * craftedBonus);
				//get any appearance bonuses
				if(elementalValue > 0)
				{
					CustomerServiceLog("new_weapon_crafting", "elementalValue on prototype " + prototype + "("+getTemplateName(prototype)+") before Appearance bonus " + elementalValue);

					int elementalAppearanceBonusValue = weapons.getElementalAppearanceBonus(prototype);
					CustomerServiceLog("new_weapon_crafting", "elementalAppearanceBonusValue on prototype " + prototype + "("+getTemplateName(prototype)+") is " + elementalAppearanceBonusValue);
					//elemental appearance bonus can return a negative number
					//if so, we are going to reduce the value by a percentage
					if(elementalAppearanceBonusValue < 0)
					{
						elementalValue -= elementalValue * elementalAppearanceBonusValue * -1 / 100;
						CustomerServiceLog("new_weapon_crafting", "elementalAppearanceBonusValue on prototype " + prototype + "("+getTemplateName(prototype)+") was a negative number. So we now reduce the elementalValue ("+elementalValue+") by that number("+elementalAppearanceBonusValue+") in percentage form. This results in elementalValue being " + elementalValue);
					}
					else
					{
						elementalValue += elementalAppearanceBonusValue;
						CustomerServiceLog("new_weapon_crafting", "elementalAppearanceBonusValue was a postive number so elementalValue on prototype " + prototype + "("+getTemplateName(prototype)+") after Appearance bonus is " + elementalValue);
					}
				}
			}
			else
			{
				debugServerConsoleMsg(null, "Error. Unknown Attribute Read in. Attribute was " + itemAttributes[i].name + ".");
			}
		}
	}

	weapons.performSocketing(prototype, getExperimentSkillMods());
	rangeData.minRange = weapons.getNewWeaponMinRange(prototype);
	rangeData.maxRange = weapons.getNewWeaponMaxRange(prototype);

	setObjVar(prototype, "weapon.original_max_range", rangeData.maxRange);

	setWeaponAccuracy(prototype, accuracy);
	setWeaponRangeInfo(prototype, rangeData);
	setWeaponDamageType(prototype, damageType);
	if(elementalType >= 0 && elementalValue > 0)
	{
		setWeaponElementalType(prototype, elementalType);
		setWeaponElementalValue(prototype, elementalValue);
	}
	else
	{
		setWeaponElementalType(prototype, -1);
		setWeaponElementalValue(prototype, 0);
	}
	weapons.setHeavyWeaponAoeSplashPercent(prototype);
	//this will ensure the conversion code doesnt mess with new crafted objects
	//use new objvar for versioning on new cored weapons
	setConversionId(prototype, weapons.CORED_WEAPON_CONVERSION_VERSION);
	weapons.setWeaponData(prototype);
	//set Objvar stating we have already calculated our component bonuses
	if(!hasObjVar(prototype, weapons.OBJVAR_NEW_WP_WEAPON))
		setObjVar(prototype, weapons.OBJVAR_NEW_WP_WEAPON, true);

	if(!hasScript(prototype, "item.armor.biolink_item_non_faction"))
		attachScript(prototype, "item.armor.biolink_item_non_faction");

/************ Useless Comment ***********/
}
