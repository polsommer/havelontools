/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.powerup;
include library.stealth;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";

// *** All knobs are epxressed in positive values - negation is handled by the code where appropriate


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{			
	float effectiveness = 0;	
	
	for(int i = 0; i < itemAttributes.length; ++i) // go through all attributes
	{
		if(itemAttributes[i] == null)
		{
			continue;
		}

		if(!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{			
			if (itemAttributes[i].name.getAsciiId().equals("effectiveness"))
			{
				effectiveness = (int)itemAttributes[i].currentValue;
			}		
			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);
			}
		}
	}
	
	if(effectiveness > 0)
	{		
		string template = getTemplateName(prototype);
		if(template.indexOf("biosensorprobe") > -1)
		{
			setObjVar(prototype, stealth.BIO_PROBE_STORAGE_TIME, effectiveness / 1000 * stealth.MAX_BIO_PROBE_STORAGE_TIME);	
		}
		else if(template.indexOf("trackingbeacon") > -1 || template.indexOf("motionsensor") > -1)
		{
			setObjVar(prototype, stealth.BEACON_BATTERY, effectiveness);			
		}
		else
		{
			setObjVar(prototype, stealth.DETECT_EFFECTIVENESS, effectiveness);
		}
	}
	
}




