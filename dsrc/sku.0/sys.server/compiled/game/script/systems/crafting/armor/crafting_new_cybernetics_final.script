/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_new_armor_final.script
 * Description:  base script for crafting new armor
 * @author       $Author: Steve Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */

include library.armor;
include library.craftinglib;
include java.util.Enumeration;
include library.utils;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v0.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
**/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	//setting the crafter on the object so we can get expertise later.
	setObjVar(prototype, craftinglib.OBJVAR_CRAFTER, getOwner(prototype));
	LOG("sissynoid", "Owner is: " + getOwner(prototype));
	
	LOG("sissynoid", "calcAndSetPrototypeProperties #1");
	
	CustomerServiceLog("crafting", "WARNING: Entered calcAndSetPrototypeProperties #1");
	if ( !hasObjVar(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_LEVEL) )
	{
		LOG("sissynoid", "calcAndSetPrototypeProperties #1 - No Amor Level?");
		CustomerServiceLog("crafting", "WARNING: armor final draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_LEVEL + " objvar set");
		super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
		return;
	}
	if ( !hasObjVar(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_CATEGORY) )
	{
		LOG("sissynoid", "calcAndSetPrototypeProperties #1 - No Amor Category?");
		CustomerServiceLog("crafting", "WARNING: armor final draft schematic " + getDraftSchematic(getSelf()) + " has no " +
			craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_CATEGORY + " objvar set");
		super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
		return;
	}
	CustomerServiceLog("crafting", "WARNING: PASSED Objvar checks");
	int armorLevel = getIntObjVar(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_LEVEL);
	int armorCategory = getIntObjVar(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + "." + armor.OBJVAR_ARMOR_CATEGORY);
	setObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL, armorLevel);
	setObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY, armorCategory);

	int finalRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_FINAL_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	int coreRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_CORE_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
	if ( finalRow < 0 || coreRow < 0)
	{
		CustomerServiceLog("crafting", "WARNING: armor datatable " + armor.DATATABLE_ARMOR + " has missing core or final row (" +
			coreRow + "," + finalRow + ")");
		return;
	}

	obj_var_list componentData = getObjVarList(getSelf(), craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME);
	if ( componentData != null )
		armor.rescaleComponentData(getSelf(), componentData, coreRow, finalRow);

	armor.updateItemAttributes(getSelf(), itemAttributes, finalRow);

	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
	LOG("sissynoid", "calcAndSetPrototypeProperties #1 - END");
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	LOG("sissynoid", "calcAndSetPrototypeProperties #2");
	CustomerServiceLog("crafting", "WARNING: Entered: calcAndSetPrototypeProperties #2");
	// here we go...
	//debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	int armorLevel = 0;
	int armorCategory = 0;
	int finalRow = 0;

	if(hasObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL) && hasObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY))
	{	
		CustomerServiceLog("crafting", "WARNING: has Armor Cores");
		armorLevel = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_LEVEL);
		armorCategory = getIntObjVar(getSelf(), armor.OBJVAR_ARMOR_CATEGORY);
		finalRow = dataTableSearchColumnForInt(getStringCrc(armor.DATATABLE_FINAL_ROW + armorLevel), armor.DATATABLE_TYPE_COL, armor.DATATABLE_ARMOR);
		setObjVar(prototype, armor.OBJVAR_ARMOR_BASE + "." + armor.OBJVAR_ARMOR_LEVEL, armorLevel);
		setObjVar(prototype, armor.OBJVAR_ARMOR_BASE + "." + armor.OBJVAR_ARMOR_CATEGORY, armorCategory);
	}
	
	// save the attributes to the prototype
	for ( int i = 0; i < itemAttributes.length; ++i )
	{
		CustomerServiceLog("crafting", "WARNING: Item attributes");
		if ( itemAttributes[i] == null )
			continue;
		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			if (itemAttributes[i].currentValue < itemAttributes[i].minValue)
				itemAttributes[i].currentValue = itemAttributes[i].minValue;
			else if (itemAttributes[i].currentValue > itemAttributes[i].maxValue)
				itemAttributes[i].currentValue = itemAttributes[i].maxValue;
			setObjVar(prototype, armor.OBJVAR_ARMOR_BASE + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue);

			if ( itemAttributes[i].name.equals(armor.OBJVAR_CONDITION))
			{
				// save the absolute hp value to the prototype
				float hp = armor.getAbsoluteArmorAttribute(itemAttributes[i].currentValue, finalRow, armor.DATATABLE_MIN_CONDITION_COL);
				if ( hp != Float.MIN_VALUE )
				{
					if ( hasObjVar(getSelf(), armor.OBJVAR_CONDITION_MULTIPLIER) )
					{
						float multiplier = getFloatObjVar(getSelf(), armor.OBJVAR_CONDITION_MULTIPLIER);
						if ( multiplier > 0 )
							hp *= multiplier;
						else
						{
							CustomerServiceLog("crafting", "Armor schematic " + getDraftSchematic(getSelf()) +
								" has an invalid condition multiplier " + multiplier);
						}
					}
					setMaxHitpoints(prototype, (int)hp);
				}
			}
		}
	}

	if (hasObjVar(getSelf(), "addArmorRefitScript") )
	{
		attachScript (prototype, getStringObjVar(getSelf(), "addArmorRefitScript") );
	}
	// save any scaled data to the prototype
	armor.saveScaledDataToPrototype(getSelf(), prototype, itemAttributes, armor.OBJVAR_ARMOR_BASE);
	LOG("crafting", "WARNING: FINISHED #2");
	
	/************CYBERNETIC MODULE - ARMOR REDUCTION**************/
	if(hasObjVar(prototype, "armor.general_protection") && hasObjVar(prototype, "modifyCyberneticArmorValue")
	&& !hasObjVar(prototype, "modifiedCyberneticArmorValue"))
	{
		LOG("sissynoid", "*************Entered Armor Reduction Modification**************");
		//Get protections off of the prototype
		float protectionAmount = getFloatObjVar(prototype, "armor.general_protection");
		
		LOG("sissynoid", "******ARMOR PROTECTION BASE****** :: " + protectionAmount);
		//Get Reduction Expertise
		obj_id crafter = obj_id.NULL_ID;
		int reductionExpertise = 0;
		if(hasObjVar(prototype, craftinglib.OBJVAR_CRAFTER))
		{
			crafter = getObjIdObjVar(prototype, craftinglib.OBJVAR_CRAFTER);
			if(crafter != null)
			{
				reductionExpertise = getEnhancedSkillStatisticModifierUncapped(crafter, "expertise_cybernetic_negative_effects_reduction");
				LOG("sissynoid", "******EXPERTISE REDUCTION AMOUNT****** :: " + reductionExpertise);
			}
		}
		//Convert Expertise into a float percentage
		float percentReductionExpertise = (float)reductionExpertise / 100.0f;
		LOG("sissynoid", "******EXPERTISE REDUCTION AMOUNT****** :: PERCENTAGE :: " + percentReductionExpertise);
		//Base 40% reduction Amount.
		float reductionAmount = 0.4f; 
		//If we have expertise!
		if(percentReductionExpertise > 0)
		{
			//full expertise will reduce by 20%
			reductionAmount = 1.0f - (reductionAmount - percentReductionExpertise);
			LOG("sissynoid", "**OLD REDUCT MULTIPLIER: "+ (1.0f - reductionAmount) +" **New Reduction MULTIPLIER** " + reductionAmount);
		}
		//otherwise calculate the actual reduction here.
		else
		{
			//Give them 60% of their armor value since reduction is 40%
			reductionAmount = 1.0f - 0.4f;
			LOG("sissynoid", "Reduction Expertise is not being found!");
		}
		protectionAmount *= reductionAmount;
		//Set the protection amount on the prototype
		setObjVar(prototype, "armor.general_protection", protectionAmount);
		LOG("sissynoid", "**NEW PROTECTION AMOUNT** (((" + protectionAmount + " )))");
		
		//Mark the item as MODIFIED
		removeObjVar(prototype, "modifyCyberneticArmorValue");
		LOG("sissynoid", "Removing Modify Objvar");
		setObjVar(prototype, "modifiedCyberneticArmorValue", true);
	}
	//increasing layer protections using cybernetic components:
	if(hasObjVar(prototype, "cybernetic.special_protection.type") && hasObjVar(prototype, "cybernetic.special_protection.value"))
	{
		LOG("sissynoid", "SPECIAL PROTECTIONS");
		int protectionType = getIntObjVar(prototype, "cybernetic.special_protection.type");
	
		float protectionValue = getFloatObjVar(prototype, "cybernetic.special_protection.value");
		LOG("sissynoid", "***Protection Type: " + protectionType + " ***Protection Value: " + protectionValue);
		//get the crafted value of the item somehow - figure this out later.
		LOG("sissynoid", "FINAL CRAFTING #2: protection module type: " + protectionType + " and Value: " + protectionValue);
		armor.setArmorSpecialProtectionPercent(prototype, protectionType, protectionValue);
	}
}

