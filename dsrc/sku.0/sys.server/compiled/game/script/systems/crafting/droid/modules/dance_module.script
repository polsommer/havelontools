/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        stimpack_dispensor
 * Description:  script that attaches to the stimpack_dispensor droid
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.callable;
include library.pet_lib;
include library.sui;
include library.utils;

/***** CONSTANTS *******************************************************/
const string STF_FILE 	= "pet/droid_modules";
const string PROMPT 	= "@pet/droid_modules:dance_prompt";
const string TITLE 	= "@pet/droid_modules:dance_title";


/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (utils.isNestedWithinAPlayer(self) && utils.getContainingPlayer(self) == player)
	{
		int mnu = mi.addRootMenu (menu_info_types.SERVER_MENU1, new string_id(STF_FILE,"load_module"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.SERVER_MENU1)
	{
		if (utils.isNestedWithinAPlayer(self) && utils.getContainingPlayer(self) == player)
		{
			obj_id[] droidIds = pet_lib.getPcdsForType(player, pet_lib.PET_TYPE_DROID);
			resizeable obj_id[] resizAbleDroidIds = droidIds;
			resizeable string[] droidNames = new string[0];
			
			for(int i = 0; i < droidIds.length; ++i)
			{
				if(hasObjVar(droidIds[i], "module_data.dancing_droid"))
				{
					utils.removeElement(resizAbleDroidIds, droidIds[i]);
					continue;
				}
				
				string droidName = getName(droidIds[i]);
				string[] splitName = split(droidName, '/');
				if(splitName.length > 1)
					utils.addElement(droidNames, "@" + droidName);
				else
					utils.addElement(droidNames, droidName);
			}
			
			utils.setScriptVar(player, "dancing_droid.ids", resizAbleDroidIds);
			int pid = sui.listbox(self, player, PROMPT, sui.OK_CANCEL, TITLE, droidNames, "onDanceDroidLoaded", true, true);			
			
			return SCRIPT_CONTINUE;
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/
messageHandler onDanceDroidLoaded()
{
	if(params == null || params.isEmpty())
		return SCRIPT_CONTINUE;
	
	obj_id player = sui.getPlayerId(params);
	
	obj_id[] droidIds = utils.getObjIdArrayScriptVar(player, "dancing_droid.ids");
	utils.removeScriptVar(player, "dancing_droid.ids");
	
	int bp = sui.getIntButtonPressed(params);
	int row = sui.getListboxSelectedRow(params);
	
	if (bp == sui.BP_OK)
	{
		setObjVar(droidIds[row], "module_data.dancing_droid", 1);
		if(utils.hasScriptVar(droidIds[row], callable.OBJVAR_CALLABLE_CALLED))
		{
			obj_id droid = utils.getObjIdScriptVar(droidIds[row], callable.OBJVAR_CALLABLE_CALLED);
			attachScript(droid, "ai.dancing_droid");
		}
		destroyObject(self);
	}	

	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
