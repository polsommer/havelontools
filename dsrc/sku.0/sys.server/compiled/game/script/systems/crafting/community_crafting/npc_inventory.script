/**
 * Copyright (C)2004 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        systems.crafting.community_crafting.npc_inventory.script
 * Description:  This should get attached to the inventory object of the npc players interact with
 *               for the community crafting system.
 * @author       $Author: Steve Jakab $
 * @version      $Revision: #1 $
 */


/***** INCLUDES ********************************************************/

include library.community_crafting;


/***** CONSTANTS *******************************************************/

const string OBJVAR_CRAFTING_TRACKER             = community_crafting.OBJVAR_COMMUNITY_CRAFTING_TRACKER;
const string OBJVAR_MY_OWNER                     = community_crafting.OBJVAR_COMMUNITY_CRAFTING_BASE + ".myOwner";
const string OBJVAR_PLAYERS_CAN_ACCESS_CONTAINER = "players_can_access_container";

const string_id SID_THANK_YOU             = new string_id("crafting", "cc_thank_you");
const string_id SID_THANK_YOU_DONE        = new string_id("crafting", "cc_thank_you_done");
const string_id SID_THANK_YOU_ONE         = new string_id("crafting", "cc_thank_you_one");
const string_id SID_THANK_YOU_WITH_COUNTS = new string_id("crafting", "cc_thank_you_with_counts");
const string_id SID_NOT_CRAFTING          = new string_id("crafting", "cc_not_crafting");


/***** TRIGGERS ********************************************************/

trigger OnAttach()
{
	// set our owner to null so players can access this container
	obj_id owner = getOwner(self);
	if ( isIdValid(owner) )
	{
		setOwner(self, obj_id.NULL_ID);
		setObjVar(self, OBJVAR_MY_OWNER, owner);
	}
	setObjVar(self, OBJVAR_PLAYERS_CAN_ACCESS_CONTAINER, true);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	// set our owner to null so players can access this container
	obj_id owner = getOwner(self);
	if ( isIdValid(owner) )
	{
		setOwner(self, obj_id.NULL_ID);
		setObjVar(self, OBJVAR_MY_OWNER, owner);
	}
	setObjVar(self, OBJVAR_PLAYERS_CAN_ACCESS_CONTAINER, true);
	return SCRIPT_CONTINUE;
}

/**
 * Will attempt to add the item to the project's ingredients. If this fails, the transfer will be rejected.
 */
trigger OnAboutToReceiveItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	obj_id craftingTracker = getObjIdObjVar(self, OBJVAR_CRAFTING_TRACKER);
	if ( !isIdValid(craftingTracker) )
		return SCRIPT_OVERRIDE;

	if ( !isIdValid(item) )
		return SCRIPT_OVERRIDE;

	if (!community_crafting.isSessionActive(craftingTracker))
		return SCRIPT_OVERRIDE;

	if ( !community_crafting.isPlayerCrafting(craftingTracker, transferer) )
	{
		sendSystemMessage(transferer, SID_NOT_CRAFTING);
		return SCRIPT_OVERRIDE;
	}

	if ( !community_crafting.addIngredient(craftingTracker, transferer, item) )
		return SCRIPT_OVERRIDE;

 	return SCRIPT_CONTINUE;
}

trigger OnReceivedItem(obj_id srcContainer, obj_id transferer, obj_id item)
{
	obj_id craftingTracker = getObjIdObjVar(self, OBJVAR_CRAFTING_TRACKER);
	if ( !isIdValid(craftingTracker) )
	{
		sendSystemMessage(transferer, SID_THANK_YOU);
	}
	else
	{
		int itemsLeft = community_crafting.getNumIngredientsNeededByPlayer(craftingTracker, transferer);
		if ( itemsLeft < 0 )
			sendSystemMessage(transferer, SID_THANK_YOU);
		else if ( itemsLeft == 0 )
			sendSystemMessage(transferer, SID_THANK_YOU_DONE);
		else if ( itemsLeft == 1 )
			sendSystemMessage(transferer, SID_THANK_YOU_ONE);
		else
		{
			prose_package pp = new prose_package();
			pp.stringId = SID_THANK_YOU_WITH_COUNTS;
			pp.digitInteger = itemsLeft;
			sendSystemMessageProse(transferer, pp);
		}
	}
	destroyObject(item);
	return SCRIPT_CONTINUE;
}
