/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        test_crafting_base_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.consumable;
include library.player_stomach;
include library.bio_engineer;
include library.create;
include library.pet_lib;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties( obj_id prototype, draft_schematic.attribute[] itemAttributes )
{
	obj_id self = getSelf();
	string root = craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".";

	// Storage for properties.
	int[] dna_attributes = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	float dnaAttrib = 0;

	// Set properties.
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if ( !calcAndSetPrototypeProperty( prototype, itemAttributes[i]) )
		{
			setObjVar ( prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(), itemAttributes[i].currentValue );
		}
	}

	// Load the creature data from the datatable and initialize the prototype
	//dictionary creatureDict = utils.dataTableGetRow( create.CREATURE_TABLE, getCreatureName() );
	setObjVar ( prototype, "creature_attribs.type", getCreatureName() );
	for (int i = 0; i < dna_attributes.length; i++)
	{
		LOG("creature_crafting", root + bio_engineer.CREATURE_ATTRIB_OBJVAR_NAMES[i] + " = " + getIntObjVar(self, root + bio_engineer.CREATURE_ATTRIB_OBJVAR_NAMES[i]));
		dna_attributes[i] = getIntObjVar(self, root + bio_engineer.CREATURE_ATTRIB_OBJVAR_NAMES[i]);
	}
	//create.initializeCreature(prototype, getCreatureName(), creatureDict );

	// Calculate the creatures stats
	int health = bio_engineer.calcCreatureAttrib(HEALTH, dna_attributes);
	setObjVar ( prototype, "creature_attribs." + create.MAXATTRIBNAMES[HEALTH], health );

	// health regen
	int healthRegen = bio_engineer.calcCreatureHealthRegen(dna_attributes);
	setObjVar ( prototype, "creature_attribs." + create.MAXATTRIBNAMES[CONSTITUTION], healthRegen );

	// to-hit chance
	int toHitChance = bio_engineer.calcCreatureToHit(dna_attributes);
	setObjVar ( prototype, "creature_attribs.toHitChance", toHitChance );

	// defense value
	int defenseValue = bio_engineer.calcCreatureDefenseValue(dna_attributes);
	setObjVar ( prototype, "creature_attribs.defenseValue", defenseValue );

	// state resist
	float stateResist = bio_engineer.calcCreatureStateResist(dna_attributes);
	setObjVar ( prototype, "creature_attribs.stateResist", stateResist );

	// scale
	float scale = bio_engineer.calcCreatureMaxScale(dna_attributes);
	setObjVar ( prototype, "creature_attribs.scale", scale );

	// damage
	int[] damage = bio_engineer.calcCreatureDamage(dna_attributes);
	setObjVar ( prototype, "creature_attribs.minDamage", damage[0]);
	setObjVar ( prototype, "creature_attribs.maxDamage", damage[1]);

	// crit chance
	float critChance = bio_engineer.calcCreatureCritChance(dna_attributes);
	setObjVar ( prototype, "creature_attribs.critChance", critChance );

	// crit save
	float critSave = bio_engineer.calcCreatureCritSave(dna_attributes);
	setObjVar ( prototype, "creature_attribs.critSave", critSave );

	// aggro bonus
	float aggroBonus = bio_engineer.calcCreatureAggroBonus(dna_attributes);
	setObjVar ( prototype, "creature_attribs.aggroBonus", aggroBonus );

	// armor
	int armorBase = bio_engineer.calcCreatureArmor(dna_attributes);
	/*
	pre cu armor
	int armorData[] = getIntArrayObjVar(self, root + "armorData");
	if (armorData == null)
	{
		armorData = new int[10];
		for (int i = 0; i < armorData.length; i++)
			armorData[i] = 0;
	}
	armorData[0] = armorBase / 50;
	armorData[1] = armorBase - (armorData[0]*50);
	setObjVar ( prototype, "creature_attribs.armorData", armorData );
	*/
	setObjVar ( prototype, "creature_attribs.general_protection", armorBase );

	// Ranged & Special Attacks
	int specialAttack1 = getIntObjVar(self, root + "specialAttack1");
	setObjVar(prototype, "creature_attribs.specialAttack1", specialAttack1);

	int specialAttack2 = getIntObjVar(self, root + "specialAttack2");
	setObjVar(prototype, "creature_attribs.specialAttack2", specialAttack2);

	string rangedWeapon = getStringObjVar(self, root + "rangedWeapon");
	if (rangedWeapon == null) rangedWeapon = "";
	setObjVar(prototype, "creature_attribs.rangedWeapon", rangedWeapon);

	// determine creature level
	int quality = getIntObjVar(self, root + "quality");

	dictionary creatureDict = new dictionary();
	creatureDict.put("maxHealth", health);
	creatureDict.put("healthRegen", healthRegen);
	creatureDict.put("toHitChance", toHitChance);
	creatureDict.put("defenseValue", defenseValue);
	creatureDict.put("stateResist", stateResist);
	creatureDict.put("minDamage", damage[0]);
	creatureDict.put("maxDamage", damage[1]);
	creatureDict.put("armorEffectiveness", armorBase);

	float minScale = dataTableGetFloat("datatables/bio_engineer/creature_ranges.iff", getCreatureName(), "minScale");
	float maxScale = dataTableGetFloat("datatables/bio_engineer/creature_ranges.iff", getCreatureName(), "maxScale");

	int minLevel = dataTableGetInt("datatables/bio_engineer/creature_ranges.iff", getCreatureName(), "minLevel");
	int maxLevel = dataTableGetInt("datatables/bio_engineer/creature_ranges.iff", getCreatureName(), "maxLevel");

	float scaleRange = maxScale - minScale;
	float levelRange = maxLevel - minLevel;

	LOG("creature_crafting", "Scale Range = "+scaleRange+" ("+minScale+"/"+maxScale+")");
	LOG("creature_crafting", "Level Range = "+levelRange+" ("+minLevel+"/"+maxLevel+")");

	int level = bio_engineer.getCraftedCreatureLevel(creatureDict);
	if (level < minLevel) level = minLevel;

	float levelRank = 1 - ((float) (maxLevel - level) / levelRange);
	LOG("creature_crafting", "Level Rank = "+levelRank);

	float finalScale = minScale + (scaleRange * levelRank);
	setObjVar(prototype, "creature_attribs.scale", finalScale);
	LOG("creature_crafting", "Final Scale = "+finalScale);

	int finalLevel = level - (int) (level * (quality/100) + 0.5f);
	setObjVar(prototype, "creature_attribs.level", finalLevel);
}


string getCreatureName()
{
	LOG("crafting", "Called into crafting_base script getSlotResourceWeights()! This function should have been overridden!");
	return null;
}


//Crafting Manufacturing TRIGGER
trigger OnManufactureObject(obj_id player, obj_id newObject, draft_schematic schematic, boolean isPrototype, boolean isRealObject)
{
	//dictionary creatureDict = utils.dataTableGetRow( create.CREATURE_TABLE, getCreatureName() );

	//create.attachCreatureScripts( newObject, creatureDict.getString( "scripts" ), true );
	//attachScript( newObject, "ai.pet_advance" );
	//attachScript( newObject, "ai.pet" );

	//pet_lib.makePet( newObject, player );

	return SCRIPT_CONTINUE;
}


/******************************************************************************************************************************************
 ******************************************************************************************************************************************
 *    OVERRIDED TRIGGERS    OVERRIDED TRIGGERS    OVERRIDED TRIGGERS    OVERRIDED TRIGGERS    OVERRIDED TRIGGERS    OVERRIDED TRIGGERS    *
 ******************************************************************************************************************************************
 ******************************************************************************************************************************************/

// Crafting Assembly phase TRIGGER
trigger OnManufacturingSchematicCreation(obj_id player, obj_id prototype, draft_schematic schematic, modifiable_int assemblyResult, modifiable_int experimentPoints)
{
	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation enter");
	//set up my scratchpad dictionary for crafting calculations
	dictionary craftingValuesDictionary = new dictionary();
	//grab info from schematic
	draft_schematic.slot[] slots = schematic.getSlots();
	draft_schematic.attribute[] objectAttribs = schematic.getAttribs();
	draft_schematic.attribute[] experimentalAttribs = schematic.getExperimentalAttribs();

	// set up an array of the object attribute names
	string[] obj_attributes = new string[objectAttribs.length];
	for ( int i = 0; i < obj_attributes.length; ++i )
	{
		obj_attributes[i] = objectAttribs[i].name.getAsciiId();
	}

	//now send out feeback on what was grabbed from the ingredient slots on the schematic - DEBUG CODE ONLY
	debugServerConsoleMsg(self, "Ingredient slot info (" + slots.length + " slots):");
	for ( int i = 0; i < slots.length; ++i )
	{
		debugServerConsoleMsg(self, "\tslot " + slots[i].name + ", ingredient " + slots[i].ingredients[0].ingredient + ", amount = " + slots[i].ingredients[0].count);
	}
	//now send out feeback on what was grabbed from the schematic's attributes - DEBUG CODE ONLY
	debugServerConsoleMsg(self, "Item attribute info (" + objectAttribs.length + " attribs):");

	// pass the crafting type around for special-case items
	craftingValuesDictionary.put ("craftingType", schematic.getCategory());

	// Set-up and initialize 'current' values for each attribute by averaging the min and max values, and special-case the complexity values (store them un-altered in a dictionary for later alteration)
	for ( int i = 0; i < objectAttribs.length; ++i )
	{
		//load initial
		if ( objectAttribs[i].name.getAsciiId().equals("complexity") )
		{
			//load current item complexity value into craftingValuesDictionary
			craftingValuesDictionary.put ("itemDefaultComplexity", objectAttribs[i].minValue);
			craftingValuesDictionary.put ("itemCurrentComplexity", objectAttribs[i].currentValue);
		}
		else if ( objectAttribs[i].name.getAsciiId().equals("armorSpecialType") )
		{
			//load current item armor type into craftingValuesDictionary
			craftingValuesDictionary.put ("itemDefaultArmorSpecialType", objectAttribs[i].minValue);
			craftingValuesDictionary.put ("itemCurrentArmorSpecialType", objectAttribs[i].currentValue);
		}
		else if (objectAttribs[i].name.getAsciiId().equals("sockets") )
		{
			// decide how many sockets there are based on the crafter's skill
			int[] mods = getEnhancedSkillStatisticModifiers(player, getExperimentSkillMods());
			if ( mods != null )
			{
				int experimentModTotal = 0;
				for ( int j = 0; j < mods.length; ++j )
					experimentModTotal += mods[j];
				if ( experimentModTotal > craftinglib.socketThreshold )
				{
					int sockets = 0;
					int chances = 1 + (experimentModTotal - craftinglib.socketThreshold) / craftinglib.socketDelta;
					for ( int j = 0; j < chances; ++j )
					{
						if ( rand(1, 100) > craftinglib.socketChance )
							++sockets;
					}
					if ( sockets > craftinglib.maxSockets )
						sockets = craftinglib.maxSockets;
					objectAttribs[i].minValue = sockets;
					objectAttribs[i].maxValue = sockets;
					objectAttribs[i].currentValue = sockets;

					if ( sockets > 0 )
						setCondition(prototype, CONDITION_MAGIC_ITEM);
				}
			}
		}
		else
		{
			//objectAttribs[i].maxValue = objectAttribs[i].maxValue / 6;
		}
		debugServerConsoleMsg(self, "\tattrib " + objectAttribs[i].name + ", values = " + objectAttribs[i].minValue + ".." + objectAttribs[i].maxValue);
	}

	// grant xp to anyone who contributed components to the session; we do this even if the crafter gets a crit fail
	grantExperience( player, slots );

	// This will be the primary attribute calculation call for the crafting assembly phase
	int assemblySuccess = craftinglib.calcAssemblyPhaseAttributes ( player, slots, objectAttribs, craftingValuesDictionary,
		getAssemblySkillMods(), getResourceMaxResourceWeights(), getAssemblyResourceWeights());
	assemblyResult.set(assemblySuccess);
	if ( assemblySuccess == craftinglib.STATE_CRITICAL_FAILURE || assemblySuccess == craftinglib.STATE_CRITICAL_FAILURE_NODESTROY )
	{
		return SCRIPT_CONTINUE;
	}

	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation calling craftinglib.calcExperimentalAttribs");
	craftinglib.calcExperimentalAttribs(schematic);
	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation return from craftinglib.calcExperimentalAttribs");

	float resourceMalleabilitySkillMod = craftingValuesDictionary.getFloat (craftinglib.RESOURCE_MALLEABILITY_SKILL_MOD);
	utils.setScriptVar (self, craftinglib.RESOURCE_MALLEABILITY_SKILL_MOD, resourceMalleabilitySkillMod);

	experimentPoints.set(craftinglib.calcExperimentPoints(player, getExperimentSkillMods()));

	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation setting current attributes");
	if (setSchematicAttributes(self, objectAttribs))
		debugServerConsoleMsg(self, "OnManufacturingSchematicCreation set initial attributes of schematic");
	else
		debugServerConsoleMsg(self, "OnManufacturingSchematicCreation failed to set initial attributes of schematic!");

	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation setting experimental attributes");
	if (setSchematicExperimentalAttributes(self, experimentalAttribs))
		debugServerConsoleMsg(self, "OnManufacturingSchematicCreation set experimental attributes of schematic");
	else
		debugServerConsoleMsg(self, "OnManufacturingSchematicCreation failed to set experimental attributes of schematic!");

	// get an approximate experimental mod value so the player will have a better idea of the success chance of experimentation
	craftinglib.calcPerExperimentationCheckMod (player, craftingValuesDictionary, 0, objectAttribs, getExperimentSkillMods());
	setSchematicExperimentMod(self, craftingValuesDictionary.getFloat ("totalExperimentPointModifier"));

	// set up customization data for the object
	if ( slots != null && slots.length > 0 )
	{
		String[] appearances = getAppearances(player, slots);
		if ( appearances != null && appearances.length > 0 )
			setSchematicAppearances(self, appearances);
	}

	debugServerConsoleMsg(self, "OnManufacturingSchematicCreation getting customization data");
	draft_schematic.custom[] customizations = schematic.getCustomizations();
	if ( customizations != null && customizations.length > 0 )
	{
		debugServerConsoleMsg(self, "OnManufacturingSchematicCreation calling getCustomizations");
		customizations = getCustomizations(player, customizations);
		if ( customizations != null && customizations.length > 0 )
			setSchematicCustomizations(self, customizations);
	}
	else
	{
		if ( customizations == null )
			debugServerConsoleMsg(self, "OnManufacturingSchematicCreation customizations == null");
		else
			debugServerConsoleMsg(self, "OnManufacturingSchematicCreation customizations.length == 0");
	}

 	// now adjust the attributes for the components and update the prototype
	// also store armor objvar data, not including any components
 	calcAndSetPrototypeProperties (prototype, objectAttribs, craftingValuesDictionary);
	craftinglib.storeTissueDataAsObjvars(craftingValuesDictionary, objectAttribs, prototype, true);

	// Store extra creature data
	string root_internal = craftinglib.COMPONENT_ATTRIBUTE_INTERNAL_OBJVAR_NAME + ".";
	string root = craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".";

	for (int i = 0; i < bio_engineer.CREATURE_ATTRIB_NUM; i++)
	{
		int attrib = (int) getFloatObjVar(self, root_internal + bio_engineer.CREATURE_ATTRIB_OBJVAR_NAMES[i]);
		setObjVar(self, root + bio_engineer.CREATURE_ATTRIB_OBJVAR_NAMES[i], attrib);
	}

/*
	int[] armor_data = getIntArrayObjVar(self, root_internal + "armorData");
	if(armor_data != null && armor_data.length > 0) {	// Zero length array check

		setObjVar(self, root + "armorData", armor_data);
	}
*/
	int quality = getIntObjVar(self, root_internal + "quality");
	setObjVar(self, root + "quality", quality);

	int specialAttack1 = getIntObjVar(self, root_internal + "specialAttack1");
	setObjVar(self, root + "specialAttack1", specialAttack1);

	int specialAttack2 = getIntObjVar(self, root_internal + "specialAttack2");
	setObjVar(self, root + "specialAttack2", specialAttack2);

	string rangedWeapon = getStringObjVar(self, root_internal + "rangedWeapon");
	if (rangedWeapon == null) rangedWeapon = "";
	setObjVar(self, root + "rangedWeapon", rangedWeapon);

 	calcAndSetPrototypeProperties(prototype, objectAttribs);

	return SCRIPT_CONTINUE;
}

