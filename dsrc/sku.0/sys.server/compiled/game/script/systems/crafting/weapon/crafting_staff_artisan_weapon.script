/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_staff_artisan_weapon.script
 * Description:  base crafting script used by all weapons
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.weapons;

inherits systems.crafting.weapon.crafting_base_weapon;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_artisan_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"general_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"general_experimentation"
};

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("minDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("maxDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("attackSpeed", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("woundChance", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("accuracy", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("elementalValue", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("attackCost", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("minDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("maxDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("attackSpeed", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("woundChance", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("accuracy", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("elementalValue", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	),
	new resource_weight("attackCost", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_SHOCK_RESIST, 1)
		}
	)
};
/* @} End constants */


string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

// time to clean up factory crates and manufacturing schems post clicky, have to send a message to or people wont be able to craft
trigger OnInitialize()
{
	if(!weapons.isVersionCurrent(self))
		messageTo(self, "verifyCraftedVersion", null, 0.1f, false);
	return SCRIPT_CONTINUE;	
}

//we have to do this due to the crafting process
messageHandler verifyCraftedVersion ()
{
	weapons.initalizeWeaponFactoryCrateManufacturingSchematics(self);
	return SCRIPT_CONTINUE;
}