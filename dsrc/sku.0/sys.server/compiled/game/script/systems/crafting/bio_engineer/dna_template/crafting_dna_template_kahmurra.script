/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.bio_engineer;

inherits systems.crafting.bio_engineer.crafting_base_dna_template;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"outdoors_bio_engineer_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"medicine_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"medicine_experimentation",
	"medicine_complexity"
};

// skill mod names - these skill mods will affect the customization part of the crafting session if the player has them
const string[] CUSTOMIZATION_SKILL_MODS = {
	"bio_engineer_customization"
};


const string[] APPEARANCES = {
	"object/tangible/component/dna/dna_template_kahmurra.iff"
};


/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("hardiness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      1)
		}
	),
	new resource_weight("fortitude", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      1)
		}
	),
	new resource_weight("dexterity", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      1)
		}
	),
	new resource_weight("endurance", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      1)
		}
	),
	new resource_weight("intellect", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      1)
		}
	),
	new resource_weight("cleverness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     1)
		}
	),
	new resource_weight("dependability", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  1)
		}
	),
	new resource_weight("courage", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        1)
		}
	),
	new resource_weight("fierceness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     1)
		}
	),
	new resource_weight("power", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("hardiness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      1)
		}
	),
	new resource_weight("fortitude", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      1)
		}
	),
	new resource_weight("dexterity", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      1)
		}
	),
	new resource_weight("endurance", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      1)
		}
	),
	new resource_weight("intellect", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      1)
		}
	),
	new resource_weight("cleverness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     1)
		}
	),
	new resource_weight("dependability", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  1)
		}
	),
	new resource_weight("courage", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        1)
		}
	),
	new resource_weight("fierceness", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     1)
		}
	),
	new resource_weight("power", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the weighting of the slots on the attributes 
 *  Slot weighting array must be in the same order as the slots defined in the draft schematic
 *  (NOTE: This only work with the custom coding in this script.  The default crafting system doesn't handle this
 *
 **********************/

const resource_weight[] OBJ_SLOT_ATTRIBUTE_RESOURCES = {
	new resource_weight("physique_profile", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          4)
		}
	),
	new resource_weight("prowess_profile", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          4)
		}
	),
	new resource_weight("mental_profile", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          2)
		}
	),
	new resource_weight("psychological_profile", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          4)
		}
	),
	new resource_weight("aggression_profile", new resource_weight.weight[] {
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_HARDINESS,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FORTITUDE,      6),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEXTERITY,      2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_ENDURANCE,      2),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_INTELLECT,      1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_CLEVERNESS,     1),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_DEPENDABILITY,  4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_COURAGE,        4),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_FIERCENESS,     10),
		new resource_weight.weight(bio_engineer.CREATURE_ATTRIB_POWER,          10)
		}
	)
};

/**********************
 *
 *  These values are used only so the correct weighting info is displayed in the crafting UI
 *  (NOTE: This only work with the custom coding in this script.  The default crafting system doesn't handle this
 *
 **********************/

const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_DISPLAY = {
	new resource_weight("hardiness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				10),	// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				6),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				1),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				1),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				6)		// Aggression
		}
	),
	new resource_weight("fortitude", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				10),	// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				6),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				1),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				1),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				6)		// Aggression
		}
	),
	new resource_weight("dexterity", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				6),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				10),	// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				4),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				2),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				2)		// Aggression
		}
	),
	new resource_weight("endurance", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				6),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				10),	// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				4),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,		  	    2),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				2)		// Aggression
		}
	),
	new resource_weight("intellect", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				1),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				2),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				10),	// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,		  	    6),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				1)		// Aggression
		}
	),
	new resource_weight("cleverness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				1),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				2),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				10),	// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				6),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				1)		// Aggression
		}
	),
	new resource_weight("dependability", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				2),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				1),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				6),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				10),	// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				4)		// Aggression
		}
	),
	new resource_weight("courage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				2),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				1),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				6),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				10),	// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				4)		// Aggression
		}
	),
	new resource_weight("fierceness", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				4),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				4),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				2),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				4),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				10)		// Aggression
		}
	),
	new resource_weight("power", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_01,				4),		// Physique
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_02,				4),		// Prowess
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_03,				2),		// Mental
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_04,				4),		// Psychological
		new resource_weight.weight(craftinglib.SLOT_WEIGHT_SLOT_05,				10)		// Aggression
		}
	)
};

/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

/*
string[] getCustomizationSkillMods()
{
	return CUSTOMIZATION_SKILL_MODS;
}

string[] getAppearances(obj_id player, draft_schematic.slot[] slots)
{
	return APPEARANCES;
}

draft_schematic.custom[] getCustomizations(obj_id player, draft_schematic.custom[] customizations)
{
	if (  customizations == null || customizations.length == 0 )
	{
		return null;
	}
	//figure out player's customization skillmods
	string[] skills = getCustomizationSkillMods();
	float playerCustomizationMod = 0;
	// grab skillMod values for selected skillMods
	if ( skills != null )
	{
		int[] mods = getSkillStatisticModifiers(player, skills);
		for ( int i = 0; i < mods.length; ++i )
		{
			playerCustomizationMod += mods[i];
		}
	}
	if ( playerCustomizationMod > 255 )
	{
		playerCustomizationMod = 255;
	}
	for ( int i = 0; i < customizations.length; ++i )
	{
		customizations[i].maxValue = (int)(playerCustomizationMod);
	}
	if ( customizations.length > 0 && playerCustomizationMod < 101 )
	{
		for ( int i = 1; i < customizations.length; ++i )
		{
			customizations[i] = null;
		}
	}
	else if ( customizations.length > 0 && playerCustomizationMod < 201 )
	{
		for ( int i = 2; i < customizations.length; ++i )
		{
			customizations[i] = null;
		}
	}
	return customizations;
}
*/

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

resource_weight[] getSlotResourceWeights()
{
	return OBJ_SLOT_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyDisplayWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_DISPLAY;
}

