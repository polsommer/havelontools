/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        crafting_blaster_weapon.script
 * Description:  base crafting script used by blaster weapons
 * @author       $Author: RcT and Steve 'the man!' Jakab$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.utils;
include library.craftinglib;
include library.weapons;

inherits systems.crafting.weapon.crafting_base_weapon;

/**
 * Constants
 * @{
 */
/** The version number of this script. */
const string VERSION = "v0.00.00";

/******************************/
// example skill data - this will probably go in a derived script
/******************************/

// skill names - the player must have one of these skills to use this script
const string[] REQUIRED_SKILLS = {
	"crafting_weaponsmith_novice"
};

// skill mod names - these skill mods will affect the assembly part of the crafting session if the player has them
const string[] ASSEMBLY_SKILL_MODS = {
	"weapon_assembly"
};

// skill mod names - these skill mods will affect the experimentation part of the crafting session if the player has them
const string[] EXPERIMENT_SKILL_MODS = {
	"weapon_experimentation"
};

/**********************
 *
 *  These values are used to determine the resource contribution to the value of item attributes
 *
 **********************/
const resource_weight[] OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES = {
	new resource_weight("minDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("maxDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("attackSpeed", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("woundChance", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("accuracy", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("elementalValue", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("attackCost", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	)
};


/**********************
 *
 *  These values are used to determine the resource max value of item attributes
 *
 **********************/

const resource_weight[] OBJ_MAX_ATTRIBUTE_RESOURCES = {
	new resource_weight("minDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("maxDamage", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("attackSpeed", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("woundChance", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("hitPoints", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("accuracy", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("elementalValue", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	),
	new resource_weight("attackCost", new resource_weight.weight[] {
		new resource_weight.weight(craftinglib.RESOURCE_CONDUCTIVITY, 1),
		new resource_weight.weight(craftinglib.RESOURCE_QUALITY,      1)
		}
	)
};
/* @} End constants */



string[] getRequiredSkills()
{
	return REQUIRED_SKILLS;
}

string[] getAssemblySkillMods()
{
	return ASSEMBLY_SKILL_MODS;
}

string[] getExperimentSkillMods()
{
	return EXPERIMENT_SKILL_MODS;
}

resource_weight[] getResourceMaxResourceWeights()
{
	return OBJ_MAX_ATTRIBUTE_RESOURCES;
}

resource_weight[] getAssemblyResourceWeights()
{
	return OBJ_ASSEMBLY_ATTRIBUTE_RESOURCES;
}

/**
 * We are going to use this trigger to fix some pistol crates that have been broken due to
 * their draft schematic having a slot removed.
 */
trigger OnInitialize()
{
	// time to clean up factory crates and manufacturing schems post clicky, have to send a message to or people wont be able to craft
	if(!weapons.isVersionCurrent(self))
		messageTo(self, "verifyCraftedVersion", null, 0.1f, false);
	// see if we are a crate
	string templateName = getTemplateName(self);
	if ( templateName != null && templateName.indexOf("factory_crate") >= 0 )
	{
		string schematicName = getDraftSchematic(self);
		if ( schematicName != null )
		{
			// see if we contain a fwg5 pistol
			if ( schematicName.indexOf("/pistol_flechette_fwg5.iff") >= 0 )
			{
				fixCrate(self, "powerhandler", 3);
			}
			// see if we contain a scatter pistol
			else if ( schematicName.indexOf("/pistol_scatter.iff") >= 0 )
			{
				fixCrate(self, "cartridge_feed_unit", 4);
			}
			// see if we contain a launcher pistol
			else if ( schematicName.indexOf("/pistol_launcher.iff") >= 0 )
			{
				fixCrate(self, "powerhandler", 3);
			}
		}
	}

	return SCRIPT_CONTINUE;
}

/**
 * Look for an objvar that specifies a given slot name at a specific index. If we find it,
 * we remove the objvars associated with that slot, and resequence the slot numbers to make
 * them sequential.
 */
void fixCrate(obj_id self, string slotName, int slotIndex)
{
	// see if the slot exists
	obj_var_list slotList = getObjVarList(self, "ingr." + slotIndex);
	if ( slotList == null )
		return;

	// check the slot name
	string_id slotFullName = getStringIdObjVar(self, "ingr." + slotIndex + ".name");
	if ( slotFullName == null || !slotName.equals(slotFullName.getAsciiId()))
		return;

	CustomerServiceLog("Crafting", "Found crate " + self + " belonging to " + getOwner(self) +
		" which we think is a pistol crate that needs to be fixed");

	// iterate through the slots following slotIndex, changing the slot number by -1
	int newSlot = slotIndex;
	int oldSlot = newSlot + 1;
	for ( ;; ++newSlot, ++oldSlot)
	{
		string oldName = "ingr." + oldSlot;
		string newName = "ingr." + newSlot;

		removeObjVar(self, newName);

		slotList = getObjVarList(self, oldName);
		if ( slotList == null )
			break;

		int count = slotList.getNumItems();
		for ( int i = 0; i < count; ++i )
		{
			obj_var ov = slotList.getObjVar(i);
			string newObjvarName = newName + "." + ov.getName();
			setObjVar(self, newObjvarName, ov.getData());
		}
	}
	// remove the last slot
	removeObjVar(self, "ingr." + newSlot);
}

//we have to do this due to the crafting process
messageHandler verifyCraftedVersion ()
{
	weapons.initalizeWeaponFactoryCrateManufacturingSchematics(self);
	return SCRIPT_CONTINUE;
}