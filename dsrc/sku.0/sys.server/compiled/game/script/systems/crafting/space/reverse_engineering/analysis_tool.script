include library.utils;
include library.sui;
include library.temp_schematic;

const string_id LOOT_LIST					= new string_id("sui", "analyze_loot");

const string SCRIPTVAR_ANALYZE_SUI			= "analyzer.sui";
const string SCRIPTVAR_ANALYZE_IDS			= "analyzer.ids";

const string STF = "component_analyzer";

const string ANALYZE_TITLE					= "@" + STF + ":analyze_title";
const string ANALYZE_PROMPT					= "@" + STF + ":analyze_prompt";
const string NO_ITEMS_PROMPT				= "@" + STF + ":no_items";

const string BTN_ANALYZE					= "@" + STF + ":analyze";

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( !utils.isNestedWithin(self, player) )
		return SCRIPT_CONTINUE;

	int lootList = mi.addRootMenu(menu_info_types.SERVER_MENU1, LOOT_LIST);
	if ( lootList > -1 && (( getContainedBy(self) != getOwner(self) ) || isGod(player)) )
	{
		string template = utils.getTemplateFilenameNoPath(self);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( !utils.isNestedWithin(self, player) )
			return SCRIPT_CONTINUE;

	string template = utils.getTemplateFilenameNoPath(self);

	if ( item == menu_info_types.SERVER_MENU1 )
	{

		obj_id[] x = getContents(self);
		//debugSpeakMsg(player, "ID is " + x[0]);

		if (x[0].hasScript("space.crafting.component_loot"))
		{
			//debugSpeakMsg(player, "Ping!  Valid loot!");
			grantSchematic(player, x[0]);
		}






		//showComponentSui(self, player, newItems);

	}

	return SCRIPT_CONTINUE;
}

void showComponentSui(obj_id target, obj_id player, obj_id[] items)
{
		string[] entries = new string[0];

		if (!isIdValid(player))
		{
			return;}

		if (items != null && items.length > 0)
		{
			entries = new string[items.length];}

		for (int i = 0; i < items.length; i++)
		{
			string template = getTemplateName(items[i]);
			string entry = getString(getNameStringId(items[i]));
			entries[i] = entry;
		}

		if (entries != null && entries.length > 0)
		{
			int pid = sui.listbox(target, player, ANALYZE_PROMPT, sui.OK_ONLY , ANALYZE_TITLE, entries, "handleAnalyzeComponent", false, false);

			if (pid > -1) {

				setSUIProperty(pid, sui.LISTBOX_BTN_OK, sui.PROP_TEXT, BTN_ANALYZE);
				showSUIPage(pid);

				utils.setScriptVar(player, SCRIPTVAR_ANALYZE_SUI, pid);
				utils.setBatchScriptVar(player, SCRIPTVAR_ANALYZE_IDS, items);
			}
		}
		else
		{
			int msgPid = sui.msgbox(target, player, NO_ITEMS_PROMPT, sui.OK_ONLY, ANALYZE_TITLE, "noHandler");
			cleanupComponentSui(player);
			}
}

void cleanupComponentSui(obj_id player) {

	utils.removeScriptVar(player, SCRIPTVAR_ANALYZE_SUI);
	utils.removeBatchScriptVar(player, SCRIPTVAR_ANALYZE_IDS);
}


messageHandler handleAnalyzeComponent()
{
	obj_id player = sui.getPlayerId(params);

	if(!isIdValid(player))
		return SCRIPT_CONTINUE;

	int idx = sui.getListboxSelectedRow(params);
	int bp = sui.getIntButtonPressed(params);

	obj_id[] items = utils.getObjIdBatchScriptVar(player, SCRIPTVAR_ANALYZE_IDS);

	cleanupComponentSui(player);

	if (bp == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	else
	{
		grantSchematic(player, items[idx]);
	}

	return SCRIPT_CONTINUE;
}

void grantSchematic(obj_id player, obj_id item)
{
	boolean condition = playMusic(player, "sound/item_analysis_tool.snd");
	//debugSpeakMsg(player, "Music player?: "+condition);
	string template = getTemplateName(item);
	int x = template.lastIndexOf("/");
	//debugSpeakMsg(player, "last index is " + x);
	string newString = "object/draft_schematic/space/reverse_engineering/rev_" + template.substring(x+1);
	//debugSpeakMsg(player, newString);
	temp_schematic.grant(player, newString, 1);
	destroyObject(item);
}
