   /**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:
 * Description:  base crafting script used by
 * @author       $Author: Reece Thornton & Friends$
 * @version      $Revision: 0$
 */

/**
 * Include Libraries
 */
// include anyLibrary;	/** a .scriptlib file */
include library.craftinglib;

include library.utils;
include library.healing;
include library.consumable;
include library.player_stomach;

inherits systems.crafting.crafting_base;

/** The version number of this script. */
const string VERSION = "v1.00.00";


/**
 * Merge the crafting dictionary into the item attributes, and write them to the prototype.
 *
 * @param prototype						the prototype object
 * @param itemAttributes				attributes of the prototype
 * @param craftingValuesDictionary      dictionary containing component updates to the item attributes
 **/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes, dictionary craftingValuesDictionary )
{
	super.calcAndSetPrototypeProperties ( prototype, itemAttributes, craftingValuesDictionary );
}

/* -----------------3/4/2002 1:48PM------------------
 * Function calcAndSetPrototypeProperties
 *
 * This function reads in the final item attributes that are about to be written into the manufacturing schematic, looks up modifications to these attributes
 * due to component-ingredients from the craftingValuesDictionary, sums them, and then writes the final property values to the prototype item.
 * NOTE: Whatever happens, make sure to cast the attribute array data into the appropriate form before setting the property. The item will want float instead of int for some properties
 *
 * @param prototype - this is the obj_id of the prototype object
 * @param draft_schematic.slot[] itemAttributes - this is the array of all of the item's inital Attributes. These will be updated with the skill-check and resource assembly results.
 *
 * @return - this function doesn't return anything, rather, it updates the prototype's property values with the results of the assembly phase
 * --------------------------------------------------*/
void calcAndSetPrototypeProperties ( obj_id prototype, draft_schematic.attribute[] itemAttributes)
{
	//initialize storage for power
	int tempPower = 0;
	int tempDuration = 0;
	int tempAbsorption = 0;
	int tempCharges = 0;
	int tempSkill_req = 0;
	int[] skill_value = {0};

	// here we go...
	debugServerConsoleMsg(null, "Beginning assembly-phase prototype property setting");
	for ( int i = 0; i < itemAttributes.length; ++i ) // go through all attributes
	{
		if ( itemAttributes[i] == null )
			continue;

		if (!calcAndSetPrototypeProperty ( prototype, itemAttributes[i]))
		{
			//load initial object properties, sum them with experimentation results and component mods, then write them back onto the object
			if ( itemAttributes[i].name.getAsciiId().equals("power"))
			{
				tempPower = (int) ((itemAttributes[i].currentValue) / 2);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("absorption"))
			{
				tempAbsorption = (int) (itemAttributes[i].currentValue);
				if (tempAbsorption > 0)
					setObjVar(prototype, healing.VAR_HEALING_ABSORPTION, tempAbsorption);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("charges"))
			{
				tempCharges = (int) (itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("skillModMin"))
			{
				tempSkill_req = (int) ((itemAttributes[i].maxValue + itemAttributes[i].minValue) - itemAttributes[i].currentValue);
			}
			else if ( itemAttributes[i].name.getAsciiId().equals("duration"))
			{
				tempDuration = (int) (itemAttributes[i].currentValue);
			}
			else
			{
				setObjVar (prototype, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + "." + itemAttributes[i].name.getAsciiId(),
					itemAttributes[i].currentValue);
			}
		}
	}

	int buff_type = 10;

	// Each template corresponds to a wound_type
	//if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_health_a.iff")) buff_type = 0;
	//else if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_strength_a.iff")) buff_type = 1;
	//else if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_constitution_a.iff")) buff_type = 2;
	//else if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_action_a.iff")) buff_type = 3;
	//else if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_quickness_a.iff")) buff_type = 4;
	//else if (template_name.equals("object/draft_schematic/chemistry/medpack_enhance_stamina_a.iff")) buff_type = 5;


	if (buff_type == -1)
		buff_type = rand(0,5);

	attrib_mod[] am = new attrib_mod[1];
	am[0] = new attrib_mod(buff_type, tempPower, tempDuration, healing.VAR_BUFF_MOD_ATTACK, healing.VAR_BUFF_MOD_DECAY);

	setObjVar(prototype, consumable.VAR_CONSUMABLE_MODS, am);						// Suppress linting - We know that this array will
	setObjVar(prototype, consumable.VAR_CONSUMABLE_MEDICINE, true);					// always be at least one element long
	setCount( prototype, tempCharges );

	// Set all stomachs to zero since we aren't currently using the stomach for medicine
	int[] stomach = {0, 0, 0};
	setObjVar(prototype, consumable.VAR_CONSUMABLE_STOMACH_VALUES, stomach);		// Suppress linting - We know that this array will
																					// always be at least three elements long
	// Add in skill mod required data
	string[] skill_mod = {"healing_ability"};
	setObjVar(prototype, consumable.VAR_SKILL_MOD_REQUIRED, skill_mod);				// Suppress linting - We know that this array will
																					// always be at least one element long
	// Add in min mod value data
	int[] skill_mod_value = {tempSkill_req};
	setObjVar(prototype, consumable.VAR_SKILL_MOD_MIN, skill_mod_value);			// Suppress linting - We know that this array will
}																					// always be at least one element long

