
/***** INCLUDES ********************************************************/

include library.resource;
include library.sui;
include library.utils;
include library.prose;
include library.craftinglib;
include library.player_structure;


/***** CONSTANTS *******************************************************/

const string	STF_FILE						= "pet/droid_modules";

const string_id	SID_PLANET_TITLE				= new string_id (STF_FILE, "survey_planet_title");
const string_id SID_PLANET_PROMPT				= new string_id (STF_FILE, "survey_planet_prompt");
const string_id	SID_SURVEY_TOOL_TITLE			= new string_id (STF_FILE, "survey_select_tool_title");
const string_id SID_SURVEY_TOOL_PROMPT			= new string_id (STF_FILE, "survey_select_tool_prompt");

const string_id SID_NO_SURVEY_SKILL				= new string_id (STF_FILE, "survey_no_survey_skill");
const string_id SID_NO_SURVEY_TOOLS				= new string_id (STF_FILE, "survey_no_survey_tools");

const string_id SID_YOU_MUST_BE_OUTDOORS		= new string_id (STF_FILE, "you_must_be_outdoors");
const string_id SID_SURVEY_DROID_LAUNCHED		= new string_id (STF_FILE, "survey_droid_launched");


const string[] 	PLANET_NAMES 		= {
										"Tatooine",
										"Naboo",
										"Corellia",
										"Rori",
										"Talus",
										"Endor",
										"Dantooine",
										"Dathomir",
										"Lok",
										"Yavin IV"
									};

const string[] 	PLANET_INTERNAL 	= {
										"tatooine",
										"naboo",
										"corellia",
										"rori",
										"talus",
										"endor",
										"dantooine",
										"dathomir",
										"lok",
										"yavin4"
									};


/***** TRIGGERS ********************************************************/
trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (hasSkill(player, "class_trader"))
	{
		menu_info_data mid = mi.getMenuItemByType(menu_info_types.ITEM_USE);
		if ( mid == null )
		{
			mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("",""));
		}
		else
		{
			mid.setServerNotify (true);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( item == menu_info_types.ITEM_USE )
	{
		if (utils.isProfession(player, utils.TRADER))
		{
			if ( getTopMostContainer(player) != player )
			{
				sendSystemMessage(player, SID_YOU_MUST_BE_OUTDOORS);
				return SCRIPT_OVERRIDE;
			}

			string title = utils.packStringId(SID_PLANET_TITLE);
			string prompt = utils.packStringId(SID_PLANET_PROMPT);
			string[] planetNames = new string[PLANET_INTERNAL.length];
			for (int i = 0; i < PLANET_INTERNAL.length; i++)
				planetNames[i] = utils.packStringId(new string_id("planet_n", PLANET_INTERNAL[i]));

			sui.listbox(self, player, prompt, sui.OK_CANCEL, title, planetNames, "handlePlanetSelection");
		}
		else
			sendSystemMessage(player, SID_NO_SURVEY_SKILL);
	}

	return SCRIPT_CONTINUE;
}

/***** FUNCTIONS *******************************************************/
messageHandler handlePlanetSelection()
{
	if ( (params == null) || (params.isEmpty()) )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

	if ( btn == sui.BP_CANCEL )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	if ( idx == -1 )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	string planet = PLANET_INTERNAL[idx];
	
	if (planet == null || planet.equals(""))
	{
		sendSystemMessageTestingOnly(player, "Error retrieving planet data");
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}
	
	utils.setScriptVar(self, "planet", planet);

	string[] surveyTools = getAvailableSurveyTools(player);

	if (surveyTools == null || surveyTools.length == 0)
	{
		sendSystemMessage(player, SID_NO_SURVEY_TOOLS);
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	string title = utils.packStringId(SID_SURVEY_TOOL_TITLE);
	string prompt = utils.packStringId(SID_SURVEY_TOOL_PROMPT);

	sui.listbox(self, player, prompt, sui.OK_CANCEL, title, surveyTools, "handleSurveySelection");
	
	return SCRIPT_CONTINUE;
}

messageHandler handleSurveySelection()
{
	if ( (params == null) || (params.isEmpty()) )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);

	if ( btn == sui.BP_CANCEL )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	if ( idx == -1 )
	{
		cleanScriptVars();
		return SCRIPT_CONTINUE;
	}

	string planet = utils.getStringScriptVar(self, "planet");
	resizeable string[] surveyResourceList = utils.getResizeableStringArrayScriptVar(self, "surveyResource");
	resizeable obj_id[] surveyToolList = utils.getResizeableObjIdArrayScriptVar(self, "surveyToolId");

	obj_id[] resourceIdList = getAvailablePlanetResources(planet, (string)surveyResourceList.get(idx));

	// Calculate time for report to return and send messageTo for report
	int time = getSurveyTime();
	
	if (isGod(player))
	{
		string delayStr = getConfigSetting("GameServer", "InterplanetarySurveyDelay");
		if (delayStr != null && !delayStr.equals(""))
			time = Integer.parseInt(delayStr);
	}
	
	dictionary data = new dictionary();
	data.put("resourceList", resourceIdList);
	data.put("planetName", planet);
	data.put("resourceClass", surveyResourceList[idx]);

	messageTo(player, "handleSurveyDroidReport", data, time, true);

	// Destroy the Survey Tool used and decrement uses on droid.
	destroyObject(surveyToolList[idx]);
	
	int charges = getCount(self);
	if (charges > 1)
		incrementCount(self, -1);
	else
	{
		destroyObject(self);
	}

	string runTime = player_structure.assembleTimeRemaining(player_structure.convertSecondsTime(time));
	prose_package ppDroidLaunched = prose.getPackage(SID_SURVEY_DROID_LAUNCHED);
	prose.setTT(ppDroidLaunched, runTime);
	sendSystemMessageProse(player, ppDroidLaunched);

	return SCRIPT_CONTINUE;
}

void cleanScriptVars()
{
	obj_id self = getSelf();
	utils.removeScriptVar(self, "surveyToolId");
	utils.removeScriptVar(self, "surveyResource");
	utils.removeScriptVar(self, "planet");
}


string[] getAvailableSurveyTools(obj_id player)
{
	if (!isIdValid(player) || !isPlayer(player))
		return null;
	
	resizeable string[] surveyToolList = new string[0];
	resizeable string[] surveyTemplateList = new string[0];
	resizeable string[] surveyResourceList = new string[0];
	resizeable obj_id[] surveyToolIdList = new obj_id[0];
	
	obj_id inv = utils.getInventoryContainer(player);
	
	if (!isIdValid(inv))
		return null;
	
	obj_id[] contents = utils.getContents(inv, true);
	
	if (contents == null || contents.length == 0)
		return null;
	
	for (int i = 0; i < contents.length; i++)
	{
		string template = getTemplateName(contents[i]);

		if (template.indexOf("survey_tool") > -1)
		{
			if (surveyTemplateList.indexOf(template) == -1)
			{
				string resourceClass = getStringObjVar(contents[i], "survey.resource_class");
				//LOG ("survey_droid", "Found survey tool: Name     ="+getNameFromTemplate(template));
				//LOG ("survey_droid", "Found survey tool: Id       ="+contents[i]);
				//LOG ("survey_droid", "Found survey tool: Template ="+template);
				//LOG ("survey_droid", "Found survey tool: Resource ="+resourceClass);
				
				surveyToolList.add(utils.packStringId(getNameFromTemplate(template)));
				surveyTemplateList.add(template);				
				surveyResourceList.add(resourceClass);
				surveyToolIdList.add(contents[i]);
				continue;
			}
		}
	}
	
	utils.setScriptVar(getSelf(), "surveyToolId", surveyToolIdList);
	utils.setScriptVar(getSelf(), "surveyResource", surveyResourceList);
	
	return surveyToolList;
}

obj_id[] getAvailablePlanetResources(string planet, string resourceClass)
{
	resource_density[] resources = requestResourceList(new location(0, 0, 0, toLower(planet)), 0.0f, 1.0f, resourceClass);
	obj_id[] resourceList = new obj_id[resources.length];
	
	for (int i = 0; i < resourceList.length; i++)
	{
		resourceList[i] = resources[i].getResourceType();
	}
	
	return resourceList;
}

int getSurveyTime()
{
	const int minTime = 15 * 60;
	const int maxTime = 60 * 60;
	
	obj_id self = getSelf();
	
	float quality = getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".mechanism_quality");
	if (quality > 100) quality = 100;
	
	int time = minTime + (int)((maxTime - minTime) * ((100-quality)/100));
	
	return time;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;

	int count = getCount( self );
	if ( count > 0 )
	{
		names[idx] = "quantity";
		attribs[idx] = Integer.toString( count );
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	if (hasObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".mechanism_quality"))
	{
		names[idx] = "mechanism_quality";
		int value = (int)getFloatObjVar(self, craftinglib.COMPONENT_ATTRIBUTE_OBJVAR_NAME + ".mechanism_quality");
		attribs[idx] = "" + value;
		idx++;
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	return SCRIPT_CONTINUE;
}

