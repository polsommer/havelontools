include library.utils;
include library.storyteller;
include library.trial;
include library.static_item;


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "blueprint_record_data"));

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( !utils.isNestedWithin(self, player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "blueprint_from_inventory_only"));
		return SCRIPT_CONTINUE;
	}
	
	if( getState(player, STATE_SWIMMING) == 1 )
	{
		sendSystemMessage(player, new string_id("storyteller", "blueprint_not_while_swimming"));
		return SCRIPT_CONTINUE;
	}

	if( isFreeTrialAccount(player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "blueprint_no_trial_accounts"));
		return SCRIPT_CONTINUE;
	}

	if (item == menu_info_types.ITEM_USE)
	{
		if ( !createBlueprint(self, player) )
		{
			sendSystemMessage(player, new string_id("storyteller", "blueprint_failed_to_create"));
		}
		else
		{
			// if successful, the blueprint object is replaced with a difference appearance:
			// blank blueprint appearance switch to a completed blueprint appearance
			destroyObject(self);
		}
	}

	return SCRIPT_CONTINUE;
}

boolean hasBlueprintData(obj_id blueprint)
{
	return utils.hasStringBatchObjVar(blueprint, storyteller.BLUEPRINT_OBJECTS_OBJVAR);
}

boolean createBlueprint(obj_id blueprint, obj_id player)
{
	if ( !isIdValid(player) )
	{
		return false;
	}

	obj_id[] storytellerObjects = getAllObjectsWithObjVar(getLocation(player), storyteller.BLUEPRINT_DEFAULT_RADIUS, "storytellerid");
	if ( storytellerObjects == null || storytellerObjects.length < 1 )
	{
		sendSystemMessage(player, new string_id("storyteller", "blueprint_no_objects_found"));
		return false;
	}

	string[] blueprintObjects = storyteller.recordBlueprintData(blueprint, storytellerObjects, player);
	if ( blueprintObjects == null || blueprintObjects.length < 1 )
	{
		sendSystemMessage(player, new string_id("storyteller", "blueprint_no_objects_found_of_yours"));
		return false;
	}

	obj_id usedBlueprint = static_item.createNewItemFunction("st_o_buildout_blueprint", player);
	utils.setBatchObjVar(usedBlueprint, storyteller.BLUEPRINT_OBJECTS_OBJVAR, blueprintObjects);
	
	setObjVar(usedBlueprint, storyteller.BLUEPRINT_AUTHOR_OBJVAR, player);
	setObjVar(usedBlueprint, storyteller.BLUEPRINT_AUTHOR_NAME_OBJVAR, getName(player));
	setObjVar(usedBlueprint, storyteller.BLUEPRINT_VERSION_OBJVAR, storyteller.BLUEPRINT_VERSION_NUM);

	sendSystemMessage(player, new string_id("storyteller", "blueprint_saved"));
	return true;
}



