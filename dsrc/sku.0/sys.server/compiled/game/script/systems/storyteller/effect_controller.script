include library.utils;
include library.static_item;
include library.storyteller;
include library.create;
include library.trial;

const string invisibleObject = "object/tangible/theme_park/invisible_object.iff";
const string effectControlleScript = "systems.storyteller.effect_controller";

trigger OnAttach()
{
	messageTo(self, "handlePlayEffect", null, 1, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler handlePlayEffect()
{
	playEffect(self);
	return SCRIPT_CONTINUE;
}

void playEffect(obj_id self)
{
	string storytellerTokenName = getStringObjVar(self, storyteller.EFFECT_TOKEN_NAME);
	location here = getLocation(self);
	
	string effectName = storyteller.getEffectName(storytellerTokenName);
	
	obj_id[] playersInStory = getPlayersInRangeInStory(self, here);
	if ( playersInStory != null || playersInStory.length > 0  )
	{
		if ( storyteller.isImmediateEffect(storytellerTokenName) )
		{
			if ( getTemplateName(self).equals(invisibleObject) )
			{	
				playClientEffectLoc(playersInStory, effectName, here, 0.0f);
				float cleanup_time = getStandardCleanupTime(self);

				messageTo(self, "cleanupEffectController", null, cleanup_time, false);
			}
			else
			{
				playClientEffectObj(playersInStory, effectName, self, "");
			}
		}
		else
		{
			playClientEffectObj(playersInStory, effectName, self, "", null, "storyteller_persisted_effect");
			setObjVar(self, storyteller.EFFECT_ACTIVE_OBJVAR, effectName);
			createTriggerVolume("storytellerPersistedEffect_far", 100f, true);
			//createTriggerVolume("storytellerPersistedEffect_close", 14f, true);
		}
	}
	
	return;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id breacher)
{
	if ( !isIdValid(breacher) || !isPlayer(breacher) )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( !hasObjVar(self, storyteller.EFFECT_ACTIVE_OBJVAR) )
	{
		return SCRIPT_CONTINUE;
	}

	if ( !volumeName.startsWith("storytellerPersistedEffect") )
	{	
			return SCRIPT_CONTINUE;
	}
	
	string effectName = getStringObjVar(self, storyteller.EFFECT_ACTIVE_OBJVAR);
	if ( effectName != null || effectName.length() > 0 )
	{
		if ( storyteller.allowedToSeeStorytellerObject(self, breacher) )
		{
			obj_id[] playerInStory = { breacher };
			
			stopClientEffectObjByLabel(playerInStory, self, "storyteller_persisted_effect", false);
			playClientEffectObj(playerInStory, effectName, self, "", null, "storyteller_persisted_effect");
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handlePlayNewStorytellerEffect()
{	
	obj_id[] playersInStory = getPlayersInRangeInStory(self, getLocation(self));

	stopClientEffectObjByLabel(playersInStory, self, "storyteller_persisted_effect", false);
	removeObjVar(self, storyteller.EFFECT_ACTIVE_OBJVAR);
	removeTriggerVolume("storytellerPersistedEffect");
	
	playEffect(self);
	return SCRIPT_CONTINUE;
}

float getStandardCleanupTime(obj_id effect_controller)
{
	return 30.0f;
}

messageHandler cleanupEffectController()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

obj_id[] getPlayersInRangeInStory(obj_id self, location here)
{
	resizeable obj_id[] playerInStory = new obj_id[0];
	
	obj_id[] players =  getPlayerCreaturesInRange(here, 165.0f);
	if (players == null || players.length == 0)
		return null;
	
	for ( int i = 0; i < players.length; i++ )
	{
		obj_id player = players[i];
		if ( storyteller.allowedToSeeStorytellerObject(self, player) )
		{
			utils.addElement(playerInStory, player);
		}
	}
	return playerInStory;
}
