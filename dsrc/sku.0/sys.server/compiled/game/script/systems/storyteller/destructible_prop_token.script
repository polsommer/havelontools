include library.utils;
include library.prose;
include library.static_item;
include library.storyteller;
include library.create;
include library.trial;

const int MIN_HEALTH = 180000;
const int MAX_HEALTH = 250000;

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( !utils.isNestedWithin(self, player) )
	{
		return SCRIPT_CONTINUE;
	}
	
	string_id eliteConversionPrompt = new string_id("storyteller", "deploy_destuctible_maker");
	mi.addRootMenu (menu_info_types.ITEM_USE, eliteConversionPrompt);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if ( !utils.isNestedWithin(self, player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "placement_from_inventory_only"));
		return SCRIPT_CONTINUE;
	}
	
	if( isFreeTrialAccount(player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "placement_no_trial_accounts"));
		return SCRIPT_CONTINUE;
	}
	
	obj_id target = getStorytellerTokenTarget(player);

	if (item == menu_info_types.ITEM_USE)
	{
		if ( isIdValid(target) )
		{
			if ( isTargetMyStorytellerObject(player, target) )
			{
				if ( !isInvulnerable(target) )
				{
					sendSystemMessage(player, new string_id("storyteller", "destrucible_prop_already_destroyable"));
					return SCRIPT_CONTINUE;
				}
				
				if ( !hasObjVar(target, "storyteller.canBeDestroyable") )
				{
					sendSystemMessage(player, new string_id("storyteller", "destrucible_prop_cannot_be_destroyable"));
					return SCRIPT_CONTINUE;
				}
				
				//int health = rand(MIN_HEALTH, MAX_HEALTH);
				//setMaxHitpoints(target, health);
				//setHitpoints(target, health);
				setInvulnerable(target, false);
				pvpSetAttackableOverride(target, true);
				
				string_id message = new string_id ("storyteller", "destrucible_prop_made_destructible");
				prose_package pp = prose.getPackage(message, player, player);
				prose.setTO(pp, utils.unpackString(getName(target)));
				sendSystemMessageProse(player, pp);

				storyteller.handleTokenUsage(self);

				string logMsg = "("+player+")"+getName(player)+" is converting a storyteller propr into a destructible prop: "+getStaticItemName(self)+" on "+target;
				CustomerServiceLog("storyteller", logMsg);
			}
		}
		else
		{
			sendSystemMessage(player, new string_id("storyteller", "invalid_target"));
		}
	}

	return SCRIPT_CONTINUE;
}

obj_id getStorytellerTokenTarget(obj_id player)
{
	obj_id target = null;
	obj_id intendedTarget = getIntendedTarget(player);
	if( isIdValid(intendedTarget) )
	{
		target = intendedTarget;
	}
	else
	{
		target = getLookAtTarget(player);
	}
	
	return target;
}

boolean isTargetMyStorytellerObject(obj_id player, obj_id target)
{
	if ( storyteller.isAnyStorytellerItem(target) )
	{
		if ( hasObjVar(target, "storytellerid") )
		{
			obj_id storytellerId = getObjIdObjVar(target, "storytellerid");
			if ( storytellerId == player || storytellerId == utils.getObjIdScriptVar(player, "storytellerAssistant") )
			{
				if ( !isMob(target) && !isPlayer(target) )
				{
					return true;
				}
				else
				{
					sendSystemMessage(player, new string_id("storyteller", "destrucible_prop_on_prop_only"));
					return false;
				}
			}
		}
	}
	
	sendSystemMessage(player, new string_id("storyteller", "converter_cannot_use"));
	return false;
}