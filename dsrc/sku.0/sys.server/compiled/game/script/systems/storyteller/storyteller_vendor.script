
/***** INCLUDES ********************************************************/

include library.ai_lib;
include library.prose;
include library.storyteller;
include library.sui;
include library.utils

/***** CONSTANTS *******************************************************/



/***** CODE ************************************************************/

trigger OnAttach()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	
	attachStorytellerVendorConvo(self);
	
	messageTo(self, "handlSpecialName", null, 2, false);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_SENTINEL);
	
	attachStorytellerVendorConvo(self);
	
	messageTo(self, "handlSpecialName", null, 2, false);
	return SCRIPT_CONTINUE;
}

messageHandler handlSpecialName()
{
	if ( rand(0,5) == 1 )
	{
		setName(self, "Pex (an elite storyteller vendor)");
	}
	return SCRIPT_CONTINUE;
}

void attachStorytellerVendorConvo(obj_id vendor)
{
	if(!hasScript(vendor, "conversation.storyteller_vendor"))
	{
		attachScript(vendor, "conversation.storyteller_vendor");
	}
	return;
}

int[] convertSecondsTime(int time)
{
	if (time < 1)
		return null;

	int mod_day = time % 86400;
	int mod_hour = mod_day % 3600;

	int days = time / 86400;
	int hours = mod_day / 3600;
	int minutes = mod_hour / 60;
	int seconds = mod_hour % 60;

	int[] converted_time = {days, hours, minutes, seconds};

	return converted_time;
}

messageHandler msgStorytellerTokenTypeSelected()
{	
	if ( (params == null) || (params.isEmpty()) )
	{
		return SCRIPT_CONTINUE;
	}

	obj_id player = sui.getPlayerId(params);

	int btn = sui.getIntButtonPressed(params);
	int idx = sui.getListboxSelectedRow(params);
	
	string scriptvar_path = "storytellerVendor." + player;
	string oldPidVar = scriptvar_path + ".pid";

	// clean up string vars
	if ( utils.hasScriptVar(self, oldPidVar) )
	{
		utils.removeScriptVar(self, oldPidVar);
	}

	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}
		
	int tokenType = idx;

	storyteller.displayStorytellerTokenPurchaseSUI(player, tokenType, self);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgStorytellerTokenPurchaseSelected()
{
	storyteller.storytellerTokenPurchased(params, self);
	return SCRIPT_CONTINUE;
}

messageHandler msgStorytellerChargesSelected()
{
	storyteller.storytellerSellTokenWithCharges(params, self);
	return SCRIPT_CONTINUE;
}
