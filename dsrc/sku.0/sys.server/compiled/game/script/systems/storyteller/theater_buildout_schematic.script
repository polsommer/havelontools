include library.utils;
include library.storyteller;
include library.trial;
include library.static_item;

const string THEATER_TYPE		= "tbs_theater_type";
const string INTERIOR_ARRAY	= "interiorObjects";
const string EXTERIOR_ARRAY	= "exteriorObjects";

/*
THEATERS ARE NOT CURRENTLY INGAME - CODE WAS SAVED IN CASE THEY ARE ADDED IN THE FUTURE


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (!hasTheaterObjectData(self))
		mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "record_placement"));
	else
		mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "construct_recorded_theater"));

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (!utils.isNestedWithinAPlayer(getSelf()))
		return SCRIPT_CONTINUE;

	if (item == menu_info_types.ITEM_USE)
	{
		if (!hasTheaterObjectData(getSelf()))
		{
			if (!recordTheater(getSelf()))
				sendSystemMessage(player, new string_id("storyteller", "failed_to_record_theater"));
		}
		else
			reconstructScene(getSelf());
	}

	return SCRIPT_CONTINUE;
}

boolean hasTheaterObjectData(obj_id tbs)
{
	return hasObjVar(tbs, THEATER_TYPE) ? true : false;
}

boolean recordTheater(obj_id tbs)
{
	obj_id theater = getTheaterObject(tbs);

	if (!isIdValid(theater))
		return false;

	obj_id[] interiorObjects = trial.getAllObjectsInDungeon(theater);
	obj_id[] exteriorObjects = getObjectsInRange(theater, storyteller.getTheaterBuildoutRadius(theater));

	string[] interiorRecord = recordInteriorStorytellerInfo(tbs, interiorObjects);
	string[] exteriorRecord = recordExteriorStorytellerInfo(tbs, exteriorObjects, theater);

	if ((interiorRecord == null && exteriorRecord == null) || (interiorRecord.length == 0 && exteriorRecord.length == 0))
		return false;

	setObjVar(tbs, THEATER_TYPE, getStaticItemName(theater));
	utils.setBatchObjVar(tbs, INTERIOR_ARRAY, interiorRecord);
	utils.setBatchObjVar(tbs, EXTERIOR_ARRAY, exteriorRecord);

	return true;
}

obj_id getTheaterObject(obj_id tbs)
{
	obj_id[] allObjects = getObjectsInRange(getTopMostContainer(tbs), 52.0f);

	if (allObjects == null || allObjects.length == 0)
		return null;

	obj_id theaterObject = null;
	for (int i=0;i<allObjects.length;i++)
	{
		if (storyteller.isTheater(allObjects[i]))
			return allObjects[i];
	}

	return null;
}

string[] recordInteriorStorytellerInfo(obj_id tbs, obj_id[] interiorObjects)
{
	if (interiorObjects == null || interiorObjects.length == 0)
		return new string[0];

	resizeable string[] recordString = new string[0];

	for (int i=0;i<interiorObjects.length;i++)
	{
		if (!storyteller.isAnyStorytellerItem(interiorObjects[i]) || storyteller.isAnyEffect(interiorObjects[i]) || storyteller.isTheater(interiorObjects[i]))
			continue;

		string name = getStaticItemName(interiorObjects[i]);
		location loc = getLocation(interiorObjects[i]);
		float yaw = getYaw(interiorObjects[i]);
		int isNpc = storyteller.isAnyNpc(interiorObjects[i]) ? 1 : 0;

		string newEntry = "1"+"-"+name+"-"+loc.x+"-"+loc.y+"-"+loc.z+"-"+yaw+"-"+getCellName(loc.cell)+"-"+isNpc;
		utils.addElement(recordString, newEntry);

	}
	return recordString;
}

string[] recordExteriorStorytellerInfo(obj_id tbs, obj_id[] exteriorObjects, obj_id theater)
{
	resizeable string[] recordString = new string[0];

	for (int i=0;i<exteriorObjects.length;i++)
	{
		if (!storyteller.isAnyStorytellerItem(exteriorObjects[i]) || storyteller.isAnyEffect(exteriorObjects[i]) || storyteller.isTheater(exteriorObjects[i]))
			continue;

		string name = getStaticItemName(exteriorObjects[i]);
		location selfLoc = getLocation(theater);
		location objLoc = getLocation(exteriorObjects[i]);
		float locX = objLoc.x - selfLoc.x;
		float locY = objLoc.y - selfLoc.y;
		float locZ = objLoc.z - selfLoc.z;
		float yaw = getYaw(exteriorObjects[i]);
		string cellName = "none";

		int isNpc = storyteller.isAnyNpc(exteriorObjects[i]) ? 1 : 0;

		string newEntry = "1"+"-"+name+"-"+locX+"-"+locY+"-"+locZ+"-"+yaw+"-"+cellName+"-"+isNpc;

		utils.addElement(recordString, newEntry);
	}
	return recordString;
}

location getInteriorLocation(string spawnString, obj_id theater)
{
	string[] parse = split(spawnString, '-');
	if (parse.length != 8)
		return null;

	float locX = utils.stringToFloat(parse[2]);
	float locY = utils.stringToFloat(parse[3]);
	float locZ = utils.stringToFloat(parse[4]);
	string cellName = parse[6];
	obj_id cell = getCellId(theater, cellName);

	return new location (locX, locY, locZ, getLocation(theater).area, cell);
}

location getExteriorLocation(string spawnString, obj_id theater)
{
	string[] parse = split(spawnString, '-');
	if (parse.length != 8)
		return null;

	location selfLoc = getLocation(theater);
	float locX = selfLoc.x + utils.stringToFloat(parse[2]);
	float locY = selfLoc.y + utils.stringToFloat(parse[3]);
	float locZ = selfLoc.z + utils.stringToFloat(parse[4]);

	return new location(locX, locY, locZ, selfLoc.area, null);
}

boolean isItemInitialized(string spawnString)
{
	string[] parse = split(spawnString, '-');
	if (parse.length != 8)
		return false;

	return utils.stringToInt(parse[0]) == 1;
}

float getItemYaw (string spawnString)
{
	string[] parse = split(spawnString, '-');
	if (parse.length != 8)
		return 0;

	return utils.stringToFloat(parse[5]);
}

boolean isNpcToken(string spawnString)
{
	string[] parse = split(spawnString, '-');
	if (parse.length != 8)
		return false;

	return utils.stringToInt(parse[7]) == 1;
}

string getItemName(string spawnString)
{
	string[] parse = split(spawnString, '-');

	return parse[1];
}

void reconstructScene(obj_id tbs, obj_id player)
{
	string theaterType = getStringObjVar(tbs, THEATER_TYPE);
	string[] interiorArray = utils.getStringBatchObjVar(tbs, INTERIOR_ARRAY);
	string[] exteriorArray = utils.getStringBatchObjVar(tbs, EXTERIOR_ARRAY);

	obj_id container = getContainedBy(tbs);

	obj_id theaterToken = static_item.createNewItemFunction(theaterType, container);
	obj_id theater = storyteller.createTheaterObject(theaterToken, false);

	obj_id[] cellIds = getCellIds(theater);

	if (cellIds == null || cellIds.length < 1)
	{
		if (exteriorArray == null || exteriorArray.length == 0)
			return;

		for (int i=0;i<exteriorArray.length;i++)
		{
			string name = getItemName(exteriorArray[i]);
			location atLoc = getExteriorLocation(exteriorArray[i], theater);
			float yaw = getItemYaw(exteriorArray[i]);
			obj_id token = static_item.createNewItemFunction(name, container);
			if (!isIdValid(token))
				continue;

			int tokenType = storyteller.getTokenType(token);

			switch(tokenType)
			{
				case storyteller.PROP:
							storyteller.createPropObject(token, player, false, atLoc, yaw);
							break;
			}


		}
	}
	else
	{
		if (interiorArray != null && interiorArray.length > 0)
		{
			//doInteriorRecon
		}

		if (exteriorArray != null && interiorArray.length > 0)
		{
			//doExteriorRecon
		}
	}
};
*/