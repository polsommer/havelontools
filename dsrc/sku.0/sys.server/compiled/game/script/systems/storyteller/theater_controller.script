include library.utils;
include library.static_item;
include library.storyteller;
include library.trial;

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if (isInBuildoutMode(self))
		mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "recover_theater"));
	else
		mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "destroy_theater"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		if (isInBuildoutMode(self))
		{
			recoverTheater(self, player);
		}
		else
			clearTheaterArea(self);

	}
	return SCRIPT_CONTINUE;
}

boolean isInBuildoutMode(obj_id theater)
{
	return getBooleanObjVar(theater, storyteller.THEATER_MODE);
}

string[] recoverTheater(obj_id theater, obj_id player)
{
	obj_id[] cellIds = getCellIds(theater);
	resizeable obj_id[] allObjects = new obj_id[0];
	if (cellIds != null && cellIds.length > 0)
	{
		obj_id[] interiorObjects = trial.getAllObjectsInDungeon(theater);
		if (interiorObjects != null && interiorObjects.length > 0)
		{
			for (int i=0;i<interiorObjects.length;i++)
				utils.addElement(allObjects, interiorObjects[i]);
		}

	}

	float range = getTheaterBuildoutRange(getStaticItemName(theater));
	obj_id[] objectsInRange = getObjectsInRange(getLocation(theater), range);
	if (objectsInRange != null && objectsInRange.length > 0)
	{
		for (int i=0;i<objectsInRange.length;i++)
			utils.addElement(allObjects, objectsInRange[i]);
	}

	obj_id[] filteredList = getStorytellerObjectsFromArray(allObjects);
	if (filteredList == null || filteredList.length == 0)
		return null;

	string[] storytellerItems = getStorytellerItemListFromArray(filteredList);
	if (storytellerItems == null || storytellerItems.length == 0)
		return null;

	trial.cleanupObject(filteredList);
	obj_id inventory = utils.getInventoryContainer(player);

	for (int i=0;i<storytellerItems.length;i++)
		static_item.createNewItemFunction(storytellerItems[i], inventory);

	return storytellerItems;
}

float getTheaterBuildoutRange(string item)
{
	return dataTableGetFloat(storyteller.STORYTELLER_DATATABLE, item, "buildout_radius");
}

obj_id[] getStorytellerObjectsFromArray(resizeable obj_id[] allObjects)
{
	resizeable obj_id[] filteredList = new obj_id[0];
	for (int i=0;i<allObjects.length;i++)
	{
		if (!isIdValid(allObjects[i]) || !exists(allObjects[i]))
			continue;

		string itemName = getStaticItemName(allObjects[i]);
		int row = dataTableSearchColumnForString(itemName, "name", storyteller.STORYTELLER_DATATABLE);

		if (row == -1)
			continue;

		utils.addElement(filteredList, allObjects[i]);
	}
	return filteredList;
}

string[] getStorytellerItemListFromArray(obj_id[] objectList)
{
	string[] storytellerObjects = new string[objectList.length];

	for (int i=0;i<objectList.length;i++)
	{
		storytellerObjects[i] = getStaticItemName(objectList[i]);
	}
	return storytellerObjects;
}

void clearTheaterArea (obj_id theater)
{
	float range = getTheaterBuildoutRange(getStaticItemName(theater));

	obj_id[] objects = getObjectsInRange(getLocation(theater), range);

	for (int i=0;i<objects.length;i++)
	{
		if (storyteller.isAnyStorytellerItem(objects[i]) && objects[i] != theater)
			trial.cleanupObject(objects[i]);
	}

	trial.cleanupObject(theater);
}