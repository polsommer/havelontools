include library.ai_lib;
include library.combat;
include library.create;
include library.storyteller;
include library.sui;
include library.trial;
include library.utils;

const float MIN_NPC_DISTANCE = 6.0f;
const string INVENTORY_SCRIPT = "systems.storyteller.npc_inventory_controller";

const int OPEN_NPC_MENU				= menu_info_types.SERVER_MENU1;
const int SET_NPC_LEVEL_MENU		= menu_info_types.SERVER_MENU2;
const int DESTROY_NPC_MENU			= menu_info_types.SERVER_MENU3;
const int SET_NPC_BEHAVIOR_MENU		= menu_info_types.SERVER_MENU4;
const int SET_NPC_TO_FLAVOR_MENU	= menu_info_types.SERVER_MENU5;
const int REMOVE_EFFECT_MENU		= menu_info_types.SERVER_MENU6;
const int NPC_OPTIONS_ROOT_MENU		= menu_info_types.SERVER_MENU7;
const int EQUIP_UNEQUIP_WEAPON_MENU	= menu_info_types.SERVER_MENU8;

trigger OnAttach()
{
	setObjVar(self, "storytellerCreationTime", getGameTime());
	utils.setScriptVar(self, "storytellerOnAttachFired", true);
	
	checkBonusCleanupTime(self);
	
	npcSetup(self);
	setNpcCleanup(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	messageTo(self, "handleStorytellerPropInitialize", null, 5, false);
	
	return SCRIPT_CONTINUE;
}

messageHandler handleStorytellerPropInitialize()
{
	if ( !hasObjVar(self, "eventTeamCleaupOverride") && !utils.hasScriptVar(self, "storytellerOnAttachFired") )
	{	
		if ( hasObjVar(self, "storytellerCreationTime") )
		{
			int storytellerCreationTime = getIntObjVar(self, "storytellerCreationTime");
			if ( getGameTime() >= storytellerCreationTime + getStandardCleanupTime(self) )
			{
				messageTo(self, "cleanupProp", null, 1, false);
			}
			else
			{
				npcSetup(self);
				messageTo(self, "prepCleanupProp", null, getStandardCleanupTime(self) - ( getGameTime() - storytellerCreationTime ), false);
			}
		}
		else
		{
			setObjVar(self, "storytellerCreationTime", getGameTime());
			npcSetup(self);
			setNpcCleanup(self);
		}
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	obj_id myStorytellerId = getObjIdObjVar(self, "storytellerid");
	if ( (myStorytellerId == player  || myStorytellerId == utils.getObjIdScriptVar(player, "storytellerAssistant") || isGod(player)) && !isIncapacitated(self) )
	{
		int menuDestroyNpc = mi.addRootMenu (DESTROY_NPC_MENU, new string_id("storyteller", "destroy_npc"));
		int menuNpcOptions = mi.addRootMenu (NPC_OPTIONS_ROOT_MENU, new string_id("storyteller", "npc_options"));
		
		if ( myStorytellerId == player || myStorytellerId == utils.getObjIdScriptVar(player, "storytellerAssistant"))
		{
			if ( !isInvulnerable(self) )
			{
				mi.addSubMenu(menuNpcOptions, OPEN_NPC_MENU, new string_id("storyteller", "open_npc"));
				mi.addSubMenu(menuNpcOptions, SET_NPC_LEVEL_MENU, new string_id("storyteller", "set_npc_level"));
				mi.addSubMenu(menuNpcOptions, SET_NPC_TO_FLAVOR_MENU, new string_id("storyteller", "set_npc_flavor_npc"));
			}
		
			string defaultBehavaviorMenu = "set_npc_sentinel";
			int defaultBehavior = ai_lib.getDefaultCalmBehavior(self);
			if ( defaultBehavior == ai_lib.BEHAVIOR_SENTINEL )
			{
				defaultBehavaviorMenu = "set_npc_loiter";
			}
			mi.addSubMenu(menuNpcOptions, SET_NPC_BEHAVIOR_MENU, new string_id("storyteller", defaultBehavaviorMenu));
			
			if ( aiHasPrimaryWeapon(self) ||  aiHasSecondaryWeapon(self) )
			{
				string defaultEquipWeaponMenu = "set_npc_weapon_equip";
				if ( aiUsingPrimaryWeapon(self) || aiUsingSecondaryWeapon(self) )
				{
					defaultEquipWeaponMenu = "set_npc_weapon_unequip";
				}
				mi.addSubMenu(menuNpcOptions, EQUIP_UNEQUIP_WEAPON_MENU, new string_id("storyteller", defaultEquipWeaponMenu));
			}

		}
		
		
		if ( hasObjVar(self, storyteller.EFFECT_ACTIVE_OBJVAR) )
		{
			mi.addSubMenu(menuNpcOptions, REMOVE_EFFECT_MENU, new string_id("storyteller", "remove_persisted_effect"));
		}
		
		return SCRIPT_CONTINUE;
	}
			
	return SCRIPT_CONTINUE;

}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	sendDirtyObjectMenuNotification(self);
	
	obj_id myStorytellerId = getObjIdObjVar(self, "storytellerid");
	if ( (myStorytellerId == player || myStorytellerId == utils.getObjIdScriptVar(player, "storytellerAssistant") || isGod(player)) && !isIncapacitated(self)  )
	{
		if (item == NPC_OPTIONS_ROOT_MENU)
		{
			sendSystemMessage(player, new string_id("storyteller", "npc_options_prompt"));
		}
		
		// open the npc's inventory
		if (item == OPEN_NPC_MENU)
		{
			master_storyteller_npc_inventory(player, self);
		}
		
		// show sui to set combat level
		else if ( item == SET_NPC_LEVEL_MENU )
		{
			string prompt = utils.packStringId(new string_id("storyteller", "npc_combat_level_prompt"));
			sui.inputbox(self, player, prompt, "handleStorytellerNpcLevelSelect");
		}
		
		// destroy the npc
		else if ( item == DESTROY_NPC_MENU )
		{
			trial.cleanupObject(self);
		}
		
		//toggle sentinel vs. loiter
		else if ( item == SET_NPC_BEHAVIOR_MENU )
		{
			int targetBehavoir = ai_lib.BEHAVIOR_SENTINEL;
			int defaultBehavior = ai_lib.getDefaultCalmBehavior(self);
			if ( defaultBehavior == ai_lib.BEHAVIOR_SENTINEL )
			{
				targetBehavoir = ai_lib.BEHAVIOR_LOITER;
			}
			ai_lib.setDefaultCalmBehavior(self, targetBehavoir);
		}
		
		// make the npc a flavor npc rather than combat
		else if ( item == SET_NPC_TO_FLAVOR_MENU )
		{
			if ( combat.isInCombat(self) )
			{
				sendSystemMessage(player, new string_id("storyteller", "npc_combat_in_combat"));
			}
			else
			{
				setInvulnerable(self, true);
			}
		}
		
		else if ( item == EQUIP_UNEQUIP_WEAPON_MENU )
		{
			if ( combat.isInCombat(self) )
			{
				sendSystemMessage(player, new string_id("storyteller", "npc_combat_in_combat"));
			}
			else
			{
				if ( aiUsingPrimaryWeapon(self) || aiUsingSecondaryWeapon(self) )
				{
					aiUnEquipWeapons(self);
				}
				else
				{	
					if ( !equipWeapon(self) )
					{
						sendSystemMessage(player, new string_id("storyteller", "npc_unable_to_equip"));
					}

				}
			}
		}
		
		// remove persisted effect
		else if ( item == REMOVE_EFFECT_MENU )
		{
			storyteller.removeStorytellerPersistedEffect(self);
		}
	}

	return SCRIPT_CONTINUE;
}

messageHandler handleRemoveStorytellerPersistedEffect()
{
	storyteller.removeStorytellerPersistedEffect(self);
	return SCRIPT_CONTINUE;
}

messageHandler handleStorytellerNpcLevelSelect()
{
	obj_id player = sui.getPlayerId(params);
	string text = sui.getInputBoxText(params);

	int level = utils.stringToInt(text);

	if (level < 1 || level > 90)
	{
		sendSystemMessage(player, new string_id("storyteller", "npc_combat_level_invalid"));
	}
	else
	{
		string creatureName = getCreatureName(self);
		dictionary creatureDict = utils.dataTableGetRow(create.CREATURE_TABLE, creatureName);
		if ( creatureDict != null )
		{
			create.initializeCreature(self, creatureName, creatureDict, level);
		}
	}

	return SCRIPT_CONTINUE;
}

void master_storyteller_npc_inventory (obj_id player, obj_id npc)
{
	obj_id inventory = utils.getInventoryContainer(npc);
	if (isIdValid(inventory))
	{
		// set our inventory owner to null for a bit so the player can open it
		if (queueCommand(player, ##"openContainer", inventory, "", COMMAND_PRIORITY_DEFAULT))
		{
			// start checking that the player hasn't moved away from us
			dictionary params = new dictionary();
			params.put("npc", npc);
			messageTo(player, "handleEditingNpcInventory", params, 15, false);
		}
	}
}

/**
 * Called periodically when we are viewing the inventory of an npc we are giving loot to.
 * If we move too far away from the npc, we will close the npc's inventory.
 */
messageHandler handleEditingNpcInventory()
{
	obj_id npc = params.getObjId("npc");
	if ( isIdValid(npc) )
	{
		// if we are far away from the npc, force the inventory window to close
		if ( getDistance(self, npc) > MIN_NPC_DISTANCE )
		{
			obj_id npcInventory = utils.getInventoryContainer(npc);
			if (isIdValid(npcInventory))
			{
				queueCommand(self, ##"closeContainer", npcInventory, "", COMMAND_PRIORITY_IMMEDIATE);
			}
		}
		else
			messageTo(self, "handleEditingNpcInventory", params, 15, false);
	}
	return SCRIPT_CONTINUE;
}

/*******/
void npcSetup(obj_id self)
{
	if ( aiHasPrimaryWeapon(self) )
	{
		aiEquipPrimaryWeapon(self);
	}
	else if ( aiHasSecondaryWeapon(self) )
	{
		aiEquipSecondaryWeapon(self);
	}

	clearNpcInventoryOwnership(self);
	
	return;
}

void clearNpcInventoryOwnership(obj_id self)
{
	// set our owner to null so players can access this container
	obj_id owner = getOwner(self);
	if ( isIdValid(owner) )
	{
		obj_id inventory = utils.getInventoryContainer(self);
		if (isIdValid(inventory))
		{
			//setOwner(self, obj_id.NULL_ID);
			//setObjVar(self, "players_can_access_container", true);
			
			setOwner(inventory, obj_id.NULL_ID);
			setObjVar(inventory, "players_can_access_container", true);
			if( !hasScript(inventory, INVENTORY_SCRIPT) )
			{
				attachScript(inventory, INVENTORY_SCRIPT);
			}
		}
	}
	return;
}

boolean equipWeapon(obj_id self)
{	
	if ( aiHasPrimaryWeapon(self) )
	{
		aiEquipPrimaryWeapon(self);
	}
	else if ( aiHasSecondaryWeapon(self) )
	{
		aiEquipSecondaryWeapon(self);
	}
	
	if ( aiUsingPrimaryWeapon(self) || aiUsingSecondaryWeapon(self) )
	{
		return true;
	}
	return false;
}

void setNpcCleanup(obj_id self)
{
	int cleanup_time = getStandardCleanupTime(self);
	messageTo(self, "prepCleanupProp", null, cleanup_time, false);
	
	return;
}

int getStandardCleanupTime(obj_id prop_controller)
{	
	int cleanup_time = storyteller.DEFAULT_NPC_CLEANUP_TIME;
	
	string myCreatureName = getCreatureName(prop_controller);
	if(myCreatureName.equals("storyteller_vendor"))
	{
		cleanup_time = 1*60*60; // 1 hour for a storyteller vendor
		return cleanup_time;
	}
	
	if(hasObjVar(prop_controller, "storytellerCleanUpTime"))
	{
		int cleanUpTime = getIntObjVar(prop_controller, "storytellerCleanUpTime");
		return cleanUpTime;
	}	
	
	return cleanup_time;
}

messageHandler cleanupProp()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler prepCleanupProp()
{
	storyteller.confirmCleanuptime(self);
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{	
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;
	
	obj_id myStorytellerId = getObjIdObjVar(self, "storytellerid");
	if ( (myStorytellerId == player  || myStorytellerId == utils.getObjIdScriptVar(player, "storytellerAssistant") || isGod(player)) )
	{
		if( hasObjVar(self, "storytellerCreationTime") )
		{
			int storytellerCreationTime = getIntObjVar(self, "storytellerCreationTime");
			int timeRemaining = storytellerCreationTime + getStandardCleanupTime(self) - getGameTime();
			
			names[idx] = "storyteller_time_remaining";
			attribs[idx] = utils.formatTimeVerbose(timeRemaining);
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}

	if( hasObjVar(self, "storytellerName") )
	{
		string storytellerName = getStringObjVar(self, "storytellerName");
		if ( storytellerName != null && storytellerName.length() > 0 )
		{
			names[idx] = "storyteller_npc_owner";
			attribs[idx] = storytellerName;
			idx++;
			if (idx >= names.length)
				return SCRIPT_CONTINUE;
		}
	}
	
	return SCRIPT_CONTINUE;

}

messageHandler handleBlueprintElevation()
{
	if ( params == null || params.isEmpty() )
	{
		return SCRIPT_CONTINUE;
	}
	
	storyteller.handleBlueprintObjectElevation(self, params);
	return SCRIPT_CONTINUE;
}


messageHandler aiCorpsePrepared()
{
	setObjVar(self, "readyToLoot", true);
	return SCRIPT_CONTINUE;
}

void checkBonusCleanupTime(obj_id prop_controller)
{
	storyteller.calculateNpcBonusExistTime(prop_controller);
}

//we will only receive a message back from the City Hall if they have the specialization.
messageHandler st_receivedCityResponse()
{
	storyteller.setBonusExistTime(self);
	return SCRIPT_CONTINUE;
}