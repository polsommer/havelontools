include library.prose;
include library.storyteller;
include library.sui;
include library.utils;

const string JUKEBOX_SCRIPT = "systems.event_perk.jukebox";

trigger OnAttach()
{
	messageTo(self, "initializeStorytellerInvitationTerminal", null, 1, false);
	return SCRIPT_CONTINUE;
}

messageHandler initializeStorytellerInvitationTerminal()
{
	if ( hasObjVar(self, "storytellerName") )
	{
		string storytellerName = getStringObjVar(self, "storytellerName");
		setName(self, getString(utils.unpackString(getName(self)))+" ("+storytellerName+")");
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{	
	string_id menuTxt= new string_id("storyteller", "invitation_terminal_menu");
	mi.addRootMenu (menu_info_types.ITEM_USE, menuTxt);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if (item == menu_info_types.ITEM_USE)
	{
		obj_id storytellerPlayer = getObjIdObjVar(self, "storytellerid");
		string storytellerName = getStringObjVar(self, "storytellerName");
		
		terminalStoryInviteSui(storytellerPlayer, storytellerName, player, self);
	}

	return SCRIPT_CONTINUE;
}

int terminalStoryInviteSui(obj_id storytellerPlayer, string storytellerName, obj_id player, obj_id terminal)
{	
	string title = utils.packStringId(new string_id("storyteller", "sui_invite_title"));
	prose_package pp = prose.getPackage(new string_id("storyteller", "sui_invite_body"));
	prose.setTO(pp, storytellerName);
	string msg = "\0" + packOutOfBandProsePackage(null, pp);
	int pid = sui.msgbox(terminal, player, msg, 2, title, sui.YES_NO, "terminalStoryInviteHandler");
	
	return pid;
}

messageHandler terminalStoryInviteHandler()
{
	obj_id storytellerId = getObjIdObjVar(self, "storytellerid");
	string storytellerName = getStringObjVar(self, "storytellerName");;
	
	obj_id player = sui.getPlayerId(params);
	int btn = sui.getIntButtonPressed(params);
	if ( !isIdValid(player) )
	{
		return SCRIPT_CONTINUE;
	}
	if ( btn == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}

	dictionary webster = new dictionary();
	webster.put("storytellerPlayer", storytellerId);
	webster.put("storytellerName", storytellerName);
	messageTo(player, "handleStoryTellerInviteAccepted", webster, 0, false);

	return SCRIPT_CONTINUE;
}
