include library.utils;
include library.static_item;
include library.storyteller;
include library.create;

trigger OnAttach()
{
	storyteller.resetTokenDailyCount(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	storyteller.resetTokenDailyCount(self);
	return SCRIPT_CONTINUE;
}

messageHandler storytellerEffectTokenDailyAlarm()
{	
	storyteller.resetTokenDailyCount(self);
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if ( !utils.isNestedWithin(self, player) )
	{
		return SCRIPT_CONTINUE;
	}
	
	if( getState(player, STATE_SWIMMING) == 1 )
	{
		return SCRIPT_CONTINUE;
	}
	
	mi.addRootMenu (menu_info_types.ITEM_USE, new string_id("storyteller", "deploy_prop"));
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	return SCRIPT_CONTINUE;
}

trigger OnGroundTargetLoc(obj_id player, int menuItem, float x, float y, float z)
{
	if (!utils.isNestedWithin(self, player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "placement_from_inventory_only"));
		return SCRIPT_CONTINUE;
	}

	if( getState(player, STATE_SWIMMING) == 1 )
	{
		sendSystemMessage(player, new string_id("storyteller", "placement_not_while_swimming"));
		return SCRIPT_CONTINUE;
	}
	
	if( isFreeTrialAccount(player) )
	{
		sendSystemMessage(player, new string_id("storyteller", "placement_no_trial_accounts"));
		return SCRIPT_CONTINUE;
	}
	
	float yaw = getYaw(player);
	location playerLoc = getLocation(player);
	location newLoc = new location(x, y, z, playerLoc.area, playerLoc.cell);
	if ( isIdValid(playerLoc.cell) )
	{
		newLoc = playerLoc;
	}
	
	if( storyteller.createPropObject(self, player, false, newLoc, yaw) == null)
	{
		sendSystemMessage(player, new string_id("storyteller", "failed_to_place"));
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);
	if (idx == -1)
		return SCRIPT_CONTINUE;
	
	if ( storyteller.isTokenFlaggedWithDailyUsage(self) )
	{
		int dailyUsesLeft = storyteller.getTokenDailyUsageAmount(self);
		if ( hasObjVar(self, storyteller.STORYTELLER_DAILY_COUNT_OBJVAR) )
		{
			dailyUsesLeft = dailyUsesLeft - getIntObjVar(self, storyteller.STORYTELLER_DAILY_COUNT_OBJVAR);
		}
		
		names[idx] = "storyteller_daily_uses";
		attribs[idx] = "" + dailyUsesLeft;
		idx++;
		
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}

	if ( storyteller.allowTokenPlacementInInteriors(self) )
	{
		names[idx] = "storyteller_allow_interior_deploy";
		attribs[idx] = "True";
		idx++;
		
		if (idx >= names.length)
			return SCRIPT_CONTINUE;
	}
	
	return SCRIPT_CONTINUE;
}
