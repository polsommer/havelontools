include library.ai_lib;
include library.badge;
include library.create;
include library.storyteller;
include library.static_item;
include library.utils;
include library.performance;

const string DATATABLE_BASE = "datatables/spawning/holiday/";
const string DATATABLE_OBJVAR = "figrinDatatable";

trigger OnInitialize()
{
	debugServerConsoleMsg (self, "Initialized Figrin Dan Band spawner script");
	
	messageTo (self, "spawnFigrinDanBand", null, 9, true);
	return SCRIPT_CONTINUE;
}

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered (string volName, obj_id breecher)
{
	if (!isPlayer (breecher))
	{
		return SCRIPT_CONTINUE;
	}
	else
	{
		if ( !hasObjVar(self, DATATABLE_OBJVAR) )
		{
			return SCRIPT_CONTINUE;
		}

		string datatable = DATATABLE_BASE + getStringObjVar(self, DATATABLE_OBJVAR) + ".iff";
		if ( dataTableHasColumn(datatable, "badge") )
		{
			string badgeName = dataTableGetString(datatable, 0, "badge");
			if ( badgeName != null || badgeName.length() > 0 )
			{			
				if (!badge.hasBadge (breecher, badgeName))
				{
					dictionary explorerBadges = new dictionary();
					explorerBadges.put( "badgeName", badgeName);
					messageTo (breecher, "explorerBadge", explorerBadges, 0, false);
					return SCRIPT_CONTINUE;
				}
				else
				{
					return SCRIPT_CONTINUE;
				}
			}
		}
	}
	
	return SCRIPT_CONTINUE;
}

void spawnEveryone(obj_id self)
{
	spawnBithBand(self);
	return;
}

void spawnBithBand (obj_id self)
{
	if ( !hasObjVar(self, DATATABLE_OBJVAR) )
	{
		return;
	}
	string datatable = DATATABLE_BASE + getStringObjVar(self, DATATABLE_OBJVAR) + ".iff";
	
	location here = getLocation(self);
	float myYaw = getYaw(self);
	
	string[] bandMembers = dataTableGetStringColumn(datatable, "spawn_who");
	
	if ( bandMembers == null || bandMembers.length < 1 )
	{
		return;
	}
	
	for ( int i = 0; i < bandMembers.length; i++ )
	{
		dictionary webster = dataTableGetRow(datatable, i);
		
		float x_offset = webster.getFloat("x_offset");
		float y_offset = webster.getFloat("y_offset");
		float z_offset = webster.getFloat("z_offset");
		
		location tempLoc = new location ((here.x + x_offset), here.y, (here.z + z_offset), here.area, null);
		
		float bandMemberYaw = webster.getFloat("yaw");
		
		location bandMemberLoc = tempLoc;
		location omni_box_loc = tempLoc;
		if ( myYaw != 0 )
		{
			bandMemberLoc = storyteller.rotateLocationXZ(here, tempLoc, myYaw);
			bandMemberYaw -= (0 - myYaw);
		}
		
		obj_id bandMember = create.object (bandMembers[i], bandMemberLoc);
		
		ai_lib.setDefaultCalmBehavior(bandMember, ai_lib.BEHAVIOR_SENTINEL);
		
		if (dataTableHasColumn (datatable, "objvar_name"))
		{
			string objvar = webster.getString("objvar_name");
			if (dataTableHasColumn (datatable, "objvar_value"))
			{
				int objvarInt = webster.getInt("objvar_value");
				if (objvarInt > 0)
					setObjVar(bandMember, objvar, objvarInt);
					
				else if (objvar != null && !objvar.equals ("none"))
					setObjVar(bandMember, objvar, 1);
			}
			else if (objvar != null && !objvar.equals ("none"))
				setObjVar(bandMember, objvar, 1);
		}
		
		setObjVar(bandMember, performance.NPC_ENTERTAINMENT_NO_ENTERTAIN, 1);
		setYaw(bandMember, bandMemberYaw);
		
		if (dataTableHasColumn (datatable, "creatureStatic"))
		{
			int objvarInt = webster.getInt("creatureStatic");
				if (objvarInt == 1)
					setCreatureStatic (bandMember, true);
		}
		else
		{
			setCreatureStatic (bandMember, true);
		}
		setInvulnerable (bandMember, true);
		setName(bandMember, webster.getString("name"));
		
		string npcDefaultMood = webster.getString("defaultCalmMood");
		if ( npcDefaultMood != null && npcDefaultMood.length() > 0 )
		{
			ai_lib.setDefaultCalmMood (bandMember, npcDefaultMood);
		}
		
		string instrumentTemplate = webster.getString("instrument");
		int instrumentEquipped = webster.getInt("instrumentEquipped");
		
		if ( instrumentTemplate != null && instrumentTemplate.length() > 0 && !instrumentTemplate.equals("none") )
		{
			if ( instrumentEquipped > 0 )
			{
				obj_id instrument = obj_id.NULL_ID;
				if(static_item.isStaticItem(instrumentTemplate))
				{
					obj_id inv = utils.getInventoryContainer(bandMember);
					instrument = static_item.createNewItemFunction(instrumentTemplate, inv);
				}
				else
				{
					instrument = createObject (instrumentTemplate, bandMember, "");
				}
				equip (instrument, bandMember);

			}
			else
			{
				float instrument_x_offset = webster.getFloat("instrument_x_offset");
				float instrument_z_offset = webster.getFloat("instrument_z_offset");
				
				omni_box_loc.x = omni_box_loc.x + instrument_x_offset;
				omni_box_loc.z = omni_box_loc.z + instrument_z_offset;

				if ( myYaw != 0 )
				{
					omni_box_loc = storyteller.rotateLocationXZ(here, omni_box_loc, myYaw);
				}

				obj_id omni_box = createObject(instrumentTemplate, omni_box_loc);
				setYaw(omni_box, bandMemberYaw);

				setObjVar(self, "spawned.instrument"+i, omni_box);
			}
		}
		
		string varPrefix = "spawned.";
		string varPostfix = "bandMember"+i;
		if(webster.containsKey("tracking_name"))
		{
			 string trackName = webster.getString("tracking_name");
			 if(trackName != null && !trackName.equals(""))
				varPostfix = trackName;
		}
		setObjVar(self, varPrefix+varPostfix, bandMember);
	}

	return;

}

location rotateXZ(location locOrigin, location locPoint, float fltAngle)
{
	float dx = locPoint.x - locOrigin.x;
	float dz = locPoint.z - locOrigin.z;

	float fltRadians = (float)Math.toRadians(fltAngle);
	float fltC = (float)Math.cos(fltRadians);
	float fltS = (float) Math.sin(fltRadians);
	
	location locNewOffset = locOrigin;

	locNewOffset.x += (dx * fltC) + (dz * fltS);
	locNewOffset.y = locPoint.y;
	locNewOffset.z += -(dx * fltS) + (dz * fltC);

	return locNewOffset;
}

void destroyTheBand(obj_id self)
{

	if ( !hasObjVar(self, DATATABLE_OBJVAR) )
	{
		return;
	}
	
	string datatable = DATATABLE_BASE + getStringObjVar(self, DATATABLE_OBJVAR) + ".iff";
	
	location here = getLocation(self);
	float myYaw = getYaw(self);
	
	string[] bandMembers = dataTableGetStringColumn(datatable, "spawn_who");
	
	if ( bandMembers == null || bandMembers.length < 1 )
	{
		return;
	}
	
	for ( int i = 0; i < bandMembers.length; i++ )
	{
		dictionary webster = dataTableGetRow(datatable, i);

		string bandMemberPrefix = "spawned.";
		string bandMemberPostfix = "bandMember"+i;

		if(webster.containsKey("tracking_name"))
		{
			 string trackName = webster.getString("tracking_name");
			 if(trackName != null && !trackName.equals(""))
				bandMemberPostfix = trackName;
		}
		
		if(hasObjVar(self, bandMemberPrefix + bandMemberPostfix))
		{
			obj_id bandMember = getObjIdObjVar(self, bandMemberPrefix + bandMemberPostfix);
			if ( isIdValid(bandMember)  && exists(bandMember) )
			{
				destroyObject(bandMember);
				removeObjVar(self, "spawned.bandMember"+i);
			}

			if ( hasObjVar(self, "spawned.instrument"+i) )
			{
				obj_id instrument = getObjIdObjVar(self, "spawned.instrument"+i);
				if ( isIdValid(instrument)  && exists(instrument) )
				{
					destroyObject(instrument);
					removeObjVar(self, "spawned.instrument"+i);
				}
			}
		}
	}

	return;
}

trigger OnDestroy()
{
	destroyTheBand(self);
	return SCRIPT_CONTINUE;
}

messageHandler spawnFigrinDanBand ()
{
	createTriggerVolume ("figrin_dan_band_badge", 10f, true);
	
	destroyTheBand(self);
	spawnEveryone(self);
	return SCRIPT_CONTINUE;
}

messageHandler setOriginalMood()
{
	obj_id soldier = params.getObjId("soldierObjId");
	int soldierNumber = params.getInt("objvarValue");
	string datatable = DATATABLE_BASE + getStringObjVar(self, DATATABLE_OBJVAR) + ".iff";
	int row = dataTableSearchColumnForInt(soldierNumber, "objvar_value", datatable);
	
	if ( soldierNumber < 1 || !isIdValid(soldier))
	{
		return SCRIPT_CONTINUE;
	}
	
	dictionary webster = dataTableGetRow(datatable, row);
	string npcDefaultMood = webster.getString("defaultCalmMood");

	if ( npcDefaultMood != null && npcDefaultMood.length() > 0 )
	{
		ai_lib.setDefaultCalmMood (soldier, npcDefaultMood);
	}
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string text)
{
	if ( !isGod(speaker) )
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( text.equals("let_the_band_play") )
	{
		destroyTheBand(self);
		
		spawnEveryone(self);
		sendSystemMessage(speaker, "let_the_band_play...spawning the band.", "");
		return SCRIPT_OVERRIDE;
	}
	
	if ( text.equals("the_band_is_done") )
	{
		destroyTheBand(self);
		sendSystemMessage(speaker, "the_band_is_done...destroying the band.", "");
		return SCRIPT_OVERRIDE;
	}


	return SCRIPT_CONTINUE;
}
