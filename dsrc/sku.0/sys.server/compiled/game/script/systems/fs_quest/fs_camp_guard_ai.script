// FS village enemy guys - phase 3 camp protectors
include library.fs_dyn_village;
include library.ai_lib;
include library.turret;
include library.utils;
include library.fs_counterstrike;
include library.trace;
include library.chat;

const string VAR_SPAWNED_BY				= "quest_spawner.spawned_by";

void setPatrolPaths()
{	
	obj_id self = getSelf();
	if(!utils.hasScriptVar(self, "patrolTargets"))
	{
		destroyObject(self);
		return;
	}
	
	if(ai_lib.isInCombat(self))
	{		
		messageTo(self, "tryPathAgain", null, 30.0f, false);
		return;
	}
	
	// select a camp guard location
	location[] entries = utils.getLocationArrayScriptVar(self, "patrolTargets");
	int winner = 0;
	location here = getLocation(self);
	for(int i = 0; i < entries.length; i++)
	{
		if(here.distance(entries[i]) < here.distance(entries[winner]))
		{
			winner = i;
		}
	}
	
	// select a victim inside the village to attack
	location targetLocation = entries[winner];
	setHomeLocation(self, targetLocation);
	setMovementRun(self);
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_LOITER);
	trace.log(fs_dyn_village.LOG_CHAN, "Sending camp defenders to " + targetLocation.toString());
	ai_lib.aiPathTo(self, targetLocation);
}

trigger OnAttach()
{
	messageTo(self, "msgSpoutOff", null, (float)rand(10, 30), false);
	setObjVar(self, turret.OBJVAR_TURRET_FRIEND, 1);
	messageTo(self, "msgSelfDestruct", null, (float)rand(110, 130), false);
	
	if(hasObjVar(self, VAR_SPAWNED_BY))
	{
		obj_id parent = getObjIdObjVar(self, VAR_SPAWNED_BY);
		if(isIdValid(parent))
		{
			obj_id campId = fs_counterstrike.getMyOutpostId(parent);
			if(isIdValid(campId))
			{
				setObjVar(self, fs_counterstrike.OBJVAR_MY_CAMP_ID, campId);
				location[] patrolLocs = new location[2];
				if(hasObjVar(campId, fs_counterstrike.OBJVAR_CAMP_DOOR1_LOC))
				{
					patrolLocs[0] = getLocationObjVar(campId, fs_counterstrike.OBJVAR_CAMP_DOOR1_LOC);
				}
				
				if(hasObjVar(campId, fs_counterstrike.OBJVAR_CAMP_DOOR2_LOC))
				{
					patrolLocs[1] = getLocationObjVar(campId, fs_counterstrike.OBJVAR_CAMP_DOOR2_LOC);
				}
				
				location campLoc = getLocation(campId);
				float z = getLocation(campId).z;
				if(patrolLocs[0] != null)
				{
					z = patrolLocs[0].z;
				}
				
				if(patrolLocs[1] != null && patrolLocs[1].z > z)
				{
					z = patrolLocs[1].z;
				}
				
				z += 15;
				
				utils.setScriptVar(self, "patrolTargets", new location[]{new location(campLoc.x, campLoc.y, z)});
				setPatrolPaths();
			}
		}
	}
		
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

//
//  makes em say stuff.
//
messageHandler msgSpoutOff()
{
	if(rand(0, 100) > 75)
	{
		string file = "fs_quest_village";
		string_id id = new string_id(file, "camp_defender_" + rand(1, 10));
		chat.chat(self, id);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnMovePathComplete()
{
	obj_id camp = fs_counterstrike.getMyOutpostId(self); 
	location home = getHomeLocation(camp);
	location here = getLocation(self);
	if(home.distance(here) < 35.0)
	{
		const float minDistance = 10.0f;
		const float maxDistance = 30.0f;
		const float minDelay = 3.0f;
		const float maxDelay = 8.0f;

		loiterLocation(self, here, minDistance, maxDistance, minDelay, maxDelay);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

messageHandler tryPathAgain()
{
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

messageHandler resumeDefaultCalmBehavior()
{
	LOG("fs_quest", "resumeDefaultCalmBehavior");
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

messageHandler msgSelfDestruct()
{
	destroyObject(self);
	return SCRIPT_OVERRIDE;
}
