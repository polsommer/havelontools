// FS Phase 3 Combat Quest Outpost Master Object

include library.trace;
include library.fs_dyn_village;
include library.fs_counterstrike;
include library.utils;

// Constansts

void requestRegistration(obj_id self)
{
	if(!hasObjVar(self, fs_dyn_village.OBJVAR_MY_MASTER_OBJECT) || !hasObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME))
	{
		trace.log("fs_quest", "fs_outpost_master::OnInit:- > Missing Objvars.  ***DESTROYING*** camp.");
		destroyObject(self);
		return;
	}
	
	obj_id campMaster = getObjIdObjVar(self, fs_dyn_village.OBJVAR_MY_MASTER_OBJECT);
	
	dictionary d = new dictionary();
	d.put("theatreid", self);
	d.put("theatreloc", getLocation(self));
	string name = getStringObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME);
	removeObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME); // this will get set again when the village master authorizes our existence.  if not, then we we delete next time server comes up
	if(name == null)
	{
		name = "!ERROR!";
	}
	
	d.put("theatreName", name);
	
	
	messageTo(campMaster, "msgRequestTheatreRegistration", d, 0.0f, false);			
	return;
}

trigger OnInitialize()
{
	/*
	string name = "";
	if(hasObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME))
	{
		name = getStringObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME);
	}
	
	LOG("fs_quest", "CAMP MASTER INIT: " + self + ", name=" + name);
	// we query for this id until the master is registered - then we know its loaded
	messageTo(self, "msgCheckForMasterAgain", null, 60.0f, false);
	*/
	
	messageTo(self, "msgSelfDestruct", null, 1.0f, false);
	return SCRIPT_CONTINUE;
}

messageHandler msgCheckForMasterAgain()
{
	//LOG("fs_quest", "Checking for Master Id; CampId=" + self);
	fs_dyn_village.getRegisteredObjIdFromClusterWideData(fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "msgGotMasterIdResponse", self);	
	return SCRIPT_CONTINUE;
}

messageHandler msgGotMasterIdResponse()
{
	boolean rslt = false;
	string key = "";

	if(params.containsKey("key"))
	{
		key = params.getString("key");
	}
	
	if(params.containsKey("success"))
	{
		rslt = params.getBoolean("success");
	}
	
	//LOG("fs_quest", "Master Id Check rslt for CampId " + self + " = " + rslt);
	if(rslt)
	{	
		if(params.containsKey(key))
		{
			requestRegistration(self);
			return SCRIPT_CONTINUE;
		}			
	}

	//LOG("fs_quest", "Checking for Master Id Again in 60 seconds; CampId=" + self);		
	messageTo(self, "msgCheckForMasterAgain", null, 60.0f, false);				
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	trace.log("fs_quest", "=*=*=*=*=*=*= PHASE 3 THEATRE (" + self + ") BEING DESTROYED =*=*=*=*=*=*=");
	if(hasObjVar(self, fs_dyn_village.OBJVAR_MY_MASTER_OBJECT))
	{
		obj_id mymaster = getObjIdObjVar(self, fs_dyn_village.OBJVAR_MY_MASTER_OBJECT);
		dictionary d = new dictionary();
		d.put("sender", self);
		messageTo(mymaster, "msgNotifyTheatreDestroyed", d, 0.0f, false);	
	}
	return SCRIPT_CONTINUE;
}

messageHandler msgSelfDestruct()
{
	trace.log("fs_quest", "fs_outpost_master::OnInit:- > Got self destruct message. *** DESTROYING *** camp.");
	Vector existingDroids = new Vector();
	if(hasObjVar(self, fs_counterstrike.OBJVAR_CAMP_DROIDS))
	{
		existingDroids = utils.getResizeableObjIdBatchObjVar(self, fs_counterstrike.OBJVAR_CAMP_DROIDS);
	}
	
	for(int x = 0; x < existingDroids.size(); x++)
	{
		messageTo((obj_id)existingDroids.get(x), "msgSilentSelfDestruct", null, 0.0f, false);
	}	
	
	// get rid of anything that we created on our own
	fs_counterstrike.resetCamp(self, false);
	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnTriggerVolumeEntered(string volumeName, obj_id whoTriggeredMe)
{
	//trace.log(fs_dyn_village.LOG_CHAN, "Camp shield breached.");
	if(isGod(whoTriggeredMe))
	{
		sendSystemMessageTestingOnly(whoTriggeredMe, "god breach, granted.");
		return SCRIPT_CONTINUE;
	}
	
	if(hasScript(whoTriggeredMe, "systems.fs_quest.fs_outpost_master"))
	{
		return SCRIPT_CONTINUE;
	}
	
	sendSystemMessage(whoTriggeredMe, new string_id("fs_quest_village","expel_shield"));
	expelFromTriggerVolume(self, fs_counterstrike.SHIELD_TR_VOLUME, whoTriggeredMe);
	return SCRIPT_CONTINUE;
}

messageHandler msgDoLootSpawn()
{
	fs_counterstrike.doCampLootSpawn(self);
	return SCRIPT_CONTINUE;
}

messageHandler msgReplyTheatreRegistration()
{
	if(!params.containsKey("success"))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_outpost_master::msgRequestTheatreInfo: -> Params missing vital param 'success'. Not registered with master. Self destructing.", self, trace.TL_ERROR_LOG);
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}
	
	boolean success = params.getBoolean("success");
	if(!success)
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_outpost_master::msgRequestTheatreInfo: -> FAILED to register with master. Self destructing.", self, trace.TL_WARNING);
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}
	
	if(!params.containsKey("name"))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_outpost_master::msgRequestTheatreInfo: -> Params missing vital param 'name'. Not registered with master. Self destructing.", self, trace.TL_ERROR_LOG);
		destroyObject(self);
		return SCRIPT_CONTINUE;
	}
		
	string name = params.getString("name");
	trace.log(fs_dyn_village.LOG_CHAN, "Camp " + self + " got positive registration reply.  Name is ###" + name + "###");
	setObjVar(self, fs_counterstrike.OBJVAR_CAMP_NAME, name);
	//trace.log(fs_dyn_village.LOG_CHAN, "Registered camp " + self + " as '" + name + "'.");	
	
	if(!isObjectPersisted(self))
	{
		persistObject(self);
	}
	
	LOG("fs_quest", "Setting up camp " + self);
	fs_counterstrike.setupCamp(self, true);
	fs_counterstrike.doCampLootSpawn(self);
	fs_counterstrike.resetCamp(self, true);	
	fs_counterstrike.spawnSurveillanceDroids(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler msgSurveillandeDroidDied()
{
	if(!params.containsKey("sender"))
	{
		// discard message
		return SCRIPT_CONTINUE;
	}
	
	obj_id sender = params.getObjId("sender");
	fs_counterstrike.droidDied(self, sender);
	return SCRIPT_CONTINUE;
}

messageHandler msgPowerDownShield()
{	
	fs_counterstrike.powerDownShield();	
	// initiate defense spawns
	fs_counterstrike.doCampDefenseSpawn(self, true);	
	trace.log(fs_dyn_village.LOG_CHAN, "Setting up camp for reset in " + fs_counterstrike.getCampResetTime() + " seconds.");
	messageTo(self, "msgResetCamp", null, fs_counterstrike.getCampResetTime(), false);
	return SCRIPT_CONTINUE;
}

messageHandler msgDoCampDefenseSpawn()
{
	fs_counterstrike.doCampDefenseSpawn(self, true);
	return SCRIPT_CONTINUE;
}

messageHandler msgResetCamp()
{
	fs_counterstrike.resetCamp(self, true);
	return SCRIPT_CONTINUE;
}

trigger OnTheaterCreated(obj_id[] objects, obj_id player, obj_id creator)
{	
	utils.setBatchObjVar(self, fs_counterstrike.OBJVAR_CAMP_OBJS, objects);	
		
	if(!isIdValid(creator))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_outpost_master::OnTheaterCreated; -> MasterId is invalid. Not registering camp iwth village master.", self, trace.TL_ERROR_LOG);
		return SCRIPT_CONTINUE;
	}
	
	setObjVar(self, fs_dyn_village.OBJVAR_MY_MASTER_OBJECT, creator);
	dictionary d = new dictionary();
	d.put("theatreid", self);
	d.put("theatreloc", getLocation(self));
	string name = getTheaterName(self);
	if(name == null)
	{
		name = "!ERROR!";
	}
	
	d.put("theatreName", name);
		
	messageTo(creator, "msgRequestTheatreRegistration", d, 0.0f, false);	
	return SCRIPT_CONTINUE;
}
