// FS village enemy guys	
include library.fs_dyn_village;
include library.ai_lib;
include library.attrib;
include ai.ai_combat;
include library.factions;
include library.chat;
include library.utils;

void setPatrolPaths()
{
	obj_id self = getSelf();
	
	if(ai_lib.isInCombat(self))
	{
		if (!utils.hasScriptVar(self, "fs_quest.patrol_set"))
		{
			utils.setScriptVar(self, "fs_quest.patrol_set", 1);
			messageTo(self, "tryPathAgain", null, 30.0f, false);
		}
		
		return;
	}
	
	// select a village entry point to path to.
	location[] entries = fs_dyn_village.getVillageLocs("village_entry");
	int winner = 0;
	location here = getLocation(self);
	for(int i = 0; i < entries.length; i++)
	{
		if(here.distance(entries[i]) < here.distance(entries[winner]))
		{
			winner = i;
		}
	}
	
	location[] insides = fs_dyn_village.getVillageLocs("village_victims");
	
	// select a victim inside the village to attack
	location targetLocation = insides[rand(0, insides.length - 1)];
	setHomeLocation(self, targetLocation);
	setMovementRun(self);
	ai_lib.setDefaultCalmBehavior(self, ai_lib.BEHAVIOR_WANDER);
	ai_lib.aiPathTo(self, targetLocation);
}

trigger OnAttach()
{

	LOG("questAI", "fs_village_enemy_ai.OnAttach(" + self + ") - setting up new patrol paths");
	setObjVar(self, fs_dyn_village.OBJVAR_TURRET_TARGET, 1);
	messageTo(self, "msgSelfDestruct", null, (float)fs_dyn_village.VILLAGE_ENEMY_MAX_LIFE, false);
	messageTo(self, "fs_enemy_combat_tick", null, 10.0f, false);
	setPatrolPaths();

	return SCRIPT_CONTINUE;
}

trigger OnMovePathNotFound()
{
	LOG("questAI", "fs_village_enemy_ai.OnMovePathNotFound(" + self + ") - setting up new patrol paths");
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

messageHandler tryPathAgain()
{
	if (utils.hasScriptVar(self, "fs_quest.patrol_set"))
		utils.removeScriptVar(self, "fs_quest.patrol_set");
		
	setPatrolPaths();
	return SCRIPT_CONTINUE;
}

messageHandler resumeDefaultCalmBehavior()
{
// 	LOG("questAI", "fs_village_enemy_ai.resumeDefaultCalmBehavior(" + self + ") - setting up new patrol paths");
	setPatrolPaths();
	
	setAttributeInterested(self, attrib.ALL);
	return SCRIPT_CONTINUE;
}

messageHandler msgSelfDestruct()
{
	destroyObject(self);
	return SCRIPT_OVERRIDE;
}

messageHandler fs_enemy_combat_tick()
{
	if(! ai_lib.isInCombat(self))
	{
		// pick a fight
		obj_id[] objects = getObjectsInRange(getSelf(), 32.0f);
		if (objects != null)
		{
			int iter;
			for(iter = 0; iter < objects.length; ++iter)
			{
				if(isIdValid(objects[iter]) && hasObjVar(objects[iter], "faction"))
				{
					if(ai_combat.isGoodTarget(self, objects[iter]))
					{
						startCombat(self, objects[iter]);
						break;
					}
				}
			}
		}
	}
	messageTo(self, "fs_enemy_combat_tick", null, 10.0f, false);
	return SCRIPT_CONTINUE;
}


