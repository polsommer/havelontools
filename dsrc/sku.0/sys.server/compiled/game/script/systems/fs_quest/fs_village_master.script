include library.trace;
include library.fs_dyn_village;
include library.fs_counterstrike;
include library.utils;

// village master object

trigger OnInitialize()
{
/* DISABLED FOR NPE
	if(!hasObjVar(self, fs_dyn_village.OBJVAR_PHASE_VERSION))
	{
		setObjVar(self, fs_dyn_village.OBJVAR_PHASE_VERSION, 1);			
	}
	
	if(!hasObjVar(self, fs_dyn_village.OBJVAR_CURRENT_PHASE))
	{
		setObjVar(self, fs_dyn_village.OBJVAR_CURRENT_PHASE, 1);
		setObjVar(self, fs_dyn_village.OBJVAR_PHASE_START_TIME, getGameTime());
	}
	
	if(!hasObjVar(self, fs_dyn_village.OBJVAR_NEXT_PHASE))
	{
		setObjVar(self, fs_dyn_village.OBJVAR_NEXT_PHASE, 1);
	}
	
	// initialize the cluster data dictionaries
	fs_dyn_village.initFsClusterData();

	// save our objid in the cluster data so other scripts can find it
	fs_dyn_village.registerObjIdInClusterWideData(self, fs_dyn_village.CLUSTER_OBJID_KEY_MASTER, "msgIdRegistered", self);
	
	// see if its time to expire the phase
	fs_dyn_village.checkPhaseExpiration(self);
	
	// get the phase objects in place
	fs_dyn_village.pushAndInitPhase(self);
*/
    	
	return SCRIPT_CONTINUE;
}

messageHandler msgEnemySpawnPulse()
{
	fs_dyn_village.doEnemySpawnPulse(self, "msgEnemySpawnPulse");
	return SCRIPT_CONTINUE;
}

messageHandler msgIdRegistered()
{
	boolean rslt = false;
	if(params.containsKey("success"))
	{
		rslt = params.getBoolean("success");
	}
	
	trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgIdRegistered: -> Registered Master ObjId with Cluster Wide Data: " + rslt);
	return SCRIPT_CONTINUE;
}

messageHandler msgRequestTheatreRegistration()
{		
	trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgRequestTheatreRegistration: -> Got registration request");
	if(!params.containsKey("theatreid") || !params.containsKey("theatreloc") || !params.containsKey("theatreName"))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgRequestTheatreRegistration: -> missing one or more crucial params to register theatre.  Registration not done.  Theatre will self destruct on next server restart.", self, trace.TL_ERROR_LOG);
		return SCRIPT_CONTINUE;
	}
	
	obj_id theatre = params.getObjId("theatreid");
	location loc = params.getLocation("theatreloc");
	string name = params.getString("theatreName");
	
	trace.log(fs_dyn_village.LOG_CHAN, "Theatre " + theatre + " requests registration at loc " + loc.toString());
	
	string theatreName = fs_counterstrike.setLocForCamp(self, theatre, loc, name);
	dictionary d = new dictionary();
	if(theatreName.length() > 0)
	{
		d.put("success", true);
		d.put("name", theatreName);
	}
	else
	{
		d.put("success", false);
	}
	
	messageTo(theatre, "msgReplyTheatreRegistration", d, 0.0f, false);	
	return SCRIPT_CONTINUE;
}

messageHandler msgNotifyTheatreDestroyed()
{
	if(!params.containsKey("sender"))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgNotifyTheatreDestroyed: ->Village notified us of death, but return address not included in note.  Can't respond. ",
			self, trace.TL_ERROR_LOG);
		return SCRIPT_CONTINUE;
	}
	
	fs_counterstrike.theatreDestroyed(self, params.getObjId("sender"));
	return SCRIPT_CONTINUE;
}

messageHandler msgIntRegisteredUID()
{
	boolean rslt = false;
	if(params.containsKey("success"))
	{
		rslt = params.getBoolean("success");
	}
	
	trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgIntRegistered: -> Registered Integer with Cluster Wide Data: " + rslt);
	return SCRIPT_CONTINUE;		
}

messageHandler msgIntRegisteredPhase()
{
	boolean rslt = false;
	if(params.containsKey("success"))
	{
		rslt = params.getBoolean("success");
	}
	
	trace.log(fs_dyn_village.LOG_CHAN, "fs_village_master::msgIntRegistered: -> Registered Integer with Cluster Wide Data: " + rslt);
	return SCRIPT_CONTINUE;		
}
