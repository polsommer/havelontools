/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        final_battle_help_npc
 * Description:  Script attaches to the npcs that come in waves within the final battle.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/
include library.quests;
include library.theater;
include ai.ai_combat;
include library.ai_lib;
include library.utils;

/***** INCLUDES ********************************************************/
trigger OnAttach()
{
	obj_id spawner = getObjIdObjVar(self, "quest_spawner.spawned_by");
	if (isIdValid(spawner))
	{
		obj_id theater_object = getObjIdObjVar(spawner, "quest_spawner.parent");
		if (isIdValid(theater_object))
		{
			obj_id player = getObjIdObjVar(theater_object, "fs_quest.final_battle.player");
			obj_id killer = getObjIdObjVar(theater_object, "lastKiller");
			setObjVar(self, "questOwner", player);
			setHomeLocation(self);

			const location anchorLocation = getLocation(theater_object);
			const float minDistance = 0.0f;
			const float maxDistance = 20.0f;
			const float minDelay = 3.0f;
			const float maxDelay = 8.0f;

			loiterLocation(self, anchorLocation, minDistance, maxDistance, minDelay, maxDelay);

			Vector existingNPCs = new Vector();
			if(hasObjVar(theater_object, "fs_quest.final_battle_npcs"))
			{
				existingNPCs = utils.getResizeableObjIdBatchObjVar(theater_object, "fs_quest.final_battle_npcs");
			}
			existingNPCs.add(self);
			utils.setResizeableBatchObjVar(theater_object, "fs_quest.final_battle_npcs", existingNPCs);
	
			int x = rand(1,3);
			setMovementRun(self);
			if (x == 1)
			{
				if (isIdValid(player))
				{
					startCombat(self, player);
				}
			}
			else
			{
				if (isIdValid(killer))
				{
					startCombat(self, killer);
				}
			}	
		}
	}	
	return SCRIPT_CONTINUE;
}





/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/


/***** MESSAGEHANDLERS *************************************************/


/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
