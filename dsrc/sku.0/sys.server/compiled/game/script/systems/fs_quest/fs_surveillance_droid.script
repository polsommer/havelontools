// mouse surveillance droid
// handles mouse droid functionality.
// at this point, the droid calls enemy reinforcements if it gets destroyed.
include library.quests;
include library.fs_counterstrike;
include library.trace;
include library.fs_dyn_village;
include library.utils;

void squeal()
{
	obj_id self = getSelf();
	obj_id master = fs_counterstrike.getMyOutpostId(self);
	if(!isIdValid(master) || !exists(master))
	{
		trace.log(fs_dyn_village.LOG_CHAN, "fs_surveillance_droi::OnDestroy: -> Couldn't create droid defenders. Missing outpost master reference or master object doesnt exist.", self, trace.TL_WARNING);
		return;
	}		

	dictionary d = new dictionary();
	d.put("sender", self);
	messageTo(master, "msgSurveillandeDroidDied", d, 0.0f, false);		
}

trigger OnAttach()
{
    return SCRIPT_CONTINUE;
}

trigger OnIncapacitated(obj_id killer)
{
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{	
	playClientEffectLoc(self, "clienteffect/combat_explosion_lair_large.cef", getLocation(self), 10.0f);
	if(utils.hasScriptVar(self, "silentDestroy"))
	{
		return SCRIPT_CONTINUE;
	}
	
	squeal();
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{	
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	utils.setScriptVar(self, "silentDestroy", true);
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

messageHandler msgSilentSelfDestruct()
{
	utils.setScriptVar(self, "silentDestroy", true);
	destroyObject(self);
	return SCRIPT_CONTINUE;
}

