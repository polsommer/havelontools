/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        power_shrine
 * Description:  Attached to the power crystals in the final battle.
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/
include library.quests;
include library.theater;
include library.healing;
include ai.ai_combat;

/***** INCLUDES ********************************************************/
trigger OnInitialize()
{
	messageTo(self, "msgFSBattleHealPulse", null, 5.0f, false);
	setMaxHitpoints(self, 40000);
	setHitpoints(self, getMaxHitpoints(self));
	return SCRIPT_CONTINUE;
}

/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnObjectDamaged(obj_id attacker, obj_id weapon, int damage)
{
	int hitpoints = getHitpoints(self);
	int max_hitpoints = getMaxHitpoints(self);
	float percent_hp = (float)hitpoints / (float)max_hitpoints;
	
	int alert_range = 0;

	if (percent_hp > .75)
	{
		alert_range = 15;
	}
	else if (percent_hp > .50)
	{
		alert_range = 20;
	}
	else if (percent_hp > .25)
	{
		alert_range = 25;
	}
	else
	{
		alert_range = 30;
	}

	if (alert_range > 0)
	{
		obj_id[] defenders = new obj_id[0];
		defenders = getNPCsInRange(self, alert_range);

		for (int i = 0; i < defenders.length; i++)
		{
			startCombat(defenders[i], attacker);
		}
	}
	
	return SCRIPT_CONTINUE;
}


trigger OnObjectDisabled (obj_id killer)
{
	obj_id theater_object = getObjIdObjVar(self, theater.VAR_PARENT);

	if (isIdValid(theater_object))
	{
		obj_id leader = getObjIdObjVar(theater_object, "fs_quest.final_battle.leader");
		obj_id second = getObjIdObjVar(theater_object, "fs_quest.final_battle.second");
		
		string obj_var_name;
		if (hasObjVar(self, "fs_quest.red_shrine"))
			obj_var_name = "fs_quest.final_battle.red_stones";
		else
			obj_var_name = "fs_quest.final_battle.green_stones";

		resizeable obj_id[] stones = getResizeableObjIdArrayObjVar(theater_object, obj_var_name);
		if (stones.length < 2)
		{
			removeObjVar(theater_object, obj_var_name);
			if (obj_var_name.equals("fs_quest.final_battle.green_stones"))
			{
				obj_id[] red_stones = getObjIdArrayObjVar(theater_object, "fs_quest.final_battle.red_stones");
				if (red_stones != null)
				{
					for (int i = 0; i < red_stones.length; i++)
					{
						playClientEffectObj(killer, "clienteffect/combat_lightning_rifle_hit.cef" , red_stones[i], "");
					}
				}
				
			}

			if (obj_var_name.equals("fs_quest.final_battle.green_stones"))
			{
				setObjVar(theater_object, "lastKiller", killer);
				messageTo(theater_object, "msgQuestGreenStonesDestroyed", null, 0.0f, false);
				if (isIdValid(second))
				{
					messageTo(second, "msgAidGreen", null, 1, false);
				}	
			}
			else
			{
				messageTo(theater_object, "msgQuestRedStonesDestroyed", null, 0.0f, false);
				if (isIdValid(leader))
				{
					messageTo(leader, "msgAidRed", null, 1, false);
				}
				if (isIdValid(second))
				{
					messageTo(second, "msgAidRed", null, 1, false);
				}
			}
		}
		else
		{
			stones.remove(self);
			setObjVar(theater_object, obj_var_name, stones);
		}
	}
	
	playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
	
	messageTo(self, "msgQuestDestroyShrine", null, 3.0f, false);

	return SCRIPT_CONTINUE;
}

/***** MESSAGEHANDLERS *************************************************/
messageHandler msgFSBattleHealPulse()
{
	obj_id theater_object = getObjIdObjVar(self, theater.VAR_PARENT);
	if (!isIdValid(theater_object))
		return SCRIPT_CONTINUE;
	
	obj_id player = getObjIdObjVar(theater_object, "fs_quest.final_battle.player");
	
	if (hasObjVar(self, "fs_quest.red_shrine"))
	{
		// Red shrines heal the leader.
		obj_id leader = getObjIdObjVar(theater_object, "fs_quest.final_battle.leader");
		if (isIdValid(leader))
		{
			healing.fullHealEveryone(leader);
			playClientEffectObj(player, "clienteffect/healing_healdamage.cef" , leader, "");
			//playClientEffectObj(player, "clienteffect/healing_healenhance.cef" , self, "");
		}
	}
	else
	{
		// Green shrines heal leader, secondary, and the red stones
		obj_id leader = getObjIdObjVar(theater_object, "fs_quest.final_battle.leader");
		boolean source_effect = false;
		if (isIdValid(leader))
		{
			healing.fullHealEveryone(leader);
			playClientEffectObj(player, "clienteffect/healing_healdamage.cef" , leader, "");
			//playClientEffectObj(player, "clienteffect/healing_healenhance.cef" , self, "");
			
			source_effect = true;
		}
		obj_id second = getObjIdObjVar(theater_object, "fs_quest.final_battle.second");
		if (isIdValid(second))
		{
			healing.fullHealEveryone(second);
			playClientEffectObj(player, "clienteffect/healing_healdamage.cef" , second, "");
			if (!source_effect)
			{
				//playClientEffectObj(player, "clienteffect/healing_healenhance.cef" , self, "");
				source_effect = true;
			}
		}
		obj_id[] stones = getObjIdArrayObjVar(theater_object, "fs_quest.final_battle.red_stones");
		if (stones != null)
		{
			for (int i = 0; i < stones.length; i++)
			{
				setHitpoints(stones[i], getMaxHitpoints(stones[i]));
				playClientEffectObj(player, "clienteffect/healing_healdamage.cef" , stones[i], "");
				//if (!source_effect)
				//	playClientEffectObj(player, "clienteffect/healing_healenhance.cef" , self, "");
			}
		}
		
		//LOG("quest", "healPulse -- " + self + "   " + theater_object + "   " + leader + "   " + second);
	}
	
	messageTo(self, "msgFSBattleHealPulse", null, 10.0f, false);

	return SCRIPT_CONTINUE;
}

messageHandler msgQuestDestroyShrine()
{
	destroyObject(self);
	
	return SCRIPT_CONTINUE;
}

/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/
