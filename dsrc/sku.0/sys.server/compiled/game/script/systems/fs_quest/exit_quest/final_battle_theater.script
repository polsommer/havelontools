/**********************************************************************
 * Copyright (c)2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        final_battler_theater
 * Description:  Script that attaches to the theater object
 * @author       $Author:$
 * @version      $Revision:$
 **********************************************************************/


/***** INCLUDES ********************************************************/
include library.theater;
include library.chat;
include library.quests;
include library.utils;

/***** CONSTANTS *******************************************************/


/***** TRIGGERS ********************************************************/
trigger OnTheaterCreated(obj_id[] objects, obj_id player, obj_id creator)
{
	setObjVar(self, "fs_quest.final_battle.player", player);
	
	if (objects != null)
	{
		resizeable obj_id[] red_stones = new obj_id[0];
		resizeable obj_id[] green_stones = new obj_id[0];
		for (int i = 0; i < objects.length; i++)
		{
			setObjVar(objects[i], theater.VAR_PARENT, self);
			setObjVar(objects[i], "questOwner", player);
			//LOG("quest", "object[" + i + "]->" + objects[i]);
			if (hasScript(objects[i], "systems.fs_quest.exit_quest.power_shrine"))
			{
				if (hasObjVar(objects[i], "fs_quest.red_shrine"))
					red_stones.add(objects[i]);
				else
					green_stones.add(objects[i]);
			}
		}

		if (red_stones.length > 0)
			setObjVar(self, "fs_quest.final_battle.red_stones", red_stones);
		if (green_stones.length > 0)
			setObjVar(self, "fs_quest.final_battle.green_stones", green_stones);
	}

	return SCRIPT_CONTINUE;
}
/***** MESSAGEHANDLERS *************************************************/
messageHandler  msgQuestGreenStonesDestroyed()
{
	LOG("quest", "final_battle_theater.msgQuestGreenStonesDestroyed -- " + self);
	quests.createSpawner("thug_help", getLocation(self), "datatables/quest/force_sensitive/final_battle_spawn.iff", self);
	return SCRIPT_CONTINUE;
}

messageHandler  msgQuestRedStonesDestroyed()
{
	LOG("quest", "final_battle_theater.msgQuestRedStonesDestroyed -- " + self);
	quests.createSpawner("merc_help", getLocation(self), "datatables/quest/force_sensitive/final_battle_spawn.iff", self);
	quests.createSpawner("thug_help", getLocation(self), "datatables/quest/force_sensitive/final_battle_spawn.iff", self);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	obj_id leader = getObjIdObjVar(self, "fs_quest.final_battle.leader");
	if ( (isIdValid(leader))  && (exists(leader)) )
	{
		destroyObject(leader);
	}
	
	obj_id second = getObjIdObjVar(self, "fs_quest.final_battle.second");
	if ( (isIdValid(second))  && (exists(second)) )
	{
		destroyObject(second);
	}
	
	Vector existingNPCs = new Vector();
	
	if(hasObjVar(self, "fs_quest.final_battle_npcs"))
	{
		existingNPCs = utils.getResizeableObjIdBatchObjVar(self, "fs_quest.final_battle_npcs");
	    obj_id NPC = null;
	    
	    for(int x = 0; x < existingNPCs.size(); x++)
	    {
	     	NPC = (obj_id)existingNPCs.get(x);
	       	if ( (isIdValid(NPC))  && (exists(NPC)) ) 
	     	{
	     	   	destroyObject(NPC);
	        }
		
		}
	}
	return SCRIPT_CONTINUE;
}

	
/***** COMMANDHANDLERS *************************************************/


/***** FUNCTIONS *******************************************************/

