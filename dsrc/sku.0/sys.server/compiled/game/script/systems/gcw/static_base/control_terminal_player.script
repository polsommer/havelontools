include library.utils;

const string SCRIPT_VAR_ATTEMPT_ID						= "gcw.static_base.control_terminal.attempt_id";
const string SCRIPT_VAR_TERMINAL						= "gcw.static_base.control_terminal.terminal";

trigger OnEnteredCombat()
{
	cancelControlAttempt(self);
	return SCRIPT_CONTINUE;
}

trigger OnLocomotionChanged(int newLocomotion, int oldLocomotion)
{
	if(newLocomotion != LOCOMOTION_STANDING && newLocomotion != LOCOMOTION_KNEELING && newLocomotion != LOCOMOTION_PRONE)
		cancelControlAttempt(self);

	return SCRIPT_CONTINUE;
}

trigger OnChangedPosture(int before, int after)
{
	if(after != POSTURE_UPRIGHT && after != POSTURE_CROUCHED && after != POSTURE_PRONE)
		cancelControlAttempt(self);

	return SCRIPT_CONTINUE;
}

void cancelControlAttempt(obj_id self)
{
	obj_id terminal = utils.getObjIdScriptVar(self, SCRIPT_VAR_TERMINAL);
	int attemptId = utils.getIntScriptVar(self, SCRIPT_VAR_ATTEMPT_ID);

	if(!isIdValid(terminal))
		return;

	dictionary d = new dictionary();
	d.put("player", self);
	d.put("id", attemptId);

	messageTo(terminal, "handleControlAttemptCancel", d, 0.0f, false);
}

