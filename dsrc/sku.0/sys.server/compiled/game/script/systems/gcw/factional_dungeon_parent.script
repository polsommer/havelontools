include library.factions;
include library.hq;
include library.utils;

// this does the following

// tracks all of the spawners, and flips them when needed
// respawns the terminal when necessary
// changes the banners, and tells them to respawn

const int OBJECTIVE_RESPAWN_TIME = 28800;

const string IMPERIAL_TO_REBEL_FILENAME = "datatables/poi/imperial_rebel_lookup/imperial_to_rebel.iff";
const string REBEL_TO_IMPERIAL_FILENAME = "datatables/poi/imperial_rebel_lookup/rebel_to_imperial.iff";



messageHandler resetDungeon()
{

	string strFaction = getStringObjVar(self, "strFaction");
	int intFaction = factions.getFactionNumber(strFaction);
	factions.setFaction(self, strFaction, false);
	//LOG("gcw", "setting faction of "+strFaction+" to "+intFaction);
	resizeable obj_id[] objTerminals = new obj_id[0];
	resizeable string[] strTerminals = new string[0];
	resizeable location[] locTerminals= new location[0];
	resizeable float[] fltYaw  = new float[0];

	obj_id[] objSpawners = getFactionalDungeonSpawners(self);


	for(int intI = 0; intI<objSpawners.length; intI++)
	{
		if(hasObjVar(objSpawners[intI], "intBanner"))
		{
			string strOldFaction = getStringObjVar(objSpawners[intI], "type");
			if(strOldFaction!=strFaction)
			{
				messageTo(objSpawners[intI], "swapFlag", null, 0, true); // swap the flag to reinitialize
			}
		}
		else if(hasObjVar(objSpawners[intI], "intTerminal"))
		{
			if(hasObjVar(self, "intCompleted"))
			{
				destroyObject(objSpawners[intI]); // no terminals yet
			}
			else
			{
				objTerminals = utils.addElement(objTerminals, objSpawners[intI]);
				strTerminals = utils.addElement(strTerminals, getTemplateName(objSpawners[intI]));
				locTerminals = utils.addElement(locTerminals, getLocation(objSpawners[intI]));
				fltYaw = utils.addElement(fltYaw, getYaw(objSpawners[intI]));
				removeObjVar(objSpawners[intI], "hq");
				setObjVar(objSpawners[intI], "objParent", self);
				factions.setFaction(objSpawners[intI], strFaction, false);
			}
		}
		else
		{
			changeMobs(objSpawners[intI], strFaction);
		}
	}

	if(!hasObjVar(self, "intCompleted"))
	{
		if((locTerminals.length > 0) && (strTerminals.length > 0) && (objTerminals.length > 0) && (fltYaw.length > 0)) {

			setObjVar(self, "locTerminals", locTerminals);
			setObjVar(self, "strTerminals", strTerminals);
			setObjVar(self, "objTerminals", objTerminals);
			setObjVar(self, "fltYaw", fltYaw);

			setupTerminals(self);

		}
	}


	return SCRIPT_CONTINUE;
}

void setupTerminals(obj_id self)
{
	obj_id[] objTerminals = getObjIdArrayObjVar(self, "objTerminals");
	string[] strTerminals = getStringArrayObjVar(self, "strTerminals");
	obj_id[] objChildTerminals = new obj_id[4];

	if((objTerminals == null) || (strTerminals == null)) {

		return;
	}

	for(int intI = 0; intI<objTerminals.length; intI++)
	{
		string strTest = strTerminals[intI];
		// order is
		//Uplink
		//Security
		//Override
		//Regulator
		if(strTest=="object/tangible/gcw/uplink_terminal.iff")
		{
			objChildTerminals[0] = objTerminals[intI];
		}

		else if(strTest=="object/tangible/gcw/security_terminal.iff")
		{
			objChildTerminals[1] = objTerminals[intI];
		}
		else if(strTest=="object/tangible/gcw/override_terminal.iff")
		{
			objChildTerminals[2] = objTerminals[intI];
		}
		else if(strTest=="object/tangible/gcw/power_regulator.iff")
		{
			objChildTerminals[3] = objTerminals[intI];
		}

	}

	setObjVar(self, hq.VAR_OBJECTIVE_ID, objChildTerminals);	// Suppress linting - We know that this array will always be at least four elements long

}
messageHandler objectiveCompleted()
{
	//LOG("gcw", "COMPLETED OBJECTIVE");
	// flip the spawners
	string strRebel = factions.FACTION_REBEL;
	string strImperial = factions.FACTION_IMPERIAL;

	if(!hasObjVar(self, "intCompleted"))
	{

		setObjVar(self, "intCompleted", 1);
		string strFaction = getStringObjVar(self, "strFaction");
		//LOG("gcw", "Faction is "+strFaction);
		int intPoints = getIntObjVar(self, "intPoints");
		if(intPoints<1)
		{
			intPoints = 1;
		}

		if(strFaction==strImperial) // old faction
		{
			setObjVar(self, "strFaction", factions.FACTION_REBEL);
			factions.shiftPointsTo(factions.FACTION_REBEL, intPoints);
			factions.setFaction(self, factions.FACTION_REBEL, false);


		}
		else if(strFaction==strRebel)
		{
			setObjVar(self, "strFaction", factions.FACTION_IMPERIAL);
			factions.shiftPointsTo(factions.FACTION_IMPERIAL, intPoints);
			factions.setFaction(self, factions.FACTION_IMPERIAL, false);
		}
		obj_id[] objSpawners = getFactionalDungeonSpawners(self);
		for(int intI = 0;  intI<objSpawners.length; intI++)
		{
			if(hasObjVar(objSpawners[intI], "intBanner"))
			{
				messageTo(objSpawners[intI], "swapFlag", null, 0, true);
			}
			else if(hasObjVar(objSpawners[intI], "intTerminal"))
			{
				// nothing
			}
			else
			{
				swapMobs(objSpawners[intI], strFaction);

			}
		}
		obj_id[] objTerminals = getObjIdArrayObjVar(self, "objTerminals");
		for(int intI = 0; intI<objTerminals.length; intI++)
		{
			destroyObject(objTerminals[intI]);
		}

		messageTo(self, "respawnObjective", null, OBJECTIVE_RESPAWN_TIME, true);
	}
	removeObjVar(self, "hq");
	return SCRIPT_CONTINUE;
}


messageHandler respawnObjective()
{
	removeObjVar(self, "intCompleted");

	location[] locSpawners = getLocationArrayObjVar(self, "locTerminals");
	string[] strTerminals = getStringArrayObjVar(self, "strTerminals");
	float[] fltYaw = getFloatArrayObjVar(self, "fltYaw");
	resizeable obj_id[] objTerminals = new obj_id[0];
	for(int intI = 0; intI<locSpawners.length; intI++)
	{
		obj_id objTerminal = createObject(strTerminals[intI], locSpawners[intI]);
		objTerminals = utils.addElement(objTerminals, objTerminal);
		setObjVar(objTerminal, "objParent", self);
		setYaw(objTerminal, fltYaw[intI]);
		persistObject(objTerminal);
	}
	if(objTerminals.length > 0) {

		setObjVar(self, "objTerminals", objTerminals);
		setupTerminals(self);
	}

	return SCRIPT_CONTINUE;
}


obj_id[] getFactionalDungeonSpawners(obj_id objParent)
{
	resizeable obj_id[] objSpawners = new obj_id[0];
	obj_id[] objObjects = getAllObjectsWithObjVar(getLocation(objParent), 250, "type");
	//LOG("gcw", "objObjects length is "+objObjects.length);
	for(int intI = 0; intI<objObjects.length; intI++)
	{
		//LOG("gcw", "objOBject[intI] is"+ objObjects[intI]);
		obj_id[] objContents = getContents(objObjects[intI]);

		if(objContents!=null)
		{
			//LOG("gcw", "objContents length is "+objContents);
			for(int intM = 0; intM<objContents.length; intM++)
			{
				// flip the objvar here
				if(hasObjVar(objContents[intM], "type"))
				{
					objSpawners = utils.addElement(objSpawners, objContents[intM]);

				}

			}
		}
		else
		{
			objSpawners = utils.addElement(objSpawners, objObjects[intI]);
		}
	}
	return objSpawners;


}
void swapMobs(obj_id objSpawner, string strFaction) // faction is what we're swapping from
{
	if ( !isIdValid(objSpawner) || strFaction == null || strFaction.equals("") )
		return;

	string strRebel = factions.FACTION_REBEL;
	string strImperial = factions.FACTION_IMPERIAL;

	string strType = getStringObjVar(objSpawner, "type");
	if ( strType == null || strType.equals("") )
		return;

	//LOG("gcw", "type is "+strType);

	if(strFaction==strRebel)
	{

		dictionary dctSwitchInfo = dataTableGetRow(REBEL_TO_IMPERIAL_FILENAME, strType);
		string strNewType = dctSwitchInfo.getString("Imperial");
		setObjVar(objSpawner, "type", strNewType);
		if(strNewType=="at_st")
		{
			// it's going to be an at_st, so make sure to lower population
			setObjVar(objSpawner, "pop", 1);

		}

	}
	else if (strFaction==strImperial)
	{
		dictionary dctSwitchInfo = dataTableGetRow(IMPERIAL_TO_REBEL_FILENAME, strType);
		string strNewType = dctSwitchInfo.getString("Rebel");

		if(strType=="at_st")
		{
			// it was an at_st, so increase population by 5
			setObjVar(objSpawner, "pop", 5);
		}

		setObjVar(objSpawner, "type", strNewType);
	}
	return;
}

void changeMobs(obj_id objSpawner, string strFaction)
{
	// this function checks to see if the spawner is set to the correct faction (passed in)
	// if not, it calls swapmobs usign the faction the spawner currently has.

	// flow is
	// we look for the type on the spawner in the imperial table
	// if we don't find it, we check if the faction it's supposed to be is imperial
	// if it's set to imperial, but isn't supposed to be, we swap it


	string strType = getStringObjVar(objSpawner, "type");
	string strImperial = factions.FACTION_IMPERIAL;
	string strRebel = factions.FACTION_REBEL;

	dictionary dctInfo = dataTableGetRow(IMPERIAL_TO_REBEL_FILENAME, strType);
	string strMob = null;
	if(dctInfo!=null)
	{
		strMob = dctInfo.getString("Imperial");
	}

	if(strMob!=null)
	{

		if(strFaction!=strImperial) // flip these  since we found an imperial, but we're not
		{
			swapMobs(objSpawner, factions.FACTION_IMPERIAL);
		}
	}
	else
	{
		if(strFaction!=strRebel)
		{	// it's not an imperial, but we need one.
			swapMobs(objSpawner, factions.FACTION_REBEL);

		}

	}



}

void validateMobs(obj_id objSpawner, string strType, string strFaction)
{
	// we check if we're the right faction, faction is the parent faction

	//strType is what we think we need to spawn

	string strImperial = factions.FACTION_IMPERIAL;
	string strRebel = factions.FACTION_REBEL;

	if(strFaction==strImperial)
	{
		/// parent is imperial, are we setup right?
		dictionary dctInfo = dataTableGetRow(IMPERIAL_TO_REBEL_FILENAME, strType);
		if(dctInfo==null)
		{
			changeMobs(objSpawner, strFaction); // we're wrong
		}

	}
	else if(strFaction==strRebel)
	{
		dictionary dctInfo = dataTableGetRow(REBEL_TO_IMPERIAL_FILENAME, strType);
		if(dctInfo==null)
		{
			changeMobs(objSpawner, strFaction);// change to rebel
		}
	}


}
messageHandler checkSpawner()
{
	obj_id objSpawner = params.getObjId("objSpawner");
	string strFaction = getStringObjVar(self, "strFaction");
	string strType = getStringObjVar(objSpawner, "type");
	validateMobs(objSpawner, strType, strFaction);
	return SCRIPT_CONTINUE;




}
messageHandler checkBanner()
{
	obj_id objSpawner = params.getObjId("objSpawner");
	string strType = getStringObjVar(objSpawner, "type");
	string strFaction = getStringObjVar(self, "strFaction");
	if(strType!=strFaction)
	{
		messageTo(objSpawner, "swapFlag", null, 0, true); // swap the flag to reinitialize
	}
	return SCRIPT_CONTINUE;
}

