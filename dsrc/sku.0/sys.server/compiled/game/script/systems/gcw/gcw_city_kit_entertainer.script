include library.create;
include library.factions;
include library.gcw;
include library.trial;
include library.utils;
include library.ai_lib;


inherits systems.gcw.gcw_city_kit;


trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}



boolean hasConstructionQuests()
{
	return false;
}

void setupConstructionQuests(obj_id self, obj_id pylon)
{
}

void setupInvasionQuests(obj_id kit)
{
}

int getConstructionQuestsCompleted(obj_id pylon)
{
	return 100;
}

obj_id createFactionKit(int faction, location loc)
{
	dictionary params = new dictionary();
	
	params.put("faction", faction);
	params.put("location", loc);
	
	
	obj_id self = getSelf();
	utils.setObjVar(self, "gcw.troopCounter", 0);
	messageTo(self, "createDemoralizedNpc", params, (float)rand(0, 30) + 60, false);

	return null;
}

messageHandler createDemoralizedNpc()
{
	if(params == null)
	{
		return SCRIPT_CONTINUE;
	}
	
	int troopCounter = 0;
	
	if(hasObjVar(self, "gcw.troopCounter"))
	{
		troopCounter = getIntObjVar(self, "gcw.troopCounter");
	}

	
	//Check to see how many troops are already ready to be entertained. If it's 4 or more we don't want to add to the group
	if(troopCounter >= 3)
	{
		messageTo(self, "createDemoralizedNpc", params, (float)rand(0, 30) + 60, false);
		return SCRIPT_CONTINUE;
	
	
	}
	troopCounter++;
	setObjVar(self, "gcw.troopCounter", troopCounter);	
	obj_id kit = null; 

	int faction = params.getInt("faction");
	location loc = getLocation(self);


	if(factions.FACTION_FLAG_IMPERIAL == faction)
	{

		//kit = trial.createSchedulerNPC(self, null, "gcw_city_demoralized_imperial");
		kit = create.object("gcw_city_demoralized_imperial", loc);
		setName(kit, "Demoralized Imperial");
	}
	else if(factions.FACTION_FLAG_REBEL == faction)
	{
		//kit = trial.createSchedulerNPC(self, null, "gcw_city_demoralized_rebel");
		kit = create.object("gcw_city_demoralized_rebel", loc);
		setName(kit, "Demoralized Rebel");
	}
	
	ai_lib.setDefaultCalmBehavior(kit, ai_lib.BEHAVIOR_LOITER);
	messageTo(kit, "handleSetDefaultBehavior", null, 1, false);

		
	if(isIdValid(kit))
	{

		
		setObjVar(self, "factionFlag", faction); // Faction that is currently constructing this item on the master kit object
		utils.setScriptVar(kit, "faction", faction);
		utils.setScriptVar(kit, "creator", self);
		obj_id kitParent = trial.getParent(self);
		
		if(isIdValid(kitParent) && exists(kitParent))
		{
			trial.setParent(kitParent, kit, true);
			trial.markAsTempObject(kit, true);
			trial.setInterest(kit);
			setObjVar(kit, "spawn_id", getStringObjVar(self, "spawn_id"));
			attachScript(kit, "systems.gcw.gcw_entertainer_faction_quest");
			//attachScript(kit, "systems.dungeon_sequencer.ai_controller");
			setHibernationDelay(kit, 3600.0f);
			ai_lib.setLoiterRanges(kit, 1f, 3f);
		
		}
	}

	messageTo(self, "createDemoralizedNpc", params, (float)rand(0, 30) + 60, false);

	return SCRIPT_CONTINUE;
}

messageHandler createFightingNpc()
{

	int faction = utils.getIntObjVar(self, "factionFlag");
	
	
	obj_id npc = null;
	obj_id convinced_trooper = params.getObjId("convincedTrooper");
	location loc = getLocation(convinced_trooper);
	
	
	if(factions.FACTION_FLAG_IMPERIAL == faction)
	{
		npc = trial.createSchedulerNPC(self, self, "gcw_city_imperial_2", loc);
	}
	else if(factions.FACTION_FLAG_REBEL == faction)
	{
		npc = trial.createSchedulerNPC(self, self, "gcw_city_rebel_commando_assault", loc);
	}
  	
  	
  	obj_id trooperParent = utils.getObjIdScriptVar(convinced_trooper, "spawnedBy");
  	setObjVar (npc, "ai_controller.behavior", 2);
  	setObjVar (npc, "ai.defaultCalmBehavior", 2);
  	setObjVar (npc, "gcw.entertainer_rally", 1);
  	if(trooperParent == self)
  	{
  		destroyObject(convinced_trooper);
  	
		if(isIdValid(npc))
		{
			int troopCounter = 0;

			if(hasObjVar(self, "gcw.troopCounter"))
			{
				troopCounter = getIntObjVar(self, "gcw.troopCounter");
			}
			troopCounter--;
			setObjVar(self, "gcw.troopCounter", troopCounter);
		}
 
 	}
	return SCRIPT_CONTINUE;
}