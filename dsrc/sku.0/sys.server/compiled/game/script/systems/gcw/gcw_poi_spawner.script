/***** INCLUDES ********************************************************/

include library.ai_lib;
include library.attrib;
include library.create;
include library.holiday;
include library.utils;

trigger OnAttach()
{
	messageTo(self, "spawnSentry", null, 10, false);
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	if(!utils.hasScriptVar(self, "child"))
		return SCRIPT_CONTINUE;

	obj_id child = utils.getObjIdScriptVar(self, "child");
	if(!isValidId(child) || !exists(child))
		return SCRIPT_CONTINUE;

	destroyObject(child);	
	return SCRIPT_CONTINUE;
}

messageHandler spawnSentry()
{
	LOG("guard_spawning","spawnSentry init");
	
	if(!hasObjVar(self, "mob"))
	{
		return SCRIPT_CONTINUE;
	}
	LOG("guard_spawning","spawnSentry has mob objvar");

	string creatureType = getStringObjVar(self, "mob");
	if(creatureType == null || creatureType.length() <= 0)
	{
		return SCRIPT_CONTINUE;
	}
	LOG("guard_spawning","spawnSentry creatureType: "+creatureType);

	obj_id mob = create.object(creatureType, getLocation(self));
	if(!isValidId(mob) || !exists(mob))
	{
		return SCRIPT_CONTINUE;
	}
	LOG("guard_spawning","spawnSentry mob: "+mob);
	
	CustomerServiceLog("outbreak_themepark", "camp_survivor_spawning.spawnSurvivor() Mob: "+mob+" WAS SUCCESSFULLY CREATED for spawner: "+self);
	//set vars on mob for use by the mob
	setObjVar(mob, "mySpawner", self);
	utils.setScriptVar(self, "child", mob);
	return SCRIPT_CONTINUE;
}
