include library.buff;
include library.factions;
include library.gcw;
include library.groundquests;
include library.resource;
include library.restuss_event;
include library.static_item;
include library.trial;
include library.utils;

const string PARENT					= "parent";


trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!hasObjVar(self, PARENT))
	{
		LOG("gcw_smuggler_functionality","no parent var on obj");	
		return SCRIPT_CONTINUE;
	}
	
	obj_id parent = getObjIdObjVar(self, PARENT);
	if(!isValidId(parent))
	{
		LOG("gcw_smuggler_functionality","parent var not valid");	
		return SCRIPT_CONTINUE;
	}

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_smuggler_functionality","no faction on turret obj");
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");
	if(faction < 0)
	{
		LOG("gcw_smuggler_functionality","faction invalid on turret obj");
		return SCRIPT_CONTINUE;
	}
	
	if(faction != factions.getFactionFlag(player))
	{
		LOG("gcw_smuggler_functionality","faction invalid on turret obj");
		return SCRIPT_CONTINUE;
	}

	if(faction == factions.getFactionFlag(player))
	{
		menu_info_data data = mi.getMenuItemByType(menu_info_types.ITEM_USE);

		if(data != null)
			data.setServerNotify (true);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	LOG("gcw_smuggler_functionality","OnObjectMenuSelect");	
	if(!hasObjVar(self, PARENT))
	{
		LOG("gcw_smuggler_functionality","no parent var on obj");	
		return SCRIPT_CONTINUE;
	}
	
	obj_id parent = getObjIdObjVar(self, PARENT);
	if(!isValidId(parent))
	{
		LOG("gcw_smuggler_functionality","parent var not valid");	
		return SCRIPT_CONTINUE;
	}

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_smuggler_functionality","no faction on patrol obj");	
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");
	if(faction < 0)
	{
		LOG("gcw_smuggler_functionality","faction invalid on patrol obj");
		return SCRIPT_CONTINUE;
	}

	if(faction != factions.getFactionFlag(player))
	{
		LOG("gcw_smuggler_functionality","Wrong Faction");
		return SCRIPT_CONTINUE;
	}
	
	LOG("gcw_smuggler_functionality","player has used patrol point");

	//Entertainers Using
	if(faction == factions.getFactionFlag(player))
	{
		LOG("gcw_smuggler_functionality","player is of correct faction");

		string questName = gcw.GCW_DEFEND_TOWER_REBEL;
		if(faction == 2)
		{
			questName = gcw.GCW_DEFEND_TOWER_IMPERIAL;
		}
		LOG("gcw_smuggler_functionality","questName: "+questName);

		if(groundquests.isQuestActive(player, questName))
		{						
			return SCRIPT_CONTINUE;
		}

		if(groundquests.hasCompletedQuest(player, questName))
		{
			groundquests.clearQuest(player, questName); 
		}
		if(!groundquests.isQuestActive(player, questName))
		{
			groundquests.grantQuest(player, questName); 
		}
	}	
	return SCRIPT_CONTINUE;
}

messageHandler destroyGCWTower()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	handleDestroyTower(self, killer);
 	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled(obj_id killer)
{
	handleDestroyTower(self, killer);
	return SCRIPT_CONTINUE;
}

void handleDestroyTower(obj_id self, obj_id killer)
{
	playClientEffectLoc(self, "clienteffect/combat_explosion_lair_large.cef", getLocation(self), 0);
	setInvulnerable( self, true );
	messageTo(self, "destroyGCWTower", null, 1f, false);
 	return;
}

