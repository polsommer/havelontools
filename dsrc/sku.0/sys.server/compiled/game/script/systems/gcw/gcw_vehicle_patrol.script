include library.buff;
include library.create;
include library.factions;
include library.gcw;
include library.groundquests;
include library.resource;
include library.restuss_event;
include library.static_item;
include library.trial;
include library.utils;

const string[] lowImperials =
{
	"gcw_city_at_st_1"
};

const string[] normalImperials =
{
	"gcw_city_at_st_2"
};

const string[] eliteImperials =
{
	"gcw_city_at_st_3"
};

const string[] lowRebels =
{
	"gcw_city_at_xt_1"
};

const string[] normalRebels =
{
	"gcw_city_at_xt_2"
};

const string[] eliteRebels =
{
	"gcw_city_at_xt_3"
};

trigger OnAttach()
{
	setObjVar(self, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_vehicle_tool.iff");
	return SCRIPT_CONTINUE;	
}

trigger OnInitialize()
{
	messageTo(self, "handleGCWPatrol", null, 120, false);

	return SCRIPT_CONTINUE;
};

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if(!exists(self))
	{
		return SCRIPT_CONTINUE;
	}

	int idx = utils.getValidAttributeIndex(names);

	if(idx == -1)
	{
		return SCRIPT_CONTINUE;
	}
	
	names[idx] = "object_repaired";
	if(hasObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT))
	{
		int repairCount = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);
		if(repairCount > 0)
		{
			attribs[idx] = ""+repairCount;
			idx++;
			return SCRIPT_CONTINUE;
		}		
	}

	attribs[idx] = "Never Repaired";
	idx++;
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_patrol_point","no faction on turret obj");	
		return SCRIPT_CONTINUE;
	}
	
	
	if(!factions.isPlayerSameGcwFactionAsSchedulerObject(player, self))
	{
		LOG("gcw_patrol_point","faction invalid on turret obj");
		return SCRIPT_CONTINUE;
	}
	else	
	{
		if(utils.isProfession(player, utils.TRADER))
		{
			LOG("gcw_patrol_point","player is trader");

			if(!gcw.canGcwObjectBeRepaired(self))
			{
				LOG("gcw_patrol_point","OnObjectMenuRequest no repair needed");

				sendSystemMessage(player, gcw.SID_DOESNT_NEED_REPAIR);
				return SCRIPT_CONTINUE;
			}
			if(!gcw.hasConstructionOrRepairTool(player, self))
			{
				LOG("gcw_patrol_point","OnObjectMenuRequest no resources");

				gcw.playerSystemMessageResourceNeeded(player, self, false);
				return SCRIPT_CONTINUE;
			}
			menu_info_data data = mi.getMenuItemByType(menu_info_types.ITEM_USE);

			if(data != null)
				data.setServerNotify (true);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	LOG("gcw_patrol_point","OnObjectMenuSelect");	

	if(!isIdValid(player) || !exists(player) || isIncapacitated(player) || isDead(player) || factions.isOnLeave(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_patrol_point","no faction on patrol obj");	
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");
	if(faction < 0)
	{
		LOG("gcw_patrol_point","faction invalid on patrol obj");
		return SCRIPT_CONTINUE;
	}
	
	if(item != menu_info_types.ITEM_USE)
		return SCRIPT_CONTINUE;
	
	if(!factions.isPlayerSameGcwFactionAsSchedulerObject(player, self))
	{
		LOG("gcw_patrol_point","Wrong Faction");
		return SCRIPT_CONTINUE;
	}	
	else
	{
		if(utils.isProfession(player, utils.TRADER))
		{
			LOG("gcw_patrol_point","player is trader");

			if(!gcw.canGcwObjectBeRepaired(self))
			{
				sendSystemMessage(player, gcw.SID_DOESNT_NEED_REPAIR);
				return SCRIPT_CONTINUE;
			}
			if(!gcw.hasConstructionOrRepairTool(player, self))
			{
				gcw.playerSystemMessageResourceNeeded(player, self, false);
				return SCRIPT_CONTINUE;
			}
			LOG("gcw_patrol_point","player can repair");
			if(groundquests.isQuestActive(player, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST))
			{			
				if(gcw.useGcwObjectForQuest(player, self, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST))
				{
					gcw.useConstructionOrRepairTool(player, self);
				}
				return SCRIPT_CONTINUE;
			}
			
			if(groundquests.hasCompletedQuest(player, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST))
			{
				groundquests.clearQuest(player, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST); 
			}
			if(!groundquests.isQuestActive(player, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST))
			{
				groundquests.grantQuest(player, gcw.GCW_REPAIR_VEHICLE_PATROL_QUEST); 
			}
		}
	}	
	return SCRIPT_CONTINUE;
}

int getConstructionQuestsCompleted(obj_id pylon)
{
	int completed = 0;
	
	if(!isIdValid(pylon) || !exists(pylon))
	{
		return 0;
	}
	
	if(hasObjVar(pylon, "gcw.constructionQuestsCompleted"))
	{
		completed = getIntObjVar(pylon, "gcw.constructionQuestsCompleted");
	}
	
	return completed;
}

messageHandler handleGCWPatrol()
{
	int faction = -1;
	
	if(utils.hasScriptVar(self, "faction"))
	{
		faction = utils.getIntScriptVar(self, "faction");
	}

	obj_id kit = utils.getObjIdScriptVar(self, "creator");

	if(!isIdValid(kit) || !exists(kit))
	{
		return SCRIPT_CONTINUE;
	}
	
	int patrolType = getIntObjVar(kit, "patrolType");
	int construction = getConstructionQuestsCompleted(kit);

	string npcName = "";

	if(construction < 1)
	{
		return SCRIPT_CONTINUE;
	}
	else if(construction < gcw.GCW_CONSTRUCTION_MAXIMUM / 2)
	{
		if(faction == factions.FACTION_FLAG_REBEL)
		{
			npcName = lowRebels[rand(0, lowRebels.length - 1)];
		}
		else if(faction == factions.FACTION_FLAG_IMPERIAL)
		{
			npcName = lowImperials[rand(0, lowImperials.length - 1)];
		}
	}
	else if(construction < gcw.GCW_CONSTRUCTION_MAXIMUM)
	{
		if(faction == factions.FACTION_FLAG_REBEL)
		{
			npcName = normalRebels[rand(0, normalRebels.length - 1)];
		}
		else if(faction == factions.FACTION_FLAG_IMPERIAL)
		{
			npcName = normalImperials[rand(0, normalImperials.length - 1)];
		}
	}
	else if(construction >= gcw.GCW_CONSTRUCTION_MAXIMUM)
	{
		if(faction == factions.FACTION_FLAG_REBEL)
		{
			npcName = eliteRebels[rand(0, eliteRebels.length - 1)];
		}
		else if(faction == factions.FACTION_FLAG_IMPERIAL)
		{
			npcName = eliteImperials[rand(0, eliteImperials.length - 1)];
		}
	}
	
	if(getSchedulerNPCs(kit, "gcwPatrol") < 0)
	{
		return SCRIPT_CONTINUE;
	}

	obj_id npc = null;

	if(getSchedulerNPCs(kit, "gcwPatrol") < 500)
	{
		obj_id currentPatrol = utils.getObjIdScriptVar(kit, "currentPatrol");
		
		if(!isIdValid(currentPatrol) || !exists(currentPatrol) || isIncapacitated(currentPatrol) || isDead(currentPatrol))
		{
			npc = createSchedulerNPC(kit, npcName);
			
			utils.setScriptVar(kit, "currentPatrol", npc);
		}
	}

	if(isIdValid(npc) && exists(npc))
	{
		detachScript(npc, "systems.vehicle_system.vehicle_base");
		detachScript(npc, "systems.vehicle_system.vehicle_ping");
	}

	// LOG("doLogging", "handleGCWPatrol complete.  npc: " + npc + " npcName: " + npcName + " getSchedulerNPCs(kit, 'gcwPatrol'): " + getSchedulerNPCs(kit, "gcwPatrol"));
	
	messageTo(self, "handleGCWPatrol", null, 30.0f + rand(0, 30), false);

	return SCRIPT_CONTINUE;
}

int getSchedulerNPCs(obj_id kit, string npcID)
{
	if(!isIdValid(kit) || !exists(kit))
	{
		return -1;
	}
	
	obj_id kitParent = trial.getParent(kit);
	
	if(!isIdValid(kitParent) || !exists(kitParent))
	{
		return -1;
	}
	
	obj_id[] npcs = trial.getObjectsInInstanceBySpawnId(trial.getParent(kit), npcID);
	
	if(npcs == null)
	{
		return 0;
	}
	
	return npcs.length;
}

obj_id createSchedulerNPC(obj_id kit, string npcName)
{
	// LOG("doLogging", "createSchedulerNPC kit: " + kit + " npcName: " + npcName);

	if(!isIdValid(kit) || !exists(kit))
	{
		return null;
	}
	
	obj_id kitParent = trial.getParent(kit);

	if(!isIdValid(kitParent) || !exists(kitParent))
	{
		return null;
	}

	// Create the npc
	location loc = getLocation(kit);
	
	obj_id npc = create.object(npcName, loc);
	
	if(!isIdValid(npc) || !exists(npc))
	{
		return null;
	}
	
	trial.markAsTempObject(npc, true);
	trial.setParent(kitParent, npc, true);
	trial.setInterest(npc);

	setObjVar(npc, "spawn_id", "gcwPatrol");
	
	trial.storeSpawnedChild(kitParent, npc, "gcwPatrol");

	string patrol = getStringObjVar(kit, "patrolPoint");

	// LOG("doLogging", "createSchedulerNPC npc: " + npc + " npcName: " + npcName);
	
	if(patrol != null && patrol.length() > 0)
	{
		dictionary path_data = utils.hasScriptVar(kitParent, trial.SEQUENCER_PATH_DATA) ? utils.getDictionaryScriptVar(kitParent, trial.SEQUENCER_PATH_DATA) : null;

		if (path_data != null && !path_data.isEmpty())
			utils.setScriptVar(npc, trial.SEQUENCER_PATH_DATA, utils.getDictionaryScriptVar(kitParent, trial.SEQUENCER_PATH_DATA));

		setObjVar(npc, "patrol_path", patrol);
		setHibernationDelay(npc, 3600.0f);
	}

	attachScript(npc, "systems.dungeon_sequencer.ai_controller");

	return npc;
}

messageHandler destroyGCWPatrol()
{
	trial.cleanupObject(self);
	return SCRIPT_CONTINUE;
}

trigger OnDeath(obj_id killer, obj_id corpseId)
{
	handleDestroyPatrol(self, killer);

 	return SCRIPT_CONTINUE;
}

trigger OnObjectDisabled(obj_id killer)
{
	handleDestroyPatrol(self, killer);
	return SCRIPT_CONTINUE;
}

void handleDestroyPatrol(obj_id self, obj_id killer)
{
	location death = getLocation( self );
	playClientEffectObj(killer, "clienteffect/combat_explosion_lair_large.cef", self, "");
	playClientEffectLoc(killer, "clienteffect/combat_explosion_lair_large.cef", death, 0);

	setInvulnerable(self, true);
	messageTo(self, "destroyGCWPatrol", null, 1f, false);

 	return;
}
