include library.ai_lib;
include library.beast_lib;
include library.factions;
include library.instance;
include library.pclib;
include library.pet_lib;
include library.trial;
include library.utils;

inherits systems.combat.combat_base;

trigger OnAttach()
{
	obj_id parent = trial.getParent(self);

	if(!isIdValid(parent))
	{
		return SCRIPT_CONTINUE;
	}

	messageTo(self, "findTarget", null, rand(5.0f, 10.0f), false);

	return SCRIPT_CONTINUE;
}

messageHandler findTarget()
{
	//If they are invuln - then the battlefield portion is over - stop shooting...you won't do damage anyway.
	if(isInvulnerable(self))
	{
		return SCRIPT_CONTINUE;
	}

	obj_id target = utils.getObjIdScriptVar(self, "gcw.towerTarget");

	if(!isIdValid(target) || !exists(target))
	{
		obj_id[] targets = getNonCreaturesInRange(self, 32.0f);

		resizeable obj_id[] validTargets = new obj_id[0];

		if(targets == null || targets.length == 0)
		{
			messageTo(self, "findTarget", null, rand(2.0f, 4.0f), false);

			return SCRIPT_CONTINUE;
		}

		for(int i = 0; i < targets.length; i++)
		{
			if(!isIdValid(targets[i]))
			{
				continue;
			}

			if(targets[i] == self)
			{
				continue;
			}

			string templateName = getTemplateName(targets[i]);

			if(templateName.equals("object/tangible/destructible/gcw_imperial_tower.iff") || templateName.equals("object/tangible/destructible/gcw_rebel_tower.iff"))
			{
				validTargets.add(targets[i]);
			}
		}

		if(validTargets == null || validTargets.length <= 0)
		{
			messageTo(self, "findTarget", null, rand(2.0f, 4.0f), false);
			return SCRIPT_CONTINUE;
		}

		target = validTargets[rand(0, validTargets.length - 1)];

		if(!isIdValid(target))
			target = validTargets[rand(0, validTargets.length - 1)];

		if(!isIdValid(target) || !exists(target))
		{
			messageTo(self, "findTarget", null, rand(2.0f, 4.0f), false);
			return SCRIPT_CONTINUE;
		}

		utils.setScriptVar(self, "gcw.towerTarget", target);
	}

	addHate(self, target, 1000.0f);

/*
	debugSpeakMsg(self, "self faction: " + factions.getFaction(self) + 
		" target faction: " + factions.getFaction(target) + 
		" Self Declared: " + (pvpGetType(self) == PVPTYPE_DECLARED) + 
		" target declared: " + (pvpGetType(target) == PVPTYPE_DECLARED));
*/
	
	queueCommand(self, ##"gcw_atst_attack_tower", target, "", COMMAND_PRIORITY_DEFAULT);

	messageTo(self, "findTarget", null, rand(4.0f, 6.0f), false);

	return SCRIPT_CONTINUE;
}
