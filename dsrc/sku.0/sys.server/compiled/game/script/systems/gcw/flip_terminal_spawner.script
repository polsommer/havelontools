include library.ai_lib;
include library.create;
include library.factions;
include library.gcw;
include library.locations;
include library.utils;

trigger OnInitialize()
{
	messageTo(self, "checkTerminal", null, 1.0f, false);

	return SCRIPT_CONTINUE;
}

void checkDestroy(obj_id self)
{
	if(!utils.hasScriptVar(self, "terminal"))
	{
		return;
	}

	obj_id terminal = utils.getObjIdScriptVar(self, "terminal");

	if(isIdValid(terminal))
	{
		destroyObject(terminal);
	}
}

trigger OnDestroy()
{
	checkDestroy(self);

	return SCRIPT_CONTINUE;
}

trigger OnUnloadedFromMemory()
{
	checkDestroy(self);

	return SCRIPT_CONTINUE;
}


//------------------------------------------------
// checkBannerImpulse
//------------------------------------------------

messageHandler checkTerminal()
{
	float imp_r = gcw.getImperialPercentileByRegion(self);
	float reb_r = gcw.getRebelPercentileByRegion(self);

	int lastCheckTime = utils.getIntScriptVar(self, "lastCheckTime");
	
	if(getGameTime() - lastCheckTime < 5)
	{
		return SCRIPT_CONTINUE;
	}

	// LOG("gcw_region", "flip_terminal_spawner checkTerminal imp_r: " + imp_r + " reb_r: " + reb_r);

	utils.setScriptVar(self, "lastCheckTime", getGameTime());

	obj_id terminal = getObjIdObjVar(self, "terminal");

	if(imp_r > reb_r)
	{
		if(isIdValid(terminal))
		{
			string faction = getStringObjVar(terminal, factions.FACTION);

			if(faction.equalsIgnoreCase("rebel"))
			{
				destroyObject(terminal);

				spawnTerminal(self, "imperial");
			}
		}
		else
		{
			spawnTerminal(self, "imperial");
		}
	}
	else if(reb_r > imp_r)
	{
		if(isIdValid(terminal))
		{
			string faction = getStringObjVar(terminal, factions.FACTION);

			if(faction.equalsIgnoreCase("imperial"))
			{
				destroyObject(terminal);

				spawnTerminal(self, "rebel");
			}
		}
		else
		{
			spawnTerminal(self, "rebel");
		}
	}

	messageTo(self, "checkTerminal", null, 3600.f, false);

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// spawnBanner
//------------------------------------------------

void spawnTerminal(obj_id self, string faction)
{
	obj_id terminal = createObject("object/tangible/terminal/terminal_mission_" + faction + ".iff", getLocation(self));

	if(!isIdValid(terminal))
	{
		return;
	}

	setYaw(terminal, getYaw(self));

	setObjVar(terminal, "spawner", self);
	setObjVar(self, "terminal", terminal);

	return;
}
