//------------------------------------------------
// Include
//------------------------------------------------

include library.create;
include library.ai_lib;
include library.locations;
include library.trial;
include library.utils;
include library.gcw;

//------------------------------------------------
// Inherits
//------------------------------------------------

inherits systems.gcw.flip_banner;

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnDestroy()
{
	return SCRIPT_CONTINUE;
}

trigger OnUnloadedFromMemory()
{
	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id speaker, string strText)
{
	string[] strCommands = split(strText, ' ');

	if(strCommands[0].equalsIgnoreCase("gcwflip"))
	{
		LOG("gcw_region", "OnSpeaking flip_banner_onpole");
		messageTo(self, "updateGCWInfo", null, 1.0f, false);
		messageTo(self, "checkBannerImpulse", null, 2.f, false);
	}

	return SCRIPT_CONTINUE;
}

//------------------------------------------------
// spawnBanner
//------------------------------------------------

void spawnBanner(obj_id self, string faction)
{
	string empiredayRunning = getConfigSetting("GameServer", "empireday_ceremony");

	if(empiredayRunning != null)
	{
		if(empiredayRunning.equals("true") || empiredayRunning.equals("1"))
		{

			// Figure out where we are!
			location here = getLocation(self);
			string city = locations.getCityName(here);
			
			if(city == null)
				city = locations.getGuardSpawnerRegionName(here);

			if(city != null && city.length() > 0)
			{
				if(city.equals("coronet"))
				{
					faction = "rebel";
				}
				else if(city.equals("theed"))
				{
					faction = "imperial";
				}
			}
		}
	}

	transform t = getTransform_o2w(self);

	obj_id banner = createObject("object/tangible/gcw/flip_banner_onpole_"+faction+".iff", t, null);

	// LOG("gcw_region", "spawnBanner self: " + self + " faction: " + faction + " banner: " + banner);

	if(!isIdValid(banner))
	{
		// Failed for some reason?
		return;
	}

	obj_id kitParent = trial.getParent(self);

	if(isIdValid(kitParent) && exists(kitParent))
	{
		trial.setParent(kitParent, banner, true);
		trial.markAsTempObject(banner, true);
		setObjVar(banner, "spawn_id", getStringObjVar(self, "spawn_id"));
	}

	setObjVar(banner, "spawner", self);
	utils.setScriptVar(self, "banner", banner);

	return;
}
