include library.factions;
include library.gcw;
include library.trial;
include library.utils;

const int CONSTRUCTION_HP_BASE		= 5000;

void destroyKitObj(obj_id self)
{
	if(!isIdValid(self) || !exists(self))
	{
		return;
	}
	
	obj_id kitObj = getObjIdObjVar(self, "gcw.kitObj");

	if(!isIdValid(kitObj) || !exists(kitObj))
	{
		return;
	}
	
	trial.cleanupObject(kitObj);

	removeObjVar(self, "gcw.kitObj");
	utils.removeScriptVar(self, "iconMessageTime");
}

trigger OnHearSpeech(obj_id objSpeaker, string strText)
{
	if(!isGod(objSpeaker))
	{
		return SCRIPT_CONTINUE;
	}

	if(strText.equals("gcwcleanup"))
	{
		destroyKitObj(self);
	}

	if(strText.equals("gcwbuildi"))
	{
		// debugSpeakMsg(self, "Aye Aye Captain!  Constructing!");
		
		dictionary params = new dictionary();
		
		params.put("faction", factions.FACTION_FLAG_IMPERIAL);
		
		messageTo(self, "beginConstruction", params, 1.0f, false);
	}

	if(strText.equals("gcwbuildr"))
	{
		// debugSpeakMsg(self, "Aye Aye Captain!  Constructing!");
		
		dictionary params = new dictionary();
		
		params.put("faction", factions.FACTION_FLAG_REBEL);
		
		messageTo(self, "beginConstruction", params, 1.0f, false);
	}

	if(strText.equals("gcwinvadei"))
	{
		// debugSpeakMsg(self, "Aye Aye Captain!  Invading!");

		dictionary params = new dictionary();
		
		obj_id pylon = getObjIdObjVar(self, "gcw.kitObj");

		if(!isIdValid(pylon) || !exists(pylon))
		{
			return SCRIPT_CONTINUE;
		}

		setObjVar(pylon, "gcw.constructionQuestsCompleted", 40);
		
		params.put("faction", factions.FACTION_FLAG_IMPERIAL);
		
		messageTo(self, "beginInvasion", params, 1.0f, false);
	}

	if(strText.equals("gcwinvader"))
	{
		// debugSpeakMsg(self, "Aye Aye Captain!  Invading!");

		dictionary params = new dictionary();
		
		obj_id pylon = getObjIdObjVar(self, "gcw.kitObj");

		if(!isIdValid(pylon) || !exists(pylon))
		{
			return SCRIPT_CONTINUE;
		}

		setObjVar(pylon, "gcw.constructionQuestsCompleted", 40);
		
		params.put("faction", factions.FACTION_FLAG_REBEL);
		
		messageTo(self, "beginInvasion", params, 1.0f, false);
	}
	
	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	destroyKitObj(self);

	return SCRIPT_CONTINUE;
}

int getConstructionQuestsCompleted(obj_id pylon)
{
	int completed = 0;

	if(!isIdValid(pylon) || !exists(pylon))
	{
		return 0;
	}
	
	if(hasObjVar(pylon, "gcw.constructionQuestsCompleted"))
	{
		completed = getIntObjVar(pylon, "gcw.constructionQuestsCompleted");
	}
	
	return completed;
}

boolean hasConstructionQuests()
{
	return true;
}

// The inheriting script sets these up.  This is a placeholder.
void setupConstructionQuests(obj_id self, obj_id pylon)
{
}

messageHandler beginConstruction()
{
	if(!isIdValid(self) || !exists(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	// Cleanup anything leftover that slipped through
	destroyKitObj(self);
	
	int faction = params.getInt("faction");
	
	if(hasObjVar(self, "factionFlag"))
	{
		faction = getIntObjVar(self, "factionFlag");
	}
	
	// Bad faction?
	if(faction != factions.FACTION_FLAG_REBEL && faction != factions.FACTION_FLAG_IMPERIAL)
	{
		return SCRIPT_CONTINUE;
	}
	
	location loc = getLocation(self);

	if(hasConstructionQuests())
	{
		// Create the pylon and attach the quests
		obj_id pylon = createObject("object/tangible/destructible/gcw_city_construction_beacon.iff", loc);

		if(isIdValid(pylon) && exists(pylon))
		{
			setObjVar(self, "gcw.kitObj", pylon);
			utils.setObjVar(self, "factionFlag", faction); // Faction that is currently constructing this item on the master kit object
			utils.setScriptVar(pylon, "faction", faction);

			int resources = getConstructionQuestsCompleted(self);

			setObjVar(pylon, "gcw.constructionQuestsCompleted", resources);
		
			string spawnId = getStringObjVar(self, "spawn_id");

			if(spawnId.equals("offense_patrol"))
			{
				setObjVar(pylon, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_patrol_tool.iff");
			}
			else if(spawnId.equals("defense_patrol"))
			{
				setObjVar(pylon, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_spawner_tool.iff");
			}

			obj_id kitParent = trial.getParent(self);

			if(isIdValid(kitParent) && exists(kitParent))
			{
				trial.setParent(kitParent, pylon, true);
				trial.storeSpawnedChild(kitParent, pylon, spawnId);
				setObjVar(pylon, "spawn_id", spawnId);
			}

			trial.markAsTempObject(pylon, true);
			trial.setInterest(pylon);

			attachScript(pylon, "systems.dungeon_sequencer.ai_controller");

			setupConstructionQuests(self, pylon);
		}
	}

	return SCRIPT_CONTINUE;
}

// The inheriting script sets these up.  This is a placeholder.
void setupInvasionQuests(obj_id kit)
{
}

// The inheriting script sets these up.  This is a placeholder.
obj_id createFactionKit(int faction, location loc)
{
	return null;
}

int getConstructionHP()
{
	return CONSTRUCTION_HP_BASE;
}

messageHandler beginInvasion()
{
	if(!isIdValid(self) || !exists(self))
	{
		return SCRIPT_CONTINUE;
	}

	obj_id pylon = getObjIdObjVar(self, "gcw.kitObj");

	int construction = getConstructionQuestsCompleted(pylon);
	int faction = getIntObjVar(self, "factionFlag");

	destroyKitObj(self);
	
	if(construction < 1)
	{
		return SCRIPT_CONTINUE;
	}

	setObjVar(self, "gcw.constructionQuestsCompleted", construction);

	location loc = getLocation(self);

	obj_id kit = createFactionKit(faction, loc);

	if(isIdValid(kit) && exists(kit))
	{
		setYaw(kit, getYaw(self));

		setObjVar(self, "gcw.kitObj", kit);
		setObjVar(self, "factionFlag", faction); // Faction that is currently constructing this item on the master kit object
		utils.setScriptVar(kit, "faction", faction);


		if(faction == factions.FACTION_FLAG_REBEL)
		{
			factions.setFaction(kit, "Rebel");
		}
		else if(faction == factions.FACTION_FLAG_IMPERIAL)
		{
			factions.setFaction(kit, "Imperial");
		}

		utils.setScriptVar(kit, "creator", self);

		obj_id kitParent = trial.getParent(self);
		
		string spawnId = getStringObjVar(self, "spawn_id");
		
		if(spawnId.equals("offense_patrol"))
		{
			setObjVar(kit, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_patrol_tool.iff");
			setObjVar(kit, "gcw.offense_patrol_spawner", 1);  // Used by general conversation to check availability of objects for spies
		}
		else if(spawnId.equals("defense_patrol"))
		{
			setObjVar(kit, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_spawner_tool.iff");
			setObjVar(kit, "gcw.defense_patrol_spawner", 1);  // Used by general conversation to check availability of objects for spies
		}

		if(isIdValid(kitParent) && exists(kitParent))
		{
			trial.setParent(kitParent, kit, true);
			trial.storeSpawnedChild(kitParent, kit, spawnId);		
			setObjVar(kit, "spawn_id", spawnId);
		}

		trial.markAsTempObject(kit, true);
		trial.setInterest(kit);
		trial.setHp(kit, construction * getConstructionHP());
		
		if(!isMob(kit))
		{
			setObjVar(kit, "pvpCanAttack", 1);
			setObjVar(kit, "ai_combat.attackable", 1);
		}
		
		attachScript(kit, "systems.dungeon_sequencer.ai_controller");
	}
	

	setupInvasionQuests(kit);

	return SCRIPT_CONTINUE;
}

messageHandler cleanup()
{
	destroyKitObj(self);
	
	return SCRIPT_CONTINUE;
}
