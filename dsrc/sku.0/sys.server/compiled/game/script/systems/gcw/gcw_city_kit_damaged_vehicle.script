include library.create;
include library.factions;
include library.gcw;
include library.trial;
include library.utils;

inherits systems.gcw.gcw_city_kit;

const string[] imperialVehicles =	{ "gcw_city_at_st_1", "gcw_city_at_st_2", "gcw_city_at_st_3" };

const string[] rebelVehicles =		{ "gcw_city_at_xt_1", "gcw_city_at_xt_2", "gcw_city_at_xt_3" };

trigger OnAttach()
{
	return SCRIPT_CONTINUE;
}

boolean hasConstructionQuests()
{
	return false;
}

void setupConstructionQuests(obj_id self, obj_id pylon)
{
}

void setupInvasionQuests(obj_id kit)
{
}

int getConstructionQuestsCompleted(obj_id pylon)
{
	return 100;
}

obj_id createFactionKit(int faction, location loc)
{
	dictionary params = new dictionary();
	
	params.put("faction", faction);
	params.put("location", loc);
	
	obj_id self = getSelf();
	
	messageTo(self, "createDamagedVehicle", params, 1.0f, false);

	return null;
}

messageHandler createDamagedVehicle()
{
	if(params == null)
	{
		return SCRIPT_CONTINUE;
	}
	
	obj_id kit = getObjIdObjVar(self, "gcw.kitObj");

	// Do not create another object, if the originally created object still exists.	
	if(isIdValid(kit) && exists(kit))
	{
		messageTo(self, "createDamagedVehicle", params, (float)rand(0, 30) + 15, false);
		return SCRIPT_CONTINUE;
	}

	int faction = params.getInt("faction");
	location loc = params.getLocation("location");

	if(factions.FACTION_FLAG_IMPERIAL == faction)
	{
		kit = create.staticObject(imperialVehicles[rand(0, 2)], loc);
		setName(kit, "Imperial Damaged Vehicle");
		utils.setScriptVar(kit, "gcw.name", "Imperial Damaged Vehicle");
	}
	else if(factions.FACTION_FLAG_REBEL == faction)
	{
		kit = create.staticObject(rebelVehicles[rand(0, 2)], loc);
		setName(kit, "Rebel Damaged Vehicle");
		utils.setScriptVar(kit, "gcw.name", "Rebel Damaged Vehicle");
	}

	if(isIdValid(kit))
	{
		detachScript(kit, "ai.ai");
		detachScript(kit, "ai.creature_combat");
		attachScript(kit, "systems.gcw.gcw_damaged_vehicle");

		setYaw(kit, getYaw(self));

		setObjVar(self, "gcw.kitObj", kit);
		setObjVar(self, "factionFlag", faction); // Faction that is currently constructing this item on the master kit object
		utils.setScriptVar(kit, "faction", faction);
		utils.setScriptVar(kit, "creator", self);
		
		obj_id kitParent = trial.getParent(self);
		
		if(isIdValid(kitParent) && exists(kitParent))
		{
			trial.setParent(kitParent, kit, true);
		}

		trial.markAsTempObject(kit, true);
		trial.setInterest(kit);
		setObjVar(kit, "spawn_id", getStringObjVar(self, "spawn_id"));
		setObjVar(kit, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_vehicle_tool.iff");
		
		attachScript(kit, "systems.dungeon_sequencer.ai_controller");
	}

	messageTo(self, "createDamagedVehicle", params, (float)rand(0, 30) + 60, false);

	return SCRIPT_CONTINUE;
}

messageHandler createRepairedVehicle()
{
	int faction = getIntObjVar(self, "factionFlag");
	location loc = getLocation(self);

	obj_id vehicle = null;

	if(factions.FACTION_FLAG_IMPERIAL == faction)
	{
		vehicle = trial.createSchedulerNPC(self, self, imperialVehicles[rand(0, 2)]);
	}
	else if(factions.FACTION_FLAG_REBEL == faction)
	{
		vehicle = trial.createSchedulerNPC(self, self, rebelVehicles[rand(0, 2)]);
	}

	if(isIdValid(vehicle))
	{
		setObjVar(self, "gcw.kitObj", vehicle);
	}

	return SCRIPT_CONTINUE;
}