include library.create;
include library.factions;
include library.gcw;
include library.groundquests;
include library.resource;
include library.utils;

trigger OnAttach()
{
	messageTo(self, "handleSetup", null, 1.0f, false);
	setObjVar(self, gcw.GCW_TOOL_TEMPLATE_OBJVAR, "object/tangible/gcw/crafting_quest/gcw_vehicle_tool.iff");	
	return SCRIPT_CONTINUE;
}

void updateName(obj_id self)
{
	string name = utils.getStringScriptVar(self, "gcw.name");
	
	int questsCompleted =  getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);

	string suffix = "";

	if(questsCompleted >= 4)
	{
		suffix = " (100% Repaired)";
	}
	else if(questsCompleted <= 0)
	{
		suffix = " (0% Repaired)";
	}
	else
	{
		suffix = " (" + (int)(((float)questsCompleted / 4.0f) * 100.0f) + "% Repaired)";
	}
	
	setName(self, name + suffix);
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	if(!exists(self))
	{
		return SCRIPT_CONTINUE;
	}

	int idx = utils.getValidAttributeIndex(names);

	if(idx == -1)
	{
		return SCRIPT_CONTINUE;
	}

	names[idx] = "object_repaired";
	int repairCount = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);

	if(repairCount > 0)
	{
		attribs[idx] = "" + repairCount + " out of 4";
	}		
	else
	{
		attribs[idx] = "Never Repaired";
	}
	idx++;
	
	return SCRIPT_CONTINUE;
}

messageHandler handleSetup()
{
	gcw.playQuestIconParticle(self);
	
	utils.setObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT, 0);

	setPosture(self, POSTURE_KNOCKED_DOWN);
	setCreatureStatic(self, true);
	updateName(self);

	return SCRIPT_CONTINUE;
}

messageHandler playQuestIcon()
{
	int repairs = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);
	
	if(repairs < 4)
	{
		gcw.playQuestIconHandler(self, params);
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	LOG("gcw_damaged_vehicle", "OnObjectMenuRequest");	

	if(!isIdValid(player) || !exists(player) || isIncapacitated(player) || isDead(player) || factions.isOnLeave(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_damaged_vehicle","no faction on turret obj");	
		return SCRIPT_CONTINUE;
	}
		
	if(!factions.isPlayerSameGcwFactionAsSchedulerObject(player, self))
	{
		LOG("gcw_damaged_vehicle","faction invalid on turret obj");
		return SCRIPT_CONTINUE;
	}
	else
	{
		if(utils.isProfession(player, utils.TRADER))
		{
			LOG("gcw_damaged_vehicle","player is trader");

			int repairs = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);

			if(repairs > 3)
			{
				LOG("gcw_damaged_vehicle","OnObjectMenuRequest no repair needed");

				sendSystemMessage(player, gcw.SID_DOESNT_NEED_REPAIR);
				return SCRIPT_CONTINUE;
			}

			if(!gcw.hasConstructionOrRepairTool(player, self))
			{
				LOG("gcw_damaged_vehicle","OnObjectMenuRequest no resources");

				gcw.playerSystemMessageResourceNeeded(player, self, false);
				return SCRIPT_CONTINUE;
			}
			
			menu_info_data data = mi.getMenuItemByType(menu_info_types.ITEM_USE);

			int mnu = mi.addRootMenu(menu_info_types.ITEM_USE, new string_id("",""));

			if(data != null)
				data.setServerNotify(true);
		}
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	LOG("gcw_damaged_vehicle", "OnObjectMenuSelect");	

	if(!isIdValid(player) || !exists(player) || isIncapacitated(player) || isDead(player) || factions.isOnLeave(player))
	{
		return SCRIPT_CONTINUE;
	}

	if(!utils.hasScriptVar(self, "faction"))
	{
		LOG("gcw_damaged_vehicle","no faction on patrol obj");	
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");

	if(faction < 0)
	{
		LOG("gcw_damaged_vehicle","faction invalid on patrol obj");
		return SCRIPT_CONTINUE;
	}

	if(!factions.isPlayerSameGcwFactionAsSchedulerObject(player, self))
	{
		LOG("gcw_damaged_vehicle","Wrong Faction");
		return SCRIPT_CONTINUE;
	}
	else
	{
		if(utils.isProfession(player, utils.TRADER))
		{
			LOG("gcw_damaged_vehicle","player is trader");

			int repairs = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);

			if(repairs > 3)
			{
				sendSystemMessage(player, gcw.SID_DOESNT_NEED_REPAIR);
				return SCRIPT_CONTINUE;
			}

			if(!gcw.hasConstructionOrRepairTool(player, self))
			{
				gcw.playerSystemMessageResourceNeeded(player, self, false);
				return SCRIPT_CONTINUE;
			}
			
			if(groundquests.isQuestActive(player, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST))
			{			
				if(gcw.useGcwObjectForQuest(player, self, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST))
				{
					gcw.useConstructionOrRepairTool(player, self);
				}

				return SCRIPT_CONTINUE;
			}
			
			if(groundquests.hasCompletedQuest(player, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST))
			{
				groundquests.clearQuest(player, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST); 
			}
			if(!groundquests.isQuestActive(player, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST))
			{
				groundquests.grantQuest(player, gcw.GCW_REPAIR_DAMAGED_VEHICLE_QUEST); 
			}
		}
	}	

	return SCRIPT_CONTINUE;
}

messageHandler repairComplete()
{
	int repairs = getIntObjVar(self, gcw.GCW_OBJECT_REPAIR_COUNT);

	updateName(self);

	if(repairs > 3)
	{
		obj_id creator = utils.getObjIdScriptVar(self, "creator");

		if(isIdValid(creator))
		{
			messageTo(creator, "createRepairedVehicle", null, 0.0f, false);
		}
	
		destroyObject(self);
	}

	return SCRIPT_CONTINUE;
}