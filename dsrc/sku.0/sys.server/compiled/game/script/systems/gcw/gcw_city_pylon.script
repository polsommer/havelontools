include library.buff;
include library.factions;
include library.gcw;
include library.groundquests;
include library.prose;
include library.skill;
include library.stealth;
include library.sui;
include library.trial;
include library.utils;

const int PYLON_CONSTRUCTION_TIME				= 10;


const string_id SID_PYLON_CANNOT_USE				= new string_id("gcw", "pylon_construction_cannot_use");
const string_id SID_PYLON_CONSTRUCTION_COMPLETE			= new string_id("gcw", "pylon_construction_complete");
const string_id SID_PYLON_TOO_FAR				= new string_id("gcw", "pylon_too_far");
const string_id SID_PYLON_SUI_PROMPT				= new string_id("gcw", "pylon_construction_prompt");
const string_id SID_PYLON_ENTERED_COMBAT			= new string_id("gcw", "pylon_construction_entered_combat");
const string_id SID_PYLON_MOVED					= new string_id("gcw", "pylon_construction_moved");
const string_id SID_PYLON_INCAPACITATED				= new string_id("gcw", "pylon_construction_incapacitated");
const string_id SID_TOO_FATIGUED				= new string_id("gcw", "too_fatigued_to_construct");

trigger OnAttach()
{
	messageTo(self, "handleSetup", null, 1.0f, false);

	return SCRIPT_CONTINUE;
}

trigger OnHearSpeech(obj_id objSpeaker, string strText)
{
	if(!isGod(objSpeaker))
	{
		return SCRIPT_CONTINUE;
	}

	if(strText.equals("gcwbuild"))
	{
		int questsCompleted = getIntObjVar(self, "gcw.constructionQuestsCompleted");
	
		if(questsCompleted < gcw.GCW_CONSTRUCTION_MAXIMUM / 2)
		{
			questsCompleted = gcw.GCW_CONSTRUCTION_MAXIMUM / 2;
		}
		else if(questsCompleted < gcw.GCW_CONSTRUCTION_MAXIMUM)
		{
			questsCompleted = gcw.GCW_CONSTRUCTION_MAXIMUM;
		}
		
		setObjVar(self, "gcw.constructionQuestsCompleted", questsCompleted);
	}
	
	return SCRIPT_CONTINUE;
}

void updatePylonName(obj_id self)
{
	string name = utils.getStringScriptVar(self, "gcw.name");
	
	int questsCompleted =  getIntObjVar(self, "gcw.constructionQuestsCompleted");

	int questsMaximum = getMaximumQuests(self);

	if(questsMaximum == 0)
	{
		return;
	}

	string suffix = "";

	if(questsCompleted >= questsMaximum)
	{
		suffix = " (100 Resources)";
	}
	else if(questsCompleted <= 0)
	{
		suffix = " (0 Resources)";
	}
	else
	{
		suffix = " (" + questsCompleted + " Resources)";
	}
	
	setName(self, name + suffix);
}

string getImperialIcon()
{
	return "pt_icon_quest_red.prt";
}

string getRebelIcon()
{
	return "pt_icon_quest_red.prt";
}

messageHandler handleSetup()
{
	if(!utils.hasScriptVar(self, "faction"))
	{
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");

	if(factions.FACTION_FLAG_IMPERIAL == faction)
	{
		utils.setScriptVar(self, "gcwQuestIcon", getImperialIcon());
	}
	else if(factions.FACTION_FLAG_REBEL == faction)
	{
		utils.setScriptVar(self, "gcwQuestIcon", getRebelIcon());
	}

	gcw.playQuestIconParticle(self);

	updatePylonName(self);

	return SCRIPT_CONTINUE;
}

messageHandler handleUpdateName()
{
	updatePylonName(self);
	
	return SCRIPT_CONTINUE;
}

messageHandler playQuestIcon()
{
	int questsCompleted = getIntObjVar(self, "gcw.constructionQuestsCompleted");
	
	if(questsCompleted < getMaximumQuests(self))
	{
		gcw.playQuestIconHandler(self, params);
	}

	return SCRIPT_CONTINUE;
}

int getMaximumQuests(obj_id self)
{
	return gcw.GCW_CONSTRUCTION_MAXIMUM;
}

trigger OnGetAttributes(obj_id player, string[] names, string[] attribs)
{
	int idx = utils.getValidAttributeIndex(names);

	if(idx == -1)
		return SCRIPT_CONTINUE;

	int questsCompleted = getIntObjVar(self, "gcw.constructionQuestsCompleted");
	int questsMaximum = getMaximumQuests(self);
	
	
	if(questsCompleted > questsMaximum)
	{
		questsCompleted = questsMaximum;
	}

	if(questsCompleted > 0)
	{
		names[idx] = "construction_completed";
		attribs[idx] = "" + questsCompleted + " (" + questsMaximum + " Maximum)";
		idx++;
	}
	else
	{
		names[idx] = "construction_completed";
		attribs[idx] = "0 (" + questsMaximum + " Maximum)";
		idx++;
	}
	
	if(questsCompleted <= 0)
	{
		names[idx] = "pylon_level";
		attribs[idx] = "0 (No construction)";
		idx++;
	}
	else if(questsCompleted < getMaximumQuests(self) / 2)
	{
		names[idx] = "pylon_level";
		attribs[idx] = "1";
		idx++;
	}
	else if (questsCompleted < getMaximumQuests(self))
	{
		names[idx] = "pylon_level";
		attribs[idx] = "2";
		idx++;
	}
	else if (questsCompleted >= getMaximumQuests(self))
	{
		names[idx] = "pylon_level";
		attribs[idx] = "3";
		idx++;
	}
	
	return SCRIPT_CONTINUE;
}

// Default; Define in base script.
string getConstructionQuest()
{
	return "gcw_construct_barricade";
}

// Default; Define in base script
boolean hasConstructionResources(obj_id player)
{
	return false;
}

// Default; Define in base script
boolean consumeConstructionResources(obj_id player)
{
	return false;
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(!isIdValid(player) || !exists(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(!utils.hasScriptVar(self, "faction"))
	{
		return SCRIPT_CONTINUE;
	}
	
	int faction = utils.getIntScriptVar(self, "faction");
	if(faction < 0)
	{
		return SCRIPT_CONTINUE;
	}
	
	menu_info_data data = mi.getMenuItemByType(menu_info_types.ITEM_USE);

	if(data != null)
		data.setServerNotify (true);

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	if(!isIdValid(player) || !exists(player))
	{
		return SCRIPT_CONTINUE;
	}
	
	if(item == menu_info_types.ITEM_USE)
	{
		if(isDead(player) || isIncapacitated(player) || !factions.isPlayerSameGcwFactionAsSchedulerObject(player, self) || factions.isOnLeave(player))
		{
			sendSystemMessage(player, SID_PYLON_CANNOT_USE);
			return SCRIPT_CONTINUE;
		}

		if(getDistance(self, player) > 5.0f)
		{
			sendSystemMessage(player, SID_PYLON_TOO_FAR);
			return SCRIPT_CONTINUE;
		}

		int questsCompleted = getIntObjVar(self, "gcw.constructionQuestsCompleted");

		if(questsCompleted >= getMaximumQuests(self))
		{
			sendSystemMessage(player, SID_PYLON_CONSTRUCTION_COMPLETE);
			return SCRIPT_CONTINUE;
		}

		string skillTemplate = getSkillTemplate(player);
		string profession = skill.getProfessionName(skillTemplate);

		string questName = getConstructionQuest();

		if(groundquests.hasCompletedQuest(player, questName))
		{
			groundquests.clearQuest(player, questName);
		}

		// Quest assignment.
		if(!groundquests.isQuestActive(player, questName))
		{
			groundquests.grantQuest(player, questName);
			
			return SCRIPT_CONTINUE;
		}
		
		// Zip bar construction
		if(groundquests.isQuestActive(player, questName) && gcw.hasConstructionOrRepairTool(player, self))
		{
			startConstructionAttempt(self, player);

			faceTo(player, self);
			doAnimationAction(player, "manipulate_medium");
			
			location loc = getLocation(self);
			
			playClientEffectLoc(self, "appearance/pt_gcw_pylon_construction.prt", loc, 0);
		}
		else if(groundquests.isQuestActive(player, questName) && !gcw.hasConstructionOrRepairTool(player, self))
		{
			gcw.playerSystemMessageResourceNeeded(player, self, true);
		}
	}
	
	return SCRIPT_CONTINUE;
}

void startConstructionAttempt(obj_id self, obj_id player)
{
	int gameTime = getGameTime();

	stealth.testInvisCombatAction(player, self);

	int flags = 0;
	flags |= sui.CD_EVENT_LOCOMOTION;
	flags |= sui.CD_EVENT_INCAPACITATE;
	flags |= sui.CD_EVENT_DAMAGED;
	flags |= sui.CD_EVENT_STEALTHED;
	flags |= sui.CD_EVENT_DAMAGE_IMMUNE;

	int captureTime = PYLON_CONSTRUCTION_TIME + gcw.getFatigueTimerMod(player);

	if(captureTime > gcw.GCW_FATIGUE_TIMER_MAX)
	{
		captureTime = gcw.GCW_FATIGUE_TIMER_MAX;
	}

	if(isGod(player))
	{
		captureTime = 3;
	}

	int pid = sui.smartCountdownTimerSUI(self, player, "gcwPylonConstruction", SID_PYLON_SUI_PROMPT, 0, captureTime, "handleConstructionAttemptResults", 4.0f, flags);
}

messageHandler handleConstructionAttemptResults()
{
	int pid = params.getInt("id");
	obj_id player = params.getObjId("player");

	if(!isIdValid(player) || !exists(player) || factions.isOnLeave(player))
	{
		return SCRIPT_CONTINUE;
	}

	int bp = sui.getIntButtonPressed(params);

	if(bp == sui.BP_CANCEL)
	{
		detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);

		return SCRIPT_CONTINUE;
	}
	else if(bp == sui.BP_REVERT)
	{
		int event = params.getInt("event");

		if(event == sui.CD_EVENT_COMBAT)
			sendSystemMessage(player, SID_PYLON_ENTERED_COMBAT);
		else if(event == sui.CD_EVENT_LOCOMOTION)
			sendSystemMessage(player, SID_PYLON_MOVED);
		else if(event == sui.CD_EVENT_INCAPACITATE)
			sendSystemMessage(player, SID_PYLON_INCAPACITATED);

		return SCRIPT_CONTINUE;
	}

	if(!hasObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR))
	{
		return SCRIPT_CONTINUE;
	}

	int test_pid = getIntObjVar(player, sui.COUNTDOWNTIMER_SUI_VAR);

	if(pid != test_pid)
	{
		return SCRIPT_CONTINUE;
	}

	forceCloseSUIPage(pid);

	detachScript(player, sui.COUNTDOWNTIMER_PLAYER_SCRIPT);

	if(!factions.isPlayerSameGcwFactionAsSchedulerObject(player, self))
	{
		return SCRIPT_CONTINUE;
	}
	
	int questsCompleted = getIntObjVar(self, "gcw.constructionQuestsCompleted");

	if(questsCompleted >= getMaximumQuests(self))
	{
		sendSystemMessage(player, SID_PYLON_CONSTRUCTION_COMPLETE);
		return SCRIPT_CONTINUE;
	}
		
	string questName = getConstructionQuest();
	if(questName == null || questName.length() <= 0)
	{
		return SCRIPT_CONTINUE;
	}
	
	LOG("gcw_constrction","handleConstructionAttemptResults checking for quest: "+questName);

	if(!groundquests.isQuestActive(player, questName))
	{
		return SCRIPT_CONTINUE;
	}

	LOG("gcw_constrction","handleConstructionAttemptResults checking tasks for quest: "+questName);
	
	if(!groundquests.isTaskActive(player, questName, gcw.GCW_CONSTRUCTION_TASK + "_" + questName))
	{
		return SCRIPT_CONTINUE;
	}

	LOG("gcw_constrction","handleConstructionAttemptResults task found");
	

	if(!isValidId(self) || !exists(self))
		return SCRIPT_CONTINUE;

	if(!hasObjVar(self, gcw.GCW_SPAWN_ID_OBJVAR))
		return SCRIPT_CONTINUE;

	string spawnId = getStringObjVar(self, gcw.GCW_SPAWN_ID_OBJVAR);
	if(spawnId == null || spawnId.length() <= 0)
		return SCRIPT_CONTINUE;

	string desiredTemplate = "";

	if(!hasObjVar(self, gcw.GCW_TOOL_TEMPLATE_OBJVAR))
		return SCRIPT_CONTINUE;

	desiredTemplate = getStringObjVar(self, gcw.GCW_TOOL_TEMPLATE_OBJVAR);

	obj_id[] toolList = utils.getAllItemsPlayerHasByTemplate(player, desiredTemplate);

	int bestToolValue = 0;	
	int toolValue = 0;
	obj_id bestTool = null;

	for(int i = 0; i < toolList.length; i++ )
	{
		string itemTemplate = getTemplateName(toolList[i]);

		if(itemTemplate == desiredTemplate)
		{
			if(hasObjVar(toolList[i], "crafting_components.power"))
			{
				toolValue = (int)getFloatObjVar(toolList[i], "crafting_components.power");
			}

			if(toolValue > bestToolValue)
			{
				bestToolValue = toolValue;
				bestTool = toolList[i];
			}
		}
	}

	decrementCount(bestTool);

	groundquests.sendSignal(player, gcw.GCW_CONSTRUCTION_SIGNAL + "_" + questName);	
	trial.addNonInstanceFactionParticipant(player, self);
	
	int gameTime = getGameTime();
	params.put("gcwFatigueTime", gameTime);
	utils.setScriptVar(player, "gcw.fatigueTime", gameTime);
	messageTo(player, "gcwFatigueDecay", params, 120.0f, false);
	
	int completed = getIntObjVar(self, "gcw.constructionQuestsCompleted");
	string skillTemplate = getSkillTemplate(player);
	string profession = skill.getProfessionName(skillTemplate);
	
	if(profession.equals("trader"))
	{
		buff.applyBuff(player, "gcw_fatigue");
		completed += bestToolValue;
	}
	else
	{
		buff.applyBuffWithStackCount(player, "gcw_fatigue", 5);
		completed += bestToolValue;
	}

	if(completed > 100)
	{
		completed = 100;
	}

	setObjVar(self, "gcw.constructionQuestsCompleted", completed);
	updatePylonName(self);

	gcw.gcwInvasionCreditForCrafting(player);

	return SCRIPT_CONTINUE;
}