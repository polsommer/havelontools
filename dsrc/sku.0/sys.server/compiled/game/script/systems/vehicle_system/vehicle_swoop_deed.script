include library.callable;
include library.pet_lib;
include library.bio_engineer;
include library.utils;
include library.create;
include library.vehicle;

const string MENU_FILE = "pet/pet_menu";

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(canManipulate(player, self, true, true, 15, true))
	{
		mi.addRootMenu(menu_info_types.VEHICLE_GENERATE, new string_id(MENU_FILE,"menu_generate"));
	}

	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect (obj_id player, int item)
{
	if(item == menu_info_types.VEHICLE_GENERATE)
	{
		if(vehicle.hasMaxStoredVehicles(player))
		{
			sendSystemMessage(player, vehicle.SID_SYS_HAS_MAX_VEHICLE);
			return SCRIPT_CONTINUE;
		}

		//string creatureName = getStringObjVar(self, "creature_attribs.type");
		//int petType = pet_lib.getPetType(creatureName);

		debugServerConsoleMsg(self, "+++ VEHICLE_DEED . onObjectMenuSelect +++ Attempting to 'tame' the vehicular prototype deed object.");

		// Create a new pet controller
		obj_id pet = createCraftedCreatureDevice(player, self);

		// Destroy the deed
		if(isIdValid(pet))
		{
			CustomerServiceLog(
				"vehicle_deed",
				"vehicle deed used: deed=" + self +
				" pcd=" + pet +
				" player=" + player + "(" + getPlayerName(player) + ")");
			destroyObject(self);
		}
		else
			debugServerConsoleMsg(self, "+++ VEHICLE_DEED . onObjectMenuSelect +++ Failed to make PCD for Vehicle Prototype.");
	}

	return SCRIPT_CONTINUE;
}

obj_id createCraftedCreatureDevice(obj_id player, obj_id deed)
{
	debugServerConsoleMsg(player, "+++ VEHICLE_DEED . createCraftedCreatureDevice +++ Entered PCD/Pet creation function.");

	// Create a new control device
	obj_id datapad = utils.getPlayerDatapad(player);

	debugServerConsoleMsg(player, "+++ VEHICLE_DEED . createCraftedCreatureDevice +++ player datapad objide detected as: #" + datapad);

	if(!isIdValid(datapad))
	{
		return null;
	}

	string controlTemplate = "object/intangible/vehicle/speederbike_swoop_pcd.iff";
	obj_id petControlDevice = createObject(controlTemplate, datapad, "");
	if(!isIdValid(petControlDevice))
	{
		sendSystemMessageTestingOnly(player, "Failed to create pet control device for vehicle");
		return null;
	}
	else
	{
		setObjVar(petControlDevice, "pet.crafted", true);
		setObjVar(petControlDevice, "vehicle.template", "speederbike_swoop");
		attachScript(petControlDevice, "systems.vehicle_system.vehicle_control_device");
		debugServerConsoleMsg(player, "+++ VEHICLE_DEED . createCraftedCreatureDevice +++ successfully created PCD object for vehicular prototype. Obj_id is #" + petControlDevice);
	}

	// Create the new pet
	obj_id pet = create.object("object/mobile/vehicle/speederbike_swoop.iff", getLocation(player));
	if(!isIdValid(pet))
	{
		debugServerConsoleMsg(player, "+++ VEHICLE_DEED . createCraftedCreatureDevice +++ OBJ_ID Validity check on Vehicular_Prototype pet object came back as NOT VALID");
		return petControlDevice;
	}

	debugServerConsoleMsg(player, "+++ VEHICLE_DEED . createCraftedCreatureDevice +++ SUCCESSFULLY created the vehicular_prototype pet object. Prepping to attach objvars to it");

	// Attach it to the control device
	callable.setCallableCD(pet, petControlDevice);

	setObjVar(pet, "vehicularTestBed", 1);

	//make vehicle mountable
	if(couldPetBeMadeMountable(pet) != 0)
	{
		debugServerConsoleMsg(null, "+++ VEHICLE . onAttach +++ couldPetBeMadeMountable(pet) returned FALSE.");
		return pet;
	}

	if(!makePetMountable(pet))
	{
		debugServerConsoleMsg(null, "+++ VEHICLE . onAttach +++ makePetMountable(pet) returned FALSE.");
		return pet;
	}
	else
	{
		setObjVar(petControlDevice, "ai.pet.trainedMount", 1);
	}

	callable.setCallableLinks(player, petControlDevice, pet);

	return petControlDevice;
}

