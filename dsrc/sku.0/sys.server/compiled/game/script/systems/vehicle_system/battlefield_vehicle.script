include library.ai_lib;
include library.armor;
include library.callable;
include library.combat;
include library.pet_lib;
include library.attrib;
include library.vehicle;
include library.buff;
include library.utils;
include library.trial;
include library.factions;
include library.stealth;

//----------------------------------------------------------

const string MENU_FILE = "pet/pet_menu";
const string TABLE = "datatables/vehicle/battlefield_vehicle.iff";
const boolean debug = false;

//----------------------------------------------------------

trigger OnAttach()
{
	checkForAllowedZones(self);
	
	setAttributeAttained(self, attrib.VEHICLE);
	detachScript(self, "systems.vehicle_system.vehicle_base");
	detachScript(self, "systems.vehicle_system.vehicle_ping");
	callable.setCallableCD(self, self);
	makePetMountable(self);
	trial.setHp(self, dataTableGetInt(TABLE, getVehicleType(self), "default_hp"));
	setArmor(self, dataTableGetInt(TABLE, getVehicleType(self), "default_armor"));
	establishFaction(self);
	vehicle.initializeVehicle(self);
	return SCRIPT_CONTINUE;
}

void setArmor(obj_id target, int amount)
{
	if ( !isIdValid(target) )
	{
		return;
	}

	if ( amount < 0 )
	{
		return;
	}

	applySkillStatisticModifier(target, "expertise_innate_protection_all", amount);
	armor.recalculateArmorForMob(target);
	return;
}

void establishFaction(obj_id self)
{
	string vehicleFaction = dataTableGetString(TABLE, getVehicleType(self), "faction");

	if (vehicleFaction.equals("none"))
		return;

	factions.setFaction(self, vehicleFaction);
}

trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	checkForAllowedZones(self);
	
	if (ai_lib.aiIsDead(player) )
	{
		return SCRIPT_CONTINUE;
	}
	if (isDisabled(self))
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( stealth.hasInvisibleBuff(player) )
	{
		return SCRIPT_CONTINUE;
	}

	if (factions.getFaction(self) != null)
	{
		if (factions.getFaction(self).equals("Imperial") && !factions.isImperial(player))
			return SCRIPT_CONTINUE;
		else if (factions.getFaction(self).equals("Rebel") && !factions.isRebel(player))
			return SCRIPT_CONTINUE;
	}

	boolean isMountedOn = isMountedOnCreatureQueried(self, player);
	boolean isOwnedByPlayer = player == getMaster(self);

	if (!isMountedOn)
	{
		if (!doesMountHaveRoom(self))
		{
			return SCRIPT_CONTINUE;
		}
	}
	if(getMovementPercent(player) == 0.0f)
	{
		return SCRIPT_CONTINUE;
	}

	mi.addRootMenu (menu_info_types.SERVER_MENU10, new string_id(MENU_FILE,"menu_enter_exit")); // Enter/Exit toggle
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------

trigger OnObjectMenuSelect(obj_id player, int item)
{
	checkForAllowedZones(self);
	
	if (isDisabled(self))
	{
		return SCRIPT_CONTINUE;
	}

	boolean isMountedOn = isMountedOnCreatureQueried(self, player);

	if ((item != menu_info_types.SERVER_MENU10))
	{
		return SCRIPT_CONTINUE;
	}
	
	if ( stealth.hasInvisibleBuff(player) )
	{
		return SCRIPT_CONTINUE;
	}

	if ( ai_lib.isAiDead( self ) || isDead(player))
	{
		return SCRIPT_CONTINUE;
	}
	string creature_name = getName(self);

	if(getMovementPercent(player) == 0.0f)
	{
		return SCRIPT_CONTINUE;
	}

	if(item == menu_info_types.SERVER_MENU10)
	{

		if(isMountedOn)
		{

			queueCommand(player, ##"battlefieldDismount", self, creature_name, COMMAND_PRIORITY_FRONT);
		}
		else
		{
			if ( !utils.hasScriptVar(self, "battlefield_vehicle.aboutToBeDestroyed") )
				queueCommand(player, ##"battlefieldMount", self, creature_name, COMMAND_PRIORITY_FRONT);
		}
	}
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------

boolean isMountedOnCreatureQueried( obj_id pet, obj_id player )
{
	//check that both master and pet are valid objects
	if ( !isIdValid( pet ) )
		return false;
	if ( !isIdValid( player ) )
		return false;

	obj_id playerCurrentMount = getMountId (player);

	//check that the player is mounted on something
	if ( !isIdValid( playerCurrentMount ) )
		return false;

	//check that the player is mounted on the creature creature targeted
	if ( playerCurrentMount != pet )
		return false;

	return true;
}

//----------------------------------------------------------


//----------------------------------------------------------

trigger OnGetAttributes( obj_id player, string[] names, string[] attribs )
{

	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------

trigger OnObjectDisabled (obj_id killer)
{
	removePlayersFromVehicleAndDestroySelf(self, 5.0f);
	return SCRIPT_CONTINUE;
}

//----------------------------------------------------------

trigger OnDestroy()
{
	removePlayersFromVehicle(self);
	return SCRIPT_CONTINUE;
}

void removePlayersFromVehicleAndDestroySelf(obj_id self, float delay)
{
	utils.setScriptVar(self, "battlefield_vehicle.aboutToBeDestroyed", true);
	
	removePlayersFromVehicle(self);
	
	if ( buff.hasBuff(self, "vehicle_passenger") )
		buff.removeBuff(self, "vehicle_passenger");

	kill(self);
	messageTo(self, "destroyNow", null, delay, false);
}

void removePlayersFromVehicle(obj_id self)
{	
	obj_id rider = getRiderId(self);
	if ( isIdValid(rider) )
	{		
		string creature_name = getName(self);
		queueCommand(rider, ##"battlefieldDismount", self, creature_name, COMMAND_PRIORITY_FRONT);
		int vehicleBuff = buff.getBuffOnTargetFromGroup(rider, "vehicle");
		if(vehicleBuff !=0)
		{
			buff.removeBuff(rider, vehicleBuff);
		}
	}
	
	checkForPassengers(self);
	return;
}

void areaDebugMessaging(obj_id self, string message)
{
	obj_id[] players = getAllPlayers(getLocation(self), 5.0f);
	if ( players != null && players.length > 0 )
	{
		for( int i=0; i<players.length; i++ )
			sendSystemMessage(players[i], message, "");
	}
}

//----------------------------------------------------------

messageHandler handleCheckForAllowedZones()
{
	checkForAllowedZones(self);
	return SCRIPT_OVERRIDE;
}

trigger OnLogin()
{
	checkForAllowedZones(self);
	return SCRIPT_OVERRIDE;
}

trigger OnInitialize()
{
	checkForAllowedZones(self);
	return SCRIPT_OVERRIDE;
}

void debugMessaging(obj_id self, string message)
{
	obj_id[] players = getAllPlayers(getLocation(self), 10.0f);
	if ( players != null && players.length > 0 )
	{
		for( int i=0; i<players.length; i++ )
			sendSystemMessage(players[i], message, "");
	}
}

void checkForAllowedZones(obj_id self)
{
	string allowedZonesString = "all";
	boolean allowedHere = false;
	
	if ( hasObjVar(self, "battlefield_vehicle.overrideAllowedZones") )
	{
		allowedZonesString = getStringObjVar(self, "battlefield_vehicle.overrideAllowedZones");
	}
	else if ( utils.hasScriptVar(self, "battlefield_vehicle.allowedZones") )
	{
		allowedZonesString = utils.getStringScriptVar(self, "battlefield_vehicle.allowedZones");
	}
	else
	{
		allowedZonesString = dataTableGetString(TABLE, getVehicleType(self), "allowed_zones");
		utils.setScriptVar(self, "battlefield_vehicle.allowedZones", allowedZonesString);
	}
	
	if ( allowedZonesString != null && allowedZonesString.length() > 0 )
	{		
		if ( !allowedZonesString.equals("all") )
		{
			location here = getLocation(self);
			string zone = here.area;
			
			string[] allowedZones = split(allowedZonesString, ',');			
			for ( int j = 0; j < allowedZones.length; j++ )
			{
				if ( allowedZones[j].equals(zone) )
				{
					allowedHere = true;
				}
			}
		}
		else
		{
			// If there are allowed zones = all, then it is allowed anywhere
			allowedHere = true;
		}
	}
	else
	{
		// If there are no allowed zones set for a vehicle, it is allowed anywhere
		allowedHere = true;
	}
	
	if ( !allowedHere )
	{
		removePlayersFromVehicleAndDestroySelf(self, 1.0f);
	}
	
	return;
}

messageHandler destroyNow()
{
	destroyObject(self);
	return SCRIPT_OVERRIDE;
}

trigger OnReceivedItem(obj_id srcContainer, obj_id transferer, obj_id player)
{
	checkForAllowedZones(self);
	
	callable.storeCallables(player);
	string trunc_name = getVehicleType(self);

	dictionary dict = dataTableGetRow(TABLE, trunc_name);

	if (dict == null || dict.isEmpty())
	{
		debugSpeakMsg(player, "Egads, this vehicle could not find itself in the BF vehicle table");
		return SCRIPT_OVERRIDE;
	}

	utils.setScriptVar(player, combat.DAMAGE_REDIRECT, self);

	obj_id driver = getRiderId(self);
	boolean isDriver = isIdValid(driver) && exists(driver) && driver == player;

	string overrideAttack = getOverrideAttack(dict, isDriver);
	string[] abilities = getVehicleCommands(dict, isDriver);

	if (!overrideAttack.equals("none"))
		overrideDefaultAttack(player, overrideAttack);

	if(!isDriver && isIdValid(driver))
	{
		buff.applyBuff(self, "vehicle_passenger");
	}
	
	string driverBuff = dict.getString("driver_buff");
	if ( driverBuff != null && driverBuff.length() > 0 && !driverBuff.equals("none") )
	{
		if ( isDriver )
		{
			buff.applyBuff(player, self, driverBuff);
		}
	}

	setBeastmasterPet(player, self);
	setBeastmasterPetCommands(player, abilities);

	return SCRIPT_CONTINUE;
}

trigger OnLostItem(obj_id destContainer, obj_id transferer, obj_id player)
{
	setBeastmasterPet(player, null);
	removeDefaultAttackOverride(player);
	utils.removeScriptVar(player, combat.DAMAGE_REDIRECT);

	checkForPassengers(self);
	
	checkForAllowedZones(self);
 	return SCRIPT_CONTINUE;
}

void checkForPassengers(obj_id self)
{
	int numPlayers = 0;
	obj_id[] stuff = getContents(self);
	if ( stuff != null && stuff.length > 0 )
	{
		for ( int i = 0; i < stuff.length; i++ )
		{
			if ( isPlayer(stuff[i]) )
			{
				++numPlayers;
			}
		}
	}
	
	if ( numPlayers <= 1 &&  buff.hasBuff(self, "vehicle_passenger") )
	{
		buff.removeBuff(self, "vehicle_passenger");
	}
	
	return;
}

string getOverrideAttack(dictionary dict, boolean isDriver)
{
	if (isDriver)
	{
		return dict.getString("driver_default_attack");
	}
	else
		return dict.getString("gunner_default_attack");
}

string[] getVehicleCommands(dictionary dict, boolean isDriver)
{
	string commandString = "none";

	if (isDriver)
	{
		commandString = dict.getString("driver_special_list");
	}
	else
	{
		commandString = dict.getString("gunner_special_list");
	}

	string[] commandList = {"","","","","","","","",""};

	if (commandString.equals("none"))
		return commandList;

	string[] parse = split(commandString, ',');

	for (int i=0;i<parse.length && i < 8;i++)
	{
		commandList[i] = parse[i];
	}

	return commandList;

}

string getVehicleType(obj_id vehicle)
{
	return utils.getTemplateFilenameNoPath(vehicle);
}