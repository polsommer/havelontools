/**
 * Copyright (c) ©2000-2002 Sony Online Entertainment Inc.
 * All Rights Reserved
 *
 * Title:        systems.beast.decoration_item.script
 * Description:
 * @author       jbenjamin
 * @version      $Revision: 0$
 */

include library.beast_lib;
include library.create;
include library.hue;
include library.incubator;
include library.sui;
include library.utils;



const string_id SID_CONVERT_PET_ITEM_TO_DNA		= new string_id("incubator", "convert_pet_item_to_dna");
const string_id SID_CONVERT_PROMPT			= new string_id("incubator", "convert_pet_item_prompt");
const string_id SID_CONVERT_TITLE			= new string_id("incubator", "convert_pet_item_title");
const string_id SID_REPORT_PET_CONVERSION_FAIL		= new string_id("incubator", "report_pet_conversion_fail");
const string_id PCOLOR 					= new string_id("sui", "set_primary_color");


trigger OnObjectMenuRequest(obj_id player, menu_info mi)
{
	if(utils.isNestedWithinAPlayer(self))
	{
		if(beast_lib.isBeastMaster(player))
			int management_root = mi.addRootMenu (menu_info_types.SERVER_MENU1, SID_CONVERT_PET_ITEM_TO_DNA);
			
	}
		
	if(!hasObjVar(self, beast_lib.OBJVAR_OLD_PET_REHUED) && getOwner(self) == player)
	{
		mi.addRootMenu(menu_info_types.SERVER_MENU2, PCOLOR);
	}
	
	if(!hasObjVar(self, beast_lib.OBJVAR_OLD_PET_RENAMED) && getOwner(self) == player)
	{
		mi.addRootMenu(menu_info_types.SERVER_MENU3, new string_id("beast", "name_beast"));
	}
	return SCRIPT_CONTINUE;
}

trigger OnObjectMenuSelect(obj_id player, int item)
{
	sendDirtyObjectMenuNotification(self);
	if (item == menu_info_types.SERVER_MENU1 && utils.isNestedWithinAPlayer(self))
	{
		if(beast_lib.isBeastMaster(player))
		{
			int pid = sui.msgbox(self, player, "@" + SID_CONVERT_PROMPT, sui.YES_NO, "@" + SID_CONVERT_TITLE, "handlerSuiConvertPetItemToDna");
			return SCRIPT_CONTINUE;
		}
	}
	if(item == menu_info_types.SERVER_MENU2 && getOwner(self) == player)
	{
		if(!hasObjVar(self, beast_lib.OBJVAR_OLD_PET_REHUED))
		{
			sui.colorize(self, player, self, hue.INDEX_1, "handlePrimaryColorize");
		}
	}
	
	if(item == menu_info_types.SERVER_MENU3 && !hasObjVar(self, beast_lib.OBJVAR_OLD_PET_RENAMED) && getOwner(self) == player)
	{
		sui.inputbox(self, player, "@beast:name_d", sui.OK_CANCEL, "@beast:name_t", sui.INPUT_NORMAL, null, "handleSetBeastName", null);
	}

	return SCRIPT_CONTINUE;
}

trigger OnInitialize()
{
	return SCRIPT_CONTINUE;
}

trigger OnAboutToBeTransferred(obj_id destContainer, obj_id transferer)
{
	//attempt to scale the size of the item when dropped. Have to revisit later.
	/*
	if(hasObjVar(self, incubator.DNA_TEMPLATE_OBJVAR))
	{
		string creatureTemplate = getStringObjVar(self, incubator.DNA_TEMPLATE_OBJVAR);

		//time to scale the creature to a smallwer size
		string[] splitTemplate = split(creatureTemplate, '/');

		int lastIndex = (splitTemplate.length - 1);
		int row = dataTableSearchColumnForString(splitTemplate[lastIndex], "template", beast_lib.BEASTS_TABLE);
		if(row < 0)
		{
			//shouldnt happen. But we will exit if it does
			return SCRIPT_CONTINUE;
		}

		dictionary dict = dataTableGetRow(beast_lib.BEASTS_TABLE, row);
		setScale(self, dict.getInt("minScale"));
	}
	*/
	
 	return SCRIPT_CONTINUE;
}

trigger OnTransferred(obj_id sourceContainer, obj_id destContainer, obj_id transferer)
{
 	return SCRIPT_CONTINUE;
}

//sui for converting pet item into a DNA core
messageHandler handlerSuiConvertPetItemToDna ()
{
	//chec params
	if(params == null || params.isEmpty())
	{
		return SCRIPT_CONTINUE;
	}
	//get button pressed
	int bp = sui.getIntButtonPressed(params);
	
	//if they pressed cancel then we bail out and do nothing
	if ( bp == sui.BP_CANCEL )
		return SCRIPT_CONTINUE;

	//get players id
	obj_id player = sui.getPlayerId(params);
	
	//set self to petItem id
	obj_id petItem = self;
	
	//check again if the player is beast master
	if(beast_lib.isBeastMaster(player))
	{
		//attempt to convert the pet item into a dna core
		if(incubator.convertPetItemToDna(player, petItem))
		{
			//tell cs we were a success
			CustomerServiceLog("BeastPetConversion: ", "petItem (" + petItem + ")"+ " was converted into a dna object, for player " + getFirstName(player) + "(" + player + "). PetItem(" + petItem + ") will now be destroyed.");
			destroyObject(petItem);
			return SCRIPT_CONTINUE;
		}
		else
		{
			//tell cs we failed
			CustomerServiceLog("BeastPetConversion: ", "petItem (" + petItem + ")"+ " was NOT converted into a dna object, for player " + getFirstName(player) + "(" + player + "). PetItem(" + petItem + ") will NOT be destroyed.");
			//tell the player we failed
			sendSystemMessage(player, SID_REPORT_PET_CONVERSION_FAIL);
		}
	}
	return SCRIPT_CONTINUE;
}

messageHandler handlePrimaryColorize()
{
	if (!isValidId(self))
	{
		return SCRIPT_CONTINUE;
	}

	int idx = sui.getColorPickerIndex(params);
	int bp = sui.getIntButtonPressed(params);
	if ( bp == sui.BP_CANCEL )
	{
		return SCRIPT_CONTINUE;
	}
	if ( idx > -1 )
	{
		setObjVar(self, beast_lib.OBJVAR_BEAST_HUE, idx);
		hue.setColor(self, "/private/index_color_1", idx);
		setObjVar(self, beast_lib.OBJVAR_OLD_PET_REHUED, 1);
	}
	return SCRIPT_CONTINUE;
}

messageHandler handleSetBeastName()
{
	// Store the vendor name.
	obj_id player = sui.getPlayerId(params);
	string beastName = sui.getInputBoxText(params);
	int btn = sui.getIntButtonPressed(params);
	
	if(btn == sui.BP_CANCEL)
	{
		return SCRIPT_CONTINUE;
	}

	// No zero length or obscene names.
	if(beastName == "" || isNameReserved(beastName))
	{
		// Ask them about the name.
		sendSystemMessage(player, new string_id("player_structure", "obscene"));
		sui.inputbox(self, player, "@beast:name_d", sui.OK_CANCEL, "@beast:name_t", sui.INPUT_NORMAL, null, "handleSetBeastName", null);
		return SCRIPT_CONTINUE;
	}

	if(beastName.length() < 3)
	{
		sendSystemMessage(player, new string_id("beast", "name_too_short"));
		sui.inputbox(self, player, "@beast:name_d", sui.OK_CANCEL, "@beast:name_t", sui.INPUT_NORMAL, null, "handleSetBeastName", null);
		return SCRIPT_CONTINUE;
	
	}

	if(beastName.length() > 40)
	{
		sendSystemMessage(player, new string_id("beast", "name_too_long"));
		sui.inputbox(self, player, "@beast:name_d", sui.OK_CANCEL, "@beast:name_t", sui.INPUT_NORMAL, null, "handleSetBeastName", null);
		return SCRIPT_CONTINUE;
	}
	
	sendDirtyObjectMenuNotification(self);
	
	setName(self, beastName);
	
	setObjVar(self, beast_lib.OBJVAR_OLD_PET_RENAMED, 1);
	setObjVar(self, incubator.DNA_PARENT_NAME, beastName);
	return SCRIPT_CONTINUE;
}
